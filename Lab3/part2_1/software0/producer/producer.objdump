
producer.elf:     file format elf32-littlenios2
producer.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000ce40 memsz 0x0000ce40 flags r-x
    LOAD off    0x0000e000 vaddr 0x00010000 paddr 0x0000ce60 align 2**12
         filesz 0x00001ddc memsz 0x000020dc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ccac  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000380  00010000  0000ce60  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  00010380  0000d1e0  0000e380  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000300  00011ddc  0000ec3c  0000fddc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000fddc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cd8  00000000  00000000  0000fe00  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001686  00000000  00000000  00010ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000239f0  00000000  00000000  0001215e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007a9e  00000000  00000000  00035b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013beb  00000000  00000000  0003d5ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001ae8  00000000  00000000  000511d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000227e  00000000  00000000  00052cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c14e  00000000  00000000  00054f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0006108c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  000610b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00064d6a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00064d6d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00064d72  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00064d73  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00064d74  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00064d7f  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00064d8a  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000003  00000000  00000000  00064d95  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000044  00000000  00000000  00064d98  2**0
                  CONTENTS, READONLY
 26 .jdi          000086d8  00000000  00000000  00064ddc  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00063bbd  00000000  00000000  0006d4b4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
00010000 l    d  .rodata	00000000 .rodata
00010380 l    d  .rwdata	00000000 .rwdata
00011ddc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO_1.c
00000000 l    df *ABS*	00000000 producer.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000550 l     F .text	00000058 __sprint_r
000100ae l     O .rodata	00000010 blanks.3452
0001009e l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000025cc l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00003ff4 l     F .text	00000058 std
00004100 l     F .text	00000008 __fp_lock
00004108 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00010380 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00011da8 l     O .rwdata	00000004 charset
000100e4 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001022c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
000084b4 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000095e0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00009f1c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00009f7c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000a080 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000a1a4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000a284 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000a3e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000a614 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011dcc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000a8cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010d3c l     O .rwdata	00001060 jtag_uart_0
0000a9bc l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000b15c l     F .text	00000228 altera_avalon_jtag_uart_irq
0000b384 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000ba00 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000bd24 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000c148 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000c298 l     F .text	000000f8 alt_file_locked
0000c51c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000cc48 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000cdfc l     F .text	00000040 alt_sim_halt
00005de4 g     F .text	00000094 _mprec_log10
00005ed0 g     F .text	00000088 __any_on
00007688 g     F .text	00000070 _isatty_r
00010204 g     O .rodata	00000028 __mprec_tinytens
0000a444 g     F .text	0000006c alt_main
00000428 g     F .text	000000a0 _puts_r
00011ddc g     O .bss	00000004 writep
00011e4c g     O .bss	00000100 alt_irq
000076f8 g     F .text	00000078 _lseek_r
0000acac g     F .text	00000060 altera_avalon_fifo_write_almostfull
0000d1e0 g       *ABS*	00000000 __flash_rwdata_start
00008fd4 g     F .text	00000088 __eqdf2
00000280 g     F .text	0000003c FIFO_1_INIT
000120dc g       *ABS*	00000000 __alt_heap_start
000003b0 g     F .text	00000044 printf
00007140 g     F .text	00000068 __sseek
0000405c g     F .text	000000a4 __sinit
00004d68 g     F .text	00000084 _setlocale_r
0000415c g     F .text	0000009c __sfmoreglue
0000a4d0 g     F .text	00000020 __malloc_unlock
00011de0 g     O .bss	00000004 readp
00005860 g     F .text	000000e0 memmove
0000a9f4 g     F .text	000000bc altera_avalon_fifo_init
0000414c g     F .text	00000010 _cleanup
0000ad6c g     F .text	00000064 altera_avalon_fifo_write_fifo
00005f58 g     F .text	000000bc _Balloc
000090e4 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00010000 g       *ABS*	00000000 __alt_mem_data_mem_0
00000000 g     F .entry	0000001c __reset
0000af2c g     F .text	00000028 altera_avalon_fifo_read_backpressure
00000020 g       *ABS*	00000000 __flash_exceptions_start
00007614 g     F .text	00000074 _fstat_r
00011e08 g     O .bss	00000004 errno
00011e10 g     O .bss	00000004 alt_argv
00019d9c g       *ABS*	00000000 _gp
0000abe4 g     F .text	00000068 altera_avalon_fifo_clear_event
00010bbc g     O .rwdata	00000180 alt_fd_list
0000c740 g     F .text	00000094 alt_find_dev
000057c0 g     F .text	000000a0 memcpy
00004140 g     F .text	0000000c _cleanup_r
0000927c g     F .text	000000f8 __floatsidf
0000c220 g     F .text	00000078 alt_io_redirect
000091f4 g     F .text	00000088 __ltdf2
0000ce60 g       *ABS*	00000000 __DTOR_END__
000004c8 g     F .text	00000014 puts
00005d34 g     F .text	000000b0 __ratio
0000b59c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000003f4 g     F .text	00000034 _printf_r
0000971c g     F .text	00000008 __udivsi3
0000a0e0 g     F .text	000000c4 isatty
00010114 g     O .rodata	000000c8 __mprec_tens
00004d44 g     F .text	00000008 __locale_charset
0000c9c4 g     F .text	00000090 alt_icache_flush
00011dfc g     O .bss	00000004 __malloc_top_pad
00011da4 g     O .rwdata	00000004 __mb_cur_max
00004d4c g     F .text	0000000c _localeconv_r
000066bc g     F .text	0000003c __i2b
00004728 g     F .text	0000049c __sfvwrite_r
000070c8 g     F .text	00000070 _sbrk_r
00011de4 g     O .bss	00000004 fullp
00007770 g     F .text	00000078 _read_r
00010780 g     O .rwdata	0000000c __lc_ctype
00011dc4 g     O .rwdata	00000004 alt_max_fd
00009c1c g     F .text	00000138 __unpack_d
000074f0 g     F .text	00000110 _fclose_r
00003fc0 g     F .text	00000034 fflush
00011e00 g     O .bss	00000004 __malloc_max_sbrked_mem
00008944 g     F .text	00000074 __adddf3
00005c14 g     F .text	00000120 __b2d
00007e54 g     F .text	00000660 __umoddi3
0000a2f0 g     F .text	000000f4 lseek
00011da0 g     O .rwdata	00000004 _global_impure_ptr
00006a64 g     F .text	000005f4 _realloc_r
000120dc g       *ABS*	00000000 __bss_end
0000c050 g     F .text	000000f8 alt_iic_isr_register
0000c614 g     F .text	0000010c alt_tick
000077e8 g     F .text	0000066c __udivdi3
000101dc g     O .rodata	00000028 __mprec_bigtens
00006944 g     F .text	00000120 __s2b
0000944c g     F .text	00000194 __floatunsidf
00005b34 g     F .text	00000060 __mcmp
00004128 g     F .text	00000018 __fp_lock_all
0000c008 g     F .text	00000048 alt_ic_irq_enabled
000002d4 g     F .text	00000098 producer
0000c57c g     F .text	00000098 alt_alarm_stop
00011e18 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
00010b94 g     O .rwdata	00000028 alt_dev_null
0000bc54 g     F .text	0000001c alt_dcache_flush_all
00005a00 g     F .text	00000070 __hi0bits
00009374 g     F .text	000000d8 __fixdfsi
0000ac4c g     F .text	00000060 altera_avalon_fifo_write_ienable
00011ddc g       *ABS*	00000000 __ram_rwdata_end
0000ab54 g     F .text	0000002c altera_avalon_fifo_read_almostempty
00011dbc g     O .rwdata	00000008 alt_dev_list
0000a7a8 g     F .text	00000124 write
00010380 g       *ABS*	00000000 __ram_rodata_end
00009fa8 g     F .text	000000d8 fstat
00006824 g     F .text	00000120 __pow5mult
00011df0 g     O .bss	00000004 __nlocale_changed
00009724 g     F .text	00000008 __umodsi3
000120dc g       *ABS*	00000000 end
0000b09c g     F .text	000000c0 altera_avalon_jtag_uart_init
0000ab80 g     F .text	0000003c altera_avalon_fifo_read_event
0000ce5c g       *ABS*	00000000 __CTOR_LIST__
00018000 g       *ABS*	00000000 __alt_stack_pointer
0000ba70 g     F .text	00000090 alt_avalon_timer_sc_init
00009888 g     F .text	00000080 __clzsi2
0000b7c0 g     F .text	00000240 altera_avalon_jtag_uart_write
0000404c g     F .text	00000004 __sfp_lock_acquire
0000ae40 g     F .text	00000058 altera_avalon_fifo_read_fifo
000056dc g     F .text	000000e4 memchr
000005a8 g     F .text	00001ec4 ___vfprintf_internal_r
00004414 g     F .text	00000314 _free_r
0000cc4c g     F .text	000001b0 __call_exitprocs
00011df4 g     O .bss	00000004 __mlocale_changed
00011db0 g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000003c _start
00011e1c g     O .bss	00000004 _alt_tick_rate
0000631c g     F .text	0000014c __lshift
00011e20 g     O .bss	00000004 _alt_nticks
0000a4f0 g     F .text	00000124 read
0000a960 g     F .text	0000005c alt_sys_init
0000cb14 g     F .text	00000134 __register_exitproc
00006468 g     F .text	00000254 __multiply
0000b434 g     F .text	00000074 altera_avalon_jtag_uart_close
0000972c g     F .text	00000038 __mulsi3
00010380 g       *ABS*	00000000 __ram_rwdata_start
00010000 g       *ABS*	00000000 __ram_rodata_start
00011e24 g     O .bss	00000028 __malloc_current_mallinfo
00006014 g     F .text	0000017c __d2b
0000af54 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000c8f4 g     F .text	000000d0 alt_get_fd
00009d54 g     F .text	000000c8 __fpcmp_parts_d
00007480 g     F .text	00000070 _close_r
0000caa0 g     F .text	00000074 memcmp
0000b004 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
000120dc g       *ABS*	00000000 __alt_stack_base
0000b04c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00002490 g     F .text	0000013c __swsetup_r
0000aab0 g     F .text	0000003c altera_avalon_fifo_read_status
00008d7c g     F .text	00000258 __divdf3
000041f8 g     F .text	000000f0 __sfp
00005e78 g     F .text	00000058 __copybits
0001078c g     O .rwdata	00000408 __malloc_av_
00004058 g     F .text	00000004 __sinit_lock_release
000089b8 g     F .text	000003c4 __muldf3
00007224 g     F .text	00000060 __sread
0000af00 g     F .text	0000002c altera_avalon_fifo_read_other_info
0000c7d4 g     F .text	00000120 alt_find_file
0000bc70 g     F .text	000000b4 alt_dev_llist_insert
0000a4b0 g     F .text	00000020 __malloc_lock
0000a6ec g     F .text	000000bc sbrk
00003dc4 g     F .text	000001fc _fflush_r
000073b8 g     F .text	000000c8 _calloc_r
00011ddc g       *ABS*	00000000 __bss_start
00005940 g     F .text	00000098 memset
000002bc g     F .text	00000018 main
00011e14 g     O .bss	00000004 alt_envp
00011e04 g     O .bss	00000004 __malloc_max_total_mem
0000afac g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000abbc g     F .text	00000028 altera_avalon_fifo_read_level
00007138 g     F .text	00000008 __sclose
00018000 g       *ABS*	00000000 __alt_heap_limit
00007600 g     F .text	00000014 fclose
00011f4c g     O .bss	00000190 _atexit0
00002810 g     F .text	000015b4 _dtoa_r
00004f9c g     F .text	00000740 _malloc_r
00011dc8 g     O .rwdata	00000004 alt_errno
00004c8c g     F .text	000000b8 _fwalk
000001f0 g     F .text	00000048 WRITE_FIFO_1
0000965c g     F .text	00000060 __divsi3
00010238 g     O .rodata	00000014 __thenan_df
000042e8 g     F .text	0000012c _malloc_trim_r
0000ce60 g       *ABS*	00000000 __CTOR_END__
00007284 g     F .text	000000bc strcmp
0000ce60 g       *ABS*	00000000 __flash_rodata_start
0000ce60 g       *ABS*	00000000 __DTOR_LIST__
0000036c g     F .text	00000044 delay
0000905c g     F .text	00000088 __nedf2
0000a92c g     F .text	00000034 alt_irq_init
0000a674 g     F .text	00000078 alt_release_fd
0001024c g     O .rodata	00000100 __clz_tab
00011df8 g     O .bss	00000004 _PathLocale
0000ca54 g     F .text	00000014 atexit
00007340 g     F .text	00000078 _write_r
00004dec g     F .text	0000001c setlocale
00011d9c g     O .rwdata	00000004 _impure_ptr
00011e0c g     O .bss	00000004 alt_argc
0000bde8 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00005b94 g     F .text	00000080 __ulp
00007058 g     F .text	00000040 __isinfd
00004110 g     F .text	00000018 __fp_unlock_all
00011db4 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00004d58 g     F .text	00000010 localeconv
0000ae98 g     F .text	00000068 altera_avalon_fifo_write_other_info
0000be7c g     F .text	00000050 alt_ic_isr_register
00011ddc g       *ABS*	00000000 _edata
000120dc g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
0000b4a8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000bf68 g     F .text	000000a0 alt_ic_irq_disable
000071a8 g     F .text	0000007c __swrite
00011dac g     O .rwdata	00000004 __malloc_trim_threshold
0000c720 g     F .text	00000020 altera_nios2_qsys_irq_init
0000ca68 g     F .text	00000038 exit
00004bc4 g     F .text	000000c8 _fwalk_reent
00006190 g     F .text	0000018c __mdiff
000096bc g     F .text	00000060 __modsi3
0000aaec g     F .text	0000003c altera_avalon_fifo_read_ienable
00018000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004050 g     F .text	00000004 __sfp_lock_release
0000ce3c g     F .text	00000020 _exit
00007098 g     F .text	00000030 __isnand
0000bb00 g     F .text	00000154 alt_alarm_start
00009764 g     F .text	00000124 __muldi3
0000ab28 g     F .text	0000002c altera_avalon_fifo_read_almostfull
00004e08 g     F .text	00000194 __smakebuf_r
000004dc g     F .text	00000074 strlen
0000c390 g     F .text	0000018c open
0000add0 g     F .text	00000070 altera_avalon_read_fifo
0000916c g     F .text	00000088 __gedf2
00000238 g     F .text	00000048 READ_FIFO_1
0000be4c g     F .text	00000030 alt_icache_flush_all
00011dd0 g     O .rwdata	00000004 alt_priority_mask
00011de8 g     O .bss	00000004 emptyp
0000becc g     F .text	0000009c alt_ic_irq_enable
0000246c g     F .text	00000024 __vfprintf_internal
000088c4 g     F .text	00000080 __subdf3
00005a70 g     F .text	000000c4 __lo0bits
0000ad0c g     F .text	00000060 altera_avalon_fifo_write_almostempty
00011dd4 g     O .rwdata	00000008 alt_alarm_list
0000bd84 g     F .text	00000064 _do_ctors
00011dec g     O .bss	00000004 countp
00000000 g       *ABS*	00000000 __alt_mem_ins_mem_0
00009e1c g     F .text	00000100 close
0000a204 g     F .text	00000080 alt_load
00009908 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00004054 g     F .text	00000004 __sinit_lock_acquire
000066f8 g     F .text	0000012c __multadd
000059d8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18c79304 	addi	r3,r3,7756
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18c79304 	addi	r3,r3,7756
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	dee00014 	ori	sp,sp,32768

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c0:	d6a76714 	ori	gp,gp,40348
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1c8:	10877714 	ori	r2,r2,7644

    movhi r3, %hi(__bss_end)
     1cc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1d0:	18c83714 	ori	r3,r3,8412

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e4:	000a2040 	call	a204 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e8:	000a4440 	call	a444 <alt_main>

000001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1ec:	003fff06 	br	1ec <alt_after_alt_main>

000001f0 <WRITE_FIFO_1>:

#include "FIFO_1.h"


void WRITE_FIFO_1(int *buffer)
{
     1f0:	defffd04 	addi	sp,sp,-12
     1f4:	dfc00215 	stw	ra,8(sp)
     1f8:	df000115 	stw	fp,4(sp)
     1fc:	df000104 	addi	fp,sp,4
     200:	e13fff15 	stw	r4,-4(fp)

	// Update the "full?" and "empty?" flags accordingly
	// Set the full flag if FIFO is now full
	// Reset the empty flag if FIFO now has 1 enrty

	altera_avalon_fifo_write_fifo(IN_BASE,CONTROL_BASE,*buffer);
     204:	e0bfff17 	ldw	r2,-4(fp)
     208:	10800017 	ldw	r2,0(r2)
     20c:	100d883a 	mov	r6,r2
     210:	010000b4 	movhi	r4,2
     214:	21241b04 	addi	r4,r4,-28564
     218:	014000b4 	movhi	r5,2
     21c:	29640804 	addi	r5,r5,-28640
     220:	000ad6c0 	call	ad6c <altera_avalon_fifo_write_fifo>
}
     224:	e037883a 	mov	sp,fp
     228:	dfc00117 	ldw	ra,4(sp)
     22c:	df000017 	ldw	fp,0(sp)
     230:	dec00204 	addi	sp,sp,8
     234:	f800283a 	ret

00000238 <READ_FIFO_1>:


void READ_FIFO_1(int *buffer)
{
     238:	defffd04 	addi	sp,sp,-12
     23c:	dfc00215 	stw	ra,8(sp)
     240:	df000115 	stw	fp,4(sp)
     244:	df000104 	addi	fp,sp,4
     248:	e13fff15 	stw	r4,-4(fp)
	// Update "count" in shared mem

	// Update the "full?" and "empty?" flags accordingly
	// Set the empty flag if FIFO is now empty
	// Reset the full flag if FIFO now has 1 enrty less than capacity
	*buffer = altera_avalon_fifo_read_fifo(OUT_BASE,CONTROL_BASE);
     24c:	010000b4 	movhi	r4,2
     250:	21241304 	addi	r4,r4,-28596
     254:	014000b4 	movhi	r5,2
     258:	29640804 	addi	r5,r5,-28640
     25c:	000ae400 	call	ae40 <altera_avalon_fifo_read_fifo>
     260:	1007883a 	mov	r3,r2
     264:	e0bfff17 	ldw	r2,-4(fp)
     268:	10c00015 	stw	r3,0(r2)
}
     26c:	e037883a 	mov	sp,fp
     270:	dfc00117 	ldw	ra,4(sp)
     274:	df000017 	ldw	fp,0(sp)
     278:	dec00204 	addi	sp,sp,8
     27c:	f800283a 	ret

00000280 <FIFO_1_INIT>:



//Initialization
void FIFO_1_INIT()
{
     280:	defffe04 	addi	sp,sp,-8
     284:	dfc00115 	stw	ra,4(sp)
     288:	df000015 	stw	fp,0(sp)
     28c:	d839883a 	mov	fp,sp
	altera_avalon_fifo_init(CONTROL_BASE,0x0,ALMOST_EMPTY,ALMOST_FULL);
     290:	010000b4 	movhi	r4,2
     294:	21240804 	addi	r4,r4,-28640
     298:	000b883a 	mov	r5,zero
     29c:	01800084 	movi	r6,2
     2a0:	01c00f84 	movi	r7,62
     2a4:	000a9f40 	call	a9f4 <altera_avalon_fifo_init>
}
     2a8:	e037883a 	mov	sp,fp
     2ac:	dfc00117 	ldw	ra,4(sp)
     2b0:	df000017 	ldw	fp,0(sp)
     2b4:	dec00204 	addi	sp,sp,8
     2b8:	f800283a 	ret

000002bc <main>:
void delay(int n);
int producer();


int main()
{
     2bc:	defffe04 	addi	sp,sp,-8
     2c0:	dfc00115 	stw	ra,4(sp)
     2c4:	df000015 	stw	fp,0(sp)
     2c8:	d839883a 	mov	fp,sp
	producer();
     2cc:	00002d40 	call	2d4 <producer>

	while(1) { }
     2d0:	003fff06 	br	2d0 <main+0x14>

000002d4 <producer>:
	return 0;
}


int producer()
{
     2d4:	defffd04 	addi	sp,sp,-12
     2d8:	dfc00215 	stw	ra,8(sp)
     2dc:	df000115 	stw	fp,4(sp)
     2e0:	df000104 	addi	fp,sp,4
	printf("Producer starting..\n");
     2e4:	01000074 	movhi	r4,1
     2e8:	21000004 	addi	r4,r4,0
     2ec:	00004c80 	call	4c8 <puts>

	FIFO_1_INIT(); // Initialize the FIFO
     2f0:	00002800 	call	280 <FIFO_1_INIT>

	int j = 5;
     2f4:	00800144 	movi	r2,5
     2f8:	e0bfff15 	stw	r2,-4(fp)
	while(j<=500)
     2fc:	00000f06 	br	33c <producer+0x68>
	{
		delay(100000);
     300:	010000b4 	movhi	r4,2
     304:	2121a804 	addi	r4,r4,-31072
     308:	000036c0 	call	36c <delay>
		WRITE_FIFO_1(&j); // Write to the producer-consumer fifo
     30c:	e13fff04 	addi	r4,fp,-4
     310:	00001f00 	call	1f0 <WRITE_FIFO_1>
		delay(100000);
     314:	010000b4 	movhi	r4,2
     318:	2121a804 	addi	r4,r4,-31072
     31c:	000036c0 	call	36c <delay>

		printf("Producer sent [%i]\n",j);
     320:	e17fff17 	ldw	r5,-4(fp)
     324:	01000074 	movhi	r4,1
     328:	21000504 	addi	r4,r4,20
     32c:	00003b00 	call	3b0 <printf>
		j+=10;
     330:	e0bfff17 	ldw	r2,-4(fp)
     334:	10800284 	addi	r2,r2,10
     338:	e0bfff15 	stw	r2,-4(fp)
	printf("Producer starting..\n");

	FIFO_1_INIT(); // Initialize the FIFO

	int j = 5;
	while(j<=500)
     33c:	e0bfff17 	ldw	r2,-4(fp)
     340:	10807d50 	cmplti	r2,r2,501
     344:	103fee1e 	bne	r2,zero,300 <producer+0x2c>

		printf("Producer sent [%i]\n",j);
		j+=10;
	}

	printf("Producer finished..\n");
     348:	01000074 	movhi	r4,1
     34c:	21000a04 	addi	r4,r4,40
     350:	00004c80 	call	4c8 <puts>
	return 0;
     354:	0005883a 	mov	r2,zero
}
     358:	e037883a 	mov	sp,fp
     35c:	dfc00117 	ldw	ra,4(sp)
     360:	df000017 	ldw	fp,0(sp)
     364:	dec00204 	addi	sp,sp,8
     368:	f800283a 	ret

0000036c <delay>:


void delay(int n)
{
     36c:	defffd04 	addi	sp,sp,-12
     370:	df000215 	stw	fp,8(sp)
     374:	df000204 	addi	fp,sp,8
     378:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i=n; i>0; i--)
     37c:	e0bfff17 	ldw	r2,-4(fp)
     380:	e0bffe15 	stw	r2,-8(fp)
     384:	00000306 	br	394 <delay+0x28>
     388:	e0bffe17 	ldw	r2,-8(fp)
     38c:	10bfffc4 	addi	r2,r2,-1
     390:	e0bffe15 	stw	r2,-8(fp)
     394:	e0bffe17 	ldw	r2,-8(fp)
     398:	10800048 	cmpgei	r2,r2,1
     39c:	103ffa1e 	bne	r2,zero,388 <delay+0x1c>
	{
		continue;
	}
     3a0:	e037883a 	mov	sp,fp
     3a4:	df000017 	ldw	fp,0(sp)
     3a8:	dec00104 	addi	sp,sp,4
     3ac:	f800283a 	ret

000003b0 <printf>:
     3b0:	defffb04 	addi	sp,sp,-20
     3b4:	dfc00115 	stw	ra,4(sp)
     3b8:	d9400215 	stw	r5,8(sp)
     3bc:	d9800315 	stw	r6,12(sp)
     3c0:	d9c00415 	stw	r7,16(sp)
     3c4:	00800074 	movhi	r2,1
     3c8:	10876704 	addi	r2,r2,7580
     3cc:	10c00017 	ldw	r3,0(r2)
     3d0:	200b883a 	mov	r5,r4
     3d4:	d8800204 	addi	r2,sp,8
     3d8:	19000217 	ldw	r4,8(r3)
     3dc:	100d883a 	mov	r6,r2
     3e0:	d8800015 	stw	r2,0(sp)
     3e4:	000246c0 	call	246c <__vfprintf_internal>
     3e8:	dfc00117 	ldw	ra,4(sp)
     3ec:	dec00504 	addi	sp,sp,20
     3f0:	f800283a 	ret

000003f4 <_printf_r>:
     3f4:	defffc04 	addi	sp,sp,-16
     3f8:	dfc00115 	stw	ra,4(sp)
     3fc:	d9800215 	stw	r6,8(sp)
     400:	d9c00315 	stw	r7,12(sp)
     404:	280d883a 	mov	r6,r5
     408:	21400217 	ldw	r5,8(r4)
     40c:	d8c00204 	addi	r3,sp,8
     410:	180f883a 	mov	r7,r3
     414:	d8c00015 	stw	r3,0(sp)
     418:	00005a80 	call	5a8 <___vfprintf_internal_r>
     41c:	dfc00117 	ldw	ra,4(sp)
     420:	dec00404 	addi	sp,sp,16
     424:	f800283a 	ret

00000428 <_puts_r>:
     428:	defff604 	addi	sp,sp,-40
     42c:	dc400715 	stw	r17,28(sp)
     430:	2023883a 	mov	r17,r4
     434:	2809883a 	mov	r4,r5
     438:	dfc00915 	stw	ra,36(sp)
     43c:	dcc00815 	stw	r19,32(sp)
     440:	2827883a 	mov	r19,r5
     444:	00004dc0 	call	4dc <strlen>
     448:	89400217 	ldw	r5,8(r17)
     44c:	00c00074 	movhi	r3,1
     450:	18c00f04 	addi	r3,r3,60
     454:	01c00044 	movi	r7,1
     458:	12000044 	addi	r8,r2,1
     45c:	d8c00515 	stw	r3,20(sp)
     460:	d9c00615 	stw	r7,24(sp)
     464:	d8c00304 	addi	r3,sp,12
     468:	01c00084 	movi	r7,2
     46c:	8809883a 	mov	r4,r17
     470:	d80d883a 	mov	r6,sp
     474:	d8c00015 	stw	r3,0(sp)
     478:	dcc00315 	stw	r19,12(sp)
     47c:	da000215 	stw	r8,8(sp)
     480:	d9c00115 	stw	r7,4(sp)
     484:	d8800415 	stw	r2,16(sp)
     488:	00047280 	call	4728 <__sfvwrite_r>
     48c:	00ffffc4 	movi	r3,-1
     490:	10000626 	beq	r2,zero,4ac <_puts_r+0x84>
     494:	1805883a 	mov	r2,r3
     498:	dfc00917 	ldw	ra,36(sp)
     49c:	dcc00817 	ldw	r19,32(sp)
     4a0:	dc400717 	ldw	r17,28(sp)
     4a4:	dec00a04 	addi	sp,sp,40
     4a8:	f800283a 	ret
     4ac:	00c00284 	movi	r3,10
     4b0:	1805883a 	mov	r2,r3
     4b4:	dfc00917 	ldw	ra,36(sp)
     4b8:	dcc00817 	ldw	r19,32(sp)
     4bc:	dc400717 	ldw	r17,28(sp)
     4c0:	dec00a04 	addi	sp,sp,40
     4c4:	f800283a 	ret

000004c8 <puts>:
     4c8:	00800074 	movhi	r2,1
     4cc:	10876704 	addi	r2,r2,7580
     4d0:	200b883a 	mov	r5,r4
     4d4:	11000017 	ldw	r4,0(r2)
     4d8:	00004281 	jmpi	428 <_puts_r>

000004dc <strlen>:
     4dc:	208000cc 	andi	r2,r4,3
     4e0:	2011883a 	mov	r8,r4
     4e4:	1000161e 	bne	r2,zero,540 <strlen+0x64>
     4e8:	20c00017 	ldw	r3,0(r4)
     4ec:	017fbff4 	movhi	r5,65279
     4f0:	297fbfc4 	addi	r5,r5,-257
     4f4:	01e02074 	movhi	r7,32897
     4f8:	39e02004 	addi	r7,r7,-32640
     4fc:	1945883a 	add	r2,r3,r5
     500:	11c4703a 	and	r2,r2,r7
     504:	00c6303a 	nor	r3,zero,r3
     508:	1886703a 	and	r3,r3,r2
     50c:	18000c1e 	bne	r3,zero,540 <strlen+0x64>
     510:	280d883a 	mov	r6,r5
     514:	380b883a 	mov	r5,r7
     518:	21000104 	addi	r4,r4,4
     51c:	20800017 	ldw	r2,0(r4)
     520:	1187883a 	add	r3,r2,r6
     524:	1946703a 	and	r3,r3,r5
     528:	0084303a 	nor	r2,zero,r2
     52c:	10c4703a 	and	r2,r2,r3
     530:	103ff926 	beq	r2,zero,518 <strlen+0x3c>
     534:	20800007 	ldb	r2,0(r4)
     538:	10000326 	beq	r2,zero,548 <strlen+0x6c>
     53c:	21000044 	addi	r4,r4,1
     540:	20800007 	ldb	r2,0(r4)
     544:	103ffd1e 	bne	r2,zero,53c <strlen+0x60>
     548:	2205c83a 	sub	r2,r4,r8
     54c:	f800283a 	ret

00000550 <__sprint_r>:
     550:	30800217 	ldw	r2,8(r6)
     554:	defffe04 	addi	sp,sp,-8
     558:	dc000015 	stw	r16,0(sp)
     55c:	dfc00115 	stw	ra,4(sp)
     560:	3021883a 	mov	r16,r6
     564:	0007883a 	mov	r3,zero
     568:	1000061e 	bne	r2,zero,584 <__sprint_r+0x34>
     56c:	1805883a 	mov	r2,r3
     570:	30000115 	stw	zero,4(r6)
     574:	dfc00117 	ldw	ra,4(sp)
     578:	dc000017 	ldw	r16,0(sp)
     57c:	dec00204 	addi	sp,sp,8
     580:	f800283a 	ret
     584:	00047280 	call	4728 <__sfvwrite_r>
     588:	1007883a 	mov	r3,r2
     58c:	1805883a 	mov	r2,r3
     590:	80000115 	stw	zero,4(r16)
     594:	80000215 	stw	zero,8(r16)
     598:	dfc00117 	ldw	ra,4(sp)
     59c:	dc000017 	ldw	r16,0(sp)
     5a0:	dec00204 	addi	sp,sp,8
     5a4:	f800283a 	ret

000005a8 <___vfprintf_internal_r>:
     5a8:	defea404 	addi	sp,sp,-1392
     5ac:	dd815815 	stw	r22,1376(sp)
     5b0:	dc015215 	stw	r16,1352(sp)
     5b4:	d9c15115 	stw	r7,1348(sp)
     5b8:	dfc15b15 	stw	ra,1388(sp)
     5bc:	df015a15 	stw	fp,1384(sp)
     5c0:	ddc15915 	stw	r23,1380(sp)
     5c4:	dd415715 	stw	r21,1372(sp)
     5c8:	dd015615 	stw	r20,1368(sp)
     5cc:	dcc15515 	stw	r19,1364(sp)
     5d0:	dc815415 	stw	r18,1360(sp)
     5d4:	dc415315 	stw	r17,1356(sp)
     5d8:	282d883a 	mov	r22,r5
     5dc:	3021883a 	mov	r16,r6
     5e0:	d9014f15 	stw	r4,1340(sp)
     5e4:	0004d4c0 	call	4d4c <_localeconv_r>
     5e8:	10800017 	ldw	r2,0(r2)
     5ec:	d9c15117 	ldw	r7,1348(sp)
     5f0:	d8814915 	stw	r2,1316(sp)
     5f4:	d8814f17 	ldw	r2,1340(sp)
     5f8:	10000226 	beq	r2,zero,604 <___vfprintf_internal_r+0x5c>
     5fc:	10800e17 	ldw	r2,56(r2)
     600:	10020d26 	beq	r2,zero,e38 <___vfprintf_internal_r+0x890>
     604:	b080030b 	ldhu	r2,12(r22)
     608:	1080020c 	andi	r2,r2,8
     60c:	10020e26 	beq	r2,zero,e48 <___vfprintf_internal_r+0x8a0>
     610:	b0800417 	ldw	r2,16(r22)
     614:	10020c26 	beq	r2,zero,e48 <___vfprintf_internal_r+0x8a0>
     618:	b200030b 	ldhu	r8,12(r22)
     61c:	00800284 	movi	r2,10
     620:	40c0068c 	andi	r3,r8,26
     624:	18802f1e 	bne	r3,r2,6e4 <___vfprintf_internal_r+0x13c>
     628:	b080038f 	ldh	r2,14(r22)
     62c:	10002d16 	blt	r2,zero,6e4 <___vfprintf_internal_r+0x13c>
     630:	b240038b 	ldhu	r9,14(r22)
     634:	b2800717 	ldw	r10,28(r22)
     638:	b2c00917 	ldw	r11,36(r22)
     63c:	d9014f17 	ldw	r4,1340(sp)
     640:	dc402904 	addi	r17,sp,164
     644:	d8804004 	addi	r2,sp,256
     648:	00c10004 	movi	r3,1024
     64c:	423fff4c 	andi	r8,r8,65533
     650:	800d883a 	mov	r6,r16
     654:	880b883a 	mov	r5,r17
     658:	da002c0d 	sth	r8,176(sp)
     65c:	da402c8d 	sth	r9,178(sp)
     660:	da803015 	stw	r10,192(sp)
     664:	dac03215 	stw	r11,200(sp)
     668:	d8802d15 	stw	r2,180(sp)
     66c:	d8c02e15 	stw	r3,184(sp)
     670:	d8802915 	stw	r2,164(sp)
     674:	d8c02b15 	stw	r3,172(sp)
     678:	d8002f15 	stw	zero,188(sp)
     67c:	00005a80 	call	5a8 <___vfprintf_internal_r>
     680:	d8814b15 	stw	r2,1324(sp)
     684:	10000416 	blt	r2,zero,698 <___vfprintf_internal_r+0xf0>
     688:	d9014f17 	ldw	r4,1340(sp)
     68c:	880b883a 	mov	r5,r17
     690:	0003dc40 	call	3dc4 <_fflush_r>
     694:	1002321e 	bne	r2,zero,f60 <___vfprintf_internal_r+0x9b8>
     698:	d8802c0b 	ldhu	r2,176(sp)
     69c:	1080100c 	andi	r2,r2,64
     6a0:	10000326 	beq	r2,zero,6b0 <___vfprintf_internal_r+0x108>
     6a4:	b080030b 	ldhu	r2,12(r22)
     6a8:	10801014 	ori	r2,r2,64
     6ac:	b080030d 	sth	r2,12(r22)
     6b0:	d8814b17 	ldw	r2,1324(sp)
     6b4:	dfc15b17 	ldw	ra,1388(sp)
     6b8:	df015a17 	ldw	fp,1384(sp)
     6bc:	ddc15917 	ldw	r23,1380(sp)
     6c0:	dd815817 	ldw	r22,1376(sp)
     6c4:	dd415717 	ldw	r21,1372(sp)
     6c8:	dd015617 	ldw	r20,1368(sp)
     6cc:	dcc15517 	ldw	r19,1364(sp)
     6d0:	dc815417 	ldw	r18,1360(sp)
     6d4:	dc415317 	ldw	r17,1356(sp)
     6d8:	dc015217 	ldw	r16,1352(sp)
     6dc:	dec15c04 	addi	sp,sp,1392
     6e0:	f800283a 	ret
     6e4:	0005883a 	mov	r2,zero
     6e8:	0007883a 	mov	r3,zero
     6ec:	dd401904 	addi	r21,sp,100
     6f0:	d8814215 	stw	r2,1288(sp)
     6f4:	802f883a 	mov	r23,r16
     6f8:	d8c14315 	stw	r3,1292(sp)
     6fc:	d8014b15 	stw	zero,1324(sp)
     700:	d8014815 	stw	zero,1312(sp)
     704:	d8014415 	stw	zero,1296(sp)
     708:	d8014715 	stw	zero,1308(sp)
     70c:	dd400c15 	stw	r21,48(sp)
     710:	d8000e15 	stw	zero,56(sp)
     714:	d8000d15 	stw	zero,52(sp)
     718:	b8800007 	ldb	r2,0(r23)
     71c:	10001926 	beq	r2,zero,784 <___vfprintf_internal_r+0x1dc>
     720:	00c00944 	movi	r3,37
     724:	10c01726 	beq	r2,r3,784 <___vfprintf_internal_r+0x1dc>
     728:	b821883a 	mov	r16,r23
     72c:	00000106 	br	734 <___vfprintf_internal_r+0x18c>
     730:	10c00326 	beq	r2,r3,740 <___vfprintf_internal_r+0x198>
     734:	84000044 	addi	r16,r16,1
     738:	80800007 	ldb	r2,0(r16)
     73c:	103ffc1e 	bne	r2,zero,730 <___vfprintf_internal_r+0x188>
     740:	85e7c83a 	sub	r19,r16,r23
     744:	98000e26 	beq	r19,zero,780 <___vfprintf_internal_r+0x1d8>
     748:	dc800e17 	ldw	r18,56(sp)
     74c:	dc400d17 	ldw	r17,52(sp)
     750:	008001c4 	movi	r2,7
     754:	94e5883a 	add	r18,r18,r19
     758:	8c400044 	addi	r17,r17,1
     75c:	adc00015 	stw	r23,0(r21)
     760:	dc800e15 	stw	r18,56(sp)
     764:	acc00115 	stw	r19,4(r21)
     768:	dc400d15 	stw	r17,52(sp)
     76c:	14428b16 	blt	r2,r17,119c <___vfprintf_internal_r+0xbf4>
     770:	ad400204 	addi	r21,r21,8
     774:	d9014b17 	ldw	r4,1324(sp)
     778:	24c9883a 	add	r4,r4,r19
     77c:	d9014b15 	stw	r4,1324(sp)
     780:	802f883a 	mov	r23,r16
     784:	b8800007 	ldb	r2,0(r23)
     788:	10013c26 	beq	r2,zero,c7c <___vfprintf_internal_r+0x6d4>
     78c:	bdc00044 	addi	r23,r23,1
     790:	d8000405 	stb	zero,16(sp)
     794:	b8c00007 	ldb	r3,0(r23)
     798:	04ffffc4 	movi	r19,-1
     79c:	d8014c15 	stw	zero,1328(sp)
     7a0:	d8014a15 	stw	zero,1320(sp)
     7a4:	d8c14d15 	stw	r3,1332(sp)
     7a8:	bdc00044 	addi	r23,r23,1
     7ac:	d9414d17 	ldw	r5,1332(sp)
     7b0:	00801604 	movi	r2,88
     7b4:	28fff804 	addi	r3,r5,-32
     7b8:	10c06036 	bltu	r2,r3,93c <___vfprintf_internal_r+0x394>
     7bc:	18c5883a 	add	r2,r3,r3
     7c0:	1085883a 	add	r2,r2,r2
     7c4:	00c00034 	movhi	r3,0
     7c8:	18c1f604 	addi	r3,r3,2008
     7cc:	10c5883a 	add	r2,r2,r3
     7d0:	11000017 	ldw	r4,0(r2)
     7d4:	2000683a 	jmp	r4
     7d8:	0000174c 	andi	zero,zero,93
     7dc:	0000093c 	xorhi	zero,zero,36
     7e0:	0000093c 	xorhi	zero,zero,36
     7e4:	00001738 	rdprs	zero,zero,92
     7e8:	0000093c 	xorhi	zero,zero,36
     7ec:	0000093c 	xorhi	zero,zero,36
     7f0:	0000093c 	xorhi	zero,zero,36
     7f4:	0000093c 	xorhi	zero,zero,36
     7f8:	0000093c 	xorhi	zero,zero,36
     7fc:	0000093c 	xorhi	zero,zero,36
     800:	00001518 	cmpnei	zero,zero,84
     804:	00001728 	cmpgeui	zero,zero,92
     808:	0000093c 	xorhi	zero,zero,36
     80c:	00001530 	cmpltui	zero,zero,84
     810:	000017d0 	cmplti	zero,zero,95
     814:	0000093c 	xorhi	zero,zero,36
     818:	000017bc 	xorhi	zero,zero,94
     81c:	00001778 	rdprs	zero,zero,93
     820:	00001778 	rdprs	zero,zero,93
     824:	00001778 	rdprs	zero,zero,93
     828:	00001778 	rdprs	zero,zero,93
     82c:	00001778 	rdprs	zero,zero,93
     830:	00001778 	rdprs	zero,zero,93
     834:	00001778 	rdprs	zero,zero,93
     838:	00001778 	rdprs	zero,zero,93
     83c:	00001778 	rdprs	zero,zero,93
     840:	0000093c 	xorhi	zero,zero,36
     844:	0000093c 	xorhi	zero,zero,36
     848:	0000093c 	xorhi	zero,zero,36
     84c:	0000093c 	xorhi	zero,zero,36
     850:	0000093c 	xorhi	zero,zero,36
     854:	0000093c 	xorhi	zero,zero,36
     858:	0000093c 	xorhi	zero,zero,36
     85c:	0000093c 	xorhi	zero,zero,36
     860:	0000093c 	xorhi	zero,zero,36
     864:	0000093c 	xorhi	zero,zero,36
     868:	00000f94 	movui	zero,62
     86c:	00001600 	call	160 <alt_irq_handler+0x74>
     870:	0000093c 	xorhi	zero,zero,36
     874:	00001600 	call	160 <alt_irq_handler+0x74>
     878:	0000093c 	xorhi	zero,zero,36
     87c:	0000093c 	xorhi	zero,zero,36
     880:	0000093c 	xorhi	zero,zero,36
     884:	0000093c 	xorhi	zero,zero,36
     888:	00001764 	muli	zero,zero,93
     88c:	0000093c 	xorhi	zero,zero,36
     890:	0000093c 	xorhi	zero,zero,36
     894:	00001048 	cmpgei	zero,zero,65
     898:	0000093c 	xorhi	zero,zero,36
     89c:	0000093c 	xorhi	zero,zero,36
     8a0:	0000093c 	xorhi	zero,zero,36
     8a4:	0000093c 	xorhi	zero,zero,36
     8a8:	0000093c 	xorhi	zero,zero,36
     8ac:	00001094 	movui	zero,66
     8b0:	0000093c 	xorhi	zero,zero,36
     8b4:	0000093c 	xorhi	zero,zero,36
     8b8:	000016b4 	movhi	zero,90
     8bc:	0000093c 	xorhi	zero,zero,36
     8c0:	0000093c 	xorhi	zero,zero,36
     8c4:	0000093c 	xorhi	zero,zero,36
     8c8:	0000093c 	xorhi	zero,zero,36
     8cc:	0000093c 	xorhi	zero,zero,36
     8d0:	0000093c 	xorhi	zero,zero,36
     8d4:	0000093c 	xorhi	zero,zero,36
     8d8:	0000093c 	xorhi	zero,zero,36
     8dc:	0000093c 	xorhi	zero,zero,36
     8e0:	0000093c 	xorhi	zero,zero,36
     8e4:	00001688 	cmpgei	zero,zero,90
     8e8:	00000fa0 	cmpeqi	zero,zero,62
     8ec:	00001600 	call	160 <alt_irq_handler+0x74>
     8f0:	00001600 	call	160 <alt_irq_handler+0x74>
     8f4:	00001600 	call	160 <alt_irq_handler+0x74>
     8f8:	000015ec 	andhi	zero,zero,87
     8fc:	00000fa0 	cmpeqi	zero,zero,62
     900:	0000093c 	xorhi	zero,zero,36
     904:	0000093c 	xorhi	zero,zero,36
     908:	00001574 	movhi	zero,85
     90c:	0000093c 	xorhi	zero,zero,36
     910:	00001544 	movi	zero,85
     914:	00001054 	movui	zero,65
     918:	000015a4 	muli	zero,zero,86
     91c:	00001590 	cmplti	zero,zero,86
     920:	0000093c 	xorhi	zero,zero,36
     924:	00001838 	rdprs	zero,zero,96
     928:	0000093c 	xorhi	zero,zero,36
     92c:	000010a0 	cmpeqi	zero,zero,66
     930:	0000093c 	xorhi	zero,zero,36
     934:	0000093c 	xorhi	zero,zero,36
     938:	00001718 	cmpnei	zero,zero,92
     93c:	d9014d17 	ldw	r4,1332(sp)
     940:	2000ce26 	beq	r4,zero,c7c <___vfprintf_internal_r+0x6d4>
     944:	01400044 	movi	r5,1
     948:	d9800f04 	addi	r6,sp,60
     94c:	d9c14015 	stw	r7,1280(sp)
     950:	d9414515 	stw	r5,1300(sp)
     954:	d9814115 	stw	r6,1284(sp)
     958:	280f883a 	mov	r7,r5
     95c:	d9000f05 	stb	r4,60(sp)
     960:	d8000405 	stb	zero,16(sp)
     964:	d8014615 	stw	zero,1304(sp)
     968:	d8c14c17 	ldw	r3,1328(sp)
     96c:	1880008c 	andi	r2,r3,2
     970:	1005003a 	cmpeq	r2,r2,zero
     974:	d8815015 	stw	r2,1344(sp)
     978:	1000031e 	bne	r2,zero,988 <___vfprintf_internal_r+0x3e0>
     97c:	d9014517 	ldw	r4,1300(sp)
     980:	21000084 	addi	r4,r4,2
     984:	d9014515 	stw	r4,1300(sp)
     988:	d9414c17 	ldw	r5,1328(sp)
     98c:	2940210c 	andi	r5,r5,132
     990:	d9414e15 	stw	r5,1336(sp)
     994:	28002d1e 	bne	r5,zero,a4c <___vfprintf_internal_r+0x4a4>
     998:	d9814a17 	ldw	r6,1320(sp)
     99c:	d8814517 	ldw	r2,1300(sp)
     9a0:	30a1c83a 	sub	r16,r6,r2
     9a4:	0400290e 	bge	zero,r16,a4c <___vfprintf_internal_r+0x4a4>
     9a8:	00800404 	movi	r2,16
     9ac:	14045e0e 	bge	r2,r16,1b28 <___vfprintf_internal_r+0x1580>
     9b0:	dc800e17 	ldw	r18,56(sp)
     9b4:	dc400d17 	ldw	r17,52(sp)
     9b8:	1027883a 	mov	r19,r2
     9bc:	07000074 	movhi	fp,1
     9c0:	e7002b84 	addi	fp,fp,174
     9c4:	050001c4 	movi	r20,7
     9c8:	00000306 	br	9d8 <___vfprintf_internal_r+0x430>
     9cc:	843ffc04 	addi	r16,r16,-16
     9d0:	ad400204 	addi	r21,r21,8
     9d4:	9c00130e 	bge	r19,r16,a24 <___vfprintf_internal_r+0x47c>
     9d8:	94800404 	addi	r18,r18,16
     9dc:	8c400044 	addi	r17,r17,1
     9e0:	af000015 	stw	fp,0(r21)
     9e4:	acc00115 	stw	r19,4(r21)
     9e8:	dc800e15 	stw	r18,56(sp)
     9ec:	dc400d15 	stw	r17,52(sp)
     9f0:	a47ff60e 	bge	r20,r17,9cc <___vfprintf_internal_r+0x424>
     9f4:	d9014f17 	ldw	r4,1340(sp)
     9f8:	b00b883a 	mov	r5,r22
     9fc:	d9800c04 	addi	r6,sp,48
     a00:	d9c15115 	stw	r7,1348(sp)
     a04:	00005500 	call	550 <__sprint_r>
     a08:	d9c15117 	ldw	r7,1348(sp)
     a0c:	10009e1e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
     a10:	843ffc04 	addi	r16,r16,-16
     a14:	dc800e17 	ldw	r18,56(sp)
     a18:	dc400d17 	ldw	r17,52(sp)
     a1c:	dd401904 	addi	r21,sp,100
     a20:	9c3fed16 	blt	r19,r16,9d8 <___vfprintf_internal_r+0x430>
     a24:	9425883a 	add	r18,r18,r16
     a28:	8c400044 	addi	r17,r17,1
     a2c:	008001c4 	movi	r2,7
     a30:	af000015 	stw	fp,0(r21)
     a34:	ac000115 	stw	r16,4(r21)
     a38:	dc800e15 	stw	r18,56(sp)
     a3c:	dc400d15 	stw	r17,52(sp)
     a40:	1441f516 	blt	r2,r17,1218 <___vfprintf_internal_r+0xc70>
     a44:	ad400204 	addi	r21,r21,8
     a48:	00000206 	br	a54 <___vfprintf_internal_r+0x4ac>
     a4c:	dc800e17 	ldw	r18,56(sp)
     a50:	dc400d17 	ldw	r17,52(sp)
     a54:	d8800407 	ldb	r2,16(sp)
     a58:	10000b26 	beq	r2,zero,a88 <___vfprintf_internal_r+0x4e0>
     a5c:	00800044 	movi	r2,1
     a60:	94800044 	addi	r18,r18,1
     a64:	8c400044 	addi	r17,r17,1
     a68:	a8800115 	stw	r2,4(r21)
     a6c:	d8c00404 	addi	r3,sp,16
     a70:	008001c4 	movi	r2,7
     a74:	a8c00015 	stw	r3,0(r21)
     a78:	dc800e15 	stw	r18,56(sp)
     a7c:	dc400d15 	stw	r17,52(sp)
     a80:	1441da16 	blt	r2,r17,11ec <___vfprintf_internal_r+0xc44>
     a84:	ad400204 	addi	r21,r21,8
     a88:	d9015017 	ldw	r4,1344(sp)
     a8c:	20000b1e 	bne	r4,zero,abc <___vfprintf_internal_r+0x514>
     a90:	d8800444 	addi	r2,sp,17
     a94:	94800084 	addi	r18,r18,2
     a98:	8c400044 	addi	r17,r17,1
     a9c:	a8800015 	stw	r2,0(r21)
     aa0:	00c00084 	movi	r3,2
     aa4:	008001c4 	movi	r2,7
     aa8:	a8c00115 	stw	r3,4(r21)
     aac:	dc800e15 	stw	r18,56(sp)
     ab0:	dc400d15 	stw	r17,52(sp)
     ab4:	1441c216 	blt	r2,r17,11c0 <___vfprintf_internal_r+0xc18>
     ab8:	ad400204 	addi	r21,r21,8
     abc:	d9414e17 	ldw	r5,1336(sp)
     ac0:	00802004 	movi	r2,128
     ac4:	2880b126 	beq	r5,r2,d8c <___vfprintf_internal_r+0x7e4>
     ac8:	d8c14617 	ldw	r3,1304(sp)
     acc:	19e1c83a 	sub	r16,r3,r7
     ad0:	0400260e 	bge	zero,r16,b6c <___vfprintf_internal_r+0x5c4>
     ad4:	00800404 	movi	r2,16
     ad8:	1403cf0e 	bge	r2,r16,1a18 <___vfprintf_internal_r+0x1470>
     adc:	1027883a 	mov	r19,r2
     ae0:	07000074 	movhi	fp,1
     ae4:	e7002784 	addi	fp,fp,158
     ae8:	050001c4 	movi	r20,7
     aec:	00000306 	br	afc <___vfprintf_internal_r+0x554>
     af0:	843ffc04 	addi	r16,r16,-16
     af4:	ad400204 	addi	r21,r21,8
     af8:	9c00130e 	bge	r19,r16,b48 <___vfprintf_internal_r+0x5a0>
     afc:	94800404 	addi	r18,r18,16
     b00:	8c400044 	addi	r17,r17,1
     b04:	af000015 	stw	fp,0(r21)
     b08:	acc00115 	stw	r19,4(r21)
     b0c:	dc800e15 	stw	r18,56(sp)
     b10:	dc400d15 	stw	r17,52(sp)
     b14:	a47ff60e 	bge	r20,r17,af0 <___vfprintf_internal_r+0x548>
     b18:	d9014f17 	ldw	r4,1340(sp)
     b1c:	b00b883a 	mov	r5,r22
     b20:	d9800c04 	addi	r6,sp,48
     b24:	d9c15115 	stw	r7,1348(sp)
     b28:	00005500 	call	550 <__sprint_r>
     b2c:	d9c15117 	ldw	r7,1348(sp)
     b30:	1000551e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
     b34:	843ffc04 	addi	r16,r16,-16
     b38:	dc800e17 	ldw	r18,56(sp)
     b3c:	dc400d17 	ldw	r17,52(sp)
     b40:	dd401904 	addi	r21,sp,100
     b44:	9c3fed16 	blt	r19,r16,afc <___vfprintf_internal_r+0x554>
     b48:	9425883a 	add	r18,r18,r16
     b4c:	8c400044 	addi	r17,r17,1
     b50:	008001c4 	movi	r2,7
     b54:	af000015 	stw	fp,0(r21)
     b58:	ac000115 	stw	r16,4(r21)
     b5c:	dc800e15 	stw	r18,56(sp)
     b60:	dc400d15 	stw	r17,52(sp)
     b64:	14418216 	blt	r2,r17,1170 <___vfprintf_internal_r+0xbc8>
     b68:	ad400204 	addi	r21,r21,8
     b6c:	d9014c17 	ldw	r4,1328(sp)
     b70:	2080400c 	andi	r2,r4,256
     b74:	10004a1e 	bne	r2,zero,ca0 <___vfprintf_internal_r+0x6f8>
     b78:	d9414117 	ldw	r5,1284(sp)
     b7c:	91e5883a 	add	r18,r18,r7
     b80:	8c400044 	addi	r17,r17,1
     b84:	008001c4 	movi	r2,7
     b88:	a9400015 	stw	r5,0(r21)
     b8c:	a9c00115 	stw	r7,4(r21)
     b90:	dc800e15 	stw	r18,56(sp)
     b94:	dc400d15 	stw	r17,52(sp)
     b98:	14416716 	blt	r2,r17,1138 <___vfprintf_internal_r+0xb90>
     b9c:	a8c00204 	addi	r3,r21,8
     ba0:	d9814c17 	ldw	r6,1328(sp)
     ba4:	3080010c 	andi	r2,r6,4
     ba8:	10002826 	beq	r2,zero,c4c <___vfprintf_internal_r+0x6a4>
     bac:	d8814a17 	ldw	r2,1320(sp)
     bb0:	d9014517 	ldw	r4,1300(sp)
     bb4:	1121c83a 	sub	r16,r2,r4
     bb8:	0400240e 	bge	zero,r16,c4c <___vfprintf_internal_r+0x6a4>
     bbc:	00800404 	movi	r2,16
     bc0:	1404550e 	bge	r2,r16,1d18 <___vfprintf_internal_r+0x1770>
     bc4:	dc400d17 	ldw	r17,52(sp)
     bc8:	1027883a 	mov	r19,r2
     bcc:	07000074 	movhi	fp,1
     bd0:	e7002b84 	addi	fp,fp,174
     bd4:	050001c4 	movi	r20,7
     bd8:	00000306 	br	be8 <___vfprintf_internal_r+0x640>
     bdc:	843ffc04 	addi	r16,r16,-16
     be0:	18c00204 	addi	r3,r3,8
     be4:	9c00110e 	bge	r19,r16,c2c <___vfprintf_internal_r+0x684>
     be8:	94800404 	addi	r18,r18,16
     bec:	8c400044 	addi	r17,r17,1
     bf0:	1f000015 	stw	fp,0(r3)
     bf4:	1cc00115 	stw	r19,4(r3)
     bf8:	dc800e15 	stw	r18,56(sp)
     bfc:	dc400d15 	stw	r17,52(sp)
     c00:	a47ff60e 	bge	r20,r17,bdc <___vfprintf_internal_r+0x634>
     c04:	d9014f17 	ldw	r4,1340(sp)
     c08:	b00b883a 	mov	r5,r22
     c0c:	d9800c04 	addi	r6,sp,48
     c10:	00005500 	call	550 <__sprint_r>
     c14:	10001c1e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
     c18:	843ffc04 	addi	r16,r16,-16
     c1c:	dc800e17 	ldw	r18,56(sp)
     c20:	dc400d17 	ldw	r17,52(sp)
     c24:	d8c01904 	addi	r3,sp,100
     c28:	9c3fef16 	blt	r19,r16,be8 <___vfprintf_internal_r+0x640>
     c2c:	9425883a 	add	r18,r18,r16
     c30:	8c400044 	addi	r17,r17,1
     c34:	008001c4 	movi	r2,7
     c38:	1f000015 	stw	fp,0(r3)
     c3c:	1c000115 	stw	r16,4(r3)
     c40:	dc800e15 	stw	r18,56(sp)
     c44:	dc400d15 	stw	r17,52(sp)
     c48:	1440cb16 	blt	r2,r17,f78 <___vfprintf_internal_r+0x9d0>
     c4c:	d8814a17 	ldw	r2,1320(sp)
     c50:	d9414517 	ldw	r5,1300(sp)
     c54:	1140010e 	bge	r2,r5,c5c <___vfprintf_internal_r+0x6b4>
     c58:	2805883a 	mov	r2,r5
     c5c:	d9814b17 	ldw	r6,1324(sp)
     c60:	308d883a 	add	r6,r6,r2
     c64:	d9814b15 	stw	r6,1324(sp)
     c68:	90013b1e 	bne	r18,zero,1158 <___vfprintf_internal_r+0xbb0>
     c6c:	d9c14017 	ldw	r7,1280(sp)
     c70:	dd401904 	addi	r21,sp,100
     c74:	d8000d15 	stw	zero,52(sp)
     c78:	003ea706 	br	718 <___vfprintf_internal_r+0x170>
     c7c:	d8800e17 	ldw	r2,56(sp)
     c80:	1005451e 	bne	r2,zero,2198 <___vfprintf_internal_r+0x1bf0>
     c84:	d8000d15 	stw	zero,52(sp)
     c88:	b080030b 	ldhu	r2,12(r22)
     c8c:	1080100c 	andi	r2,r2,64
     c90:	103e8726 	beq	r2,zero,6b0 <___vfprintf_internal_r+0x108>
     c94:	00bfffc4 	movi	r2,-1
     c98:	d8814b15 	stw	r2,1324(sp)
     c9c:	003e8406 	br	6b0 <___vfprintf_internal_r+0x108>
     ca0:	d9814d17 	ldw	r6,1332(sp)
     ca4:	00801944 	movi	r2,101
     ca8:	11806e16 	blt	r2,r6,e64 <___vfprintf_internal_r+0x8bc>
     cac:	d9414717 	ldw	r5,1308(sp)
     cb0:	00c00044 	movi	r3,1
     cb4:	1943490e 	bge	r3,r5,19dc <___vfprintf_internal_r+0x1434>
     cb8:	d8814117 	ldw	r2,1284(sp)
     cbc:	94800044 	addi	r18,r18,1
     cc0:	8c400044 	addi	r17,r17,1
     cc4:	a8800015 	stw	r2,0(r21)
     cc8:	008001c4 	movi	r2,7
     ccc:	a8c00115 	stw	r3,4(r21)
     cd0:	dc800e15 	stw	r18,56(sp)
     cd4:	dc400d15 	stw	r17,52(sp)
     cd8:	1441ca16 	blt	r2,r17,1404 <___vfprintf_internal_r+0xe5c>
     cdc:	a8c00204 	addi	r3,r21,8
     ce0:	d9014917 	ldw	r4,1316(sp)
     ce4:	00800044 	movi	r2,1
     ce8:	94800044 	addi	r18,r18,1
     cec:	8c400044 	addi	r17,r17,1
     cf0:	18800115 	stw	r2,4(r3)
     cf4:	008001c4 	movi	r2,7
     cf8:	19000015 	stw	r4,0(r3)
     cfc:	dc800e15 	stw	r18,56(sp)
     d00:	dc400d15 	stw	r17,52(sp)
     d04:	1441b616 	blt	r2,r17,13e0 <___vfprintf_internal_r+0xe38>
     d08:	1cc00204 	addi	r19,r3,8
     d0c:	d9014217 	ldw	r4,1288(sp)
     d10:	d9414317 	ldw	r5,1292(sp)
     d14:	000d883a 	mov	r6,zero
     d18:	000f883a 	mov	r7,zero
     d1c:	000905c0 	call	905c <__nedf2>
     d20:	10017426 	beq	r2,zero,12f4 <___vfprintf_internal_r+0xd4c>
     d24:	d9414717 	ldw	r5,1308(sp)
     d28:	d9814117 	ldw	r6,1284(sp)
     d2c:	8c400044 	addi	r17,r17,1
     d30:	2c85883a 	add	r2,r5,r18
     d34:	14bfffc4 	addi	r18,r2,-1
     d38:	28bfffc4 	addi	r2,r5,-1
     d3c:	30c00044 	addi	r3,r6,1
     d40:	98800115 	stw	r2,4(r19)
     d44:	008001c4 	movi	r2,7
     d48:	98c00015 	stw	r3,0(r19)
     d4c:	dc800e15 	stw	r18,56(sp)
     d50:	dc400d15 	stw	r17,52(sp)
     d54:	14418e16 	blt	r2,r17,1390 <___vfprintf_internal_r+0xde8>
     d58:	9cc00204 	addi	r19,r19,8
     d5c:	d9414817 	ldw	r5,1312(sp)
     d60:	d8800804 	addi	r2,sp,32
     d64:	8c400044 	addi	r17,r17,1
     d68:	9165883a 	add	r18,r18,r5
     d6c:	98800015 	stw	r2,0(r19)
     d70:	008001c4 	movi	r2,7
     d74:	99400115 	stw	r5,4(r19)
     d78:	dc800e15 	stw	r18,56(sp)
     d7c:	dc400d15 	stw	r17,52(sp)
     d80:	1440ed16 	blt	r2,r17,1138 <___vfprintf_internal_r+0xb90>
     d84:	98c00204 	addi	r3,r19,8
     d88:	003f8506 	br	ba0 <___vfprintf_internal_r+0x5f8>
     d8c:	d9814a17 	ldw	r6,1320(sp)
     d90:	d8814517 	ldw	r2,1300(sp)
     d94:	30a1c83a 	sub	r16,r6,r2
     d98:	043f4b0e 	bge	zero,r16,ac8 <___vfprintf_internal_r+0x520>
     d9c:	00800404 	movi	r2,16
     da0:	14043a0e 	bge	r2,r16,1e8c <___vfprintf_internal_r+0x18e4>
     da4:	1027883a 	mov	r19,r2
     da8:	07000074 	movhi	fp,1
     dac:	e7002784 	addi	fp,fp,158
     db0:	050001c4 	movi	r20,7
     db4:	00000306 	br	dc4 <___vfprintf_internal_r+0x81c>
     db8:	843ffc04 	addi	r16,r16,-16
     dbc:	ad400204 	addi	r21,r21,8
     dc0:	9c00130e 	bge	r19,r16,e10 <___vfprintf_internal_r+0x868>
     dc4:	94800404 	addi	r18,r18,16
     dc8:	8c400044 	addi	r17,r17,1
     dcc:	af000015 	stw	fp,0(r21)
     dd0:	acc00115 	stw	r19,4(r21)
     dd4:	dc800e15 	stw	r18,56(sp)
     dd8:	dc400d15 	stw	r17,52(sp)
     ddc:	a47ff60e 	bge	r20,r17,db8 <___vfprintf_internal_r+0x810>
     de0:	d9014f17 	ldw	r4,1340(sp)
     de4:	b00b883a 	mov	r5,r22
     de8:	d9800c04 	addi	r6,sp,48
     dec:	d9c15115 	stw	r7,1348(sp)
     df0:	00005500 	call	550 <__sprint_r>
     df4:	d9c15117 	ldw	r7,1348(sp)
     df8:	103fa31e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
     dfc:	843ffc04 	addi	r16,r16,-16
     e00:	dc800e17 	ldw	r18,56(sp)
     e04:	dc400d17 	ldw	r17,52(sp)
     e08:	dd401904 	addi	r21,sp,100
     e0c:	9c3fed16 	blt	r19,r16,dc4 <___vfprintf_internal_r+0x81c>
     e10:	9425883a 	add	r18,r18,r16
     e14:	8c400044 	addi	r17,r17,1
     e18:	008001c4 	movi	r2,7
     e1c:	af000015 	stw	fp,0(r21)
     e20:	ac000115 	stw	r16,4(r21)
     e24:	dc800e15 	stw	r18,56(sp)
     e28:	dc400d15 	stw	r17,52(sp)
     e2c:	14416116 	blt	r2,r17,13b4 <___vfprintf_internal_r+0xe0c>
     e30:	ad400204 	addi	r21,r21,8
     e34:	003f2406 	br	ac8 <___vfprintf_internal_r+0x520>
     e38:	d9014f17 	ldw	r4,1340(sp)
     e3c:	000405c0 	call	405c <__sinit>
     e40:	d9c15117 	ldw	r7,1348(sp)
     e44:	003def06 	br	604 <___vfprintf_internal_r+0x5c>
     e48:	d9014f17 	ldw	r4,1340(sp)
     e4c:	b00b883a 	mov	r5,r22
     e50:	d9c15115 	stw	r7,1348(sp)
     e54:	00024900 	call	2490 <__swsetup_r>
     e58:	d9c15117 	ldw	r7,1348(sp)
     e5c:	103dee26 	beq	r2,zero,618 <___vfprintf_internal_r+0x70>
     e60:	003f8c06 	br	c94 <___vfprintf_internal_r+0x6ec>
     e64:	d9014217 	ldw	r4,1288(sp)
     e68:	d9414317 	ldw	r5,1292(sp)
     e6c:	000d883a 	mov	r6,zero
     e70:	000f883a 	mov	r7,zero
     e74:	0008fd40 	call	8fd4 <__eqdf2>
     e78:	1000f21e 	bne	r2,zero,1244 <___vfprintf_internal_r+0xc9c>
     e7c:	00800074 	movhi	r2,1
     e80:	10802704 	addi	r2,r2,156
     e84:	94800044 	addi	r18,r18,1
     e88:	8c400044 	addi	r17,r17,1
     e8c:	a8800015 	stw	r2,0(r21)
     e90:	00c00044 	movi	r3,1
     e94:	008001c4 	movi	r2,7
     e98:	a8c00115 	stw	r3,4(r21)
     e9c:	dc800e15 	stw	r18,56(sp)
     ea0:	dc400d15 	stw	r17,52(sp)
     ea4:	14430016 	blt	r2,r17,1aa8 <___vfprintf_internal_r+0x1500>
     ea8:	a8c00204 	addi	r3,r21,8
     eac:	d8800517 	ldw	r2,20(sp)
     eb0:	d9014717 	ldw	r4,1308(sp)
     eb4:	11015c0e 	bge	r2,r4,1428 <___vfprintf_internal_r+0xe80>
     eb8:	dc400d17 	ldw	r17,52(sp)
     ebc:	d9814917 	ldw	r6,1316(sp)
     ec0:	00800044 	movi	r2,1
     ec4:	94800044 	addi	r18,r18,1
     ec8:	8c400044 	addi	r17,r17,1
     ecc:	18800115 	stw	r2,4(r3)
     ed0:	008001c4 	movi	r2,7
     ed4:	19800015 	stw	r6,0(r3)
     ed8:	dc800e15 	stw	r18,56(sp)
     edc:	dc400d15 	stw	r17,52(sp)
     ee0:	14431616 	blt	r2,r17,1b3c <___vfprintf_internal_r+0x1594>
     ee4:	18c00204 	addi	r3,r3,8
     ee8:	d8814717 	ldw	r2,1308(sp)
     eec:	143fffc4 	addi	r16,r2,-1
     ef0:	043f2b0e 	bge	zero,r16,ba0 <___vfprintf_internal_r+0x5f8>
     ef4:	00800404 	movi	r2,16
     ef8:	1402a80e 	bge	r2,r16,199c <___vfprintf_internal_r+0x13f4>
     efc:	dc400d17 	ldw	r17,52(sp)
     f00:	1027883a 	mov	r19,r2
     f04:	07000074 	movhi	fp,1
     f08:	e7002784 	addi	fp,fp,158
     f0c:	050001c4 	movi	r20,7
     f10:	00000306 	br	f20 <___vfprintf_internal_r+0x978>
     f14:	18c00204 	addi	r3,r3,8
     f18:	843ffc04 	addi	r16,r16,-16
     f1c:	9c02a20e 	bge	r19,r16,19a8 <___vfprintf_internal_r+0x1400>
     f20:	94800404 	addi	r18,r18,16
     f24:	8c400044 	addi	r17,r17,1
     f28:	1f000015 	stw	fp,0(r3)
     f2c:	1cc00115 	stw	r19,4(r3)
     f30:	dc800e15 	stw	r18,56(sp)
     f34:	dc400d15 	stw	r17,52(sp)
     f38:	a47ff60e 	bge	r20,r17,f14 <___vfprintf_internal_r+0x96c>
     f3c:	d9014f17 	ldw	r4,1340(sp)
     f40:	b00b883a 	mov	r5,r22
     f44:	d9800c04 	addi	r6,sp,48
     f48:	00005500 	call	550 <__sprint_r>
     f4c:	103f4e1e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
     f50:	dc800e17 	ldw	r18,56(sp)
     f54:	dc400d17 	ldw	r17,52(sp)
     f58:	d8c01904 	addi	r3,sp,100
     f5c:	003fee06 	br	f18 <___vfprintf_internal_r+0x970>
     f60:	d8802c0b 	ldhu	r2,176(sp)
     f64:	00ffffc4 	movi	r3,-1
     f68:	d8c14b15 	stw	r3,1324(sp)
     f6c:	1080100c 	andi	r2,r2,64
     f70:	103dcc1e 	bne	r2,zero,6a4 <___vfprintf_internal_r+0xfc>
     f74:	003dce06 	br	6b0 <___vfprintf_internal_r+0x108>
     f78:	d9014f17 	ldw	r4,1340(sp)
     f7c:	b00b883a 	mov	r5,r22
     f80:	d9800c04 	addi	r6,sp,48
     f84:	00005500 	call	550 <__sprint_r>
     f88:	103f3f1e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
     f8c:	dc800e17 	ldw	r18,56(sp)
     f90:	003f2e06 	br	c4c <___vfprintf_internal_r+0x6a4>
     f94:	d9414c17 	ldw	r5,1328(sp)
     f98:	29400414 	ori	r5,r5,16
     f9c:	d9414c15 	stw	r5,1328(sp)
     fa0:	d9814c17 	ldw	r6,1328(sp)
     fa4:	3080080c 	andi	r2,r6,32
     fa8:	10014f1e 	bne	r2,zero,14e8 <___vfprintf_internal_r+0xf40>
     fac:	d8c14c17 	ldw	r3,1328(sp)
     fb0:	1880040c 	andi	r2,r3,16
     fb4:	1002f01e 	bne	r2,zero,1b78 <___vfprintf_internal_r+0x15d0>
     fb8:	d9014c17 	ldw	r4,1328(sp)
     fbc:	2080100c 	andi	r2,r4,64
     fc0:	1002ed26 	beq	r2,zero,1b78 <___vfprintf_internal_r+0x15d0>
     fc4:	3880000f 	ldh	r2,0(r7)
     fc8:	39c00104 	addi	r7,r7,4
     fcc:	d9c14015 	stw	r7,1280(sp)
     fd0:	1023d7fa 	srai	r17,r2,31
     fd4:	1021883a 	mov	r16,r2
     fd8:	88037816 	blt	r17,zero,1dbc <___vfprintf_internal_r+0x1814>
     fdc:	01000044 	movi	r4,1
     fe0:	98000416 	blt	r19,zero,ff4 <___vfprintf_internal_r+0xa4c>
     fe4:	d8c14c17 	ldw	r3,1328(sp)
     fe8:	00bfdfc4 	movi	r2,-129
     fec:	1886703a 	and	r3,r3,r2
     ff0:	d8c14c15 	stw	r3,1328(sp)
     ff4:	8444b03a 	or	r2,r16,r17
     ff8:	10022c1e 	bne	r2,zero,18ac <___vfprintf_internal_r+0x1304>
     ffc:	98022b1e 	bne	r19,zero,18ac <___vfprintf_internal_r+0x1304>
    1000:	20803fcc 	andi	r2,r4,255
    1004:	1002a126 	beq	r2,zero,1a8c <___vfprintf_internal_r+0x14e4>
    1008:	d8c01904 	addi	r3,sp,100
    100c:	dd000f04 	addi	r20,sp,60
    1010:	d8c14115 	stw	r3,1284(sp)
    1014:	d8c14117 	ldw	r3,1284(sp)
    1018:	dcc14515 	stw	r19,1300(sp)
    101c:	a0c5c83a 	sub	r2,r20,r3
    1020:	11c00a04 	addi	r7,r2,40
    1024:	99c0010e 	bge	r19,r7,102c <___vfprintf_internal_r+0xa84>
    1028:	d9c14515 	stw	r7,1300(sp)
    102c:	dcc14615 	stw	r19,1304(sp)
    1030:	d8800407 	ldb	r2,16(sp)
    1034:	103e4c26 	beq	r2,zero,968 <___vfprintf_internal_r+0x3c0>
    1038:	d8814517 	ldw	r2,1300(sp)
    103c:	10800044 	addi	r2,r2,1
    1040:	d8814515 	stw	r2,1300(sp)
    1044:	003e4806 	br	968 <___vfprintf_internal_r+0x3c0>
    1048:	d9814c17 	ldw	r6,1328(sp)
    104c:	31800414 	ori	r6,r6,16
    1050:	d9814c15 	stw	r6,1328(sp)
    1054:	d8c14c17 	ldw	r3,1328(sp)
    1058:	1880080c 	andi	r2,r3,32
    105c:	1001271e 	bne	r2,zero,14fc <___vfprintf_internal_r+0xf54>
    1060:	d9414c17 	ldw	r5,1328(sp)
    1064:	2880040c 	andi	r2,r5,16
    1068:	1002bc1e 	bne	r2,zero,1b5c <___vfprintf_internal_r+0x15b4>
    106c:	d9814c17 	ldw	r6,1328(sp)
    1070:	3080100c 	andi	r2,r6,64
    1074:	1002b926 	beq	r2,zero,1b5c <___vfprintf_internal_r+0x15b4>
    1078:	3c00000b 	ldhu	r16,0(r7)
    107c:	0009883a 	mov	r4,zero
    1080:	39c00104 	addi	r7,r7,4
    1084:	0023883a 	mov	r17,zero
    1088:	d9c14015 	stw	r7,1280(sp)
    108c:	d8000405 	stb	zero,16(sp)
    1090:	003fd306 	br	fe0 <___vfprintf_internal_r+0xa38>
    1094:	d9014c17 	ldw	r4,1328(sp)
    1098:	21000414 	ori	r4,r4,16
    109c:	d9014c15 	stw	r4,1328(sp)
    10a0:	d9414c17 	ldw	r5,1328(sp)
    10a4:	2880080c 	andi	r2,r5,32
    10a8:	1001081e 	bne	r2,zero,14cc <___vfprintf_internal_r+0xf24>
    10ac:	d8c14c17 	ldw	r3,1328(sp)
    10b0:	1880040c 	andi	r2,r3,16
    10b4:	1002b61e 	bne	r2,zero,1b90 <___vfprintf_internal_r+0x15e8>
    10b8:	d9014c17 	ldw	r4,1328(sp)
    10bc:	2080100c 	andi	r2,r4,64
    10c0:	1002b326 	beq	r2,zero,1b90 <___vfprintf_internal_r+0x15e8>
    10c4:	3c00000b 	ldhu	r16,0(r7)
    10c8:	01000044 	movi	r4,1
    10cc:	39c00104 	addi	r7,r7,4
    10d0:	0023883a 	mov	r17,zero
    10d4:	d9c14015 	stw	r7,1280(sp)
    10d8:	d8000405 	stb	zero,16(sp)
    10dc:	003fc006 	br	fe0 <___vfprintf_internal_r+0xa38>
    10e0:	d9014f17 	ldw	r4,1340(sp)
    10e4:	b00b883a 	mov	r5,r22
    10e8:	d9800c04 	addi	r6,sp,48
    10ec:	00005500 	call	550 <__sprint_r>
    10f0:	103ee51e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
    10f4:	dc800e17 	ldw	r18,56(sp)
    10f8:	d8c01904 	addi	r3,sp,100
    10fc:	d9814c17 	ldw	r6,1328(sp)
    1100:	3080004c 	andi	r2,r6,1
    1104:	1005003a 	cmpeq	r2,r2,zero
    1108:	103ea51e 	bne	r2,zero,ba0 <___vfprintf_internal_r+0x5f8>
    110c:	00800044 	movi	r2,1
    1110:	dc400d17 	ldw	r17,52(sp)
    1114:	18800115 	stw	r2,4(r3)
    1118:	d8814917 	ldw	r2,1316(sp)
    111c:	94800044 	addi	r18,r18,1
    1120:	8c400044 	addi	r17,r17,1
    1124:	18800015 	stw	r2,0(r3)
    1128:	008001c4 	movi	r2,7
    112c:	dc800e15 	stw	r18,56(sp)
    1130:	dc400d15 	stw	r17,52(sp)
    1134:	1442240e 	bge	r2,r17,19c8 <___vfprintf_internal_r+0x1420>
    1138:	d9014f17 	ldw	r4,1340(sp)
    113c:	b00b883a 	mov	r5,r22
    1140:	d9800c04 	addi	r6,sp,48
    1144:	00005500 	call	550 <__sprint_r>
    1148:	103ecf1e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
    114c:	dc800e17 	ldw	r18,56(sp)
    1150:	d8c01904 	addi	r3,sp,100
    1154:	003e9206 	br	ba0 <___vfprintf_internal_r+0x5f8>
    1158:	d9014f17 	ldw	r4,1340(sp)
    115c:	b00b883a 	mov	r5,r22
    1160:	d9800c04 	addi	r6,sp,48
    1164:	00005500 	call	550 <__sprint_r>
    1168:	103ec026 	beq	r2,zero,c6c <___vfprintf_internal_r+0x6c4>
    116c:	003ec606 	br	c88 <___vfprintf_internal_r+0x6e0>
    1170:	d9014f17 	ldw	r4,1340(sp)
    1174:	b00b883a 	mov	r5,r22
    1178:	d9800c04 	addi	r6,sp,48
    117c:	d9c15115 	stw	r7,1348(sp)
    1180:	00005500 	call	550 <__sprint_r>
    1184:	d9c15117 	ldw	r7,1348(sp)
    1188:	103ebf1e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
    118c:	dc800e17 	ldw	r18,56(sp)
    1190:	dc400d17 	ldw	r17,52(sp)
    1194:	dd401904 	addi	r21,sp,100
    1198:	003e7406 	br	b6c <___vfprintf_internal_r+0x5c4>
    119c:	d9014f17 	ldw	r4,1340(sp)
    11a0:	b00b883a 	mov	r5,r22
    11a4:	d9800c04 	addi	r6,sp,48
    11a8:	d9c15115 	stw	r7,1348(sp)
    11ac:	00005500 	call	550 <__sprint_r>
    11b0:	d9c15117 	ldw	r7,1348(sp)
    11b4:	103eb41e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
    11b8:	dd401904 	addi	r21,sp,100
    11bc:	003d6d06 	br	774 <___vfprintf_internal_r+0x1cc>
    11c0:	d9014f17 	ldw	r4,1340(sp)
    11c4:	b00b883a 	mov	r5,r22
    11c8:	d9800c04 	addi	r6,sp,48
    11cc:	d9c15115 	stw	r7,1348(sp)
    11d0:	00005500 	call	550 <__sprint_r>
    11d4:	d9c15117 	ldw	r7,1348(sp)
    11d8:	103eab1e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
    11dc:	dc800e17 	ldw	r18,56(sp)
    11e0:	dc400d17 	ldw	r17,52(sp)
    11e4:	dd401904 	addi	r21,sp,100
    11e8:	003e3406 	br	abc <___vfprintf_internal_r+0x514>
    11ec:	d9014f17 	ldw	r4,1340(sp)
    11f0:	b00b883a 	mov	r5,r22
    11f4:	d9800c04 	addi	r6,sp,48
    11f8:	d9c15115 	stw	r7,1348(sp)
    11fc:	00005500 	call	550 <__sprint_r>
    1200:	d9c15117 	ldw	r7,1348(sp)
    1204:	103ea01e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
    1208:	dc800e17 	ldw	r18,56(sp)
    120c:	dc400d17 	ldw	r17,52(sp)
    1210:	dd401904 	addi	r21,sp,100
    1214:	003e1c06 	br	a88 <___vfprintf_internal_r+0x4e0>
    1218:	d9014f17 	ldw	r4,1340(sp)
    121c:	b00b883a 	mov	r5,r22
    1220:	d9800c04 	addi	r6,sp,48
    1224:	d9c15115 	stw	r7,1348(sp)
    1228:	00005500 	call	550 <__sprint_r>
    122c:	d9c15117 	ldw	r7,1348(sp)
    1230:	103e951e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
    1234:	dc800e17 	ldw	r18,56(sp)
    1238:	dc400d17 	ldw	r17,52(sp)
    123c:	dd401904 	addi	r21,sp,100
    1240:	003e0406 	br	a54 <___vfprintf_internal_r+0x4ac>
    1244:	d9000517 	ldw	r4,20(sp)
    1248:	0102580e 	bge	zero,r4,1bac <___vfprintf_internal_r+0x1604>
    124c:	d9814717 	ldw	r6,1308(sp)
    1250:	21807a16 	blt	r4,r6,143c <___vfprintf_internal_r+0xe94>
    1254:	d8814117 	ldw	r2,1284(sp)
    1258:	91a5883a 	add	r18,r18,r6
    125c:	8c400044 	addi	r17,r17,1
    1260:	a8800015 	stw	r2,0(r21)
    1264:	008001c4 	movi	r2,7
    1268:	a9800115 	stw	r6,4(r21)
    126c:	dc800e15 	stw	r18,56(sp)
    1270:	dc400d15 	stw	r17,52(sp)
    1274:	1442fc16 	blt	r2,r17,1e68 <___vfprintf_internal_r+0x18c0>
    1278:	a8c00204 	addi	r3,r21,8
    127c:	d9414717 	ldw	r5,1308(sp)
    1280:	2161c83a 	sub	r16,r4,r5
    1284:	043f9d0e 	bge	zero,r16,10fc <___vfprintf_internal_r+0xb54>
    1288:	00800404 	movi	r2,16
    128c:	1402190e 	bge	r2,r16,1af4 <___vfprintf_internal_r+0x154c>
    1290:	dc400d17 	ldw	r17,52(sp)
    1294:	1027883a 	mov	r19,r2
    1298:	07000074 	movhi	fp,1
    129c:	e7002784 	addi	fp,fp,158
    12a0:	050001c4 	movi	r20,7
    12a4:	00000306 	br	12b4 <___vfprintf_internal_r+0xd0c>
    12a8:	18c00204 	addi	r3,r3,8
    12ac:	843ffc04 	addi	r16,r16,-16
    12b0:	9c02130e 	bge	r19,r16,1b00 <___vfprintf_internal_r+0x1558>
    12b4:	94800404 	addi	r18,r18,16
    12b8:	8c400044 	addi	r17,r17,1
    12bc:	1f000015 	stw	fp,0(r3)
    12c0:	1cc00115 	stw	r19,4(r3)
    12c4:	dc800e15 	stw	r18,56(sp)
    12c8:	dc400d15 	stw	r17,52(sp)
    12cc:	a47ff60e 	bge	r20,r17,12a8 <___vfprintf_internal_r+0xd00>
    12d0:	d9014f17 	ldw	r4,1340(sp)
    12d4:	b00b883a 	mov	r5,r22
    12d8:	d9800c04 	addi	r6,sp,48
    12dc:	00005500 	call	550 <__sprint_r>
    12e0:	103e691e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
    12e4:	dc800e17 	ldw	r18,56(sp)
    12e8:	dc400d17 	ldw	r17,52(sp)
    12ec:	d8c01904 	addi	r3,sp,100
    12f0:	003fee06 	br	12ac <___vfprintf_internal_r+0xd04>
    12f4:	d8814717 	ldw	r2,1308(sp)
    12f8:	143fffc4 	addi	r16,r2,-1
    12fc:	043e970e 	bge	zero,r16,d5c <___vfprintf_internal_r+0x7b4>
    1300:	00800404 	movi	r2,16
    1304:	1400180e 	bge	r2,r16,1368 <___vfprintf_internal_r+0xdc0>
    1308:	1029883a 	mov	r20,r2
    130c:	07000074 	movhi	fp,1
    1310:	e7002784 	addi	fp,fp,158
    1314:	054001c4 	movi	r21,7
    1318:	00000306 	br	1328 <___vfprintf_internal_r+0xd80>
    131c:	9cc00204 	addi	r19,r19,8
    1320:	843ffc04 	addi	r16,r16,-16
    1324:	a400120e 	bge	r20,r16,1370 <___vfprintf_internal_r+0xdc8>
    1328:	94800404 	addi	r18,r18,16
    132c:	8c400044 	addi	r17,r17,1
    1330:	9f000015 	stw	fp,0(r19)
    1334:	9d000115 	stw	r20,4(r19)
    1338:	dc800e15 	stw	r18,56(sp)
    133c:	dc400d15 	stw	r17,52(sp)
    1340:	ac7ff60e 	bge	r21,r17,131c <___vfprintf_internal_r+0xd74>
    1344:	d9014f17 	ldw	r4,1340(sp)
    1348:	b00b883a 	mov	r5,r22
    134c:	d9800c04 	addi	r6,sp,48
    1350:	00005500 	call	550 <__sprint_r>
    1354:	103e4c1e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
    1358:	dc800e17 	ldw	r18,56(sp)
    135c:	dc400d17 	ldw	r17,52(sp)
    1360:	dcc01904 	addi	r19,sp,100
    1364:	003fee06 	br	1320 <___vfprintf_internal_r+0xd78>
    1368:	07000074 	movhi	fp,1
    136c:	e7002784 	addi	fp,fp,158
    1370:	9425883a 	add	r18,r18,r16
    1374:	8c400044 	addi	r17,r17,1
    1378:	008001c4 	movi	r2,7
    137c:	9f000015 	stw	fp,0(r19)
    1380:	9c000115 	stw	r16,4(r19)
    1384:	dc800e15 	stw	r18,56(sp)
    1388:	dc400d15 	stw	r17,52(sp)
    138c:	147e720e 	bge	r2,r17,d58 <___vfprintf_internal_r+0x7b0>
    1390:	d9014f17 	ldw	r4,1340(sp)
    1394:	b00b883a 	mov	r5,r22
    1398:	d9800c04 	addi	r6,sp,48
    139c:	00005500 	call	550 <__sprint_r>
    13a0:	103e391e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
    13a4:	dc800e17 	ldw	r18,56(sp)
    13a8:	dc400d17 	ldw	r17,52(sp)
    13ac:	dcc01904 	addi	r19,sp,100
    13b0:	003e6a06 	br	d5c <___vfprintf_internal_r+0x7b4>
    13b4:	d9014f17 	ldw	r4,1340(sp)
    13b8:	b00b883a 	mov	r5,r22
    13bc:	d9800c04 	addi	r6,sp,48
    13c0:	d9c15115 	stw	r7,1348(sp)
    13c4:	00005500 	call	550 <__sprint_r>
    13c8:	d9c15117 	ldw	r7,1348(sp)
    13cc:	103e2e1e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
    13d0:	dc800e17 	ldw	r18,56(sp)
    13d4:	dc400d17 	ldw	r17,52(sp)
    13d8:	dd401904 	addi	r21,sp,100
    13dc:	003dba06 	br	ac8 <___vfprintf_internal_r+0x520>
    13e0:	d9014f17 	ldw	r4,1340(sp)
    13e4:	b00b883a 	mov	r5,r22
    13e8:	d9800c04 	addi	r6,sp,48
    13ec:	00005500 	call	550 <__sprint_r>
    13f0:	103e251e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
    13f4:	dc800e17 	ldw	r18,56(sp)
    13f8:	dc400d17 	ldw	r17,52(sp)
    13fc:	dcc01904 	addi	r19,sp,100
    1400:	003e4206 	br	d0c <___vfprintf_internal_r+0x764>
    1404:	d9014f17 	ldw	r4,1340(sp)
    1408:	b00b883a 	mov	r5,r22
    140c:	d9800c04 	addi	r6,sp,48
    1410:	00005500 	call	550 <__sprint_r>
    1414:	103e1c1e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
    1418:	dc800e17 	ldw	r18,56(sp)
    141c:	dc400d17 	ldw	r17,52(sp)
    1420:	d8c01904 	addi	r3,sp,100
    1424:	003e2e06 	br	ce0 <___vfprintf_internal_r+0x738>
    1428:	d9414c17 	ldw	r5,1328(sp)
    142c:	2880004c 	andi	r2,r5,1
    1430:	1005003a 	cmpeq	r2,r2,zero
    1434:	103dda1e 	bne	r2,zero,ba0 <___vfprintf_internal_r+0x5f8>
    1438:	003e9f06 	br	eb8 <___vfprintf_internal_r+0x910>
    143c:	d8c14117 	ldw	r3,1284(sp)
    1440:	9125883a 	add	r18,r18,r4
    1444:	8c400044 	addi	r17,r17,1
    1448:	008001c4 	movi	r2,7
    144c:	a8c00015 	stw	r3,0(r21)
    1450:	a9000115 	stw	r4,4(r21)
    1454:	dc800e15 	stw	r18,56(sp)
    1458:	dc400d15 	stw	r17,52(sp)
    145c:	14426c16 	blt	r2,r17,1e10 <___vfprintf_internal_r+0x1868>
    1460:	a8c00204 	addi	r3,r21,8
    1464:	d9414917 	ldw	r5,1316(sp)
    1468:	00800044 	movi	r2,1
    146c:	94800044 	addi	r18,r18,1
    1470:	8c400044 	addi	r17,r17,1
    1474:	18800115 	stw	r2,4(r3)
    1478:	008001c4 	movi	r2,7
    147c:	19400015 	stw	r5,0(r3)
    1480:	dc800e15 	stw	r18,56(sp)
    1484:	dc400d15 	stw	r17,52(sp)
    1488:	2021883a 	mov	r16,r4
    148c:	14425616 	blt	r2,r17,1de8 <___vfprintf_internal_r+0x1840>
    1490:	19400204 	addi	r5,r3,8
    1494:	d9814717 	ldw	r6,1308(sp)
    1498:	8c400044 	addi	r17,r17,1
    149c:	dc400d15 	stw	r17,52(sp)
    14a0:	3107c83a 	sub	r3,r6,r4
    14a4:	d9014117 	ldw	r4,1284(sp)
    14a8:	90e5883a 	add	r18,r18,r3
    14ac:	28c00115 	stw	r3,4(r5)
    14b0:	8105883a 	add	r2,r16,r4
    14b4:	28800015 	stw	r2,0(r5)
    14b8:	008001c4 	movi	r2,7
    14bc:	dc800e15 	stw	r18,56(sp)
    14c0:	147f1d16 	blt	r2,r17,1138 <___vfprintf_internal_r+0xb90>
    14c4:	28c00204 	addi	r3,r5,8
    14c8:	003db506 	br	ba0 <___vfprintf_internal_r+0x5f8>
    14cc:	3c000017 	ldw	r16,0(r7)
    14d0:	3c400117 	ldw	r17,4(r7)
    14d4:	39800204 	addi	r6,r7,8
    14d8:	01000044 	movi	r4,1
    14dc:	d9814015 	stw	r6,1280(sp)
    14e0:	d8000405 	stb	zero,16(sp)
    14e4:	003ebe06 	br	fe0 <___vfprintf_internal_r+0xa38>
    14e8:	3c000017 	ldw	r16,0(r7)
    14ec:	3c400117 	ldw	r17,4(r7)
    14f0:	38800204 	addi	r2,r7,8
    14f4:	d8814015 	stw	r2,1280(sp)
    14f8:	003eb706 	br	fd8 <___vfprintf_internal_r+0xa30>
    14fc:	3c000017 	ldw	r16,0(r7)
    1500:	3c400117 	ldw	r17,4(r7)
    1504:	39000204 	addi	r4,r7,8
    1508:	d9014015 	stw	r4,1280(sp)
    150c:	0009883a 	mov	r4,zero
    1510:	d8000405 	stb	zero,16(sp)
    1514:	003eb206 	br	fe0 <___vfprintf_internal_r+0xa38>
    1518:	38c00017 	ldw	r3,0(r7)
    151c:	39c00104 	addi	r7,r7,4
    1520:	d8c14a15 	stw	r3,1320(sp)
    1524:	1800d70e 	bge	r3,zero,1884 <___vfprintf_internal_r+0x12dc>
    1528:	00c7c83a 	sub	r3,zero,r3
    152c:	d8c14a15 	stw	r3,1320(sp)
    1530:	d9014c17 	ldw	r4,1328(sp)
    1534:	b8c00007 	ldb	r3,0(r23)
    1538:	21000114 	ori	r4,r4,4
    153c:	d9014c15 	stw	r4,1328(sp)
    1540:	003c9806 	br	7a4 <___vfprintf_internal_r+0x1fc>
    1544:	d9814c17 	ldw	r6,1328(sp)
    1548:	3080080c 	andi	r2,r6,32
    154c:	1001f626 	beq	r2,zero,1d28 <___vfprintf_internal_r+0x1780>
    1550:	d9014b17 	ldw	r4,1324(sp)
    1554:	38800017 	ldw	r2,0(r7)
    1558:	39c00104 	addi	r7,r7,4
    155c:	d9c14015 	stw	r7,1280(sp)
    1560:	2007d7fa 	srai	r3,r4,31
    1564:	d9c14017 	ldw	r7,1280(sp)
    1568:	11000015 	stw	r4,0(r2)
    156c:	10c00115 	stw	r3,4(r2)
    1570:	003c6906 	br	718 <___vfprintf_internal_r+0x170>
    1574:	b8c00007 	ldb	r3,0(r23)
    1578:	00801b04 	movi	r2,108
    157c:	18825526 	beq	r3,r2,1ed4 <___vfprintf_internal_r+0x192c>
    1580:	d9414c17 	ldw	r5,1328(sp)
    1584:	29400414 	ori	r5,r5,16
    1588:	d9414c15 	stw	r5,1328(sp)
    158c:	003c8506 	br	7a4 <___vfprintf_internal_r+0x1fc>
    1590:	d9814c17 	ldw	r6,1328(sp)
    1594:	b8c00007 	ldb	r3,0(r23)
    1598:	31800814 	ori	r6,r6,32
    159c:	d9814c15 	stw	r6,1328(sp)
    15a0:	003c8006 	br	7a4 <___vfprintf_internal_r+0x1fc>
    15a4:	d8814c17 	ldw	r2,1328(sp)
    15a8:	3c000017 	ldw	r16,0(r7)
    15ac:	00c01e04 	movi	r3,120
    15b0:	10800094 	ori	r2,r2,2
    15b4:	d8814c15 	stw	r2,1328(sp)
    15b8:	39c00104 	addi	r7,r7,4
    15bc:	01400074 	movhi	r5,1
    15c0:	29401004 	addi	r5,r5,64
    15c4:	00800c04 	movi	r2,48
    15c8:	0023883a 	mov	r17,zero
    15cc:	01000084 	movi	r4,2
    15d0:	d9c14015 	stw	r7,1280(sp)
    15d4:	d8c14d15 	stw	r3,1332(sp)
    15d8:	d9414415 	stw	r5,1296(sp)
    15dc:	d8800445 	stb	r2,17(sp)
    15e0:	d8c00485 	stb	r3,18(sp)
    15e4:	d8000405 	stb	zero,16(sp)
    15e8:	003e7d06 	br	fe0 <___vfprintf_internal_r+0xa38>
    15ec:	d8814c17 	ldw	r2,1328(sp)
    15f0:	b8c00007 	ldb	r3,0(r23)
    15f4:	10801014 	ori	r2,r2,64
    15f8:	d8814c15 	stw	r2,1328(sp)
    15fc:	003c6906 	br	7a4 <___vfprintf_internal_r+0x1fc>
    1600:	d9414c17 	ldw	r5,1328(sp)
    1604:	2880020c 	andi	r2,r5,8
    1608:	1001e526 	beq	r2,zero,1da0 <___vfprintf_internal_r+0x17f8>
    160c:	39800017 	ldw	r6,0(r7)
    1610:	38800204 	addi	r2,r7,8
    1614:	d8814015 	stw	r2,1280(sp)
    1618:	d9814215 	stw	r6,1288(sp)
    161c:	39c00117 	ldw	r7,4(r7)
    1620:	d9c14315 	stw	r7,1292(sp)
    1624:	d9014217 	ldw	r4,1288(sp)
    1628:	d9414317 	ldw	r5,1292(sp)
    162c:	00070580 	call	7058 <__isinfd>
    1630:	10021d26 	beq	r2,zero,1ea8 <___vfprintf_internal_r+0x1900>
    1634:	d9014217 	ldw	r4,1288(sp)
    1638:	d9414317 	ldw	r5,1292(sp)
    163c:	000d883a 	mov	r6,zero
    1640:	000f883a 	mov	r7,zero
    1644:	00091f40 	call	91f4 <__ltdf2>
    1648:	1002d016 	blt	r2,zero,218c <___vfprintf_internal_r+0x1be4>
    164c:	d9414d17 	ldw	r5,1332(sp)
    1650:	008011c4 	movi	r2,71
    1654:	11421016 	blt	r2,r5,1e98 <___vfprintf_internal_r+0x18f0>
    1658:	01800074 	movhi	r6,1
    165c:	31801504 	addi	r6,r6,84
    1660:	d9814115 	stw	r6,1284(sp)
    1664:	d9014c17 	ldw	r4,1328(sp)
    1668:	00c000c4 	movi	r3,3
    166c:	00bfdfc4 	movi	r2,-129
    1670:	2088703a 	and	r4,r4,r2
    1674:	180f883a 	mov	r7,r3
    1678:	d8c14515 	stw	r3,1300(sp)
    167c:	d9014c15 	stw	r4,1328(sp)
    1680:	d8014615 	stw	zero,1304(sp)
    1684:	003e6a06 	br	1030 <___vfprintf_internal_r+0xa88>
    1688:	38800017 	ldw	r2,0(r7)
    168c:	00c00044 	movi	r3,1
    1690:	39c00104 	addi	r7,r7,4
    1694:	d9c14015 	stw	r7,1280(sp)
    1698:	d9000f04 	addi	r4,sp,60
    169c:	180f883a 	mov	r7,r3
    16a0:	d8c14515 	stw	r3,1300(sp)
    16a4:	d9014115 	stw	r4,1284(sp)
    16a8:	d8800f05 	stb	r2,60(sp)
    16ac:	d8000405 	stb	zero,16(sp)
    16b0:	003cac06 	br	964 <___vfprintf_internal_r+0x3bc>
    16b4:	01400074 	movhi	r5,1
    16b8:	29401b04 	addi	r5,r5,108
    16bc:	d9414415 	stw	r5,1296(sp)
    16c0:	d9814c17 	ldw	r6,1328(sp)
    16c4:	3080080c 	andi	r2,r6,32
    16c8:	1000ff26 	beq	r2,zero,1ac8 <___vfprintf_internal_r+0x1520>
    16cc:	3c000017 	ldw	r16,0(r7)
    16d0:	3c400117 	ldw	r17,4(r7)
    16d4:	38800204 	addi	r2,r7,8
    16d8:	d8814015 	stw	r2,1280(sp)
    16dc:	d9414c17 	ldw	r5,1328(sp)
    16e0:	2880004c 	andi	r2,r5,1
    16e4:	1005003a 	cmpeq	r2,r2,zero
    16e8:	1000b91e 	bne	r2,zero,19d0 <___vfprintf_internal_r+0x1428>
    16ec:	8444b03a 	or	r2,r16,r17
    16f0:	1000b726 	beq	r2,zero,19d0 <___vfprintf_internal_r+0x1428>
    16f4:	d9814d17 	ldw	r6,1332(sp)
    16f8:	29400094 	ori	r5,r5,2
    16fc:	00800c04 	movi	r2,48
    1700:	01000084 	movi	r4,2
    1704:	d9414c15 	stw	r5,1328(sp)
    1708:	d8800445 	stb	r2,17(sp)
    170c:	d9800485 	stb	r6,18(sp)
    1710:	d8000405 	stb	zero,16(sp)
    1714:	003e3206 	br	fe0 <___vfprintf_internal_r+0xa38>
    1718:	01800074 	movhi	r6,1
    171c:	31801004 	addi	r6,r6,64
    1720:	d9814415 	stw	r6,1296(sp)
    1724:	003fe606 	br	16c0 <___vfprintf_internal_r+0x1118>
    1728:	00800ac4 	movi	r2,43
    172c:	d8800405 	stb	r2,16(sp)
    1730:	b8c00007 	ldb	r3,0(r23)
    1734:	003c1b06 	br	7a4 <___vfprintf_internal_r+0x1fc>
    1738:	d8814c17 	ldw	r2,1328(sp)
    173c:	b8c00007 	ldb	r3,0(r23)
    1740:	10800054 	ori	r2,r2,1
    1744:	d8814c15 	stw	r2,1328(sp)
    1748:	003c1606 	br	7a4 <___vfprintf_internal_r+0x1fc>
    174c:	d8800407 	ldb	r2,16(sp)
    1750:	10004c1e 	bne	r2,zero,1884 <___vfprintf_internal_r+0x12dc>
    1754:	00800804 	movi	r2,32
    1758:	d8800405 	stb	r2,16(sp)
    175c:	b8c00007 	ldb	r3,0(r23)
    1760:	003c1006 	br	7a4 <___vfprintf_internal_r+0x1fc>
    1764:	d9814c17 	ldw	r6,1328(sp)
    1768:	b8c00007 	ldb	r3,0(r23)
    176c:	31800214 	ori	r6,r6,8
    1770:	d9814c15 	stw	r6,1328(sp)
    1774:	003c0b06 	br	7a4 <___vfprintf_internal_r+0x1fc>
    1778:	0009883a 	mov	r4,zero
    177c:	04000244 	movi	r16,9
    1780:	01400284 	movi	r5,10
    1784:	d9c15115 	stw	r7,1348(sp)
    1788:	000972c0 	call	972c <__mulsi3>
    178c:	b9000007 	ldb	r4,0(r23)
    1790:	d8c14d17 	ldw	r3,1332(sp)
    1794:	bdc00044 	addi	r23,r23,1
    1798:	d9014d15 	stw	r4,1332(sp)
    179c:	d9414d17 	ldw	r5,1332(sp)
    17a0:	1885883a 	add	r2,r3,r2
    17a4:	113ff404 	addi	r4,r2,-48
    17a8:	28bff404 	addi	r2,r5,-48
    17ac:	d9c15117 	ldw	r7,1348(sp)
    17b0:	80bff32e 	bgeu	r16,r2,1780 <___vfprintf_internal_r+0x11d8>
    17b4:	d9014a15 	stw	r4,1320(sp)
    17b8:	003bfc06 	br	7ac <___vfprintf_internal_r+0x204>
    17bc:	d8814c17 	ldw	r2,1328(sp)
    17c0:	b8c00007 	ldb	r3,0(r23)
    17c4:	10802014 	ori	r2,r2,128
    17c8:	d8814c15 	stw	r2,1328(sp)
    17cc:	003bf506 	br	7a4 <___vfprintf_internal_r+0x1fc>
    17d0:	b8c00007 	ldb	r3,0(r23)
    17d4:	00800a84 	movi	r2,42
    17d8:	bdc00044 	addi	r23,r23,1
    17dc:	18831826 	beq	r3,r2,2440 <___vfprintf_internal_r+0x1e98>
    17e0:	d8c14d15 	stw	r3,1332(sp)
    17e4:	18bff404 	addi	r2,r3,-48
    17e8:	00c00244 	movi	r3,9
    17ec:	18827b36 	bltu	r3,r2,21dc <___vfprintf_internal_r+0x1c34>
    17f0:	1821883a 	mov	r16,r3
    17f4:	0009883a 	mov	r4,zero
    17f8:	01400284 	movi	r5,10
    17fc:	d9c15115 	stw	r7,1348(sp)
    1800:	000972c0 	call	972c <__mulsi3>
    1804:	d9414d17 	ldw	r5,1332(sp)
    1808:	b9800007 	ldb	r6,0(r23)
    180c:	d9c15117 	ldw	r7,1348(sp)
    1810:	1145883a 	add	r2,r2,r5
    1814:	113ff404 	addi	r4,r2,-48
    1818:	30bff404 	addi	r2,r6,-48
    181c:	d9814d15 	stw	r6,1332(sp)
    1820:	bdc00044 	addi	r23,r23,1
    1824:	80bff42e 	bgeu	r16,r2,17f8 <___vfprintf_internal_r+0x1250>
    1828:	2027883a 	mov	r19,r4
    182c:	203bdf0e 	bge	r4,zero,7ac <___vfprintf_internal_r+0x204>
    1830:	04ffffc4 	movi	r19,-1
    1834:	003bdd06 	br	7ac <___vfprintf_internal_r+0x204>
    1838:	d8000405 	stb	zero,16(sp)
    183c:	39800017 	ldw	r6,0(r7)
    1840:	39c00104 	addi	r7,r7,4
    1844:	d9c14015 	stw	r7,1280(sp)
    1848:	d9814115 	stw	r6,1284(sp)
    184c:	3001c926 	beq	r6,zero,1f74 <___vfprintf_internal_r+0x19cc>
    1850:	98000e16 	blt	r19,zero,188c <___vfprintf_internal_r+0x12e4>
    1854:	d9014117 	ldw	r4,1284(sp)
    1858:	000b883a 	mov	r5,zero
    185c:	980d883a 	mov	r6,r19
    1860:	00056dc0 	call	56dc <memchr>
    1864:	10025926 	beq	r2,zero,21cc <___vfprintf_internal_r+0x1c24>
    1868:	d8c14117 	ldw	r3,1284(sp)
    186c:	10cfc83a 	sub	r7,r2,r3
    1870:	99c19e16 	blt	r19,r7,1eec <___vfprintf_internal_r+0x1944>
    1874:	d9c14515 	stw	r7,1300(sp)
    1878:	38000916 	blt	r7,zero,18a0 <___vfprintf_internal_r+0x12f8>
    187c:	d8014615 	stw	zero,1304(sp)
    1880:	003deb06 	br	1030 <___vfprintf_internal_r+0xa88>
    1884:	b8c00007 	ldb	r3,0(r23)
    1888:	003bc606 	br	7a4 <___vfprintf_internal_r+0x1fc>
    188c:	d9014117 	ldw	r4,1284(sp)
    1890:	00004dc0 	call	4dc <strlen>
    1894:	d8814515 	stw	r2,1300(sp)
    1898:	100f883a 	mov	r7,r2
    189c:	103ff70e 	bge	r2,zero,187c <___vfprintf_internal_r+0x12d4>
    18a0:	d8014515 	stw	zero,1300(sp)
    18a4:	d8014615 	stw	zero,1304(sp)
    18a8:	003de106 	br	1030 <___vfprintf_internal_r+0xa88>
    18ac:	20c03fcc 	andi	r3,r4,255
    18b0:	00800044 	movi	r2,1
    18b4:	18802d26 	beq	r3,r2,196c <___vfprintf_internal_r+0x13c4>
    18b8:	18800e36 	bltu	r3,r2,18f4 <___vfprintf_internal_r+0x134c>
    18bc:	00800084 	movi	r2,2
    18c0:	1880fa26 	beq	r3,r2,1cac <___vfprintf_internal_r+0x1704>
    18c4:	01000074 	movhi	r4,1
    18c8:	21002004 	addi	r4,r4,128
    18cc:	00004dc0 	call	4dc <strlen>
    18d0:	100f883a 	mov	r7,r2
    18d4:	dcc14515 	stw	r19,1300(sp)
    18d8:	9880010e 	bge	r19,r2,18e0 <___vfprintf_internal_r+0x1338>
    18dc:	d8814515 	stw	r2,1300(sp)
    18e0:	00800074 	movhi	r2,1
    18e4:	10802004 	addi	r2,r2,128
    18e8:	dcc14615 	stw	r19,1304(sp)
    18ec:	d8814115 	stw	r2,1284(sp)
    18f0:	003dcf06 	br	1030 <___vfprintf_internal_r+0xa88>
    18f4:	d9401904 	addi	r5,sp,100
    18f8:	dd000f04 	addi	r20,sp,60
    18fc:	d9414115 	stw	r5,1284(sp)
    1900:	880a977a 	slli	r5,r17,29
    1904:	d9814117 	ldw	r6,1284(sp)
    1908:	8004d0fa 	srli	r2,r16,3
    190c:	8806d0fa 	srli	r3,r17,3
    1910:	810001cc 	andi	r4,r16,7
    1914:	2884b03a 	or	r2,r5,r2
    1918:	31bfffc4 	addi	r6,r6,-1
    191c:	21000c04 	addi	r4,r4,48
    1920:	d9814115 	stw	r6,1284(sp)
    1924:	10cab03a 	or	r5,r2,r3
    1928:	31000005 	stb	r4,0(r6)
    192c:	1021883a 	mov	r16,r2
    1930:	1823883a 	mov	r17,r3
    1934:	283ff21e 	bne	r5,zero,1900 <___vfprintf_internal_r+0x1358>
    1938:	d8c14c17 	ldw	r3,1328(sp)
    193c:	1880004c 	andi	r2,r3,1
    1940:	1005003a 	cmpeq	r2,r2,zero
    1944:	103db31e 	bne	r2,zero,1014 <___vfprintf_internal_r+0xa6c>
    1948:	20803fcc 	andi	r2,r4,255
    194c:	1080201c 	xori	r2,r2,128
    1950:	10bfe004 	addi	r2,r2,-128
    1954:	00c00c04 	movi	r3,48
    1958:	10fdae26 	beq	r2,r3,1014 <___vfprintf_internal_r+0xa6c>
    195c:	31bfffc4 	addi	r6,r6,-1
    1960:	d9814115 	stw	r6,1284(sp)
    1964:	30c00005 	stb	r3,0(r6)
    1968:	003daa06 	br	1014 <___vfprintf_internal_r+0xa6c>
    196c:	88800068 	cmpgeui	r2,r17,1
    1970:	10002c1e 	bne	r2,zero,1a24 <___vfprintf_internal_r+0x147c>
    1974:	8800021e 	bne	r17,zero,1980 <___vfprintf_internal_r+0x13d8>
    1978:	00800244 	movi	r2,9
    197c:	14002936 	bltu	r2,r16,1a24 <___vfprintf_internal_r+0x147c>
    1980:	d90018c4 	addi	r4,sp,99
    1984:	dd000f04 	addi	r20,sp,60
    1988:	d9014115 	stw	r4,1284(sp)
    198c:	d9014117 	ldw	r4,1284(sp)
    1990:	80800c04 	addi	r2,r16,48
    1994:	20800005 	stb	r2,0(r4)
    1998:	003d9e06 	br	1014 <___vfprintf_internal_r+0xa6c>
    199c:	dc400d17 	ldw	r17,52(sp)
    19a0:	07000074 	movhi	fp,1
    19a4:	e7002784 	addi	fp,fp,158
    19a8:	9425883a 	add	r18,r18,r16
    19ac:	8c400044 	addi	r17,r17,1
    19b0:	008001c4 	movi	r2,7
    19b4:	1f000015 	stw	fp,0(r3)
    19b8:	1c000115 	stw	r16,4(r3)
    19bc:	dc800e15 	stw	r18,56(sp)
    19c0:	dc400d15 	stw	r17,52(sp)
    19c4:	147ddc16 	blt	r2,r17,1138 <___vfprintf_internal_r+0xb90>
    19c8:	18c00204 	addi	r3,r3,8
    19cc:	003c7406 	br	ba0 <___vfprintf_internal_r+0x5f8>
    19d0:	01000084 	movi	r4,2
    19d4:	d8000405 	stb	zero,16(sp)
    19d8:	003d8106 	br	fe0 <___vfprintf_internal_r+0xa38>
    19dc:	d9814c17 	ldw	r6,1328(sp)
    19e0:	30c4703a 	and	r2,r6,r3
    19e4:	1005003a 	cmpeq	r2,r2,zero
    19e8:	103cb326 	beq	r2,zero,cb8 <___vfprintf_internal_r+0x710>
    19ec:	d9014117 	ldw	r4,1284(sp)
    19f0:	94800044 	addi	r18,r18,1
    19f4:	8c400044 	addi	r17,r17,1
    19f8:	008001c4 	movi	r2,7
    19fc:	a9000015 	stw	r4,0(r21)
    1a00:	a8c00115 	stw	r3,4(r21)
    1a04:	dc800e15 	stw	r18,56(sp)
    1a08:	dc400d15 	stw	r17,52(sp)
    1a0c:	147e6016 	blt	r2,r17,1390 <___vfprintf_internal_r+0xde8>
    1a10:	acc00204 	addi	r19,r21,8
    1a14:	003cd106 	br	d5c <___vfprintf_internal_r+0x7b4>
    1a18:	07000074 	movhi	fp,1
    1a1c:	e7002784 	addi	fp,fp,158
    1a20:	003c4906 	br	b48 <___vfprintf_internal_r+0x5a0>
    1a24:	dd000f04 	addi	r20,sp,60
    1a28:	dc801904 	addi	r18,sp,100
    1a2c:	8009883a 	mov	r4,r16
    1a30:	880b883a 	mov	r5,r17
    1a34:	01800284 	movi	r6,10
    1a38:	000f883a 	mov	r7,zero
    1a3c:	0007e540 	call	7e54 <__umoddi3>
    1a40:	12000c04 	addi	r8,r2,48
    1a44:	94bfffc4 	addi	r18,r18,-1
    1a48:	8009883a 	mov	r4,r16
    1a4c:	880b883a 	mov	r5,r17
    1a50:	01800284 	movi	r6,10
    1a54:	000f883a 	mov	r7,zero
    1a58:	92000005 	stb	r8,0(r18)
    1a5c:	00077e80 	call	77e8 <__udivdi3>
    1a60:	1009883a 	mov	r4,r2
    1a64:	1021883a 	mov	r16,r2
    1a68:	18800068 	cmpgeui	r2,r3,1
    1a6c:	1823883a 	mov	r17,r3
    1a70:	103fee1e 	bne	r2,zero,1a2c <___vfprintf_internal_r+0x1484>
    1a74:	1800021e 	bne	r3,zero,1a80 <___vfprintf_internal_r+0x14d8>
    1a78:	00800244 	movi	r2,9
    1a7c:	113feb36 	bltu	r2,r4,1a2c <___vfprintf_internal_r+0x1484>
    1a80:	94bfffc4 	addi	r18,r18,-1
    1a84:	dc814115 	stw	r18,1284(sp)
    1a88:	003fc006 	br	198c <___vfprintf_internal_r+0x13e4>
    1a8c:	d9014c17 	ldw	r4,1328(sp)
    1a90:	2080004c 	andi	r2,r4,1
    1a94:	10009a1e 	bne	r2,zero,1d00 <___vfprintf_internal_r+0x1758>
    1a98:	d9401904 	addi	r5,sp,100
    1a9c:	dd000f04 	addi	r20,sp,60
    1aa0:	d9414115 	stw	r5,1284(sp)
    1aa4:	003d5b06 	br	1014 <___vfprintf_internal_r+0xa6c>
    1aa8:	d9014f17 	ldw	r4,1340(sp)
    1aac:	b00b883a 	mov	r5,r22
    1ab0:	d9800c04 	addi	r6,sp,48
    1ab4:	00005500 	call	550 <__sprint_r>
    1ab8:	103c731e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
    1abc:	dc800e17 	ldw	r18,56(sp)
    1ac0:	d8c01904 	addi	r3,sp,100
    1ac4:	003cf906 	br	eac <___vfprintf_internal_r+0x904>
    1ac8:	d8c14c17 	ldw	r3,1328(sp)
    1acc:	1880040c 	andi	r2,r3,16
    1ad0:	1000711e 	bne	r2,zero,1c98 <___vfprintf_internal_r+0x16f0>
    1ad4:	d9014c17 	ldw	r4,1328(sp)
    1ad8:	2080100c 	andi	r2,r4,64
    1adc:	10006e26 	beq	r2,zero,1c98 <___vfprintf_internal_r+0x16f0>
    1ae0:	3c00000b 	ldhu	r16,0(r7)
    1ae4:	0023883a 	mov	r17,zero
    1ae8:	39c00104 	addi	r7,r7,4
    1aec:	d9c14015 	stw	r7,1280(sp)
    1af0:	003efa06 	br	16dc <___vfprintf_internal_r+0x1134>
    1af4:	dc400d17 	ldw	r17,52(sp)
    1af8:	07000074 	movhi	fp,1
    1afc:	e7002784 	addi	fp,fp,158
    1b00:	9425883a 	add	r18,r18,r16
    1b04:	8c400044 	addi	r17,r17,1
    1b08:	008001c4 	movi	r2,7
    1b0c:	1f000015 	stw	fp,0(r3)
    1b10:	1c000115 	stw	r16,4(r3)
    1b14:	dc800e15 	stw	r18,56(sp)
    1b18:	dc400d15 	stw	r17,52(sp)
    1b1c:	147d7016 	blt	r2,r17,10e0 <___vfprintf_internal_r+0xb38>
    1b20:	18c00204 	addi	r3,r3,8
    1b24:	003d7506 	br	10fc <___vfprintf_internal_r+0xb54>
    1b28:	dc800e17 	ldw	r18,56(sp)
    1b2c:	dc400d17 	ldw	r17,52(sp)
    1b30:	07000074 	movhi	fp,1
    1b34:	e7002b84 	addi	fp,fp,174
    1b38:	003bba06 	br	a24 <___vfprintf_internal_r+0x47c>
    1b3c:	d9014f17 	ldw	r4,1340(sp)
    1b40:	b00b883a 	mov	r5,r22
    1b44:	d9800c04 	addi	r6,sp,48
    1b48:	00005500 	call	550 <__sprint_r>
    1b4c:	103c4e1e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
    1b50:	dc800e17 	ldw	r18,56(sp)
    1b54:	d8c01904 	addi	r3,sp,100
    1b58:	003ce306 	br	ee8 <___vfprintf_internal_r+0x940>
    1b5c:	3c000017 	ldw	r16,0(r7)
    1b60:	0009883a 	mov	r4,zero
    1b64:	39c00104 	addi	r7,r7,4
    1b68:	0023883a 	mov	r17,zero
    1b6c:	d9c14015 	stw	r7,1280(sp)
    1b70:	d8000405 	stb	zero,16(sp)
    1b74:	003d1a06 	br	fe0 <___vfprintf_internal_r+0xa38>
    1b78:	38800017 	ldw	r2,0(r7)
    1b7c:	39c00104 	addi	r7,r7,4
    1b80:	d9c14015 	stw	r7,1280(sp)
    1b84:	1023d7fa 	srai	r17,r2,31
    1b88:	1021883a 	mov	r16,r2
    1b8c:	003d1206 	br	fd8 <___vfprintf_internal_r+0xa30>
    1b90:	3c000017 	ldw	r16,0(r7)
    1b94:	01000044 	movi	r4,1
    1b98:	39c00104 	addi	r7,r7,4
    1b9c:	0023883a 	mov	r17,zero
    1ba0:	d9c14015 	stw	r7,1280(sp)
    1ba4:	d8000405 	stb	zero,16(sp)
    1ba8:	003d0d06 	br	fe0 <___vfprintf_internal_r+0xa38>
    1bac:	00800074 	movhi	r2,1
    1bb0:	10802704 	addi	r2,r2,156
    1bb4:	94800044 	addi	r18,r18,1
    1bb8:	8c400044 	addi	r17,r17,1
    1bbc:	a8800015 	stw	r2,0(r21)
    1bc0:	00c00044 	movi	r3,1
    1bc4:	008001c4 	movi	r2,7
    1bc8:	a8c00115 	stw	r3,4(r21)
    1bcc:	dc800e15 	stw	r18,56(sp)
    1bd0:	dc400d15 	stw	r17,52(sp)
    1bd4:	1440ca16 	blt	r2,r17,1f00 <___vfprintf_internal_r+0x1958>
    1bd8:	a8c00204 	addi	r3,r21,8
    1bdc:	2000061e 	bne	r4,zero,1bf8 <___vfprintf_internal_r+0x1650>
    1be0:	d9414717 	ldw	r5,1308(sp)
    1be4:	2800041e 	bne	r5,zero,1bf8 <___vfprintf_internal_r+0x1650>
    1be8:	d9814c17 	ldw	r6,1328(sp)
    1bec:	3080004c 	andi	r2,r6,1
    1bf0:	1005003a 	cmpeq	r2,r2,zero
    1bf4:	103bea1e 	bne	r2,zero,ba0 <___vfprintf_internal_r+0x5f8>
    1bf8:	00800044 	movi	r2,1
    1bfc:	dc400d17 	ldw	r17,52(sp)
    1c00:	18800115 	stw	r2,4(r3)
    1c04:	d8814917 	ldw	r2,1316(sp)
    1c08:	94800044 	addi	r18,r18,1
    1c0c:	8c400044 	addi	r17,r17,1
    1c10:	18800015 	stw	r2,0(r3)
    1c14:	008001c4 	movi	r2,7
    1c18:	dc800e15 	stw	r18,56(sp)
    1c1c:	dc400d15 	stw	r17,52(sp)
    1c20:	1440ca16 	blt	r2,r17,1f4c <___vfprintf_internal_r+0x19a4>
    1c24:	18c00204 	addi	r3,r3,8
    1c28:	0121c83a 	sub	r16,zero,r4
    1c2c:	0400500e 	bge	zero,r16,1d70 <___vfprintf_internal_r+0x17c8>
    1c30:	00800404 	movi	r2,16
    1c34:	1400800e 	bge	r2,r16,1e38 <___vfprintf_internal_r+0x1890>
    1c38:	1027883a 	mov	r19,r2
    1c3c:	07000074 	movhi	fp,1
    1c40:	e7002784 	addi	fp,fp,158
    1c44:	050001c4 	movi	r20,7
    1c48:	00000306 	br	1c58 <___vfprintf_internal_r+0x16b0>
    1c4c:	18c00204 	addi	r3,r3,8
    1c50:	843ffc04 	addi	r16,r16,-16
    1c54:	9c007a0e 	bge	r19,r16,1e40 <___vfprintf_internal_r+0x1898>
    1c58:	94800404 	addi	r18,r18,16
    1c5c:	8c400044 	addi	r17,r17,1
    1c60:	1f000015 	stw	fp,0(r3)
    1c64:	1cc00115 	stw	r19,4(r3)
    1c68:	dc800e15 	stw	r18,56(sp)
    1c6c:	dc400d15 	stw	r17,52(sp)
    1c70:	a47ff60e 	bge	r20,r17,1c4c <___vfprintf_internal_r+0x16a4>
    1c74:	d9014f17 	ldw	r4,1340(sp)
    1c78:	b00b883a 	mov	r5,r22
    1c7c:	d9800c04 	addi	r6,sp,48
    1c80:	00005500 	call	550 <__sprint_r>
    1c84:	103c001e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
    1c88:	dc800e17 	ldw	r18,56(sp)
    1c8c:	dc400d17 	ldw	r17,52(sp)
    1c90:	d8c01904 	addi	r3,sp,100
    1c94:	003fee06 	br	1c50 <___vfprintf_internal_r+0x16a8>
    1c98:	3c000017 	ldw	r16,0(r7)
    1c9c:	0023883a 	mov	r17,zero
    1ca0:	39c00104 	addi	r7,r7,4
    1ca4:	d9c14015 	stw	r7,1280(sp)
    1ca8:	003e8c06 	br	16dc <___vfprintf_internal_r+0x1134>
    1cac:	d9401904 	addi	r5,sp,100
    1cb0:	dd000f04 	addi	r20,sp,60
    1cb4:	d9414115 	stw	r5,1284(sp)
    1cb8:	d9814417 	ldw	r6,1296(sp)
    1cbc:	880a973a 	slli	r5,r17,28
    1cc0:	8004d13a 	srli	r2,r16,4
    1cc4:	810003cc 	andi	r4,r16,15
    1cc8:	3109883a 	add	r4,r6,r4
    1ccc:	2884b03a 	or	r2,r5,r2
    1cd0:	21400003 	ldbu	r5,0(r4)
    1cd4:	d9014117 	ldw	r4,1284(sp)
    1cd8:	8806d13a 	srli	r3,r17,4
    1cdc:	1021883a 	mov	r16,r2
    1ce0:	213fffc4 	addi	r4,r4,-1
    1ce4:	d9014115 	stw	r4,1284(sp)
    1ce8:	d9814117 	ldw	r6,1284(sp)
    1cec:	10c8b03a 	or	r4,r2,r3
    1cf0:	1823883a 	mov	r17,r3
    1cf4:	31400005 	stb	r5,0(r6)
    1cf8:	203fef1e 	bne	r4,zero,1cb8 <___vfprintf_internal_r+0x1710>
    1cfc:	003cc506 	br	1014 <___vfprintf_internal_r+0xa6c>
    1d00:	00800c04 	movi	r2,48
    1d04:	d98018c4 	addi	r6,sp,99
    1d08:	dd000f04 	addi	r20,sp,60
    1d0c:	d88018c5 	stb	r2,99(sp)
    1d10:	d9814115 	stw	r6,1284(sp)
    1d14:	003cbf06 	br	1014 <___vfprintf_internal_r+0xa6c>
    1d18:	dc400d17 	ldw	r17,52(sp)
    1d1c:	07000074 	movhi	fp,1
    1d20:	e7002b84 	addi	fp,fp,174
    1d24:	003bc106 	br	c2c <___vfprintf_internal_r+0x684>
    1d28:	d9414c17 	ldw	r5,1328(sp)
    1d2c:	2880040c 	andi	r2,r5,16
    1d30:	10007c26 	beq	r2,zero,1f24 <___vfprintf_internal_r+0x197c>
    1d34:	38800017 	ldw	r2,0(r7)
    1d38:	39c00104 	addi	r7,r7,4
    1d3c:	d9c14015 	stw	r7,1280(sp)
    1d40:	d9814b17 	ldw	r6,1324(sp)
    1d44:	d9c14017 	ldw	r7,1280(sp)
    1d48:	11800015 	stw	r6,0(r2)
    1d4c:	003a7206 	br	718 <___vfprintf_internal_r+0x170>
    1d50:	d9014f17 	ldw	r4,1340(sp)
    1d54:	b00b883a 	mov	r5,r22
    1d58:	d9800c04 	addi	r6,sp,48
    1d5c:	00005500 	call	550 <__sprint_r>
    1d60:	103bc91e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
    1d64:	dc800e17 	ldw	r18,56(sp)
    1d68:	dc400d17 	ldw	r17,52(sp)
    1d6c:	d8c01904 	addi	r3,sp,100
    1d70:	d9014717 	ldw	r4,1308(sp)
    1d74:	d9414117 	ldw	r5,1284(sp)
    1d78:	8c400044 	addi	r17,r17,1
    1d7c:	9125883a 	add	r18,r18,r4
    1d80:	008001c4 	movi	r2,7
    1d84:	19400015 	stw	r5,0(r3)
    1d88:	19000115 	stw	r4,4(r3)
    1d8c:	dc800e15 	stw	r18,56(sp)
    1d90:	dc400d15 	stw	r17,52(sp)
    1d94:	147ce816 	blt	r2,r17,1138 <___vfprintf_internal_r+0xb90>
    1d98:	18c00204 	addi	r3,r3,8
    1d9c:	003b8006 	br	ba0 <___vfprintf_internal_r+0x5f8>
    1da0:	38c00017 	ldw	r3,0(r7)
    1da4:	39000204 	addi	r4,r7,8
    1da8:	d9014015 	stw	r4,1280(sp)
    1dac:	d8c14215 	stw	r3,1288(sp)
    1db0:	39c00117 	ldw	r7,4(r7)
    1db4:	d9c14315 	stw	r7,1292(sp)
    1db8:	003e1a06 	br	1624 <___vfprintf_internal_r+0x107c>
    1dbc:	0005883a 	mov	r2,zero
    1dc0:	1409c83a 	sub	r4,r2,r16
    1dc4:	1105803a 	cmpltu	r2,r2,r4
    1dc8:	044bc83a 	sub	r5,zero,r17
    1dcc:	2885c83a 	sub	r2,r5,r2
    1dd0:	2021883a 	mov	r16,r4
    1dd4:	1023883a 	mov	r17,r2
    1dd8:	01000044 	movi	r4,1
    1ddc:	00800b44 	movi	r2,45
    1de0:	d8800405 	stb	r2,16(sp)
    1de4:	003c7e06 	br	fe0 <___vfprintf_internal_r+0xa38>
    1de8:	d9014f17 	ldw	r4,1340(sp)
    1dec:	b00b883a 	mov	r5,r22
    1df0:	d9800c04 	addi	r6,sp,48
    1df4:	00005500 	call	550 <__sprint_r>
    1df8:	103ba31e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
    1dfc:	dc800e17 	ldw	r18,56(sp)
    1e00:	dc400d17 	ldw	r17,52(sp)
    1e04:	d9000517 	ldw	r4,20(sp)
    1e08:	d9401904 	addi	r5,sp,100
    1e0c:	003da106 	br	1494 <___vfprintf_internal_r+0xeec>
    1e10:	d9014f17 	ldw	r4,1340(sp)
    1e14:	b00b883a 	mov	r5,r22
    1e18:	d9800c04 	addi	r6,sp,48
    1e1c:	00005500 	call	550 <__sprint_r>
    1e20:	103b991e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
    1e24:	dc800e17 	ldw	r18,56(sp)
    1e28:	dc400d17 	ldw	r17,52(sp)
    1e2c:	d9000517 	ldw	r4,20(sp)
    1e30:	d8c01904 	addi	r3,sp,100
    1e34:	003d8b06 	br	1464 <___vfprintf_internal_r+0xebc>
    1e38:	07000074 	movhi	fp,1
    1e3c:	e7002784 	addi	fp,fp,158
    1e40:	9425883a 	add	r18,r18,r16
    1e44:	8c400044 	addi	r17,r17,1
    1e48:	008001c4 	movi	r2,7
    1e4c:	1f000015 	stw	fp,0(r3)
    1e50:	1c000115 	stw	r16,4(r3)
    1e54:	dc800e15 	stw	r18,56(sp)
    1e58:	dc400d15 	stw	r17,52(sp)
    1e5c:	147fbc16 	blt	r2,r17,1d50 <___vfprintf_internal_r+0x17a8>
    1e60:	18c00204 	addi	r3,r3,8
    1e64:	003fc206 	br	1d70 <___vfprintf_internal_r+0x17c8>
    1e68:	d9014f17 	ldw	r4,1340(sp)
    1e6c:	b00b883a 	mov	r5,r22
    1e70:	d9800c04 	addi	r6,sp,48
    1e74:	00005500 	call	550 <__sprint_r>
    1e78:	103b831e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
    1e7c:	dc800e17 	ldw	r18,56(sp)
    1e80:	d9000517 	ldw	r4,20(sp)
    1e84:	d8c01904 	addi	r3,sp,100
    1e88:	003cfc06 	br	127c <___vfprintf_internal_r+0xcd4>
    1e8c:	07000074 	movhi	fp,1
    1e90:	e7002784 	addi	fp,fp,158
    1e94:	003bde06 	br	e10 <___vfprintf_internal_r+0x868>
    1e98:	00800074 	movhi	r2,1
    1e9c:	10801604 	addi	r2,r2,88
    1ea0:	d8814115 	stw	r2,1284(sp)
    1ea4:	003def06 	br	1664 <___vfprintf_internal_r+0x10bc>
    1ea8:	d9014217 	ldw	r4,1288(sp)
    1eac:	d9414317 	ldw	r5,1292(sp)
    1eb0:	00070980 	call	7098 <__isnand>
    1eb4:	10003926 	beq	r2,zero,1f9c <___vfprintf_internal_r+0x19f4>
    1eb8:	d9414d17 	ldw	r5,1332(sp)
    1ebc:	008011c4 	movi	r2,71
    1ec0:	1140ce16 	blt	r2,r5,21fc <___vfprintf_internal_r+0x1c54>
    1ec4:	01800074 	movhi	r6,1
    1ec8:	31801704 	addi	r6,r6,92
    1ecc:	d9814115 	stw	r6,1284(sp)
    1ed0:	003de406 	br	1664 <___vfprintf_internal_r+0x10bc>
    1ed4:	d9014c17 	ldw	r4,1328(sp)
    1ed8:	bdc00044 	addi	r23,r23,1
    1edc:	b8c00007 	ldb	r3,0(r23)
    1ee0:	21000814 	ori	r4,r4,32
    1ee4:	d9014c15 	stw	r4,1328(sp)
    1ee8:	003a2e06 	br	7a4 <___vfprintf_internal_r+0x1fc>
    1eec:	dcc14515 	stw	r19,1300(sp)
    1ef0:	98011016 	blt	r19,zero,2334 <___vfprintf_internal_r+0x1d8c>
    1ef4:	980f883a 	mov	r7,r19
    1ef8:	d8014615 	stw	zero,1304(sp)
    1efc:	003c4c06 	br	1030 <___vfprintf_internal_r+0xa88>
    1f00:	d9014f17 	ldw	r4,1340(sp)
    1f04:	b00b883a 	mov	r5,r22
    1f08:	d9800c04 	addi	r6,sp,48
    1f0c:	00005500 	call	550 <__sprint_r>
    1f10:	103b5d1e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
    1f14:	dc800e17 	ldw	r18,56(sp)
    1f18:	d9000517 	ldw	r4,20(sp)
    1f1c:	d8c01904 	addi	r3,sp,100
    1f20:	003f2e06 	br	1bdc <___vfprintf_internal_r+0x1634>
    1f24:	d8c14c17 	ldw	r3,1328(sp)
    1f28:	1880100c 	andi	r2,r3,64
    1f2c:	1000a026 	beq	r2,zero,21b0 <___vfprintf_internal_r+0x1c08>
    1f30:	38800017 	ldw	r2,0(r7)
    1f34:	39c00104 	addi	r7,r7,4
    1f38:	d9c14015 	stw	r7,1280(sp)
    1f3c:	d9014b17 	ldw	r4,1324(sp)
    1f40:	d9c14017 	ldw	r7,1280(sp)
    1f44:	1100000d 	sth	r4,0(r2)
    1f48:	0039f306 	br	718 <___vfprintf_internal_r+0x170>
    1f4c:	d9014f17 	ldw	r4,1340(sp)
    1f50:	b00b883a 	mov	r5,r22
    1f54:	d9800c04 	addi	r6,sp,48
    1f58:	00005500 	call	550 <__sprint_r>
    1f5c:	103b4a1e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
    1f60:	dc800e17 	ldw	r18,56(sp)
    1f64:	dc400d17 	ldw	r17,52(sp)
    1f68:	d9000517 	ldw	r4,20(sp)
    1f6c:	d8c01904 	addi	r3,sp,100
    1f70:	003f2d06 	br	1c28 <___vfprintf_internal_r+0x1680>
    1f74:	00800184 	movi	r2,6
    1f78:	14c09a36 	bltu	r2,r19,21e4 <___vfprintf_internal_r+0x1c3c>
    1f7c:	dcc14515 	stw	r19,1300(sp)
    1f80:	9800010e 	bge	r19,zero,1f88 <___vfprintf_internal_r+0x19e0>
    1f84:	d8014515 	stw	zero,1300(sp)
    1f88:	00800074 	movhi	r2,1
    1f8c:	10801904 	addi	r2,r2,100
    1f90:	980f883a 	mov	r7,r19
    1f94:	d8814115 	stw	r2,1284(sp)
    1f98:	003a7206 	br	964 <___vfprintf_internal_r+0x3bc>
    1f9c:	00bfffc4 	movi	r2,-1
    1fa0:	9880e226 	beq	r19,r2,232c <___vfprintf_internal_r+0x1d84>
    1fa4:	d9414d17 	ldw	r5,1332(sp)
    1fa8:	008019c4 	movi	r2,103
    1fac:	2880dc26 	beq	r5,r2,2320 <___vfprintf_internal_r+0x1d78>
    1fb0:	008011c4 	movi	r2,71
    1fb4:	2880da26 	beq	r5,r2,2320 <___vfprintf_internal_r+0x1d78>
    1fb8:	d9414c17 	ldw	r5,1328(sp)
    1fbc:	d9014317 	ldw	r4,1292(sp)
    1fc0:	d9814217 	ldw	r6,1288(sp)
    1fc4:	29404014 	ori	r5,r5,256
    1fc8:	d9414c15 	stw	r5,1328(sp)
    1fcc:	2000cc16 	blt	r4,zero,2300 <___vfprintf_internal_r+0x1d58>
    1fd0:	3021883a 	mov	r16,r6
    1fd4:	2023883a 	mov	r17,r4
    1fd8:	0039883a 	mov	fp,zero
    1fdc:	d9414d17 	ldw	r5,1332(sp)
    1fe0:	00801984 	movi	r2,102
    1fe4:	2880b726 	beq	r5,r2,22c4 <___vfprintf_internal_r+0x1d1c>
    1fe8:	00801184 	movi	r2,70
    1fec:	2880b526 	beq	r5,r2,22c4 <___vfprintf_internal_r+0x1d1c>
    1ff0:	00801944 	movi	r2,101
    1ff4:	2880c826 	beq	r5,r2,2318 <___vfprintf_internal_r+0x1d70>
    1ff8:	00801144 	movi	r2,69
    1ffc:	2880c626 	beq	r5,r2,2318 <___vfprintf_internal_r+0x1d70>
    2000:	9829883a 	mov	r20,r19
    2004:	d9014f17 	ldw	r4,1340(sp)
    2008:	d8800504 	addi	r2,sp,20
    200c:	880d883a 	mov	r6,r17
    2010:	d8800115 	stw	r2,4(sp)
    2014:	d8c00604 	addi	r3,sp,24
    2018:	d8800704 	addi	r2,sp,28
    201c:	800b883a 	mov	r5,r16
    2020:	01c00084 	movi	r7,2
    2024:	d8c00215 	stw	r3,8(sp)
    2028:	d8800315 	stw	r2,12(sp)
    202c:	dd000015 	stw	r20,0(sp)
    2030:	00028100 	call	2810 <_dtoa_r>
    2034:	d9814d17 	ldw	r6,1332(sp)
    2038:	d8814115 	stw	r2,1284(sp)
    203c:	008019c4 	movi	r2,103
    2040:	30809526 	beq	r6,r2,2298 <___vfprintf_internal_r+0x1cf0>
    2044:	d8c14d17 	ldw	r3,1332(sp)
    2048:	008011c4 	movi	r2,71
    204c:	18809226 	beq	r3,r2,2298 <___vfprintf_internal_r+0x1cf0>
    2050:	d9414117 	ldw	r5,1284(sp)
    2054:	d9814d17 	ldw	r6,1332(sp)
    2058:	00801984 	movi	r2,102
    205c:	2d25883a 	add	r18,r5,r20
    2060:	30808626 	beq	r6,r2,227c <___vfprintf_internal_r+0x1cd4>
    2064:	00801184 	movi	r2,70
    2068:	30808426 	beq	r6,r2,227c <___vfprintf_internal_r+0x1cd4>
    206c:	000d883a 	mov	r6,zero
    2070:	000f883a 	mov	r7,zero
    2074:	880b883a 	mov	r5,r17
    2078:	8009883a 	mov	r4,r16
    207c:	0008fd40 	call	8fd4 <__eqdf2>
    2080:	1000751e 	bne	r2,zero,2258 <___vfprintf_internal_r+0x1cb0>
    2084:	9005883a 	mov	r2,r18
    2088:	dc800715 	stw	r18,28(sp)
    208c:	d9014117 	ldw	r4,1284(sp)
    2090:	d9414d17 	ldw	r5,1332(sp)
    2094:	00c019c4 	movi	r3,103
    2098:	1125c83a 	sub	r18,r2,r4
    209c:	28c06826 	beq	r5,r3,2240 <___vfprintf_internal_r+0x1c98>
    20a0:	008011c4 	movi	r2,71
    20a4:	28806626 	beq	r5,r2,2240 <___vfprintf_internal_r+0x1c98>
    20a8:	d9000517 	ldw	r4,20(sp)
    20ac:	d8c14d17 	ldw	r3,1332(sp)
    20b0:	00801944 	movi	r2,101
    20b4:	10c05516 	blt	r2,r3,220c <___vfprintf_internal_r+0x1c64>
    20b8:	213fffc4 	addi	r4,r4,-1
    20bc:	d9000515 	stw	r4,20(sp)
    20c0:	d8c00805 	stb	r3,32(sp)
    20c4:	2021883a 	mov	r16,r4
    20c8:	2000c116 	blt	r4,zero,23d0 <___vfprintf_internal_r+0x1e28>
    20cc:	00800ac4 	movi	r2,43
    20d0:	d8800845 	stb	r2,33(sp)
    20d4:	00800244 	movi	r2,9
    20d8:	1400af0e 	bge	r2,r16,2398 <___vfprintf_internal_r+0x1df0>
    20dc:	1027883a 	mov	r19,r2
    20e0:	dc400b84 	addi	r17,sp,46
    20e4:	8009883a 	mov	r4,r16
    20e8:	01400284 	movi	r5,10
    20ec:	00096bc0 	call	96bc <__modsi3>
    20f0:	10800c04 	addi	r2,r2,48
    20f4:	8c7fffc4 	addi	r17,r17,-1
    20f8:	8009883a 	mov	r4,r16
    20fc:	01400284 	movi	r5,10
    2100:	88800005 	stb	r2,0(r17)
    2104:	000965c0 	call	965c <__divsi3>
    2108:	1021883a 	mov	r16,r2
    210c:	98bff516 	blt	r19,r2,20e4 <___vfprintf_internal_r+0x1b3c>
    2110:	10c00c04 	addi	r3,r2,48
    2114:	d88009c4 	addi	r2,sp,39
    2118:	108001c4 	addi	r2,r2,7
    211c:	897fffc4 	addi	r5,r17,-1
    2120:	88ffffc5 	stb	r3,-1(r17)
    2124:	2880a72e 	bgeu	r5,r2,23c4 <___vfprintf_internal_r+0x1e1c>
    2128:	1009883a 	mov	r4,r2
    212c:	d9800804 	addi	r6,sp,32
    2130:	d8c00884 	addi	r3,sp,34
    2134:	28800003 	ldbu	r2,0(r5)
    2138:	29400044 	addi	r5,r5,1
    213c:	18800005 	stb	r2,0(r3)
    2140:	18c00044 	addi	r3,r3,1
    2144:	293ffb36 	bltu	r5,r4,2134 <___vfprintf_internal_r+0x1b8c>
    2148:	1987c83a 	sub	r3,r3,r6
    214c:	00800044 	movi	r2,1
    2150:	d8c14815 	stw	r3,1312(sp)
    2154:	90cf883a 	add	r7,r18,r3
    2158:	1480960e 	bge	r2,r18,23b4 <___vfprintf_internal_r+0x1e0c>
    215c:	39c00044 	addi	r7,r7,1
    2160:	d9c14515 	stw	r7,1300(sp)
    2164:	38003416 	blt	r7,zero,2238 <___vfprintf_internal_r+0x1c90>
    2168:	e0803fcc 	andi	r2,fp,255
    216c:	1080201c 	xori	r2,r2,128
    2170:	10bfe004 	addi	r2,r2,-128
    2174:	10004e26 	beq	r2,zero,22b0 <___vfprintf_internal_r+0x1d08>
    2178:	00800b44 	movi	r2,45
    217c:	dc814715 	stw	r18,1308(sp)
    2180:	d8014615 	stw	zero,1304(sp)
    2184:	d8800405 	stb	r2,16(sp)
    2188:	003bab06 	br	1038 <___vfprintf_internal_r+0xa90>
    218c:	00800b44 	movi	r2,45
    2190:	d8800405 	stb	r2,16(sp)
    2194:	003d2d06 	br	164c <___vfprintf_internal_r+0x10a4>
    2198:	d9014f17 	ldw	r4,1340(sp)
    219c:	b00b883a 	mov	r5,r22
    21a0:	d9800c04 	addi	r6,sp,48
    21a4:	00005500 	call	550 <__sprint_r>
    21a8:	103ab71e 	bne	r2,zero,c88 <___vfprintf_internal_r+0x6e0>
    21ac:	003ab506 	br	c84 <___vfprintf_internal_r+0x6dc>
    21b0:	38800017 	ldw	r2,0(r7)
    21b4:	39c00104 	addi	r7,r7,4
    21b8:	d9c14015 	stw	r7,1280(sp)
    21bc:	d9414b17 	ldw	r5,1324(sp)
    21c0:	d9c14017 	ldw	r7,1280(sp)
    21c4:	11400015 	stw	r5,0(r2)
    21c8:	00395306 	br	718 <___vfprintf_internal_r+0x170>
    21cc:	980f883a 	mov	r7,r19
    21d0:	dcc14515 	stw	r19,1300(sp)
    21d4:	d8014615 	stw	zero,1304(sp)
    21d8:	003b9506 	br	1030 <___vfprintf_internal_r+0xa88>
    21dc:	0027883a 	mov	r19,zero
    21e0:	00397206 	br	7ac <___vfprintf_internal_r+0x204>
    21e4:	00c00074 	movhi	r3,1
    21e8:	18c01904 	addi	r3,r3,100
    21ec:	100f883a 	mov	r7,r2
    21f0:	d8814515 	stw	r2,1300(sp)
    21f4:	d8c14115 	stw	r3,1284(sp)
    21f8:	0039da06 	br	964 <___vfprintf_internal_r+0x3bc>
    21fc:	00800074 	movhi	r2,1
    2200:	10801804 	addi	r2,r2,96
    2204:	d8814115 	stw	r2,1284(sp)
    2208:	003d1606 	br	1664 <___vfprintf_internal_r+0x10bc>
    220c:	d9414d17 	ldw	r5,1332(sp)
    2210:	00801984 	movi	r2,102
    2214:	28804926 	beq	r5,r2,233c <___vfprintf_internal_r+0x1d94>
    2218:	200f883a 	mov	r7,r4
    221c:	24805716 	blt	r4,r18,237c <___vfprintf_internal_r+0x1dd4>
    2220:	d9414c17 	ldw	r5,1328(sp)
    2224:	2880004c 	andi	r2,r5,1
    2228:	10000126 	beq	r2,zero,2230 <___vfprintf_internal_r+0x1c88>
    222c:	21c00044 	addi	r7,r4,1
    2230:	d9c14515 	stw	r7,1300(sp)
    2234:	383fcc0e 	bge	r7,zero,2168 <___vfprintf_internal_r+0x1bc0>
    2238:	d8014515 	stw	zero,1300(sp)
    223c:	003fca06 	br	2168 <___vfprintf_internal_r+0x1bc0>
    2240:	d9000517 	ldw	r4,20(sp)
    2244:	00bfff04 	movi	r2,-4
    2248:	1100480e 	bge	r2,r4,236c <___vfprintf_internal_r+0x1dc4>
    224c:	99004716 	blt	r19,r4,236c <___vfprintf_internal_r+0x1dc4>
    2250:	d8c14d15 	stw	r3,1332(sp)
    2254:	003ff006 	br	2218 <___vfprintf_internal_r+0x1c70>
    2258:	d8800717 	ldw	r2,28(sp)
    225c:	14bf8b2e 	bgeu	r2,r18,208c <___vfprintf_internal_r+0x1ae4>
    2260:	9007883a 	mov	r3,r18
    2264:	01000c04 	movi	r4,48
    2268:	11000005 	stb	r4,0(r2)
    226c:	10800044 	addi	r2,r2,1
    2270:	d8800715 	stw	r2,28(sp)
    2274:	18bffc1e 	bne	r3,r2,2268 <___vfprintf_internal_r+0x1cc0>
    2278:	003f8406 	br	208c <___vfprintf_internal_r+0x1ae4>
    227c:	d8814117 	ldw	r2,1284(sp)
    2280:	10c00007 	ldb	r3,0(r2)
    2284:	00800c04 	movi	r2,48
    2288:	18805b26 	beq	r3,r2,23f8 <___vfprintf_internal_r+0x1e50>
    228c:	d9000517 	ldw	r4,20(sp)
    2290:	9125883a 	add	r18,r18,r4
    2294:	003f7506 	br	206c <___vfprintf_internal_r+0x1ac4>
    2298:	d9014c17 	ldw	r4,1328(sp)
    229c:	2080004c 	andi	r2,r4,1
    22a0:	1005003a 	cmpeq	r2,r2,zero
    22a4:	103f6a26 	beq	r2,zero,2050 <___vfprintf_internal_r+0x1aa8>
    22a8:	d8800717 	ldw	r2,28(sp)
    22ac:	003f7706 	br	208c <___vfprintf_internal_r+0x1ae4>
    22b0:	d9c14515 	stw	r7,1300(sp)
    22b4:	38004d16 	blt	r7,zero,23ec <___vfprintf_internal_r+0x1e44>
    22b8:	dc814715 	stw	r18,1308(sp)
    22bc:	d8014615 	stw	zero,1304(sp)
    22c0:	003b5b06 	br	1030 <___vfprintf_internal_r+0xa88>
    22c4:	d9014f17 	ldw	r4,1340(sp)
    22c8:	d8800504 	addi	r2,sp,20
    22cc:	d8800115 	stw	r2,4(sp)
    22d0:	d8c00604 	addi	r3,sp,24
    22d4:	d8800704 	addi	r2,sp,28
    22d8:	800b883a 	mov	r5,r16
    22dc:	880d883a 	mov	r6,r17
    22e0:	01c000c4 	movi	r7,3
    22e4:	d8c00215 	stw	r3,8(sp)
    22e8:	d8800315 	stw	r2,12(sp)
    22ec:	dcc00015 	stw	r19,0(sp)
    22f0:	9829883a 	mov	r20,r19
    22f4:	00028100 	call	2810 <_dtoa_r>
    22f8:	d8814115 	stw	r2,1284(sp)
    22fc:	003f5106 	br	2044 <___vfprintf_internal_r+0x1a9c>
    2300:	d8c14217 	ldw	r3,1288(sp)
    2304:	d9014317 	ldw	r4,1292(sp)
    2308:	07000b44 	movi	fp,45
    230c:	1821883a 	mov	r16,r3
    2310:	2460003c 	xorhi	r17,r4,32768
    2314:	003f3106 	br	1fdc <___vfprintf_internal_r+0x1a34>
    2318:	9d000044 	addi	r20,r19,1
    231c:	003f3906 	br	2004 <___vfprintf_internal_r+0x1a5c>
    2320:	983f251e 	bne	r19,zero,1fb8 <___vfprintf_internal_r+0x1a10>
    2324:	04c00044 	movi	r19,1
    2328:	003f2306 	br	1fb8 <___vfprintf_internal_r+0x1a10>
    232c:	04c00184 	movi	r19,6
    2330:	003f2106 	br	1fb8 <___vfprintf_internal_r+0x1a10>
    2334:	d8014515 	stw	zero,1300(sp)
    2338:	003eee06 	br	1ef4 <___vfprintf_internal_r+0x194c>
    233c:	200f883a 	mov	r7,r4
    2340:	0100370e 	bge	zero,r4,2420 <___vfprintf_internal_r+0x1e78>
    2344:	9800031e 	bne	r19,zero,2354 <___vfprintf_internal_r+0x1dac>
    2348:	d9814c17 	ldw	r6,1328(sp)
    234c:	3080004c 	andi	r2,r6,1
    2350:	103fb726 	beq	r2,zero,2230 <___vfprintf_internal_r+0x1c88>
    2354:	20800044 	addi	r2,r4,1
    2358:	98a7883a 	add	r19,r19,r2
    235c:	dcc14515 	stw	r19,1300(sp)
    2360:	980f883a 	mov	r7,r19
    2364:	983f800e 	bge	r19,zero,2168 <___vfprintf_internal_r+0x1bc0>
    2368:	003fb306 	br	2238 <___vfprintf_internal_r+0x1c90>
    236c:	d9814d17 	ldw	r6,1332(sp)
    2370:	31bfff84 	addi	r6,r6,-2
    2374:	d9814d15 	stw	r6,1332(sp)
    2378:	003f4c06 	br	20ac <___vfprintf_internal_r+0x1b04>
    237c:	0100180e 	bge	zero,r4,23e0 <___vfprintf_internal_r+0x1e38>
    2380:	00800044 	movi	r2,1
    2384:	1485883a 	add	r2,r2,r18
    2388:	d8814515 	stw	r2,1300(sp)
    238c:	100f883a 	mov	r7,r2
    2390:	103f750e 	bge	r2,zero,2168 <___vfprintf_internal_r+0x1bc0>
    2394:	003fa806 	br	2238 <___vfprintf_internal_r+0x1c90>
    2398:	80c00c04 	addi	r3,r16,48
    239c:	00800c04 	movi	r2,48
    23a0:	d8c008c5 	stb	r3,35(sp)
    23a4:	d9800804 	addi	r6,sp,32
    23a8:	d8c00904 	addi	r3,sp,36
    23ac:	d8800885 	stb	r2,34(sp)
    23b0:	003f6506 	br	2148 <___vfprintf_internal_r+0x1ba0>
    23b4:	d9014c17 	ldw	r4,1328(sp)
    23b8:	2084703a 	and	r2,r4,r2
    23bc:	103f9c26 	beq	r2,zero,2230 <___vfprintf_internal_r+0x1c88>
    23c0:	003f6606 	br	215c <___vfprintf_internal_r+0x1bb4>
    23c4:	d9800804 	addi	r6,sp,32
    23c8:	d8c00884 	addi	r3,sp,34
    23cc:	003f5e06 	br	2148 <___vfprintf_internal_r+0x1ba0>
    23d0:	00800b44 	movi	r2,45
    23d4:	0121c83a 	sub	r16,zero,r4
    23d8:	d8800845 	stb	r2,33(sp)
    23dc:	003f3d06 	br	20d4 <___vfprintf_internal_r+0x1b2c>
    23e0:	00800084 	movi	r2,2
    23e4:	1105c83a 	sub	r2,r2,r4
    23e8:	003fe606 	br	2384 <___vfprintf_internal_r+0x1ddc>
    23ec:	d8014515 	stw	zero,1300(sp)
    23f0:	dc814715 	stw	r18,1308(sp)
    23f4:	003fb106 	br	22bc <___vfprintf_internal_r+0x1d14>
    23f8:	000d883a 	mov	r6,zero
    23fc:	000f883a 	mov	r7,zero
    2400:	8009883a 	mov	r4,r16
    2404:	880b883a 	mov	r5,r17
    2408:	000905c0 	call	905c <__nedf2>
    240c:	103f9f26 	beq	r2,zero,228c <___vfprintf_internal_r+0x1ce4>
    2410:	00800044 	movi	r2,1
    2414:	1509c83a 	sub	r4,r2,r20
    2418:	d9000515 	stw	r4,20(sp)
    241c:	003f9b06 	br	228c <___vfprintf_internal_r+0x1ce4>
    2420:	98000d1e 	bne	r19,zero,2458 <___vfprintf_internal_r+0x1eb0>
    2424:	d8c14c17 	ldw	r3,1328(sp)
    2428:	1880004c 	andi	r2,r3,1
    242c:	10000a1e 	bne	r2,zero,2458 <___vfprintf_internal_r+0x1eb0>
    2430:	01000044 	movi	r4,1
    2434:	200f883a 	mov	r7,r4
    2438:	d9014515 	stw	r4,1300(sp)
    243c:	003f4a06 	br	2168 <___vfprintf_internal_r+0x1bc0>
    2440:	3cc00017 	ldw	r19,0(r7)
    2444:	39c00104 	addi	r7,r7,4
    2448:	983d0e0e 	bge	r19,zero,1884 <___vfprintf_internal_r+0x12dc>
    244c:	b8c00007 	ldb	r3,0(r23)
    2450:	04ffffc4 	movi	r19,-1
    2454:	0038d306 	br	7a4 <___vfprintf_internal_r+0x1fc>
    2458:	9cc00084 	addi	r19,r19,2
    245c:	dcc14515 	stw	r19,1300(sp)
    2460:	980f883a 	mov	r7,r19
    2464:	983f400e 	bge	r19,zero,2168 <___vfprintf_internal_r+0x1bc0>
    2468:	003f7306 	br	2238 <___vfprintf_internal_r+0x1c90>

0000246c <__vfprintf_internal>:
    246c:	00800074 	movhi	r2,1
    2470:	10876704 	addi	r2,r2,7580
    2474:	2013883a 	mov	r9,r4
    2478:	11000017 	ldw	r4,0(r2)
    247c:	2805883a 	mov	r2,r5
    2480:	300f883a 	mov	r7,r6
    2484:	480b883a 	mov	r5,r9
    2488:	100d883a 	mov	r6,r2
    248c:	00005a81 	jmpi	5a8 <___vfprintf_internal_r>

00002490 <__swsetup_r>:
    2490:	00800074 	movhi	r2,1
    2494:	10876704 	addi	r2,r2,7580
    2498:	10c00017 	ldw	r3,0(r2)
    249c:	defffd04 	addi	sp,sp,-12
    24a0:	dc400115 	stw	r17,4(sp)
    24a4:	dc000015 	stw	r16,0(sp)
    24a8:	dfc00215 	stw	ra,8(sp)
    24ac:	2023883a 	mov	r17,r4
    24b0:	2821883a 	mov	r16,r5
    24b4:	18000226 	beq	r3,zero,24c0 <__swsetup_r+0x30>
    24b8:	18800e17 	ldw	r2,56(r3)
    24bc:	10001f26 	beq	r2,zero,253c <__swsetup_r+0xac>
    24c0:	8100030b 	ldhu	r4,12(r16)
    24c4:	2080020c 	andi	r2,r4,8
    24c8:	10002826 	beq	r2,zero,256c <__swsetup_r+0xdc>
    24cc:	81400417 	ldw	r5,16(r16)
    24d0:	28001d26 	beq	r5,zero,2548 <__swsetup_r+0xb8>
    24d4:	2080004c 	andi	r2,r4,1
    24d8:	1005003a 	cmpeq	r2,r2,zero
    24dc:	10000b26 	beq	r2,zero,250c <__swsetup_r+0x7c>
    24e0:	2080008c 	andi	r2,r4,2
    24e4:	10001226 	beq	r2,zero,2530 <__swsetup_r+0xa0>
    24e8:	0005883a 	mov	r2,zero
    24ec:	80800215 	stw	r2,8(r16)
    24f0:	28000b26 	beq	r5,zero,2520 <__swsetup_r+0x90>
    24f4:	0005883a 	mov	r2,zero
    24f8:	dfc00217 	ldw	ra,8(sp)
    24fc:	dc400117 	ldw	r17,4(sp)
    2500:	dc000017 	ldw	r16,0(sp)
    2504:	dec00304 	addi	sp,sp,12
    2508:	f800283a 	ret
    250c:	80800517 	ldw	r2,20(r16)
    2510:	80000215 	stw	zero,8(r16)
    2514:	0085c83a 	sub	r2,zero,r2
    2518:	80800615 	stw	r2,24(r16)
    251c:	283ff51e 	bne	r5,zero,24f4 <__swsetup_r+0x64>
    2520:	2080200c 	andi	r2,r4,128
    2524:	103ff326 	beq	r2,zero,24f4 <__swsetup_r+0x64>
    2528:	00bfffc4 	movi	r2,-1
    252c:	003ff206 	br	24f8 <__swsetup_r+0x68>
    2530:	80800517 	ldw	r2,20(r16)
    2534:	80800215 	stw	r2,8(r16)
    2538:	003fed06 	br	24f0 <__swsetup_r+0x60>
    253c:	1809883a 	mov	r4,r3
    2540:	000405c0 	call	405c <__sinit>
    2544:	003fde06 	br	24c0 <__swsetup_r+0x30>
    2548:	20c0a00c 	andi	r3,r4,640
    254c:	00808004 	movi	r2,512
    2550:	18bfe026 	beq	r3,r2,24d4 <__swsetup_r+0x44>
    2554:	8809883a 	mov	r4,r17
    2558:	800b883a 	mov	r5,r16
    255c:	0004e080 	call	4e08 <__smakebuf_r>
    2560:	8100030b 	ldhu	r4,12(r16)
    2564:	81400417 	ldw	r5,16(r16)
    2568:	003fda06 	br	24d4 <__swsetup_r+0x44>
    256c:	2080040c 	andi	r2,r4,16
    2570:	103fed26 	beq	r2,zero,2528 <__swsetup_r+0x98>
    2574:	2080010c 	andi	r2,r4,4
    2578:	10001226 	beq	r2,zero,25c4 <__swsetup_r+0x134>
    257c:	81400c17 	ldw	r5,48(r16)
    2580:	28000526 	beq	r5,zero,2598 <__swsetup_r+0x108>
    2584:	80801004 	addi	r2,r16,64
    2588:	28800226 	beq	r5,r2,2594 <__swsetup_r+0x104>
    258c:	8809883a 	mov	r4,r17
    2590:	00044140 	call	4414 <_free_r>
    2594:	80000c15 	stw	zero,48(r16)
    2598:	8080030b 	ldhu	r2,12(r16)
    259c:	81400417 	ldw	r5,16(r16)
    25a0:	80000115 	stw	zero,4(r16)
    25a4:	10bff6cc 	andi	r2,r2,65499
    25a8:	8080030d 	sth	r2,12(r16)
    25ac:	81400015 	stw	r5,0(r16)
    25b0:	8080030b 	ldhu	r2,12(r16)
    25b4:	10800214 	ori	r2,r2,8
    25b8:	113fffcc 	andi	r4,r2,65535
    25bc:	8080030d 	sth	r2,12(r16)
    25c0:	003fc306 	br	24d0 <__swsetup_r+0x40>
    25c4:	81400417 	ldw	r5,16(r16)
    25c8:	003ff906 	br	25b0 <__swsetup_r+0x120>

000025cc <quorem>:
    25cc:	28c00417 	ldw	r3,16(r5)
    25d0:	20800417 	ldw	r2,16(r4)
    25d4:	defff104 	addi	sp,sp,-60
    25d8:	dfc00e15 	stw	ra,56(sp)
    25dc:	df000d15 	stw	fp,52(sp)
    25e0:	ddc00c15 	stw	r23,48(sp)
    25e4:	dd800b15 	stw	r22,44(sp)
    25e8:	dd400a15 	stw	r21,40(sp)
    25ec:	dd000915 	stw	r20,36(sp)
    25f0:	dcc00815 	stw	r19,32(sp)
    25f4:	dc800715 	stw	r18,28(sp)
    25f8:	dc400615 	stw	r17,24(sp)
    25fc:	dc000515 	stw	r16,20(sp)
    2600:	d9000315 	stw	r4,12(sp)
    2604:	d9400415 	stw	r5,16(sp)
    2608:	10c07f16 	blt	r2,r3,2808 <quorem+0x23c>
    260c:	1d3fffc4 	addi	r20,r3,-1
    2610:	d8c00417 	ldw	r3,16(sp)
    2614:	d9000317 	ldw	r4,12(sp)
    2618:	a505883a 	add	r2,r20,r20
    261c:	1085883a 	add	r2,r2,r2
    2620:	1cc00504 	addi	r19,r3,20
    2624:	25c00504 	addi	r23,r4,20
    2628:	98ad883a 	add	r22,r19,r2
    262c:	15c7883a 	add	r3,r2,r23
    2630:	b1400017 	ldw	r5,0(r22)
    2634:	19000017 	ldw	r4,0(r3)
    2638:	d8c00015 	stw	r3,0(sp)
    263c:	29400044 	addi	r5,r5,1
    2640:	d9000215 	stw	r4,8(sp)
    2644:	000971c0 	call	971c <__udivsi3>
    2648:	1039883a 	mov	fp,r2
    264c:	10003d1e 	bne	r2,zero,2744 <quorem+0x178>
    2650:	d9400417 	ldw	r5,16(sp)
    2654:	d9000317 	ldw	r4,12(sp)
    2658:	0005b340 	call	5b34 <__mcmp>
    265c:	10002c16 	blt	r2,zero,2710 <quorem+0x144>
    2660:	e7000044 	addi	fp,fp,1
    2664:	b80f883a 	mov	r7,r23
    2668:	0011883a 	mov	r8,zero
    266c:	0009883a 	mov	r4,zero
    2670:	99400017 	ldw	r5,0(r19)
    2674:	38c00017 	ldw	r3,0(r7)
    2678:	9cc00104 	addi	r19,r19,4
    267c:	28bfffcc 	andi	r2,r5,65535
    2680:	2085883a 	add	r2,r4,r2
    2684:	11bfffcc 	andi	r6,r2,65535
    2688:	193fffcc 	andi	r4,r3,65535
    268c:	1004d43a 	srli	r2,r2,16
    2690:	280ad43a 	srli	r5,r5,16
    2694:	2189c83a 	sub	r4,r4,r6
    2698:	2209883a 	add	r4,r4,r8
    269c:	1806d43a 	srli	r3,r3,16
    26a0:	288b883a 	add	r5,r5,r2
    26a4:	200dd43a 	srai	r6,r4,16
    26a8:	28bfffcc 	andi	r2,r5,65535
    26ac:	1887c83a 	sub	r3,r3,r2
    26b0:	1987883a 	add	r3,r3,r6
    26b4:	3900000d 	sth	r4,0(r7)
    26b8:	38c0008d 	sth	r3,2(r7)
    26bc:	2808d43a 	srli	r4,r5,16
    26c0:	39c00104 	addi	r7,r7,4
    26c4:	1811d43a 	srai	r8,r3,16
    26c8:	b4ffe92e 	bgeu	r22,r19,2670 <quorem+0xa4>
    26cc:	a505883a 	add	r2,r20,r20
    26d0:	1085883a 	add	r2,r2,r2
    26d4:	b885883a 	add	r2,r23,r2
    26d8:	10c00017 	ldw	r3,0(r2)
    26dc:	18000c1e 	bne	r3,zero,2710 <quorem+0x144>
    26e0:	113fff04 	addi	r4,r2,-4
    26e4:	b900082e 	bgeu	r23,r4,2708 <quorem+0x13c>
    26e8:	10bfff17 	ldw	r2,-4(r2)
    26ec:	10000326 	beq	r2,zero,26fc <quorem+0x130>
    26f0:	00000506 	br	2708 <quorem+0x13c>
    26f4:	20800017 	ldw	r2,0(r4)
    26f8:	1000031e 	bne	r2,zero,2708 <quorem+0x13c>
    26fc:	213fff04 	addi	r4,r4,-4
    2700:	a53fffc4 	addi	r20,r20,-1
    2704:	b93ffb36 	bltu	r23,r4,26f4 <quorem+0x128>
    2708:	d9000317 	ldw	r4,12(sp)
    270c:	25000415 	stw	r20,16(r4)
    2710:	e005883a 	mov	r2,fp
    2714:	dfc00e17 	ldw	ra,56(sp)
    2718:	df000d17 	ldw	fp,52(sp)
    271c:	ddc00c17 	ldw	r23,48(sp)
    2720:	dd800b17 	ldw	r22,44(sp)
    2724:	dd400a17 	ldw	r21,40(sp)
    2728:	dd000917 	ldw	r20,36(sp)
    272c:	dcc00817 	ldw	r19,32(sp)
    2730:	dc800717 	ldw	r18,28(sp)
    2734:	dc400617 	ldw	r17,24(sp)
    2738:	dc000517 	ldw	r16,20(sp)
    273c:	dec00f04 	addi	sp,sp,60
    2740:	f800283a 	ret
    2744:	b823883a 	mov	r17,r23
    2748:	9825883a 	mov	r18,r19
    274c:	d8000115 	stw	zero,4(sp)
    2750:	002b883a 	mov	r21,zero
    2754:	94000017 	ldw	r16,0(r18)
    2758:	e009883a 	mov	r4,fp
    275c:	94800104 	addi	r18,r18,4
    2760:	817fffcc 	andi	r5,r16,65535
    2764:	000972c0 	call	972c <__mulsi3>
    2768:	800ad43a 	srli	r5,r16,16
    276c:	e009883a 	mov	r4,fp
    2770:	a8a1883a 	add	r16,r21,r2
    2774:	000972c0 	call	972c <__mulsi3>
    2778:	89000017 	ldw	r4,0(r17)
    277c:	80ffffcc 	andi	r3,r16,65535
    2780:	8020d43a 	srli	r16,r16,16
    2784:	217fffcc 	andi	r5,r4,65535
    2788:	28cbc83a 	sub	r5,r5,r3
    278c:	d8c00117 	ldw	r3,4(sp)
    2790:	2008d43a 	srli	r4,r4,16
    2794:	1405883a 	add	r2,r2,r16
    2798:	28cb883a 	add	r5,r5,r3
    279c:	280dd43a 	srai	r6,r5,16
    27a0:	10ffffcc 	andi	r3,r2,65535
    27a4:	20c9c83a 	sub	r4,r4,r3
    27a8:	2189883a 	add	r4,r4,r6
    27ac:	8900008d 	sth	r4,2(r17)
    27b0:	2009d43a 	srai	r4,r4,16
    27b4:	8940000d 	sth	r5,0(r17)
    27b8:	102ad43a 	srli	r21,r2,16
    27bc:	8c400104 	addi	r17,r17,4
    27c0:	d9000115 	stw	r4,4(sp)
    27c4:	b4bfe32e 	bgeu	r22,r18,2754 <quorem+0x188>
    27c8:	d9000217 	ldw	r4,8(sp)
    27cc:	203fa01e 	bne	r4,zero,2650 <quorem+0x84>
    27d0:	d8800017 	ldw	r2,0(sp)
    27d4:	10ffff04 	addi	r3,r2,-4
    27d8:	b8c0082e 	bgeu	r23,r3,27fc <quorem+0x230>
    27dc:	10bfff17 	ldw	r2,-4(r2)
    27e0:	10000326 	beq	r2,zero,27f0 <quorem+0x224>
    27e4:	00000506 	br	27fc <quorem+0x230>
    27e8:	18800017 	ldw	r2,0(r3)
    27ec:	1000031e 	bne	r2,zero,27fc <quorem+0x230>
    27f0:	18ffff04 	addi	r3,r3,-4
    27f4:	a53fffc4 	addi	r20,r20,-1
    27f8:	b8fffb36 	bltu	r23,r3,27e8 <quorem+0x21c>
    27fc:	d8c00317 	ldw	r3,12(sp)
    2800:	1d000415 	stw	r20,16(r3)
    2804:	003f9206 	br	2650 <quorem+0x84>
    2808:	0005883a 	mov	r2,zero
    280c:	003fc106 	br	2714 <quorem+0x148>

00002810 <_dtoa_r>:
    2810:	22001017 	ldw	r8,64(r4)
    2814:	deffda04 	addi	sp,sp,-152
    2818:	dd402115 	stw	r21,132(sp)
    281c:	dd002015 	stw	r20,128(sp)
    2820:	dc801e15 	stw	r18,120(sp)
    2824:	dc401d15 	stw	r17,116(sp)
    2828:	dfc02515 	stw	ra,148(sp)
    282c:	df002415 	stw	fp,144(sp)
    2830:	ddc02315 	stw	r23,140(sp)
    2834:	dd802215 	stw	r22,136(sp)
    2838:	dcc01f15 	stw	r19,124(sp)
    283c:	dc001c15 	stw	r16,112(sp)
    2840:	d9001615 	stw	r4,88(sp)
    2844:	3023883a 	mov	r17,r6
    2848:	2829883a 	mov	r20,r5
    284c:	d9c01715 	stw	r7,92(sp)
    2850:	dc802817 	ldw	r18,160(sp)
    2854:	302b883a 	mov	r21,r6
    2858:	40000a26 	beq	r8,zero,2884 <_dtoa_r+0x74>
    285c:	20801117 	ldw	r2,68(r4)
    2860:	400b883a 	mov	r5,r8
    2864:	40800115 	stw	r2,4(r8)
    2868:	20c01117 	ldw	r3,68(r4)
    286c:	00800044 	movi	r2,1
    2870:	10c4983a 	sll	r2,r2,r3
    2874:	40800215 	stw	r2,8(r8)
    2878:	00059d80 	call	59d8 <_Bfree>
    287c:	d8c01617 	ldw	r3,88(sp)
    2880:	18001015 	stw	zero,64(r3)
    2884:	8800a316 	blt	r17,zero,2b14 <_dtoa_r+0x304>
    2888:	90000015 	stw	zero,0(r18)
    288c:	a8dffc2c 	andhi	r3,r21,32752
    2890:	009ffc34 	movhi	r2,32752
    2894:	18809126 	beq	r3,r2,2adc <_dtoa_r+0x2cc>
    2898:	000d883a 	mov	r6,zero
    289c:	000f883a 	mov	r7,zero
    28a0:	a009883a 	mov	r4,r20
    28a4:	a80b883a 	mov	r5,r21
    28a8:	dd001215 	stw	r20,72(sp)
    28ac:	dd401315 	stw	r21,76(sp)
    28b0:	000905c0 	call	905c <__nedf2>
    28b4:	1000171e 	bne	r2,zero,2914 <_dtoa_r+0x104>
    28b8:	d9802717 	ldw	r6,156(sp)
    28bc:	00800044 	movi	r2,1
    28c0:	30800015 	stw	r2,0(r6)
    28c4:	d8802917 	ldw	r2,164(sp)
    28c8:	10029b26 	beq	r2,zero,3338 <_dtoa_r+0xb28>
    28cc:	d9002917 	ldw	r4,164(sp)
    28d0:	00800074 	movhi	r2,1
    28d4:	10802744 	addi	r2,r2,157
    28d8:	10ffffc4 	addi	r3,r2,-1
    28dc:	20800015 	stw	r2,0(r4)
    28e0:	1805883a 	mov	r2,r3
    28e4:	dfc02517 	ldw	ra,148(sp)
    28e8:	df002417 	ldw	fp,144(sp)
    28ec:	ddc02317 	ldw	r23,140(sp)
    28f0:	dd802217 	ldw	r22,136(sp)
    28f4:	dd402117 	ldw	r21,132(sp)
    28f8:	dd002017 	ldw	r20,128(sp)
    28fc:	dcc01f17 	ldw	r19,124(sp)
    2900:	dc801e17 	ldw	r18,120(sp)
    2904:	dc401d17 	ldw	r17,116(sp)
    2908:	dc001c17 	ldw	r16,112(sp)
    290c:	dec02604 	addi	sp,sp,152
    2910:	f800283a 	ret
    2914:	d9001617 	ldw	r4,88(sp)
    2918:	d9401217 	ldw	r5,72(sp)
    291c:	d8800104 	addi	r2,sp,4
    2920:	a80d883a 	mov	r6,r21
    2924:	d9c00204 	addi	r7,sp,8
    2928:	d8800015 	stw	r2,0(sp)
    292c:	00060140 	call	6014 <__d2b>
    2930:	d8800715 	stw	r2,28(sp)
    2934:	a804d53a 	srli	r2,r21,20
    2938:	1101ffcc 	andi	r4,r2,2047
    293c:	20008626 	beq	r4,zero,2b58 <_dtoa_r+0x348>
    2940:	d8c01217 	ldw	r3,72(sp)
    2944:	00800434 	movhi	r2,16
    2948:	10bfffc4 	addi	r2,r2,-1
    294c:	ddc00117 	ldw	r23,4(sp)
    2950:	a884703a 	and	r2,r21,r2
    2954:	1811883a 	mov	r8,r3
    2958:	124ffc34 	orhi	r9,r2,16368
    295c:	25bf0044 	addi	r22,r4,-1023
    2960:	d8000815 	stw	zero,32(sp)
    2964:	0005883a 	mov	r2,zero
    2968:	00cffe34 	movhi	r3,16376
    296c:	480b883a 	mov	r5,r9
    2970:	4009883a 	mov	r4,r8
    2974:	180f883a 	mov	r7,r3
    2978:	100d883a 	mov	r6,r2
    297c:	00088c40 	call	88c4 <__subdf3>
    2980:	0218dbf4 	movhi	r8,25455
    2984:	4210d844 	addi	r8,r8,17249
    2988:	024ff4f4 	movhi	r9,16339
    298c:	4a61e9c4 	addi	r9,r9,-30809
    2990:	480f883a 	mov	r7,r9
    2994:	400d883a 	mov	r6,r8
    2998:	180b883a 	mov	r5,r3
    299c:	1009883a 	mov	r4,r2
    29a0:	00089b80 	call	89b8 <__muldf3>
    29a4:	0222d874 	movhi	r8,35681
    29a8:	42322cc4 	addi	r8,r8,-14157
    29ac:	024ff1f4 	movhi	r9,16327
    29b0:	4a628a04 	addi	r9,r9,-30168
    29b4:	480f883a 	mov	r7,r9
    29b8:	400d883a 	mov	r6,r8
    29bc:	180b883a 	mov	r5,r3
    29c0:	1009883a 	mov	r4,r2
    29c4:	00089440 	call	8944 <__adddf3>
    29c8:	b009883a 	mov	r4,r22
    29cc:	1021883a 	mov	r16,r2
    29d0:	1823883a 	mov	r17,r3
    29d4:	000927c0 	call	927c <__floatsidf>
    29d8:	021427f4 	movhi	r8,20639
    29dc:	421e7ec4 	addi	r8,r8,31227
    29e0:	024ff4f4 	movhi	r9,16339
    29e4:	4a5104c4 	addi	r9,r9,17427
    29e8:	480f883a 	mov	r7,r9
    29ec:	400d883a 	mov	r6,r8
    29f0:	180b883a 	mov	r5,r3
    29f4:	1009883a 	mov	r4,r2
    29f8:	00089b80 	call	89b8 <__muldf3>
    29fc:	180f883a 	mov	r7,r3
    2a00:	880b883a 	mov	r5,r17
    2a04:	100d883a 	mov	r6,r2
    2a08:	8009883a 	mov	r4,r16
    2a0c:	00089440 	call	8944 <__adddf3>
    2a10:	1009883a 	mov	r4,r2
    2a14:	180b883a 	mov	r5,r3
    2a18:	1021883a 	mov	r16,r2
    2a1c:	1823883a 	mov	r17,r3
    2a20:	00093740 	call	9374 <__fixdfsi>
    2a24:	000d883a 	mov	r6,zero
    2a28:	000f883a 	mov	r7,zero
    2a2c:	8009883a 	mov	r4,r16
    2a30:	880b883a 	mov	r5,r17
    2a34:	d8800d15 	stw	r2,52(sp)
    2a38:	00091f40 	call	91f4 <__ltdf2>
    2a3c:	10031716 	blt	r2,zero,369c <_dtoa_r+0xe8c>
    2a40:	d8c00d17 	ldw	r3,52(sp)
    2a44:	00800584 	movi	r2,22
    2a48:	10c1482e 	bgeu	r2,r3,2f6c <_dtoa_r+0x75c>
    2a4c:	01000044 	movi	r4,1
    2a50:	d9000c15 	stw	r4,48(sp)
    2a54:	bd85c83a 	sub	r2,r23,r22
    2a58:	11bfffc4 	addi	r6,r2,-1
    2a5c:	30030b16 	blt	r6,zero,368c <_dtoa_r+0xe7c>
    2a60:	d9800a15 	stw	r6,40(sp)
    2a64:	d8001115 	stw	zero,68(sp)
    2a68:	d8c00d17 	ldw	r3,52(sp)
    2a6c:	1802ff16 	blt	r3,zero,366c <_dtoa_r+0xe5c>
    2a70:	d9000a17 	ldw	r4,40(sp)
    2a74:	d8c00915 	stw	r3,36(sp)
    2a78:	d8001015 	stw	zero,64(sp)
    2a7c:	20c9883a 	add	r4,r4,r3
    2a80:	d9000a15 	stw	r4,40(sp)
    2a84:	d9001717 	ldw	r4,92(sp)
    2a88:	00800244 	movi	r2,9
    2a8c:	11004636 	bltu	r2,r4,2ba8 <_dtoa_r+0x398>
    2a90:	00800144 	movi	r2,5
    2a94:	11020416 	blt	r2,r4,32a8 <_dtoa_r+0xa98>
    2a98:	04400044 	movi	r17,1
    2a9c:	d8c01717 	ldw	r3,92(sp)
    2aa0:	00800144 	movi	r2,5
    2aa4:	10c1ed36 	bltu	r2,r3,325c <_dtoa_r+0xa4c>
    2aa8:	18c5883a 	add	r2,r3,r3
    2aac:	1085883a 	add	r2,r2,r2
    2ab0:	00c00034 	movhi	r3,0
    2ab4:	18cab104 	addi	r3,r3,10948
    2ab8:	10c5883a 	add	r2,r2,r3
    2abc:	11000017 	ldw	r4,0(r2)
    2ac0:	2000683a 	jmp	r4
    2ac4:	00002bb0 	cmpltui	zero,zero,174
    2ac8:	00002bb0 	cmpltui	zero,zero,174
    2acc:	000035b0 	cmpltui	zero,zero,214
    2ad0:	00003588 	cmpgei	zero,zero,214
    2ad4:	000035cc 	andi	zero,zero,215
    2ad8:	000035d8 	cmpnei	zero,zero,215
    2adc:	d9002717 	ldw	r4,156(sp)
    2ae0:	0089c3c4 	movi	r2,9999
    2ae4:	20800015 	stw	r2,0(r4)
    2ae8:	a0001026 	beq	r20,zero,2b2c <_dtoa_r+0x31c>
    2aec:	00c00074 	movhi	r3,1
    2af0:	18c03304 	addi	r3,r3,204
    2af4:	d9802917 	ldw	r6,164(sp)
    2af8:	303f7926 	beq	r6,zero,28e0 <_dtoa_r+0xd0>
    2afc:	188000c7 	ldb	r2,3(r3)
    2b00:	190000c4 	addi	r4,r3,3
    2b04:	1000101e 	bne	r2,zero,2b48 <_dtoa_r+0x338>
    2b08:	d8802917 	ldw	r2,164(sp)
    2b0c:	11000015 	stw	r4,0(r2)
    2b10:	003f7306 	br	28e0 <_dtoa_r+0xd0>
    2b14:	00a00034 	movhi	r2,32768
    2b18:	10bfffc4 	addi	r2,r2,-1
    2b1c:	00c00044 	movi	r3,1
    2b20:	88aa703a 	and	r21,r17,r2
    2b24:	90c00015 	stw	r3,0(r18)
    2b28:	003f5806 	br	288c <_dtoa_r+0x7c>
    2b2c:	00800434 	movhi	r2,16
    2b30:	10bfffc4 	addi	r2,r2,-1
    2b34:	a884703a 	and	r2,r21,r2
    2b38:	103fec1e 	bne	r2,zero,2aec <_dtoa_r+0x2dc>
    2b3c:	00c00074 	movhi	r3,1
    2b40:	18c03004 	addi	r3,r3,192
    2b44:	003feb06 	br	2af4 <_dtoa_r+0x2e4>
    2b48:	d8802917 	ldw	r2,164(sp)
    2b4c:	19000204 	addi	r4,r3,8
    2b50:	11000015 	stw	r4,0(r2)
    2b54:	003f6206 	br	28e0 <_dtoa_r+0xd0>
    2b58:	ddc00117 	ldw	r23,4(sp)
    2b5c:	d8800217 	ldw	r2,8(sp)
    2b60:	01000804 	movi	r4,32
    2b64:	b8c10c84 	addi	r3,r23,1074
    2b68:	18a3883a 	add	r17,r3,r2
    2b6c:	2441b80e 	bge	r4,r17,3250 <_dtoa_r+0xa40>
    2b70:	00c01004 	movi	r3,64
    2b74:	1c47c83a 	sub	r3,r3,r17
    2b78:	88bff804 	addi	r2,r17,-32
    2b7c:	a8c6983a 	sll	r3,r21,r3
    2b80:	a084d83a 	srl	r2,r20,r2
    2b84:	1888b03a 	or	r4,r3,r2
    2b88:	000944c0 	call	944c <__floatunsidf>
    2b8c:	1011883a 	mov	r8,r2
    2b90:	00bf8434 	movhi	r2,65040
    2b94:	01000044 	movi	r4,1
    2b98:	10d3883a 	add	r9,r2,r3
    2b9c:	8dbef344 	addi	r22,r17,-1075
    2ba0:	d9000815 	stw	r4,32(sp)
    2ba4:	003f6f06 	br	2964 <_dtoa_r+0x154>
    2ba8:	d8001715 	stw	zero,92(sp)
    2bac:	04400044 	movi	r17,1
    2bb0:	00bfffc4 	movi	r2,-1
    2bb4:	00c00044 	movi	r3,1
    2bb8:	d8800e15 	stw	r2,56(sp)
    2bbc:	d8002615 	stw	zero,152(sp)
    2bc0:	d8800f15 	stw	r2,60(sp)
    2bc4:	d8c00b15 	stw	r3,44(sp)
    2bc8:	1021883a 	mov	r16,r2
    2bcc:	d8801617 	ldw	r2,88(sp)
    2bd0:	10001115 	stw	zero,68(r2)
    2bd4:	d8801617 	ldw	r2,88(sp)
    2bd8:	11401117 	ldw	r5,68(r2)
    2bdc:	1009883a 	mov	r4,r2
    2be0:	0005f580 	call	5f58 <_Balloc>
    2be4:	d8c01617 	ldw	r3,88(sp)
    2be8:	d8800515 	stw	r2,20(sp)
    2bec:	18801015 	stw	r2,64(r3)
    2bf0:	00800384 	movi	r2,14
    2bf4:	14006836 	bltu	r2,r16,2d98 <_dtoa_r+0x588>
    2bf8:	8805003a 	cmpeq	r2,r17,zero
    2bfc:	1000661e 	bne	r2,zero,2d98 <_dtoa_r+0x588>
    2c00:	d9000d17 	ldw	r4,52(sp)
    2c04:	0102300e 	bge	zero,r4,34c8 <_dtoa_r+0xcb8>
    2c08:	208003cc 	andi	r2,r4,15
    2c0c:	100490fa 	slli	r2,r2,3
    2c10:	2025d13a 	srai	r18,r4,4
    2c14:	00c00074 	movhi	r3,1
    2c18:	18c04504 	addi	r3,r3,276
    2c1c:	10c5883a 	add	r2,r2,r3
    2c20:	90c0040c 	andi	r3,r18,16
    2c24:	14000017 	ldw	r16,0(r2)
    2c28:	14400117 	ldw	r17,4(r2)
    2c2c:	18036a1e 	bne	r3,zero,39d8 <_dtoa_r+0x11c8>
    2c30:	05800084 	movi	r22,2
    2c34:	90001026 	beq	r18,zero,2c78 <_dtoa_r+0x468>
    2c38:	04c00074 	movhi	r19,1
    2c3c:	9cc07704 	addi	r19,r19,476
    2c40:	9080004c 	andi	r2,r18,1
    2c44:	1005003a 	cmpeq	r2,r2,zero
    2c48:	1000081e 	bne	r2,zero,2c6c <_dtoa_r+0x45c>
    2c4c:	99800017 	ldw	r6,0(r19)
    2c50:	99c00117 	ldw	r7,4(r19)
    2c54:	880b883a 	mov	r5,r17
    2c58:	8009883a 	mov	r4,r16
    2c5c:	00089b80 	call	89b8 <__muldf3>
    2c60:	1021883a 	mov	r16,r2
    2c64:	b5800044 	addi	r22,r22,1
    2c68:	1823883a 	mov	r17,r3
    2c6c:	9025d07a 	srai	r18,r18,1
    2c70:	9cc00204 	addi	r19,r19,8
    2c74:	903ff21e 	bne	r18,zero,2c40 <_dtoa_r+0x430>
    2c78:	a80b883a 	mov	r5,r21
    2c7c:	a009883a 	mov	r4,r20
    2c80:	880f883a 	mov	r7,r17
    2c84:	800d883a 	mov	r6,r16
    2c88:	0008d7c0 	call	8d7c <__divdf3>
    2c8c:	1029883a 	mov	r20,r2
    2c90:	182b883a 	mov	r21,r3
    2c94:	d8c00c17 	ldw	r3,48(sp)
    2c98:	1805003a 	cmpeq	r2,r3,zero
    2c9c:	1000081e 	bne	r2,zero,2cc0 <_dtoa_r+0x4b0>
    2ca0:	0005883a 	mov	r2,zero
    2ca4:	00cffc34 	movhi	r3,16368
    2ca8:	180f883a 	mov	r7,r3
    2cac:	a009883a 	mov	r4,r20
    2cb0:	a80b883a 	mov	r5,r21
    2cb4:	100d883a 	mov	r6,r2
    2cb8:	00091f40 	call	91f4 <__ltdf2>
    2cbc:	1003fe16 	blt	r2,zero,3cb8 <_dtoa_r+0x14a8>
    2cc0:	b009883a 	mov	r4,r22
    2cc4:	000927c0 	call	927c <__floatsidf>
    2cc8:	180b883a 	mov	r5,r3
    2ccc:	1009883a 	mov	r4,r2
    2cd0:	a00d883a 	mov	r6,r20
    2cd4:	a80f883a 	mov	r7,r21
    2cd8:	00089b80 	call	89b8 <__muldf3>
    2cdc:	0011883a 	mov	r8,zero
    2ce0:	02500734 	movhi	r9,16412
    2ce4:	1009883a 	mov	r4,r2
    2ce8:	180b883a 	mov	r5,r3
    2cec:	480f883a 	mov	r7,r9
    2cf0:	400d883a 	mov	r6,r8
    2cf4:	00089440 	call	8944 <__adddf3>
    2cf8:	d9000f17 	ldw	r4,60(sp)
    2cfc:	102d883a 	mov	r22,r2
    2d00:	00bf3034 	movhi	r2,64704
    2d04:	18b9883a 	add	fp,r3,r2
    2d08:	e02f883a 	mov	r23,fp
    2d0c:	20028f1e 	bne	r4,zero,374c <_dtoa_r+0xf3c>
    2d10:	0005883a 	mov	r2,zero
    2d14:	00d00534 	movhi	r3,16404
    2d18:	a009883a 	mov	r4,r20
    2d1c:	a80b883a 	mov	r5,r21
    2d20:	180f883a 	mov	r7,r3
    2d24:	100d883a 	mov	r6,r2
    2d28:	00088c40 	call	88c4 <__subdf3>
    2d2c:	1009883a 	mov	r4,r2
    2d30:	e00f883a 	mov	r7,fp
    2d34:	180b883a 	mov	r5,r3
    2d38:	b00d883a 	mov	r6,r22
    2d3c:	1025883a 	mov	r18,r2
    2d40:	1827883a 	mov	r19,r3
    2d44:	00090e40 	call	90e4 <__gtdf2>
    2d48:	00834f16 	blt	zero,r2,3a88 <_dtoa_r+0x1278>
    2d4c:	e0e0003c 	xorhi	r3,fp,32768
    2d50:	9009883a 	mov	r4,r18
    2d54:	980b883a 	mov	r5,r19
    2d58:	180f883a 	mov	r7,r3
    2d5c:	b00d883a 	mov	r6,r22
    2d60:	00091f40 	call	91f4 <__ltdf2>
    2d64:	1000080e 	bge	r2,zero,2d88 <_dtoa_r+0x578>
    2d68:	0027883a 	mov	r19,zero
    2d6c:	0025883a 	mov	r18,zero
    2d70:	d8802617 	ldw	r2,152(sp)
    2d74:	df000517 	ldw	fp,20(sp)
    2d78:	d8000615 	stw	zero,24(sp)
    2d7c:	0084303a 	nor	r2,zero,r2
    2d80:	d8800d15 	stw	r2,52(sp)
    2d84:	00019b06 	br	33f4 <_dtoa_r+0xbe4>
    2d88:	d9801217 	ldw	r6,72(sp)
    2d8c:	d8801317 	ldw	r2,76(sp)
    2d90:	3029883a 	mov	r20,r6
    2d94:	102b883a 	mov	r21,r2
    2d98:	d8c00217 	ldw	r3,8(sp)
    2d9c:	18008516 	blt	r3,zero,2fb4 <_dtoa_r+0x7a4>
    2da0:	d9000d17 	ldw	r4,52(sp)
    2da4:	00800384 	movi	r2,14
    2da8:	11008216 	blt	r2,r4,2fb4 <_dtoa_r+0x7a4>
    2dac:	200490fa 	slli	r2,r4,3
    2db0:	d9802617 	ldw	r6,152(sp)
    2db4:	00c00074 	movhi	r3,1
    2db8:	18c04504 	addi	r3,r3,276
    2dbc:	10c5883a 	add	r2,r2,r3
    2dc0:	14800017 	ldw	r18,0(r2)
    2dc4:	14c00117 	ldw	r19,4(r2)
    2dc8:	30031e16 	blt	r6,zero,3a44 <_dtoa_r+0x1234>
    2dcc:	d9000517 	ldw	r4,20(sp)
    2dd0:	d8c00f17 	ldw	r3,60(sp)
    2dd4:	a823883a 	mov	r17,r21
    2dd8:	a021883a 	mov	r16,r20
    2ddc:	192b883a 	add	r21,r3,r4
    2de0:	2039883a 	mov	fp,r4
    2de4:	00000f06 	br	2e24 <_dtoa_r+0x614>
    2de8:	0005883a 	mov	r2,zero
    2dec:	00d00934 	movhi	r3,16420
    2df0:	5009883a 	mov	r4,r10
    2df4:	580b883a 	mov	r5,r11
    2df8:	180f883a 	mov	r7,r3
    2dfc:	100d883a 	mov	r6,r2
    2e00:	00089b80 	call	89b8 <__muldf3>
    2e04:	180b883a 	mov	r5,r3
    2e08:	000d883a 	mov	r6,zero
    2e0c:	000f883a 	mov	r7,zero
    2e10:	1009883a 	mov	r4,r2
    2e14:	1021883a 	mov	r16,r2
    2e18:	1823883a 	mov	r17,r3
    2e1c:	000905c0 	call	905c <__nedf2>
    2e20:	10004526 	beq	r2,zero,2f38 <_dtoa_r+0x728>
    2e24:	900d883a 	mov	r6,r18
    2e28:	980f883a 	mov	r7,r19
    2e2c:	8009883a 	mov	r4,r16
    2e30:	880b883a 	mov	r5,r17
    2e34:	0008d7c0 	call	8d7c <__divdf3>
    2e38:	180b883a 	mov	r5,r3
    2e3c:	1009883a 	mov	r4,r2
    2e40:	00093740 	call	9374 <__fixdfsi>
    2e44:	1009883a 	mov	r4,r2
    2e48:	1029883a 	mov	r20,r2
    2e4c:	000927c0 	call	927c <__floatsidf>
    2e50:	180f883a 	mov	r7,r3
    2e54:	9009883a 	mov	r4,r18
    2e58:	980b883a 	mov	r5,r19
    2e5c:	100d883a 	mov	r6,r2
    2e60:	00089b80 	call	89b8 <__muldf3>
    2e64:	180f883a 	mov	r7,r3
    2e68:	880b883a 	mov	r5,r17
    2e6c:	8009883a 	mov	r4,r16
    2e70:	100d883a 	mov	r6,r2
    2e74:	00088c40 	call	88c4 <__subdf3>
    2e78:	1015883a 	mov	r10,r2
    2e7c:	a0800c04 	addi	r2,r20,48
    2e80:	e0800005 	stb	r2,0(fp)
    2e84:	e7000044 	addi	fp,fp,1
    2e88:	1817883a 	mov	r11,r3
    2e8c:	e57fd61e 	bne	fp,r21,2de8 <_dtoa_r+0x5d8>
    2e90:	500d883a 	mov	r6,r10
    2e94:	180f883a 	mov	r7,r3
    2e98:	5009883a 	mov	r4,r10
    2e9c:	180b883a 	mov	r5,r3
    2ea0:	00089440 	call	8944 <__adddf3>
    2ea4:	100d883a 	mov	r6,r2
    2ea8:	9009883a 	mov	r4,r18
    2eac:	980b883a 	mov	r5,r19
    2eb0:	180f883a 	mov	r7,r3
    2eb4:	1021883a 	mov	r16,r2
    2eb8:	1823883a 	mov	r17,r3
    2ebc:	00091f40 	call	91f4 <__ltdf2>
    2ec0:	10000816 	blt	r2,zero,2ee4 <_dtoa_r+0x6d4>
    2ec4:	980b883a 	mov	r5,r19
    2ec8:	800d883a 	mov	r6,r16
    2ecc:	880f883a 	mov	r7,r17
    2ed0:	9009883a 	mov	r4,r18
    2ed4:	0008fd40 	call	8fd4 <__eqdf2>
    2ed8:	1000171e 	bne	r2,zero,2f38 <_dtoa_r+0x728>
    2edc:	a080004c 	andi	r2,r20,1
    2ee0:	10001526 	beq	r2,zero,2f38 <_dtoa_r+0x728>
    2ee4:	d8800d17 	ldw	r2,52(sp)
    2ee8:	d8800415 	stw	r2,16(sp)
    2eec:	e009883a 	mov	r4,fp
    2ef0:	213fffc4 	addi	r4,r4,-1
    2ef4:	20c00007 	ldb	r3,0(r4)
    2ef8:	00800e44 	movi	r2,57
    2efc:	1880081e 	bne	r3,r2,2f20 <_dtoa_r+0x710>
    2f00:	d8800517 	ldw	r2,20(sp)
    2f04:	113ffa1e 	bne	r2,r4,2ef0 <_dtoa_r+0x6e0>
    2f08:	d8c00417 	ldw	r3,16(sp)
    2f0c:	d9800517 	ldw	r6,20(sp)
    2f10:	00800c04 	movi	r2,48
    2f14:	18c00044 	addi	r3,r3,1
    2f18:	d8c00415 	stw	r3,16(sp)
    2f1c:	30800005 	stb	r2,0(r6)
    2f20:	20800003 	ldbu	r2,0(r4)
    2f24:	d8c00417 	ldw	r3,16(sp)
    2f28:	27000044 	addi	fp,r4,1
    2f2c:	10800044 	addi	r2,r2,1
    2f30:	d8c00d15 	stw	r3,52(sp)
    2f34:	20800005 	stb	r2,0(r4)
    2f38:	d9001617 	ldw	r4,88(sp)
    2f3c:	d9400717 	ldw	r5,28(sp)
    2f40:	00059d80 	call	59d8 <_Bfree>
    2f44:	e0000005 	stb	zero,0(fp)
    2f48:	d9800d17 	ldw	r6,52(sp)
    2f4c:	d8c02717 	ldw	r3,156(sp)
    2f50:	d9002917 	ldw	r4,164(sp)
    2f54:	30800044 	addi	r2,r6,1
    2f58:	18800015 	stw	r2,0(r3)
    2f5c:	20029c26 	beq	r4,zero,39d0 <_dtoa_r+0x11c0>
    2f60:	d8c00517 	ldw	r3,20(sp)
    2f64:	27000015 	stw	fp,0(r4)
    2f68:	003e5d06 	br	28e0 <_dtoa_r+0xd0>
    2f6c:	d9800d17 	ldw	r6,52(sp)
    2f70:	00c00074 	movhi	r3,1
    2f74:	18c04504 	addi	r3,r3,276
    2f78:	d9001217 	ldw	r4,72(sp)
    2f7c:	300490fa 	slli	r2,r6,3
    2f80:	d9401317 	ldw	r5,76(sp)
    2f84:	10c5883a 	add	r2,r2,r3
    2f88:	12000017 	ldw	r8,0(r2)
    2f8c:	12400117 	ldw	r9,4(r2)
    2f90:	400d883a 	mov	r6,r8
    2f94:	480f883a 	mov	r7,r9
    2f98:	00091f40 	call	91f4 <__ltdf2>
    2f9c:	1000030e 	bge	r2,zero,2fac <_dtoa_r+0x79c>
    2fa0:	d8800d17 	ldw	r2,52(sp)
    2fa4:	10bfffc4 	addi	r2,r2,-1
    2fa8:	d8800d15 	stw	r2,52(sp)
    2fac:	d8000c15 	stw	zero,48(sp)
    2fb0:	003ea806 	br	2a54 <_dtoa_r+0x244>
    2fb4:	d9000b17 	ldw	r4,44(sp)
    2fb8:	202cc03a 	cmpne	r22,r4,zero
    2fbc:	b000c71e 	bne	r22,zero,32dc <_dtoa_r+0xacc>
    2fc0:	dc001117 	ldw	r16,68(sp)
    2fc4:	dc801017 	ldw	r18,64(sp)
    2fc8:	0027883a 	mov	r19,zero
    2fcc:	04000b0e 	bge	zero,r16,2ffc <_dtoa_r+0x7ec>
    2fd0:	d8c00a17 	ldw	r3,40(sp)
    2fd4:	00c0090e 	bge	zero,r3,2ffc <_dtoa_r+0x7ec>
    2fd8:	8005883a 	mov	r2,r16
    2fdc:	1c011316 	blt	r3,r16,342c <_dtoa_r+0xc1c>
    2fe0:	d9000a17 	ldw	r4,40(sp)
    2fe4:	d9801117 	ldw	r6,68(sp)
    2fe8:	80a1c83a 	sub	r16,r16,r2
    2fec:	2089c83a 	sub	r4,r4,r2
    2ff0:	308dc83a 	sub	r6,r6,r2
    2ff4:	d9000a15 	stw	r4,40(sp)
    2ff8:	d9801115 	stw	r6,68(sp)
    2ffc:	d8801017 	ldw	r2,64(sp)
    3000:	0080150e 	bge	zero,r2,3058 <_dtoa_r+0x848>
    3004:	d8c00b17 	ldw	r3,44(sp)
    3008:	1805003a 	cmpeq	r2,r3,zero
    300c:	1001c91e 	bne	r2,zero,3734 <_dtoa_r+0xf24>
    3010:	04800e0e 	bge	zero,r18,304c <_dtoa_r+0x83c>
    3014:	d9001617 	ldw	r4,88(sp)
    3018:	980b883a 	mov	r5,r19
    301c:	900d883a 	mov	r6,r18
    3020:	00068240 	call	6824 <__pow5mult>
    3024:	d9001617 	ldw	r4,88(sp)
    3028:	d9800717 	ldw	r6,28(sp)
    302c:	100b883a 	mov	r5,r2
    3030:	1027883a 	mov	r19,r2
    3034:	00064680 	call	6468 <__multiply>
    3038:	d9001617 	ldw	r4,88(sp)
    303c:	d9400717 	ldw	r5,28(sp)
    3040:	1023883a 	mov	r17,r2
    3044:	00059d80 	call	59d8 <_Bfree>
    3048:	dc400715 	stw	r17,28(sp)
    304c:	d9001017 	ldw	r4,64(sp)
    3050:	248dc83a 	sub	r6,r4,r18
    3054:	30010e1e 	bne	r6,zero,3490 <_dtoa_r+0xc80>
    3058:	d9001617 	ldw	r4,88(sp)
    305c:	04400044 	movi	r17,1
    3060:	880b883a 	mov	r5,r17
    3064:	00066bc0 	call	66bc <__i2b>
    3068:	d9800917 	ldw	r6,36(sp)
    306c:	1025883a 	mov	r18,r2
    3070:	0180040e 	bge	zero,r6,3084 <_dtoa_r+0x874>
    3074:	d9001617 	ldw	r4,88(sp)
    3078:	100b883a 	mov	r5,r2
    307c:	00068240 	call	6824 <__pow5mult>
    3080:	1025883a 	mov	r18,r2
    3084:	d8801717 	ldw	r2,92(sp)
    3088:	8880f30e 	bge	r17,r2,3458 <_dtoa_r+0xc48>
    308c:	0023883a 	mov	r17,zero
    3090:	d9800917 	ldw	r6,36(sp)
    3094:	30019e1e 	bne	r6,zero,3710 <_dtoa_r+0xf00>
    3098:	00c00044 	movi	r3,1
    309c:	d9000a17 	ldw	r4,40(sp)
    30a0:	20c5883a 	add	r2,r4,r3
    30a4:	10c007cc 	andi	r3,r2,31
    30a8:	1800841e 	bne	r3,zero,32bc <_dtoa_r+0xaac>
    30ac:	00800704 	movi	r2,28
    30b0:	d9000a17 	ldw	r4,40(sp)
    30b4:	d9801117 	ldw	r6,68(sp)
    30b8:	80a1883a 	add	r16,r16,r2
    30bc:	2089883a 	add	r4,r4,r2
    30c0:	308d883a 	add	r6,r6,r2
    30c4:	d9000a15 	stw	r4,40(sp)
    30c8:	d9801115 	stw	r6,68(sp)
    30cc:	d8801117 	ldw	r2,68(sp)
    30d0:	0080050e 	bge	zero,r2,30e8 <_dtoa_r+0x8d8>
    30d4:	d9400717 	ldw	r5,28(sp)
    30d8:	d9001617 	ldw	r4,88(sp)
    30dc:	100d883a 	mov	r6,r2
    30e0:	000631c0 	call	631c <__lshift>
    30e4:	d8800715 	stw	r2,28(sp)
    30e8:	d8c00a17 	ldw	r3,40(sp)
    30ec:	00c0050e 	bge	zero,r3,3104 <_dtoa_r+0x8f4>
    30f0:	d9001617 	ldw	r4,88(sp)
    30f4:	900b883a 	mov	r5,r18
    30f8:	180d883a 	mov	r6,r3
    30fc:	000631c0 	call	631c <__lshift>
    3100:	1025883a 	mov	r18,r2
    3104:	d9000c17 	ldw	r4,48(sp)
    3108:	2005003a 	cmpeq	r2,r4,zero
    310c:	10016f26 	beq	r2,zero,36cc <_dtoa_r+0xebc>
    3110:	d9000f17 	ldw	r4,60(sp)
    3114:	0102170e 	bge	zero,r4,3974 <_dtoa_r+0x1164>
    3118:	d9800b17 	ldw	r6,44(sp)
    311c:	3005003a 	cmpeq	r2,r6,zero
    3120:	1000881e 	bne	r2,zero,3344 <_dtoa_r+0xb34>
    3124:	0400050e 	bge	zero,r16,313c <_dtoa_r+0x92c>
    3128:	d9001617 	ldw	r4,88(sp)
    312c:	980b883a 	mov	r5,r19
    3130:	800d883a 	mov	r6,r16
    3134:	000631c0 	call	631c <__lshift>
    3138:	1027883a 	mov	r19,r2
    313c:	8804c03a 	cmpne	r2,r17,zero
    3140:	1002541e 	bne	r2,zero,3a94 <_dtoa_r+0x1284>
    3144:	980b883a 	mov	r5,r19
    3148:	dd800517 	ldw	r22,20(sp)
    314c:	dcc00615 	stw	r19,24(sp)
    3150:	a700004c 	andi	fp,r20,1
    3154:	2827883a 	mov	r19,r5
    3158:	d9000717 	ldw	r4,28(sp)
    315c:	900b883a 	mov	r5,r18
    3160:	00025cc0 	call	25cc <quorem>
    3164:	d9000717 	ldw	r4,28(sp)
    3168:	d9400617 	ldw	r5,24(sp)
    316c:	1023883a 	mov	r17,r2
    3170:	8dc00c04 	addi	r23,r17,48
    3174:	0005b340 	call	5b34 <__mcmp>
    3178:	d9001617 	ldw	r4,88(sp)
    317c:	900b883a 	mov	r5,r18
    3180:	980d883a 	mov	r6,r19
    3184:	1029883a 	mov	r20,r2
    3188:	00061900 	call	6190 <__mdiff>
    318c:	102b883a 	mov	r21,r2
    3190:	10800317 	ldw	r2,12(r2)
    3194:	1001281e 	bne	r2,zero,3638 <_dtoa_r+0xe28>
    3198:	d9000717 	ldw	r4,28(sp)
    319c:	a80b883a 	mov	r5,r21
    31a0:	0005b340 	call	5b34 <__mcmp>
    31a4:	d9001617 	ldw	r4,88(sp)
    31a8:	1021883a 	mov	r16,r2
    31ac:	a80b883a 	mov	r5,r21
    31b0:	00059d80 	call	59d8 <_Bfree>
    31b4:	8000041e 	bne	r16,zero,31c8 <_dtoa_r+0x9b8>
    31b8:	d8801717 	ldw	r2,92(sp)
    31bc:	1000021e 	bne	r2,zero,31c8 <_dtoa_r+0x9b8>
    31c0:	e004c03a 	cmpne	r2,fp,zero
    31c4:	10011726 	beq	r2,zero,3624 <_dtoa_r+0xe14>
    31c8:	a0010616 	blt	r20,zero,35e4 <_dtoa_r+0xdd4>
    31cc:	a000041e 	bne	r20,zero,31e0 <_dtoa_r+0x9d0>
    31d0:	d8c01717 	ldw	r3,92(sp)
    31d4:	1800021e 	bne	r3,zero,31e0 <_dtoa_r+0x9d0>
    31d8:	e004c03a 	cmpne	r2,fp,zero
    31dc:	10010126 	beq	r2,zero,35e4 <_dtoa_r+0xdd4>
    31e0:	04023d16 	blt	zero,r16,3ad8 <_dtoa_r+0x12c8>
    31e4:	b5c00005 	stb	r23,0(r22)
    31e8:	d9800517 	ldw	r6,20(sp)
    31ec:	d9000f17 	ldw	r4,60(sp)
    31f0:	b5800044 	addi	r22,r22,1
    31f4:	3105883a 	add	r2,r6,r4
    31f8:	b0806526 	beq	r22,r2,3390 <_dtoa_r+0xb80>
    31fc:	d9400717 	ldw	r5,28(sp)
    3200:	d9001617 	ldw	r4,88(sp)
    3204:	01800284 	movi	r6,10
    3208:	000f883a 	mov	r7,zero
    320c:	00066f80 	call	66f8 <__multadd>
    3210:	d8800715 	stw	r2,28(sp)
    3214:	d8800617 	ldw	r2,24(sp)
    3218:	14c10c26 	beq	r2,r19,364c <_dtoa_r+0xe3c>
    321c:	d9400617 	ldw	r5,24(sp)
    3220:	d9001617 	ldw	r4,88(sp)
    3224:	01800284 	movi	r6,10
    3228:	000f883a 	mov	r7,zero
    322c:	00066f80 	call	66f8 <__multadd>
    3230:	d9001617 	ldw	r4,88(sp)
    3234:	980b883a 	mov	r5,r19
    3238:	01800284 	movi	r6,10
    323c:	000f883a 	mov	r7,zero
    3240:	d8800615 	stw	r2,24(sp)
    3244:	00066f80 	call	66f8 <__multadd>
    3248:	1027883a 	mov	r19,r2
    324c:	003fc206 	br	3158 <_dtoa_r+0x948>
    3250:	2445c83a 	sub	r2,r4,r17
    3254:	a088983a 	sll	r4,r20,r2
    3258:	003e4b06 	br	2b88 <_dtoa_r+0x378>
    325c:	01bfffc4 	movi	r6,-1
    3260:	00800044 	movi	r2,1
    3264:	d9800e15 	stw	r6,56(sp)
    3268:	d9800f15 	stw	r6,60(sp)
    326c:	d8800b15 	stw	r2,44(sp)
    3270:	d8c01617 	ldw	r3,88(sp)
    3274:	008005c4 	movi	r2,23
    3278:	18001115 	stw	zero,68(r3)
    327c:	1580082e 	bgeu	r2,r22,32a0 <_dtoa_r+0xa90>
    3280:	00c00104 	movi	r3,4
    3284:	0009883a 	mov	r4,zero
    3288:	18c7883a 	add	r3,r3,r3
    328c:	18800504 	addi	r2,r3,20
    3290:	21000044 	addi	r4,r4,1
    3294:	b0bffc2e 	bgeu	r22,r2,3288 <_dtoa_r+0xa78>
    3298:	d9801617 	ldw	r6,88(sp)
    329c:	31001115 	stw	r4,68(r6)
    32a0:	dc000f17 	ldw	r16,60(sp)
    32a4:	003e4b06 	br	2bd4 <_dtoa_r+0x3c4>
    32a8:	d9801717 	ldw	r6,92(sp)
    32ac:	0023883a 	mov	r17,zero
    32b0:	31bfff04 	addi	r6,r6,-4
    32b4:	d9801715 	stw	r6,92(sp)
    32b8:	003df806 	br	2a9c <_dtoa_r+0x28c>
    32bc:	00800804 	movi	r2,32
    32c0:	10c9c83a 	sub	r4,r2,r3
    32c4:	00c00104 	movi	r3,4
    32c8:	19005a16 	blt	r3,r4,3434 <_dtoa_r+0xc24>
    32cc:	008000c4 	movi	r2,3
    32d0:	113f7e16 	blt	r2,r4,30cc <_dtoa_r+0x8bc>
    32d4:	20800704 	addi	r2,r4,28
    32d8:	003f7506 	br	30b0 <_dtoa_r+0x8a0>
    32dc:	d9801717 	ldw	r6,92(sp)
    32e0:	00800044 	movi	r2,1
    32e4:	1180a10e 	bge	r2,r6,356c <_dtoa_r+0xd5c>
    32e8:	d9800f17 	ldw	r6,60(sp)
    32ec:	d8c01017 	ldw	r3,64(sp)
    32f0:	30bfffc4 	addi	r2,r6,-1
    32f4:	1881c616 	blt	r3,r2,3a10 <_dtoa_r+0x1200>
    32f8:	18a5c83a 	sub	r18,r3,r2
    32fc:	d8800f17 	ldw	r2,60(sp)
    3300:	10026216 	blt	r2,zero,3c8c <_dtoa_r+0x147c>
    3304:	dc001117 	ldw	r16,68(sp)
    3308:	1007883a 	mov	r3,r2
    330c:	d9800a17 	ldw	r6,40(sp)
    3310:	d8801117 	ldw	r2,68(sp)
    3314:	d9001617 	ldw	r4,88(sp)
    3318:	30cd883a 	add	r6,r6,r3
    331c:	10c5883a 	add	r2,r2,r3
    3320:	01400044 	movi	r5,1
    3324:	d9800a15 	stw	r6,40(sp)
    3328:	d8801115 	stw	r2,68(sp)
    332c:	00066bc0 	call	66bc <__i2b>
    3330:	1027883a 	mov	r19,r2
    3334:	003f2506 	br	2fcc <_dtoa_r+0x7bc>
    3338:	00c00074 	movhi	r3,1
    333c:	18c02704 	addi	r3,r3,156
    3340:	003d6706 	br	28e0 <_dtoa_r+0xd0>
    3344:	dd800517 	ldw	r22,20(sp)
    3348:	04000044 	movi	r16,1
    334c:	00000706 	br	336c <_dtoa_r+0xb5c>
    3350:	d9400717 	ldw	r5,28(sp)
    3354:	d9001617 	ldw	r4,88(sp)
    3358:	01800284 	movi	r6,10
    335c:	000f883a 	mov	r7,zero
    3360:	00066f80 	call	66f8 <__multadd>
    3364:	d8800715 	stw	r2,28(sp)
    3368:	84000044 	addi	r16,r16,1
    336c:	d9000717 	ldw	r4,28(sp)
    3370:	900b883a 	mov	r5,r18
    3374:	00025cc0 	call	25cc <quorem>
    3378:	15c00c04 	addi	r23,r2,48
    337c:	b5c00005 	stb	r23,0(r22)
    3380:	d8c00f17 	ldw	r3,60(sp)
    3384:	b5800044 	addi	r22,r22,1
    3388:	80fff116 	blt	r16,r3,3350 <_dtoa_r+0xb40>
    338c:	d8000615 	stw	zero,24(sp)
    3390:	d9400717 	ldw	r5,28(sp)
    3394:	d9001617 	ldw	r4,88(sp)
    3398:	01800044 	movi	r6,1
    339c:	000631c0 	call	631c <__lshift>
    33a0:	1009883a 	mov	r4,r2
    33a4:	900b883a 	mov	r5,r18
    33a8:	d8800715 	stw	r2,28(sp)
    33ac:	0005b340 	call	5b34 <__mcmp>
    33b0:	00803c0e 	bge	zero,r2,34a4 <_dtoa_r+0xc94>
    33b4:	b009883a 	mov	r4,r22
    33b8:	213fffc4 	addi	r4,r4,-1
    33bc:	21400003 	ldbu	r5,0(r4)
    33c0:	00800e44 	movi	r2,57
    33c4:	28c03fcc 	andi	r3,r5,255
    33c8:	18c0201c 	xori	r3,r3,128
    33cc:	18ffe004 	addi	r3,r3,-128
    33d0:	1881981e 	bne	r3,r2,3a34 <_dtoa_r+0x1224>
    33d4:	d9800517 	ldw	r6,20(sp)
    33d8:	21bff71e 	bne	r4,r6,33b8 <_dtoa_r+0xba8>
    33dc:	d8800d17 	ldw	r2,52(sp)
    33e0:	37000044 	addi	fp,r6,1
    33e4:	10800044 	addi	r2,r2,1
    33e8:	d8800d15 	stw	r2,52(sp)
    33ec:	00800c44 	movi	r2,49
    33f0:	30800005 	stb	r2,0(r6)
    33f4:	d9001617 	ldw	r4,88(sp)
    33f8:	900b883a 	mov	r5,r18
    33fc:	00059d80 	call	59d8 <_Bfree>
    3400:	983ecd26 	beq	r19,zero,2f38 <_dtoa_r+0x728>
    3404:	d8c00617 	ldw	r3,24(sp)
    3408:	18000426 	beq	r3,zero,341c <_dtoa_r+0xc0c>
    340c:	1cc00326 	beq	r3,r19,341c <_dtoa_r+0xc0c>
    3410:	d9001617 	ldw	r4,88(sp)
    3414:	180b883a 	mov	r5,r3
    3418:	00059d80 	call	59d8 <_Bfree>
    341c:	d9001617 	ldw	r4,88(sp)
    3420:	980b883a 	mov	r5,r19
    3424:	00059d80 	call	59d8 <_Bfree>
    3428:	003ec306 	br	2f38 <_dtoa_r+0x728>
    342c:	1805883a 	mov	r2,r3
    3430:	003eeb06 	br	2fe0 <_dtoa_r+0x7d0>
    3434:	d9800a17 	ldw	r6,40(sp)
    3438:	d8c01117 	ldw	r3,68(sp)
    343c:	20bfff04 	addi	r2,r4,-4
    3440:	308d883a 	add	r6,r6,r2
    3444:	1887883a 	add	r3,r3,r2
    3448:	80a1883a 	add	r16,r16,r2
    344c:	d9800a15 	stw	r6,40(sp)
    3450:	d8c01115 	stw	r3,68(sp)
    3454:	003f1d06 	br	30cc <_dtoa_r+0x8bc>
    3458:	a03f0c1e 	bne	r20,zero,308c <_dtoa_r+0x87c>
    345c:	00800434 	movhi	r2,16
    3460:	10bfffc4 	addi	r2,r2,-1
    3464:	a884703a 	and	r2,r21,r2
    3468:	103f081e 	bne	r2,zero,308c <_dtoa_r+0x87c>
    346c:	a89ffc2c 	andhi	r2,r21,32752
    3470:	103f0626 	beq	r2,zero,308c <_dtoa_r+0x87c>
    3474:	d8c01117 	ldw	r3,68(sp)
    3478:	d9000a17 	ldw	r4,40(sp)
    347c:	18c00044 	addi	r3,r3,1
    3480:	21000044 	addi	r4,r4,1
    3484:	d8c01115 	stw	r3,68(sp)
    3488:	d9000a15 	stw	r4,40(sp)
    348c:	003f0006 	br	3090 <_dtoa_r+0x880>
    3490:	d9400717 	ldw	r5,28(sp)
    3494:	d9001617 	ldw	r4,88(sp)
    3498:	00068240 	call	6824 <__pow5mult>
    349c:	d8800715 	stw	r2,28(sp)
    34a0:	003eed06 	br	3058 <_dtoa_r+0x848>
    34a4:	1000021e 	bne	r2,zero,34b0 <_dtoa_r+0xca0>
    34a8:	b880004c 	andi	r2,r23,1
    34ac:	103fc11e 	bne	r2,zero,33b4 <_dtoa_r+0xba4>
    34b0:	b5bfffc4 	addi	r22,r22,-1
    34b4:	b0c00007 	ldb	r3,0(r22)
    34b8:	00800c04 	movi	r2,48
    34bc:	18bffc26 	beq	r3,r2,34b0 <_dtoa_r+0xca0>
    34c0:	b7000044 	addi	fp,r22,1
    34c4:	003fcb06 	br	33f4 <_dtoa_r+0xbe4>
    34c8:	d9800d17 	ldw	r6,52(sp)
    34cc:	018fc83a 	sub	r7,zero,r6
    34d0:	3801f726 	beq	r7,zero,3cb0 <_dtoa_r+0x14a0>
    34d4:	398003cc 	andi	r6,r7,15
    34d8:	300c90fa 	slli	r6,r6,3
    34dc:	01400074 	movhi	r5,1
    34e0:	29404504 	addi	r5,r5,276
    34e4:	d9001217 	ldw	r4,72(sp)
    34e8:	314d883a 	add	r6,r6,r5
    34ec:	30c00117 	ldw	r3,4(r6)
    34f0:	30800017 	ldw	r2,0(r6)
    34f4:	d9401317 	ldw	r5,76(sp)
    34f8:	3821d13a 	srai	r16,r7,4
    34fc:	100d883a 	mov	r6,r2
    3500:	180f883a 	mov	r7,r3
    3504:	00089b80 	call	89b8 <__muldf3>
    3508:	1011883a 	mov	r8,r2
    350c:	1813883a 	mov	r9,r3
    3510:	1029883a 	mov	r20,r2
    3514:	182b883a 	mov	r21,r3
    3518:	8001e526 	beq	r16,zero,3cb0 <_dtoa_r+0x14a0>
    351c:	05800084 	movi	r22,2
    3520:	04400074 	movhi	r17,1
    3524:	8c407704 	addi	r17,r17,476
    3528:	8080004c 	andi	r2,r16,1
    352c:	1005003a 	cmpeq	r2,r2,zero
    3530:	1000081e 	bne	r2,zero,3554 <_dtoa_r+0xd44>
    3534:	89800017 	ldw	r6,0(r17)
    3538:	89c00117 	ldw	r7,4(r17)
    353c:	480b883a 	mov	r5,r9
    3540:	4009883a 	mov	r4,r8
    3544:	00089b80 	call	89b8 <__muldf3>
    3548:	1011883a 	mov	r8,r2
    354c:	b5800044 	addi	r22,r22,1
    3550:	1813883a 	mov	r9,r3
    3554:	8021d07a 	srai	r16,r16,1
    3558:	8c400204 	addi	r17,r17,8
    355c:	803ff21e 	bne	r16,zero,3528 <_dtoa_r+0xd18>
    3560:	4029883a 	mov	r20,r8
    3564:	482b883a 	mov	r21,r9
    3568:	003dca06 	br	2c94 <_dtoa_r+0x484>
    356c:	d9000817 	ldw	r4,32(sp)
    3570:	2005003a 	cmpeq	r2,r4,zero
    3574:	1001f61e 	bne	r2,zero,3d50 <_dtoa_r+0x1540>
    3578:	dc001117 	ldw	r16,68(sp)
    357c:	dc801017 	ldw	r18,64(sp)
    3580:	18c10cc4 	addi	r3,r3,1075
    3584:	003f6106 	br	330c <_dtoa_r+0xafc>
    3588:	d8000b15 	stw	zero,44(sp)
    358c:	d9802617 	ldw	r6,152(sp)
    3590:	d8c00d17 	ldw	r3,52(sp)
    3594:	30800044 	addi	r2,r6,1
    3598:	18ad883a 	add	r22,r3,r2
    359c:	b13fffc4 	addi	r4,r22,-1
    35a0:	d9000e15 	stw	r4,56(sp)
    35a4:	0581f60e 	bge	zero,r22,3d80 <_dtoa_r+0x1570>
    35a8:	dd800f15 	stw	r22,60(sp)
    35ac:	003f3006 	br	3270 <_dtoa_r+0xa60>
    35b0:	d8000b15 	stw	zero,44(sp)
    35b4:	d9002617 	ldw	r4,152(sp)
    35b8:	0101eb0e 	bge	zero,r4,3d68 <_dtoa_r+0x1558>
    35bc:	202d883a 	mov	r22,r4
    35c0:	d9000e15 	stw	r4,56(sp)
    35c4:	d9000f15 	stw	r4,60(sp)
    35c8:	003f2906 	br	3270 <_dtoa_r+0xa60>
    35cc:	01800044 	movi	r6,1
    35d0:	d9800b15 	stw	r6,44(sp)
    35d4:	003ff706 	br	35b4 <_dtoa_r+0xda4>
    35d8:	01000044 	movi	r4,1
    35dc:	d9000b15 	stw	r4,44(sp)
    35e0:	003fea06 	br	358c <_dtoa_r+0xd7c>
    35e4:	04000c0e 	bge	zero,r16,3618 <_dtoa_r+0xe08>
    35e8:	d9400717 	ldw	r5,28(sp)
    35ec:	d9001617 	ldw	r4,88(sp)
    35f0:	01800044 	movi	r6,1
    35f4:	000631c0 	call	631c <__lshift>
    35f8:	1009883a 	mov	r4,r2
    35fc:	900b883a 	mov	r5,r18
    3600:	d8800715 	stw	r2,28(sp)
    3604:	0005b340 	call	5b34 <__mcmp>
    3608:	0081e00e 	bge	zero,r2,3d8c <_dtoa_r+0x157c>
    360c:	bdc00044 	addi	r23,r23,1
    3610:	00800e84 	movi	r2,58
    3614:	b881a226 	beq	r23,r2,3ca0 <_dtoa_r+0x1490>
    3618:	b7000044 	addi	fp,r22,1
    361c:	b5c00005 	stb	r23,0(r22)
    3620:	003f7406 	br	33f4 <_dtoa_r+0xbe4>
    3624:	00800e44 	movi	r2,57
    3628:	b8819d26 	beq	r23,r2,3ca0 <_dtoa_r+0x1490>
    362c:	053ffa0e 	bge	zero,r20,3618 <_dtoa_r+0xe08>
    3630:	8dc00c44 	addi	r23,r17,49
    3634:	003ff806 	br	3618 <_dtoa_r+0xe08>
    3638:	d9001617 	ldw	r4,88(sp)
    363c:	a80b883a 	mov	r5,r21
    3640:	04000044 	movi	r16,1
    3644:	00059d80 	call	59d8 <_Bfree>
    3648:	003edf06 	br	31c8 <_dtoa_r+0x9b8>
    364c:	d9001617 	ldw	r4,88(sp)
    3650:	980b883a 	mov	r5,r19
    3654:	01800284 	movi	r6,10
    3658:	000f883a 	mov	r7,zero
    365c:	00066f80 	call	66f8 <__multadd>
    3660:	1027883a 	mov	r19,r2
    3664:	d8800615 	stw	r2,24(sp)
    3668:	003ebb06 	br	3158 <_dtoa_r+0x948>
    366c:	d9801117 	ldw	r6,68(sp)
    3670:	d8800d17 	ldw	r2,52(sp)
    3674:	d8000915 	stw	zero,36(sp)
    3678:	308dc83a 	sub	r6,r6,r2
    367c:	0087c83a 	sub	r3,zero,r2
    3680:	d9801115 	stw	r6,68(sp)
    3684:	d8c01015 	stw	r3,64(sp)
    3688:	003cfe06 	br	2a84 <_dtoa_r+0x274>
    368c:	018dc83a 	sub	r6,zero,r6
    3690:	d9801115 	stw	r6,68(sp)
    3694:	d8000a15 	stw	zero,40(sp)
    3698:	003cf306 	br	2a68 <_dtoa_r+0x258>
    369c:	d9000d17 	ldw	r4,52(sp)
    36a0:	000927c0 	call	927c <__floatsidf>
    36a4:	880b883a 	mov	r5,r17
    36a8:	8009883a 	mov	r4,r16
    36ac:	180f883a 	mov	r7,r3
    36b0:	100d883a 	mov	r6,r2
    36b4:	000905c0 	call	905c <__nedf2>
    36b8:	103ce126 	beq	r2,zero,2a40 <_dtoa_r+0x230>
    36bc:	d9800d17 	ldw	r6,52(sp)
    36c0:	31bfffc4 	addi	r6,r6,-1
    36c4:	d9800d15 	stw	r6,52(sp)
    36c8:	003cdd06 	br	2a40 <_dtoa_r+0x230>
    36cc:	d9000717 	ldw	r4,28(sp)
    36d0:	900b883a 	mov	r5,r18
    36d4:	0005b340 	call	5b34 <__mcmp>
    36d8:	103e8d0e 	bge	r2,zero,3110 <_dtoa_r+0x900>
    36dc:	d9400717 	ldw	r5,28(sp)
    36e0:	d9001617 	ldw	r4,88(sp)
    36e4:	01800284 	movi	r6,10
    36e8:	000f883a 	mov	r7,zero
    36ec:	00066f80 	call	66f8 <__multadd>
    36f0:	d9800d17 	ldw	r6,52(sp)
    36f4:	d8800715 	stw	r2,28(sp)
    36f8:	31bfffc4 	addi	r6,r6,-1
    36fc:	d9800d15 	stw	r6,52(sp)
    3700:	b001a71e 	bne	r22,zero,3da0 <_dtoa_r+0x1590>
    3704:	d8800e17 	ldw	r2,56(sp)
    3708:	d8800f15 	stw	r2,60(sp)
    370c:	003e8006 	br	3110 <_dtoa_r+0x900>
    3710:	90800417 	ldw	r2,16(r18)
    3714:	1085883a 	add	r2,r2,r2
    3718:	1085883a 	add	r2,r2,r2
    371c:	1485883a 	add	r2,r2,r18
    3720:	11000417 	ldw	r4,16(r2)
    3724:	0005a000 	call	5a00 <__hi0bits>
    3728:	00c00804 	movi	r3,32
    372c:	1887c83a 	sub	r3,r3,r2
    3730:	003e5a06 	br	309c <_dtoa_r+0x88c>
    3734:	d9400717 	ldw	r5,28(sp)
    3738:	d9801017 	ldw	r6,64(sp)
    373c:	d9001617 	ldw	r4,88(sp)
    3740:	00068240 	call	6824 <__pow5mult>
    3744:	d8800715 	stw	r2,28(sp)
    3748:	003e4306 	br	3058 <_dtoa_r+0x848>
    374c:	d9800f17 	ldw	r6,60(sp)
    3750:	d8800d17 	ldw	r2,52(sp)
    3754:	d9800315 	stw	r6,12(sp)
    3758:	d8800415 	stw	r2,16(sp)
    375c:	d8c00b17 	ldw	r3,44(sp)
    3760:	1805003a 	cmpeq	r2,r3,zero
    3764:	1000e21e 	bne	r2,zero,3af0 <_dtoa_r+0x12e0>
    3768:	d9000317 	ldw	r4,12(sp)
    376c:	0005883a 	mov	r2,zero
    3770:	00cff834 	movhi	r3,16352
    3774:	200c90fa 	slli	r6,r4,3
    3778:	01000074 	movhi	r4,1
    377c:	21004504 	addi	r4,r4,276
    3780:	180b883a 	mov	r5,r3
    3784:	310d883a 	add	r6,r6,r4
    3788:	327fff17 	ldw	r9,-4(r6)
    378c:	323ffe17 	ldw	r8,-8(r6)
    3790:	1009883a 	mov	r4,r2
    3794:	480f883a 	mov	r7,r9
    3798:	400d883a 	mov	r6,r8
    379c:	0008d7c0 	call	8d7c <__divdf3>
    37a0:	180b883a 	mov	r5,r3
    37a4:	b00d883a 	mov	r6,r22
    37a8:	b80f883a 	mov	r7,r23
    37ac:	1009883a 	mov	r4,r2
    37b0:	00088c40 	call	88c4 <__subdf3>
    37b4:	a80b883a 	mov	r5,r21
    37b8:	a009883a 	mov	r4,r20
    37bc:	d8c01915 	stw	r3,100(sp)
    37c0:	d8801815 	stw	r2,96(sp)
    37c4:	00093740 	call	9374 <__fixdfsi>
    37c8:	1009883a 	mov	r4,r2
    37cc:	1027883a 	mov	r19,r2
    37d0:	000927c0 	call	927c <__floatsidf>
    37d4:	a80b883a 	mov	r5,r21
    37d8:	a009883a 	mov	r4,r20
    37dc:	180f883a 	mov	r7,r3
    37e0:	100d883a 	mov	r6,r2
    37e4:	00088c40 	call	88c4 <__subdf3>
    37e8:	d9801817 	ldw	r6,96(sp)
    37ec:	1823883a 	mov	r17,r3
    37f0:	d8801415 	stw	r2,80(sp)
    37f4:	302d883a 	mov	r22,r6
    37f8:	d9800517 	ldw	r6,20(sp)
    37fc:	9cc00c04 	addi	r19,r19,48
    3800:	dc401515 	stw	r17,84(sp)
    3804:	d8c01917 	ldw	r3,100(sp)
    3808:	34c00005 	stb	r19,0(r6)
    380c:	d8800517 	ldw	r2,20(sp)
    3810:	d9401917 	ldw	r5,100(sp)
    3814:	d9801417 	ldw	r6,80(sp)
    3818:	b009883a 	mov	r4,r22
    381c:	880f883a 	mov	r7,r17
    3820:	182f883a 	mov	r23,r3
    3824:	17000044 	addi	fp,r2,1
    3828:	00090e40 	call	90e4 <__gtdf2>
    382c:	00804e16 	blt	zero,r2,3968 <_dtoa_r+0x1158>
    3830:	d9801417 	ldw	r6,80(sp)
    3834:	0005883a 	mov	r2,zero
    3838:	00cffc34 	movhi	r3,16368
    383c:	180b883a 	mov	r5,r3
    3840:	880f883a 	mov	r7,r17
    3844:	1009883a 	mov	r4,r2
    3848:	00088c40 	call	88c4 <__subdf3>
    384c:	d9401917 	ldw	r5,100(sp)
    3850:	180f883a 	mov	r7,r3
    3854:	b009883a 	mov	r4,r22
    3858:	100d883a 	mov	r6,r2
    385c:	00090e40 	call	90e4 <__gtdf2>
    3860:	00bda216 	blt	zero,r2,2eec <_dtoa_r+0x6dc>
    3864:	d8c00317 	ldw	r3,12(sp)
    3868:	00800044 	movi	r2,1
    386c:	10c01216 	blt	r2,r3,38b8 <_dtoa_r+0x10a8>
    3870:	003d4506 	br	2d88 <_dtoa_r+0x578>
    3874:	d9801417 	ldw	r6,80(sp)
    3878:	0005883a 	mov	r2,zero
    387c:	00cffc34 	movhi	r3,16368
    3880:	180b883a 	mov	r5,r3
    3884:	880f883a 	mov	r7,r17
    3888:	1009883a 	mov	r4,r2
    388c:	00088c40 	call	88c4 <__subdf3>
    3890:	d9c01b17 	ldw	r7,108(sp)
    3894:	180b883a 	mov	r5,r3
    3898:	1009883a 	mov	r4,r2
    389c:	b00d883a 	mov	r6,r22
    38a0:	00091f40 	call	91f4 <__ltdf2>
    38a4:	103d9116 	blt	r2,zero,2eec <_dtoa_r+0x6dc>
    38a8:	d9800517 	ldw	r6,20(sp)
    38ac:	d9000317 	ldw	r4,12(sp)
    38b0:	3105883a 	add	r2,r6,r4
    38b4:	e0bd3426 	beq	fp,r2,2d88 <_dtoa_r+0x578>
    38b8:	04500934 	movhi	r17,16420
    38bc:	0021883a 	mov	r16,zero
    38c0:	b80b883a 	mov	r5,r23
    38c4:	b009883a 	mov	r4,r22
    38c8:	800d883a 	mov	r6,r16
    38cc:	880f883a 	mov	r7,r17
    38d0:	00089b80 	call	89b8 <__muldf3>
    38d4:	d9401517 	ldw	r5,84(sp)
    38d8:	d9001417 	ldw	r4,80(sp)
    38dc:	880f883a 	mov	r7,r17
    38e0:	000d883a 	mov	r6,zero
    38e4:	d8801a15 	stw	r2,104(sp)
    38e8:	d8c01b15 	stw	r3,108(sp)
    38ec:	00089b80 	call	89b8 <__muldf3>
    38f0:	180b883a 	mov	r5,r3
    38f4:	1009883a 	mov	r4,r2
    38f8:	1823883a 	mov	r17,r3
    38fc:	1021883a 	mov	r16,r2
    3900:	00093740 	call	9374 <__fixdfsi>
    3904:	1009883a 	mov	r4,r2
    3908:	102b883a 	mov	r21,r2
    390c:	000927c0 	call	927c <__floatsidf>
    3910:	880b883a 	mov	r5,r17
    3914:	8009883a 	mov	r4,r16
    3918:	180f883a 	mov	r7,r3
    391c:	100d883a 	mov	r6,r2
    3920:	00088c40 	call	88c4 <__subdf3>
    3924:	1021883a 	mov	r16,r2
    3928:	d9001b17 	ldw	r4,108(sp)
    392c:	1823883a 	mov	r17,r3
    3930:	dc001415 	stw	r16,80(sp)
    3934:	ad400c04 	addi	r21,r21,48
    3938:	dc401515 	stw	r17,84(sp)
    393c:	d8801a17 	ldw	r2,104(sp)
    3940:	e5400005 	stb	r21,0(fp)
    3944:	202f883a 	mov	r23,r4
    3948:	d9c01b17 	ldw	r7,108(sp)
    394c:	d9001417 	ldw	r4,80(sp)
    3950:	880b883a 	mov	r5,r17
    3954:	100d883a 	mov	r6,r2
    3958:	102d883a 	mov	r22,r2
    395c:	e7000044 	addi	fp,fp,1
    3960:	00091f40 	call	91f4 <__ltdf2>
    3964:	103fc30e 	bge	r2,zero,3874 <_dtoa_r+0x1064>
    3968:	d9000417 	ldw	r4,16(sp)
    396c:	d9000d15 	stw	r4,52(sp)
    3970:	003d7106 	br	2f38 <_dtoa_r+0x728>
    3974:	d9801717 	ldw	r6,92(sp)
    3978:	00800084 	movi	r2,2
    397c:	11bde60e 	bge	r2,r6,3118 <_dtoa_r+0x908>
    3980:	203cfb1e 	bne	r4,zero,2d70 <_dtoa_r+0x560>
    3984:	d9001617 	ldw	r4,88(sp)
    3988:	900b883a 	mov	r5,r18
    398c:	01800144 	movi	r6,5
    3990:	000f883a 	mov	r7,zero
    3994:	00066f80 	call	66f8 <__multadd>
    3998:	d9000717 	ldw	r4,28(sp)
    399c:	100b883a 	mov	r5,r2
    39a0:	1025883a 	mov	r18,r2
    39a4:	0005b340 	call	5b34 <__mcmp>
    39a8:	00bcf10e 	bge	zero,r2,2d70 <_dtoa_r+0x560>
    39ac:	d8c00d17 	ldw	r3,52(sp)
    39b0:	d9000517 	ldw	r4,20(sp)
    39b4:	d8000615 	stw	zero,24(sp)
    39b8:	18c00044 	addi	r3,r3,1
    39bc:	d8c00d15 	stw	r3,52(sp)
    39c0:	00800c44 	movi	r2,49
    39c4:	27000044 	addi	fp,r4,1
    39c8:	20800005 	stb	r2,0(r4)
    39cc:	003e8906 	br	33f4 <_dtoa_r+0xbe4>
    39d0:	d8c00517 	ldw	r3,20(sp)
    39d4:	003bc206 	br	28e0 <_dtoa_r+0xd0>
    39d8:	01800074 	movhi	r6,1
    39dc:	31807704 	addi	r6,r6,476
    39e0:	30c00917 	ldw	r3,36(r6)
    39e4:	30800817 	ldw	r2,32(r6)
    39e8:	d9001217 	ldw	r4,72(sp)
    39ec:	d9401317 	ldw	r5,76(sp)
    39f0:	180f883a 	mov	r7,r3
    39f4:	100d883a 	mov	r6,r2
    39f8:	0008d7c0 	call	8d7c <__divdf3>
    39fc:	948003cc 	andi	r18,r18,15
    3a00:	058000c4 	movi	r22,3
    3a04:	1029883a 	mov	r20,r2
    3a08:	182b883a 	mov	r21,r3
    3a0c:	003c8906 	br	2c34 <_dtoa_r+0x424>
    3a10:	d9001017 	ldw	r4,64(sp)
    3a14:	d9800917 	ldw	r6,36(sp)
    3a18:	0025883a 	mov	r18,zero
    3a1c:	1105c83a 	sub	r2,r2,r4
    3a20:	2089883a 	add	r4,r4,r2
    3a24:	308d883a 	add	r6,r6,r2
    3a28:	d9001015 	stw	r4,64(sp)
    3a2c:	d9800915 	stw	r6,36(sp)
    3a30:	003e3206 	br	32fc <_dtoa_r+0xaec>
    3a34:	28800044 	addi	r2,r5,1
    3a38:	27000044 	addi	fp,r4,1
    3a3c:	20800005 	stb	r2,0(r4)
    3a40:	003e6c06 	br	33f4 <_dtoa_r+0xbe4>
    3a44:	d8800f17 	ldw	r2,60(sp)
    3a48:	00bce016 	blt	zero,r2,2dcc <_dtoa_r+0x5bc>
    3a4c:	d9800f17 	ldw	r6,60(sp)
    3a50:	303cc51e 	bne	r6,zero,2d68 <_dtoa_r+0x558>
    3a54:	0005883a 	mov	r2,zero
    3a58:	00d00534 	movhi	r3,16404
    3a5c:	980b883a 	mov	r5,r19
    3a60:	180f883a 	mov	r7,r3
    3a64:	9009883a 	mov	r4,r18
    3a68:	100d883a 	mov	r6,r2
    3a6c:	00089b80 	call	89b8 <__muldf3>
    3a70:	180b883a 	mov	r5,r3
    3a74:	a80f883a 	mov	r7,r21
    3a78:	1009883a 	mov	r4,r2
    3a7c:	a00d883a 	mov	r6,r20
    3a80:	000916c0 	call	916c <__gedf2>
    3a84:	103cb80e 	bge	r2,zero,2d68 <_dtoa_r+0x558>
    3a88:	0027883a 	mov	r19,zero
    3a8c:	0025883a 	mov	r18,zero
    3a90:	003fc606 	br	39ac <_dtoa_r+0x119c>
    3a94:	99400117 	ldw	r5,4(r19)
    3a98:	d9001617 	ldw	r4,88(sp)
    3a9c:	0005f580 	call	5f58 <_Balloc>
    3aa0:	99800417 	ldw	r6,16(r19)
    3aa4:	11000304 	addi	r4,r2,12
    3aa8:	99400304 	addi	r5,r19,12
    3aac:	318d883a 	add	r6,r6,r6
    3ab0:	318d883a 	add	r6,r6,r6
    3ab4:	31800204 	addi	r6,r6,8
    3ab8:	1023883a 	mov	r17,r2
    3abc:	00057c00 	call	57c0 <memcpy>
    3ac0:	d9001617 	ldw	r4,88(sp)
    3ac4:	880b883a 	mov	r5,r17
    3ac8:	01800044 	movi	r6,1
    3acc:	000631c0 	call	631c <__lshift>
    3ad0:	100b883a 	mov	r5,r2
    3ad4:	003d9c06 	br	3148 <_dtoa_r+0x938>
    3ad8:	00800e44 	movi	r2,57
    3adc:	b8807026 	beq	r23,r2,3ca0 <_dtoa_r+0x1490>
    3ae0:	b8800044 	addi	r2,r23,1
    3ae4:	b7000044 	addi	fp,r22,1
    3ae8:	b0800005 	stb	r2,0(r22)
    3aec:	003e4106 	br	33f4 <_dtoa_r+0xbe4>
    3af0:	d8800317 	ldw	r2,12(sp)
    3af4:	01800074 	movhi	r6,1
    3af8:	31804504 	addi	r6,r6,276
    3afc:	b009883a 	mov	r4,r22
    3b00:	100e90fa 	slli	r7,r2,3
    3b04:	b80b883a 	mov	r5,r23
    3b08:	398f883a 	add	r7,r7,r6
    3b0c:	38bffe17 	ldw	r2,-8(r7)
    3b10:	d9800517 	ldw	r6,20(sp)
    3b14:	38ffff17 	ldw	r3,-4(r7)
    3b18:	37000044 	addi	fp,r6,1
    3b1c:	180f883a 	mov	r7,r3
    3b20:	100d883a 	mov	r6,r2
    3b24:	00089b80 	call	89b8 <__muldf3>
    3b28:	a80b883a 	mov	r5,r21
    3b2c:	a009883a 	mov	r4,r20
    3b30:	182f883a 	mov	r23,r3
    3b34:	102d883a 	mov	r22,r2
    3b38:	00093740 	call	9374 <__fixdfsi>
    3b3c:	1009883a 	mov	r4,r2
    3b40:	1027883a 	mov	r19,r2
    3b44:	000927c0 	call	927c <__floatsidf>
    3b48:	a80b883a 	mov	r5,r21
    3b4c:	a009883a 	mov	r4,r20
    3b50:	180f883a 	mov	r7,r3
    3b54:	100d883a 	mov	r6,r2
    3b58:	00088c40 	call	88c4 <__subdf3>
    3b5c:	180b883a 	mov	r5,r3
    3b60:	d8c00517 	ldw	r3,20(sp)
    3b64:	9cc00c04 	addi	r19,r19,48
    3b68:	1009883a 	mov	r4,r2
    3b6c:	1cc00005 	stb	r19,0(r3)
    3b70:	2021883a 	mov	r16,r4
    3b74:	d9000317 	ldw	r4,12(sp)
    3b78:	00800044 	movi	r2,1
    3b7c:	2823883a 	mov	r17,r5
    3b80:	20802226 	beq	r4,r2,3c0c <_dtoa_r+0x13fc>
    3b84:	1029883a 	mov	r20,r2
    3b88:	0005883a 	mov	r2,zero
    3b8c:	00d00934 	movhi	r3,16420
    3b90:	180f883a 	mov	r7,r3
    3b94:	100d883a 	mov	r6,r2
    3b98:	880b883a 	mov	r5,r17
    3b9c:	8009883a 	mov	r4,r16
    3ba0:	00089b80 	call	89b8 <__muldf3>
    3ba4:	180b883a 	mov	r5,r3
    3ba8:	1009883a 	mov	r4,r2
    3bac:	1823883a 	mov	r17,r3
    3bb0:	1021883a 	mov	r16,r2
    3bb4:	00093740 	call	9374 <__fixdfsi>
    3bb8:	1009883a 	mov	r4,r2
    3bbc:	102b883a 	mov	r21,r2
    3bc0:	000927c0 	call	927c <__floatsidf>
    3bc4:	880b883a 	mov	r5,r17
    3bc8:	8009883a 	mov	r4,r16
    3bcc:	180f883a 	mov	r7,r3
    3bd0:	100d883a 	mov	r6,r2
    3bd4:	00088c40 	call	88c4 <__subdf3>
    3bd8:	180b883a 	mov	r5,r3
    3bdc:	d8c00517 	ldw	r3,20(sp)
    3be0:	1009883a 	mov	r4,r2
    3be4:	ad400c04 	addi	r21,r21,48
    3be8:	1d05883a 	add	r2,r3,r20
    3bec:	15400005 	stb	r21,0(r2)
    3bf0:	2021883a 	mov	r16,r4
    3bf4:	d9000317 	ldw	r4,12(sp)
    3bf8:	a5000044 	addi	r20,r20,1
    3bfc:	2823883a 	mov	r17,r5
    3c00:	a13fe11e 	bne	r20,r4,3b88 <_dtoa_r+0x1378>
    3c04:	e505883a 	add	r2,fp,r20
    3c08:	173fffc4 	addi	fp,r2,-1
    3c0c:	0025883a 	mov	r18,zero
    3c10:	04cff834 	movhi	r19,16352
    3c14:	b009883a 	mov	r4,r22
    3c18:	b80b883a 	mov	r5,r23
    3c1c:	900d883a 	mov	r6,r18
    3c20:	980f883a 	mov	r7,r19
    3c24:	00089440 	call	8944 <__adddf3>
    3c28:	180b883a 	mov	r5,r3
    3c2c:	1009883a 	mov	r4,r2
    3c30:	800d883a 	mov	r6,r16
    3c34:	880f883a 	mov	r7,r17
    3c38:	00091f40 	call	91f4 <__ltdf2>
    3c3c:	103cab16 	blt	r2,zero,2eec <_dtoa_r+0x6dc>
    3c40:	0009883a 	mov	r4,zero
    3c44:	980b883a 	mov	r5,r19
    3c48:	b80f883a 	mov	r7,r23
    3c4c:	b00d883a 	mov	r6,r22
    3c50:	00088c40 	call	88c4 <__subdf3>
    3c54:	180b883a 	mov	r5,r3
    3c58:	880f883a 	mov	r7,r17
    3c5c:	1009883a 	mov	r4,r2
    3c60:	800d883a 	mov	r6,r16
    3c64:	00090e40 	call	90e4 <__gtdf2>
    3c68:	00bc470e 	bge	zero,r2,2d88 <_dtoa_r+0x578>
    3c6c:	00c00c04 	movi	r3,48
    3c70:	e73fffc4 	addi	fp,fp,-1
    3c74:	e0800007 	ldb	r2,0(fp)
    3c78:	10fffd26 	beq	r2,r3,3c70 <_dtoa_r+0x1460>
    3c7c:	d9800417 	ldw	r6,16(sp)
    3c80:	e7000044 	addi	fp,fp,1
    3c84:	d9800d15 	stw	r6,52(sp)
    3c88:	003cab06 	br	2f38 <_dtoa_r+0x728>
    3c8c:	d8c00f17 	ldw	r3,60(sp)
    3c90:	d9001117 	ldw	r4,68(sp)
    3c94:	20e1c83a 	sub	r16,r4,r3
    3c98:	0007883a 	mov	r3,zero
    3c9c:	003d9b06 	br	330c <_dtoa_r+0xafc>
    3ca0:	00800e44 	movi	r2,57
    3ca4:	b0800005 	stb	r2,0(r22)
    3ca8:	b5800044 	addi	r22,r22,1
    3cac:	003dc106 	br	33b4 <_dtoa_r+0xba4>
    3cb0:	05800084 	movi	r22,2
    3cb4:	003bf706 	br	2c94 <_dtoa_r+0x484>
    3cb8:	d9000f17 	ldw	r4,60(sp)
    3cbc:	013c000e 	bge	zero,r4,2cc0 <_dtoa_r+0x4b0>
    3cc0:	d9800e17 	ldw	r6,56(sp)
    3cc4:	01bc300e 	bge	zero,r6,2d88 <_dtoa_r+0x578>
    3cc8:	0005883a 	mov	r2,zero
    3ccc:	00d00934 	movhi	r3,16420
    3cd0:	a80b883a 	mov	r5,r21
    3cd4:	180f883a 	mov	r7,r3
    3cd8:	a009883a 	mov	r4,r20
    3cdc:	100d883a 	mov	r6,r2
    3ce0:	00089b80 	call	89b8 <__muldf3>
    3ce4:	b1000044 	addi	r4,r22,1
    3ce8:	1021883a 	mov	r16,r2
    3cec:	1823883a 	mov	r17,r3
    3cf0:	000927c0 	call	927c <__floatsidf>
    3cf4:	880b883a 	mov	r5,r17
    3cf8:	8009883a 	mov	r4,r16
    3cfc:	180f883a 	mov	r7,r3
    3d00:	100d883a 	mov	r6,r2
    3d04:	00089b80 	call	89b8 <__muldf3>
    3d08:	0011883a 	mov	r8,zero
    3d0c:	02500734 	movhi	r9,16412
    3d10:	180b883a 	mov	r5,r3
    3d14:	480f883a 	mov	r7,r9
    3d18:	1009883a 	mov	r4,r2
    3d1c:	400d883a 	mov	r6,r8
    3d20:	00089440 	call	8944 <__adddf3>
    3d24:	102d883a 	mov	r22,r2
    3d28:	00bf3034 	movhi	r2,64704
    3d2c:	10ef883a 	add	r23,r2,r3
    3d30:	d8800d17 	ldw	r2,52(sp)
    3d34:	d8c00e17 	ldw	r3,56(sp)
    3d38:	8029883a 	mov	r20,r16
    3d3c:	10bfffc4 	addi	r2,r2,-1
    3d40:	882b883a 	mov	r21,r17
    3d44:	d8800415 	stw	r2,16(sp)
    3d48:	d8c00315 	stw	r3,12(sp)
    3d4c:	003e8306 	br	375c <_dtoa_r+0xf4c>
    3d50:	d8800117 	ldw	r2,4(sp)
    3d54:	dc001117 	ldw	r16,68(sp)
    3d58:	dc801017 	ldw	r18,64(sp)
    3d5c:	00c00d84 	movi	r3,54
    3d60:	1887c83a 	sub	r3,r3,r2
    3d64:	003d6906 	br	330c <_dtoa_r+0xafc>
    3d68:	01800044 	movi	r6,1
    3d6c:	3021883a 	mov	r16,r6
    3d70:	d9800f15 	stw	r6,60(sp)
    3d74:	d9802615 	stw	r6,152(sp)
    3d78:	d9800e15 	stw	r6,56(sp)
    3d7c:	003b9306 	br	2bcc <_dtoa_r+0x3bc>
    3d80:	b021883a 	mov	r16,r22
    3d84:	dd800f15 	stw	r22,60(sp)
    3d88:	003b9006 	br	2bcc <_dtoa_r+0x3bc>
    3d8c:	103e221e 	bne	r2,zero,3618 <_dtoa_r+0xe08>
    3d90:	b880004c 	andi	r2,r23,1
    3d94:	1005003a 	cmpeq	r2,r2,zero
    3d98:	103e1f1e 	bne	r2,zero,3618 <_dtoa_r+0xe08>
    3d9c:	003e1b06 	br	360c <_dtoa_r+0xdfc>
    3da0:	d9001617 	ldw	r4,88(sp)
    3da4:	980b883a 	mov	r5,r19
    3da8:	01800284 	movi	r6,10
    3dac:	000f883a 	mov	r7,zero
    3db0:	00066f80 	call	66f8 <__multadd>
    3db4:	d8c00e17 	ldw	r3,56(sp)
    3db8:	1027883a 	mov	r19,r2
    3dbc:	d8c00f15 	stw	r3,60(sp)
    3dc0:	003cd306 	br	3110 <_dtoa_r+0x900>

00003dc4 <_fflush_r>:
    3dc4:	defffb04 	addi	sp,sp,-20
    3dc8:	dcc00315 	stw	r19,12(sp)
    3dcc:	dc800215 	stw	r18,8(sp)
    3dd0:	dfc00415 	stw	ra,16(sp)
    3dd4:	dc400115 	stw	r17,4(sp)
    3dd8:	dc000015 	stw	r16,0(sp)
    3ddc:	2027883a 	mov	r19,r4
    3de0:	2825883a 	mov	r18,r5
    3de4:	20000226 	beq	r4,zero,3df0 <_fflush_r+0x2c>
    3de8:	20800e17 	ldw	r2,56(r4)
    3dec:	10005626 	beq	r2,zero,3f48 <_fflush_r+0x184>
    3df0:	9100030b 	ldhu	r4,12(r18)
    3df4:	20ffffcc 	andi	r3,r4,65535
    3df8:	18e0001c 	xori	r3,r3,32768
    3dfc:	18e00004 	addi	r3,r3,-32768
    3e00:	1880020c 	andi	r2,r3,8
    3e04:	1000261e 	bne	r2,zero,3ea0 <_fflush_r+0xdc>
    3e08:	90c00117 	ldw	r3,4(r18)
    3e0c:	20820014 	ori	r2,r4,2048
    3e10:	9080030d 	sth	r2,12(r18)
    3e14:	1009883a 	mov	r4,r2
    3e18:	00c0400e 	bge	zero,r3,3f1c <_fflush_r+0x158>
    3e1c:	92000a17 	ldw	r8,40(r18)
    3e20:	40004026 	beq	r8,zero,3f24 <_fflush_r+0x160>
    3e24:	2084000c 	andi	r2,r4,4096
    3e28:	10005326 	beq	r2,zero,3f78 <_fflush_r+0x1b4>
    3e2c:	94001417 	ldw	r16,80(r18)
    3e30:	9080030b 	ldhu	r2,12(r18)
    3e34:	1080010c 	andi	r2,r2,4
    3e38:	1000481e 	bne	r2,zero,3f5c <_fflush_r+0x198>
    3e3c:	91400717 	ldw	r5,28(r18)
    3e40:	9809883a 	mov	r4,r19
    3e44:	800d883a 	mov	r6,r16
    3e48:	000f883a 	mov	r7,zero
    3e4c:	403ee83a 	callr	r8
    3e50:	8080261e 	bne	r16,r2,3eec <_fflush_r+0x128>
    3e54:	9080030b 	ldhu	r2,12(r18)
    3e58:	91000417 	ldw	r4,16(r18)
    3e5c:	90000115 	stw	zero,4(r18)
    3e60:	10bdffcc 	andi	r2,r2,63487
    3e64:	10ffffcc 	andi	r3,r2,65535
    3e68:	18c4000c 	andi	r3,r3,4096
    3e6c:	9080030d 	sth	r2,12(r18)
    3e70:	91000015 	stw	r4,0(r18)
    3e74:	18002b26 	beq	r3,zero,3f24 <_fflush_r+0x160>
    3e78:	0007883a 	mov	r3,zero
    3e7c:	1805883a 	mov	r2,r3
    3e80:	94001415 	stw	r16,80(r18)
    3e84:	dfc00417 	ldw	ra,16(sp)
    3e88:	dcc00317 	ldw	r19,12(sp)
    3e8c:	dc800217 	ldw	r18,8(sp)
    3e90:	dc400117 	ldw	r17,4(sp)
    3e94:	dc000017 	ldw	r16,0(sp)
    3e98:	dec00504 	addi	sp,sp,20
    3e9c:	f800283a 	ret
    3ea0:	94400417 	ldw	r17,16(r18)
    3ea4:	88001f26 	beq	r17,zero,3f24 <_fflush_r+0x160>
    3ea8:	90800017 	ldw	r2,0(r18)
    3eac:	18c000cc 	andi	r3,r3,3
    3eb0:	94400015 	stw	r17,0(r18)
    3eb4:	1461c83a 	sub	r16,r2,r17
    3eb8:	18002526 	beq	r3,zero,3f50 <_fflush_r+0x18c>
    3ebc:	0005883a 	mov	r2,zero
    3ec0:	90800215 	stw	r2,8(r18)
    3ec4:	0400170e 	bge	zero,r16,3f24 <_fflush_r+0x160>
    3ec8:	90c00917 	ldw	r3,36(r18)
    3ecc:	91400717 	ldw	r5,28(r18)
    3ed0:	880d883a 	mov	r6,r17
    3ed4:	800f883a 	mov	r7,r16
    3ed8:	9809883a 	mov	r4,r19
    3edc:	183ee83a 	callr	r3
    3ee0:	88a3883a 	add	r17,r17,r2
    3ee4:	80a1c83a 	sub	r16,r16,r2
    3ee8:	00bff616 	blt	zero,r2,3ec4 <_fflush_r+0x100>
    3eec:	9080030b 	ldhu	r2,12(r18)
    3ef0:	00ffffc4 	movi	r3,-1
    3ef4:	10801014 	ori	r2,r2,64
    3ef8:	9080030d 	sth	r2,12(r18)
    3efc:	1805883a 	mov	r2,r3
    3f00:	dfc00417 	ldw	ra,16(sp)
    3f04:	dcc00317 	ldw	r19,12(sp)
    3f08:	dc800217 	ldw	r18,8(sp)
    3f0c:	dc400117 	ldw	r17,4(sp)
    3f10:	dc000017 	ldw	r16,0(sp)
    3f14:	dec00504 	addi	sp,sp,20
    3f18:	f800283a 	ret
    3f1c:	90800f17 	ldw	r2,60(r18)
    3f20:	00bfbe16 	blt	zero,r2,3e1c <_fflush_r+0x58>
    3f24:	0007883a 	mov	r3,zero
    3f28:	1805883a 	mov	r2,r3
    3f2c:	dfc00417 	ldw	ra,16(sp)
    3f30:	dcc00317 	ldw	r19,12(sp)
    3f34:	dc800217 	ldw	r18,8(sp)
    3f38:	dc400117 	ldw	r17,4(sp)
    3f3c:	dc000017 	ldw	r16,0(sp)
    3f40:	dec00504 	addi	sp,sp,20
    3f44:	f800283a 	ret
    3f48:	000405c0 	call	405c <__sinit>
    3f4c:	003fa806 	br	3df0 <_fflush_r+0x2c>
    3f50:	90800517 	ldw	r2,20(r18)
    3f54:	90800215 	stw	r2,8(r18)
    3f58:	003fda06 	br	3ec4 <_fflush_r+0x100>
    3f5c:	90800117 	ldw	r2,4(r18)
    3f60:	90c00c17 	ldw	r3,48(r18)
    3f64:	80a1c83a 	sub	r16,r16,r2
    3f68:	183fb426 	beq	r3,zero,3e3c <_fflush_r+0x78>
    3f6c:	90800f17 	ldw	r2,60(r18)
    3f70:	80a1c83a 	sub	r16,r16,r2
    3f74:	003fb106 	br	3e3c <_fflush_r+0x78>
    3f78:	91400717 	ldw	r5,28(r18)
    3f7c:	9809883a 	mov	r4,r19
    3f80:	000d883a 	mov	r6,zero
    3f84:	01c00044 	movi	r7,1
    3f88:	403ee83a 	callr	r8
    3f8c:	1021883a 	mov	r16,r2
    3f90:	00bfffc4 	movi	r2,-1
    3f94:	80800226 	beq	r16,r2,3fa0 <_fflush_r+0x1dc>
    3f98:	92000a17 	ldw	r8,40(r18)
    3f9c:	003fa406 	br	3e30 <_fflush_r+0x6c>
    3fa0:	98c00017 	ldw	r3,0(r19)
    3fa4:	00800744 	movi	r2,29
    3fa8:	18bfde26 	beq	r3,r2,3f24 <_fflush_r+0x160>
    3fac:	9080030b 	ldhu	r2,12(r18)
    3fb0:	8007883a 	mov	r3,r16
    3fb4:	10801014 	ori	r2,r2,64
    3fb8:	9080030d 	sth	r2,12(r18)
    3fbc:	003fcf06 	br	3efc <_fflush_r+0x138>

00003fc0 <fflush>:
    3fc0:	01400034 	movhi	r5,0
    3fc4:	294f7104 	addi	r5,r5,15812
    3fc8:	2007883a 	mov	r3,r4
    3fcc:	20000526 	beq	r4,zero,3fe4 <fflush+0x24>
    3fd0:	00800074 	movhi	r2,1
    3fd4:	10876704 	addi	r2,r2,7580
    3fd8:	11000017 	ldw	r4,0(r2)
    3fdc:	180b883a 	mov	r5,r3
    3fe0:	0003dc41 	jmpi	3dc4 <_fflush_r>
    3fe4:	00800074 	movhi	r2,1
    3fe8:	10876804 	addi	r2,r2,7584
    3fec:	11000017 	ldw	r4,0(r2)
    3ff0:	0004bc41 	jmpi	4bc4 <_fwalk_reent>

00003ff4 <std>:
    3ff4:	00800034 	movhi	r2,0
    3ff8:	109c4e04 	addi	r2,r2,28984
    3ffc:	20800b15 	stw	r2,44(r4)
    4000:	00800034 	movhi	r2,0
    4004:	109c8904 	addi	r2,r2,29220
    4008:	20800815 	stw	r2,32(r4)
    400c:	00c00034 	movhi	r3,0
    4010:	18dc6a04 	addi	r3,r3,29096
    4014:	00800034 	movhi	r2,0
    4018:	109c5004 	addi	r2,r2,28992
    401c:	2140030d 	sth	r5,12(r4)
    4020:	2180038d 	sth	r6,14(r4)
    4024:	20c00915 	stw	r3,36(r4)
    4028:	20800a15 	stw	r2,40(r4)
    402c:	20000015 	stw	zero,0(r4)
    4030:	20000115 	stw	zero,4(r4)
    4034:	20000215 	stw	zero,8(r4)
    4038:	20000415 	stw	zero,16(r4)
    403c:	20000515 	stw	zero,20(r4)
    4040:	20000615 	stw	zero,24(r4)
    4044:	21000715 	stw	r4,28(r4)
    4048:	f800283a 	ret

0000404c <__sfp_lock_acquire>:
    404c:	f800283a 	ret

00004050 <__sfp_lock_release>:
    4050:	f800283a 	ret

00004054 <__sinit_lock_acquire>:
    4054:	f800283a 	ret

00004058 <__sinit_lock_release>:
    4058:	f800283a 	ret

0000405c <__sinit>:
    405c:	20800e17 	ldw	r2,56(r4)
    4060:	defffd04 	addi	sp,sp,-12
    4064:	dc400115 	stw	r17,4(sp)
    4068:	dc000015 	stw	r16,0(sp)
    406c:	dfc00215 	stw	ra,8(sp)
    4070:	04400044 	movi	r17,1
    4074:	01400104 	movi	r5,4
    4078:	000d883a 	mov	r6,zero
    407c:	2021883a 	mov	r16,r4
    4080:	2200bb04 	addi	r8,r4,748
    4084:	200f883a 	mov	r7,r4
    4088:	10000526 	beq	r2,zero,40a0 <__sinit+0x44>
    408c:	dfc00217 	ldw	ra,8(sp)
    4090:	dc400117 	ldw	r17,4(sp)
    4094:	dc000017 	ldw	r16,0(sp)
    4098:	dec00304 	addi	sp,sp,12
    409c:	f800283a 	ret
    40a0:	21000117 	ldw	r4,4(r4)
    40a4:	00800034 	movhi	r2,0
    40a8:	10905004 	addi	r2,r2,16704
    40ac:	00c000c4 	movi	r3,3
    40b0:	80800f15 	stw	r2,60(r16)
    40b4:	80c0b915 	stw	r3,740(r16)
    40b8:	8200ba15 	stw	r8,744(r16)
    40bc:	84400e15 	stw	r17,56(r16)
    40c0:	8000b815 	stw	zero,736(r16)
    40c4:	0003ff40 	call	3ff4 <std>
    40c8:	81000217 	ldw	r4,8(r16)
    40cc:	880d883a 	mov	r6,r17
    40d0:	800f883a 	mov	r7,r16
    40d4:	01400284 	movi	r5,10
    40d8:	0003ff40 	call	3ff4 <std>
    40dc:	81000317 	ldw	r4,12(r16)
    40e0:	800f883a 	mov	r7,r16
    40e4:	01400484 	movi	r5,18
    40e8:	01800084 	movi	r6,2
    40ec:	dfc00217 	ldw	ra,8(sp)
    40f0:	dc400117 	ldw	r17,4(sp)
    40f4:	dc000017 	ldw	r16,0(sp)
    40f8:	dec00304 	addi	sp,sp,12
    40fc:	0003ff41 	jmpi	3ff4 <std>

00004100 <__fp_lock>:
    4100:	0005883a 	mov	r2,zero
    4104:	f800283a 	ret

00004108 <__fp_unlock>:
    4108:	0005883a 	mov	r2,zero
    410c:	f800283a 	ret

00004110 <__fp_unlock_all>:
    4110:	00800074 	movhi	r2,1
    4114:	10876704 	addi	r2,r2,7580
    4118:	11000017 	ldw	r4,0(r2)
    411c:	01400034 	movhi	r5,0
    4120:	29504204 	addi	r5,r5,16648
    4124:	0004c8c1 	jmpi	4c8c <_fwalk>

00004128 <__fp_lock_all>:
    4128:	00800074 	movhi	r2,1
    412c:	10876704 	addi	r2,r2,7580
    4130:	11000017 	ldw	r4,0(r2)
    4134:	01400034 	movhi	r5,0
    4138:	29504004 	addi	r5,r5,16640
    413c:	0004c8c1 	jmpi	4c8c <_fwalk>

00004140 <_cleanup_r>:
    4140:	01400034 	movhi	r5,0
    4144:	295d8004 	addi	r5,r5,30208
    4148:	0004c8c1 	jmpi	4c8c <_fwalk>

0000414c <_cleanup>:
    414c:	00800074 	movhi	r2,1
    4150:	10876804 	addi	r2,r2,7584
    4154:	11000017 	ldw	r4,0(r2)
    4158:	00041401 	jmpi	4140 <_cleanup_r>

0000415c <__sfmoreglue>:
    415c:	defffc04 	addi	sp,sp,-16
    4160:	dc000015 	stw	r16,0(sp)
    4164:	2821883a 	mov	r16,r5
    4168:	dc400115 	stw	r17,4(sp)
    416c:	01401704 	movi	r5,92
    4170:	2023883a 	mov	r17,r4
    4174:	8009883a 	mov	r4,r16
    4178:	dfc00315 	stw	ra,12(sp)
    417c:	dcc00215 	stw	r19,8(sp)
    4180:	000972c0 	call	972c <__mulsi3>
    4184:	11400304 	addi	r5,r2,12
    4188:	8809883a 	mov	r4,r17
    418c:	1027883a 	mov	r19,r2
    4190:	0004f9c0 	call	4f9c <_malloc_r>
    4194:	10c00304 	addi	r3,r2,12
    4198:	1023883a 	mov	r17,r2
    419c:	1809883a 	mov	r4,r3
    41a0:	980d883a 	mov	r6,r19
    41a4:	000b883a 	mov	r5,zero
    41a8:	10000b26 	beq	r2,zero,41d8 <__sfmoreglue+0x7c>
    41ac:	14000115 	stw	r16,4(r2)
    41b0:	10c00215 	stw	r3,8(r2)
    41b4:	10000015 	stw	zero,0(r2)
    41b8:	00059400 	call	5940 <memset>
    41bc:	8805883a 	mov	r2,r17
    41c0:	dfc00317 	ldw	ra,12(sp)
    41c4:	dcc00217 	ldw	r19,8(sp)
    41c8:	dc400117 	ldw	r17,4(sp)
    41cc:	dc000017 	ldw	r16,0(sp)
    41d0:	dec00404 	addi	sp,sp,16
    41d4:	f800283a 	ret
    41d8:	0023883a 	mov	r17,zero
    41dc:	8805883a 	mov	r2,r17
    41e0:	dfc00317 	ldw	ra,12(sp)
    41e4:	dcc00217 	ldw	r19,8(sp)
    41e8:	dc400117 	ldw	r17,4(sp)
    41ec:	dc000017 	ldw	r16,0(sp)
    41f0:	dec00404 	addi	sp,sp,16
    41f4:	f800283a 	ret

000041f8 <__sfp>:
    41f8:	defffd04 	addi	sp,sp,-12
    41fc:	00800074 	movhi	r2,1
    4200:	10876804 	addi	r2,r2,7584
    4204:	dc000015 	stw	r16,0(sp)
    4208:	14000017 	ldw	r16,0(r2)
    420c:	dc400115 	stw	r17,4(sp)
    4210:	dfc00215 	stw	ra,8(sp)
    4214:	80800e17 	ldw	r2,56(r16)
    4218:	2023883a 	mov	r17,r4
    421c:	10002626 	beq	r2,zero,42b8 <__sfp+0xc0>
    4220:	8400b804 	addi	r16,r16,736
    4224:	80800117 	ldw	r2,4(r16)
    4228:	81000217 	ldw	r4,8(r16)
    422c:	10ffffc4 	addi	r3,r2,-1
    4230:	18000916 	blt	r3,zero,4258 <__sfp+0x60>
    4234:	2080030f 	ldh	r2,12(r4)
    4238:	10000b26 	beq	r2,zero,4268 <__sfp+0x70>
    423c:	017fffc4 	movi	r5,-1
    4240:	00000206 	br	424c <__sfp+0x54>
    4244:	2080030f 	ldh	r2,12(r4)
    4248:	10000726 	beq	r2,zero,4268 <__sfp+0x70>
    424c:	18ffffc4 	addi	r3,r3,-1
    4250:	21001704 	addi	r4,r4,92
    4254:	197ffb1e 	bne	r3,r5,4244 <__sfp+0x4c>
    4258:	80800017 	ldw	r2,0(r16)
    425c:	10001926 	beq	r2,zero,42c4 <__sfp+0xcc>
    4260:	1021883a 	mov	r16,r2
    4264:	003fef06 	br	4224 <__sfp+0x2c>
    4268:	00bfffc4 	movi	r2,-1
    426c:	00c00044 	movi	r3,1
    4270:	2080038d 	sth	r2,14(r4)
    4274:	20c0030d 	sth	r3,12(r4)
    4278:	20000015 	stw	zero,0(r4)
    427c:	20000215 	stw	zero,8(r4)
    4280:	20000115 	stw	zero,4(r4)
    4284:	20000415 	stw	zero,16(r4)
    4288:	20000515 	stw	zero,20(r4)
    428c:	20000615 	stw	zero,24(r4)
    4290:	20000c15 	stw	zero,48(r4)
    4294:	20000d15 	stw	zero,52(r4)
    4298:	20001115 	stw	zero,68(r4)
    429c:	20001215 	stw	zero,72(r4)
    42a0:	2005883a 	mov	r2,r4
    42a4:	dfc00217 	ldw	ra,8(sp)
    42a8:	dc400117 	ldw	r17,4(sp)
    42ac:	dc000017 	ldw	r16,0(sp)
    42b0:	dec00304 	addi	sp,sp,12
    42b4:	f800283a 	ret
    42b8:	8009883a 	mov	r4,r16
    42bc:	000405c0 	call	405c <__sinit>
    42c0:	003fd706 	br	4220 <__sfp+0x28>
    42c4:	8809883a 	mov	r4,r17
    42c8:	01400104 	movi	r5,4
    42cc:	000415c0 	call	415c <__sfmoreglue>
    42d0:	80800015 	stw	r2,0(r16)
    42d4:	103fe21e 	bne	r2,zero,4260 <__sfp+0x68>
    42d8:	00800304 	movi	r2,12
    42dc:	0009883a 	mov	r4,zero
    42e0:	88800015 	stw	r2,0(r17)
    42e4:	003fee06 	br	42a0 <__sfp+0xa8>

000042e8 <_malloc_trim_r>:
    42e8:	defffb04 	addi	sp,sp,-20
    42ec:	dcc00315 	stw	r19,12(sp)
    42f0:	04c00074 	movhi	r19,1
    42f4:	9cc1e304 	addi	r19,r19,1932
    42f8:	dc800215 	stw	r18,8(sp)
    42fc:	dc400115 	stw	r17,4(sp)
    4300:	dc000015 	stw	r16,0(sp)
    4304:	2823883a 	mov	r17,r5
    4308:	2025883a 	mov	r18,r4
    430c:	dfc00415 	stw	ra,16(sp)
    4310:	000a4b00 	call	a4b0 <__malloc_lock>
    4314:	98800217 	ldw	r2,8(r19)
    4318:	9009883a 	mov	r4,r18
    431c:	000b883a 	mov	r5,zero
    4320:	10c00117 	ldw	r3,4(r2)
    4324:	00bfff04 	movi	r2,-4
    4328:	18a0703a 	and	r16,r3,r2
    432c:	8463c83a 	sub	r17,r16,r17
    4330:	8c43fbc4 	addi	r17,r17,4079
    4334:	8822d33a 	srli	r17,r17,12
    4338:	0083ffc4 	movi	r2,4095
    433c:	8c7fffc4 	addi	r17,r17,-1
    4340:	8822933a 	slli	r17,r17,12
    4344:	1440060e 	bge	r2,r17,4360 <_malloc_trim_r+0x78>
    4348:	00070c80 	call	70c8 <_sbrk_r>
    434c:	98c00217 	ldw	r3,8(r19)
    4350:	9009883a 	mov	r4,r18
    4354:	044bc83a 	sub	r5,zero,r17
    4358:	80c7883a 	add	r3,r16,r3
    435c:	10c00926 	beq	r2,r3,4384 <_malloc_trim_r+0x9c>
    4360:	000a4d00 	call	a4d0 <__malloc_unlock>
    4364:	0005883a 	mov	r2,zero
    4368:	dfc00417 	ldw	ra,16(sp)
    436c:	dcc00317 	ldw	r19,12(sp)
    4370:	dc800217 	ldw	r18,8(sp)
    4374:	dc400117 	ldw	r17,4(sp)
    4378:	dc000017 	ldw	r16,0(sp)
    437c:	dec00504 	addi	sp,sp,20
    4380:	f800283a 	ret
    4384:	9009883a 	mov	r4,r18
    4388:	00070c80 	call	70c8 <_sbrk_r>
    438c:	844dc83a 	sub	r6,r16,r17
    4390:	00ffffc4 	movi	r3,-1
    4394:	9009883a 	mov	r4,r18
    4398:	000b883a 	mov	r5,zero
    439c:	01c00074 	movhi	r7,1
    43a0:	39c78904 	addi	r7,r7,7716
    43a4:	31800054 	ori	r6,r6,1
    43a8:	10c00926 	beq	r2,r3,43d0 <_malloc_trim_r+0xe8>
    43ac:	38800017 	ldw	r2,0(r7)
    43b0:	98c00217 	ldw	r3,8(r19)
    43b4:	9009883a 	mov	r4,r18
    43b8:	1445c83a 	sub	r2,r2,r17
    43bc:	38800015 	stw	r2,0(r7)
    43c0:	19800115 	stw	r6,4(r3)
    43c4:	000a4d00 	call	a4d0 <__malloc_unlock>
    43c8:	00800044 	movi	r2,1
    43cc:	003fe606 	br	4368 <_malloc_trim_r+0x80>
    43d0:	00070c80 	call	70c8 <_sbrk_r>
    43d4:	99800217 	ldw	r6,8(r19)
    43d8:	100f883a 	mov	r7,r2
    43dc:	9009883a 	mov	r4,r18
    43e0:	1187c83a 	sub	r3,r2,r6
    43e4:	008003c4 	movi	r2,15
    43e8:	19400054 	ori	r5,r3,1
    43ec:	10ffdc0e 	bge	r2,r3,4360 <_malloc_trim_r+0x78>
    43f0:	00800074 	movhi	r2,1
    43f4:	10876c04 	addi	r2,r2,7600
    43f8:	10c00017 	ldw	r3,0(r2)
    43fc:	00800074 	movhi	r2,1
    4400:	10878904 	addi	r2,r2,7716
    4404:	31400115 	stw	r5,4(r6)
    4408:	38c7c83a 	sub	r3,r7,r3
    440c:	10c00015 	stw	r3,0(r2)
    4410:	003fd306 	br	4360 <_malloc_trim_r+0x78>

00004414 <_free_r>:
    4414:	defffd04 	addi	sp,sp,-12
    4418:	dc400115 	stw	r17,4(sp)
    441c:	dc000015 	stw	r16,0(sp)
    4420:	dfc00215 	stw	ra,8(sp)
    4424:	2821883a 	mov	r16,r5
    4428:	2023883a 	mov	r17,r4
    442c:	28005a26 	beq	r5,zero,4598 <_free_r+0x184>
    4430:	000a4b00 	call	a4b0 <__malloc_lock>
    4434:	823ffe04 	addi	r8,r16,-8
    4438:	41400117 	ldw	r5,4(r8)
    443c:	00bfff84 	movi	r2,-2
    4440:	02800074 	movhi	r10,1
    4444:	5281e304 	addi	r10,r10,1932
    4448:	288e703a 	and	r7,r5,r2
    444c:	41cd883a 	add	r6,r8,r7
    4450:	30c00117 	ldw	r3,4(r6)
    4454:	51000217 	ldw	r4,8(r10)
    4458:	00bfff04 	movi	r2,-4
    445c:	1892703a 	and	r9,r3,r2
    4460:	5017883a 	mov	r11,r10
    4464:	31006726 	beq	r6,r4,4604 <_free_r+0x1f0>
    4468:	2880004c 	andi	r2,r5,1
    446c:	1005003a 	cmpeq	r2,r2,zero
    4470:	32400115 	stw	r9,4(r6)
    4474:	10001a1e 	bne	r2,zero,44e0 <_free_r+0xcc>
    4478:	000b883a 	mov	r5,zero
    447c:	3247883a 	add	r3,r6,r9
    4480:	18800117 	ldw	r2,4(r3)
    4484:	1080004c 	andi	r2,r2,1
    4488:	1000231e 	bne	r2,zero,4518 <_free_r+0x104>
    448c:	280ac03a 	cmpne	r5,r5,zero
    4490:	3a4f883a 	add	r7,r7,r9
    4494:	2800451e 	bne	r5,zero,45ac <_free_r+0x198>
    4498:	31000217 	ldw	r4,8(r6)
    449c:	00800074 	movhi	r2,1
    44a0:	1081e504 	addi	r2,r2,1940
    44a4:	20807b26 	beq	r4,r2,4694 <_free_r+0x280>
    44a8:	30800317 	ldw	r2,12(r6)
    44ac:	3a07883a 	add	r3,r7,r8
    44b0:	19c00015 	stw	r7,0(r3)
    44b4:	11000215 	stw	r4,8(r2)
    44b8:	20800315 	stw	r2,12(r4)
    44bc:	38800054 	ori	r2,r7,1
    44c0:	40800115 	stw	r2,4(r8)
    44c4:	28001a26 	beq	r5,zero,4530 <_free_r+0x11c>
    44c8:	8809883a 	mov	r4,r17
    44cc:	dfc00217 	ldw	ra,8(sp)
    44d0:	dc400117 	ldw	r17,4(sp)
    44d4:	dc000017 	ldw	r16,0(sp)
    44d8:	dec00304 	addi	sp,sp,12
    44dc:	000a4d01 	jmpi	a4d0 <__malloc_unlock>
    44e0:	80bffe17 	ldw	r2,-8(r16)
    44e4:	50c00204 	addi	r3,r10,8
    44e8:	4091c83a 	sub	r8,r8,r2
    44ec:	41000217 	ldw	r4,8(r8)
    44f0:	388f883a 	add	r7,r7,r2
    44f4:	20c06126 	beq	r4,r3,467c <_free_r+0x268>
    44f8:	40800317 	ldw	r2,12(r8)
    44fc:	3247883a 	add	r3,r6,r9
    4500:	000b883a 	mov	r5,zero
    4504:	11000215 	stw	r4,8(r2)
    4508:	20800315 	stw	r2,12(r4)
    450c:	18800117 	ldw	r2,4(r3)
    4510:	1080004c 	andi	r2,r2,1
    4514:	103fdd26 	beq	r2,zero,448c <_free_r+0x78>
    4518:	38800054 	ori	r2,r7,1
    451c:	3a07883a 	add	r3,r7,r8
    4520:	280ac03a 	cmpne	r5,r5,zero
    4524:	40800115 	stw	r2,4(r8)
    4528:	19c00015 	stw	r7,0(r3)
    452c:	283fe61e 	bne	r5,zero,44c8 <_free_r+0xb4>
    4530:	00807fc4 	movi	r2,511
    4534:	11c01f2e 	bgeu	r2,r7,45b4 <_free_r+0x1a0>
    4538:	3806d27a 	srli	r3,r7,9
    453c:	1800481e 	bne	r3,zero,4660 <_free_r+0x24c>
    4540:	3804d0fa 	srli	r2,r7,3
    4544:	100690fa 	slli	r3,r2,3
    4548:	1acd883a 	add	r6,r3,r11
    454c:	31400217 	ldw	r5,8(r6)
    4550:	31405926 	beq	r6,r5,46b8 <_free_r+0x2a4>
    4554:	28800117 	ldw	r2,4(r5)
    4558:	00ffff04 	movi	r3,-4
    455c:	10c4703a 	and	r2,r2,r3
    4560:	3880022e 	bgeu	r7,r2,456c <_free_r+0x158>
    4564:	29400217 	ldw	r5,8(r5)
    4568:	317ffa1e 	bne	r6,r5,4554 <_free_r+0x140>
    456c:	29800317 	ldw	r6,12(r5)
    4570:	41800315 	stw	r6,12(r8)
    4574:	41400215 	stw	r5,8(r8)
    4578:	8809883a 	mov	r4,r17
    457c:	2a000315 	stw	r8,12(r5)
    4580:	32000215 	stw	r8,8(r6)
    4584:	dfc00217 	ldw	ra,8(sp)
    4588:	dc400117 	ldw	r17,4(sp)
    458c:	dc000017 	ldw	r16,0(sp)
    4590:	dec00304 	addi	sp,sp,12
    4594:	000a4d01 	jmpi	a4d0 <__malloc_unlock>
    4598:	dfc00217 	ldw	ra,8(sp)
    459c:	dc400117 	ldw	r17,4(sp)
    45a0:	dc000017 	ldw	r16,0(sp)
    45a4:	dec00304 	addi	sp,sp,12
    45a8:	f800283a 	ret
    45ac:	31000217 	ldw	r4,8(r6)
    45b0:	003fbd06 	br	44a8 <_free_r+0x94>
    45b4:	3806d0fa 	srli	r3,r7,3
    45b8:	00800044 	movi	r2,1
    45bc:	51400117 	ldw	r5,4(r10)
    45c0:	180890fa 	slli	r4,r3,3
    45c4:	1807d0ba 	srai	r3,r3,2
    45c8:	22c9883a 	add	r4,r4,r11
    45cc:	21800217 	ldw	r6,8(r4)
    45d0:	10c4983a 	sll	r2,r2,r3
    45d4:	41000315 	stw	r4,12(r8)
    45d8:	41800215 	stw	r6,8(r8)
    45dc:	288ab03a 	or	r5,r5,r2
    45e0:	22000215 	stw	r8,8(r4)
    45e4:	8809883a 	mov	r4,r17
    45e8:	51400115 	stw	r5,4(r10)
    45ec:	32000315 	stw	r8,12(r6)
    45f0:	dfc00217 	ldw	ra,8(sp)
    45f4:	dc400117 	ldw	r17,4(sp)
    45f8:	dc000017 	ldw	r16,0(sp)
    45fc:	dec00304 	addi	sp,sp,12
    4600:	000a4d01 	jmpi	a4d0 <__malloc_unlock>
    4604:	2880004c 	andi	r2,r5,1
    4608:	3a4d883a 	add	r6,r7,r9
    460c:	1000071e 	bne	r2,zero,462c <_free_r+0x218>
    4610:	80bffe17 	ldw	r2,-8(r16)
    4614:	4091c83a 	sub	r8,r8,r2
    4618:	41000317 	ldw	r4,12(r8)
    461c:	40c00217 	ldw	r3,8(r8)
    4620:	308d883a 	add	r6,r6,r2
    4624:	20c00215 	stw	r3,8(r4)
    4628:	19000315 	stw	r4,12(r3)
    462c:	00800074 	movhi	r2,1
    4630:	10876b04 	addi	r2,r2,7596
    4634:	11000017 	ldw	r4,0(r2)
    4638:	30c00054 	ori	r3,r6,1
    463c:	52000215 	stw	r8,8(r10)
    4640:	40c00115 	stw	r3,4(r8)
    4644:	313fa036 	bltu	r6,r4,44c8 <_free_r+0xb4>
    4648:	00800074 	movhi	r2,1
    464c:	10877f04 	addi	r2,r2,7676
    4650:	11400017 	ldw	r5,0(r2)
    4654:	8809883a 	mov	r4,r17
    4658:	00042e80 	call	42e8 <_malloc_trim_r>
    465c:	003f9a06 	br	44c8 <_free_r+0xb4>
    4660:	00800104 	movi	r2,4
    4664:	10c0072e 	bgeu	r2,r3,4684 <_free_r+0x270>
    4668:	00800504 	movi	r2,20
    466c:	10c01936 	bltu	r2,r3,46d4 <_free_r+0x2c0>
    4670:	188016c4 	addi	r2,r3,91
    4674:	100690fa 	slli	r3,r2,3
    4678:	003fb306 	br	4548 <_free_r+0x134>
    467c:	01400044 	movi	r5,1
    4680:	003f7e06 	br	447c <_free_r+0x68>
    4684:	3804d1ba 	srli	r2,r7,6
    4688:	10800e04 	addi	r2,r2,56
    468c:	100690fa 	slli	r3,r2,3
    4690:	003fad06 	br	4548 <_free_r+0x134>
    4694:	22000315 	stw	r8,12(r4)
    4698:	22000215 	stw	r8,8(r4)
    469c:	3a05883a 	add	r2,r7,r8
    46a0:	38c00054 	ori	r3,r7,1
    46a4:	11c00015 	stw	r7,0(r2)
    46a8:	41000215 	stw	r4,8(r8)
    46ac:	40c00115 	stw	r3,4(r8)
    46b0:	41000315 	stw	r4,12(r8)
    46b4:	003f8406 	br	44c8 <_free_r+0xb4>
    46b8:	1005d0ba 	srai	r2,r2,2
    46bc:	00c00044 	movi	r3,1
    46c0:	51000117 	ldw	r4,4(r10)
    46c4:	1886983a 	sll	r3,r3,r2
    46c8:	20c8b03a 	or	r4,r4,r3
    46cc:	51000115 	stw	r4,4(r10)
    46d0:	003fa706 	br	4570 <_free_r+0x15c>
    46d4:	00801504 	movi	r2,84
    46d8:	10c00436 	bltu	r2,r3,46ec <_free_r+0x2d8>
    46dc:	3804d33a 	srli	r2,r7,12
    46e0:	10801b84 	addi	r2,r2,110
    46e4:	100690fa 	slli	r3,r2,3
    46e8:	003f9706 	br	4548 <_free_r+0x134>
    46ec:	00805504 	movi	r2,340
    46f0:	10c00436 	bltu	r2,r3,4704 <_free_r+0x2f0>
    46f4:	3804d3fa 	srli	r2,r7,15
    46f8:	10801dc4 	addi	r2,r2,119
    46fc:	100690fa 	slli	r3,r2,3
    4700:	003f9106 	br	4548 <_free_r+0x134>
    4704:	00815504 	movi	r2,1364
    4708:	10c0032e 	bgeu	r2,r3,4718 <_free_r+0x304>
    470c:	00801f84 	movi	r2,126
    4710:	00c0fc04 	movi	r3,1008
    4714:	003f8c06 	br	4548 <_free_r+0x134>
    4718:	3804d4ba 	srli	r2,r7,18
    471c:	10801f04 	addi	r2,r2,124
    4720:	100690fa 	slli	r3,r2,3
    4724:	003f8806 	br	4548 <_free_r+0x134>

00004728 <__sfvwrite_r>:
    4728:	30800217 	ldw	r2,8(r6)
    472c:	defff504 	addi	sp,sp,-44
    4730:	df000915 	stw	fp,36(sp)
    4734:	dd800715 	stw	r22,28(sp)
    4738:	dc800315 	stw	r18,12(sp)
    473c:	dfc00a15 	stw	ra,40(sp)
    4740:	ddc00815 	stw	r23,32(sp)
    4744:	dd400615 	stw	r21,24(sp)
    4748:	dd000515 	stw	r20,20(sp)
    474c:	dcc00415 	stw	r19,16(sp)
    4750:	dc400215 	stw	r17,8(sp)
    4754:	dc000115 	stw	r16,4(sp)
    4758:	302d883a 	mov	r22,r6
    475c:	2039883a 	mov	fp,r4
    4760:	2825883a 	mov	r18,r5
    4764:	10001c26 	beq	r2,zero,47d8 <__sfvwrite_r+0xb0>
    4768:	29c0030b 	ldhu	r7,12(r5)
    476c:	3880020c 	andi	r2,r7,8
    4770:	10002726 	beq	r2,zero,4810 <__sfvwrite_r+0xe8>
    4774:	28800417 	ldw	r2,16(r5)
    4778:	10002526 	beq	r2,zero,4810 <__sfvwrite_r+0xe8>
    477c:	3880008c 	andi	r2,r7,2
    4780:	b5400017 	ldw	r21,0(r22)
    4784:	10002826 	beq	r2,zero,4828 <__sfvwrite_r+0x100>
    4788:	0021883a 	mov	r16,zero
    478c:	0023883a 	mov	r17,zero
    4790:	880d883a 	mov	r6,r17
    4794:	e009883a 	mov	r4,fp
    4798:	00810004 	movi	r2,1024
    479c:	80006e26 	beq	r16,zero,4958 <__sfvwrite_r+0x230>
    47a0:	800f883a 	mov	r7,r16
    47a4:	91400717 	ldw	r5,28(r18)
    47a8:	1400012e 	bgeu	r2,r16,47b0 <__sfvwrite_r+0x88>
    47ac:	100f883a 	mov	r7,r2
    47b0:	90c00917 	ldw	r3,36(r18)
    47b4:	183ee83a 	callr	r3
    47b8:	1007883a 	mov	r3,r2
    47bc:	80a1c83a 	sub	r16,r16,r2
    47c0:	88a3883a 	add	r17,r17,r2
    47c4:	00806d0e 	bge	zero,r2,497c <__sfvwrite_r+0x254>
    47c8:	b0800217 	ldw	r2,8(r22)
    47cc:	10c5c83a 	sub	r2,r2,r3
    47d0:	b0800215 	stw	r2,8(r22)
    47d4:	103fee1e 	bne	r2,zero,4790 <__sfvwrite_r+0x68>
    47d8:	0009883a 	mov	r4,zero
    47dc:	2005883a 	mov	r2,r4
    47e0:	dfc00a17 	ldw	ra,40(sp)
    47e4:	df000917 	ldw	fp,36(sp)
    47e8:	ddc00817 	ldw	r23,32(sp)
    47ec:	dd800717 	ldw	r22,28(sp)
    47f0:	dd400617 	ldw	r21,24(sp)
    47f4:	dd000517 	ldw	r20,20(sp)
    47f8:	dcc00417 	ldw	r19,16(sp)
    47fc:	dc800317 	ldw	r18,12(sp)
    4800:	dc400217 	ldw	r17,8(sp)
    4804:	dc000117 	ldw	r16,4(sp)
    4808:	dec00b04 	addi	sp,sp,44
    480c:	f800283a 	ret
    4810:	00024900 	call	2490 <__swsetup_r>
    4814:	1000e41e 	bne	r2,zero,4ba8 <__sfvwrite_r+0x480>
    4818:	91c0030b 	ldhu	r7,12(r18)
    481c:	b5400017 	ldw	r21,0(r22)
    4820:	3880008c 	andi	r2,r7,2
    4824:	103fd81e 	bne	r2,zero,4788 <__sfvwrite_r+0x60>
    4828:	3880004c 	andi	r2,r7,1
    482c:	1005003a 	cmpeq	r2,r2,zero
    4830:	10005726 	beq	r2,zero,4990 <__sfvwrite_r+0x268>
    4834:	0029883a 	mov	r20,zero
    4838:	002f883a 	mov	r23,zero
    483c:	a0004226 	beq	r20,zero,4948 <__sfvwrite_r+0x220>
    4840:	3880800c 	andi	r2,r7,512
    4844:	94000217 	ldw	r16,8(r18)
    4848:	10008b26 	beq	r2,zero,4a78 <__sfvwrite_r+0x350>
    484c:	800d883a 	mov	r6,r16
    4850:	a400a536 	bltu	r20,r16,4ae8 <__sfvwrite_r+0x3c0>
    4854:	3881200c 	andi	r2,r7,1152
    4858:	10002726 	beq	r2,zero,48f8 <__sfvwrite_r+0x1d0>
    485c:	90800517 	ldw	r2,20(r18)
    4860:	92000417 	ldw	r8,16(r18)
    4864:	91400017 	ldw	r5,0(r18)
    4868:	1087883a 	add	r3,r2,r2
    486c:	1887883a 	add	r3,r3,r2
    4870:	1808d7fa 	srli	r4,r3,31
    4874:	2a21c83a 	sub	r16,r5,r8
    4878:	80800044 	addi	r2,r16,1
    487c:	20c9883a 	add	r4,r4,r3
    4880:	2027d07a 	srai	r19,r4,1
    4884:	a085883a 	add	r2,r20,r2
    4888:	980d883a 	mov	r6,r19
    488c:	9880022e 	bgeu	r19,r2,4898 <__sfvwrite_r+0x170>
    4890:	1027883a 	mov	r19,r2
    4894:	100d883a 	mov	r6,r2
    4898:	3881000c 	andi	r2,r7,1024
    489c:	1000b826 	beq	r2,zero,4b80 <__sfvwrite_r+0x458>
    48a0:	300b883a 	mov	r5,r6
    48a4:	e009883a 	mov	r4,fp
    48a8:	0004f9c0 	call	4f9c <_malloc_r>
    48ac:	10003126 	beq	r2,zero,4974 <__sfvwrite_r+0x24c>
    48b0:	91400417 	ldw	r5,16(r18)
    48b4:	1009883a 	mov	r4,r2
    48b8:	800d883a 	mov	r6,r16
    48bc:	1023883a 	mov	r17,r2
    48c0:	00057c00 	call	57c0 <memcpy>
    48c4:	90c0030b 	ldhu	r3,12(r18)
    48c8:	00beffc4 	movi	r2,-1025
    48cc:	1886703a 	and	r3,r3,r2
    48d0:	18c02014 	ori	r3,r3,128
    48d4:	90c0030d 	sth	r3,12(r18)
    48d8:	9c07c83a 	sub	r3,r19,r16
    48dc:	8c05883a 	add	r2,r17,r16
    48e0:	a00d883a 	mov	r6,r20
    48e4:	a021883a 	mov	r16,r20
    48e8:	90800015 	stw	r2,0(r18)
    48ec:	90c00215 	stw	r3,8(r18)
    48f0:	94400415 	stw	r17,16(r18)
    48f4:	94c00515 	stw	r19,20(r18)
    48f8:	91000017 	ldw	r4,0(r18)
    48fc:	b80b883a 	mov	r5,r23
    4900:	a023883a 	mov	r17,r20
    4904:	00058600 	call	5860 <memmove>
    4908:	90c00217 	ldw	r3,8(r18)
    490c:	90800017 	ldw	r2,0(r18)
    4910:	a027883a 	mov	r19,r20
    4914:	1c07c83a 	sub	r3,r3,r16
    4918:	1405883a 	add	r2,r2,r16
    491c:	90c00215 	stw	r3,8(r18)
    4920:	a021883a 	mov	r16,r20
    4924:	90800015 	stw	r2,0(r18)
    4928:	b0800217 	ldw	r2,8(r22)
    492c:	1405c83a 	sub	r2,r2,r16
    4930:	b0800215 	stw	r2,8(r22)
    4934:	103fa826 	beq	r2,zero,47d8 <__sfvwrite_r+0xb0>
    4938:	a469c83a 	sub	r20,r20,r17
    493c:	91c0030b 	ldhu	r7,12(r18)
    4940:	bcef883a 	add	r23,r23,r19
    4944:	a03fbe1e 	bne	r20,zero,4840 <__sfvwrite_r+0x118>
    4948:	adc00017 	ldw	r23,0(r21)
    494c:	ad000117 	ldw	r20,4(r21)
    4950:	ad400204 	addi	r21,r21,8
    4954:	003fb906 	br	483c <__sfvwrite_r+0x114>
    4958:	ac400017 	ldw	r17,0(r21)
    495c:	ac000117 	ldw	r16,4(r21)
    4960:	ad400204 	addi	r21,r21,8
    4964:	003f8a06 	br	4790 <__sfvwrite_r+0x68>
    4968:	91400417 	ldw	r5,16(r18)
    496c:	e009883a 	mov	r4,fp
    4970:	00044140 	call	4414 <_free_r>
    4974:	00800304 	movi	r2,12
    4978:	e0800015 	stw	r2,0(fp)
    497c:	9080030b 	ldhu	r2,12(r18)
    4980:	013fffc4 	movi	r4,-1
    4984:	10801014 	ori	r2,r2,64
    4988:	9080030d 	sth	r2,12(r18)
    498c:	003f9306 	br	47dc <__sfvwrite_r+0xb4>
    4990:	0027883a 	mov	r19,zero
    4994:	002f883a 	mov	r23,zero
    4998:	d8000015 	stw	zero,0(sp)
    499c:	0029883a 	mov	r20,zero
    49a0:	98001e26 	beq	r19,zero,4a1c <__sfvwrite_r+0x2f4>
    49a4:	d8c00017 	ldw	r3,0(sp)
    49a8:	1804c03a 	cmpne	r2,r3,zero
    49ac:	10005e26 	beq	r2,zero,4b28 <__sfvwrite_r+0x400>
    49b0:	9821883a 	mov	r16,r19
    49b4:	a4c0012e 	bgeu	r20,r19,49bc <__sfvwrite_r+0x294>
    49b8:	a021883a 	mov	r16,r20
    49bc:	91000017 	ldw	r4,0(r18)
    49c0:	90800417 	ldw	r2,16(r18)
    49c4:	91800217 	ldw	r6,8(r18)
    49c8:	91c00517 	ldw	r7,20(r18)
    49cc:	1100022e 	bgeu	r2,r4,49d8 <__sfvwrite_r+0x2b0>
    49d0:	31e3883a 	add	r17,r6,r7
    49d4:	8c001616 	blt	r17,r16,4a30 <__sfvwrite_r+0x308>
    49d8:	81c03816 	blt	r16,r7,4abc <__sfvwrite_r+0x394>
    49dc:	90c00917 	ldw	r3,36(r18)
    49e0:	91400717 	ldw	r5,28(r18)
    49e4:	e009883a 	mov	r4,fp
    49e8:	b80d883a 	mov	r6,r23
    49ec:	183ee83a 	callr	r3
    49f0:	1023883a 	mov	r17,r2
    49f4:	00bfe10e 	bge	zero,r2,497c <__sfvwrite_r+0x254>
    49f8:	a469c83a 	sub	r20,r20,r17
    49fc:	a0001826 	beq	r20,zero,4a60 <__sfvwrite_r+0x338>
    4a00:	b0800217 	ldw	r2,8(r22)
    4a04:	1445c83a 	sub	r2,r2,r17
    4a08:	b0800215 	stw	r2,8(r22)
    4a0c:	103f7226 	beq	r2,zero,47d8 <__sfvwrite_r+0xb0>
    4a10:	9c67c83a 	sub	r19,r19,r17
    4a14:	bc6f883a 	add	r23,r23,r17
    4a18:	983fe21e 	bne	r19,zero,49a4 <__sfvwrite_r+0x27c>
    4a1c:	adc00017 	ldw	r23,0(r21)
    4a20:	acc00117 	ldw	r19,4(r21)
    4a24:	ad400204 	addi	r21,r21,8
    4a28:	d8000015 	stw	zero,0(sp)
    4a2c:	003fdc06 	br	49a0 <__sfvwrite_r+0x278>
    4a30:	b80b883a 	mov	r5,r23
    4a34:	880d883a 	mov	r6,r17
    4a38:	00058600 	call	5860 <memmove>
    4a3c:	90c00017 	ldw	r3,0(r18)
    4a40:	e009883a 	mov	r4,fp
    4a44:	900b883a 	mov	r5,r18
    4a48:	1c47883a 	add	r3,r3,r17
    4a4c:	90c00015 	stw	r3,0(r18)
    4a50:	0003dc40 	call	3dc4 <_fflush_r>
    4a54:	103fc91e 	bne	r2,zero,497c <__sfvwrite_r+0x254>
    4a58:	a469c83a 	sub	r20,r20,r17
    4a5c:	a03fe81e 	bne	r20,zero,4a00 <__sfvwrite_r+0x2d8>
    4a60:	e009883a 	mov	r4,fp
    4a64:	900b883a 	mov	r5,r18
    4a68:	0003dc40 	call	3dc4 <_fflush_r>
    4a6c:	103fc31e 	bne	r2,zero,497c <__sfvwrite_r+0x254>
    4a70:	d8000015 	stw	zero,0(sp)
    4a74:	003fe206 	br	4a00 <__sfvwrite_r+0x2d8>
    4a78:	91000017 	ldw	r4,0(r18)
    4a7c:	90800417 	ldw	r2,16(r18)
    4a80:	1100022e 	bgeu	r2,r4,4a8c <__sfvwrite_r+0x364>
    4a84:	8023883a 	mov	r17,r16
    4a88:	85003136 	bltu	r16,r20,4b50 <__sfvwrite_r+0x428>
    4a8c:	91c00517 	ldw	r7,20(r18)
    4a90:	a1c01836 	bltu	r20,r7,4af4 <__sfvwrite_r+0x3cc>
    4a94:	90c00917 	ldw	r3,36(r18)
    4a98:	91400717 	ldw	r5,28(r18)
    4a9c:	e009883a 	mov	r4,fp
    4aa0:	b80d883a 	mov	r6,r23
    4aa4:	183ee83a 	callr	r3
    4aa8:	1021883a 	mov	r16,r2
    4aac:	00bfb30e 	bge	zero,r2,497c <__sfvwrite_r+0x254>
    4ab0:	1023883a 	mov	r17,r2
    4ab4:	1027883a 	mov	r19,r2
    4ab8:	003f9b06 	br	4928 <__sfvwrite_r+0x200>
    4abc:	b80b883a 	mov	r5,r23
    4ac0:	800d883a 	mov	r6,r16
    4ac4:	00058600 	call	5860 <memmove>
    4ac8:	90c00217 	ldw	r3,8(r18)
    4acc:	90800017 	ldw	r2,0(r18)
    4ad0:	8023883a 	mov	r17,r16
    4ad4:	1c07c83a 	sub	r3,r3,r16
    4ad8:	1405883a 	add	r2,r2,r16
    4adc:	90c00215 	stw	r3,8(r18)
    4ae0:	90800015 	stw	r2,0(r18)
    4ae4:	003fc406 	br	49f8 <__sfvwrite_r+0x2d0>
    4ae8:	a00d883a 	mov	r6,r20
    4aec:	a021883a 	mov	r16,r20
    4af0:	003f8106 	br	48f8 <__sfvwrite_r+0x1d0>
    4af4:	b80b883a 	mov	r5,r23
    4af8:	a00d883a 	mov	r6,r20
    4afc:	00058600 	call	5860 <memmove>
    4b00:	90c00217 	ldw	r3,8(r18)
    4b04:	90800017 	ldw	r2,0(r18)
    4b08:	a021883a 	mov	r16,r20
    4b0c:	1d07c83a 	sub	r3,r3,r20
    4b10:	1505883a 	add	r2,r2,r20
    4b14:	a023883a 	mov	r17,r20
    4b18:	a027883a 	mov	r19,r20
    4b1c:	90c00215 	stw	r3,8(r18)
    4b20:	90800015 	stw	r2,0(r18)
    4b24:	003f8006 	br	4928 <__sfvwrite_r+0x200>
    4b28:	b809883a 	mov	r4,r23
    4b2c:	01400284 	movi	r5,10
    4b30:	980d883a 	mov	r6,r19
    4b34:	00056dc0 	call	56dc <memchr>
    4b38:	10001726 	beq	r2,zero,4b98 <__sfvwrite_r+0x470>
    4b3c:	15c5c83a 	sub	r2,r2,r23
    4b40:	15000044 	addi	r20,r2,1
    4b44:	00800044 	movi	r2,1
    4b48:	d8800015 	stw	r2,0(sp)
    4b4c:	003f9806 	br	49b0 <__sfvwrite_r+0x288>
    4b50:	b80b883a 	mov	r5,r23
    4b54:	800d883a 	mov	r6,r16
    4b58:	00058600 	call	5860 <memmove>
    4b5c:	90c00017 	ldw	r3,0(r18)
    4b60:	e009883a 	mov	r4,fp
    4b64:	900b883a 	mov	r5,r18
    4b68:	1c07883a 	add	r3,r3,r16
    4b6c:	90c00015 	stw	r3,0(r18)
    4b70:	8027883a 	mov	r19,r16
    4b74:	0003dc40 	call	3dc4 <_fflush_r>
    4b78:	103f6b26 	beq	r2,zero,4928 <__sfvwrite_r+0x200>
    4b7c:	003f7f06 	br	497c <__sfvwrite_r+0x254>
    4b80:	400b883a 	mov	r5,r8
    4b84:	e009883a 	mov	r4,fp
    4b88:	0006a640 	call	6a64 <_realloc_r>
    4b8c:	103f7626 	beq	r2,zero,4968 <__sfvwrite_r+0x240>
    4b90:	1023883a 	mov	r17,r2
    4b94:	003f5006 	br	48d8 <__sfvwrite_r+0x1b0>
    4b98:	00c00044 	movi	r3,1
    4b9c:	9d000044 	addi	r20,r19,1
    4ba0:	d8c00015 	stw	r3,0(sp)
    4ba4:	003f8206 	br	49b0 <__sfvwrite_r+0x288>
    4ba8:	9080030b 	ldhu	r2,12(r18)
    4bac:	00c00244 	movi	r3,9
    4bb0:	013fffc4 	movi	r4,-1
    4bb4:	10801014 	ori	r2,r2,64
    4bb8:	9080030d 	sth	r2,12(r18)
    4bbc:	e0c00015 	stw	r3,0(fp)
    4bc0:	003f0606 	br	47dc <__sfvwrite_r+0xb4>

00004bc4 <_fwalk_reent>:
    4bc4:	defff704 	addi	sp,sp,-36
    4bc8:	dcc00315 	stw	r19,12(sp)
    4bcc:	24c0b804 	addi	r19,r4,736
    4bd0:	dd800615 	stw	r22,24(sp)
    4bd4:	dd400515 	stw	r21,20(sp)
    4bd8:	dfc00815 	stw	ra,32(sp)
    4bdc:	ddc00715 	stw	r23,28(sp)
    4be0:	dd000415 	stw	r20,16(sp)
    4be4:	dc800215 	stw	r18,8(sp)
    4be8:	dc400115 	stw	r17,4(sp)
    4bec:	dc000015 	stw	r16,0(sp)
    4bf0:	202b883a 	mov	r21,r4
    4bf4:	282d883a 	mov	r22,r5
    4bf8:	000404c0 	call	404c <__sfp_lock_acquire>
    4bfc:	98002126 	beq	r19,zero,4c84 <_fwalk_reent+0xc0>
    4c00:	002f883a 	mov	r23,zero
    4c04:	9c800117 	ldw	r18,4(r19)
    4c08:	9c000217 	ldw	r16,8(r19)
    4c0c:	90bfffc4 	addi	r2,r18,-1
    4c10:	10000d16 	blt	r2,zero,4c48 <_fwalk_reent+0x84>
    4c14:	0023883a 	mov	r17,zero
    4c18:	053fffc4 	movi	r20,-1
    4c1c:	8080030f 	ldh	r2,12(r16)
    4c20:	8c400044 	addi	r17,r17,1
    4c24:	10000626 	beq	r2,zero,4c40 <_fwalk_reent+0x7c>
    4c28:	8080038f 	ldh	r2,14(r16)
    4c2c:	800b883a 	mov	r5,r16
    4c30:	a809883a 	mov	r4,r21
    4c34:	15000226 	beq	r2,r20,4c40 <_fwalk_reent+0x7c>
    4c38:	b03ee83a 	callr	r22
    4c3c:	b8aeb03a 	or	r23,r23,r2
    4c40:	84001704 	addi	r16,r16,92
    4c44:	947ff51e 	bne	r18,r17,4c1c <_fwalk_reent+0x58>
    4c48:	9cc00017 	ldw	r19,0(r19)
    4c4c:	983fed1e 	bne	r19,zero,4c04 <_fwalk_reent+0x40>
    4c50:	00040500 	call	4050 <__sfp_lock_release>
    4c54:	b805883a 	mov	r2,r23
    4c58:	dfc00817 	ldw	ra,32(sp)
    4c5c:	ddc00717 	ldw	r23,28(sp)
    4c60:	dd800617 	ldw	r22,24(sp)
    4c64:	dd400517 	ldw	r21,20(sp)
    4c68:	dd000417 	ldw	r20,16(sp)
    4c6c:	dcc00317 	ldw	r19,12(sp)
    4c70:	dc800217 	ldw	r18,8(sp)
    4c74:	dc400117 	ldw	r17,4(sp)
    4c78:	dc000017 	ldw	r16,0(sp)
    4c7c:	dec00904 	addi	sp,sp,36
    4c80:	f800283a 	ret
    4c84:	002f883a 	mov	r23,zero
    4c88:	003ff106 	br	4c50 <_fwalk_reent+0x8c>

00004c8c <_fwalk>:
    4c8c:	defff804 	addi	sp,sp,-32
    4c90:	dcc00315 	stw	r19,12(sp)
    4c94:	24c0b804 	addi	r19,r4,736
    4c98:	dd400515 	stw	r21,20(sp)
    4c9c:	dfc00715 	stw	ra,28(sp)
    4ca0:	dd800615 	stw	r22,24(sp)
    4ca4:	dd000415 	stw	r20,16(sp)
    4ca8:	dc800215 	stw	r18,8(sp)
    4cac:	dc400115 	stw	r17,4(sp)
    4cb0:	dc000015 	stw	r16,0(sp)
    4cb4:	282b883a 	mov	r21,r5
    4cb8:	000404c0 	call	404c <__sfp_lock_acquire>
    4cbc:	98001f26 	beq	r19,zero,4d3c <_fwalk+0xb0>
    4cc0:	002d883a 	mov	r22,zero
    4cc4:	9c800117 	ldw	r18,4(r19)
    4cc8:	9c000217 	ldw	r16,8(r19)
    4ccc:	90bfffc4 	addi	r2,r18,-1
    4cd0:	10000c16 	blt	r2,zero,4d04 <_fwalk+0x78>
    4cd4:	0023883a 	mov	r17,zero
    4cd8:	053fffc4 	movi	r20,-1
    4cdc:	8080030f 	ldh	r2,12(r16)
    4ce0:	8c400044 	addi	r17,r17,1
    4ce4:	10000526 	beq	r2,zero,4cfc <_fwalk+0x70>
    4ce8:	8080038f 	ldh	r2,14(r16)
    4cec:	8009883a 	mov	r4,r16
    4cf0:	15000226 	beq	r2,r20,4cfc <_fwalk+0x70>
    4cf4:	a83ee83a 	callr	r21
    4cf8:	b0acb03a 	or	r22,r22,r2
    4cfc:	84001704 	addi	r16,r16,92
    4d00:	947ff61e 	bne	r18,r17,4cdc <_fwalk+0x50>
    4d04:	9cc00017 	ldw	r19,0(r19)
    4d08:	983fee1e 	bne	r19,zero,4cc4 <_fwalk+0x38>
    4d0c:	00040500 	call	4050 <__sfp_lock_release>
    4d10:	b005883a 	mov	r2,r22
    4d14:	dfc00717 	ldw	ra,28(sp)
    4d18:	dd800617 	ldw	r22,24(sp)
    4d1c:	dd400517 	ldw	r21,20(sp)
    4d20:	dd000417 	ldw	r20,16(sp)
    4d24:	dcc00317 	ldw	r19,12(sp)
    4d28:	dc800217 	ldw	r18,8(sp)
    4d2c:	dc400117 	ldw	r17,4(sp)
    4d30:	dc000017 	ldw	r16,0(sp)
    4d34:	dec00804 	addi	sp,sp,32
    4d38:	f800283a 	ret
    4d3c:	002d883a 	mov	r22,zero
    4d40:	003ff206 	br	4d0c <_fwalk+0x80>

00004d44 <__locale_charset>:
    4d44:	d0a00317 	ldw	r2,-32756(gp)
    4d48:	f800283a 	ret

00004d4c <_localeconv_r>:
    4d4c:	00800074 	movhi	r2,1
    4d50:	10803904 	addi	r2,r2,228
    4d54:	f800283a 	ret

00004d58 <localeconv>:
    4d58:	00800074 	movhi	r2,1
    4d5c:	10876704 	addi	r2,r2,7580
    4d60:	11000017 	ldw	r4,0(r2)
    4d64:	0004d4c1 	jmpi	4d4c <_localeconv_r>

00004d68 <_setlocale_r>:
    4d68:	defffc04 	addi	sp,sp,-16
    4d6c:	00c00074 	movhi	r3,1
    4d70:	18c03404 	addi	r3,r3,208
    4d74:	dc800215 	stw	r18,8(sp)
    4d78:	dc400115 	stw	r17,4(sp)
    4d7c:	dc000015 	stw	r16,0(sp)
    4d80:	2023883a 	mov	r17,r4
    4d84:	2825883a 	mov	r18,r5
    4d88:	dfc00315 	stw	ra,12(sp)
    4d8c:	3021883a 	mov	r16,r6
    4d90:	3009883a 	mov	r4,r6
    4d94:	180b883a 	mov	r5,r3
    4d98:	30000926 	beq	r6,zero,4dc0 <_setlocale_r+0x58>
    4d9c:	00072840 	call	7284 <strcmp>
    4da0:	8009883a 	mov	r4,r16
    4da4:	01400074 	movhi	r5,1
    4da8:	29401f04 	addi	r5,r5,124
    4dac:	10000b1e 	bne	r2,zero,4ddc <_setlocale_r+0x74>
    4db0:	8c000d15 	stw	r16,52(r17)
    4db4:	8c800c15 	stw	r18,48(r17)
    4db8:	00c00074 	movhi	r3,1
    4dbc:	18c03404 	addi	r3,r3,208
    4dc0:	1805883a 	mov	r2,r3
    4dc4:	dfc00317 	ldw	ra,12(sp)
    4dc8:	dc800217 	ldw	r18,8(sp)
    4dcc:	dc400117 	ldw	r17,4(sp)
    4dd0:	dc000017 	ldw	r16,0(sp)
    4dd4:	dec00404 	addi	sp,sp,16
    4dd8:	f800283a 	ret
    4ddc:	00072840 	call	7284 <strcmp>
    4de0:	0007883a 	mov	r3,zero
    4de4:	103ff226 	beq	r2,zero,4db0 <_setlocale_r+0x48>
    4de8:	003ff506 	br	4dc0 <_setlocale_r+0x58>

00004dec <setlocale>:
    4dec:	01800074 	movhi	r6,1
    4df0:	31876704 	addi	r6,r6,7580
    4df4:	2007883a 	mov	r3,r4
    4df8:	31000017 	ldw	r4,0(r6)
    4dfc:	280d883a 	mov	r6,r5
    4e00:	180b883a 	mov	r5,r3
    4e04:	0004d681 	jmpi	4d68 <_setlocale_r>

00004e08 <__smakebuf_r>:
    4e08:	2880030b 	ldhu	r2,12(r5)
    4e0c:	deffed04 	addi	sp,sp,-76
    4e10:	dc401015 	stw	r17,64(sp)
    4e14:	1080008c 	andi	r2,r2,2
    4e18:	dc000f15 	stw	r16,60(sp)
    4e1c:	dfc01215 	stw	ra,72(sp)
    4e20:	dc801115 	stw	r18,68(sp)
    4e24:	2821883a 	mov	r16,r5
    4e28:	2023883a 	mov	r17,r4
    4e2c:	10000b26 	beq	r2,zero,4e5c <__smakebuf_r+0x54>
    4e30:	28c010c4 	addi	r3,r5,67
    4e34:	00800044 	movi	r2,1
    4e38:	28800515 	stw	r2,20(r5)
    4e3c:	28c00415 	stw	r3,16(r5)
    4e40:	28c00015 	stw	r3,0(r5)
    4e44:	dfc01217 	ldw	ra,72(sp)
    4e48:	dc801117 	ldw	r18,68(sp)
    4e4c:	dc401017 	ldw	r17,64(sp)
    4e50:	dc000f17 	ldw	r16,60(sp)
    4e54:	dec01304 	addi	sp,sp,76
    4e58:	f800283a 	ret
    4e5c:	2940038f 	ldh	r5,14(r5)
    4e60:	28002116 	blt	r5,zero,4ee8 <__smakebuf_r+0xe0>
    4e64:	d80d883a 	mov	r6,sp
    4e68:	00076140 	call	7614 <_fstat_r>
    4e6c:	10001e16 	blt	r2,zero,4ee8 <__smakebuf_r+0xe0>
    4e70:	d8800117 	ldw	r2,4(sp)
    4e74:	00e00014 	movui	r3,32768
    4e78:	113c000c 	andi	r4,r2,61440
    4e7c:	20c03126 	beq	r4,r3,4f44 <__smakebuf_r+0x13c>
    4e80:	8080030b 	ldhu	r2,12(r16)
    4e84:	00c80004 	movi	r3,8192
    4e88:	10820014 	ori	r2,r2,2048
    4e8c:	8080030d 	sth	r2,12(r16)
    4e90:	20c01e26 	beq	r4,r3,4f0c <__smakebuf_r+0x104>
    4e94:	04810004 	movi	r18,1024
    4e98:	8809883a 	mov	r4,r17
    4e9c:	900b883a 	mov	r5,r18
    4ea0:	0004f9c0 	call	4f9c <_malloc_r>
    4ea4:	1009883a 	mov	r4,r2
    4ea8:	10003126 	beq	r2,zero,4f70 <__smakebuf_r+0x168>
    4eac:	80c0030b 	ldhu	r3,12(r16)
    4eb0:	00800034 	movhi	r2,0
    4eb4:	10905004 	addi	r2,r2,16704
    4eb8:	88800f15 	stw	r2,60(r17)
    4ebc:	18c02014 	ori	r3,r3,128
    4ec0:	84800515 	stw	r18,20(r16)
    4ec4:	80c0030d 	sth	r3,12(r16)
    4ec8:	81000415 	stw	r4,16(r16)
    4ecc:	81000015 	stw	r4,0(r16)
    4ed0:	dfc01217 	ldw	ra,72(sp)
    4ed4:	dc801117 	ldw	r18,68(sp)
    4ed8:	dc401017 	ldw	r17,64(sp)
    4edc:	dc000f17 	ldw	r16,60(sp)
    4ee0:	dec01304 	addi	sp,sp,76
    4ee4:	f800283a 	ret
    4ee8:	80c0030b 	ldhu	r3,12(r16)
    4eec:	1880200c 	andi	r2,r3,128
    4ef0:	10000426 	beq	r2,zero,4f04 <__smakebuf_r+0xfc>
    4ef4:	04801004 	movi	r18,64
    4ef8:	18820014 	ori	r2,r3,2048
    4efc:	8080030d 	sth	r2,12(r16)
    4f00:	003fe506 	br	4e98 <__smakebuf_r+0x90>
    4f04:	04810004 	movi	r18,1024
    4f08:	003ffb06 	br	4ef8 <__smakebuf_r+0xf0>
    4f0c:	8140038f 	ldh	r5,14(r16)
    4f10:	8809883a 	mov	r4,r17
    4f14:	00076880 	call	7688 <_isatty_r>
    4f18:	103fde26 	beq	r2,zero,4e94 <__smakebuf_r+0x8c>
    4f1c:	8080030b 	ldhu	r2,12(r16)
    4f20:	80c010c4 	addi	r3,r16,67
    4f24:	04810004 	movi	r18,1024
    4f28:	10800054 	ori	r2,r2,1
    4f2c:	8080030d 	sth	r2,12(r16)
    4f30:	00800044 	movi	r2,1
    4f34:	80c00415 	stw	r3,16(r16)
    4f38:	80800515 	stw	r2,20(r16)
    4f3c:	80c00015 	stw	r3,0(r16)
    4f40:	003fd506 	br	4e98 <__smakebuf_r+0x90>
    4f44:	80c00a17 	ldw	r3,40(r16)
    4f48:	00800034 	movhi	r2,0
    4f4c:	109c5004 	addi	r2,r2,28992
    4f50:	18bfcb1e 	bne	r3,r2,4e80 <__smakebuf_r+0x78>
    4f54:	8080030b 	ldhu	r2,12(r16)
    4f58:	00c10004 	movi	r3,1024
    4f5c:	1825883a 	mov	r18,r3
    4f60:	10c4b03a 	or	r2,r2,r3
    4f64:	8080030d 	sth	r2,12(r16)
    4f68:	80c01315 	stw	r3,76(r16)
    4f6c:	003fca06 	br	4e98 <__smakebuf_r+0x90>
    4f70:	8100030b 	ldhu	r4,12(r16)
    4f74:	2080800c 	andi	r2,r4,512
    4f78:	103fb21e 	bne	r2,zero,4e44 <__smakebuf_r+0x3c>
    4f7c:	80c010c4 	addi	r3,r16,67
    4f80:	21000094 	ori	r4,r4,2
    4f84:	00800044 	movi	r2,1
    4f88:	80800515 	stw	r2,20(r16)
    4f8c:	8100030d 	sth	r4,12(r16)
    4f90:	80c00415 	stw	r3,16(r16)
    4f94:	80c00015 	stw	r3,0(r16)
    4f98:	003faa06 	br	4e44 <__smakebuf_r+0x3c>

00004f9c <_malloc_r>:
    4f9c:	defff604 	addi	sp,sp,-40
    4fa0:	28c002c4 	addi	r3,r5,11
    4fa4:	00800584 	movi	r2,22
    4fa8:	dc800215 	stw	r18,8(sp)
    4fac:	dfc00915 	stw	ra,36(sp)
    4fb0:	df000815 	stw	fp,32(sp)
    4fb4:	ddc00715 	stw	r23,28(sp)
    4fb8:	dd800615 	stw	r22,24(sp)
    4fbc:	dd400515 	stw	r21,20(sp)
    4fc0:	dd000415 	stw	r20,16(sp)
    4fc4:	dcc00315 	stw	r19,12(sp)
    4fc8:	dc400115 	stw	r17,4(sp)
    4fcc:	dc000015 	stw	r16,0(sp)
    4fd0:	2025883a 	mov	r18,r4
    4fd4:	10c01236 	bltu	r2,r3,5020 <_malloc_r+0x84>
    4fd8:	04400404 	movi	r17,16
    4fdc:	8940142e 	bgeu	r17,r5,5030 <_malloc_r+0x94>
    4fe0:	00800304 	movi	r2,12
    4fe4:	0007883a 	mov	r3,zero
    4fe8:	90800015 	stw	r2,0(r18)
    4fec:	1805883a 	mov	r2,r3
    4ff0:	dfc00917 	ldw	ra,36(sp)
    4ff4:	df000817 	ldw	fp,32(sp)
    4ff8:	ddc00717 	ldw	r23,28(sp)
    4ffc:	dd800617 	ldw	r22,24(sp)
    5000:	dd400517 	ldw	r21,20(sp)
    5004:	dd000417 	ldw	r20,16(sp)
    5008:	dcc00317 	ldw	r19,12(sp)
    500c:	dc800217 	ldw	r18,8(sp)
    5010:	dc400117 	ldw	r17,4(sp)
    5014:	dc000017 	ldw	r16,0(sp)
    5018:	dec00a04 	addi	sp,sp,40
    501c:	f800283a 	ret
    5020:	00bffe04 	movi	r2,-8
    5024:	18a2703a 	and	r17,r3,r2
    5028:	883fed16 	blt	r17,zero,4fe0 <_malloc_r+0x44>
    502c:	897fec36 	bltu	r17,r5,4fe0 <_malloc_r+0x44>
    5030:	9009883a 	mov	r4,r18
    5034:	000a4b00 	call	a4b0 <__malloc_lock>
    5038:	00807dc4 	movi	r2,503
    503c:	14402b2e 	bgeu	r2,r17,50ec <_malloc_r+0x150>
    5040:	8806d27a 	srli	r3,r17,9
    5044:	18003f1e 	bne	r3,zero,5144 <_malloc_r+0x1a8>
    5048:	880cd0fa 	srli	r6,r17,3
    504c:	300490fa 	slli	r2,r6,3
    5050:	02c00074 	movhi	r11,1
    5054:	5ac1e304 	addi	r11,r11,1932
    5058:	12cb883a 	add	r5,r2,r11
    505c:	2c000317 	ldw	r16,12(r5)
    5060:	580f883a 	mov	r7,r11
    5064:	2c00041e 	bne	r5,r16,5078 <_malloc_r+0xdc>
    5068:	00000a06 	br	5094 <_malloc_r+0xf8>
    506c:	1800860e 	bge	r3,zero,5288 <_malloc_r+0x2ec>
    5070:	84000317 	ldw	r16,12(r16)
    5074:	2c000726 	beq	r5,r16,5094 <_malloc_r+0xf8>
    5078:	80800117 	ldw	r2,4(r16)
    507c:	00ffff04 	movi	r3,-4
    5080:	10c8703a 	and	r4,r2,r3
    5084:	2447c83a 	sub	r3,r4,r17
    5088:	008003c4 	movi	r2,15
    508c:	10fff70e 	bge	r2,r3,506c <_malloc_r+0xd0>
    5090:	31bfffc4 	addi	r6,r6,-1
    5094:	32400044 	addi	r9,r6,1
    5098:	02800074 	movhi	r10,1
    509c:	5281e504 	addi	r10,r10,1940
    50a0:	54000217 	ldw	r16,8(r10)
    50a4:	8280a026 	beq	r16,r10,5328 <_malloc_r+0x38c>
    50a8:	80800117 	ldw	r2,4(r16)
    50ac:	00ffff04 	movi	r3,-4
    50b0:	10ca703a 	and	r5,r2,r3
    50b4:	2c4dc83a 	sub	r6,r5,r17
    50b8:	008003c4 	movi	r2,15
    50bc:	11808316 	blt	r2,r6,52cc <_malloc_r+0x330>
    50c0:	52800315 	stw	r10,12(r10)
    50c4:	52800215 	stw	r10,8(r10)
    50c8:	30002916 	blt	r6,zero,5170 <_malloc_r+0x1d4>
    50cc:	8147883a 	add	r3,r16,r5
    50d0:	18800117 	ldw	r2,4(r3)
    50d4:	9009883a 	mov	r4,r18
    50d8:	10800054 	ori	r2,r2,1
    50dc:	18800115 	stw	r2,4(r3)
    50e0:	000a4d00 	call	a4d0 <__malloc_unlock>
    50e4:	80c00204 	addi	r3,r16,8
    50e8:	003fc006 	br	4fec <_malloc_r+0x50>
    50ec:	02c00074 	movhi	r11,1
    50f0:	5ac1e304 	addi	r11,r11,1932
    50f4:	8ac5883a 	add	r2,r17,r11
    50f8:	14000317 	ldw	r16,12(r2)
    50fc:	580f883a 	mov	r7,r11
    5100:	8806d0fa 	srli	r3,r17,3
    5104:	14006c26 	beq	r2,r16,52b8 <_malloc_r+0x31c>
    5108:	80c00117 	ldw	r3,4(r16)
    510c:	00bfff04 	movi	r2,-4
    5110:	81800317 	ldw	r6,12(r16)
    5114:	1886703a 	and	r3,r3,r2
    5118:	80c7883a 	add	r3,r16,r3
    511c:	18800117 	ldw	r2,4(r3)
    5120:	81400217 	ldw	r5,8(r16)
    5124:	9009883a 	mov	r4,r18
    5128:	10800054 	ori	r2,r2,1
    512c:	18800115 	stw	r2,4(r3)
    5130:	31400215 	stw	r5,8(r6)
    5134:	29800315 	stw	r6,12(r5)
    5138:	000a4d00 	call	a4d0 <__malloc_unlock>
    513c:	80c00204 	addi	r3,r16,8
    5140:	003faa06 	br	4fec <_malloc_r+0x50>
    5144:	00800104 	movi	r2,4
    5148:	10c0052e 	bgeu	r2,r3,5160 <_malloc_r+0x1c4>
    514c:	00800504 	movi	r2,20
    5150:	10c07836 	bltu	r2,r3,5334 <_malloc_r+0x398>
    5154:	198016c4 	addi	r6,r3,91
    5158:	300490fa 	slli	r2,r6,3
    515c:	003fbc06 	br	5050 <_malloc_r+0xb4>
    5160:	8804d1ba 	srli	r2,r17,6
    5164:	11800e04 	addi	r6,r2,56
    5168:	300490fa 	slli	r2,r6,3
    516c:	003fb806 	br	5050 <_malloc_r+0xb4>
    5170:	00807fc4 	movi	r2,511
    5174:	1140bb36 	bltu	r2,r5,5464 <_malloc_r+0x4c8>
    5178:	2806d0fa 	srli	r3,r5,3
    517c:	573ffe04 	addi	fp,r10,-8
    5180:	00800044 	movi	r2,1
    5184:	180890fa 	slli	r4,r3,3
    5188:	1807d0ba 	srai	r3,r3,2
    518c:	e1c00117 	ldw	r7,4(fp)
    5190:	5909883a 	add	r4,r11,r4
    5194:	21400217 	ldw	r5,8(r4)
    5198:	10c4983a 	sll	r2,r2,r3
    519c:	81000315 	stw	r4,12(r16)
    51a0:	81400215 	stw	r5,8(r16)
    51a4:	388eb03a 	or	r7,r7,r2
    51a8:	2c000315 	stw	r16,12(r5)
    51ac:	24000215 	stw	r16,8(r4)
    51b0:	e1c00115 	stw	r7,4(fp)
    51b4:	4807883a 	mov	r3,r9
    51b8:	4800cd16 	blt	r9,zero,54f0 <_malloc_r+0x554>
    51bc:	1807d0ba 	srai	r3,r3,2
    51c0:	00800044 	movi	r2,1
    51c4:	10c8983a 	sll	r4,r2,r3
    51c8:	39004436 	bltu	r7,r4,52dc <_malloc_r+0x340>
    51cc:	21c4703a 	and	r2,r4,r7
    51d0:	10000a1e 	bne	r2,zero,51fc <_malloc_r+0x260>
    51d4:	2109883a 	add	r4,r4,r4
    51d8:	00bfff04 	movi	r2,-4
    51dc:	4884703a 	and	r2,r9,r2
    51e0:	3906703a 	and	r3,r7,r4
    51e4:	12400104 	addi	r9,r2,4
    51e8:	1800041e 	bne	r3,zero,51fc <_malloc_r+0x260>
    51ec:	2109883a 	add	r4,r4,r4
    51f0:	3904703a 	and	r2,r7,r4
    51f4:	4a400104 	addi	r9,r9,4
    51f8:	103ffc26 	beq	r2,zero,51ec <_malloc_r+0x250>
    51fc:	480490fa 	slli	r2,r9,3
    5200:	4819883a 	mov	r12,r9
    5204:	023fff04 	movi	r8,-4
    5208:	589b883a 	add	r13,r11,r2
    520c:	6807883a 	mov	r3,r13
    5210:	014003c4 	movi	r5,15
    5214:	1c000317 	ldw	r16,12(r3)
    5218:	1c00041e 	bne	r3,r16,522c <_malloc_r+0x290>
    521c:	0000a706 	br	54bc <_malloc_r+0x520>
    5220:	3000ab0e 	bge	r6,zero,54d0 <_malloc_r+0x534>
    5224:	84000317 	ldw	r16,12(r16)
    5228:	1c00a426 	beq	r3,r16,54bc <_malloc_r+0x520>
    522c:	80800117 	ldw	r2,4(r16)
    5230:	1204703a 	and	r2,r2,r8
    5234:	144dc83a 	sub	r6,r2,r17
    5238:	29bff90e 	bge	r5,r6,5220 <_malloc_r+0x284>
    523c:	81000317 	ldw	r4,12(r16)
    5240:	80c00217 	ldw	r3,8(r16)
    5244:	89400054 	ori	r5,r17,1
    5248:	8445883a 	add	r2,r16,r17
    524c:	20c00215 	stw	r3,8(r4)
    5250:	19000315 	stw	r4,12(r3)
    5254:	81400115 	stw	r5,4(r16)
    5258:	1187883a 	add	r3,r2,r6
    525c:	31000054 	ori	r4,r6,1
    5260:	50800315 	stw	r2,12(r10)
    5264:	50800215 	stw	r2,8(r10)
    5268:	19800015 	stw	r6,0(r3)
    526c:	11000115 	stw	r4,4(r2)
    5270:	12800215 	stw	r10,8(r2)
    5274:	12800315 	stw	r10,12(r2)
    5278:	9009883a 	mov	r4,r18
    527c:	000a4d00 	call	a4d0 <__malloc_unlock>
    5280:	80c00204 	addi	r3,r16,8
    5284:	003f5906 	br	4fec <_malloc_r+0x50>
    5288:	8109883a 	add	r4,r16,r4
    528c:	20800117 	ldw	r2,4(r4)
    5290:	80c00217 	ldw	r3,8(r16)
    5294:	81400317 	ldw	r5,12(r16)
    5298:	10800054 	ori	r2,r2,1
    529c:	20800115 	stw	r2,4(r4)
    52a0:	28c00215 	stw	r3,8(r5)
    52a4:	19400315 	stw	r5,12(r3)
    52a8:	9009883a 	mov	r4,r18
    52ac:	000a4d00 	call	a4d0 <__malloc_unlock>
    52b0:	80c00204 	addi	r3,r16,8
    52b4:	003f4d06 	br	4fec <_malloc_r+0x50>
    52b8:	80800204 	addi	r2,r16,8
    52bc:	14000317 	ldw	r16,12(r2)
    52c0:	143f911e 	bne	r2,r16,5108 <_malloc_r+0x16c>
    52c4:	1a400084 	addi	r9,r3,2
    52c8:	003f7306 	br	5098 <_malloc_r+0xfc>
    52cc:	88c00054 	ori	r3,r17,1
    52d0:	8445883a 	add	r2,r16,r17
    52d4:	80c00115 	stw	r3,4(r16)
    52d8:	003fdf06 	br	5258 <_malloc_r+0x2bc>
    52dc:	e4000217 	ldw	r16,8(fp)
    52e0:	00bfff04 	movi	r2,-4
    52e4:	80c00117 	ldw	r3,4(r16)
    52e8:	802d883a 	mov	r22,r16
    52ec:	18aa703a 	and	r21,r3,r2
    52f0:	ac401636 	bltu	r21,r17,534c <_malloc_r+0x3b0>
    52f4:	ac49c83a 	sub	r4,r21,r17
    52f8:	008003c4 	movi	r2,15
    52fc:	1100130e 	bge	r2,r4,534c <_malloc_r+0x3b0>
    5300:	88800054 	ori	r2,r17,1
    5304:	8447883a 	add	r3,r16,r17
    5308:	80800115 	stw	r2,4(r16)
    530c:	20800054 	ori	r2,r4,1
    5310:	18800115 	stw	r2,4(r3)
    5314:	e0c00215 	stw	r3,8(fp)
    5318:	9009883a 	mov	r4,r18
    531c:	000a4d00 	call	a4d0 <__malloc_unlock>
    5320:	80c00204 	addi	r3,r16,8
    5324:	003f3106 	br	4fec <_malloc_r+0x50>
    5328:	39c00117 	ldw	r7,4(r7)
    532c:	573ffe04 	addi	fp,r10,-8
    5330:	003fa006 	br	51b4 <_malloc_r+0x218>
    5334:	00801504 	movi	r2,84
    5338:	10c06736 	bltu	r2,r3,54d8 <_malloc_r+0x53c>
    533c:	8804d33a 	srli	r2,r17,12
    5340:	11801b84 	addi	r6,r2,110
    5344:	300490fa 	slli	r2,r6,3
    5348:	003f4106 	br	5050 <_malloc_r+0xb4>
    534c:	d0a01817 	ldw	r2,-32672(gp)
    5350:	d0e00517 	ldw	r3,-32748(gp)
    5354:	053fffc4 	movi	r20,-1
    5358:	10800404 	addi	r2,r2,16
    535c:	88a7883a 	add	r19,r17,r2
    5360:	1d000326 	beq	r3,r20,5370 <_malloc_r+0x3d4>
    5364:	98c3ffc4 	addi	r3,r19,4095
    5368:	00bc0004 	movi	r2,-4096
    536c:	18a6703a 	and	r19,r3,r2
    5370:	9009883a 	mov	r4,r18
    5374:	980b883a 	mov	r5,r19
    5378:	00070c80 	call	70c8 <_sbrk_r>
    537c:	1009883a 	mov	r4,r2
    5380:	15000426 	beq	r2,r20,5394 <_malloc_r+0x3f8>
    5384:	854b883a 	add	r5,r16,r21
    5388:	1029883a 	mov	r20,r2
    538c:	11405a2e 	bgeu	r2,r5,54f8 <_malloc_r+0x55c>
    5390:	87000c26 	beq	r16,fp,53c4 <_malloc_r+0x428>
    5394:	e4000217 	ldw	r16,8(fp)
    5398:	80c00117 	ldw	r3,4(r16)
    539c:	00bfff04 	movi	r2,-4
    53a0:	1884703a 	and	r2,r3,r2
    53a4:	14400336 	bltu	r2,r17,53b4 <_malloc_r+0x418>
    53a8:	1449c83a 	sub	r4,r2,r17
    53ac:	008003c4 	movi	r2,15
    53b0:	113fd316 	blt	r2,r4,5300 <_malloc_r+0x364>
    53b4:	9009883a 	mov	r4,r18
    53b8:	000a4d00 	call	a4d0 <__malloc_unlock>
    53bc:	0007883a 	mov	r3,zero
    53c0:	003f0a06 	br	4fec <_malloc_r+0x50>
    53c4:	05c00074 	movhi	r23,1
    53c8:	bdc78904 	addi	r23,r23,7716
    53cc:	b8800017 	ldw	r2,0(r23)
    53d0:	988d883a 	add	r6,r19,r2
    53d4:	b9800015 	stw	r6,0(r23)
    53d8:	d0e00517 	ldw	r3,-32748(gp)
    53dc:	00bfffc4 	movi	r2,-1
    53e0:	18808e26 	beq	r3,r2,561c <_malloc_r+0x680>
    53e4:	2145c83a 	sub	r2,r4,r5
    53e8:	3085883a 	add	r2,r6,r2
    53ec:	b8800015 	stw	r2,0(r23)
    53f0:	20c001cc 	andi	r3,r4,7
    53f4:	18005f1e 	bne	r3,zero,5574 <_malloc_r+0x5d8>
    53f8:	000b883a 	mov	r5,zero
    53fc:	a4c5883a 	add	r2,r20,r19
    5400:	1083ffcc 	andi	r2,r2,4095
    5404:	00c40004 	movi	r3,4096
    5408:	1887c83a 	sub	r3,r3,r2
    540c:	28e7883a 	add	r19,r5,r3
    5410:	9009883a 	mov	r4,r18
    5414:	980b883a 	mov	r5,r19
    5418:	00070c80 	call	70c8 <_sbrk_r>
    541c:	1007883a 	mov	r3,r2
    5420:	00bfffc4 	movi	r2,-1
    5424:	18807a26 	beq	r3,r2,5610 <_malloc_r+0x674>
    5428:	1d05c83a 	sub	r2,r3,r20
    542c:	9885883a 	add	r2,r19,r2
    5430:	10c00054 	ori	r3,r2,1
    5434:	b8800017 	ldw	r2,0(r23)
    5438:	a021883a 	mov	r16,r20
    543c:	a0c00115 	stw	r3,4(r20)
    5440:	9885883a 	add	r2,r19,r2
    5444:	b8800015 	stw	r2,0(r23)
    5448:	e5000215 	stw	r20,8(fp)
    544c:	b7003626 	beq	r22,fp,5528 <_malloc_r+0x58c>
    5450:	018003c4 	movi	r6,15
    5454:	35404b36 	bltu	r6,r21,5584 <_malloc_r+0x5e8>
    5458:	00800044 	movi	r2,1
    545c:	a0800115 	stw	r2,4(r20)
    5460:	003fcd06 	br	5398 <_malloc_r+0x3fc>
    5464:	2808d27a 	srli	r4,r5,9
    5468:	2000371e 	bne	r4,zero,5548 <_malloc_r+0x5ac>
    546c:	2808d0fa 	srli	r4,r5,3
    5470:	200690fa 	slli	r3,r4,3
    5474:	1ad1883a 	add	r8,r3,r11
    5478:	41800217 	ldw	r6,8(r8)
    547c:	41805b26 	beq	r8,r6,55ec <_malloc_r+0x650>
    5480:	30800117 	ldw	r2,4(r6)
    5484:	00ffff04 	movi	r3,-4
    5488:	10c4703a 	and	r2,r2,r3
    548c:	2880022e 	bgeu	r5,r2,5498 <_malloc_r+0x4fc>
    5490:	31800217 	ldw	r6,8(r6)
    5494:	41bffa1e 	bne	r8,r6,5480 <_malloc_r+0x4e4>
    5498:	32000317 	ldw	r8,12(r6)
    549c:	39c00117 	ldw	r7,4(r7)
    54a0:	82000315 	stw	r8,12(r16)
    54a4:	81800215 	stw	r6,8(r16)
    54a8:	07000074 	movhi	fp,1
    54ac:	e701e304 	addi	fp,fp,1932
    54b0:	34000315 	stw	r16,12(r6)
    54b4:	44000215 	stw	r16,8(r8)
    54b8:	003f3e06 	br	51b4 <_malloc_r+0x218>
    54bc:	63000044 	addi	r12,r12,1
    54c0:	608000cc 	andi	r2,r12,3
    54c4:	10005d26 	beq	r2,zero,563c <_malloc_r+0x6a0>
    54c8:	18c00204 	addi	r3,r3,8
    54cc:	003f5106 	br	5214 <_malloc_r+0x278>
    54d0:	8089883a 	add	r4,r16,r2
    54d4:	003f6d06 	br	528c <_malloc_r+0x2f0>
    54d8:	00805504 	movi	r2,340
    54dc:	10c02036 	bltu	r2,r3,5560 <_malloc_r+0x5c4>
    54e0:	8804d3fa 	srli	r2,r17,15
    54e4:	11801dc4 	addi	r6,r2,119
    54e8:	300490fa 	slli	r2,r6,3
    54ec:	003ed806 	br	5050 <_malloc_r+0xb4>
    54f0:	48c000c4 	addi	r3,r9,3
    54f4:	003f3106 	br	51bc <_malloc_r+0x220>
    54f8:	05c00074 	movhi	r23,1
    54fc:	bdc78904 	addi	r23,r23,7716
    5500:	b8800017 	ldw	r2,0(r23)
    5504:	988d883a 	add	r6,r19,r2
    5508:	b9800015 	stw	r6,0(r23)
    550c:	293fb21e 	bne	r5,r4,53d8 <_malloc_r+0x43c>
    5510:	2083ffcc 	andi	r2,r4,4095
    5514:	103fb01e 	bne	r2,zero,53d8 <_malloc_r+0x43c>
    5518:	e4000217 	ldw	r16,8(fp)
    551c:	9d45883a 	add	r2,r19,r21
    5520:	10800054 	ori	r2,r2,1
    5524:	80800115 	stw	r2,4(r16)
    5528:	b8c00017 	ldw	r3,0(r23)
    552c:	d0a01917 	ldw	r2,-32668(gp)
    5530:	10c0012e 	bgeu	r2,r3,5538 <_malloc_r+0x59c>
    5534:	d0e01915 	stw	r3,-32668(gp)
    5538:	d0a01a17 	ldw	r2,-32664(gp)
    553c:	10ff962e 	bgeu	r2,r3,5398 <_malloc_r+0x3fc>
    5540:	d0e01a15 	stw	r3,-32664(gp)
    5544:	003f9406 	br	5398 <_malloc_r+0x3fc>
    5548:	00800104 	movi	r2,4
    554c:	11001e36 	bltu	r2,r4,55c8 <_malloc_r+0x62c>
    5550:	2804d1ba 	srli	r2,r5,6
    5554:	11000e04 	addi	r4,r2,56
    5558:	200690fa 	slli	r3,r4,3
    555c:	003fc506 	br	5474 <_malloc_r+0x4d8>
    5560:	00815504 	movi	r2,1364
    5564:	10c01d2e 	bgeu	r2,r3,55dc <_malloc_r+0x640>
    5568:	01801f84 	movi	r6,126
    556c:	0080fc04 	movi	r2,1008
    5570:	003eb706 	br	5050 <_malloc_r+0xb4>
    5574:	00800204 	movi	r2,8
    5578:	10cbc83a 	sub	r5,r2,r3
    557c:	2169883a 	add	r20,r4,r5
    5580:	003f9e06 	br	53fc <_malloc_r+0x460>
    5584:	00bffe04 	movi	r2,-8
    5588:	a93ffd04 	addi	r4,r21,-12
    558c:	2088703a 	and	r4,r4,r2
    5590:	b10b883a 	add	r5,r22,r4
    5594:	00c00144 	movi	r3,5
    5598:	28c00215 	stw	r3,8(r5)
    559c:	28c00115 	stw	r3,4(r5)
    55a0:	b0800117 	ldw	r2,4(r22)
    55a4:	1080004c 	andi	r2,r2,1
    55a8:	2084b03a 	or	r2,r4,r2
    55ac:	b0800115 	stw	r2,4(r22)
    55b0:	313fdd2e 	bgeu	r6,r4,5528 <_malloc_r+0x58c>
    55b4:	b1400204 	addi	r5,r22,8
    55b8:	9009883a 	mov	r4,r18
    55bc:	00044140 	call	4414 <_free_r>
    55c0:	e4000217 	ldw	r16,8(fp)
    55c4:	003fd806 	br	5528 <_malloc_r+0x58c>
    55c8:	00800504 	movi	r2,20
    55cc:	11001536 	bltu	r2,r4,5624 <_malloc_r+0x688>
    55d0:	210016c4 	addi	r4,r4,91
    55d4:	200690fa 	slli	r3,r4,3
    55d8:	003fa606 	br	5474 <_malloc_r+0x4d8>
    55dc:	8804d4ba 	srli	r2,r17,18
    55e0:	11801f04 	addi	r6,r2,124
    55e4:	300490fa 	slli	r2,r6,3
    55e8:	003e9906 	br	5050 <_malloc_r+0xb4>
    55ec:	2009d0ba 	srai	r4,r4,2
    55f0:	01400074 	movhi	r5,1
    55f4:	2941e304 	addi	r5,r5,1932
    55f8:	00c00044 	movi	r3,1
    55fc:	28800117 	ldw	r2,4(r5)
    5600:	1906983a 	sll	r3,r3,r4
    5604:	10c4b03a 	or	r2,r2,r3
    5608:	28800115 	stw	r2,4(r5)
    560c:	003fa306 	br	549c <_malloc_r+0x500>
    5610:	0027883a 	mov	r19,zero
    5614:	00c00044 	movi	r3,1
    5618:	003f8606 	br	5434 <_malloc_r+0x498>
    561c:	d1200515 	stw	r4,-32748(gp)
    5620:	003f7306 	br	53f0 <_malloc_r+0x454>
    5624:	00801504 	movi	r2,84
    5628:	11001936 	bltu	r2,r4,5690 <_malloc_r+0x6f4>
    562c:	2804d33a 	srli	r2,r5,12
    5630:	11001b84 	addi	r4,r2,110
    5634:	200690fa 	slli	r3,r4,3
    5638:	003f8e06 	br	5474 <_malloc_r+0x4d8>
    563c:	480b883a 	mov	r5,r9
    5640:	6807883a 	mov	r3,r13
    5644:	288000cc 	andi	r2,r5,3
    5648:	18fffe04 	addi	r3,r3,-8
    564c:	297fffc4 	addi	r5,r5,-1
    5650:	10001526 	beq	r2,zero,56a8 <_malloc_r+0x70c>
    5654:	18800217 	ldw	r2,8(r3)
    5658:	10fffa26 	beq	r2,r3,5644 <_malloc_r+0x6a8>
    565c:	2109883a 	add	r4,r4,r4
    5660:	393f1e36 	bltu	r7,r4,52dc <_malloc_r+0x340>
    5664:	203f1d26 	beq	r4,zero,52dc <_malloc_r+0x340>
    5668:	21c4703a 	and	r2,r4,r7
    566c:	10000226 	beq	r2,zero,5678 <_malloc_r+0x6dc>
    5670:	6013883a 	mov	r9,r12
    5674:	003ee106 	br	51fc <_malloc_r+0x260>
    5678:	2109883a 	add	r4,r4,r4
    567c:	3904703a 	and	r2,r7,r4
    5680:	63000104 	addi	r12,r12,4
    5684:	103ffc26 	beq	r2,zero,5678 <_malloc_r+0x6dc>
    5688:	6013883a 	mov	r9,r12
    568c:	003edb06 	br	51fc <_malloc_r+0x260>
    5690:	00805504 	movi	r2,340
    5694:	11000836 	bltu	r2,r4,56b8 <_malloc_r+0x71c>
    5698:	2804d3fa 	srli	r2,r5,15
    569c:	11001dc4 	addi	r4,r2,119
    56a0:	200690fa 	slli	r3,r4,3
    56a4:	003f7306 	br	5474 <_malloc_r+0x4d8>
    56a8:	0104303a 	nor	r2,zero,r4
    56ac:	388e703a 	and	r7,r7,r2
    56b0:	e1c00115 	stw	r7,4(fp)
    56b4:	003fe906 	br	565c <_malloc_r+0x6c0>
    56b8:	00815504 	movi	r2,1364
    56bc:	1100032e 	bgeu	r2,r4,56cc <_malloc_r+0x730>
    56c0:	01001f84 	movi	r4,126
    56c4:	00c0fc04 	movi	r3,1008
    56c8:	003f6a06 	br	5474 <_malloc_r+0x4d8>
    56cc:	2804d4ba 	srli	r2,r5,18
    56d0:	11001f04 	addi	r4,r2,124
    56d4:	200690fa 	slli	r3,r4,3
    56d8:	003f6606 	br	5474 <_malloc_r+0x4d8>

000056dc <memchr>:
    56dc:	008000c4 	movi	r2,3
    56e0:	29403fcc 	andi	r5,r5,255
    56e4:	2007883a 	mov	r3,r4
    56e8:	1180022e 	bgeu	r2,r6,56f4 <memchr+0x18>
    56ec:	2084703a 	and	r2,r4,r2
    56f0:	10000b26 	beq	r2,zero,5720 <memchr+0x44>
    56f4:	313fffc4 	addi	r4,r6,-1
    56f8:	3000051e 	bne	r6,zero,5710 <memchr+0x34>
    56fc:	00002c06 	br	57b0 <memchr+0xd4>
    5700:	213fffc4 	addi	r4,r4,-1
    5704:	00bfffc4 	movi	r2,-1
    5708:	18c00044 	addi	r3,r3,1
    570c:	20802826 	beq	r4,r2,57b0 <memchr+0xd4>
    5710:	18800003 	ldbu	r2,0(r3)
    5714:	28bffa1e 	bne	r5,r2,5700 <memchr+0x24>
    5718:	1805883a 	mov	r2,r3
    571c:	f800283a 	ret
    5720:	0011883a 	mov	r8,zero
    5724:	0007883a 	mov	r3,zero
    5728:	01c00104 	movi	r7,4
    572c:	4004923a 	slli	r2,r8,8
    5730:	18c00044 	addi	r3,r3,1
    5734:	1151883a 	add	r8,r2,r5
    5738:	19fffc1e 	bne	r3,r7,572c <memchr+0x50>
    573c:	02bfbff4 	movhi	r10,65279
    5740:	52bfbfc4 	addi	r10,r10,-257
    5744:	02602074 	movhi	r9,32897
    5748:	4a602004 	addi	r9,r9,-32640
    574c:	02c000c4 	movi	r11,3
    5750:	20800017 	ldw	r2,0(r4)
    5754:	31bfff04 	addi	r6,r6,-4
    5758:	200f883a 	mov	r7,r4
    575c:	1204f03a 	xor	r2,r2,r8
    5760:	1287883a 	add	r3,r2,r10
    5764:	1a46703a 	and	r3,r3,r9
    5768:	0084303a 	nor	r2,zero,r2
    576c:	10c4703a 	and	r2,r2,r3
    5770:	10000b26 	beq	r2,zero,57a0 <memchr+0xc4>
    5774:	20800003 	ldbu	r2,0(r4)
    5778:	28800f26 	beq	r5,r2,57b8 <memchr+0xdc>
    577c:	20800043 	ldbu	r2,1(r4)
    5780:	21c00044 	addi	r7,r4,1
    5784:	28800c26 	beq	r5,r2,57b8 <memchr+0xdc>
    5788:	20800083 	ldbu	r2,2(r4)
    578c:	21c00084 	addi	r7,r4,2
    5790:	28800926 	beq	r5,r2,57b8 <memchr+0xdc>
    5794:	208000c3 	ldbu	r2,3(r4)
    5798:	21c000c4 	addi	r7,r4,3
    579c:	28800626 	beq	r5,r2,57b8 <memchr+0xdc>
    57a0:	21000104 	addi	r4,r4,4
    57a4:	59bfea36 	bltu	r11,r6,5750 <memchr+0x74>
    57a8:	2007883a 	mov	r3,r4
    57ac:	003fd106 	br	56f4 <memchr+0x18>
    57b0:	0005883a 	mov	r2,zero
    57b4:	f800283a 	ret
    57b8:	3805883a 	mov	r2,r7
    57bc:	f800283a 	ret

000057c0 <memcpy>:
    57c0:	01c003c4 	movi	r7,15
    57c4:	2007883a 	mov	r3,r4
    57c8:	3980032e 	bgeu	r7,r6,57d8 <memcpy+0x18>
    57cc:	2904b03a 	or	r2,r5,r4
    57d0:	108000cc 	andi	r2,r2,3
    57d4:	10000926 	beq	r2,zero,57fc <memcpy+0x3c>
    57d8:	30000626 	beq	r6,zero,57f4 <memcpy+0x34>
    57dc:	30cd883a 	add	r6,r6,r3
    57e0:	28800003 	ldbu	r2,0(r5)
    57e4:	29400044 	addi	r5,r5,1
    57e8:	18800005 	stb	r2,0(r3)
    57ec:	18c00044 	addi	r3,r3,1
    57f0:	30fffb1e 	bne	r6,r3,57e0 <memcpy+0x20>
    57f4:	2005883a 	mov	r2,r4
    57f8:	f800283a 	ret
    57fc:	3811883a 	mov	r8,r7
    5800:	200f883a 	mov	r7,r4
    5804:	28c00017 	ldw	r3,0(r5)
    5808:	31bffc04 	addi	r6,r6,-16
    580c:	38c00015 	stw	r3,0(r7)
    5810:	28800117 	ldw	r2,4(r5)
    5814:	38800115 	stw	r2,4(r7)
    5818:	28c00217 	ldw	r3,8(r5)
    581c:	38c00215 	stw	r3,8(r7)
    5820:	28800317 	ldw	r2,12(r5)
    5824:	29400404 	addi	r5,r5,16
    5828:	38800315 	stw	r2,12(r7)
    582c:	39c00404 	addi	r7,r7,16
    5830:	41bff436 	bltu	r8,r6,5804 <memcpy+0x44>
    5834:	008000c4 	movi	r2,3
    5838:	1180072e 	bgeu	r2,r6,5858 <memcpy+0x98>
    583c:	1007883a 	mov	r3,r2
    5840:	28800017 	ldw	r2,0(r5)
    5844:	31bfff04 	addi	r6,r6,-4
    5848:	29400104 	addi	r5,r5,4
    584c:	38800015 	stw	r2,0(r7)
    5850:	39c00104 	addi	r7,r7,4
    5854:	19bffa36 	bltu	r3,r6,5840 <memcpy+0x80>
    5858:	3807883a 	mov	r3,r7
    585c:	003fde06 	br	57d8 <memcpy+0x18>

00005860 <memmove>:
    5860:	2807883a 	mov	r3,r5
    5864:	2011883a 	mov	r8,r4
    5868:	29000c2e 	bgeu	r5,r4,589c <memmove+0x3c>
    586c:	298f883a 	add	r7,r5,r6
    5870:	21c00a2e 	bgeu	r4,r7,589c <memmove+0x3c>
    5874:	30000726 	beq	r6,zero,5894 <memmove+0x34>
    5878:	2187883a 	add	r3,r4,r6
    587c:	198dc83a 	sub	r6,r3,r6
    5880:	39ffffc4 	addi	r7,r7,-1
    5884:	38800003 	ldbu	r2,0(r7)
    5888:	18ffffc4 	addi	r3,r3,-1
    588c:	18800005 	stb	r2,0(r3)
    5890:	19bffb1e 	bne	r3,r6,5880 <memmove+0x20>
    5894:	2005883a 	mov	r2,r4
    5898:	f800283a 	ret
    589c:	01c003c4 	movi	r7,15
    58a0:	39800a36 	bltu	r7,r6,58cc <memmove+0x6c>
    58a4:	303ffb26 	beq	r6,zero,5894 <memmove+0x34>
    58a8:	400f883a 	mov	r7,r8
    58ac:	320d883a 	add	r6,r6,r8
    58b0:	28800003 	ldbu	r2,0(r5)
    58b4:	29400044 	addi	r5,r5,1
    58b8:	38800005 	stb	r2,0(r7)
    58bc:	39c00044 	addi	r7,r7,1
    58c0:	39bffb1e 	bne	r7,r6,58b0 <memmove+0x50>
    58c4:	2005883a 	mov	r2,r4
    58c8:	f800283a 	ret
    58cc:	1904b03a 	or	r2,r3,r4
    58d0:	108000cc 	andi	r2,r2,3
    58d4:	103ff31e 	bne	r2,zero,58a4 <memmove+0x44>
    58d8:	3811883a 	mov	r8,r7
    58dc:	180b883a 	mov	r5,r3
    58e0:	200f883a 	mov	r7,r4
    58e4:	28c00017 	ldw	r3,0(r5)
    58e8:	31bffc04 	addi	r6,r6,-16
    58ec:	38c00015 	stw	r3,0(r7)
    58f0:	28800117 	ldw	r2,4(r5)
    58f4:	38800115 	stw	r2,4(r7)
    58f8:	28c00217 	ldw	r3,8(r5)
    58fc:	38c00215 	stw	r3,8(r7)
    5900:	28800317 	ldw	r2,12(r5)
    5904:	29400404 	addi	r5,r5,16
    5908:	38800315 	stw	r2,12(r7)
    590c:	39c00404 	addi	r7,r7,16
    5910:	41bff436 	bltu	r8,r6,58e4 <memmove+0x84>
    5914:	008000c4 	movi	r2,3
    5918:	1180072e 	bgeu	r2,r6,5938 <memmove+0xd8>
    591c:	1007883a 	mov	r3,r2
    5920:	28800017 	ldw	r2,0(r5)
    5924:	31bfff04 	addi	r6,r6,-4
    5928:	29400104 	addi	r5,r5,4
    592c:	38800015 	stw	r2,0(r7)
    5930:	39c00104 	addi	r7,r7,4
    5934:	19bffa36 	bltu	r3,r6,5920 <memmove+0xc0>
    5938:	3811883a 	mov	r8,r7
    593c:	003fd906 	br	58a4 <memmove+0x44>

00005940 <memset>:
    5940:	008000c4 	movi	r2,3
    5944:	29403fcc 	andi	r5,r5,255
    5948:	2007883a 	mov	r3,r4
    594c:	1180022e 	bgeu	r2,r6,5958 <memset+0x18>
    5950:	2084703a 	and	r2,r4,r2
    5954:	10000826 	beq	r2,zero,5978 <memset+0x38>
    5958:	30000526 	beq	r6,zero,5970 <memset+0x30>
    595c:	2805883a 	mov	r2,r5
    5960:	30cd883a 	add	r6,r6,r3
    5964:	18800005 	stb	r2,0(r3)
    5968:	18c00044 	addi	r3,r3,1
    596c:	19bffd1e 	bne	r3,r6,5964 <memset+0x24>
    5970:	2005883a 	mov	r2,r4
    5974:	f800283a 	ret
    5978:	2804923a 	slli	r2,r5,8
    597c:	020003c4 	movi	r8,15
    5980:	200f883a 	mov	r7,r4
    5984:	2884b03a 	or	r2,r5,r2
    5988:	1006943a 	slli	r3,r2,16
    598c:	10c6b03a 	or	r3,r2,r3
    5990:	41800a2e 	bgeu	r8,r6,59bc <memset+0x7c>
    5994:	4005883a 	mov	r2,r8
    5998:	31bffc04 	addi	r6,r6,-16
    599c:	38c00015 	stw	r3,0(r7)
    59a0:	38c00115 	stw	r3,4(r7)
    59a4:	38c00215 	stw	r3,8(r7)
    59a8:	38c00315 	stw	r3,12(r7)
    59ac:	39c00404 	addi	r7,r7,16
    59b0:	11bff936 	bltu	r2,r6,5998 <memset+0x58>
    59b4:	008000c4 	movi	r2,3
    59b8:	1180052e 	bgeu	r2,r6,59d0 <memset+0x90>
    59bc:	31bfff04 	addi	r6,r6,-4
    59c0:	008000c4 	movi	r2,3
    59c4:	38c00015 	stw	r3,0(r7)
    59c8:	39c00104 	addi	r7,r7,4
    59cc:	11bffb36 	bltu	r2,r6,59bc <memset+0x7c>
    59d0:	3807883a 	mov	r3,r7
    59d4:	003fe006 	br	5958 <memset+0x18>

000059d8 <_Bfree>:
    59d8:	28000826 	beq	r5,zero,59fc <_Bfree+0x24>
    59dc:	28800117 	ldw	r2,4(r5)
    59e0:	21001317 	ldw	r4,76(r4)
    59e4:	1085883a 	add	r2,r2,r2
    59e8:	1085883a 	add	r2,r2,r2
    59ec:	1105883a 	add	r2,r2,r4
    59f0:	10c00017 	ldw	r3,0(r2)
    59f4:	28c00015 	stw	r3,0(r5)
    59f8:	11400015 	stw	r5,0(r2)
    59fc:	f800283a 	ret

00005a00 <__hi0bits>:
    5a00:	20bfffec 	andhi	r2,r4,65535
    5a04:	10001426 	beq	r2,zero,5a58 <__hi0bits+0x58>
    5a08:	0007883a 	mov	r3,zero
    5a0c:	20bfc02c 	andhi	r2,r4,65280
    5a10:	1000021e 	bne	r2,zero,5a1c <__hi0bits+0x1c>
    5a14:	2008923a 	slli	r4,r4,8
    5a18:	18c00204 	addi	r3,r3,8
    5a1c:	20bc002c 	andhi	r2,r4,61440
    5a20:	1000021e 	bne	r2,zero,5a2c <__hi0bits+0x2c>
    5a24:	2008913a 	slli	r4,r4,4
    5a28:	18c00104 	addi	r3,r3,4
    5a2c:	20b0002c 	andhi	r2,r4,49152
    5a30:	1000031e 	bne	r2,zero,5a40 <__hi0bits+0x40>
    5a34:	2105883a 	add	r2,r4,r4
    5a38:	18c00084 	addi	r3,r3,2
    5a3c:	1089883a 	add	r4,r2,r2
    5a40:	20000316 	blt	r4,zero,5a50 <__hi0bits+0x50>
    5a44:	2090002c 	andhi	r2,r4,16384
    5a48:	10000626 	beq	r2,zero,5a64 <__hi0bits+0x64>
    5a4c:	18c00044 	addi	r3,r3,1
    5a50:	1805883a 	mov	r2,r3
    5a54:	f800283a 	ret
    5a58:	2008943a 	slli	r4,r4,16
    5a5c:	00c00404 	movi	r3,16
    5a60:	003fea06 	br	5a0c <__hi0bits+0xc>
    5a64:	00c00804 	movi	r3,32
    5a68:	1805883a 	mov	r2,r3
    5a6c:	f800283a 	ret

00005a70 <__lo0bits>:
    5a70:	20c00017 	ldw	r3,0(r4)
    5a74:	188001cc 	andi	r2,r3,7
    5a78:	10000a26 	beq	r2,zero,5aa4 <__lo0bits+0x34>
    5a7c:	1880004c 	andi	r2,r3,1
    5a80:	1005003a 	cmpeq	r2,r2,zero
    5a84:	10002126 	beq	r2,zero,5b0c <__lo0bits+0x9c>
    5a88:	1880008c 	andi	r2,r3,2
    5a8c:	1000251e 	bne	r2,zero,5b24 <__lo0bits+0xb4>
    5a90:	1804d0ba 	srli	r2,r3,2
    5a94:	01400084 	movi	r5,2
    5a98:	20800015 	stw	r2,0(r4)
    5a9c:	2805883a 	mov	r2,r5
    5aa0:	f800283a 	ret
    5aa4:	18bfffcc 	andi	r2,r3,65535
    5aa8:	10001526 	beq	r2,zero,5b00 <__lo0bits+0x90>
    5aac:	000b883a 	mov	r5,zero
    5ab0:	18803fcc 	andi	r2,r3,255
    5ab4:	1000021e 	bne	r2,zero,5ac0 <__lo0bits+0x50>
    5ab8:	1806d23a 	srli	r3,r3,8
    5abc:	29400204 	addi	r5,r5,8
    5ac0:	188003cc 	andi	r2,r3,15
    5ac4:	1000021e 	bne	r2,zero,5ad0 <__lo0bits+0x60>
    5ac8:	1806d13a 	srli	r3,r3,4
    5acc:	29400104 	addi	r5,r5,4
    5ad0:	188000cc 	andi	r2,r3,3
    5ad4:	1000021e 	bne	r2,zero,5ae0 <__lo0bits+0x70>
    5ad8:	1806d0ba 	srli	r3,r3,2
    5adc:	29400084 	addi	r5,r5,2
    5ae0:	1880004c 	andi	r2,r3,1
    5ae4:	1000031e 	bne	r2,zero,5af4 <__lo0bits+0x84>
    5ae8:	1806d07a 	srli	r3,r3,1
    5aec:	18000a26 	beq	r3,zero,5b18 <__lo0bits+0xa8>
    5af0:	29400044 	addi	r5,r5,1
    5af4:	2805883a 	mov	r2,r5
    5af8:	20c00015 	stw	r3,0(r4)
    5afc:	f800283a 	ret
    5b00:	1806d43a 	srli	r3,r3,16
    5b04:	01400404 	movi	r5,16
    5b08:	003fe906 	br	5ab0 <__lo0bits+0x40>
    5b0c:	000b883a 	mov	r5,zero
    5b10:	2805883a 	mov	r2,r5
    5b14:	f800283a 	ret
    5b18:	01400804 	movi	r5,32
    5b1c:	2805883a 	mov	r2,r5
    5b20:	f800283a 	ret
    5b24:	1804d07a 	srli	r2,r3,1
    5b28:	01400044 	movi	r5,1
    5b2c:	20800015 	stw	r2,0(r4)
    5b30:	003fda06 	br	5a9c <__lo0bits+0x2c>

00005b34 <__mcmp>:
    5b34:	20800417 	ldw	r2,16(r4)
    5b38:	28c00417 	ldw	r3,16(r5)
    5b3c:	10cfc83a 	sub	r7,r2,r3
    5b40:	38000c1e 	bne	r7,zero,5b74 <__mcmp+0x40>
    5b44:	18c5883a 	add	r2,r3,r3
    5b48:	1085883a 	add	r2,r2,r2
    5b4c:	10c00504 	addi	r3,r2,20
    5b50:	21000504 	addi	r4,r4,20
    5b54:	28cb883a 	add	r5,r5,r3
    5b58:	2085883a 	add	r2,r4,r2
    5b5c:	10bfff04 	addi	r2,r2,-4
    5b60:	297fff04 	addi	r5,r5,-4
    5b64:	11800017 	ldw	r6,0(r2)
    5b68:	28c00017 	ldw	r3,0(r5)
    5b6c:	30c0031e 	bne	r6,r3,5b7c <__mcmp+0x48>
    5b70:	20bffa36 	bltu	r4,r2,5b5c <__mcmp+0x28>
    5b74:	3805883a 	mov	r2,r7
    5b78:	f800283a 	ret
    5b7c:	30c00336 	bltu	r6,r3,5b8c <__mcmp+0x58>
    5b80:	01c00044 	movi	r7,1
    5b84:	3805883a 	mov	r2,r7
    5b88:	f800283a 	ret
    5b8c:	01ffffc4 	movi	r7,-1
    5b90:	003ff806 	br	5b74 <__mcmp+0x40>

00005b94 <__ulp>:
    5b94:	295ffc2c 	andhi	r5,r5,32752
    5b98:	013f3034 	movhi	r4,64704
    5b9c:	290b883a 	add	r5,r5,r4
    5ba0:	0145c83a 	sub	r2,zero,r5
    5ba4:	1007d53a 	srai	r3,r2,20
    5ba8:	000d883a 	mov	r6,zero
    5bac:	0140040e 	bge	zero,r5,5bc0 <__ulp+0x2c>
    5bb0:	280f883a 	mov	r7,r5
    5bb4:	3807883a 	mov	r3,r7
    5bb8:	3005883a 	mov	r2,r6
    5bbc:	f800283a 	ret
    5bc0:	008004c4 	movi	r2,19
    5bc4:	193ffb04 	addi	r4,r3,-20
    5bc8:	10c00c0e 	bge	r2,r3,5bfc <__ulp+0x68>
    5bcc:	008007c4 	movi	r2,31
    5bd0:	1107c83a 	sub	r3,r2,r4
    5bd4:	00800784 	movi	r2,30
    5bd8:	01400044 	movi	r5,1
    5bdc:	11000216 	blt	r2,r4,5be8 <__ulp+0x54>
    5be0:	00800044 	movi	r2,1
    5be4:	10ca983a 	sll	r5,r2,r3
    5be8:	000f883a 	mov	r7,zero
    5bec:	280d883a 	mov	r6,r5
    5bf0:	3807883a 	mov	r3,r7
    5bf4:	3005883a 	mov	r2,r6
    5bf8:	f800283a 	ret
    5bfc:	00800234 	movhi	r2,8
    5c00:	10cfd83a 	sra	r7,r2,r3
    5c04:	000d883a 	mov	r6,zero
    5c08:	3005883a 	mov	r2,r6
    5c0c:	3807883a 	mov	r3,r7
    5c10:	f800283a 	ret

00005c14 <__b2d>:
    5c14:	20800417 	ldw	r2,16(r4)
    5c18:	defff904 	addi	sp,sp,-28
    5c1c:	dd000415 	stw	r20,16(sp)
    5c20:	1085883a 	add	r2,r2,r2
    5c24:	25000504 	addi	r20,r4,20
    5c28:	1085883a 	add	r2,r2,r2
    5c2c:	dc000015 	stw	r16,0(sp)
    5c30:	a0a1883a 	add	r16,r20,r2
    5c34:	dd400515 	stw	r21,20(sp)
    5c38:	857fff17 	ldw	r21,-4(r16)
    5c3c:	dc400115 	stw	r17,4(sp)
    5c40:	dfc00615 	stw	ra,24(sp)
    5c44:	a809883a 	mov	r4,r21
    5c48:	2823883a 	mov	r17,r5
    5c4c:	dcc00315 	stw	r19,12(sp)
    5c50:	dc800215 	stw	r18,8(sp)
    5c54:	0005a000 	call	5a00 <__hi0bits>
    5c58:	100b883a 	mov	r5,r2
    5c5c:	00800804 	movi	r2,32
    5c60:	1145c83a 	sub	r2,r2,r5
    5c64:	88800015 	stw	r2,0(r17)
    5c68:	00800284 	movi	r2,10
    5c6c:	80ffff04 	addi	r3,r16,-4
    5c70:	11401416 	blt	r2,r5,5cc4 <__b2d+0xb0>
    5c74:	008002c4 	movi	r2,11
    5c78:	1149c83a 	sub	r4,r2,r5
    5c7c:	a0c02736 	bltu	r20,r3,5d1c <__b2d+0x108>
    5c80:	000d883a 	mov	r6,zero
    5c84:	28800544 	addi	r2,r5,21
    5c88:	a906d83a 	srl	r3,r21,r4
    5c8c:	a884983a 	sll	r2,r21,r2
    5c90:	1ccffc34 	orhi	r19,r3,16368
    5c94:	11a4b03a 	or	r18,r2,r6
    5c98:	9005883a 	mov	r2,r18
    5c9c:	9807883a 	mov	r3,r19
    5ca0:	dfc00617 	ldw	ra,24(sp)
    5ca4:	dd400517 	ldw	r21,20(sp)
    5ca8:	dd000417 	ldw	r20,16(sp)
    5cac:	dcc00317 	ldw	r19,12(sp)
    5cb0:	dc800217 	ldw	r18,8(sp)
    5cb4:	dc400117 	ldw	r17,4(sp)
    5cb8:	dc000017 	ldw	r16,0(sp)
    5cbc:	dec00704 	addi	sp,sp,28
    5cc0:	f800283a 	ret
    5cc4:	a0c00e36 	bltu	r20,r3,5d00 <__b2d+0xec>
    5cc8:	293ffd44 	addi	r4,r5,-11
    5ccc:	000d883a 	mov	r6,zero
    5cd0:	20000f26 	beq	r4,zero,5d10 <__b2d+0xfc>
    5cd4:	00800804 	movi	r2,32
    5cd8:	110bc83a 	sub	r5,r2,r4
    5cdc:	a0c01236 	bltu	r20,r3,5d28 <__b2d+0x114>
    5ce0:	000f883a 	mov	r7,zero
    5ce4:	a904983a 	sll	r2,r21,r4
    5ce8:	3146d83a 	srl	r3,r6,r5
    5cec:	3108983a 	sll	r4,r6,r4
    5cf0:	108ffc34 	orhi	r2,r2,16368
    5cf4:	18a6b03a 	or	r19,r3,r2
    5cf8:	3924b03a 	or	r18,r7,r4
    5cfc:	003fe606 	br	5c98 <__b2d+0x84>
    5d00:	293ffd44 	addi	r4,r5,-11
    5d04:	81bffe17 	ldw	r6,-8(r16)
    5d08:	80fffe04 	addi	r3,r16,-8
    5d0c:	203ff11e 	bne	r4,zero,5cd4 <__b2d+0xc0>
    5d10:	accffc34 	orhi	r19,r21,16368
    5d14:	3025883a 	mov	r18,r6
    5d18:	003fdf06 	br	5c98 <__b2d+0x84>
    5d1c:	18bfff17 	ldw	r2,-4(r3)
    5d20:	110cd83a 	srl	r6,r2,r4
    5d24:	003fd706 	br	5c84 <__b2d+0x70>
    5d28:	18bfff17 	ldw	r2,-4(r3)
    5d2c:	114ed83a 	srl	r7,r2,r5
    5d30:	003fec06 	br	5ce4 <__b2d+0xd0>

00005d34 <__ratio>:
    5d34:	defff904 	addi	sp,sp,-28
    5d38:	dc400215 	stw	r17,8(sp)
    5d3c:	2823883a 	mov	r17,r5
    5d40:	d80b883a 	mov	r5,sp
    5d44:	dfc00615 	stw	ra,24(sp)
    5d48:	dd000515 	stw	r20,20(sp)
    5d4c:	dcc00415 	stw	r19,16(sp)
    5d50:	dc800315 	stw	r18,12(sp)
    5d54:	2025883a 	mov	r18,r4
    5d58:	0005c140 	call	5c14 <__b2d>
    5d5c:	8809883a 	mov	r4,r17
    5d60:	d9400104 	addi	r5,sp,4
    5d64:	1027883a 	mov	r19,r2
    5d68:	1829883a 	mov	r20,r3
    5d6c:	0005c140 	call	5c14 <__b2d>
    5d70:	89000417 	ldw	r4,16(r17)
    5d74:	91c00417 	ldw	r7,16(r18)
    5d78:	d9800117 	ldw	r6,4(sp)
    5d7c:	180b883a 	mov	r5,r3
    5d80:	390fc83a 	sub	r7,r7,r4
    5d84:	1009883a 	mov	r4,r2
    5d88:	d8800017 	ldw	r2,0(sp)
    5d8c:	380e917a 	slli	r7,r7,5
    5d90:	2011883a 	mov	r8,r4
    5d94:	1185c83a 	sub	r2,r2,r6
    5d98:	11c5883a 	add	r2,r2,r7
    5d9c:	1006953a 	slli	r3,r2,20
    5da0:	2813883a 	mov	r9,r5
    5da4:	00800d0e 	bge	zero,r2,5ddc <__ratio+0xa8>
    5da8:	1d29883a 	add	r20,r3,r20
    5dac:	a00b883a 	mov	r5,r20
    5db0:	480f883a 	mov	r7,r9
    5db4:	9809883a 	mov	r4,r19
    5db8:	400d883a 	mov	r6,r8
    5dbc:	0008d7c0 	call	8d7c <__divdf3>
    5dc0:	dfc00617 	ldw	ra,24(sp)
    5dc4:	dd000517 	ldw	r20,20(sp)
    5dc8:	dcc00417 	ldw	r19,16(sp)
    5dcc:	dc800317 	ldw	r18,12(sp)
    5dd0:	dc400217 	ldw	r17,8(sp)
    5dd4:	dec00704 	addi	sp,sp,28
    5dd8:	f800283a 	ret
    5ddc:	28d3c83a 	sub	r9,r5,r3
    5de0:	003ff206 	br	5dac <__ratio+0x78>

00005de4 <_mprec_log10>:
    5de4:	defffe04 	addi	sp,sp,-8
    5de8:	008005c4 	movi	r2,23
    5dec:	dc000015 	stw	r16,0(sp)
    5df0:	dfc00115 	stw	ra,4(sp)
    5df4:	2021883a 	mov	r16,r4
    5df8:	11000c16 	blt	r2,r4,5e2c <_mprec_log10+0x48>
    5dfc:	200490fa 	slli	r2,r4,3
    5e00:	00c00074 	movhi	r3,1
    5e04:	18c04504 	addi	r3,r3,276
    5e08:	10c5883a 	add	r2,r2,r3
    5e0c:	12400117 	ldw	r9,4(r2)
    5e10:	12000017 	ldw	r8,0(r2)
    5e14:	4807883a 	mov	r3,r9
    5e18:	4005883a 	mov	r2,r8
    5e1c:	dfc00117 	ldw	ra,4(sp)
    5e20:	dc000017 	ldw	r16,0(sp)
    5e24:	dec00204 	addi	sp,sp,8
    5e28:	f800283a 	ret
    5e2c:	0011883a 	mov	r8,zero
    5e30:	024ffc34 	movhi	r9,16368
    5e34:	0005883a 	mov	r2,zero
    5e38:	00d00934 	movhi	r3,16420
    5e3c:	480b883a 	mov	r5,r9
    5e40:	4009883a 	mov	r4,r8
    5e44:	180f883a 	mov	r7,r3
    5e48:	100d883a 	mov	r6,r2
    5e4c:	00089b80 	call	89b8 <__muldf3>
    5e50:	843fffc4 	addi	r16,r16,-1
    5e54:	1011883a 	mov	r8,r2
    5e58:	1813883a 	mov	r9,r3
    5e5c:	803ff51e 	bne	r16,zero,5e34 <_mprec_log10+0x50>
    5e60:	4005883a 	mov	r2,r8
    5e64:	4807883a 	mov	r3,r9
    5e68:	dfc00117 	ldw	ra,4(sp)
    5e6c:	dc000017 	ldw	r16,0(sp)
    5e70:	dec00204 	addi	sp,sp,8
    5e74:	f800283a 	ret

00005e78 <__copybits>:
    5e78:	297fffc4 	addi	r5,r5,-1
    5e7c:	30800417 	ldw	r2,16(r6)
    5e80:	280bd17a 	srai	r5,r5,5
    5e84:	31800504 	addi	r6,r6,20
    5e88:	1085883a 	add	r2,r2,r2
    5e8c:	294b883a 	add	r5,r5,r5
    5e90:	294b883a 	add	r5,r5,r5
    5e94:	1085883a 	add	r2,r2,r2
    5e98:	290b883a 	add	r5,r5,r4
    5e9c:	3087883a 	add	r3,r6,r2
    5ea0:	29400104 	addi	r5,r5,4
    5ea4:	30c0052e 	bgeu	r6,r3,5ebc <__copybits+0x44>
    5ea8:	30800017 	ldw	r2,0(r6)
    5eac:	31800104 	addi	r6,r6,4
    5eb0:	20800015 	stw	r2,0(r4)
    5eb4:	21000104 	addi	r4,r4,4
    5eb8:	30fffb36 	bltu	r6,r3,5ea8 <__copybits+0x30>
    5ebc:	2140032e 	bgeu	r4,r5,5ecc <__copybits+0x54>
    5ec0:	20000015 	stw	zero,0(r4)
    5ec4:	21000104 	addi	r4,r4,4
    5ec8:	217ffd36 	bltu	r4,r5,5ec0 <__copybits+0x48>
    5ecc:	f800283a 	ret

00005ed0 <__any_on>:
    5ed0:	20800417 	ldw	r2,16(r4)
    5ed4:	2807d17a 	srai	r3,r5,5
    5ed8:	21000504 	addi	r4,r4,20
    5edc:	10c00d0e 	bge	r2,r3,5f14 <__any_on+0x44>
    5ee0:	1085883a 	add	r2,r2,r2
    5ee4:	1085883a 	add	r2,r2,r2
    5ee8:	208d883a 	add	r6,r4,r2
    5eec:	2180182e 	bgeu	r4,r6,5f50 <__any_on+0x80>
    5ef0:	30bfff17 	ldw	r2,-4(r6)
    5ef4:	30ffff04 	addi	r3,r6,-4
    5ef8:	1000041e 	bne	r2,zero,5f0c <__any_on+0x3c>
    5efc:	20c0142e 	bgeu	r4,r3,5f50 <__any_on+0x80>
    5f00:	18ffff04 	addi	r3,r3,-4
    5f04:	18800017 	ldw	r2,0(r3)
    5f08:	103ffc26 	beq	r2,zero,5efc <__any_on+0x2c>
    5f0c:	00800044 	movi	r2,1
    5f10:	f800283a 	ret
    5f14:	18800a0e 	bge	r3,r2,5f40 <__any_on+0x70>
    5f18:	294007cc 	andi	r5,r5,31
    5f1c:	28000826 	beq	r5,zero,5f40 <__any_on+0x70>
    5f20:	18c5883a 	add	r2,r3,r3
    5f24:	1085883a 	add	r2,r2,r2
    5f28:	208d883a 	add	r6,r4,r2
    5f2c:	30c00017 	ldw	r3,0(r6)
    5f30:	1944d83a 	srl	r2,r3,r5
    5f34:	1144983a 	sll	r2,r2,r5
    5f38:	18bff41e 	bne	r3,r2,5f0c <__any_on+0x3c>
    5f3c:	003feb06 	br	5eec <__any_on+0x1c>
    5f40:	18c5883a 	add	r2,r3,r3
    5f44:	1085883a 	add	r2,r2,r2
    5f48:	208d883a 	add	r6,r4,r2
    5f4c:	003fe706 	br	5eec <__any_on+0x1c>
    5f50:	0005883a 	mov	r2,zero
    5f54:	f800283a 	ret

00005f58 <_Balloc>:
    5f58:	20c01317 	ldw	r3,76(r4)
    5f5c:	defffb04 	addi	sp,sp,-20
    5f60:	dcc00315 	stw	r19,12(sp)
    5f64:	dc800215 	stw	r18,8(sp)
    5f68:	dfc00415 	stw	ra,16(sp)
    5f6c:	2825883a 	mov	r18,r5
    5f70:	dc400115 	stw	r17,4(sp)
    5f74:	dc000015 	stw	r16,0(sp)
    5f78:	2027883a 	mov	r19,r4
    5f7c:	01800404 	movi	r6,16
    5f80:	01400104 	movi	r5,4
    5f84:	18001726 	beq	r3,zero,5fe4 <_Balloc+0x8c>
    5f88:	01400044 	movi	r5,1
    5f8c:	9485883a 	add	r2,r18,r18
    5f90:	2ca2983a 	sll	r17,r5,r18
    5f94:	1085883a 	add	r2,r2,r2
    5f98:	10c7883a 	add	r3,r2,r3
    5f9c:	1c000017 	ldw	r16,0(r3)
    5fa0:	8c4d883a 	add	r6,r17,r17
    5fa4:	318d883a 	add	r6,r6,r6
    5fa8:	9809883a 	mov	r4,r19
    5fac:	31800504 	addi	r6,r6,20
    5fb0:	80001226 	beq	r16,zero,5ffc <_Balloc+0xa4>
    5fb4:	80800017 	ldw	r2,0(r16)
    5fb8:	18800015 	stw	r2,0(r3)
    5fbc:	80000415 	stw	zero,16(r16)
    5fc0:	80000315 	stw	zero,12(r16)
    5fc4:	8005883a 	mov	r2,r16
    5fc8:	dfc00417 	ldw	ra,16(sp)
    5fcc:	dcc00317 	ldw	r19,12(sp)
    5fd0:	dc800217 	ldw	r18,8(sp)
    5fd4:	dc400117 	ldw	r17,4(sp)
    5fd8:	dc000017 	ldw	r16,0(sp)
    5fdc:	dec00504 	addi	sp,sp,20
    5fe0:	f800283a 	ret
    5fe4:	00073b80 	call	73b8 <_calloc_r>
    5fe8:	1007883a 	mov	r3,r2
    5fec:	0021883a 	mov	r16,zero
    5ff0:	98801315 	stw	r2,76(r19)
    5ff4:	103fe41e 	bne	r2,zero,5f88 <_Balloc+0x30>
    5ff8:	003ff206 	br	5fc4 <_Balloc+0x6c>
    5ffc:	00073b80 	call	73b8 <_calloc_r>
    6000:	103ff026 	beq	r2,zero,5fc4 <_Balloc+0x6c>
    6004:	1021883a 	mov	r16,r2
    6008:	14800115 	stw	r18,4(r2)
    600c:	14400215 	stw	r17,8(r2)
    6010:	003fea06 	br	5fbc <_Balloc+0x64>

00006014 <__d2b>:
    6014:	defff504 	addi	sp,sp,-44
    6018:	dcc00515 	stw	r19,20(sp)
    601c:	04c00044 	movi	r19,1
    6020:	dc000215 	stw	r16,8(sp)
    6024:	2821883a 	mov	r16,r5
    6028:	980b883a 	mov	r5,r19
    602c:	ddc00915 	stw	r23,36(sp)
    6030:	dd800815 	stw	r22,32(sp)
    6034:	dd400715 	stw	r21,28(sp)
    6038:	dd000615 	stw	r20,24(sp)
    603c:	dc800415 	stw	r18,16(sp)
    6040:	dc400315 	stw	r17,12(sp)
    6044:	dfc00a15 	stw	ra,40(sp)
    6048:	3023883a 	mov	r17,r6
    604c:	382d883a 	mov	r22,r7
    6050:	ddc00b17 	ldw	r23,44(sp)
    6054:	0005f580 	call	5f58 <_Balloc>
    6058:	1025883a 	mov	r18,r2
    605c:	00a00034 	movhi	r2,32768
    6060:	10bfffc4 	addi	r2,r2,-1
    6064:	8888703a 	and	r4,r17,r2
    6068:	202ad53a 	srli	r21,r4,20
    606c:	00800434 	movhi	r2,16
    6070:	10bfffc4 	addi	r2,r2,-1
    6074:	8886703a 	and	r3,r17,r2
    6078:	a829003a 	cmpeq	r20,r21,zero
    607c:	800b883a 	mov	r5,r16
    6080:	d8c00115 	stw	r3,4(sp)
    6084:	94000504 	addi	r16,r18,20
    6088:	a000021e 	bne	r20,zero,6094 <__d2b+0x80>
    608c:	18c00434 	orhi	r3,r3,16
    6090:	d8c00115 	stw	r3,4(sp)
    6094:	28002726 	beq	r5,zero,6134 <__d2b+0x120>
    6098:	d809883a 	mov	r4,sp
    609c:	d9400015 	stw	r5,0(sp)
    60a0:	0005a700 	call	5a70 <__lo0bits>
    60a4:	100d883a 	mov	r6,r2
    60a8:	10003526 	beq	r2,zero,6180 <__d2b+0x16c>
    60ac:	d8c00117 	ldw	r3,4(sp)
    60b0:	00800804 	movi	r2,32
    60b4:	1185c83a 	sub	r2,r2,r6
    60b8:	d9000017 	ldw	r4,0(sp)
    60bc:	1886983a 	sll	r3,r3,r2
    60c0:	1906b03a 	or	r3,r3,r4
    60c4:	90c00515 	stw	r3,20(r18)
    60c8:	d8c00117 	ldw	r3,4(sp)
    60cc:	1986d83a 	srl	r3,r3,r6
    60d0:	d8c00115 	stw	r3,4(sp)
    60d4:	180b003a 	cmpeq	r5,r3,zero
    60d8:	00800084 	movi	r2,2
    60dc:	114bc83a 	sub	r5,r2,r5
    60e0:	80c00115 	stw	r3,4(r16)
    60e4:	91400415 	stw	r5,16(r18)
    60e8:	a0001a1e 	bne	r20,zero,6154 <__d2b+0x140>
    60ec:	3545883a 	add	r2,r6,r21
    60f0:	10bef344 	addi	r2,r2,-1075
    60f4:	00c00d44 	movi	r3,53
    60f8:	b0800015 	stw	r2,0(r22)
    60fc:	1987c83a 	sub	r3,r3,r6
    6100:	b8c00015 	stw	r3,0(r23)
    6104:	9005883a 	mov	r2,r18
    6108:	dfc00a17 	ldw	ra,40(sp)
    610c:	ddc00917 	ldw	r23,36(sp)
    6110:	dd800817 	ldw	r22,32(sp)
    6114:	dd400717 	ldw	r21,28(sp)
    6118:	dd000617 	ldw	r20,24(sp)
    611c:	dcc00517 	ldw	r19,20(sp)
    6120:	dc800417 	ldw	r18,16(sp)
    6124:	dc400317 	ldw	r17,12(sp)
    6128:	dc000217 	ldw	r16,8(sp)
    612c:	dec00b04 	addi	sp,sp,44
    6130:	f800283a 	ret
    6134:	d9000104 	addi	r4,sp,4
    6138:	0005a700 	call	5a70 <__lo0bits>
    613c:	11800804 	addi	r6,r2,32
    6140:	d8800117 	ldw	r2,4(sp)
    6144:	94c00415 	stw	r19,16(r18)
    6148:	980b883a 	mov	r5,r19
    614c:	90800515 	stw	r2,20(r18)
    6150:	a03fe626 	beq	r20,zero,60ec <__d2b+0xd8>
    6154:	2945883a 	add	r2,r5,r5
    6158:	1085883a 	add	r2,r2,r2
    615c:	1405883a 	add	r2,r2,r16
    6160:	113fff17 	ldw	r4,-4(r2)
    6164:	30fef384 	addi	r3,r6,-1074
    6168:	2820917a 	slli	r16,r5,5
    616c:	b0c00015 	stw	r3,0(r22)
    6170:	0005a000 	call	5a00 <__hi0bits>
    6174:	80a1c83a 	sub	r16,r16,r2
    6178:	bc000015 	stw	r16,0(r23)
    617c:	003fe106 	br	6104 <__d2b+0xf0>
    6180:	d8800017 	ldw	r2,0(sp)
    6184:	90800515 	stw	r2,20(r18)
    6188:	d8c00117 	ldw	r3,4(sp)
    618c:	003fd106 	br	60d4 <__d2b+0xc0>

00006190 <__mdiff>:
    6190:	defffb04 	addi	sp,sp,-20
    6194:	dc000015 	stw	r16,0(sp)
    6198:	2821883a 	mov	r16,r5
    619c:	dc800215 	stw	r18,8(sp)
    61a0:	300b883a 	mov	r5,r6
    61a4:	2025883a 	mov	r18,r4
    61a8:	8009883a 	mov	r4,r16
    61ac:	dc400115 	stw	r17,4(sp)
    61b0:	dfc00415 	stw	ra,16(sp)
    61b4:	dcc00315 	stw	r19,12(sp)
    61b8:	3023883a 	mov	r17,r6
    61bc:	0005b340 	call	5b34 <__mcmp>
    61c0:	10004226 	beq	r2,zero,62cc <__mdiff+0x13c>
    61c4:	10005016 	blt	r2,zero,6308 <__mdiff+0x178>
    61c8:	0027883a 	mov	r19,zero
    61cc:	81400117 	ldw	r5,4(r16)
    61d0:	9009883a 	mov	r4,r18
    61d4:	0005f580 	call	5f58 <_Balloc>
    61d8:	1019883a 	mov	r12,r2
    61dc:	82800417 	ldw	r10,16(r16)
    61e0:	88800417 	ldw	r2,16(r17)
    61e4:	81800504 	addi	r6,r16,20
    61e8:	5287883a 	add	r3,r10,r10
    61ec:	1085883a 	add	r2,r2,r2
    61f0:	18c7883a 	add	r3,r3,r3
    61f4:	1085883a 	add	r2,r2,r2
    61f8:	8a000504 	addi	r8,r17,20
    61fc:	64c00315 	stw	r19,12(r12)
    6200:	30db883a 	add	r13,r6,r3
    6204:	4097883a 	add	r11,r8,r2
    6208:	61c00504 	addi	r7,r12,20
    620c:	0013883a 	mov	r9,zero
    6210:	31000017 	ldw	r4,0(r6)
    6214:	41400017 	ldw	r5,0(r8)
    6218:	42000104 	addi	r8,r8,4
    621c:	20bfffcc 	andi	r2,r4,65535
    6220:	28ffffcc 	andi	r3,r5,65535
    6224:	10c5c83a 	sub	r2,r2,r3
    6228:	1245883a 	add	r2,r2,r9
    622c:	2008d43a 	srli	r4,r4,16
    6230:	280ad43a 	srli	r5,r5,16
    6234:	1007d43a 	srai	r3,r2,16
    6238:	3880000d 	sth	r2,0(r7)
    623c:	2149c83a 	sub	r4,r4,r5
    6240:	20c9883a 	add	r4,r4,r3
    6244:	3900008d 	sth	r4,2(r7)
    6248:	31800104 	addi	r6,r6,4
    624c:	39c00104 	addi	r7,r7,4
    6250:	2013d43a 	srai	r9,r4,16
    6254:	42ffee36 	bltu	r8,r11,6210 <__mdiff+0x80>
    6258:	33400c2e 	bgeu	r6,r13,628c <__mdiff+0xfc>
    625c:	30800017 	ldw	r2,0(r6)
    6260:	31800104 	addi	r6,r6,4
    6264:	10ffffcc 	andi	r3,r2,65535
    6268:	1a47883a 	add	r3,r3,r9
    626c:	1004d43a 	srli	r2,r2,16
    6270:	1809d43a 	srai	r4,r3,16
    6274:	38c0000d 	sth	r3,0(r7)
    6278:	1105883a 	add	r2,r2,r4
    627c:	3880008d 	sth	r2,2(r7)
    6280:	1013d43a 	srai	r9,r2,16
    6284:	39c00104 	addi	r7,r7,4
    6288:	337ff436 	bltu	r6,r13,625c <__mdiff+0xcc>
    628c:	38bfff17 	ldw	r2,-4(r7)
    6290:	38ffff04 	addi	r3,r7,-4
    6294:	1000041e 	bne	r2,zero,62a8 <__mdiff+0x118>
    6298:	18ffff04 	addi	r3,r3,-4
    629c:	18800017 	ldw	r2,0(r3)
    62a0:	52bfffc4 	addi	r10,r10,-1
    62a4:	103ffc26 	beq	r2,zero,6298 <__mdiff+0x108>
    62a8:	6005883a 	mov	r2,r12
    62ac:	62800415 	stw	r10,16(r12)
    62b0:	dfc00417 	ldw	ra,16(sp)
    62b4:	dcc00317 	ldw	r19,12(sp)
    62b8:	dc800217 	ldw	r18,8(sp)
    62bc:	dc400117 	ldw	r17,4(sp)
    62c0:	dc000017 	ldw	r16,0(sp)
    62c4:	dec00504 	addi	sp,sp,20
    62c8:	f800283a 	ret
    62cc:	9009883a 	mov	r4,r18
    62d0:	000b883a 	mov	r5,zero
    62d4:	0005f580 	call	5f58 <_Balloc>
    62d8:	1019883a 	mov	r12,r2
    62dc:	00800044 	movi	r2,1
    62e0:	60800415 	stw	r2,16(r12)
    62e4:	6005883a 	mov	r2,r12
    62e8:	60000515 	stw	zero,20(r12)
    62ec:	dfc00417 	ldw	ra,16(sp)
    62f0:	dcc00317 	ldw	r19,12(sp)
    62f4:	dc800217 	ldw	r18,8(sp)
    62f8:	dc400117 	ldw	r17,4(sp)
    62fc:	dc000017 	ldw	r16,0(sp)
    6300:	dec00504 	addi	sp,sp,20
    6304:	f800283a 	ret
    6308:	880d883a 	mov	r6,r17
    630c:	04c00044 	movi	r19,1
    6310:	8023883a 	mov	r17,r16
    6314:	3021883a 	mov	r16,r6
    6318:	003fac06 	br	61cc <__mdiff+0x3c>

0000631c <__lshift>:
    631c:	defff904 	addi	sp,sp,-28
    6320:	28800417 	ldw	r2,16(r5)
    6324:	dc000015 	stw	r16,0(sp)
    6328:	3021d17a 	srai	r16,r6,5
    632c:	28c00217 	ldw	r3,8(r5)
    6330:	10800044 	addi	r2,r2,1
    6334:	dc400115 	stw	r17,4(sp)
    6338:	80a3883a 	add	r17,r16,r2
    633c:	dd400515 	stw	r21,20(sp)
    6340:	dd000415 	stw	r20,16(sp)
    6344:	dc800215 	stw	r18,8(sp)
    6348:	dfc00615 	stw	ra,24(sp)
    634c:	2825883a 	mov	r18,r5
    6350:	dcc00315 	stw	r19,12(sp)
    6354:	3029883a 	mov	r20,r6
    6358:	202b883a 	mov	r21,r4
    635c:	29400117 	ldw	r5,4(r5)
    6360:	1c40030e 	bge	r3,r17,6370 <__lshift+0x54>
    6364:	18c7883a 	add	r3,r3,r3
    6368:	29400044 	addi	r5,r5,1
    636c:	1c7ffd16 	blt	r3,r17,6364 <__lshift+0x48>
    6370:	a809883a 	mov	r4,r21
    6374:	0005f580 	call	5f58 <_Balloc>
    6378:	1027883a 	mov	r19,r2
    637c:	11400504 	addi	r5,r2,20
    6380:	0400090e 	bge	zero,r16,63a8 <__lshift+0x8c>
    6384:	2805883a 	mov	r2,r5
    6388:	0007883a 	mov	r3,zero
    638c:	18c00044 	addi	r3,r3,1
    6390:	10000015 	stw	zero,0(r2)
    6394:	10800104 	addi	r2,r2,4
    6398:	80fffc1e 	bne	r16,r3,638c <__lshift+0x70>
    639c:	8405883a 	add	r2,r16,r16
    63a0:	1085883a 	add	r2,r2,r2
    63a4:	288b883a 	add	r5,r5,r2
    63a8:	90800417 	ldw	r2,16(r18)
    63ac:	91000504 	addi	r4,r18,20
    63b0:	a18007cc 	andi	r6,r20,31
    63b4:	1085883a 	add	r2,r2,r2
    63b8:	1085883a 	add	r2,r2,r2
    63bc:	208f883a 	add	r7,r4,r2
    63c0:	30001e26 	beq	r6,zero,643c <__lshift+0x120>
    63c4:	00800804 	movi	r2,32
    63c8:	1191c83a 	sub	r8,r2,r6
    63cc:	0007883a 	mov	r3,zero
    63d0:	20800017 	ldw	r2,0(r4)
    63d4:	1184983a 	sll	r2,r2,r6
    63d8:	1884b03a 	or	r2,r3,r2
    63dc:	28800015 	stw	r2,0(r5)
    63e0:	20c00017 	ldw	r3,0(r4)
    63e4:	21000104 	addi	r4,r4,4
    63e8:	29400104 	addi	r5,r5,4
    63ec:	1a06d83a 	srl	r3,r3,r8
    63f0:	21fff736 	bltu	r4,r7,63d0 <__lshift+0xb4>
    63f4:	28c00015 	stw	r3,0(r5)
    63f8:	18000126 	beq	r3,zero,6400 <__lshift+0xe4>
    63fc:	8c400044 	addi	r17,r17,1
    6400:	88bfffc4 	addi	r2,r17,-1
    6404:	98800415 	stw	r2,16(r19)
    6408:	a809883a 	mov	r4,r21
    640c:	900b883a 	mov	r5,r18
    6410:	00059d80 	call	59d8 <_Bfree>
    6414:	9805883a 	mov	r2,r19
    6418:	dfc00617 	ldw	ra,24(sp)
    641c:	dd400517 	ldw	r21,20(sp)
    6420:	dd000417 	ldw	r20,16(sp)
    6424:	dcc00317 	ldw	r19,12(sp)
    6428:	dc800217 	ldw	r18,8(sp)
    642c:	dc400117 	ldw	r17,4(sp)
    6430:	dc000017 	ldw	r16,0(sp)
    6434:	dec00704 	addi	sp,sp,28
    6438:	f800283a 	ret
    643c:	20800017 	ldw	r2,0(r4)
    6440:	21000104 	addi	r4,r4,4
    6444:	28800015 	stw	r2,0(r5)
    6448:	29400104 	addi	r5,r5,4
    644c:	21ffec2e 	bgeu	r4,r7,6400 <__lshift+0xe4>
    6450:	20800017 	ldw	r2,0(r4)
    6454:	21000104 	addi	r4,r4,4
    6458:	28800015 	stw	r2,0(r5)
    645c:	29400104 	addi	r5,r5,4
    6460:	21fff636 	bltu	r4,r7,643c <__lshift+0x120>
    6464:	003fe606 	br	6400 <__lshift+0xe4>

00006468 <__multiply>:
    6468:	defff004 	addi	sp,sp,-64
    646c:	dc800815 	stw	r18,32(sp)
    6470:	dc400715 	stw	r17,28(sp)
    6474:	2c800417 	ldw	r18,16(r5)
    6478:	34400417 	ldw	r17,16(r6)
    647c:	dcc00915 	stw	r19,36(sp)
    6480:	dc000615 	stw	r16,24(sp)
    6484:	dfc00f15 	stw	ra,60(sp)
    6488:	df000e15 	stw	fp,56(sp)
    648c:	ddc00d15 	stw	r23,52(sp)
    6490:	dd800c15 	stw	r22,48(sp)
    6494:	dd400b15 	stw	r21,44(sp)
    6498:	dd000a15 	stw	r20,40(sp)
    649c:	2821883a 	mov	r16,r5
    64a0:	3027883a 	mov	r19,r6
    64a4:	9440040e 	bge	r18,r17,64b8 <__multiply+0x50>
    64a8:	8825883a 	mov	r18,r17
    64ac:	2c400417 	ldw	r17,16(r5)
    64b0:	2827883a 	mov	r19,r5
    64b4:	3021883a 	mov	r16,r6
    64b8:	80800217 	ldw	r2,8(r16)
    64bc:	9447883a 	add	r3,r18,r17
    64c0:	d8c00415 	stw	r3,16(sp)
    64c4:	81400117 	ldw	r5,4(r16)
    64c8:	10c0010e 	bge	r2,r3,64d0 <__multiply+0x68>
    64cc:	29400044 	addi	r5,r5,1
    64d0:	0005f580 	call	5f58 <_Balloc>
    64d4:	d8800515 	stw	r2,20(sp)
    64d8:	d9000417 	ldw	r4,16(sp)
    64dc:	d8c00517 	ldw	r3,20(sp)
    64e0:	2105883a 	add	r2,r4,r4
    64e4:	1085883a 	add	r2,r2,r2
    64e8:	19000504 	addi	r4,r3,20
    64ec:	2085883a 	add	r2,r4,r2
    64f0:	d8800315 	stw	r2,12(sp)
    64f4:	2080052e 	bgeu	r4,r2,650c <__multiply+0xa4>
    64f8:	2005883a 	mov	r2,r4
    64fc:	d8c00317 	ldw	r3,12(sp)
    6500:	10000015 	stw	zero,0(r2)
    6504:	10800104 	addi	r2,r2,4
    6508:	10fffc36 	bltu	r2,r3,64fc <__multiply+0x94>
    650c:	8c45883a 	add	r2,r17,r17
    6510:	9487883a 	add	r3,r18,r18
    6514:	9dc00504 	addi	r23,r19,20
    6518:	1085883a 	add	r2,r2,r2
    651c:	84000504 	addi	r16,r16,20
    6520:	18c7883a 	add	r3,r3,r3
    6524:	b885883a 	add	r2,r23,r2
    6528:	dc000015 	stw	r16,0(sp)
    652c:	d8800215 	stw	r2,8(sp)
    6530:	80f9883a 	add	fp,r16,r3
    6534:	b880432e 	bgeu	r23,r2,6644 <__multiply+0x1dc>
    6538:	d9000115 	stw	r4,4(sp)
    653c:	b9000017 	ldw	r4,0(r23)
    6540:	253fffcc 	andi	r20,r4,65535
    6544:	a0001a26 	beq	r20,zero,65b0 <__multiply+0x148>
    6548:	dcc00017 	ldw	r19,0(sp)
    654c:	dc800117 	ldw	r18,4(sp)
    6550:	002b883a 	mov	r21,zero
    6554:	9c400017 	ldw	r17,0(r19)
    6558:	94000017 	ldw	r16,0(r18)
    655c:	a009883a 	mov	r4,r20
    6560:	897fffcc 	andi	r5,r17,65535
    6564:	000972c0 	call	972c <__mulsi3>
    6568:	880ad43a 	srli	r5,r17,16
    656c:	80ffffcc 	andi	r3,r16,65535
    6570:	a8c7883a 	add	r3,r21,r3
    6574:	a009883a 	mov	r4,r20
    6578:	10e3883a 	add	r17,r2,r3
    657c:	8020d43a 	srli	r16,r16,16
    6580:	000972c0 	call	972c <__mulsi3>
    6584:	8806d43a 	srli	r3,r17,16
    6588:	1405883a 	add	r2,r2,r16
    658c:	9cc00104 	addi	r19,r19,4
    6590:	1887883a 	add	r3,r3,r2
    6594:	90c0008d 	sth	r3,2(r18)
    6598:	9440000d 	sth	r17,0(r18)
    659c:	182ad43a 	srli	r21,r3,16
    65a0:	94800104 	addi	r18,r18,4
    65a4:	9f3feb36 	bltu	r19,fp,6554 <__multiply+0xec>
    65a8:	95400015 	stw	r21,0(r18)
    65ac:	b9000017 	ldw	r4,0(r23)
    65b0:	202ad43a 	srli	r21,r4,16
    65b4:	a8001c26 	beq	r21,zero,6628 <__multiply+0x1c0>
    65b8:	d9000117 	ldw	r4,4(sp)
    65bc:	dd000017 	ldw	r20,0(sp)
    65c0:	002d883a 	mov	r22,zero
    65c4:	24c00017 	ldw	r19,0(r4)
    65c8:	2025883a 	mov	r18,r4
    65cc:	9823883a 	mov	r17,r19
    65d0:	a4000017 	ldw	r16,0(r20)
    65d4:	a809883a 	mov	r4,r21
    65d8:	a5000104 	addi	r20,r20,4
    65dc:	817fffcc 	andi	r5,r16,65535
    65e0:	000972c0 	call	972c <__mulsi3>
    65e4:	8806d43a 	srli	r3,r17,16
    65e8:	800ad43a 	srli	r5,r16,16
    65ec:	94c0000d 	sth	r19,0(r18)
    65f0:	b0c7883a 	add	r3,r22,r3
    65f4:	10e1883a 	add	r16,r2,r3
    65f8:	9400008d 	sth	r16,2(r18)
    65fc:	a809883a 	mov	r4,r21
    6600:	94800104 	addi	r18,r18,4
    6604:	000972c0 	call	972c <__mulsi3>
    6608:	94400017 	ldw	r17,0(r18)
    660c:	8020d43a 	srli	r16,r16,16
    6610:	88ffffcc 	andi	r3,r17,65535
    6614:	10c5883a 	add	r2,r2,r3
    6618:	80a7883a 	add	r19,r16,r2
    661c:	982cd43a 	srli	r22,r19,16
    6620:	a73feb36 	bltu	r20,fp,65d0 <__multiply+0x168>
    6624:	94c00015 	stw	r19,0(r18)
    6628:	d8800217 	ldw	r2,8(sp)
    662c:	bdc00104 	addi	r23,r23,4
    6630:	b880042e 	bgeu	r23,r2,6644 <__multiply+0x1dc>
    6634:	d8c00117 	ldw	r3,4(sp)
    6638:	18c00104 	addi	r3,r3,4
    663c:	d8c00115 	stw	r3,4(sp)
    6640:	003fbe06 	br	653c <__multiply+0xd4>
    6644:	d9000417 	ldw	r4,16(sp)
    6648:	01000c0e 	bge	zero,r4,667c <__multiply+0x214>
    664c:	d8c00317 	ldw	r3,12(sp)
    6650:	18bfff17 	ldw	r2,-4(r3)
    6654:	18ffff04 	addi	r3,r3,-4
    6658:	10000326 	beq	r2,zero,6668 <__multiply+0x200>
    665c:	00000706 	br	667c <__multiply+0x214>
    6660:	18800017 	ldw	r2,0(r3)
    6664:	1000051e 	bne	r2,zero,667c <__multiply+0x214>
    6668:	d9000417 	ldw	r4,16(sp)
    666c:	18ffff04 	addi	r3,r3,-4
    6670:	213fffc4 	addi	r4,r4,-1
    6674:	d9000415 	stw	r4,16(sp)
    6678:	203ff91e 	bne	r4,zero,6660 <__multiply+0x1f8>
    667c:	d8800417 	ldw	r2,16(sp)
    6680:	d8c00517 	ldw	r3,20(sp)
    6684:	18800415 	stw	r2,16(r3)
    6688:	1805883a 	mov	r2,r3
    668c:	dfc00f17 	ldw	ra,60(sp)
    6690:	df000e17 	ldw	fp,56(sp)
    6694:	ddc00d17 	ldw	r23,52(sp)
    6698:	dd800c17 	ldw	r22,48(sp)
    669c:	dd400b17 	ldw	r21,44(sp)
    66a0:	dd000a17 	ldw	r20,40(sp)
    66a4:	dcc00917 	ldw	r19,36(sp)
    66a8:	dc800817 	ldw	r18,32(sp)
    66ac:	dc400717 	ldw	r17,28(sp)
    66b0:	dc000617 	ldw	r16,24(sp)
    66b4:	dec01004 	addi	sp,sp,64
    66b8:	f800283a 	ret

000066bc <__i2b>:
    66bc:	defffd04 	addi	sp,sp,-12
    66c0:	dc000015 	stw	r16,0(sp)
    66c4:	04000044 	movi	r16,1
    66c8:	dc800115 	stw	r18,4(sp)
    66cc:	2825883a 	mov	r18,r5
    66d0:	800b883a 	mov	r5,r16
    66d4:	dfc00215 	stw	ra,8(sp)
    66d8:	0005f580 	call	5f58 <_Balloc>
    66dc:	14000415 	stw	r16,16(r2)
    66e0:	14800515 	stw	r18,20(r2)
    66e4:	dfc00217 	ldw	ra,8(sp)
    66e8:	dc800117 	ldw	r18,4(sp)
    66ec:	dc000017 	ldw	r16,0(sp)
    66f0:	dec00304 	addi	sp,sp,12
    66f4:	f800283a 	ret

000066f8 <__multadd>:
    66f8:	defff604 	addi	sp,sp,-40
    66fc:	dd800615 	stw	r22,24(sp)
    6700:	2d800417 	ldw	r22,16(r5)
    6704:	df000815 	stw	fp,32(sp)
    6708:	ddc00715 	stw	r23,28(sp)
    670c:	dd400515 	stw	r21,20(sp)
    6710:	dd000415 	stw	r20,16(sp)
    6714:	dcc00315 	stw	r19,12(sp)
    6718:	dc800215 	stw	r18,8(sp)
    671c:	dfc00915 	stw	ra,36(sp)
    6720:	dc400115 	stw	r17,4(sp)
    6724:	dc000015 	stw	r16,0(sp)
    6728:	282f883a 	mov	r23,r5
    672c:	2039883a 	mov	fp,r4
    6730:	302b883a 	mov	r21,r6
    6734:	3829883a 	mov	r20,r7
    6738:	2c800504 	addi	r18,r5,20
    673c:	0027883a 	mov	r19,zero
    6740:	94400017 	ldw	r17,0(r18)
    6744:	a80b883a 	mov	r5,r21
    6748:	9cc00044 	addi	r19,r19,1
    674c:	893fffcc 	andi	r4,r17,65535
    6750:	000972c0 	call	972c <__mulsi3>
    6754:	8808d43a 	srli	r4,r17,16
    6758:	1521883a 	add	r16,r2,r20
    675c:	a80b883a 	mov	r5,r21
    6760:	000972c0 	call	972c <__mulsi3>
    6764:	8008d43a 	srli	r4,r16,16
    6768:	843fffcc 	andi	r16,r16,65535
    676c:	1105883a 	add	r2,r2,r4
    6770:	1006943a 	slli	r3,r2,16
    6774:	1028d43a 	srli	r20,r2,16
    6778:	1c07883a 	add	r3,r3,r16
    677c:	90c00015 	stw	r3,0(r18)
    6780:	94800104 	addi	r18,r18,4
    6784:	9dbfee16 	blt	r19,r22,6740 <__multadd+0x48>
    6788:	a0000826 	beq	r20,zero,67ac <__multadd+0xb4>
    678c:	b8800217 	ldw	r2,8(r23)
    6790:	b080130e 	bge	r22,r2,67e0 <__multadd+0xe8>
    6794:	b585883a 	add	r2,r22,r22
    6798:	1085883a 	add	r2,r2,r2
    679c:	15c5883a 	add	r2,r2,r23
    67a0:	b0c00044 	addi	r3,r22,1
    67a4:	15000515 	stw	r20,20(r2)
    67a8:	b8c00415 	stw	r3,16(r23)
    67ac:	b805883a 	mov	r2,r23
    67b0:	dfc00917 	ldw	ra,36(sp)
    67b4:	df000817 	ldw	fp,32(sp)
    67b8:	ddc00717 	ldw	r23,28(sp)
    67bc:	dd800617 	ldw	r22,24(sp)
    67c0:	dd400517 	ldw	r21,20(sp)
    67c4:	dd000417 	ldw	r20,16(sp)
    67c8:	dcc00317 	ldw	r19,12(sp)
    67cc:	dc800217 	ldw	r18,8(sp)
    67d0:	dc400117 	ldw	r17,4(sp)
    67d4:	dc000017 	ldw	r16,0(sp)
    67d8:	dec00a04 	addi	sp,sp,40
    67dc:	f800283a 	ret
    67e0:	b9400117 	ldw	r5,4(r23)
    67e4:	e009883a 	mov	r4,fp
    67e8:	29400044 	addi	r5,r5,1
    67ec:	0005f580 	call	5f58 <_Balloc>
    67f0:	b9800417 	ldw	r6,16(r23)
    67f4:	b9400304 	addi	r5,r23,12
    67f8:	11000304 	addi	r4,r2,12
    67fc:	318d883a 	add	r6,r6,r6
    6800:	318d883a 	add	r6,r6,r6
    6804:	31800204 	addi	r6,r6,8
    6808:	1023883a 	mov	r17,r2
    680c:	00057c00 	call	57c0 <memcpy>
    6810:	b80b883a 	mov	r5,r23
    6814:	e009883a 	mov	r4,fp
    6818:	00059d80 	call	59d8 <_Bfree>
    681c:	882f883a 	mov	r23,r17
    6820:	003fdc06 	br	6794 <__multadd+0x9c>

00006824 <__pow5mult>:
    6824:	defffa04 	addi	sp,sp,-24
    6828:	308000cc 	andi	r2,r6,3
    682c:	dd000415 	stw	r20,16(sp)
    6830:	dcc00315 	stw	r19,12(sp)
    6834:	dc000015 	stw	r16,0(sp)
    6838:	dfc00515 	stw	ra,20(sp)
    683c:	dc800215 	stw	r18,8(sp)
    6840:	dc400115 	stw	r17,4(sp)
    6844:	3021883a 	mov	r16,r6
    6848:	2027883a 	mov	r19,r4
    684c:	2829883a 	mov	r20,r5
    6850:	10002b1e 	bne	r2,zero,6900 <__pow5mult+0xdc>
    6854:	8025d0ba 	srai	r18,r16,2
    6858:	90001b26 	beq	r18,zero,68c8 <__pow5mult+0xa4>
    685c:	9c001217 	ldw	r16,72(r19)
    6860:	8000081e 	bne	r16,zero,6884 <__pow5mult+0x60>
    6864:	00003006 	br	6928 <__pow5mult+0x104>
    6868:	800b883a 	mov	r5,r16
    686c:	800d883a 	mov	r6,r16
    6870:	9809883a 	mov	r4,r19
    6874:	90001426 	beq	r18,zero,68c8 <__pow5mult+0xa4>
    6878:	80800017 	ldw	r2,0(r16)
    687c:	10001b26 	beq	r2,zero,68ec <__pow5mult+0xc8>
    6880:	1021883a 	mov	r16,r2
    6884:	9080004c 	andi	r2,r18,1
    6888:	1005003a 	cmpeq	r2,r2,zero
    688c:	9025d07a 	srai	r18,r18,1
    6890:	800d883a 	mov	r6,r16
    6894:	9809883a 	mov	r4,r19
    6898:	a00b883a 	mov	r5,r20
    689c:	103ff21e 	bne	r2,zero,6868 <__pow5mult+0x44>
    68a0:	00064680 	call	6468 <__multiply>
    68a4:	a00b883a 	mov	r5,r20
    68a8:	9809883a 	mov	r4,r19
    68ac:	1023883a 	mov	r17,r2
    68b0:	00059d80 	call	59d8 <_Bfree>
    68b4:	8829883a 	mov	r20,r17
    68b8:	800b883a 	mov	r5,r16
    68bc:	800d883a 	mov	r6,r16
    68c0:	9809883a 	mov	r4,r19
    68c4:	903fec1e 	bne	r18,zero,6878 <__pow5mult+0x54>
    68c8:	a005883a 	mov	r2,r20
    68cc:	dfc00517 	ldw	ra,20(sp)
    68d0:	dd000417 	ldw	r20,16(sp)
    68d4:	dcc00317 	ldw	r19,12(sp)
    68d8:	dc800217 	ldw	r18,8(sp)
    68dc:	dc400117 	ldw	r17,4(sp)
    68e0:	dc000017 	ldw	r16,0(sp)
    68e4:	dec00604 	addi	sp,sp,24
    68e8:	f800283a 	ret
    68ec:	00064680 	call	6468 <__multiply>
    68f0:	80800015 	stw	r2,0(r16)
    68f4:	1021883a 	mov	r16,r2
    68f8:	10000015 	stw	zero,0(r2)
    68fc:	003fe106 	br	6884 <__pow5mult+0x60>
    6900:	1085883a 	add	r2,r2,r2
    6904:	00c00074 	movhi	r3,1
    6908:	18c08b04 	addi	r3,r3,556
    690c:	1085883a 	add	r2,r2,r2
    6910:	10c5883a 	add	r2,r2,r3
    6914:	11bfff17 	ldw	r6,-4(r2)
    6918:	000f883a 	mov	r7,zero
    691c:	00066f80 	call	66f8 <__multadd>
    6920:	1029883a 	mov	r20,r2
    6924:	003fcb06 	br	6854 <__pow5mult+0x30>
    6928:	9809883a 	mov	r4,r19
    692c:	01409c44 	movi	r5,625
    6930:	00066bc0 	call	66bc <__i2b>
    6934:	98801215 	stw	r2,72(r19)
    6938:	1021883a 	mov	r16,r2
    693c:	10000015 	stw	zero,0(r2)
    6940:	003fd006 	br	6884 <__pow5mult+0x60>

00006944 <__s2b>:
    6944:	defff904 	addi	sp,sp,-28
    6948:	dcc00315 	stw	r19,12(sp)
    694c:	dc800215 	stw	r18,8(sp)
    6950:	2827883a 	mov	r19,r5
    6954:	2025883a 	mov	r18,r4
    6958:	01400244 	movi	r5,9
    695c:	39000204 	addi	r4,r7,8
    6960:	dd000415 	stw	r20,16(sp)
    6964:	dc400115 	stw	r17,4(sp)
    6968:	dfc00615 	stw	ra,24(sp)
    696c:	dd400515 	stw	r21,20(sp)
    6970:	dc000015 	stw	r16,0(sp)
    6974:	3829883a 	mov	r20,r7
    6978:	3023883a 	mov	r17,r6
    697c:	000965c0 	call	965c <__divsi3>
    6980:	00c00044 	movi	r3,1
    6984:	1880350e 	bge	r3,r2,6a5c <__s2b+0x118>
    6988:	000b883a 	mov	r5,zero
    698c:	18c7883a 	add	r3,r3,r3
    6990:	29400044 	addi	r5,r5,1
    6994:	18bffd16 	blt	r3,r2,698c <__s2b+0x48>
    6998:	9009883a 	mov	r4,r18
    699c:	0005f580 	call	5f58 <_Balloc>
    69a0:	1011883a 	mov	r8,r2
    69a4:	d8800717 	ldw	r2,28(sp)
    69a8:	00c00044 	movi	r3,1
    69ac:	01800244 	movi	r6,9
    69b0:	40800515 	stw	r2,20(r8)
    69b4:	40c00415 	stw	r3,16(r8)
    69b8:	3440260e 	bge	r6,r17,6a54 <__s2b+0x110>
    69bc:	3021883a 	mov	r16,r6
    69c0:	99ab883a 	add	r21,r19,r6
    69c4:	9c05883a 	add	r2,r19,r16
    69c8:	11c00007 	ldb	r7,0(r2)
    69cc:	400b883a 	mov	r5,r8
    69d0:	9009883a 	mov	r4,r18
    69d4:	39fff404 	addi	r7,r7,-48
    69d8:	01800284 	movi	r6,10
    69dc:	00066f80 	call	66f8 <__multadd>
    69e0:	84000044 	addi	r16,r16,1
    69e4:	1011883a 	mov	r8,r2
    69e8:	8c3ff61e 	bne	r17,r16,69c4 <__s2b+0x80>
    69ec:	ac45883a 	add	r2,r21,r17
    69f0:	117ffe04 	addi	r5,r2,-8
    69f4:	880d883a 	mov	r6,r17
    69f8:	35000c0e 	bge	r6,r20,6a2c <__s2b+0xe8>
    69fc:	a185c83a 	sub	r2,r20,r6
    6a00:	2821883a 	mov	r16,r5
    6a04:	28a3883a 	add	r17,r5,r2
    6a08:	81c00007 	ldb	r7,0(r16)
    6a0c:	400b883a 	mov	r5,r8
    6a10:	9009883a 	mov	r4,r18
    6a14:	39fff404 	addi	r7,r7,-48
    6a18:	01800284 	movi	r6,10
    6a1c:	00066f80 	call	66f8 <__multadd>
    6a20:	84000044 	addi	r16,r16,1
    6a24:	1011883a 	mov	r8,r2
    6a28:	847ff71e 	bne	r16,r17,6a08 <__s2b+0xc4>
    6a2c:	4005883a 	mov	r2,r8
    6a30:	dfc00617 	ldw	ra,24(sp)
    6a34:	dd400517 	ldw	r21,20(sp)
    6a38:	dd000417 	ldw	r20,16(sp)
    6a3c:	dcc00317 	ldw	r19,12(sp)
    6a40:	dc800217 	ldw	r18,8(sp)
    6a44:	dc400117 	ldw	r17,4(sp)
    6a48:	dc000017 	ldw	r16,0(sp)
    6a4c:	dec00704 	addi	sp,sp,28
    6a50:	f800283a 	ret
    6a54:	99400284 	addi	r5,r19,10
    6a58:	003fe706 	br	69f8 <__s2b+0xb4>
    6a5c:	000b883a 	mov	r5,zero
    6a60:	003fcd06 	br	6998 <__s2b+0x54>

00006a64 <_realloc_r>:
    6a64:	defff404 	addi	sp,sp,-48
    6a68:	dd800815 	stw	r22,32(sp)
    6a6c:	dc800415 	stw	r18,16(sp)
    6a70:	dc400315 	stw	r17,12(sp)
    6a74:	dfc00b15 	stw	ra,44(sp)
    6a78:	df000a15 	stw	fp,40(sp)
    6a7c:	ddc00915 	stw	r23,36(sp)
    6a80:	dd400715 	stw	r21,28(sp)
    6a84:	dd000615 	stw	r20,24(sp)
    6a88:	dcc00515 	stw	r19,20(sp)
    6a8c:	dc000215 	stw	r16,8(sp)
    6a90:	2825883a 	mov	r18,r5
    6a94:	3023883a 	mov	r17,r6
    6a98:	202d883a 	mov	r22,r4
    6a9c:	2800c926 	beq	r5,zero,6dc4 <_realloc_r+0x360>
    6aa0:	000a4b00 	call	a4b0 <__malloc_lock>
    6aa4:	943ffe04 	addi	r16,r18,-8
    6aa8:	88c002c4 	addi	r3,r17,11
    6aac:	00800584 	movi	r2,22
    6ab0:	82000117 	ldw	r8,4(r16)
    6ab4:	10c01b2e 	bgeu	r2,r3,6b24 <_realloc_r+0xc0>
    6ab8:	00bffe04 	movi	r2,-8
    6abc:	188e703a 	and	r7,r3,r2
    6ac0:	3839883a 	mov	fp,r7
    6ac4:	38001a16 	blt	r7,zero,6b30 <_realloc_r+0xcc>
    6ac8:	e4401936 	bltu	fp,r17,6b30 <_realloc_r+0xcc>
    6acc:	013fff04 	movi	r4,-4
    6ad0:	4126703a 	and	r19,r8,r4
    6ad4:	99c02616 	blt	r19,r7,6b70 <_realloc_r+0x10c>
    6ad8:	802b883a 	mov	r21,r16
    6adc:	9829883a 	mov	r20,r19
    6ae0:	84000204 	addi	r16,r16,8
    6ae4:	a80f883a 	mov	r7,r21
    6ae8:	a70dc83a 	sub	r6,r20,fp
    6aec:	008003c4 	movi	r2,15
    6af0:	1180c136 	bltu	r2,r6,6df8 <_realloc_r+0x394>
    6af4:	38800117 	ldw	r2,4(r7)
    6af8:	a549883a 	add	r4,r20,r21
    6afc:	1080004c 	andi	r2,r2,1
    6b00:	a084b03a 	or	r2,r20,r2
    6b04:	38800115 	stw	r2,4(r7)
    6b08:	20c00117 	ldw	r3,4(r4)
    6b0c:	18c00054 	ori	r3,r3,1
    6b10:	20c00115 	stw	r3,4(r4)
    6b14:	b009883a 	mov	r4,r22
    6b18:	000a4d00 	call	a4d0 <__malloc_unlock>
    6b1c:	8023883a 	mov	r17,r16
    6b20:	00000606 	br	6b3c <_realloc_r+0xd8>
    6b24:	01c00404 	movi	r7,16
    6b28:	3839883a 	mov	fp,r7
    6b2c:	e47fe72e 	bgeu	fp,r17,6acc <_realloc_r+0x68>
    6b30:	00800304 	movi	r2,12
    6b34:	0023883a 	mov	r17,zero
    6b38:	b0800015 	stw	r2,0(r22)
    6b3c:	8805883a 	mov	r2,r17
    6b40:	dfc00b17 	ldw	ra,44(sp)
    6b44:	df000a17 	ldw	fp,40(sp)
    6b48:	ddc00917 	ldw	r23,36(sp)
    6b4c:	dd800817 	ldw	r22,32(sp)
    6b50:	dd400717 	ldw	r21,28(sp)
    6b54:	dd000617 	ldw	r20,24(sp)
    6b58:	dcc00517 	ldw	r19,20(sp)
    6b5c:	dc800417 	ldw	r18,16(sp)
    6b60:	dc400317 	ldw	r17,12(sp)
    6b64:	dc000217 	ldw	r16,8(sp)
    6b68:	dec00c04 	addi	sp,sp,48
    6b6c:	f800283a 	ret
    6b70:	00800074 	movhi	r2,1
    6b74:	1081e304 	addi	r2,r2,1932
    6b78:	12400217 	ldw	r9,8(r2)
    6b7c:	84cd883a 	add	r6,r16,r19
    6b80:	802b883a 	mov	r21,r16
    6b84:	3240b926 	beq	r6,r9,6e6c <_realloc_r+0x408>
    6b88:	31400117 	ldw	r5,4(r6)
    6b8c:	00bfff84 	movi	r2,-2
    6b90:	2884703a 	and	r2,r5,r2
    6b94:	1185883a 	add	r2,r2,r6
    6b98:	10c00117 	ldw	r3,4(r2)
    6b9c:	18c0004c 	andi	r3,r3,1
    6ba0:	1807003a 	cmpeq	r3,r3,zero
    6ba4:	1800a326 	beq	r3,zero,6e34 <_realloc_r+0x3d0>
    6ba8:	2908703a 	and	r4,r5,r4
    6bac:	9929883a 	add	r20,r19,r4
    6bb0:	a1c0a30e 	bge	r20,r7,6e40 <_realloc_r+0x3dc>
    6bb4:	4080004c 	andi	r2,r8,1
    6bb8:	1000551e 	bne	r2,zero,6d10 <_realloc_r+0x2ac>
    6bbc:	80800017 	ldw	r2,0(r16)
    6bc0:	80afc83a 	sub	r23,r16,r2
    6bc4:	b8c00117 	ldw	r3,4(r23)
    6bc8:	00bfff04 	movi	r2,-4
    6bcc:	1884703a 	and	r2,r3,r2
    6bd0:	30002e26 	beq	r6,zero,6c8c <_realloc_r+0x228>
    6bd4:	3240b926 	beq	r6,r9,6ebc <_realloc_r+0x458>
    6bd8:	98a9883a 	add	r20,r19,r2
    6bdc:	2509883a 	add	r4,r4,r20
    6be0:	d9000015 	stw	r4,0(sp)
    6be4:	21c02a16 	blt	r4,r7,6c90 <_realloc_r+0x22c>
    6be8:	30800317 	ldw	r2,12(r6)
    6bec:	30c00217 	ldw	r3,8(r6)
    6bf0:	01400904 	movi	r5,36
    6bf4:	99bfff04 	addi	r6,r19,-4
    6bf8:	18800315 	stw	r2,12(r3)
    6bfc:	10c00215 	stw	r3,8(r2)
    6c00:	b9000317 	ldw	r4,12(r23)
    6c04:	b8800217 	ldw	r2,8(r23)
    6c08:	b82b883a 	mov	r21,r23
    6c0c:	bc000204 	addi	r16,r23,8
    6c10:	20800215 	stw	r2,8(r4)
    6c14:	11000315 	stw	r4,12(r2)
    6c18:	2980e436 	bltu	r5,r6,6fac <_realloc_r+0x548>
    6c1c:	008004c4 	movi	r2,19
    6c20:	9009883a 	mov	r4,r18
    6c24:	8011883a 	mov	r8,r16
    6c28:	11800f2e 	bgeu	r2,r6,6c68 <_realloc_r+0x204>
    6c2c:	90800017 	ldw	r2,0(r18)
    6c30:	ba000404 	addi	r8,r23,16
    6c34:	91000204 	addi	r4,r18,8
    6c38:	b8800215 	stw	r2,8(r23)
    6c3c:	90c00117 	ldw	r3,4(r18)
    6c40:	008006c4 	movi	r2,27
    6c44:	b8c00315 	stw	r3,12(r23)
    6c48:	1180072e 	bgeu	r2,r6,6c68 <_realloc_r+0x204>
    6c4c:	90c00217 	ldw	r3,8(r18)
    6c50:	ba000604 	addi	r8,r23,24
    6c54:	91000404 	addi	r4,r18,16
    6c58:	b8c00415 	stw	r3,16(r23)
    6c5c:	90800317 	ldw	r2,12(r18)
    6c60:	b8800515 	stw	r2,20(r23)
    6c64:	3140e726 	beq	r6,r5,7004 <_realloc_r+0x5a0>
    6c68:	20800017 	ldw	r2,0(r4)
    6c6c:	dd000017 	ldw	r20,0(sp)
    6c70:	b80f883a 	mov	r7,r23
    6c74:	40800015 	stw	r2,0(r8)
    6c78:	20c00117 	ldw	r3,4(r4)
    6c7c:	40c00115 	stw	r3,4(r8)
    6c80:	20800217 	ldw	r2,8(r4)
    6c84:	40800215 	stw	r2,8(r8)
    6c88:	003f9706 	br	6ae8 <_realloc_r+0x84>
    6c8c:	98a9883a 	add	r20,r19,r2
    6c90:	a1c01f16 	blt	r20,r7,6d10 <_realloc_r+0x2ac>
    6c94:	b8c00317 	ldw	r3,12(r23)
    6c98:	b8800217 	ldw	r2,8(r23)
    6c9c:	99bfff04 	addi	r6,r19,-4
    6ca0:	01400904 	movi	r5,36
    6ca4:	b82b883a 	mov	r21,r23
    6ca8:	18800215 	stw	r2,8(r3)
    6cac:	10c00315 	stw	r3,12(r2)
    6cb0:	bc000204 	addi	r16,r23,8
    6cb4:	2980c336 	bltu	r5,r6,6fc4 <_realloc_r+0x560>
    6cb8:	008004c4 	movi	r2,19
    6cbc:	9009883a 	mov	r4,r18
    6cc0:	8011883a 	mov	r8,r16
    6cc4:	11800f2e 	bgeu	r2,r6,6d04 <_realloc_r+0x2a0>
    6cc8:	90800017 	ldw	r2,0(r18)
    6ccc:	ba000404 	addi	r8,r23,16
    6cd0:	91000204 	addi	r4,r18,8
    6cd4:	b8800215 	stw	r2,8(r23)
    6cd8:	90c00117 	ldw	r3,4(r18)
    6cdc:	008006c4 	movi	r2,27
    6ce0:	b8c00315 	stw	r3,12(r23)
    6ce4:	1180072e 	bgeu	r2,r6,6d04 <_realloc_r+0x2a0>
    6ce8:	90c00217 	ldw	r3,8(r18)
    6cec:	ba000604 	addi	r8,r23,24
    6cf0:	91000404 	addi	r4,r18,16
    6cf4:	b8c00415 	stw	r3,16(r23)
    6cf8:	90800317 	ldw	r2,12(r18)
    6cfc:	b8800515 	stw	r2,20(r23)
    6d00:	3140c726 	beq	r6,r5,7020 <_realloc_r+0x5bc>
    6d04:	20800017 	ldw	r2,0(r4)
    6d08:	b80f883a 	mov	r7,r23
    6d0c:	003fd906 	br	6c74 <_realloc_r+0x210>
    6d10:	880b883a 	mov	r5,r17
    6d14:	b009883a 	mov	r4,r22
    6d18:	0004f9c0 	call	4f9c <_malloc_r>
    6d1c:	1023883a 	mov	r17,r2
    6d20:	10002526 	beq	r2,zero,6db8 <_realloc_r+0x354>
    6d24:	80800117 	ldw	r2,4(r16)
    6d28:	00ffff84 	movi	r3,-2
    6d2c:	893ffe04 	addi	r4,r17,-8
    6d30:	10c4703a 	and	r2,r2,r3
    6d34:	8085883a 	add	r2,r16,r2
    6d38:	20809526 	beq	r4,r2,6f90 <_realloc_r+0x52c>
    6d3c:	99bfff04 	addi	r6,r19,-4
    6d40:	01c00904 	movi	r7,36
    6d44:	39804536 	bltu	r7,r6,6e5c <_realloc_r+0x3f8>
    6d48:	008004c4 	movi	r2,19
    6d4c:	9009883a 	mov	r4,r18
    6d50:	880b883a 	mov	r5,r17
    6d54:	11800f2e 	bgeu	r2,r6,6d94 <_realloc_r+0x330>
    6d58:	90800017 	ldw	r2,0(r18)
    6d5c:	89400204 	addi	r5,r17,8
    6d60:	91000204 	addi	r4,r18,8
    6d64:	88800015 	stw	r2,0(r17)
    6d68:	90c00117 	ldw	r3,4(r18)
    6d6c:	008006c4 	movi	r2,27
    6d70:	88c00115 	stw	r3,4(r17)
    6d74:	1180072e 	bgeu	r2,r6,6d94 <_realloc_r+0x330>
    6d78:	90c00217 	ldw	r3,8(r18)
    6d7c:	89400404 	addi	r5,r17,16
    6d80:	91000404 	addi	r4,r18,16
    6d84:	88c00215 	stw	r3,8(r17)
    6d88:	90800317 	ldw	r2,12(r18)
    6d8c:	88800315 	stw	r2,12(r17)
    6d90:	31c09126 	beq	r6,r7,6fd8 <_realloc_r+0x574>
    6d94:	20800017 	ldw	r2,0(r4)
    6d98:	28800015 	stw	r2,0(r5)
    6d9c:	20c00117 	ldw	r3,4(r4)
    6da0:	28c00115 	stw	r3,4(r5)
    6da4:	20800217 	ldw	r2,8(r4)
    6da8:	28800215 	stw	r2,8(r5)
    6dac:	900b883a 	mov	r5,r18
    6db0:	b009883a 	mov	r4,r22
    6db4:	00044140 	call	4414 <_free_r>
    6db8:	b009883a 	mov	r4,r22
    6dbc:	000a4d00 	call	a4d0 <__malloc_unlock>
    6dc0:	003f5e06 	br	6b3c <_realloc_r+0xd8>
    6dc4:	300b883a 	mov	r5,r6
    6dc8:	dfc00b17 	ldw	ra,44(sp)
    6dcc:	df000a17 	ldw	fp,40(sp)
    6dd0:	ddc00917 	ldw	r23,36(sp)
    6dd4:	dd800817 	ldw	r22,32(sp)
    6dd8:	dd400717 	ldw	r21,28(sp)
    6ddc:	dd000617 	ldw	r20,24(sp)
    6de0:	dcc00517 	ldw	r19,20(sp)
    6de4:	dc800417 	ldw	r18,16(sp)
    6de8:	dc400317 	ldw	r17,12(sp)
    6dec:	dc000217 	ldw	r16,8(sp)
    6df0:	dec00c04 	addi	sp,sp,48
    6df4:	0004f9c1 	jmpi	4f9c <_malloc_r>
    6df8:	38800117 	ldw	r2,4(r7)
    6dfc:	e54b883a 	add	r5,fp,r21
    6e00:	31000054 	ori	r4,r6,1
    6e04:	1080004c 	andi	r2,r2,1
    6e08:	1704b03a 	or	r2,r2,fp
    6e0c:	38800115 	stw	r2,4(r7)
    6e10:	29000115 	stw	r4,4(r5)
    6e14:	2987883a 	add	r3,r5,r6
    6e18:	18800117 	ldw	r2,4(r3)
    6e1c:	29400204 	addi	r5,r5,8
    6e20:	b009883a 	mov	r4,r22
    6e24:	10800054 	ori	r2,r2,1
    6e28:	18800115 	stw	r2,4(r3)
    6e2c:	00044140 	call	4414 <_free_r>
    6e30:	003f3806 	br	6b14 <_realloc_r+0xb0>
    6e34:	000d883a 	mov	r6,zero
    6e38:	0009883a 	mov	r4,zero
    6e3c:	003f5d06 	br	6bb4 <_realloc_r+0x150>
    6e40:	30c00217 	ldw	r3,8(r6)
    6e44:	30800317 	ldw	r2,12(r6)
    6e48:	800f883a 	mov	r7,r16
    6e4c:	84000204 	addi	r16,r16,8
    6e50:	10c00215 	stw	r3,8(r2)
    6e54:	18800315 	stw	r2,12(r3)
    6e58:	003f2306 	br	6ae8 <_realloc_r+0x84>
    6e5c:	8809883a 	mov	r4,r17
    6e60:	900b883a 	mov	r5,r18
    6e64:	00058600 	call	5860 <memmove>
    6e68:	003fd006 	br	6dac <_realloc_r+0x348>
    6e6c:	30800117 	ldw	r2,4(r6)
    6e70:	e0c00404 	addi	r3,fp,16
    6e74:	1108703a 	and	r4,r2,r4
    6e78:	9905883a 	add	r2,r19,r4
    6e7c:	10ff4d16 	blt	r2,r3,6bb4 <_realloc_r+0x150>
    6e80:	1705c83a 	sub	r2,r2,fp
    6e84:	870b883a 	add	r5,r16,fp
    6e88:	10800054 	ori	r2,r2,1
    6e8c:	28800115 	stw	r2,4(r5)
    6e90:	80c00117 	ldw	r3,4(r16)
    6e94:	00800074 	movhi	r2,1
    6e98:	1081e304 	addi	r2,r2,1932
    6e9c:	b009883a 	mov	r4,r22
    6ea0:	18c0004c 	andi	r3,r3,1
    6ea4:	e0c6b03a 	or	r3,fp,r3
    6ea8:	11400215 	stw	r5,8(r2)
    6eac:	80c00115 	stw	r3,4(r16)
    6eb0:	000a4d00 	call	a4d0 <__malloc_unlock>
    6eb4:	84400204 	addi	r17,r16,8
    6eb8:	003f2006 	br	6b3c <_realloc_r+0xd8>
    6ebc:	98a9883a 	add	r20,r19,r2
    6ec0:	2509883a 	add	r4,r4,r20
    6ec4:	e0800404 	addi	r2,fp,16
    6ec8:	d9000115 	stw	r4,4(sp)
    6ecc:	20bf7016 	blt	r4,r2,6c90 <_realloc_r+0x22c>
    6ed0:	b8c00317 	ldw	r3,12(r23)
    6ed4:	b8800217 	ldw	r2,8(r23)
    6ed8:	99bfff04 	addi	r6,r19,-4
    6edc:	01400904 	movi	r5,36
    6ee0:	18800215 	stw	r2,8(r3)
    6ee4:	10c00315 	stw	r3,12(r2)
    6ee8:	bc400204 	addi	r17,r23,8
    6eec:	29804136 	bltu	r5,r6,6ff4 <_realloc_r+0x590>
    6ef0:	008004c4 	movi	r2,19
    6ef4:	9009883a 	mov	r4,r18
    6ef8:	880f883a 	mov	r7,r17
    6efc:	11800f2e 	bgeu	r2,r6,6f3c <_realloc_r+0x4d8>
    6f00:	90800017 	ldw	r2,0(r18)
    6f04:	b9c00404 	addi	r7,r23,16
    6f08:	91000204 	addi	r4,r18,8
    6f0c:	b8800215 	stw	r2,8(r23)
    6f10:	90c00117 	ldw	r3,4(r18)
    6f14:	008006c4 	movi	r2,27
    6f18:	b8c00315 	stw	r3,12(r23)
    6f1c:	1180072e 	bgeu	r2,r6,6f3c <_realloc_r+0x4d8>
    6f20:	90c00217 	ldw	r3,8(r18)
    6f24:	b9c00604 	addi	r7,r23,24
    6f28:	91000404 	addi	r4,r18,16
    6f2c:	b8c00415 	stw	r3,16(r23)
    6f30:	90800317 	ldw	r2,12(r18)
    6f34:	b8800515 	stw	r2,20(r23)
    6f38:	31404026 	beq	r6,r5,703c <_realloc_r+0x5d8>
    6f3c:	20800017 	ldw	r2,0(r4)
    6f40:	38800015 	stw	r2,0(r7)
    6f44:	20c00117 	ldw	r3,4(r4)
    6f48:	38c00115 	stw	r3,4(r7)
    6f4c:	20800217 	ldw	r2,8(r4)
    6f50:	38800215 	stw	r2,8(r7)
    6f54:	d8c00117 	ldw	r3,4(sp)
    6f58:	bf0b883a 	add	r5,r23,fp
    6f5c:	b009883a 	mov	r4,r22
    6f60:	1f05c83a 	sub	r2,r3,fp
    6f64:	10800054 	ori	r2,r2,1
    6f68:	28800115 	stw	r2,4(r5)
    6f6c:	b8c00117 	ldw	r3,4(r23)
    6f70:	00800074 	movhi	r2,1
    6f74:	1081e304 	addi	r2,r2,1932
    6f78:	11400215 	stw	r5,8(r2)
    6f7c:	18c0004c 	andi	r3,r3,1
    6f80:	e0c6b03a 	or	r3,fp,r3
    6f84:	b8c00115 	stw	r3,4(r23)
    6f88:	000a4d00 	call	a4d0 <__malloc_unlock>
    6f8c:	003eeb06 	br	6b3c <_realloc_r+0xd8>
    6f90:	20800117 	ldw	r2,4(r4)
    6f94:	00ffff04 	movi	r3,-4
    6f98:	800f883a 	mov	r7,r16
    6f9c:	10c4703a 	and	r2,r2,r3
    6fa0:	98a9883a 	add	r20,r19,r2
    6fa4:	84000204 	addi	r16,r16,8
    6fa8:	003ecf06 	br	6ae8 <_realloc_r+0x84>
    6fac:	900b883a 	mov	r5,r18
    6fb0:	8009883a 	mov	r4,r16
    6fb4:	00058600 	call	5860 <memmove>
    6fb8:	dd000017 	ldw	r20,0(sp)
    6fbc:	b80f883a 	mov	r7,r23
    6fc0:	003ec906 	br	6ae8 <_realloc_r+0x84>
    6fc4:	900b883a 	mov	r5,r18
    6fc8:	8009883a 	mov	r4,r16
    6fcc:	00058600 	call	5860 <memmove>
    6fd0:	b80f883a 	mov	r7,r23
    6fd4:	003ec406 	br	6ae8 <_realloc_r+0x84>
    6fd8:	90c00417 	ldw	r3,16(r18)
    6fdc:	89400604 	addi	r5,r17,24
    6fe0:	91000604 	addi	r4,r18,24
    6fe4:	88c00415 	stw	r3,16(r17)
    6fe8:	90800517 	ldw	r2,20(r18)
    6fec:	88800515 	stw	r2,20(r17)
    6ff0:	003f6806 	br	6d94 <_realloc_r+0x330>
    6ff4:	900b883a 	mov	r5,r18
    6ff8:	8809883a 	mov	r4,r17
    6ffc:	00058600 	call	5860 <memmove>
    7000:	003fd406 	br	6f54 <_realloc_r+0x4f0>
    7004:	90c00417 	ldw	r3,16(r18)
    7008:	91000604 	addi	r4,r18,24
    700c:	ba000804 	addi	r8,r23,32
    7010:	b8c00615 	stw	r3,24(r23)
    7014:	90800517 	ldw	r2,20(r18)
    7018:	b8800715 	stw	r2,28(r23)
    701c:	003f1206 	br	6c68 <_realloc_r+0x204>
    7020:	90c00417 	ldw	r3,16(r18)
    7024:	91000604 	addi	r4,r18,24
    7028:	ba000804 	addi	r8,r23,32
    702c:	b8c00615 	stw	r3,24(r23)
    7030:	90800517 	ldw	r2,20(r18)
    7034:	b8800715 	stw	r2,28(r23)
    7038:	003f3206 	br	6d04 <_realloc_r+0x2a0>
    703c:	90c00417 	ldw	r3,16(r18)
    7040:	91000604 	addi	r4,r18,24
    7044:	b9c00804 	addi	r7,r23,32
    7048:	b8c00615 	stw	r3,24(r23)
    704c:	90800517 	ldw	r2,20(r18)
    7050:	b8800715 	stw	r2,28(r23)
    7054:	003fb906 	br	6f3c <_realloc_r+0x4d8>

00007058 <__isinfd>:
    7058:	200d883a 	mov	r6,r4
    705c:	0109c83a 	sub	r4,zero,r4
    7060:	2188b03a 	or	r4,r4,r6
    7064:	2008d7fa 	srli	r4,r4,31
    7068:	00a00034 	movhi	r2,32768
    706c:	10bfffc4 	addi	r2,r2,-1
    7070:	1144703a 	and	r2,r2,r5
    7074:	2088b03a 	or	r4,r4,r2
    7078:	009ffc34 	movhi	r2,32752
    707c:	1105c83a 	sub	r2,r2,r4
    7080:	0087c83a 	sub	r3,zero,r2
    7084:	10c4b03a 	or	r2,r2,r3
    7088:	1004d7fa 	srli	r2,r2,31
    708c:	00c00044 	movi	r3,1
    7090:	1885c83a 	sub	r2,r3,r2
    7094:	f800283a 	ret

00007098 <__isnand>:
    7098:	200d883a 	mov	r6,r4
    709c:	0109c83a 	sub	r4,zero,r4
    70a0:	2188b03a 	or	r4,r4,r6
    70a4:	2008d7fa 	srli	r4,r4,31
    70a8:	00a00034 	movhi	r2,32768
    70ac:	10bfffc4 	addi	r2,r2,-1
    70b0:	1144703a 	and	r2,r2,r5
    70b4:	2088b03a 	or	r4,r4,r2
    70b8:	009ffc34 	movhi	r2,32752
    70bc:	1105c83a 	sub	r2,r2,r4
    70c0:	1004d7fa 	srli	r2,r2,31
    70c4:	f800283a 	ret

000070c8 <_sbrk_r>:
    70c8:	defffd04 	addi	sp,sp,-12
    70cc:	dc000015 	stw	r16,0(sp)
    70d0:	04000074 	movhi	r16,1
    70d4:	84078204 	addi	r16,r16,7688
    70d8:	dc400115 	stw	r17,4(sp)
    70dc:	80000015 	stw	zero,0(r16)
    70e0:	2023883a 	mov	r17,r4
    70e4:	2809883a 	mov	r4,r5
    70e8:	dfc00215 	stw	ra,8(sp)
    70ec:	000a6ec0 	call	a6ec <sbrk>
    70f0:	1007883a 	mov	r3,r2
    70f4:	00bfffc4 	movi	r2,-1
    70f8:	18800626 	beq	r3,r2,7114 <_sbrk_r+0x4c>
    70fc:	1805883a 	mov	r2,r3
    7100:	dfc00217 	ldw	ra,8(sp)
    7104:	dc400117 	ldw	r17,4(sp)
    7108:	dc000017 	ldw	r16,0(sp)
    710c:	dec00304 	addi	sp,sp,12
    7110:	f800283a 	ret
    7114:	80800017 	ldw	r2,0(r16)
    7118:	103ff826 	beq	r2,zero,70fc <_sbrk_r+0x34>
    711c:	88800015 	stw	r2,0(r17)
    7120:	1805883a 	mov	r2,r3
    7124:	dfc00217 	ldw	ra,8(sp)
    7128:	dc400117 	ldw	r17,4(sp)
    712c:	dc000017 	ldw	r16,0(sp)
    7130:	dec00304 	addi	sp,sp,12
    7134:	f800283a 	ret

00007138 <__sclose>:
    7138:	2940038f 	ldh	r5,14(r5)
    713c:	00074801 	jmpi	7480 <_close_r>

00007140 <__sseek>:
    7140:	defffe04 	addi	sp,sp,-8
    7144:	dc000015 	stw	r16,0(sp)
    7148:	2821883a 	mov	r16,r5
    714c:	2940038f 	ldh	r5,14(r5)
    7150:	dfc00115 	stw	ra,4(sp)
    7154:	00076f80 	call	76f8 <_lseek_r>
    7158:	1007883a 	mov	r3,r2
    715c:	00bfffc4 	movi	r2,-1
    7160:	18800926 	beq	r3,r2,7188 <__sseek+0x48>
    7164:	8080030b 	ldhu	r2,12(r16)
    7168:	80c01415 	stw	r3,80(r16)
    716c:	10840014 	ori	r2,r2,4096
    7170:	8080030d 	sth	r2,12(r16)
    7174:	1805883a 	mov	r2,r3
    7178:	dfc00117 	ldw	ra,4(sp)
    717c:	dc000017 	ldw	r16,0(sp)
    7180:	dec00204 	addi	sp,sp,8
    7184:	f800283a 	ret
    7188:	8080030b 	ldhu	r2,12(r16)
    718c:	10bbffcc 	andi	r2,r2,61439
    7190:	8080030d 	sth	r2,12(r16)
    7194:	1805883a 	mov	r2,r3
    7198:	dfc00117 	ldw	ra,4(sp)
    719c:	dc000017 	ldw	r16,0(sp)
    71a0:	dec00204 	addi	sp,sp,8
    71a4:	f800283a 	ret

000071a8 <__swrite>:
    71a8:	2880030b 	ldhu	r2,12(r5)
    71ac:	defffb04 	addi	sp,sp,-20
    71b0:	dcc00315 	stw	r19,12(sp)
    71b4:	1080400c 	andi	r2,r2,256
    71b8:	dc800215 	stw	r18,8(sp)
    71bc:	dc400115 	stw	r17,4(sp)
    71c0:	dc000015 	stw	r16,0(sp)
    71c4:	3027883a 	mov	r19,r6
    71c8:	3825883a 	mov	r18,r7
    71cc:	dfc00415 	stw	ra,16(sp)
    71d0:	2821883a 	mov	r16,r5
    71d4:	000d883a 	mov	r6,zero
    71d8:	01c00084 	movi	r7,2
    71dc:	2023883a 	mov	r17,r4
    71e0:	10000226 	beq	r2,zero,71ec <__swrite+0x44>
    71e4:	2940038f 	ldh	r5,14(r5)
    71e8:	00076f80 	call	76f8 <_lseek_r>
    71ec:	8080030b 	ldhu	r2,12(r16)
    71f0:	8140038f 	ldh	r5,14(r16)
    71f4:	8809883a 	mov	r4,r17
    71f8:	10bbffcc 	andi	r2,r2,61439
    71fc:	980d883a 	mov	r6,r19
    7200:	900f883a 	mov	r7,r18
    7204:	8080030d 	sth	r2,12(r16)
    7208:	dfc00417 	ldw	ra,16(sp)
    720c:	dcc00317 	ldw	r19,12(sp)
    7210:	dc800217 	ldw	r18,8(sp)
    7214:	dc400117 	ldw	r17,4(sp)
    7218:	dc000017 	ldw	r16,0(sp)
    721c:	dec00504 	addi	sp,sp,20
    7220:	00073401 	jmpi	7340 <_write_r>

00007224 <__sread>:
    7224:	defffe04 	addi	sp,sp,-8
    7228:	dc000015 	stw	r16,0(sp)
    722c:	2821883a 	mov	r16,r5
    7230:	2940038f 	ldh	r5,14(r5)
    7234:	dfc00115 	stw	ra,4(sp)
    7238:	00077700 	call	7770 <_read_r>
    723c:	1007883a 	mov	r3,r2
    7240:	10000816 	blt	r2,zero,7264 <__sread+0x40>
    7244:	80801417 	ldw	r2,80(r16)
    7248:	10c5883a 	add	r2,r2,r3
    724c:	80801415 	stw	r2,80(r16)
    7250:	1805883a 	mov	r2,r3
    7254:	dfc00117 	ldw	ra,4(sp)
    7258:	dc000017 	ldw	r16,0(sp)
    725c:	dec00204 	addi	sp,sp,8
    7260:	f800283a 	ret
    7264:	8080030b 	ldhu	r2,12(r16)
    7268:	10bbffcc 	andi	r2,r2,61439
    726c:	8080030d 	sth	r2,12(r16)
    7270:	1805883a 	mov	r2,r3
    7274:	dfc00117 	ldw	ra,4(sp)
    7278:	dc000017 	ldw	r16,0(sp)
    727c:	dec00204 	addi	sp,sp,8
    7280:	f800283a 	ret

00007284 <strcmp>:
    7284:	2144b03a 	or	r2,r4,r5
    7288:	108000cc 	andi	r2,r2,3
    728c:	10001d1e 	bne	r2,zero,7304 <strcmp+0x80>
    7290:	200f883a 	mov	r7,r4
    7294:	28800017 	ldw	r2,0(r5)
    7298:	21000017 	ldw	r4,0(r4)
    729c:	280d883a 	mov	r6,r5
    72a0:	2080161e 	bne	r4,r2,72fc <strcmp+0x78>
    72a4:	023fbff4 	movhi	r8,65279
    72a8:	423fbfc4 	addi	r8,r8,-257
    72ac:	2207883a 	add	r3,r4,r8
    72b0:	01602074 	movhi	r5,32897
    72b4:	29602004 	addi	r5,r5,-32640
    72b8:	1946703a 	and	r3,r3,r5
    72bc:	0104303a 	nor	r2,zero,r4
    72c0:	10c4703a 	and	r2,r2,r3
    72c4:	10001c1e 	bne	r2,zero,7338 <strcmp+0xb4>
    72c8:	4013883a 	mov	r9,r8
    72cc:	2811883a 	mov	r8,r5
    72d0:	00000106 	br	72d8 <strcmp+0x54>
    72d4:	1800181e 	bne	r3,zero,7338 <strcmp+0xb4>
    72d8:	39c00104 	addi	r7,r7,4
    72dc:	39000017 	ldw	r4,0(r7)
    72e0:	31800104 	addi	r6,r6,4
    72e4:	31400017 	ldw	r5,0(r6)
    72e8:	2245883a 	add	r2,r4,r9
    72ec:	1204703a 	and	r2,r2,r8
    72f0:	0106303a 	nor	r3,zero,r4
    72f4:	1886703a 	and	r3,r3,r2
    72f8:	217ff626 	beq	r4,r5,72d4 <strcmp+0x50>
    72fc:	3809883a 	mov	r4,r7
    7300:	300b883a 	mov	r5,r6
    7304:	20c00007 	ldb	r3,0(r4)
    7308:	1800051e 	bne	r3,zero,7320 <strcmp+0x9c>
    730c:	00000606 	br	7328 <strcmp+0xa4>
    7310:	21000044 	addi	r4,r4,1
    7314:	20c00007 	ldb	r3,0(r4)
    7318:	29400044 	addi	r5,r5,1
    731c:	18000226 	beq	r3,zero,7328 <strcmp+0xa4>
    7320:	28800007 	ldb	r2,0(r5)
    7324:	18bffa26 	beq	r3,r2,7310 <strcmp+0x8c>
    7328:	20c00003 	ldbu	r3,0(r4)
    732c:	28800003 	ldbu	r2,0(r5)
    7330:	1885c83a 	sub	r2,r3,r2
    7334:	f800283a 	ret
    7338:	0005883a 	mov	r2,zero
    733c:	f800283a 	ret

00007340 <_write_r>:
    7340:	defffd04 	addi	sp,sp,-12
    7344:	dc000015 	stw	r16,0(sp)
    7348:	04000074 	movhi	r16,1
    734c:	84078204 	addi	r16,r16,7688
    7350:	dc400115 	stw	r17,4(sp)
    7354:	80000015 	stw	zero,0(r16)
    7358:	2023883a 	mov	r17,r4
    735c:	2809883a 	mov	r4,r5
    7360:	300b883a 	mov	r5,r6
    7364:	380d883a 	mov	r6,r7
    7368:	dfc00215 	stw	ra,8(sp)
    736c:	000a7a80 	call	a7a8 <write>
    7370:	1007883a 	mov	r3,r2
    7374:	00bfffc4 	movi	r2,-1
    7378:	18800626 	beq	r3,r2,7394 <_write_r+0x54>
    737c:	1805883a 	mov	r2,r3
    7380:	dfc00217 	ldw	ra,8(sp)
    7384:	dc400117 	ldw	r17,4(sp)
    7388:	dc000017 	ldw	r16,0(sp)
    738c:	dec00304 	addi	sp,sp,12
    7390:	f800283a 	ret
    7394:	80800017 	ldw	r2,0(r16)
    7398:	103ff826 	beq	r2,zero,737c <_write_r+0x3c>
    739c:	88800015 	stw	r2,0(r17)
    73a0:	1805883a 	mov	r2,r3
    73a4:	dfc00217 	ldw	ra,8(sp)
    73a8:	dc400117 	ldw	r17,4(sp)
    73ac:	dc000017 	ldw	r16,0(sp)
    73b0:	dec00304 	addi	sp,sp,12
    73b4:	f800283a 	ret

000073b8 <_calloc_r>:
    73b8:	defffe04 	addi	sp,sp,-8
    73bc:	dc400015 	stw	r17,0(sp)
    73c0:	2023883a 	mov	r17,r4
    73c4:	2809883a 	mov	r4,r5
    73c8:	300b883a 	mov	r5,r6
    73cc:	dfc00115 	stw	ra,4(sp)
    73d0:	000972c0 	call	972c <__mulsi3>
    73d4:	100b883a 	mov	r5,r2
    73d8:	8809883a 	mov	r4,r17
    73dc:	0004f9c0 	call	4f9c <_malloc_r>
    73e0:	1023883a 	mov	r17,r2
    73e4:	01c00904 	movi	r7,36
    73e8:	10000d26 	beq	r2,zero,7420 <_calloc_r+0x68>
    73ec:	10ffff17 	ldw	r3,-4(r2)
    73f0:	1009883a 	mov	r4,r2
    73f4:	00bfff04 	movi	r2,-4
    73f8:	1886703a 	and	r3,r3,r2
    73fc:	1887883a 	add	r3,r3,r2
    7400:	180d883a 	mov	r6,r3
    7404:	000b883a 	mov	r5,zero
    7408:	38c01736 	bltu	r7,r3,7468 <_calloc_r+0xb0>
    740c:	008004c4 	movi	r2,19
    7410:	10c00836 	bltu	r2,r3,7434 <_calloc_r+0x7c>
    7414:	20000215 	stw	zero,8(r4)
    7418:	20000015 	stw	zero,0(r4)
    741c:	20000115 	stw	zero,4(r4)
    7420:	8805883a 	mov	r2,r17
    7424:	dfc00117 	ldw	ra,4(sp)
    7428:	dc400017 	ldw	r17,0(sp)
    742c:	dec00204 	addi	sp,sp,8
    7430:	f800283a 	ret
    7434:	008006c4 	movi	r2,27
    7438:	88000015 	stw	zero,0(r17)
    743c:	88000115 	stw	zero,4(r17)
    7440:	89000204 	addi	r4,r17,8
    7444:	10fff32e 	bgeu	r2,r3,7414 <_calloc_r+0x5c>
    7448:	88000215 	stw	zero,8(r17)
    744c:	88000315 	stw	zero,12(r17)
    7450:	89000404 	addi	r4,r17,16
    7454:	19ffef1e 	bne	r3,r7,7414 <_calloc_r+0x5c>
    7458:	89000604 	addi	r4,r17,24
    745c:	88000415 	stw	zero,16(r17)
    7460:	88000515 	stw	zero,20(r17)
    7464:	003feb06 	br	7414 <_calloc_r+0x5c>
    7468:	00059400 	call	5940 <memset>
    746c:	8805883a 	mov	r2,r17
    7470:	dfc00117 	ldw	ra,4(sp)
    7474:	dc400017 	ldw	r17,0(sp)
    7478:	dec00204 	addi	sp,sp,8
    747c:	f800283a 	ret

00007480 <_close_r>:
    7480:	defffd04 	addi	sp,sp,-12
    7484:	dc000015 	stw	r16,0(sp)
    7488:	04000074 	movhi	r16,1
    748c:	84078204 	addi	r16,r16,7688
    7490:	dc400115 	stw	r17,4(sp)
    7494:	80000015 	stw	zero,0(r16)
    7498:	2023883a 	mov	r17,r4
    749c:	2809883a 	mov	r4,r5
    74a0:	dfc00215 	stw	ra,8(sp)
    74a4:	0009e1c0 	call	9e1c <close>
    74a8:	1007883a 	mov	r3,r2
    74ac:	00bfffc4 	movi	r2,-1
    74b0:	18800626 	beq	r3,r2,74cc <_close_r+0x4c>
    74b4:	1805883a 	mov	r2,r3
    74b8:	dfc00217 	ldw	ra,8(sp)
    74bc:	dc400117 	ldw	r17,4(sp)
    74c0:	dc000017 	ldw	r16,0(sp)
    74c4:	dec00304 	addi	sp,sp,12
    74c8:	f800283a 	ret
    74cc:	80800017 	ldw	r2,0(r16)
    74d0:	103ff826 	beq	r2,zero,74b4 <_close_r+0x34>
    74d4:	88800015 	stw	r2,0(r17)
    74d8:	1805883a 	mov	r2,r3
    74dc:	dfc00217 	ldw	ra,8(sp)
    74e0:	dc400117 	ldw	r17,4(sp)
    74e4:	dc000017 	ldw	r16,0(sp)
    74e8:	dec00304 	addi	sp,sp,12
    74ec:	f800283a 	ret

000074f0 <_fclose_r>:
    74f0:	defffc04 	addi	sp,sp,-16
    74f4:	dc400115 	stw	r17,4(sp)
    74f8:	dc000015 	stw	r16,0(sp)
    74fc:	dfc00315 	stw	ra,12(sp)
    7500:	dc800215 	stw	r18,8(sp)
    7504:	2821883a 	mov	r16,r5
    7508:	2023883a 	mov	r17,r4
    750c:	28002926 	beq	r5,zero,75b4 <_fclose_r+0xc4>
    7510:	000404c0 	call	404c <__sfp_lock_acquire>
    7514:	88000226 	beq	r17,zero,7520 <_fclose_r+0x30>
    7518:	88800e17 	ldw	r2,56(r17)
    751c:	10002d26 	beq	r2,zero,75d4 <_fclose_r+0xe4>
    7520:	8080030f 	ldh	r2,12(r16)
    7524:	10002226 	beq	r2,zero,75b0 <_fclose_r+0xc0>
    7528:	8809883a 	mov	r4,r17
    752c:	800b883a 	mov	r5,r16
    7530:	0003dc40 	call	3dc4 <_fflush_r>
    7534:	1025883a 	mov	r18,r2
    7538:	80800b17 	ldw	r2,44(r16)
    753c:	10000426 	beq	r2,zero,7550 <_fclose_r+0x60>
    7540:	81400717 	ldw	r5,28(r16)
    7544:	8809883a 	mov	r4,r17
    7548:	103ee83a 	callr	r2
    754c:	10002a16 	blt	r2,zero,75f8 <_fclose_r+0x108>
    7550:	8080030b 	ldhu	r2,12(r16)
    7554:	1080200c 	andi	r2,r2,128
    7558:	1000231e 	bne	r2,zero,75e8 <_fclose_r+0xf8>
    755c:	81400c17 	ldw	r5,48(r16)
    7560:	28000526 	beq	r5,zero,7578 <_fclose_r+0x88>
    7564:	80801004 	addi	r2,r16,64
    7568:	28800226 	beq	r5,r2,7574 <_fclose_r+0x84>
    756c:	8809883a 	mov	r4,r17
    7570:	00044140 	call	4414 <_free_r>
    7574:	80000c15 	stw	zero,48(r16)
    7578:	81401117 	ldw	r5,68(r16)
    757c:	28000326 	beq	r5,zero,758c <_fclose_r+0x9c>
    7580:	8809883a 	mov	r4,r17
    7584:	00044140 	call	4414 <_free_r>
    7588:	80001115 	stw	zero,68(r16)
    758c:	8000030d 	sth	zero,12(r16)
    7590:	00040500 	call	4050 <__sfp_lock_release>
    7594:	9005883a 	mov	r2,r18
    7598:	dfc00317 	ldw	ra,12(sp)
    759c:	dc800217 	ldw	r18,8(sp)
    75a0:	dc400117 	ldw	r17,4(sp)
    75a4:	dc000017 	ldw	r16,0(sp)
    75a8:	dec00404 	addi	sp,sp,16
    75ac:	f800283a 	ret
    75b0:	00040500 	call	4050 <__sfp_lock_release>
    75b4:	0025883a 	mov	r18,zero
    75b8:	9005883a 	mov	r2,r18
    75bc:	dfc00317 	ldw	ra,12(sp)
    75c0:	dc800217 	ldw	r18,8(sp)
    75c4:	dc400117 	ldw	r17,4(sp)
    75c8:	dc000017 	ldw	r16,0(sp)
    75cc:	dec00404 	addi	sp,sp,16
    75d0:	f800283a 	ret
    75d4:	8809883a 	mov	r4,r17
    75d8:	000405c0 	call	405c <__sinit>
    75dc:	8080030f 	ldh	r2,12(r16)
    75e0:	103fd11e 	bne	r2,zero,7528 <_fclose_r+0x38>
    75e4:	003ff206 	br	75b0 <_fclose_r+0xc0>
    75e8:	81400417 	ldw	r5,16(r16)
    75ec:	8809883a 	mov	r4,r17
    75f0:	00044140 	call	4414 <_free_r>
    75f4:	003fd906 	br	755c <_fclose_r+0x6c>
    75f8:	04bfffc4 	movi	r18,-1
    75fc:	003fd406 	br	7550 <_fclose_r+0x60>

00007600 <fclose>:
    7600:	00800074 	movhi	r2,1
    7604:	10876704 	addi	r2,r2,7580
    7608:	200b883a 	mov	r5,r4
    760c:	11000017 	ldw	r4,0(r2)
    7610:	00074f01 	jmpi	74f0 <_fclose_r>

00007614 <_fstat_r>:
    7614:	defffd04 	addi	sp,sp,-12
    7618:	dc000015 	stw	r16,0(sp)
    761c:	04000074 	movhi	r16,1
    7620:	84078204 	addi	r16,r16,7688
    7624:	dc400115 	stw	r17,4(sp)
    7628:	80000015 	stw	zero,0(r16)
    762c:	2023883a 	mov	r17,r4
    7630:	2809883a 	mov	r4,r5
    7634:	300b883a 	mov	r5,r6
    7638:	dfc00215 	stw	ra,8(sp)
    763c:	0009fa80 	call	9fa8 <fstat>
    7640:	1007883a 	mov	r3,r2
    7644:	00bfffc4 	movi	r2,-1
    7648:	18800626 	beq	r3,r2,7664 <_fstat_r+0x50>
    764c:	1805883a 	mov	r2,r3
    7650:	dfc00217 	ldw	ra,8(sp)
    7654:	dc400117 	ldw	r17,4(sp)
    7658:	dc000017 	ldw	r16,0(sp)
    765c:	dec00304 	addi	sp,sp,12
    7660:	f800283a 	ret
    7664:	80800017 	ldw	r2,0(r16)
    7668:	103ff826 	beq	r2,zero,764c <_fstat_r+0x38>
    766c:	88800015 	stw	r2,0(r17)
    7670:	1805883a 	mov	r2,r3
    7674:	dfc00217 	ldw	ra,8(sp)
    7678:	dc400117 	ldw	r17,4(sp)
    767c:	dc000017 	ldw	r16,0(sp)
    7680:	dec00304 	addi	sp,sp,12
    7684:	f800283a 	ret

00007688 <_isatty_r>:
    7688:	defffd04 	addi	sp,sp,-12
    768c:	dc000015 	stw	r16,0(sp)
    7690:	04000074 	movhi	r16,1
    7694:	84078204 	addi	r16,r16,7688
    7698:	dc400115 	stw	r17,4(sp)
    769c:	80000015 	stw	zero,0(r16)
    76a0:	2023883a 	mov	r17,r4
    76a4:	2809883a 	mov	r4,r5
    76a8:	dfc00215 	stw	ra,8(sp)
    76ac:	000a0e00 	call	a0e0 <isatty>
    76b0:	1007883a 	mov	r3,r2
    76b4:	00bfffc4 	movi	r2,-1
    76b8:	18800626 	beq	r3,r2,76d4 <_isatty_r+0x4c>
    76bc:	1805883a 	mov	r2,r3
    76c0:	dfc00217 	ldw	ra,8(sp)
    76c4:	dc400117 	ldw	r17,4(sp)
    76c8:	dc000017 	ldw	r16,0(sp)
    76cc:	dec00304 	addi	sp,sp,12
    76d0:	f800283a 	ret
    76d4:	80800017 	ldw	r2,0(r16)
    76d8:	103ff826 	beq	r2,zero,76bc <_isatty_r+0x34>
    76dc:	88800015 	stw	r2,0(r17)
    76e0:	1805883a 	mov	r2,r3
    76e4:	dfc00217 	ldw	ra,8(sp)
    76e8:	dc400117 	ldw	r17,4(sp)
    76ec:	dc000017 	ldw	r16,0(sp)
    76f0:	dec00304 	addi	sp,sp,12
    76f4:	f800283a 	ret

000076f8 <_lseek_r>:
    76f8:	defffd04 	addi	sp,sp,-12
    76fc:	dc000015 	stw	r16,0(sp)
    7700:	04000074 	movhi	r16,1
    7704:	84078204 	addi	r16,r16,7688
    7708:	dc400115 	stw	r17,4(sp)
    770c:	80000015 	stw	zero,0(r16)
    7710:	2023883a 	mov	r17,r4
    7714:	2809883a 	mov	r4,r5
    7718:	300b883a 	mov	r5,r6
    771c:	380d883a 	mov	r6,r7
    7720:	dfc00215 	stw	ra,8(sp)
    7724:	000a2f00 	call	a2f0 <lseek>
    7728:	1007883a 	mov	r3,r2
    772c:	00bfffc4 	movi	r2,-1
    7730:	18800626 	beq	r3,r2,774c <_lseek_r+0x54>
    7734:	1805883a 	mov	r2,r3
    7738:	dfc00217 	ldw	ra,8(sp)
    773c:	dc400117 	ldw	r17,4(sp)
    7740:	dc000017 	ldw	r16,0(sp)
    7744:	dec00304 	addi	sp,sp,12
    7748:	f800283a 	ret
    774c:	80800017 	ldw	r2,0(r16)
    7750:	103ff826 	beq	r2,zero,7734 <_lseek_r+0x3c>
    7754:	88800015 	stw	r2,0(r17)
    7758:	1805883a 	mov	r2,r3
    775c:	dfc00217 	ldw	ra,8(sp)
    7760:	dc400117 	ldw	r17,4(sp)
    7764:	dc000017 	ldw	r16,0(sp)
    7768:	dec00304 	addi	sp,sp,12
    776c:	f800283a 	ret

00007770 <_read_r>:
    7770:	defffd04 	addi	sp,sp,-12
    7774:	dc000015 	stw	r16,0(sp)
    7778:	04000074 	movhi	r16,1
    777c:	84078204 	addi	r16,r16,7688
    7780:	dc400115 	stw	r17,4(sp)
    7784:	80000015 	stw	zero,0(r16)
    7788:	2023883a 	mov	r17,r4
    778c:	2809883a 	mov	r4,r5
    7790:	300b883a 	mov	r5,r6
    7794:	380d883a 	mov	r6,r7
    7798:	dfc00215 	stw	ra,8(sp)
    779c:	000a4f00 	call	a4f0 <read>
    77a0:	1007883a 	mov	r3,r2
    77a4:	00bfffc4 	movi	r2,-1
    77a8:	18800626 	beq	r3,r2,77c4 <_read_r+0x54>
    77ac:	1805883a 	mov	r2,r3
    77b0:	dfc00217 	ldw	ra,8(sp)
    77b4:	dc400117 	ldw	r17,4(sp)
    77b8:	dc000017 	ldw	r16,0(sp)
    77bc:	dec00304 	addi	sp,sp,12
    77c0:	f800283a 	ret
    77c4:	80800017 	ldw	r2,0(r16)
    77c8:	103ff826 	beq	r2,zero,77ac <_read_r+0x3c>
    77cc:	88800015 	stw	r2,0(r17)
    77d0:	1805883a 	mov	r2,r3
    77d4:	dfc00217 	ldw	ra,8(sp)
    77d8:	dc400117 	ldw	r17,4(sp)
    77dc:	dc000017 	ldw	r16,0(sp)
    77e0:	dec00304 	addi	sp,sp,12
    77e4:	f800283a 	ret

000077e8 <__udivdi3>:
    77e8:	defff104 	addi	sp,sp,-60
    77ec:	0015883a 	mov	r10,zero
    77f0:	2005883a 	mov	r2,r4
    77f4:	3011883a 	mov	r8,r6
    77f8:	df000d15 	stw	fp,52(sp)
    77fc:	dd400a15 	stw	r21,40(sp)
    7800:	dcc00815 	stw	r19,32(sp)
    7804:	dfc00e15 	stw	ra,56(sp)
    7808:	ddc00c15 	stw	r23,48(sp)
    780c:	dd800b15 	stw	r22,44(sp)
    7810:	dd000915 	stw	r20,36(sp)
    7814:	dc800715 	stw	r18,28(sp)
    7818:	dc400615 	stw	r17,24(sp)
    781c:	dc000515 	stw	r16,20(sp)
    7820:	da800315 	stw	r10,12(sp)
    7824:	4027883a 	mov	r19,r8
    7828:	1039883a 	mov	fp,r2
    782c:	282b883a 	mov	r21,r5
    7830:	da800415 	stw	r10,16(sp)
    7834:	3800401e 	bne	r7,zero,7938 <__udivdi3+0x150>
    7838:	2a006536 	bltu	r5,r8,79d0 <__udivdi3+0x1e8>
    783c:	4000b526 	beq	r8,zero,7b14 <__udivdi3+0x32c>
    7840:	00bfffd4 	movui	r2,65535
    7844:	14c0ad36 	bltu	r2,r19,7afc <__udivdi3+0x314>
    7848:	00803fc4 	movi	r2,255
    784c:	14c15e36 	bltu	r2,r19,7dc8 <__udivdi3+0x5e0>
    7850:	000b883a 	mov	r5,zero
    7854:	0005883a 	mov	r2,zero
    7858:	9884d83a 	srl	r2,r19,r2
    785c:	01000074 	movhi	r4,1
    7860:	21009304 	addi	r4,r4,588
    7864:	01800804 	movi	r6,32
    7868:	1105883a 	add	r2,r2,r4
    786c:	10c00003 	ldbu	r3,0(r2)
    7870:	28c7883a 	add	r3,r5,r3
    7874:	30e9c83a 	sub	r20,r6,r3
    7878:	a0010a1e 	bne	r20,zero,7ca4 <__udivdi3+0x4bc>
    787c:	982ed43a 	srli	r23,r19,16
    7880:	acebc83a 	sub	r21,r21,r19
    7884:	9dbfffcc 	andi	r22,r19,65535
    7888:	05000044 	movi	r20,1
    788c:	a809883a 	mov	r4,r21
    7890:	b80b883a 	mov	r5,r23
    7894:	000971c0 	call	971c <__udivsi3>
    7898:	100b883a 	mov	r5,r2
    789c:	b009883a 	mov	r4,r22
    78a0:	1021883a 	mov	r16,r2
    78a4:	000972c0 	call	972c <__mulsi3>
    78a8:	a809883a 	mov	r4,r21
    78ac:	b80b883a 	mov	r5,r23
    78b0:	1023883a 	mov	r17,r2
    78b4:	00097240 	call	9724 <__umodsi3>
    78b8:	1004943a 	slli	r2,r2,16
    78bc:	e006d43a 	srli	r3,fp,16
    78c0:	10c4b03a 	or	r2,r2,r3
    78c4:	1440042e 	bgeu	r2,r17,78d8 <__udivdi3+0xf0>
    78c8:	14c5883a 	add	r2,r2,r19
    78cc:	843fffc4 	addi	r16,r16,-1
    78d0:	14c00136 	bltu	r2,r19,78d8 <__udivdi3+0xf0>
    78d4:	14415c36 	bltu	r2,r17,7e48 <__udivdi3+0x660>
    78d8:	1463c83a 	sub	r17,r2,r17
    78dc:	8809883a 	mov	r4,r17
    78e0:	b80b883a 	mov	r5,r23
    78e4:	000971c0 	call	971c <__udivsi3>
    78e8:	100b883a 	mov	r5,r2
    78ec:	b009883a 	mov	r4,r22
    78f0:	102b883a 	mov	r21,r2
    78f4:	000972c0 	call	972c <__mulsi3>
    78f8:	8809883a 	mov	r4,r17
    78fc:	b80b883a 	mov	r5,r23
    7900:	1025883a 	mov	r18,r2
    7904:	00097240 	call	9724 <__umodsi3>
    7908:	1004943a 	slli	r2,r2,16
    790c:	e0ffffcc 	andi	r3,fp,65535
    7910:	10c4b03a 	or	r2,r2,r3
    7914:	1480042e 	bgeu	r2,r18,7928 <__udivdi3+0x140>
    7918:	9885883a 	add	r2,r19,r2
    791c:	ad7fffc4 	addi	r21,r21,-1
    7920:	14c00136 	bltu	r2,r19,7928 <__udivdi3+0x140>
    7924:	14813c36 	bltu	r2,r18,7e18 <__udivdi3+0x630>
    7928:	8004943a 	slli	r2,r16,16
    792c:	a009883a 	mov	r4,r20
    7930:	a884b03a 	or	r2,r21,r2
    7934:	00001506 	br	798c <__udivdi3+0x1a4>
    7938:	380d883a 	mov	r6,r7
    793c:	29c06c36 	bltu	r5,r7,7af0 <__udivdi3+0x308>
    7940:	00bfffd4 	movui	r2,65535
    7944:	11c06436 	bltu	r2,r7,7ad8 <__udivdi3+0x2f0>
    7948:	00803fc4 	movi	r2,255
    794c:	11c11836 	bltu	r2,r7,7db0 <__udivdi3+0x5c8>
    7950:	000b883a 	mov	r5,zero
    7954:	0005883a 	mov	r2,zero
    7958:	3084d83a 	srl	r2,r6,r2
    795c:	01000074 	movhi	r4,1
    7960:	21009304 	addi	r4,r4,588
    7964:	01c00804 	movi	r7,32
    7968:	1105883a 	add	r2,r2,r4
    796c:	10c00003 	ldbu	r3,0(r2)
    7970:	28c7883a 	add	r3,r5,r3
    7974:	38edc83a 	sub	r22,r7,r3
    7978:	b000731e 	bne	r22,zero,7b48 <__udivdi3+0x360>
    797c:	35400136 	bltu	r6,r21,7984 <__udivdi3+0x19c>
    7980:	e4c05b36 	bltu	fp,r19,7af0 <__udivdi3+0x308>
    7984:	00800044 	movi	r2,1
    7988:	0009883a 	mov	r4,zero
    798c:	d8800315 	stw	r2,12(sp)
    7990:	d9400317 	ldw	r5,12(sp)
    7994:	2007883a 	mov	r3,r4
    7998:	d9000415 	stw	r4,16(sp)
    799c:	2805883a 	mov	r2,r5
    79a0:	dfc00e17 	ldw	ra,56(sp)
    79a4:	df000d17 	ldw	fp,52(sp)
    79a8:	ddc00c17 	ldw	r23,48(sp)
    79ac:	dd800b17 	ldw	r22,44(sp)
    79b0:	dd400a17 	ldw	r21,40(sp)
    79b4:	dd000917 	ldw	r20,36(sp)
    79b8:	dcc00817 	ldw	r19,32(sp)
    79bc:	dc800717 	ldw	r18,28(sp)
    79c0:	dc400617 	ldw	r17,24(sp)
    79c4:	dc000517 	ldw	r16,20(sp)
    79c8:	dec00f04 	addi	sp,sp,60
    79cc:	f800283a 	ret
    79d0:	00bfffd4 	movui	r2,65535
    79d4:	12005636 	bltu	r2,r8,7b30 <__udivdi3+0x348>
    79d8:	00803fc4 	movi	r2,255
    79dc:	12010036 	bltu	r2,r8,7de0 <__udivdi3+0x5f8>
    79e0:	000b883a 	mov	r5,zero
    79e4:	0005883a 	mov	r2,zero
    79e8:	9884d83a 	srl	r2,r19,r2
    79ec:	01000074 	movhi	r4,1
    79f0:	21009304 	addi	r4,r4,588
    79f4:	01800804 	movi	r6,32
    79f8:	1105883a 	add	r2,r2,r4
    79fc:	10c00003 	ldbu	r3,0(r2)
    7a00:	28c7883a 	add	r3,r5,r3
    7a04:	30cbc83a 	sub	r5,r6,r3
    7a08:	28000626 	beq	r5,zero,7a24 <__udivdi3+0x23c>
    7a0c:	3145c83a 	sub	r2,r6,r5
    7a10:	e084d83a 	srl	r2,fp,r2
    7a14:	a946983a 	sll	r3,r21,r5
    7a18:	e178983a 	sll	fp,fp,r5
    7a1c:	9966983a 	sll	r19,r19,r5
    7a20:	18aab03a 	or	r21,r3,r2
    7a24:	982ed43a 	srli	r23,r19,16
    7a28:	a809883a 	mov	r4,r21
    7a2c:	9cbfffcc 	andi	r18,r19,65535
    7a30:	b80b883a 	mov	r5,r23
    7a34:	000971c0 	call	971c <__udivsi3>
    7a38:	100b883a 	mov	r5,r2
    7a3c:	9009883a 	mov	r4,r18
    7a40:	1021883a 	mov	r16,r2
    7a44:	000972c0 	call	972c <__mulsi3>
    7a48:	a809883a 	mov	r4,r21
    7a4c:	b80b883a 	mov	r5,r23
    7a50:	1023883a 	mov	r17,r2
    7a54:	00097240 	call	9724 <__umodsi3>
    7a58:	1004943a 	slli	r2,r2,16
    7a5c:	e006d43a 	srli	r3,fp,16
    7a60:	10c4b03a 	or	r2,r2,r3
    7a64:	1440042e 	bgeu	r2,r17,7a78 <__udivdi3+0x290>
    7a68:	14c5883a 	add	r2,r2,r19
    7a6c:	843fffc4 	addi	r16,r16,-1
    7a70:	14c00136 	bltu	r2,r19,7a78 <__udivdi3+0x290>
    7a74:	1440ea36 	bltu	r2,r17,7e20 <__udivdi3+0x638>
    7a78:	1463c83a 	sub	r17,r2,r17
    7a7c:	8809883a 	mov	r4,r17
    7a80:	b80b883a 	mov	r5,r23
    7a84:	000971c0 	call	971c <__udivsi3>
    7a88:	100b883a 	mov	r5,r2
    7a8c:	9009883a 	mov	r4,r18
    7a90:	102b883a 	mov	r21,r2
    7a94:	000972c0 	call	972c <__mulsi3>
    7a98:	8809883a 	mov	r4,r17
    7a9c:	b80b883a 	mov	r5,r23
    7aa0:	1025883a 	mov	r18,r2
    7aa4:	00097240 	call	9724 <__umodsi3>
    7aa8:	1004943a 	slli	r2,r2,16
    7aac:	e0ffffcc 	andi	r3,fp,65535
    7ab0:	10c4b03a 	or	r2,r2,r3
    7ab4:	1480042e 	bgeu	r2,r18,7ac8 <__udivdi3+0x2e0>
    7ab8:	9885883a 	add	r2,r19,r2
    7abc:	ad7fffc4 	addi	r21,r21,-1
    7ac0:	14c00136 	bltu	r2,r19,7ac8 <__udivdi3+0x2e0>
    7ac4:	1480d936 	bltu	r2,r18,7e2c <__udivdi3+0x644>
    7ac8:	8004943a 	slli	r2,r16,16
    7acc:	0009883a 	mov	r4,zero
    7ad0:	a884b03a 	or	r2,r21,r2
    7ad4:	003fad06 	br	798c <__udivdi3+0x1a4>
    7ad8:	00804034 	movhi	r2,256
    7adc:	10bfffc4 	addi	r2,r2,-1
    7ae0:	11c0b636 	bltu	r2,r7,7dbc <__udivdi3+0x5d4>
    7ae4:	01400404 	movi	r5,16
    7ae8:	2805883a 	mov	r2,r5
    7aec:	003f9a06 	br	7958 <__udivdi3+0x170>
    7af0:	0005883a 	mov	r2,zero
    7af4:	0009883a 	mov	r4,zero
    7af8:	003fa406 	br	798c <__udivdi3+0x1a4>
    7afc:	00804034 	movhi	r2,256
    7b00:	10bfffc4 	addi	r2,r2,-1
    7b04:	14c0b336 	bltu	r2,r19,7dd4 <__udivdi3+0x5ec>
    7b08:	01400404 	movi	r5,16
    7b0c:	2805883a 	mov	r2,r5
    7b10:	003f5106 	br	7858 <__udivdi3+0x70>
    7b14:	01000044 	movi	r4,1
    7b18:	000b883a 	mov	r5,zero
    7b1c:	000971c0 	call	971c <__udivsi3>
    7b20:	1027883a 	mov	r19,r2
    7b24:	00bfffd4 	movui	r2,65535
    7b28:	14fff436 	bltu	r2,r19,7afc <__udivdi3+0x314>
    7b2c:	003f4606 	br	7848 <__udivdi3+0x60>
    7b30:	00804034 	movhi	r2,256
    7b34:	10bfffc4 	addi	r2,r2,-1
    7b38:	1200ac36 	bltu	r2,r8,7dec <__udivdi3+0x604>
    7b3c:	01400404 	movi	r5,16
    7b40:	2805883a 	mov	r2,r5
    7b44:	003fa806 	br	79e8 <__udivdi3+0x200>
    7b48:	3d85c83a 	sub	r2,r7,r22
    7b4c:	3588983a 	sll	r4,r6,r22
    7b50:	9886d83a 	srl	r3,r19,r2
    7b54:	a8a2d83a 	srl	r17,r21,r2
    7b58:	e084d83a 	srl	r2,fp,r2
    7b5c:	20eeb03a 	or	r23,r4,r3
    7b60:	b824d43a 	srli	r18,r23,16
    7b64:	ad86983a 	sll	r3,r21,r22
    7b68:	8809883a 	mov	r4,r17
    7b6c:	900b883a 	mov	r5,r18
    7b70:	1886b03a 	or	r3,r3,r2
    7b74:	d8c00115 	stw	r3,4(sp)
    7b78:	bc3fffcc 	andi	r16,r23,65535
    7b7c:	000971c0 	call	971c <__udivsi3>
    7b80:	100b883a 	mov	r5,r2
    7b84:	8009883a 	mov	r4,r16
    7b88:	1029883a 	mov	r20,r2
    7b8c:	000972c0 	call	972c <__mulsi3>
    7b90:	900b883a 	mov	r5,r18
    7b94:	8809883a 	mov	r4,r17
    7b98:	102b883a 	mov	r21,r2
    7b9c:	00097240 	call	9724 <__umodsi3>
    7ba0:	d9400117 	ldw	r5,4(sp)
    7ba4:	1004943a 	slli	r2,r2,16
    7ba8:	9da6983a 	sll	r19,r19,r22
    7bac:	2806d43a 	srli	r3,r5,16
    7bb0:	10c4b03a 	or	r2,r2,r3
    7bb4:	1540032e 	bgeu	r2,r21,7bc4 <__udivdi3+0x3dc>
    7bb8:	15c5883a 	add	r2,r2,r23
    7bbc:	a53fffc4 	addi	r20,r20,-1
    7bc0:	15c0912e 	bgeu	r2,r23,7e08 <__udivdi3+0x620>
    7bc4:	1563c83a 	sub	r17,r2,r21
    7bc8:	8809883a 	mov	r4,r17
    7bcc:	900b883a 	mov	r5,r18
    7bd0:	000971c0 	call	971c <__udivsi3>
    7bd4:	100b883a 	mov	r5,r2
    7bd8:	8009883a 	mov	r4,r16
    7bdc:	102b883a 	mov	r21,r2
    7be0:	000972c0 	call	972c <__mulsi3>
    7be4:	8809883a 	mov	r4,r17
    7be8:	900b883a 	mov	r5,r18
    7bec:	1021883a 	mov	r16,r2
    7bf0:	00097240 	call	9724 <__umodsi3>
    7bf4:	da800117 	ldw	r10,4(sp)
    7bf8:	1004943a 	slli	r2,r2,16
    7bfc:	50ffffcc 	andi	r3,r10,65535
    7c00:	10c6b03a 	or	r3,r2,r3
    7c04:	1c00032e 	bgeu	r3,r16,7c14 <__udivdi3+0x42c>
    7c08:	1dc7883a 	add	r3,r3,r23
    7c0c:	ad7fffc4 	addi	r21,r21,-1
    7c10:	1dc0792e 	bgeu	r3,r23,7df8 <__udivdi3+0x610>
    7c14:	a004943a 	slli	r2,r20,16
    7c18:	982ed43a 	srli	r23,r19,16
    7c1c:	9cffffcc 	andi	r19,r19,65535
    7c20:	a8a4b03a 	or	r18,r21,r2
    7c24:	947fffcc 	andi	r17,r18,65535
    7c28:	902ad43a 	srli	r21,r18,16
    7c2c:	8809883a 	mov	r4,r17
    7c30:	980b883a 	mov	r5,r19
    7c34:	1c21c83a 	sub	r16,r3,r16
    7c38:	000972c0 	call	972c <__mulsi3>
    7c3c:	8809883a 	mov	r4,r17
    7c40:	b80b883a 	mov	r5,r23
    7c44:	1029883a 	mov	r20,r2
    7c48:	000972c0 	call	972c <__mulsi3>
    7c4c:	980b883a 	mov	r5,r19
    7c50:	a809883a 	mov	r4,r21
    7c54:	1023883a 	mov	r17,r2
    7c58:	000972c0 	call	972c <__mulsi3>
    7c5c:	a809883a 	mov	r4,r21
    7c60:	b80b883a 	mov	r5,r23
    7c64:	1027883a 	mov	r19,r2
    7c68:	000972c0 	call	972c <__mulsi3>
    7c6c:	1009883a 	mov	r4,r2
    7c70:	a004d43a 	srli	r2,r20,16
    7c74:	8ce3883a 	add	r17,r17,r19
    7c78:	1447883a 	add	r3,r2,r17
    7c7c:	1cc0022e 	bgeu	r3,r19,7c88 <__udivdi3+0x4a0>
    7c80:	00800074 	movhi	r2,1
    7c84:	2089883a 	add	r4,r4,r2
    7c88:	1804d43a 	srli	r2,r3,16
    7c8c:	2085883a 	add	r2,r4,r2
    7c90:	80804436 	bltu	r16,r2,7da4 <__udivdi3+0x5bc>
    7c94:	80803e26 	beq	r16,r2,7d90 <__udivdi3+0x5a8>
    7c98:	9005883a 	mov	r2,r18
    7c9c:	0009883a 	mov	r4,zero
    7ca0:	003f3a06 	br	798c <__udivdi3+0x1a4>
    7ca4:	9d26983a 	sll	r19,r19,r20
    7ca8:	3505c83a 	sub	r2,r6,r20
    7cac:	a8a2d83a 	srl	r17,r21,r2
    7cb0:	982ed43a 	srli	r23,r19,16
    7cb4:	e084d83a 	srl	r2,fp,r2
    7cb8:	ad06983a 	sll	r3,r21,r20
    7cbc:	8809883a 	mov	r4,r17
    7cc0:	b80b883a 	mov	r5,r23
    7cc4:	1886b03a 	or	r3,r3,r2
    7cc8:	d8c00015 	stw	r3,0(sp)
    7ccc:	9dbfffcc 	andi	r22,r19,65535
    7cd0:	000971c0 	call	971c <__udivsi3>
    7cd4:	100b883a 	mov	r5,r2
    7cd8:	b009883a 	mov	r4,r22
    7cdc:	d8800215 	stw	r2,8(sp)
    7ce0:	000972c0 	call	972c <__mulsi3>
    7ce4:	8809883a 	mov	r4,r17
    7ce8:	b80b883a 	mov	r5,r23
    7cec:	102b883a 	mov	r21,r2
    7cf0:	00097240 	call	9724 <__umodsi3>
    7cf4:	d9000017 	ldw	r4,0(sp)
    7cf8:	1004943a 	slli	r2,r2,16
    7cfc:	2006d43a 	srli	r3,r4,16
    7d00:	10c4b03a 	or	r2,r2,r3
    7d04:	1540052e 	bgeu	r2,r21,7d1c <__udivdi3+0x534>
    7d08:	d9400217 	ldw	r5,8(sp)
    7d0c:	14c5883a 	add	r2,r2,r19
    7d10:	297fffc4 	addi	r5,r5,-1
    7d14:	d9400215 	stw	r5,8(sp)
    7d18:	14c0462e 	bgeu	r2,r19,7e34 <__udivdi3+0x64c>
    7d1c:	1563c83a 	sub	r17,r2,r21
    7d20:	8809883a 	mov	r4,r17
    7d24:	b80b883a 	mov	r5,r23
    7d28:	000971c0 	call	971c <__udivsi3>
    7d2c:	100b883a 	mov	r5,r2
    7d30:	b009883a 	mov	r4,r22
    7d34:	1025883a 	mov	r18,r2
    7d38:	000972c0 	call	972c <__mulsi3>
    7d3c:	8809883a 	mov	r4,r17
    7d40:	b80b883a 	mov	r5,r23
    7d44:	1021883a 	mov	r16,r2
    7d48:	00097240 	call	9724 <__umodsi3>
    7d4c:	da800017 	ldw	r10,0(sp)
    7d50:	1004943a 	slli	r2,r2,16
    7d54:	50ffffcc 	andi	r3,r10,65535
    7d58:	10c6b03a 	or	r3,r2,r3
    7d5c:	1c00062e 	bgeu	r3,r16,7d78 <__udivdi3+0x590>
    7d60:	1cc7883a 	add	r3,r3,r19
    7d64:	94bfffc4 	addi	r18,r18,-1
    7d68:	1cc00336 	bltu	r3,r19,7d78 <__udivdi3+0x590>
    7d6c:	1c00022e 	bgeu	r3,r16,7d78 <__udivdi3+0x590>
    7d70:	94bfffc4 	addi	r18,r18,-1
    7d74:	1cc7883a 	add	r3,r3,r19
    7d78:	d9000217 	ldw	r4,8(sp)
    7d7c:	e538983a 	sll	fp,fp,r20
    7d80:	1c2bc83a 	sub	r21,r3,r16
    7d84:	2004943a 	slli	r2,r4,16
    7d88:	90a8b03a 	or	r20,r18,r2
    7d8c:	003ebf06 	br	788c <__udivdi3+0xa4>
    7d90:	1804943a 	slli	r2,r3,16
    7d94:	e588983a 	sll	r4,fp,r22
    7d98:	a0ffffcc 	andi	r3,r20,65535
    7d9c:	10c5883a 	add	r2,r2,r3
    7da0:	20bfbd2e 	bgeu	r4,r2,7c98 <__udivdi3+0x4b0>
    7da4:	90bfffc4 	addi	r2,r18,-1
    7da8:	0009883a 	mov	r4,zero
    7dac:	003ef706 	br	798c <__udivdi3+0x1a4>
    7db0:	01400204 	movi	r5,8
    7db4:	2805883a 	mov	r2,r5
    7db8:	003ee706 	br	7958 <__udivdi3+0x170>
    7dbc:	01400604 	movi	r5,24
    7dc0:	2805883a 	mov	r2,r5
    7dc4:	003ee406 	br	7958 <__udivdi3+0x170>
    7dc8:	01400204 	movi	r5,8
    7dcc:	2805883a 	mov	r2,r5
    7dd0:	003ea106 	br	7858 <__udivdi3+0x70>
    7dd4:	01400604 	movi	r5,24
    7dd8:	2805883a 	mov	r2,r5
    7ddc:	003e9e06 	br	7858 <__udivdi3+0x70>
    7de0:	01400204 	movi	r5,8
    7de4:	2805883a 	mov	r2,r5
    7de8:	003eff06 	br	79e8 <__udivdi3+0x200>
    7dec:	01400604 	movi	r5,24
    7df0:	2805883a 	mov	r2,r5
    7df4:	003efc06 	br	79e8 <__udivdi3+0x200>
    7df8:	1c3f862e 	bgeu	r3,r16,7c14 <__udivdi3+0x42c>
    7dfc:	1dc7883a 	add	r3,r3,r23
    7e00:	ad7fffc4 	addi	r21,r21,-1
    7e04:	003f8306 	br	7c14 <__udivdi3+0x42c>
    7e08:	157f6e2e 	bgeu	r2,r21,7bc4 <__udivdi3+0x3dc>
    7e0c:	a53fffc4 	addi	r20,r20,-1
    7e10:	15c5883a 	add	r2,r2,r23
    7e14:	003f6b06 	br	7bc4 <__udivdi3+0x3dc>
    7e18:	ad7fffc4 	addi	r21,r21,-1
    7e1c:	003ec206 	br	7928 <__udivdi3+0x140>
    7e20:	843fffc4 	addi	r16,r16,-1
    7e24:	14c5883a 	add	r2,r2,r19
    7e28:	003f1306 	br	7a78 <__udivdi3+0x290>
    7e2c:	ad7fffc4 	addi	r21,r21,-1
    7e30:	003f2506 	br	7ac8 <__udivdi3+0x2e0>
    7e34:	157fb92e 	bgeu	r2,r21,7d1c <__udivdi3+0x534>
    7e38:	297fffc4 	addi	r5,r5,-1
    7e3c:	14c5883a 	add	r2,r2,r19
    7e40:	d9400215 	stw	r5,8(sp)
    7e44:	003fb506 	br	7d1c <__udivdi3+0x534>
    7e48:	843fffc4 	addi	r16,r16,-1
    7e4c:	14c5883a 	add	r2,r2,r19
    7e50:	003ea106 	br	78d8 <__udivdi3+0xf0>

00007e54 <__umoddi3>:
    7e54:	defff004 	addi	sp,sp,-64
    7e58:	3011883a 	mov	r8,r6
    7e5c:	000d883a 	mov	r6,zero
    7e60:	dd400b15 	stw	r21,44(sp)
    7e64:	dcc00915 	stw	r19,36(sp)
    7e68:	dc000615 	stw	r16,24(sp)
    7e6c:	dfc00f15 	stw	ra,60(sp)
    7e70:	df000e15 	stw	fp,56(sp)
    7e74:	ddc00d15 	stw	r23,52(sp)
    7e78:	dd800c15 	stw	r22,48(sp)
    7e7c:	dd000a15 	stw	r20,40(sp)
    7e80:	dc800815 	stw	r18,32(sp)
    7e84:	dc400715 	stw	r17,28(sp)
    7e88:	2817883a 	mov	r11,r5
    7e8c:	d9800415 	stw	r6,16(sp)
    7e90:	4027883a 	mov	r19,r8
    7e94:	d9800515 	stw	r6,20(sp)
    7e98:	2021883a 	mov	r16,r4
    7e9c:	282b883a 	mov	r21,r5
    7ea0:	38002c1e 	bne	r7,zero,7f54 <__umoddi3+0x100>
    7ea4:	2a005636 	bltu	r5,r8,8000 <__umoddi3+0x1ac>
    7ea8:	40009a26 	beq	r8,zero,8114 <__umoddi3+0x2c0>
    7eac:	00bfffd4 	movui	r2,65535
    7eb0:	14c09236 	bltu	r2,r19,80fc <__umoddi3+0x2a8>
    7eb4:	00803fc4 	movi	r2,255
    7eb8:	14c15c36 	bltu	r2,r19,842c <__umoddi3+0x5d8>
    7ebc:	000b883a 	mov	r5,zero
    7ec0:	0005883a 	mov	r2,zero
    7ec4:	9884d83a 	srl	r2,r19,r2
    7ec8:	01000074 	movhi	r4,1
    7ecc:	21009304 	addi	r4,r4,588
    7ed0:	01800804 	movi	r6,32
    7ed4:	1105883a 	add	r2,r2,r4
    7ed8:	10c00003 	ldbu	r3,0(r2)
    7edc:	28c7883a 	add	r3,r5,r3
    7ee0:	30e5c83a 	sub	r18,r6,r3
    7ee4:	9000a41e 	bne	r18,zero,8178 <__umoddi3+0x324>
    7ee8:	982ed43a 	srli	r23,r19,16
    7eec:	acebc83a 	sub	r21,r21,r19
    7ef0:	9d3fffcc 	andi	r20,r19,65535
    7ef4:	002d883a 	mov	r22,zero
    7ef8:	a809883a 	mov	r4,r21
    7efc:	b80b883a 	mov	r5,r23
    7f00:	000971c0 	call	971c <__udivsi3>
    7f04:	100b883a 	mov	r5,r2
    7f08:	a009883a 	mov	r4,r20
    7f0c:	000972c0 	call	972c <__mulsi3>
    7f10:	a809883a 	mov	r4,r21
    7f14:	b80b883a 	mov	r5,r23
    7f18:	1023883a 	mov	r17,r2
    7f1c:	00097240 	call	9724 <__umodsi3>
    7f20:	1004943a 	slli	r2,r2,16
    7f24:	8006d43a 	srli	r3,r16,16
    7f28:	10c4b03a 	or	r2,r2,r3
    7f2c:	1440032e 	bgeu	r2,r17,7f3c <__umoddi3+0xe8>
    7f30:	14c5883a 	add	r2,r2,r19
    7f34:	14c00136 	bltu	r2,r19,7f3c <__umoddi3+0xe8>
    7f38:	14415836 	bltu	r2,r17,849c <__umoddi3+0x648>
    7f3c:	1463c83a 	sub	r17,r2,r17
    7f40:	8809883a 	mov	r4,r17
    7f44:	b80b883a 	mov	r5,r23
    7f48:	000971c0 	call	971c <__udivsi3>
    7f4c:	a009883a 	mov	r4,r20
    7f50:	00005306 	br	80a0 <__umoddi3+0x24c>
    7f54:	380d883a 	mov	r6,r7
    7f58:	29c0132e 	bgeu	r5,r7,7fa8 <__umoddi3+0x154>
    7f5c:	d9000415 	stw	r4,16(sp)
    7f60:	d9400515 	stw	r5,20(sp)
    7f64:	d9400417 	ldw	r5,16(sp)
    7f68:	5813883a 	mov	r9,r11
    7f6c:	2811883a 	mov	r8,r5
    7f70:	4005883a 	mov	r2,r8
    7f74:	4807883a 	mov	r3,r9
    7f78:	dfc00f17 	ldw	ra,60(sp)
    7f7c:	df000e17 	ldw	fp,56(sp)
    7f80:	ddc00d17 	ldw	r23,52(sp)
    7f84:	dd800c17 	ldw	r22,48(sp)
    7f88:	dd400b17 	ldw	r21,44(sp)
    7f8c:	dd000a17 	ldw	r20,40(sp)
    7f90:	dcc00917 	ldw	r19,36(sp)
    7f94:	dc800817 	ldw	r18,32(sp)
    7f98:	dc400717 	ldw	r17,28(sp)
    7f9c:	dc000617 	ldw	r16,24(sp)
    7fa0:	dec01004 	addi	sp,sp,64
    7fa4:	f800283a 	ret
    7fa8:	00bfffd4 	movui	r2,65535
    7fac:	11c06636 	bltu	r2,r7,8148 <__umoddi3+0x2f4>
    7fb0:	00803fc4 	movi	r2,255
    7fb4:	11c12036 	bltu	r2,r7,8438 <__umoddi3+0x5e4>
    7fb8:	000b883a 	mov	r5,zero
    7fbc:	0005883a 	mov	r2,zero
    7fc0:	3084d83a 	srl	r2,r6,r2
    7fc4:	01000074 	movhi	r4,1
    7fc8:	21009304 	addi	r4,r4,588
    7fcc:	01c00804 	movi	r7,32
    7fd0:	1105883a 	add	r2,r2,r4
    7fd4:	10c00003 	ldbu	r3,0(r2)
    7fd8:	28c7883a 	add	r3,r5,r3
    7fdc:	38e5c83a 	sub	r18,r7,r3
    7fe0:	9000941e 	bne	r18,zero,8234 <__umoddi3+0x3e0>
    7fe4:	35405e36 	bltu	r6,r21,8160 <__umoddi3+0x30c>
    7fe8:	84c05d2e 	bgeu	r16,r19,8160 <__umoddi3+0x30c>
    7fec:	8011883a 	mov	r8,r16
    7ff0:	a813883a 	mov	r9,r21
    7ff4:	dc000415 	stw	r16,16(sp)
    7ff8:	dd400515 	stw	r21,20(sp)
    7ffc:	003fdc06 	br	7f70 <__umoddi3+0x11c>
    8000:	00bfffd4 	movui	r2,65535
    8004:	12004a36 	bltu	r2,r8,8130 <__umoddi3+0x2dc>
    8008:	00803fc4 	movi	r2,255
    800c:	12010d36 	bltu	r2,r8,8444 <__umoddi3+0x5f0>
    8010:	000b883a 	mov	r5,zero
    8014:	0005883a 	mov	r2,zero
    8018:	9884d83a 	srl	r2,r19,r2
    801c:	01000074 	movhi	r4,1
    8020:	21009304 	addi	r4,r4,588
    8024:	01800804 	movi	r6,32
    8028:	1105883a 	add	r2,r2,r4
    802c:	10c00003 	ldbu	r3,0(r2)
    8030:	28c7883a 	add	r3,r5,r3
    8034:	30c7c83a 	sub	r3,r6,r3
    8038:	1800dc1e 	bne	r3,zero,83ac <__umoddi3+0x558>
    803c:	002d883a 	mov	r22,zero
    8040:	982ed43a 	srli	r23,r19,16
    8044:	a809883a 	mov	r4,r21
    8048:	9cbfffcc 	andi	r18,r19,65535
    804c:	b80b883a 	mov	r5,r23
    8050:	000971c0 	call	971c <__udivsi3>
    8054:	100b883a 	mov	r5,r2
    8058:	9009883a 	mov	r4,r18
    805c:	000972c0 	call	972c <__mulsi3>
    8060:	a809883a 	mov	r4,r21
    8064:	b80b883a 	mov	r5,r23
    8068:	1023883a 	mov	r17,r2
    806c:	00097240 	call	9724 <__umodsi3>
    8070:	1004943a 	slli	r2,r2,16
    8074:	8006d43a 	srli	r3,r16,16
    8078:	10c4b03a 	or	r2,r2,r3
    807c:	1440032e 	bgeu	r2,r17,808c <__umoddi3+0x238>
    8080:	14c5883a 	add	r2,r2,r19
    8084:	14c00136 	bltu	r2,r19,808c <__umoddi3+0x238>
    8088:	14410236 	bltu	r2,r17,8494 <__umoddi3+0x640>
    808c:	1463c83a 	sub	r17,r2,r17
    8090:	8809883a 	mov	r4,r17
    8094:	b80b883a 	mov	r5,r23
    8098:	000971c0 	call	971c <__udivsi3>
    809c:	9009883a 	mov	r4,r18
    80a0:	100b883a 	mov	r5,r2
    80a4:	000972c0 	call	972c <__mulsi3>
    80a8:	8809883a 	mov	r4,r17
    80ac:	b80b883a 	mov	r5,r23
    80b0:	102b883a 	mov	r21,r2
    80b4:	00097240 	call	9724 <__umodsi3>
    80b8:	1004943a 	slli	r2,r2,16
    80bc:	80ffffcc 	andi	r3,r16,65535
    80c0:	10c4b03a 	or	r2,r2,r3
    80c4:	1540042e 	bgeu	r2,r21,80d8 <__umoddi3+0x284>
    80c8:	14c5883a 	add	r2,r2,r19
    80cc:	14c00236 	bltu	r2,r19,80d8 <__umoddi3+0x284>
    80d0:	1540012e 	bgeu	r2,r21,80d8 <__umoddi3+0x284>
    80d4:	14c5883a 	add	r2,r2,r19
    80d8:	1545c83a 	sub	r2,r2,r21
    80dc:	1584d83a 	srl	r2,r2,r22
    80e0:	0013883a 	mov	r9,zero
    80e4:	d8800415 	stw	r2,16(sp)
    80e8:	d8c00417 	ldw	r3,16(sp)
    80ec:	0005883a 	mov	r2,zero
    80f0:	d8800515 	stw	r2,20(sp)
    80f4:	1811883a 	mov	r8,r3
    80f8:	003f9d06 	br	7f70 <__umoddi3+0x11c>
    80fc:	00804034 	movhi	r2,256
    8100:	10bfffc4 	addi	r2,r2,-1
    8104:	14c0c636 	bltu	r2,r19,8420 <__umoddi3+0x5cc>
    8108:	01400404 	movi	r5,16
    810c:	2805883a 	mov	r2,r5
    8110:	003f6c06 	br	7ec4 <__umoddi3+0x70>
    8114:	01000044 	movi	r4,1
    8118:	000b883a 	mov	r5,zero
    811c:	000971c0 	call	971c <__udivsi3>
    8120:	1027883a 	mov	r19,r2
    8124:	00bfffd4 	movui	r2,65535
    8128:	14fff436 	bltu	r2,r19,80fc <__umoddi3+0x2a8>
    812c:	003f6106 	br	7eb4 <__umoddi3+0x60>
    8130:	00804034 	movhi	r2,256
    8134:	10bfffc4 	addi	r2,r2,-1
    8138:	1200c536 	bltu	r2,r8,8450 <__umoddi3+0x5fc>
    813c:	01400404 	movi	r5,16
    8140:	2805883a 	mov	r2,r5
    8144:	003fb406 	br	8018 <__umoddi3+0x1c4>
    8148:	00804034 	movhi	r2,256
    814c:	10bfffc4 	addi	r2,r2,-1
    8150:	11c0c236 	bltu	r2,r7,845c <__umoddi3+0x608>
    8154:	01400404 	movi	r5,16
    8158:	2805883a 	mov	r2,r5
    815c:	003f9806 	br	7fc0 <__umoddi3+0x16c>
    8160:	84c9c83a 	sub	r4,r16,r19
    8164:	8105803a 	cmpltu	r2,r16,r4
    8168:	a987c83a 	sub	r3,r21,r6
    816c:	18abc83a 	sub	r21,r3,r2
    8170:	2021883a 	mov	r16,r4
    8174:	003f9d06 	br	7fec <__umoddi3+0x198>
    8178:	9ca6983a 	sll	r19,r19,r18
    817c:	3485c83a 	sub	r2,r6,r18
    8180:	a8a2d83a 	srl	r17,r21,r2
    8184:	982ed43a 	srli	r23,r19,16
    8188:	ac86983a 	sll	r3,r21,r18
    818c:	8084d83a 	srl	r2,r16,r2
    8190:	8809883a 	mov	r4,r17
    8194:	b80b883a 	mov	r5,r23
    8198:	18b8b03a 	or	fp,r3,r2
    819c:	9d3fffcc 	andi	r20,r19,65535
    81a0:	000971c0 	call	971c <__udivsi3>
    81a4:	100b883a 	mov	r5,r2
    81a8:	a009883a 	mov	r4,r20
    81ac:	000972c0 	call	972c <__mulsi3>
    81b0:	8809883a 	mov	r4,r17
    81b4:	b80b883a 	mov	r5,r23
    81b8:	102b883a 	mov	r21,r2
    81bc:	00097240 	call	9724 <__umodsi3>
    81c0:	1004943a 	slli	r2,r2,16
    81c4:	e006d43a 	srli	r3,fp,16
    81c8:	902d883a 	mov	r22,r18
    81cc:	10c4b03a 	or	r2,r2,r3
    81d0:	1540022e 	bgeu	r2,r21,81dc <__umoddi3+0x388>
    81d4:	14c5883a 	add	r2,r2,r19
    81d8:	14c0ab2e 	bgeu	r2,r19,8488 <__umoddi3+0x634>
    81dc:	1563c83a 	sub	r17,r2,r21
    81e0:	8809883a 	mov	r4,r17
    81e4:	b80b883a 	mov	r5,r23
    81e8:	000971c0 	call	971c <__udivsi3>
    81ec:	100b883a 	mov	r5,r2
    81f0:	a009883a 	mov	r4,r20
    81f4:	000972c0 	call	972c <__mulsi3>
    81f8:	8809883a 	mov	r4,r17
    81fc:	b80b883a 	mov	r5,r23
    8200:	102b883a 	mov	r21,r2
    8204:	00097240 	call	9724 <__umodsi3>
    8208:	1004943a 	slli	r2,r2,16
    820c:	e0ffffcc 	andi	r3,fp,65535
    8210:	10c4b03a 	or	r2,r2,r3
    8214:	1540042e 	bgeu	r2,r21,8228 <__umoddi3+0x3d4>
    8218:	14c5883a 	add	r2,r2,r19
    821c:	14c00236 	bltu	r2,r19,8228 <__umoddi3+0x3d4>
    8220:	1540012e 	bgeu	r2,r21,8228 <__umoddi3+0x3d4>
    8224:	14c5883a 	add	r2,r2,r19
    8228:	84a0983a 	sll	r16,r16,r18
    822c:	156bc83a 	sub	r21,r2,r21
    8230:	003f3106 	br	7ef8 <__umoddi3+0xa4>
    8234:	3c8fc83a 	sub	r7,r7,r18
    8238:	3486983a 	sll	r3,r6,r18
    823c:	99c4d83a 	srl	r2,r19,r7
    8240:	a9e2d83a 	srl	r17,r21,r7
    8244:	ac8c983a 	sll	r6,r21,r18
    8248:	18acb03a 	or	r22,r3,r2
    824c:	b02ed43a 	srli	r23,r22,16
    8250:	81c4d83a 	srl	r2,r16,r7
    8254:	8809883a 	mov	r4,r17
    8258:	b80b883a 	mov	r5,r23
    825c:	308cb03a 	or	r6,r6,r2
    8260:	d9c00315 	stw	r7,12(sp)
    8264:	d9800215 	stw	r6,8(sp)
    8268:	b53fffcc 	andi	r20,r22,65535
    826c:	000971c0 	call	971c <__udivsi3>
    8270:	100b883a 	mov	r5,r2
    8274:	a009883a 	mov	r4,r20
    8278:	1039883a 	mov	fp,r2
    827c:	000972c0 	call	972c <__mulsi3>
    8280:	8809883a 	mov	r4,r17
    8284:	b80b883a 	mov	r5,r23
    8288:	102b883a 	mov	r21,r2
    828c:	00097240 	call	9724 <__umodsi3>
    8290:	d9000217 	ldw	r4,8(sp)
    8294:	1004943a 	slli	r2,r2,16
    8298:	9ca6983a 	sll	r19,r19,r18
    829c:	2006d43a 	srli	r3,r4,16
    82a0:	84a0983a 	sll	r16,r16,r18
    82a4:	dcc00015 	stw	r19,0(sp)
    82a8:	10c4b03a 	or	r2,r2,r3
    82ac:	dc000115 	stw	r16,4(sp)
    82b0:	1540032e 	bgeu	r2,r21,82c0 <__umoddi3+0x46c>
    82b4:	1585883a 	add	r2,r2,r22
    82b8:	e73fffc4 	addi	fp,fp,-1
    82bc:	15806e2e 	bgeu	r2,r22,8478 <__umoddi3+0x624>
    82c0:	1563c83a 	sub	r17,r2,r21
    82c4:	8809883a 	mov	r4,r17
    82c8:	b80b883a 	mov	r5,r23
    82cc:	000971c0 	call	971c <__udivsi3>
    82d0:	100b883a 	mov	r5,r2
    82d4:	a009883a 	mov	r4,r20
    82d8:	1021883a 	mov	r16,r2
    82dc:	000972c0 	call	972c <__mulsi3>
    82e0:	b80b883a 	mov	r5,r23
    82e4:	8809883a 	mov	r4,r17
    82e8:	1029883a 	mov	r20,r2
    82ec:	00097240 	call	9724 <__umodsi3>
    82f0:	d9400217 	ldw	r5,8(sp)
    82f4:	1004943a 	slli	r2,r2,16
    82f8:	28ffffcc 	andi	r3,r5,65535
    82fc:	10c4b03a 	or	r2,r2,r3
    8300:	1500032e 	bgeu	r2,r20,8310 <__umoddi3+0x4bc>
    8304:	1585883a 	add	r2,r2,r22
    8308:	843fffc4 	addi	r16,r16,-1
    830c:	1580562e 	bgeu	r2,r22,8468 <__umoddi3+0x614>
    8310:	d9800017 	ldw	r6,0(sp)
    8314:	e022943a 	slli	r17,fp,16
    8318:	302ed43a 	srli	r23,r6,16
    831c:	8462b03a 	or	r17,r16,r17
    8320:	34ffffcc 	andi	r19,r6,65535
    8324:	882ad43a 	srli	r21,r17,16
    8328:	8c7fffcc 	andi	r17,r17,65535
    832c:	8809883a 	mov	r4,r17
    8330:	980b883a 	mov	r5,r19
    8334:	1521c83a 	sub	r16,r2,r20
    8338:	000972c0 	call	972c <__mulsi3>
    833c:	8809883a 	mov	r4,r17
    8340:	b80b883a 	mov	r5,r23
    8344:	1029883a 	mov	r20,r2
    8348:	000972c0 	call	972c <__mulsi3>
    834c:	980b883a 	mov	r5,r19
    8350:	a809883a 	mov	r4,r21
    8354:	1023883a 	mov	r17,r2
    8358:	000972c0 	call	972c <__mulsi3>
    835c:	a809883a 	mov	r4,r21
    8360:	b80b883a 	mov	r5,r23
    8364:	1027883a 	mov	r19,r2
    8368:	000972c0 	call	972c <__mulsi3>
    836c:	100b883a 	mov	r5,r2
    8370:	a004d43a 	srli	r2,r20,16
    8374:	8ce3883a 	add	r17,r17,r19
    8378:	1449883a 	add	r4,r2,r17
    837c:	24c0022e 	bgeu	r4,r19,8388 <__umoddi3+0x534>
    8380:	00800074 	movhi	r2,1
    8384:	288b883a 	add	r5,r5,r2
    8388:	2004d43a 	srli	r2,r4,16
    838c:	2008943a 	slli	r4,r4,16
    8390:	a0ffffcc 	andi	r3,r20,65535
    8394:	288d883a 	add	r6,r5,r2
    8398:	20c9883a 	add	r4,r4,r3
    839c:	81800b36 	bltu	r16,r6,83cc <__umoddi3+0x578>
    83a0:	81804026 	beq	r16,r6,84a4 <__umoddi3+0x650>
    83a4:	818dc83a 	sub	r6,r16,r6
    83a8:	00000f06 	br	83e8 <__umoddi3+0x594>
    83ac:	30c5c83a 	sub	r2,r6,r3
    83b0:	182d883a 	mov	r22,r3
    83b4:	8084d83a 	srl	r2,r16,r2
    83b8:	a8c6983a 	sll	r3,r21,r3
    83bc:	9da6983a 	sll	r19,r19,r22
    83c0:	85a0983a 	sll	r16,r16,r22
    83c4:	18aab03a 	or	r21,r3,r2
    83c8:	003f1d06 	br	8040 <__umoddi3+0x1ec>
    83cc:	d8c00017 	ldw	r3,0(sp)
    83d0:	20c5c83a 	sub	r2,r4,r3
    83d4:	2089803a 	cmpltu	r4,r4,r2
    83d8:	3587c83a 	sub	r3,r6,r22
    83dc:	1907c83a 	sub	r3,r3,r4
    83e0:	80cdc83a 	sub	r6,r16,r3
    83e4:	1009883a 	mov	r4,r2
    83e8:	d9400117 	ldw	r5,4(sp)
    83ec:	2905c83a 	sub	r2,r5,r4
    83f0:	2887803a 	cmpltu	r3,r5,r2
    83f4:	30c7c83a 	sub	r3,r6,r3
    83f8:	d9800317 	ldw	r6,12(sp)
    83fc:	1484d83a 	srl	r2,r2,r18
    8400:	1988983a 	sll	r4,r3,r6
    8404:	1c86d83a 	srl	r3,r3,r18
    8408:	2088b03a 	or	r4,r4,r2
    840c:	2011883a 	mov	r8,r4
    8410:	1813883a 	mov	r9,r3
    8414:	d9000415 	stw	r4,16(sp)
    8418:	d8c00515 	stw	r3,20(sp)
    841c:	003ed406 	br	7f70 <__umoddi3+0x11c>
    8420:	01400604 	movi	r5,24
    8424:	2805883a 	mov	r2,r5
    8428:	003ea606 	br	7ec4 <__umoddi3+0x70>
    842c:	01400204 	movi	r5,8
    8430:	2805883a 	mov	r2,r5
    8434:	003ea306 	br	7ec4 <__umoddi3+0x70>
    8438:	01400204 	movi	r5,8
    843c:	2805883a 	mov	r2,r5
    8440:	003edf06 	br	7fc0 <__umoddi3+0x16c>
    8444:	01400204 	movi	r5,8
    8448:	2805883a 	mov	r2,r5
    844c:	003ef206 	br	8018 <__umoddi3+0x1c4>
    8450:	01400604 	movi	r5,24
    8454:	2805883a 	mov	r2,r5
    8458:	003eef06 	br	8018 <__umoddi3+0x1c4>
    845c:	01400604 	movi	r5,24
    8460:	2805883a 	mov	r2,r5
    8464:	003ed606 	br	7fc0 <__umoddi3+0x16c>
    8468:	153fa92e 	bgeu	r2,r20,8310 <__umoddi3+0x4bc>
    846c:	843fffc4 	addi	r16,r16,-1
    8470:	1585883a 	add	r2,r2,r22
    8474:	003fa606 	br	8310 <__umoddi3+0x4bc>
    8478:	157f912e 	bgeu	r2,r21,82c0 <__umoddi3+0x46c>
    847c:	e73fffc4 	addi	fp,fp,-1
    8480:	1585883a 	add	r2,r2,r22
    8484:	003f8e06 	br	82c0 <__umoddi3+0x46c>
    8488:	157f542e 	bgeu	r2,r21,81dc <__umoddi3+0x388>
    848c:	14c5883a 	add	r2,r2,r19
    8490:	003f5206 	br	81dc <__umoddi3+0x388>
    8494:	14c5883a 	add	r2,r2,r19
    8498:	003efc06 	br	808c <__umoddi3+0x238>
    849c:	14c5883a 	add	r2,r2,r19
    84a0:	003ea606 	br	7f3c <__umoddi3+0xe8>
    84a4:	d8800117 	ldw	r2,4(sp)
    84a8:	113fc836 	bltu	r2,r4,83cc <__umoddi3+0x578>
    84ac:	000d883a 	mov	r6,zero
    84b0:	003fcd06 	br	83e8 <__umoddi3+0x594>

000084b4 <_fpadd_parts>:
    84b4:	defff804 	addi	sp,sp,-32
    84b8:	dcc00315 	stw	r19,12(sp)
    84bc:	2027883a 	mov	r19,r4
    84c0:	21000017 	ldw	r4,0(r4)
    84c4:	00c00044 	movi	r3,1
    84c8:	dd400515 	stw	r21,20(sp)
    84cc:	dd000415 	stw	r20,16(sp)
    84d0:	ddc00715 	stw	r23,28(sp)
    84d4:	dd800615 	stw	r22,24(sp)
    84d8:	dc800215 	stw	r18,8(sp)
    84dc:	dc400115 	stw	r17,4(sp)
    84e0:	dc000015 	stw	r16,0(sp)
    84e4:	282b883a 	mov	r21,r5
    84e8:	3029883a 	mov	r20,r6
    84ec:	1900632e 	bgeu	r3,r4,867c <_fpadd_parts+0x1c8>
    84f0:	28800017 	ldw	r2,0(r5)
    84f4:	1880812e 	bgeu	r3,r2,86fc <_fpadd_parts+0x248>
    84f8:	00c00104 	movi	r3,4
    84fc:	20c0dc26 	beq	r4,r3,8870 <_fpadd_parts+0x3bc>
    8500:	10c07e26 	beq	r2,r3,86fc <_fpadd_parts+0x248>
    8504:	00c00084 	movi	r3,2
    8508:	10c06726 	beq	r2,r3,86a8 <_fpadd_parts+0x1f4>
    850c:	20c07b26 	beq	r4,r3,86fc <_fpadd_parts+0x248>
    8510:	9dc00217 	ldw	r23,8(r19)
    8514:	28c00217 	ldw	r3,8(r5)
    8518:	9c400317 	ldw	r17,12(r19)
    851c:	2bc00317 	ldw	r15,12(r5)
    8520:	b8cdc83a 	sub	r6,r23,r3
    8524:	9c800417 	ldw	r18,16(r19)
    8528:	2c000417 	ldw	r16,16(r5)
    852c:	3009883a 	mov	r4,r6
    8530:	30009716 	blt	r6,zero,8790 <_fpadd_parts+0x2dc>
    8534:	00800fc4 	movi	r2,63
    8538:	11806b16 	blt	r2,r6,86e8 <_fpadd_parts+0x234>
    853c:	0100a40e 	bge	zero,r4,87d0 <_fpadd_parts+0x31c>
    8540:	35bff804 	addi	r22,r6,-32
    8544:	b000bc16 	blt	r22,zero,8838 <_fpadd_parts+0x384>
    8548:	8596d83a 	srl	r11,r16,r22
    854c:	0019883a 	mov	r12,zero
    8550:	0013883a 	mov	r9,zero
    8554:	01000044 	movi	r4,1
    8558:	0015883a 	mov	r10,zero
    855c:	b000be16 	blt	r22,zero,8858 <_fpadd_parts+0x3a4>
    8560:	2590983a 	sll	r8,r4,r22
    8564:	000f883a 	mov	r7,zero
    8568:	00bfffc4 	movi	r2,-1
    856c:	3889883a 	add	r4,r7,r2
    8570:	408b883a 	add	r5,r8,r2
    8574:	21cd803a 	cmpltu	r6,r4,r7
    8578:	314b883a 	add	r5,r6,r5
    857c:	7904703a 	and	r2,r15,r4
    8580:	8146703a 	and	r3,r16,r5
    8584:	10c4b03a 	or	r2,r2,r3
    8588:	10000226 	beq	r2,zero,8594 <_fpadd_parts+0xe0>
    858c:	02400044 	movi	r9,1
    8590:	0015883a 	mov	r10,zero
    8594:	5a5eb03a 	or	r15,r11,r9
    8598:	62a0b03a 	or	r16,r12,r10
    859c:	99400117 	ldw	r5,4(r19)
    85a0:	a8800117 	ldw	r2,4(r21)
    85a4:	28806e26 	beq	r5,r2,8760 <_fpadd_parts+0x2ac>
    85a8:	28006626 	beq	r5,zero,8744 <_fpadd_parts+0x290>
    85ac:	7c45c83a 	sub	r2,r15,r17
    85b0:	7889803a 	cmpltu	r4,r15,r2
    85b4:	8487c83a 	sub	r3,r16,r18
    85b8:	1909c83a 	sub	r4,r3,r4
    85bc:	100d883a 	mov	r6,r2
    85c0:	200f883a 	mov	r7,r4
    85c4:	38007716 	blt	r7,zero,87a4 <_fpadd_parts+0x2f0>
    85c8:	a5c00215 	stw	r23,8(r20)
    85cc:	a1c00415 	stw	r7,16(r20)
    85d0:	a0000115 	stw	zero,4(r20)
    85d4:	a1800315 	stw	r6,12(r20)
    85d8:	a2000317 	ldw	r8,12(r20)
    85dc:	a2400417 	ldw	r9,16(r20)
    85e0:	00bfffc4 	movi	r2,-1
    85e4:	408b883a 	add	r5,r8,r2
    85e8:	2a09803a 	cmpltu	r4,r5,r8
    85ec:	488d883a 	add	r6,r9,r2
    85f0:	01c40034 	movhi	r7,4096
    85f4:	39ffffc4 	addi	r7,r7,-1
    85f8:	218d883a 	add	r6,r4,r6
    85fc:	39801736 	bltu	r7,r6,865c <_fpadd_parts+0x1a8>
    8600:	31c06526 	beq	r6,r7,8798 <_fpadd_parts+0x2e4>
    8604:	a3000217 	ldw	r12,8(r20)
    8608:	4209883a 	add	r4,r8,r8
    860c:	00bfffc4 	movi	r2,-1
    8610:	220f803a 	cmpltu	r7,r4,r8
    8614:	4a4b883a 	add	r5,r9,r9
    8618:	394f883a 	add	r7,r7,r5
    861c:	2095883a 	add	r10,r4,r2
    8620:	3897883a 	add	r11,r7,r2
    8624:	510d803a 	cmpltu	r6,r10,r4
    8628:	6099883a 	add	r12,r12,r2
    862c:	32d7883a 	add	r11,r6,r11
    8630:	00840034 	movhi	r2,4096
    8634:	10bfffc4 	addi	r2,r2,-1
    8638:	2011883a 	mov	r8,r4
    863c:	3813883a 	mov	r9,r7
    8640:	a1000315 	stw	r4,12(r20)
    8644:	a1c00415 	stw	r7,16(r20)
    8648:	a3000215 	stw	r12,8(r20)
    864c:	12c00336 	bltu	r2,r11,865c <_fpadd_parts+0x1a8>
    8650:	58bfed1e 	bne	r11,r2,8608 <_fpadd_parts+0x154>
    8654:	00bfff84 	movi	r2,-2
    8658:	12bfeb2e 	bgeu	r2,r10,8608 <_fpadd_parts+0x154>
    865c:	a2800417 	ldw	r10,16(r20)
    8660:	008000c4 	movi	r2,3
    8664:	00c80034 	movhi	r3,8192
    8668:	18ffffc4 	addi	r3,r3,-1
    866c:	a2400317 	ldw	r9,12(r20)
    8670:	a0800015 	stw	r2,0(r20)
    8674:	1a802336 	bltu	r3,r10,8704 <_fpadd_parts+0x250>
    8678:	a027883a 	mov	r19,r20
    867c:	9805883a 	mov	r2,r19
    8680:	ddc00717 	ldw	r23,28(sp)
    8684:	dd800617 	ldw	r22,24(sp)
    8688:	dd400517 	ldw	r21,20(sp)
    868c:	dd000417 	ldw	r20,16(sp)
    8690:	dcc00317 	ldw	r19,12(sp)
    8694:	dc800217 	ldw	r18,8(sp)
    8698:	dc400117 	ldw	r17,4(sp)
    869c:	dc000017 	ldw	r16,0(sp)
    86a0:	dec00804 	addi	sp,sp,32
    86a4:	f800283a 	ret
    86a8:	20fff41e 	bne	r4,r3,867c <_fpadd_parts+0x1c8>
    86ac:	31000015 	stw	r4,0(r6)
    86b0:	98800117 	ldw	r2,4(r19)
    86b4:	30800115 	stw	r2,4(r6)
    86b8:	98c00217 	ldw	r3,8(r19)
    86bc:	30c00215 	stw	r3,8(r6)
    86c0:	98800317 	ldw	r2,12(r19)
    86c4:	30800315 	stw	r2,12(r6)
    86c8:	98c00417 	ldw	r3,16(r19)
    86cc:	30c00415 	stw	r3,16(r6)
    86d0:	98800117 	ldw	r2,4(r19)
    86d4:	28c00117 	ldw	r3,4(r5)
    86d8:	3027883a 	mov	r19,r6
    86dc:	10c4703a 	and	r2,r2,r3
    86e0:	30800115 	stw	r2,4(r6)
    86e4:	003fe506 	br	867c <_fpadd_parts+0x1c8>
    86e8:	1dc02616 	blt	r3,r23,8784 <_fpadd_parts+0x2d0>
    86ec:	0023883a 	mov	r17,zero
    86f0:	182f883a 	mov	r23,r3
    86f4:	0025883a 	mov	r18,zero
    86f8:	003fa806 	br	859c <_fpadd_parts+0xe8>
    86fc:	a827883a 	mov	r19,r21
    8700:	003fde06 	br	867c <_fpadd_parts+0x1c8>
    8704:	01800044 	movi	r6,1
    8708:	500497fa 	slli	r2,r10,31
    870c:	4808d07a 	srli	r4,r9,1
    8710:	518ad83a 	srl	r5,r10,r6
    8714:	a2000217 	ldw	r8,8(r20)
    8718:	1108b03a 	or	r4,r2,r4
    871c:	0007883a 	mov	r3,zero
    8720:	4984703a 	and	r2,r9,r6
    8724:	208cb03a 	or	r6,r4,r2
    8728:	28ceb03a 	or	r7,r5,r3
    872c:	42000044 	addi	r8,r8,1
    8730:	a027883a 	mov	r19,r20
    8734:	a1c00415 	stw	r7,16(r20)
    8738:	a2000215 	stw	r8,8(r20)
    873c:	a1800315 	stw	r6,12(r20)
    8740:	003fce06 	br	867c <_fpadd_parts+0x1c8>
    8744:	8bc5c83a 	sub	r2,r17,r15
    8748:	8889803a 	cmpltu	r4,r17,r2
    874c:	9407c83a 	sub	r3,r18,r16
    8750:	1909c83a 	sub	r4,r3,r4
    8754:	100d883a 	mov	r6,r2
    8758:	200f883a 	mov	r7,r4
    875c:	003f9906 	br	85c4 <_fpadd_parts+0x110>
    8760:	7c45883a 	add	r2,r15,r17
    8764:	13c9803a 	cmpltu	r4,r2,r15
    8768:	8487883a 	add	r3,r16,r18
    876c:	20c9883a 	add	r4,r4,r3
    8770:	a1400115 	stw	r5,4(r20)
    8774:	a5c00215 	stw	r23,8(r20)
    8778:	a0800315 	stw	r2,12(r20)
    877c:	a1000415 	stw	r4,16(r20)
    8780:	003fb606 	br	865c <_fpadd_parts+0x1a8>
    8784:	001f883a 	mov	r15,zero
    8788:	0021883a 	mov	r16,zero
    878c:	003f8306 	br	859c <_fpadd_parts+0xe8>
    8790:	018dc83a 	sub	r6,zero,r6
    8794:	003f6706 	br	8534 <_fpadd_parts+0x80>
    8798:	00bfff84 	movi	r2,-2
    879c:	117faf36 	bltu	r2,r5,865c <_fpadd_parts+0x1a8>
    87a0:	003f9806 	br	8604 <_fpadd_parts+0x150>
    87a4:	0005883a 	mov	r2,zero
    87a8:	1189c83a 	sub	r4,r2,r6
    87ac:	1105803a 	cmpltu	r2,r2,r4
    87b0:	01cbc83a 	sub	r5,zero,r7
    87b4:	2885c83a 	sub	r2,r5,r2
    87b8:	01800044 	movi	r6,1
    87bc:	a1800115 	stw	r6,4(r20)
    87c0:	a5c00215 	stw	r23,8(r20)
    87c4:	a1000315 	stw	r4,12(r20)
    87c8:	a0800415 	stw	r2,16(r20)
    87cc:	003f8206 	br	85d8 <_fpadd_parts+0x124>
    87d0:	203f7226 	beq	r4,zero,859c <_fpadd_parts+0xe8>
    87d4:	35bff804 	addi	r22,r6,-32
    87d8:	b9af883a 	add	r23,r23,r6
    87dc:	b0003116 	blt	r22,zero,88a4 <_fpadd_parts+0x3f0>
    87e0:	959ad83a 	srl	r13,r18,r22
    87e4:	001d883a 	mov	r14,zero
    87e8:	000f883a 	mov	r7,zero
    87ec:	01000044 	movi	r4,1
    87f0:	0011883a 	mov	r8,zero
    87f4:	b0002516 	blt	r22,zero,888c <_fpadd_parts+0x3d8>
    87f8:	2594983a 	sll	r10,r4,r22
    87fc:	0013883a 	mov	r9,zero
    8800:	00bfffc4 	movi	r2,-1
    8804:	4889883a 	add	r4,r9,r2
    8808:	508b883a 	add	r5,r10,r2
    880c:	224d803a 	cmpltu	r6,r4,r9
    8810:	314b883a 	add	r5,r6,r5
    8814:	8904703a 	and	r2,r17,r4
    8818:	9146703a 	and	r3,r18,r5
    881c:	10c4b03a 	or	r2,r2,r3
    8820:	10000226 	beq	r2,zero,882c <_fpadd_parts+0x378>
    8824:	01c00044 	movi	r7,1
    8828:	0011883a 	mov	r8,zero
    882c:	69e2b03a 	or	r17,r13,r7
    8830:	7224b03a 	or	r18,r14,r8
    8834:	003f5906 	br	859c <_fpadd_parts+0xe8>
    8838:	8407883a 	add	r3,r16,r16
    883c:	008007c4 	movi	r2,31
    8840:	1185c83a 	sub	r2,r2,r6
    8844:	1886983a 	sll	r3,r3,r2
    8848:	7996d83a 	srl	r11,r15,r6
    884c:	8198d83a 	srl	r12,r16,r6
    8850:	1ad6b03a 	or	r11,r3,r11
    8854:	003f3e06 	br	8550 <_fpadd_parts+0x9c>
    8858:	2006d07a 	srli	r3,r4,1
    885c:	008007c4 	movi	r2,31
    8860:	1185c83a 	sub	r2,r2,r6
    8864:	1890d83a 	srl	r8,r3,r2
    8868:	218e983a 	sll	r7,r4,r6
    886c:	003f3e06 	br	8568 <_fpadd_parts+0xb4>
    8870:	113f821e 	bne	r2,r4,867c <_fpadd_parts+0x1c8>
    8874:	28c00117 	ldw	r3,4(r5)
    8878:	98800117 	ldw	r2,4(r19)
    887c:	10ff7f26 	beq	r2,r3,867c <_fpadd_parts+0x1c8>
    8880:	04c00074 	movhi	r19,1
    8884:	9cc08e04 	addi	r19,r19,568
    8888:	003f7c06 	br	867c <_fpadd_parts+0x1c8>
    888c:	2006d07a 	srli	r3,r4,1
    8890:	008007c4 	movi	r2,31
    8894:	1185c83a 	sub	r2,r2,r6
    8898:	1894d83a 	srl	r10,r3,r2
    889c:	2192983a 	sll	r9,r4,r6
    88a0:	003fd706 	br	8800 <_fpadd_parts+0x34c>
    88a4:	9487883a 	add	r3,r18,r18
    88a8:	008007c4 	movi	r2,31
    88ac:	1185c83a 	sub	r2,r2,r6
    88b0:	1886983a 	sll	r3,r3,r2
    88b4:	899ad83a 	srl	r13,r17,r6
    88b8:	919cd83a 	srl	r14,r18,r6
    88bc:	1b5ab03a 	or	r13,r3,r13
    88c0:	003fc906 	br	87e8 <_fpadd_parts+0x334>

000088c4 <__subdf3>:
    88c4:	deffea04 	addi	sp,sp,-88
    88c8:	dcc01415 	stw	r19,80(sp)
    88cc:	dcc00404 	addi	r19,sp,16
    88d0:	2011883a 	mov	r8,r4
    88d4:	2813883a 	mov	r9,r5
    88d8:	dc401315 	stw	r17,76(sp)
    88dc:	d809883a 	mov	r4,sp
    88e0:	980b883a 	mov	r5,r19
    88e4:	dc400904 	addi	r17,sp,36
    88e8:	dfc01515 	stw	ra,84(sp)
    88ec:	da400115 	stw	r9,4(sp)
    88f0:	d9c00315 	stw	r7,12(sp)
    88f4:	da000015 	stw	r8,0(sp)
    88f8:	d9800215 	stw	r6,8(sp)
    88fc:	0009c1c0 	call	9c1c <__unpack_d>
    8900:	d9000204 	addi	r4,sp,8
    8904:	880b883a 	mov	r5,r17
    8908:	0009c1c0 	call	9c1c <__unpack_d>
    890c:	d8800a17 	ldw	r2,40(sp)
    8910:	880b883a 	mov	r5,r17
    8914:	9809883a 	mov	r4,r19
    8918:	d9800e04 	addi	r6,sp,56
    891c:	1080005c 	xori	r2,r2,1
    8920:	d8800a15 	stw	r2,40(sp)
    8924:	00084b40 	call	84b4 <_fpadd_parts>
    8928:	1009883a 	mov	r4,r2
    892c:	00099080 	call	9908 <__pack_d>
    8930:	dfc01517 	ldw	ra,84(sp)
    8934:	dcc01417 	ldw	r19,80(sp)
    8938:	dc401317 	ldw	r17,76(sp)
    893c:	dec01604 	addi	sp,sp,88
    8940:	f800283a 	ret

00008944 <__adddf3>:
    8944:	deffea04 	addi	sp,sp,-88
    8948:	dcc01415 	stw	r19,80(sp)
    894c:	dcc00404 	addi	r19,sp,16
    8950:	2011883a 	mov	r8,r4
    8954:	2813883a 	mov	r9,r5
    8958:	dc401315 	stw	r17,76(sp)
    895c:	d809883a 	mov	r4,sp
    8960:	980b883a 	mov	r5,r19
    8964:	dc400904 	addi	r17,sp,36
    8968:	dfc01515 	stw	ra,84(sp)
    896c:	da400115 	stw	r9,4(sp)
    8970:	d9c00315 	stw	r7,12(sp)
    8974:	da000015 	stw	r8,0(sp)
    8978:	d9800215 	stw	r6,8(sp)
    897c:	0009c1c0 	call	9c1c <__unpack_d>
    8980:	d9000204 	addi	r4,sp,8
    8984:	880b883a 	mov	r5,r17
    8988:	0009c1c0 	call	9c1c <__unpack_d>
    898c:	d9800e04 	addi	r6,sp,56
    8990:	9809883a 	mov	r4,r19
    8994:	880b883a 	mov	r5,r17
    8998:	00084b40 	call	84b4 <_fpadd_parts>
    899c:	1009883a 	mov	r4,r2
    89a0:	00099080 	call	9908 <__pack_d>
    89a4:	dfc01517 	ldw	ra,84(sp)
    89a8:	dcc01417 	ldw	r19,80(sp)
    89ac:	dc401317 	ldw	r17,76(sp)
    89b0:	dec01604 	addi	sp,sp,88
    89b4:	f800283a 	ret

000089b8 <__muldf3>:
    89b8:	deffe004 	addi	sp,sp,-128
    89bc:	dc401815 	stw	r17,96(sp)
    89c0:	dc400404 	addi	r17,sp,16
    89c4:	2011883a 	mov	r8,r4
    89c8:	2813883a 	mov	r9,r5
    89cc:	dc001715 	stw	r16,92(sp)
    89d0:	d809883a 	mov	r4,sp
    89d4:	880b883a 	mov	r5,r17
    89d8:	dc000904 	addi	r16,sp,36
    89dc:	dfc01f15 	stw	ra,124(sp)
    89e0:	da400115 	stw	r9,4(sp)
    89e4:	d9c00315 	stw	r7,12(sp)
    89e8:	da000015 	stw	r8,0(sp)
    89ec:	d9800215 	stw	r6,8(sp)
    89f0:	ddc01e15 	stw	r23,120(sp)
    89f4:	dd801d15 	stw	r22,116(sp)
    89f8:	dd401c15 	stw	r21,112(sp)
    89fc:	dd001b15 	stw	r20,108(sp)
    8a00:	dcc01a15 	stw	r19,104(sp)
    8a04:	dc801915 	stw	r18,100(sp)
    8a08:	0009c1c0 	call	9c1c <__unpack_d>
    8a0c:	d9000204 	addi	r4,sp,8
    8a10:	800b883a 	mov	r5,r16
    8a14:	0009c1c0 	call	9c1c <__unpack_d>
    8a18:	d9000417 	ldw	r4,16(sp)
    8a1c:	00800044 	movi	r2,1
    8a20:	1100102e 	bgeu	r2,r4,8a64 <__muldf3+0xac>
    8a24:	d8c00917 	ldw	r3,36(sp)
    8a28:	10c0062e 	bgeu	r2,r3,8a44 <__muldf3+0x8c>
    8a2c:	00800104 	movi	r2,4
    8a30:	20800a26 	beq	r4,r2,8a5c <__muldf3+0xa4>
    8a34:	1880cc26 	beq	r3,r2,8d68 <__muldf3+0x3b0>
    8a38:	00800084 	movi	r2,2
    8a3c:	20800926 	beq	r4,r2,8a64 <__muldf3+0xac>
    8a40:	1880191e 	bne	r3,r2,8aa8 <__muldf3+0xf0>
    8a44:	d8c00a17 	ldw	r3,40(sp)
    8a48:	d8800517 	ldw	r2,20(sp)
    8a4c:	8009883a 	mov	r4,r16
    8a50:	10c4c03a 	cmpne	r2,r2,r3
    8a54:	d8800a15 	stw	r2,40(sp)
    8a58:	00000706 	br	8a78 <__muldf3+0xc0>
    8a5c:	00800084 	movi	r2,2
    8a60:	1880c326 	beq	r3,r2,8d70 <__muldf3+0x3b8>
    8a64:	d8800517 	ldw	r2,20(sp)
    8a68:	d8c00a17 	ldw	r3,40(sp)
    8a6c:	8809883a 	mov	r4,r17
    8a70:	10c4c03a 	cmpne	r2,r2,r3
    8a74:	d8800515 	stw	r2,20(sp)
    8a78:	00099080 	call	9908 <__pack_d>
    8a7c:	dfc01f17 	ldw	ra,124(sp)
    8a80:	ddc01e17 	ldw	r23,120(sp)
    8a84:	dd801d17 	ldw	r22,116(sp)
    8a88:	dd401c17 	ldw	r21,112(sp)
    8a8c:	dd001b17 	ldw	r20,108(sp)
    8a90:	dcc01a17 	ldw	r19,104(sp)
    8a94:	dc801917 	ldw	r18,100(sp)
    8a98:	dc401817 	ldw	r17,96(sp)
    8a9c:	dc001717 	ldw	r16,92(sp)
    8aa0:	dec02004 	addi	sp,sp,128
    8aa4:	f800283a 	ret
    8aa8:	dd800717 	ldw	r22,28(sp)
    8aac:	dc800c17 	ldw	r18,48(sp)
    8ab0:	002b883a 	mov	r21,zero
    8ab4:	0023883a 	mov	r17,zero
    8ab8:	a80b883a 	mov	r5,r21
    8abc:	b00d883a 	mov	r6,r22
    8ac0:	880f883a 	mov	r7,r17
    8ac4:	ddc00817 	ldw	r23,32(sp)
    8ac8:	dcc00d17 	ldw	r19,52(sp)
    8acc:	9009883a 	mov	r4,r18
    8ad0:	00097640 	call	9764 <__muldi3>
    8ad4:	001b883a 	mov	r13,zero
    8ad8:	680f883a 	mov	r7,r13
    8adc:	b009883a 	mov	r4,r22
    8ae0:	000b883a 	mov	r5,zero
    8ae4:	980d883a 	mov	r6,r19
    8ae8:	b82d883a 	mov	r22,r23
    8aec:	002f883a 	mov	r23,zero
    8af0:	db401615 	stw	r13,88(sp)
    8af4:	d8801315 	stw	r2,76(sp)
    8af8:	d8c01415 	stw	r3,80(sp)
    8afc:	dcc01515 	stw	r19,84(sp)
    8b00:	00097640 	call	9764 <__muldi3>
    8b04:	b00d883a 	mov	r6,r22
    8b08:	000b883a 	mov	r5,zero
    8b0c:	9009883a 	mov	r4,r18
    8b10:	b80f883a 	mov	r7,r23
    8b14:	1021883a 	mov	r16,r2
    8b18:	1823883a 	mov	r17,r3
    8b1c:	00097640 	call	9764 <__muldi3>
    8b20:	8085883a 	add	r2,r16,r2
    8b24:	140d803a 	cmpltu	r6,r2,r16
    8b28:	88c7883a 	add	r3,r17,r3
    8b2c:	30cd883a 	add	r6,r6,r3
    8b30:	1029883a 	mov	r20,r2
    8b34:	302b883a 	mov	r21,r6
    8b38:	da801317 	ldw	r10,76(sp)
    8b3c:	dac01417 	ldw	r11,80(sp)
    8b40:	db001517 	ldw	r12,84(sp)
    8b44:	db401617 	ldw	r13,88(sp)
    8b48:	3440612e 	bgeu	r6,r17,8cd0 <__muldf3+0x318>
    8b4c:	0009883a 	mov	r4,zero
    8b50:	5105883a 	add	r2,r10,r4
    8b54:	128d803a 	cmpltu	r6,r2,r10
    8b58:	5d07883a 	add	r3,r11,r20
    8b5c:	30cd883a 	add	r6,r6,r3
    8b60:	0021883a 	mov	r16,zero
    8b64:	04400044 	movi	r17,1
    8b68:	1025883a 	mov	r18,r2
    8b6c:	3027883a 	mov	r19,r6
    8b70:	32c06236 	bltu	r6,r11,8cfc <__muldf3+0x344>
    8b74:	59807a26 	beq	r11,r6,8d60 <__muldf3+0x3a8>
    8b78:	680b883a 	mov	r5,r13
    8b7c:	b80f883a 	mov	r7,r23
    8b80:	6009883a 	mov	r4,r12
    8b84:	b00d883a 	mov	r6,r22
    8b88:	00097640 	call	9764 <__muldi3>
    8b8c:	1009883a 	mov	r4,r2
    8b90:	000f883a 	mov	r7,zero
    8b94:	1545883a 	add	r2,r2,r21
    8b98:	1111803a 	cmpltu	r8,r2,r4
    8b9c:	19c7883a 	add	r3,r3,r7
    8ba0:	40c7883a 	add	r3,r8,r3
    8ba4:	88cb883a 	add	r5,r17,r3
    8ba8:	d8c00617 	ldw	r3,24(sp)
    8bac:	8089883a 	add	r4,r16,r2
    8bb0:	d8800b17 	ldw	r2,44(sp)
    8bb4:	18c00104 	addi	r3,r3,4
    8bb8:	240d803a 	cmpltu	r6,r4,r16
    8bbc:	10c7883a 	add	r3,r2,r3
    8bc0:	2013883a 	mov	r9,r4
    8bc4:	d8800a17 	ldw	r2,40(sp)
    8bc8:	d9000517 	ldw	r4,20(sp)
    8bcc:	314d883a 	add	r6,r6,r5
    8bd0:	3015883a 	mov	r10,r6
    8bd4:	2088c03a 	cmpne	r4,r4,r2
    8bd8:	00880034 	movhi	r2,8192
    8bdc:	10bfffc4 	addi	r2,r2,-1
    8be0:	d9000f15 	stw	r4,60(sp)
    8be4:	d8c01015 	stw	r3,64(sp)
    8be8:	1180162e 	bgeu	r2,r6,8c44 <__muldf3+0x28c>
    8bec:	1811883a 	mov	r8,r3
    8bf0:	101f883a 	mov	r15,r2
    8bf4:	980497fa 	slli	r2,r19,31
    8bf8:	9016d07a 	srli	r11,r18,1
    8bfc:	500697fa 	slli	r3,r10,31
    8c00:	480cd07a 	srli	r6,r9,1
    8c04:	500ed07a 	srli	r7,r10,1
    8c08:	12d6b03a 	or	r11,r2,r11
    8c0c:	00800044 	movi	r2,1
    8c10:	198cb03a 	or	r6,r3,r6
    8c14:	4888703a 	and	r4,r9,r2
    8c18:	9818d07a 	srli	r12,r19,1
    8c1c:	001b883a 	mov	r13,zero
    8c20:	03a00034 	movhi	r14,32768
    8c24:	3013883a 	mov	r9,r6
    8c28:	3815883a 	mov	r10,r7
    8c2c:	4091883a 	add	r8,r8,r2
    8c30:	20000226 	beq	r4,zero,8c3c <__muldf3+0x284>
    8c34:	5b64b03a 	or	r18,r11,r13
    8c38:	63a6b03a 	or	r19,r12,r14
    8c3c:	7abfed36 	bltu	r15,r10,8bf4 <__muldf3+0x23c>
    8c40:	da001015 	stw	r8,64(sp)
    8c44:	00840034 	movhi	r2,4096
    8c48:	10bfffc4 	addi	r2,r2,-1
    8c4c:	12801436 	bltu	r2,r10,8ca0 <__muldf3+0x2e8>
    8c50:	da001017 	ldw	r8,64(sp)
    8c54:	101f883a 	mov	r15,r2
    8c58:	4a45883a 	add	r2,r9,r9
    8c5c:	124d803a 	cmpltu	r6,r2,r9
    8c60:	5287883a 	add	r3,r10,r10
    8c64:	9497883a 	add	r11,r18,r18
    8c68:	5c8f803a 	cmpltu	r7,r11,r18
    8c6c:	9cd9883a 	add	r12,r19,r19
    8c70:	01000044 	movi	r4,1
    8c74:	30cd883a 	add	r6,r6,r3
    8c78:	3b0f883a 	add	r7,r7,r12
    8c7c:	423fffc4 	addi	r8,r8,-1
    8c80:	1013883a 	mov	r9,r2
    8c84:	3015883a 	mov	r10,r6
    8c88:	111ab03a 	or	r13,r2,r4
    8c8c:	98003016 	blt	r19,zero,8d50 <__muldf3+0x398>
    8c90:	5825883a 	mov	r18,r11
    8c94:	3827883a 	mov	r19,r7
    8c98:	7abfef2e 	bgeu	r15,r10,8c58 <__muldf3+0x2a0>
    8c9c:	da001015 	stw	r8,64(sp)
    8ca0:	00803fc4 	movi	r2,255
    8ca4:	488e703a 	and	r7,r9,r2
    8ca8:	00802004 	movi	r2,128
    8cac:	0007883a 	mov	r3,zero
    8cb0:	0011883a 	mov	r8,zero
    8cb4:	38801826 	beq	r7,r2,8d18 <__muldf3+0x360>
    8cb8:	008000c4 	movi	r2,3
    8cbc:	d9000e04 	addi	r4,sp,56
    8cc0:	da801215 	stw	r10,72(sp)
    8cc4:	d8800e15 	stw	r2,56(sp)
    8cc8:	da401115 	stw	r9,68(sp)
    8ccc:	003f6a06 	br	8a78 <__muldf3+0xc0>
    8cd0:	89802126 	beq	r17,r6,8d58 <__muldf3+0x3a0>
    8cd4:	0009883a 	mov	r4,zero
    8cd8:	5105883a 	add	r2,r10,r4
    8cdc:	128d803a 	cmpltu	r6,r2,r10
    8ce0:	5d07883a 	add	r3,r11,r20
    8ce4:	30cd883a 	add	r6,r6,r3
    8ce8:	0021883a 	mov	r16,zero
    8cec:	0023883a 	mov	r17,zero
    8cf0:	1025883a 	mov	r18,r2
    8cf4:	3027883a 	mov	r19,r6
    8cf8:	32ff9e2e 	bgeu	r6,r11,8b74 <__muldf3+0x1bc>
    8cfc:	00800044 	movi	r2,1
    8d00:	8089883a 	add	r4,r16,r2
    8d04:	240d803a 	cmpltu	r6,r4,r16
    8d08:	344d883a 	add	r6,r6,r17
    8d0c:	2021883a 	mov	r16,r4
    8d10:	3023883a 	mov	r17,r6
    8d14:	003f9806 	br	8b78 <__muldf3+0x1c0>
    8d18:	403fe71e 	bne	r8,zero,8cb8 <__muldf3+0x300>
    8d1c:	01004004 	movi	r4,256
    8d20:	4904703a 	and	r2,r9,r4
    8d24:	10c4b03a 	or	r2,r2,r3
    8d28:	103fe31e 	bne	r2,zero,8cb8 <__muldf3+0x300>
    8d2c:	94c4b03a 	or	r2,r18,r19
    8d30:	103fe126 	beq	r2,zero,8cb8 <__muldf3+0x300>
    8d34:	49c5883a 	add	r2,r9,r7
    8d38:	1251803a 	cmpltu	r8,r2,r9
    8d3c:	4291883a 	add	r8,r8,r10
    8d40:	013fc004 	movi	r4,-256
    8d44:	1112703a 	and	r9,r2,r4
    8d48:	4015883a 	mov	r10,r8
    8d4c:	003fda06 	br	8cb8 <__muldf3+0x300>
    8d50:	6813883a 	mov	r9,r13
    8d54:	003fce06 	br	8c90 <__muldf3+0x2d8>
    8d58:	143f7c36 	bltu	r2,r16,8b4c <__muldf3+0x194>
    8d5c:	003fdd06 	br	8cd4 <__muldf3+0x31c>
    8d60:	12bf852e 	bgeu	r2,r10,8b78 <__muldf3+0x1c0>
    8d64:	003fe506 	br	8cfc <__muldf3+0x344>
    8d68:	00800084 	movi	r2,2
    8d6c:	20bf351e 	bne	r4,r2,8a44 <__muldf3+0x8c>
    8d70:	01000074 	movhi	r4,1
    8d74:	21008e04 	addi	r4,r4,568
    8d78:	003f3f06 	br	8a78 <__muldf3+0xc0>

00008d7c <__divdf3>:
    8d7c:	deffed04 	addi	sp,sp,-76
    8d80:	dcc01115 	stw	r19,68(sp)
    8d84:	dcc00404 	addi	r19,sp,16
    8d88:	2011883a 	mov	r8,r4
    8d8c:	2813883a 	mov	r9,r5
    8d90:	dc000e15 	stw	r16,56(sp)
    8d94:	d809883a 	mov	r4,sp
    8d98:	980b883a 	mov	r5,r19
    8d9c:	dc000904 	addi	r16,sp,36
    8da0:	dfc01215 	stw	ra,72(sp)
    8da4:	da400115 	stw	r9,4(sp)
    8da8:	d9c00315 	stw	r7,12(sp)
    8dac:	da000015 	stw	r8,0(sp)
    8db0:	d9800215 	stw	r6,8(sp)
    8db4:	dc801015 	stw	r18,64(sp)
    8db8:	dc400f15 	stw	r17,60(sp)
    8dbc:	0009c1c0 	call	9c1c <__unpack_d>
    8dc0:	d9000204 	addi	r4,sp,8
    8dc4:	800b883a 	mov	r5,r16
    8dc8:	0009c1c0 	call	9c1c <__unpack_d>
    8dcc:	d9000417 	ldw	r4,16(sp)
    8dd0:	00800044 	movi	r2,1
    8dd4:	11000b2e 	bgeu	r2,r4,8e04 <__divdf3+0x88>
    8dd8:	d9400917 	ldw	r5,36(sp)
    8ddc:	1140762e 	bgeu	r2,r5,8fb8 <__divdf3+0x23c>
    8de0:	d8800517 	ldw	r2,20(sp)
    8de4:	d8c00a17 	ldw	r3,40(sp)
    8de8:	01800104 	movi	r6,4
    8dec:	10c4f03a 	xor	r2,r2,r3
    8df0:	d8800515 	stw	r2,20(sp)
    8df4:	21800226 	beq	r4,r6,8e00 <__divdf3+0x84>
    8df8:	00800084 	movi	r2,2
    8dfc:	2080141e 	bne	r4,r2,8e50 <__divdf3+0xd4>
    8e00:	29000926 	beq	r5,r4,8e28 <__divdf3+0xac>
    8e04:	9809883a 	mov	r4,r19
    8e08:	00099080 	call	9908 <__pack_d>
    8e0c:	dfc01217 	ldw	ra,72(sp)
    8e10:	dcc01117 	ldw	r19,68(sp)
    8e14:	dc801017 	ldw	r18,64(sp)
    8e18:	dc400f17 	ldw	r17,60(sp)
    8e1c:	dc000e17 	ldw	r16,56(sp)
    8e20:	dec01304 	addi	sp,sp,76
    8e24:	f800283a 	ret
    8e28:	01000074 	movhi	r4,1
    8e2c:	21008e04 	addi	r4,r4,568
    8e30:	00099080 	call	9908 <__pack_d>
    8e34:	dfc01217 	ldw	ra,72(sp)
    8e38:	dcc01117 	ldw	r19,68(sp)
    8e3c:	dc801017 	ldw	r18,64(sp)
    8e40:	dc400f17 	ldw	r17,60(sp)
    8e44:	dc000e17 	ldw	r16,56(sp)
    8e48:	dec01304 	addi	sp,sp,76
    8e4c:	f800283a 	ret
    8e50:	29805b26 	beq	r5,r6,8fc0 <__divdf3+0x244>
    8e54:	28802d26 	beq	r5,r2,8f0c <__divdf3+0x190>
    8e58:	d8c00617 	ldw	r3,24(sp)
    8e5c:	d8800b17 	ldw	r2,44(sp)
    8e60:	d9c00817 	ldw	r7,32(sp)
    8e64:	dc400d17 	ldw	r17,52(sp)
    8e68:	188bc83a 	sub	r5,r3,r2
    8e6c:	d9800717 	ldw	r6,28(sp)
    8e70:	dc000c17 	ldw	r16,48(sp)
    8e74:	d9400615 	stw	r5,24(sp)
    8e78:	3c403836 	bltu	r7,r17,8f5c <__divdf3+0x1e0>
    8e7c:	89c03626 	beq	r17,r7,8f58 <__divdf3+0x1dc>
    8e80:	0015883a 	mov	r10,zero
    8e84:	001d883a 	mov	r14,zero
    8e88:	02c40034 	movhi	r11,4096
    8e8c:	001f883a 	mov	r15,zero
    8e90:	003f883a 	mov	ra,zero
    8e94:	04800f44 	movi	r18,61
    8e98:	00000f06 	br	8ed8 <__divdf3+0x15c>
    8e9c:	601d883a 	mov	r14,r12
    8ea0:	681f883a 	mov	r15,r13
    8ea4:	400d883a 	mov	r6,r8
    8ea8:	100f883a 	mov	r7,r2
    8eac:	3191883a 	add	r8,r6,r6
    8eb0:	5808d07a 	srli	r4,r11,1
    8eb4:	4185803a 	cmpltu	r2,r8,r6
    8eb8:	39d3883a 	add	r9,r7,r7
    8ebc:	28c6b03a 	or	r3,r5,r3
    8ec0:	1245883a 	add	r2,r2,r9
    8ec4:	1815883a 	mov	r10,r3
    8ec8:	2017883a 	mov	r11,r4
    8ecc:	400d883a 	mov	r6,r8
    8ed0:	100f883a 	mov	r7,r2
    8ed4:	fc801726 	beq	ra,r18,8f34 <__divdf3+0x1b8>
    8ed8:	580a97fa 	slli	r5,r11,31
    8edc:	5006d07a 	srli	r3,r10,1
    8ee0:	ffc00044 	addi	ra,ra,1
    8ee4:	3c7ff136 	bltu	r7,r17,8eac <__divdf3+0x130>
    8ee8:	3411c83a 	sub	r8,r6,r16
    8eec:	3205803a 	cmpltu	r2,r6,r8
    8ef0:	3c53c83a 	sub	r9,r7,r17
    8ef4:	7298b03a 	or	r12,r14,r10
    8ef8:	7adab03a 	or	r13,r15,r11
    8efc:	4885c83a 	sub	r2,r9,r2
    8f00:	89ffe61e 	bne	r17,r7,8e9c <__divdf3+0x120>
    8f04:	343fe936 	bltu	r6,r16,8eac <__divdf3+0x130>
    8f08:	003fe406 	br	8e9c <__divdf3+0x120>
    8f0c:	9809883a 	mov	r4,r19
    8f10:	d9800415 	stw	r6,16(sp)
    8f14:	00099080 	call	9908 <__pack_d>
    8f18:	dfc01217 	ldw	ra,72(sp)
    8f1c:	dcc01117 	ldw	r19,68(sp)
    8f20:	dc801017 	ldw	r18,64(sp)
    8f24:	dc400f17 	ldw	r17,60(sp)
    8f28:	dc000e17 	ldw	r16,56(sp)
    8f2c:	dec01304 	addi	sp,sp,76
    8f30:	f800283a 	ret
    8f34:	00803fc4 	movi	r2,255
    8f38:	7090703a 	and	r8,r14,r2
    8f3c:	00802004 	movi	r2,128
    8f40:	0007883a 	mov	r3,zero
    8f44:	0013883a 	mov	r9,zero
    8f48:	40800d26 	beq	r8,r2,8f80 <__divdf3+0x204>
    8f4c:	dbc00815 	stw	r15,32(sp)
    8f50:	db800715 	stw	r14,28(sp)
    8f54:	003fab06 	br	8e04 <__divdf3+0x88>
    8f58:	343fc92e 	bgeu	r6,r16,8e80 <__divdf3+0x104>
    8f5c:	3185883a 	add	r2,r6,r6
    8f60:	1189803a 	cmpltu	r4,r2,r6
    8f64:	39c7883a 	add	r3,r7,r7
    8f68:	20c9883a 	add	r4,r4,r3
    8f6c:	297fffc4 	addi	r5,r5,-1
    8f70:	100d883a 	mov	r6,r2
    8f74:	200f883a 	mov	r7,r4
    8f78:	d9400615 	stw	r5,24(sp)
    8f7c:	003fc006 	br	8e80 <__divdf3+0x104>
    8f80:	483ff21e 	bne	r9,zero,8f4c <__divdf3+0x1d0>
    8f84:	01004004 	movi	r4,256
    8f88:	7104703a 	and	r2,r14,r4
    8f8c:	10c4b03a 	or	r2,r2,r3
    8f90:	103fee1e 	bne	r2,zero,8f4c <__divdf3+0x1d0>
    8f94:	31c4b03a 	or	r2,r6,r7
    8f98:	103fec26 	beq	r2,zero,8f4c <__divdf3+0x1d0>
    8f9c:	7205883a 	add	r2,r14,r8
    8fa0:	1391803a 	cmpltu	r8,r2,r14
    8fa4:	43d1883a 	add	r8,r8,r15
    8fa8:	013fc004 	movi	r4,-256
    8fac:	111c703a 	and	r14,r2,r4
    8fb0:	401f883a 	mov	r15,r8
    8fb4:	003fe506 	br	8f4c <__divdf3+0x1d0>
    8fb8:	8009883a 	mov	r4,r16
    8fbc:	003f9206 	br	8e08 <__divdf3+0x8c>
    8fc0:	9809883a 	mov	r4,r19
    8fc4:	d8000715 	stw	zero,28(sp)
    8fc8:	d8000815 	stw	zero,32(sp)
    8fcc:	d8000615 	stw	zero,24(sp)
    8fd0:	003f8d06 	br	8e08 <__divdf3+0x8c>

00008fd4 <__eqdf2>:
    8fd4:	deffef04 	addi	sp,sp,-68
    8fd8:	dc400f15 	stw	r17,60(sp)
    8fdc:	dc400404 	addi	r17,sp,16
    8fe0:	2005883a 	mov	r2,r4
    8fe4:	2807883a 	mov	r3,r5
    8fe8:	dc000e15 	stw	r16,56(sp)
    8fec:	d809883a 	mov	r4,sp
    8ff0:	880b883a 	mov	r5,r17
    8ff4:	dc000904 	addi	r16,sp,36
    8ff8:	d8c00115 	stw	r3,4(sp)
    8ffc:	d8800015 	stw	r2,0(sp)
    9000:	d9800215 	stw	r6,8(sp)
    9004:	dfc01015 	stw	ra,64(sp)
    9008:	d9c00315 	stw	r7,12(sp)
    900c:	0009c1c0 	call	9c1c <__unpack_d>
    9010:	d9000204 	addi	r4,sp,8
    9014:	800b883a 	mov	r5,r16
    9018:	0009c1c0 	call	9c1c <__unpack_d>
    901c:	d8800417 	ldw	r2,16(sp)
    9020:	00c00044 	movi	r3,1
    9024:	180d883a 	mov	r6,r3
    9028:	1880062e 	bgeu	r3,r2,9044 <__eqdf2+0x70>
    902c:	d8800917 	ldw	r2,36(sp)
    9030:	8809883a 	mov	r4,r17
    9034:	800b883a 	mov	r5,r16
    9038:	1880022e 	bgeu	r3,r2,9044 <__eqdf2+0x70>
    903c:	0009d540 	call	9d54 <__fpcmp_parts_d>
    9040:	100d883a 	mov	r6,r2
    9044:	3005883a 	mov	r2,r6
    9048:	dfc01017 	ldw	ra,64(sp)
    904c:	dc400f17 	ldw	r17,60(sp)
    9050:	dc000e17 	ldw	r16,56(sp)
    9054:	dec01104 	addi	sp,sp,68
    9058:	f800283a 	ret

0000905c <__nedf2>:
    905c:	deffef04 	addi	sp,sp,-68
    9060:	dc400f15 	stw	r17,60(sp)
    9064:	dc400404 	addi	r17,sp,16
    9068:	2005883a 	mov	r2,r4
    906c:	2807883a 	mov	r3,r5
    9070:	dc000e15 	stw	r16,56(sp)
    9074:	d809883a 	mov	r4,sp
    9078:	880b883a 	mov	r5,r17
    907c:	dc000904 	addi	r16,sp,36
    9080:	d8c00115 	stw	r3,4(sp)
    9084:	d8800015 	stw	r2,0(sp)
    9088:	d9800215 	stw	r6,8(sp)
    908c:	dfc01015 	stw	ra,64(sp)
    9090:	d9c00315 	stw	r7,12(sp)
    9094:	0009c1c0 	call	9c1c <__unpack_d>
    9098:	d9000204 	addi	r4,sp,8
    909c:	800b883a 	mov	r5,r16
    90a0:	0009c1c0 	call	9c1c <__unpack_d>
    90a4:	d8800417 	ldw	r2,16(sp)
    90a8:	00c00044 	movi	r3,1
    90ac:	180d883a 	mov	r6,r3
    90b0:	1880062e 	bgeu	r3,r2,90cc <__nedf2+0x70>
    90b4:	d8800917 	ldw	r2,36(sp)
    90b8:	8809883a 	mov	r4,r17
    90bc:	800b883a 	mov	r5,r16
    90c0:	1880022e 	bgeu	r3,r2,90cc <__nedf2+0x70>
    90c4:	0009d540 	call	9d54 <__fpcmp_parts_d>
    90c8:	100d883a 	mov	r6,r2
    90cc:	3005883a 	mov	r2,r6
    90d0:	dfc01017 	ldw	ra,64(sp)
    90d4:	dc400f17 	ldw	r17,60(sp)
    90d8:	dc000e17 	ldw	r16,56(sp)
    90dc:	dec01104 	addi	sp,sp,68
    90e0:	f800283a 	ret

000090e4 <__gtdf2>:
    90e4:	deffef04 	addi	sp,sp,-68
    90e8:	dc400f15 	stw	r17,60(sp)
    90ec:	dc400404 	addi	r17,sp,16
    90f0:	2005883a 	mov	r2,r4
    90f4:	2807883a 	mov	r3,r5
    90f8:	dc000e15 	stw	r16,56(sp)
    90fc:	d809883a 	mov	r4,sp
    9100:	880b883a 	mov	r5,r17
    9104:	dc000904 	addi	r16,sp,36
    9108:	d8c00115 	stw	r3,4(sp)
    910c:	d8800015 	stw	r2,0(sp)
    9110:	d9800215 	stw	r6,8(sp)
    9114:	dfc01015 	stw	ra,64(sp)
    9118:	d9c00315 	stw	r7,12(sp)
    911c:	0009c1c0 	call	9c1c <__unpack_d>
    9120:	d9000204 	addi	r4,sp,8
    9124:	800b883a 	mov	r5,r16
    9128:	0009c1c0 	call	9c1c <__unpack_d>
    912c:	d8800417 	ldw	r2,16(sp)
    9130:	00c00044 	movi	r3,1
    9134:	01bfffc4 	movi	r6,-1
    9138:	1880062e 	bgeu	r3,r2,9154 <__gtdf2+0x70>
    913c:	d8800917 	ldw	r2,36(sp)
    9140:	8809883a 	mov	r4,r17
    9144:	800b883a 	mov	r5,r16
    9148:	1880022e 	bgeu	r3,r2,9154 <__gtdf2+0x70>
    914c:	0009d540 	call	9d54 <__fpcmp_parts_d>
    9150:	100d883a 	mov	r6,r2
    9154:	3005883a 	mov	r2,r6
    9158:	dfc01017 	ldw	ra,64(sp)
    915c:	dc400f17 	ldw	r17,60(sp)
    9160:	dc000e17 	ldw	r16,56(sp)
    9164:	dec01104 	addi	sp,sp,68
    9168:	f800283a 	ret

0000916c <__gedf2>:
    916c:	deffef04 	addi	sp,sp,-68
    9170:	dc400f15 	stw	r17,60(sp)
    9174:	dc400404 	addi	r17,sp,16
    9178:	2005883a 	mov	r2,r4
    917c:	2807883a 	mov	r3,r5
    9180:	dc000e15 	stw	r16,56(sp)
    9184:	d809883a 	mov	r4,sp
    9188:	880b883a 	mov	r5,r17
    918c:	dc000904 	addi	r16,sp,36
    9190:	d8c00115 	stw	r3,4(sp)
    9194:	d8800015 	stw	r2,0(sp)
    9198:	d9800215 	stw	r6,8(sp)
    919c:	dfc01015 	stw	ra,64(sp)
    91a0:	d9c00315 	stw	r7,12(sp)
    91a4:	0009c1c0 	call	9c1c <__unpack_d>
    91a8:	d9000204 	addi	r4,sp,8
    91ac:	800b883a 	mov	r5,r16
    91b0:	0009c1c0 	call	9c1c <__unpack_d>
    91b4:	d8800417 	ldw	r2,16(sp)
    91b8:	00c00044 	movi	r3,1
    91bc:	01bfffc4 	movi	r6,-1
    91c0:	1880062e 	bgeu	r3,r2,91dc <__gedf2+0x70>
    91c4:	d8800917 	ldw	r2,36(sp)
    91c8:	8809883a 	mov	r4,r17
    91cc:	800b883a 	mov	r5,r16
    91d0:	1880022e 	bgeu	r3,r2,91dc <__gedf2+0x70>
    91d4:	0009d540 	call	9d54 <__fpcmp_parts_d>
    91d8:	100d883a 	mov	r6,r2
    91dc:	3005883a 	mov	r2,r6
    91e0:	dfc01017 	ldw	ra,64(sp)
    91e4:	dc400f17 	ldw	r17,60(sp)
    91e8:	dc000e17 	ldw	r16,56(sp)
    91ec:	dec01104 	addi	sp,sp,68
    91f0:	f800283a 	ret

000091f4 <__ltdf2>:
    91f4:	deffef04 	addi	sp,sp,-68
    91f8:	dc400f15 	stw	r17,60(sp)
    91fc:	dc400404 	addi	r17,sp,16
    9200:	2005883a 	mov	r2,r4
    9204:	2807883a 	mov	r3,r5
    9208:	dc000e15 	stw	r16,56(sp)
    920c:	d809883a 	mov	r4,sp
    9210:	880b883a 	mov	r5,r17
    9214:	dc000904 	addi	r16,sp,36
    9218:	d8c00115 	stw	r3,4(sp)
    921c:	d8800015 	stw	r2,0(sp)
    9220:	d9800215 	stw	r6,8(sp)
    9224:	dfc01015 	stw	ra,64(sp)
    9228:	d9c00315 	stw	r7,12(sp)
    922c:	0009c1c0 	call	9c1c <__unpack_d>
    9230:	d9000204 	addi	r4,sp,8
    9234:	800b883a 	mov	r5,r16
    9238:	0009c1c0 	call	9c1c <__unpack_d>
    923c:	d8800417 	ldw	r2,16(sp)
    9240:	00c00044 	movi	r3,1
    9244:	180d883a 	mov	r6,r3
    9248:	1880062e 	bgeu	r3,r2,9264 <__ltdf2+0x70>
    924c:	d8800917 	ldw	r2,36(sp)
    9250:	8809883a 	mov	r4,r17
    9254:	800b883a 	mov	r5,r16
    9258:	1880022e 	bgeu	r3,r2,9264 <__ltdf2+0x70>
    925c:	0009d540 	call	9d54 <__fpcmp_parts_d>
    9260:	100d883a 	mov	r6,r2
    9264:	3005883a 	mov	r2,r6
    9268:	dfc01017 	ldw	ra,64(sp)
    926c:	dc400f17 	ldw	r17,60(sp)
    9270:	dc000e17 	ldw	r16,56(sp)
    9274:	dec01104 	addi	sp,sp,68
    9278:	f800283a 	ret

0000927c <__floatsidf>:
    927c:	2006d7fa 	srli	r3,r4,31
    9280:	defff604 	addi	sp,sp,-40
    9284:	008000c4 	movi	r2,3
    9288:	dfc00915 	stw	ra,36(sp)
    928c:	dcc00815 	stw	r19,32(sp)
    9290:	dc800715 	stw	r18,28(sp)
    9294:	dc400615 	stw	r17,24(sp)
    9298:	dc000515 	stw	r16,20(sp)
    929c:	d8800015 	stw	r2,0(sp)
    92a0:	d8c00115 	stw	r3,4(sp)
    92a4:	20000f1e 	bne	r4,zero,92e4 <__floatsidf+0x68>
    92a8:	00800084 	movi	r2,2
    92ac:	d8800015 	stw	r2,0(sp)
    92b0:	d809883a 	mov	r4,sp
    92b4:	00099080 	call	9908 <__pack_d>
    92b8:	1009883a 	mov	r4,r2
    92bc:	180b883a 	mov	r5,r3
    92c0:	2005883a 	mov	r2,r4
    92c4:	2807883a 	mov	r3,r5
    92c8:	dfc00917 	ldw	ra,36(sp)
    92cc:	dcc00817 	ldw	r19,32(sp)
    92d0:	dc800717 	ldw	r18,28(sp)
    92d4:	dc400617 	ldw	r17,24(sp)
    92d8:	dc000517 	ldw	r16,20(sp)
    92dc:	dec00a04 	addi	sp,sp,40
    92e0:	f800283a 	ret
    92e4:	00800f04 	movi	r2,60
    92e8:	1807003a 	cmpeq	r3,r3,zero
    92ec:	d8800215 	stw	r2,8(sp)
    92f0:	18001126 	beq	r3,zero,9338 <__floatsidf+0xbc>
    92f4:	0027883a 	mov	r19,zero
    92f8:	2025883a 	mov	r18,r4
    92fc:	d9000315 	stw	r4,12(sp)
    9300:	dcc00415 	stw	r19,16(sp)
    9304:	00098880 	call	9888 <__clzsi2>
    9308:	11000744 	addi	r4,r2,29
    930c:	013fe80e 	bge	zero,r4,92b0 <__floatsidf+0x34>
    9310:	10bfff44 	addi	r2,r2,-3
    9314:	10000c16 	blt	r2,zero,9348 <__floatsidf+0xcc>
    9318:	90a2983a 	sll	r17,r18,r2
    931c:	0021883a 	mov	r16,zero
    9320:	d8800217 	ldw	r2,8(sp)
    9324:	dc400415 	stw	r17,16(sp)
    9328:	dc000315 	stw	r16,12(sp)
    932c:	1105c83a 	sub	r2,r2,r4
    9330:	d8800215 	stw	r2,8(sp)
    9334:	003fde06 	br	92b0 <__floatsidf+0x34>
    9338:	00a00034 	movhi	r2,32768
    933c:	20800a26 	beq	r4,r2,9368 <__floatsidf+0xec>
    9340:	0109c83a 	sub	r4,zero,r4
    9344:	003feb06 	br	92f4 <__floatsidf+0x78>
    9348:	9006d07a 	srli	r3,r18,1
    934c:	008007c4 	movi	r2,31
    9350:	1105c83a 	sub	r2,r2,r4
    9354:	1886d83a 	srl	r3,r3,r2
    9358:	9922983a 	sll	r17,r19,r4
    935c:	9120983a 	sll	r16,r18,r4
    9360:	1c62b03a 	or	r17,r3,r17
    9364:	003fee06 	br	9320 <__floatsidf+0xa4>
    9368:	0009883a 	mov	r4,zero
    936c:	01707834 	movhi	r5,49632
    9370:	003fd306 	br	92c0 <__floatsidf+0x44>

00009374 <__fixdfsi>:
    9374:	defff804 	addi	sp,sp,-32
    9378:	2005883a 	mov	r2,r4
    937c:	2807883a 	mov	r3,r5
    9380:	d809883a 	mov	r4,sp
    9384:	d9400204 	addi	r5,sp,8
    9388:	d8c00115 	stw	r3,4(sp)
    938c:	d8800015 	stw	r2,0(sp)
    9390:	dfc00715 	stw	ra,28(sp)
    9394:	0009c1c0 	call	9c1c <__unpack_d>
    9398:	d8c00217 	ldw	r3,8(sp)
    939c:	00800084 	movi	r2,2
    93a0:	1880051e 	bne	r3,r2,93b8 <__fixdfsi+0x44>
    93a4:	0007883a 	mov	r3,zero
    93a8:	1805883a 	mov	r2,r3
    93ac:	dfc00717 	ldw	ra,28(sp)
    93b0:	dec00804 	addi	sp,sp,32
    93b4:	f800283a 	ret
    93b8:	00800044 	movi	r2,1
    93bc:	10fff92e 	bgeu	r2,r3,93a4 <__fixdfsi+0x30>
    93c0:	00800104 	movi	r2,4
    93c4:	18800426 	beq	r3,r2,93d8 <__fixdfsi+0x64>
    93c8:	d8c00417 	ldw	r3,16(sp)
    93cc:	183ff516 	blt	r3,zero,93a4 <__fixdfsi+0x30>
    93d0:	00800784 	movi	r2,30
    93d4:	10c0080e 	bge	r2,r3,93f8 <__fixdfsi+0x84>
    93d8:	d8800317 	ldw	r2,12(sp)
    93dc:	1000121e 	bne	r2,zero,9428 <__fixdfsi+0xb4>
    93e0:	00e00034 	movhi	r3,32768
    93e4:	18ffffc4 	addi	r3,r3,-1
    93e8:	1805883a 	mov	r2,r3
    93ec:	dfc00717 	ldw	ra,28(sp)
    93f0:	dec00804 	addi	sp,sp,32
    93f4:	f800283a 	ret
    93f8:	00800f04 	movi	r2,60
    93fc:	10d1c83a 	sub	r8,r2,r3
    9400:	40bff804 	addi	r2,r8,-32
    9404:	d9800517 	ldw	r6,20(sp)
    9408:	d9c00617 	ldw	r7,24(sp)
    940c:	10000816 	blt	r2,zero,9430 <__fixdfsi+0xbc>
    9410:	3888d83a 	srl	r4,r7,r2
    9414:	d8800317 	ldw	r2,12(sp)
    9418:	2007883a 	mov	r3,r4
    941c:	103fe226 	beq	r2,zero,93a8 <__fixdfsi+0x34>
    9420:	0107c83a 	sub	r3,zero,r4
    9424:	003fe006 	br	93a8 <__fixdfsi+0x34>
    9428:	00e00034 	movhi	r3,32768
    942c:	003fde06 	br	93a8 <__fixdfsi+0x34>
    9430:	39c7883a 	add	r3,r7,r7
    9434:	008007c4 	movi	r2,31
    9438:	1205c83a 	sub	r2,r2,r8
    943c:	1886983a 	sll	r3,r3,r2
    9440:	3208d83a 	srl	r4,r6,r8
    9444:	1908b03a 	or	r4,r3,r4
    9448:	003ff206 	br	9414 <__fixdfsi+0xa0>

0000944c <__floatunsidf>:
    944c:	defff204 	addi	sp,sp,-56
    9450:	dfc00d15 	stw	ra,52(sp)
    9454:	ddc00c15 	stw	r23,48(sp)
    9458:	dd800b15 	stw	r22,44(sp)
    945c:	dd400a15 	stw	r21,40(sp)
    9460:	dd000915 	stw	r20,36(sp)
    9464:	dcc00815 	stw	r19,32(sp)
    9468:	dc800715 	stw	r18,28(sp)
    946c:	dc400615 	stw	r17,24(sp)
    9470:	dc000515 	stw	r16,20(sp)
    9474:	d8000115 	stw	zero,4(sp)
    9478:	20000f1e 	bne	r4,zero,94b8 <__floatunsidf+0x6c>
    947c:	00800084 	movi	r2,2
    9480:	d8800015 	stw	r2,0(sp)
    9484:	d809883a 	mov	r4,sp
    9488:	00099080 	call	9908 <__pack_d>
    948c:	dfc00d17 	ldw	ra,52(sp)
    9490:	ddc00c17 	ldw	r23,48(sp)
    9494:	dd800b17 	ldw	r22,44(sp)
    9498:	dd400a17 	ldw	r21,40(sp)
    949c:	dd000917 	ldw	r20,36(sp)
    94a0:	dcc00817 	ldw	r19,32(sp)
    94a4:	dc800717 	ldw	r18,28(sp)
    94a8:	dc400617 	ldw	r17,24(sp)
    94ac:	dc000517 	ldw	r16,20(sp)
    94b0:	dec00e04 	addi	sp,sp,56
    94b4:	f800283a 	ret
    94b8:	008000c4 	movi	r2,3
    94bc:	00c00f04 	movi	r3,60
    94c0:	002f883a 	mov	r23,zero
    94c4:	202d883a 	mov	r22,r4
    94c8:	d8800015 	stw	r2,0(sp)
    94cc:	d8c00215 	stw	r3,8(sp)
    94d0:	d9000315 	stw	r4,12(sp)
    94d4:	ddc00415 	stw	r23,16(sp)
    94d8:	00098880 	call	9888 <__clzsi2>
    94dc:	12400744 	addi	r9,r2,29
    94e0:	48000b16 	blt	r9,zero,9510 <__floatunsidf+0xc4>
    94e4:	483fe726 	beq	r9,zero,9484 <__floatunsidf+0x38>
    94e8:	10bfff44 	addi	r2,r2,-3
    94ec:	10002e16 	blt	r2,zero,95a8 <__floatunsidf+0x15c>
    94f0:	b0a2983a 	sll	r17,r22,r2
    94f4:	0021883a 	mov	r16,zero
    94f8:	d8800217 	ldw	r2,8(sp)
    94fc:	dc400415 	stw	r17,16(sp)
    9500:	dc000315 	stw	r16,12(sp)
    9504:	1245c83a 	sub	r2,r2,r9
    9508:	d8800215 	stw	r2,8(sp)
    950c:	003fdd06 	br	9484 <__floatunsidf+0x38>
    9510:	0255c83a 	sub	r10,zero,r9
    9514:	51bff804 	addi	r6,r10,-32
    9518:	30001b16 	blt	r6,zero,9588 <__floatunsidf+0x13c>
    951c:	b9a8d83a 	srl	r20,r23,r6
    9520:	002b883a 	mov	r21,zero
    9524:	000f883a 	mov	r7,zero
    9528:	01000044 	movi	r4,1
    952c:	0011883a 	mov	r8,zero
    9530:	30002516 	blt	r6,zero,95c8 <__floatunsidf+0x17c>
    9534:	21a6983a 	sll	r19,r4,r6
    9538:	0025883a 	mov	r18,zero
    953c:	00bfffc4 	movi	r2,-1
    9540:	9089883a 	add	r4,r18,r2
    9544:	988b883a 	add	r5,r19,r2
    9548:	248d803a 	cmpltu	r6,r4,r18
    954c:	314b883a 	add	r5,r6,r5
    9550:	b104703a 	and	r2,r22,r4
    9554:	b946703a 	and	r3,r23,r5
    9558:	10c4b03a 	or	r2,r2,r3
    955c:	10000226 	beq	r2,zero,9568 <__floatunsidf+0x11c>
    9560:	01c00044 	movi	r7,1
    9564:	0011883a 	mov	r8,zero
    9568:	d9000217 	ldw	r4,8(sp)
    956c:	a1c4b03a 	or	r2,r20,r7
    9570:	aa06b03a 	or	r3,r21,r8
    9574:	2249c83a 	sub	r4,r4,r9
    9578:	d8c00415 	stw	r3,16(sp)
    957c:	d9000215 	stw	r4,8(sp)
    9580:	d8800315 	stw	r2,12(sp)
    9584:	003fbf06 	br	9484 <__floatunsidf+0x38>
    9588:	bdc7883a 	add	r3,r23,r23
    958c:	008007c4 	movi	r2,31
    9590:	1285c83a 	sub	r2,r2,r10
    9594:	1886983a 	sll	r3,r3,r2
    9598:	b2a8d83a 	srl	r20,r22,r10
    959c:	baaad83a 	srl	r21,r23,r10
    95a0:	1d28b03a 	or	r20,r3,r20
    95a4:	003fdf06 	br	9524 <__floatunsidf+0xd8>
    95a8:	b006d07a 	srli	r3,r22,1
    95ac:	008007c4 	movi	r2,31
    95b0:	1245c83a 	sub	r2,r2,r9
    95b4:	1886d83a 	srl	r3,r3,r2
    95b8:	ba62983a 	sll	r17,r23,r9
    95bc:	b260983a 	sll	r16,r22,r9
    95c0:	1c62b03a 	or	r17,r3,r17
    95c4:	003fcc06 	br	94f8 <__floatunsidf+0xac>
    95c8:	2006d07a 	srli	r3,r4,1
    95cc:	008007c4 	movi	r2,31
    95d0:	1285c83a 	sub	r2,r2,r10
    95d4:	18a6d83a 	srl	r19,r3,r2
    95d8:	22a4983a 	sll	r18,r4,r10
    95dc:	003fd706 	br	953c <__floatunsidf+0xf0>

000095e0 <udivmodsi4>:
    95e0:	29001b2e 	bgeu	r5,r4,9650 <udivmodsi4+0x70>
    95e4:	28001a16 	blt	r5,zero,9650 <udivmodsi4+0x70>
    95e8:	00800044 	movi	r2,1
    95ec:	0007883a 	mov	r3,zero
    95f0:	01c007c4 	movi	r7,31
    95f4:	00000306 	br	9604 <udivmodsi4+0x24>
    95f8:	19c01326 	beq	r3,r7,9648 <udivmodsi4+0x68>
    95fc:	18c00044 	addi	r3,r3,1
    9600:	28000416 	blt	r5,zero,9614 <udivmodsi4+0x34>
    9604:	294b883a 	add	r5,r5,r5
    9608:	1085883a 	add	r2,r2,r2
    960c:	293ffa36 	bltu	r5,r4,95f8 <udivmodsi4+0x18>
    9610:	10000d26 	beq	r2,zero,9648 <udivmodsi4+0x68>
    9614:	0007883a 	mov	r3,zero
    9618:	21400236 	bltu	r4,r5,9624 <udivmodsi4+0x44>
    961c:	2149c83a 	sub	r4,r4,r5
    9620:	1886b03a 	or	r3,r3,r2
    9624:	1004d07a 	srli	r2,r2,1
    9628:	280ad07a 	srli	r5,r5,1
    962c:	103ffa1e 	bne	r2,zero,9618 <udivmodsi4+0x38>
    9630:	30000226 	beq	r6,zero,963c <udivmodsi4+0x5c>
    9634:	2005883a 	mov	r2,r4
    9638:	f800283a 	ret
    963c:	1809883a 	mov	r4,r3
    9640:	2005883a 	mov	r2,r4
    9644:	f800283a 	ret
    9648:	0007883a 	mov	r3,zero
    964c:	003ff806 	br	9630 <udivmodsi4+0x50>
    9650:	00800044 	movi	r2,1
    9654:	0007883a 	mov	r3,zero
    9658:	003fef06 	br	9618 <udivmodsi4+0x38>

0000965c <__divsi3>:
    965c:	defffe04 	addi	sp,sp,-8
    9660:	dc000015 	stw	r16,0(sp)
    9664:	dfc00115 	stw	ra,4(sp)
    9668:	0021883a 	mov	r16,zero
    966c:	20000c16 	blt	r4,zero,96a0 <__divsi3+0x44>
    9670:	000d883a 	mov	r6,zero
    9674:	28000e16 	blt	r5,zero,96b0 <__divsi3+0x54>
    9678:	00095e00 	call	95e0 <udivmodsi4>
    967c:	1007883a 	mov	r3,r2
    9680:	8005003a 	cmpeq	r2,r16,zero
    9684:	1000011e 	bne	r2,zero,968c <__divsi3+0x30>
    9688:	00c7c83a 	sub	r3,zero,r3
    968c:	1805883a 	mov	r2,r3
    9690:	dfc00117 	ldw	ra,4(sp)
    9694:	dc000017 	ldw	r16,0(sp)
    9698:	dec00204 	addi	sp,sp,8
    969c:	f800283a 	ret
    96a0:	0109c83a 	sub	r4,zero,r4
    96a4:	04000044 	movi	r16,1
    96a8:	000d883a 	mov	r6,zero
    96ac:	283ff20e 	bge	r5,zero,9678 <__divsi3+0x1c>
    96b0:	014bc83a 	sub	r5,zero,r5
    96b4:	8021003a 	cmpeq	r16,r16,zero
    96b8:	003fef06 	br	9678 <__divsi3+0x1c>

000096bc <__modsi3>:
    96bc:	deffff04 	addi	sp,sp,-4
    96c0:	dfc00015 	stw	ra,0(sp)
    96c4:	01800044 	movi	r6,1
    96c8:	2807883a 	mov	r3,r5
    96cc:	20000416 	blt	r4,zero,96e0 <__modsi3+0x24>
    96d0:	28000c16 	blt	r5,zero,9704 <__modsi3+0x48>
    96d4:	dfc00017 	ldw	ra,0(sp)
    96d8:	dec00104 	addi	sp,sp,4
    96dc:	00095e01 	jmpi	95e0 <udivmodsi4>
    96e0:	0109c83a 	sub	r4,zero,r4
    96e4:	28000b16 	blt	r5,zero,9714 <__modsi3+0x58>
    96e8:	180b883a 	mov	r5,r3
    96ec:	01800044 	movi	r6,1
    96f0:	00095e00 	call	95e0 <udivmodsi4>
    96f4:	0085c83a 	sub	r2,zero,r2
    96f8:	dfc00017 	ldw	ra,0(sp)
    96fc:	dec00104 	addi	sp,sp,4
    9700:	f800283a 	ret
    9704:	014bc83a 	sub	r5,zero,r5
    9708:	dfc00017 	ldw	ra,0(sp)
    970c:	dec00104 	addi	sp,sp,4
    9710:	00095e01 	jmpi	95e0 <udivmodsi4>
    9714:	0147c83a 	sub	r3,zero,r5
    9718:	003ff306 	br	96e8 <__modsi3+0x2c>

0000971c <__udivsi3>:
    971c:	000d883a 	mov	r6,zero
    9720:	00095e01 	jmpi	95e0 <udivmodsi4>

00009724 <__umodsi3>:
    9724:	01800044 	movi	r6,1
    9728:	00095e01 	jmpi	95e0 <udivmodsi4>

0000972c <__mulsi3>:
    972c:	20000a26 	beq	r4,zero,9758 <__mulsi3+0x2c>
    9730:	0007883a 	mov	r3,zero
    9734:	2080004c 	andi	r2,r4,1
    9738:	1005003a 	cmpeq	r2,r2,zero
    973c:	2008d07a 	srli	r4,r4,1
    9740:	1000011e 	bne	r2,zero,9748 <__mulsi3+0x1c>
    9744:	1947883a 	add	r3,r3,r5
    9748:	294b883a 	add	r5,r5,r5
    974c:	203ff91e 	bne	r4,zero,9734 <__mulsi3+0x8>
    9750:	1805883a 	mov	r2,r3
    9754:	f800283a 	ret
    9758:	0007883a 	mov	r3,zero
    975c:	1805883a 	mov	r2,r3
    9760:	f800283a 	ret

00009764 <__muldi3>:
    9764:	defff204 	addi	sp,sp,-56
    9768:	df000c15 	stw	fp,48(sp)
    976c:	3038d43a 	srli	fp,r6,16
    9770:	dd000815 	stw	r20,32(sp)
    9774:	dc400515 	stw	r17,20(sp)
    9778:	2028d43a 	srli	r20,r4,16
    977c:	247fffcc 	andi	r17,r4,65535
    9780:	dc000415 	stw	r16,16(sp)
    9784:	343fffcc 	andi	r16,r6,65535
    9788:	dcc00715 	stw	r19,28(sp)
    978c:	d9000015 	stw	r4,0(sp)
    9790:	2827883a 	mov	r19,r5
    9794:	8809883a 	mov	r4,r17
    9798:	d9400115 	stw	r5,4(sp)
    979c:	800b883a 	mov	r5,r16
    97a0:	d9800215 	stw	r6,8(sp)
    97a4:	dfc00d15 	stw	ra,52(sp)
    97a8:	d9c00315 	stw	r7,12(sp)
    97ac:	dd800a15 	stw	r22,40(sp)
    97b0:	dd400915 	stw	r21,36(sp)
    97b4:	302d883a 	mov	r22,r6
    97b8:	ddc00b15 	stw	r23,44(sp)
    97bc:	dc800615 	stw	r18,24(sp)
    97c0:	000972c0 	call	972c <__mulsi3>
    97c4:	8809883a 	mov	r4,r17
    97c8:	e00b883a 	mov	r5,fp
    97cc:	102b883a 	mov	r21,r2
    97d0:	000972c0 	call	972c <__mulsi3>
    97d4:	800b883a 	mov	r5,r16
    97d8:	a009883a 	mov	r4,r20
    97dc:	1023883a 	mov	r17,r2
    97e0:	000972c0 	call	972c <__mulsi3>
    97e4:	a009883a 	mov	r4,r20
    97e8:	e00b883a 	mov	r5,fp
    97ec:	1021883a 	mov	r16,r2
    97f0:	000972c0 	call	972c <__mulsi3>
    97f4:	a8ffffcc 	andi	r3,r21,65535
    97f8:	a82ad43a 	srli	r21,r21,16
    97fc:	8c23883a 	add	r17,r17,r16
    9800:	1011883a 	mov	r8,r2
    9804:	ac6b883a 	add	r21,r21,r17
    9808:	a804943a 	slli	r2,r21,16
    980c:	b009883a 	mov	r4,r22
    9810:	980b883a 	mov	r5,r19
    9814:	10c7883a 	add	r3,r2,r3
    9818:	a812d43a 	srli	r9,r21,16
    981c:	180d883a 	mov	r6,r3
    9820:	ac00022e 	bgeu	r21,r16,982c <__muldi3+0xc8>
    9824:	00800074 	movhi	r2,1
    9828:	4091883a 	add	r8,r8,r2
    982c:	4267883a 	add	r19,r8,r9
    9830:	302d883a 	mov	r22,r6
    9834:	000972c0 	call	972c <__mulsi3>
    9838:	d9400317 	ldw	r5,12(sp)
    983c:	d9000017 	ldw	r4,0(sp)
    9840:	1023883a 	mov	r17,r2
    9844:	000972c0 	call	972c <__mulsi3>
    9848:	14cb883a 	add	r5,r2,r19
    984c:	894b883a 	add	r5,r17,r5
    9850:	b005883a 	mov	r2,r22
    9854:	2807883a 	mov	r3,r5
    9858:	dfc00d17 	ldw	ra,52(sp)
    985c:	df000c17 	ldw	fp,48(sp)
    9860:	ddc00b17 	ldw	r23,44(sp)
    9864:	dd800a17 	ldw	r22,40(sp)
    9868:	dd400917 	ldw	r21,36(sp)
    986c:	dd000817 	ldw	r20,32(sp)
    9870:	dcc00717 	ldw	r19,28(sp)
    9874:	dc800617 	ldw	r18,24(sp)
    9878:	dc400517 	ldw	r17,20(sp)
    987c:	dc000417 	ldw	r16,16(sp)
    9880:	dec00e04 	addi	sp,sp,56
    9884:	f800283a 	ret

00009888 <__clzsi2>:
    9888:	00bfffd4 	movui	r2,65535
    988c:	11000e36 	bltu	r2,r4,98c8 <__clzsi2+0x40>
    9890:	00803fc4 	movi	r2,255
    9894:	01400204 	movi	r5,8
    9898:	0007883a 	mov	r3,zero
    989c:	11001036 	bltu	r2,r4,98e0 <__clzsi2+0x58>
    98a0:	000b883a 	mov	r5,zero
    98a4:	20c6d83a 	srl	r3,r4,r3
    98a8:	00800074 	movhi	r2,1
    98ac:	10809304 	addi	r2,r2,588
    98b0:	1887883a 	add	r3,r3,r2
    98b4:	18800003 	ldbu	r2,0(r3)
    98b8:	00c00804 	movi	r3,32
    98bc:	2885883a 	add	r2,r5,r2
    98c0:	1885c83a 	sub	r2,r3,r2
    98c4:	f800283a 	ret
    98c8:	01400404 	movi	r5,16
    98cc:	00804034 	movhi	r2,256
    98d0:	10bfffc4 	addi	r2,r2,-1
    98d4:	2807883a 	mov	r3,r5
    98d8:	113ff22e 	bgeu	r2,r4,98a4 <__clzsi2+0x1c>
    98dc:	01400604 	movi	r5,24
    98e0:	2807883a 	mov	r3,r5
    98e4:	20c6d83a 	srl	r3,r4,r3
    98e8:	00800074 	movhi	r2,1
    98ec:	10809304 	addi	r2,r2,588
    98f0:	1887883a 	add	r3,r3,r2
    98f4:	18800003 	ldbu	r2,0(r3)
    98f8:	00c00804 	movi	r3,32
    98fc:	2885883a 	add	r2,r5,r2
    9900:	1885c83a 	sub	r2,r3,r2
    9904:	f800283a 	ret

00009908 <__pack_d>:
    9908:	20c00017 	ldw	r3,0(r4)
    990c:	defffd04 	addi	sp,sp,-12
    9910:	dc000015 	stw	r16,0(sp)
    9914:	dc800215 	stw	r18,8(sp)
    9918:	dc400115 	stw	r17,4(sp)
    991c:	00800044 	movi	r2,1
    9920:	22000317 	ldw	r8,12(r4)
    9924:	001f883a 	mov	r15,zero
    9928:	22400417 	ldw	r9,16(r4)
    992c:	24000117 	ldw	r16,4(r4)
    9930:	10c0552e 	bgeu	r2,r3,9a88 <__pack_d+0x180>
    9934:	00800104 	movi	r2,4
    9938:	18804f26 	beq	r3,r2,9a78 <__pack_d+0x170>
    993c:	00800084 	movi	r2,2
    9940:	18800226 	beq	r3,r2,994c <__pack_d+0x44>
    9944:	4244b03a 	or	r2,r8,r9
    9948:	10001a1e 	bne	r2,zero,99b4 <__pack_d+0xac>
    994c:	000d883a 	mov	r6,zero
    9950:	000f883a 	mov	r7,zero
    9954:	0011883a 	mov	r8,zero
    9958:	00800434 	movhi	r2,16
    995c:	10bfffc4 	addi	r2,r2,-1
    9960:	301d883a 	mov	r14,r6
    9964:	3884703a 	and	r2,r7,r2
    9968:	400a953a 	slli	r5,r8,20
    996c:	79bffc2c 	andhi	r6,r15,65520
    9970:	308cb03a 	or	r6,r6,r2
    9974:	00e00434 	movhi	r3,32784
    9978:	18ffffc4 	addi	r3,r3,-1
    997c:	800497fa 	slli	r2,r16,31
    9980:	30c6703a 	and	r3,r6,r3
    9984:	1946b03a 	or	r3,r3,r5
    9988:	01600034 	movhi	r5,32768
    998c:	297fffc4 	addi	r5,r5,-1
    9990:	194a703a 	and	r5,r3,r5
    9994:	288ab03a 	or	r5,r5,r2
    9998:	2807883a 	mov	r3,r5
    999c:	7005883a 	mov	r2,r14
    99a0:	dc800217 	ldw	r18,8(sp)
    99a4:	dc400117 	ldw	r17,4(sp)
    99a8:	dc000017 	ldw	r16,0(sp)
    99ac:	dec00304 	addi	sp,sp,12
    99b0:	f800283a 	ret
    99b4:	21000217 	ldw	r4,8(r4)
    99b8:	00bf0084 	movi	r2,-1022
    99bc:	20803f16 	blt	r4,r2,9abc <__pack_d+0x1b4>
    99c0:	0080ffc4 	movi	r2,1023
    99c4:	11002c16 	blt	r2,r4,9a78 <__pack_d+0x170>
    99c8:	00803fc4 	movi	r2,255
    99cc:	408c703a 	and	r6,r8,r2
    99d0:	00802004 	movi	r2,128
    99d4:	0007883a 	mov	r3,zero
    99d8:	000f883a 	mov	r7,zero
    99dc:	2280ffc4 	addi	r10,r4,1023
    99e0:	30801e26 	beq	r6,r2,9a5c <__pack_d+0x154>
    99e4:	00801fc4 	movi	r2,127
    99e8:	4089883a 	add	r4,r8,r2
    99ec:	220d803a 	cmpltu	r6,r4,r8
    99f0:	324d883a 	add	r6,r6,r9
    99f4:	2011883a 	mov	r8,r4
    99f8:	3013883a 	mov	r9,r6
    99fc:	00880034 	movhi	r2,8192
    9a00:	10bfffc4 	addi	r2,r2,-1
    9a04:	12400d36 	bltu	r2,r9,9a3c <__pack_d+0x134>
    9a08:	4804963a 	slli	r2,r9,24
    9a0c:	400cd23a 	srli	r6,r8,8
    9a10:	480ed23a 	srli	r7,r9,8
    9a14:	013fffc4 	movi	r4,-1
    9a18:	118cb03a 	or	r6,r2,r6
    9a1c:	01400434 	movhi	r5,16
    9a20:	297fffc4 	addi	r5,r5,-1
    9a24:	3104703a 	and	r2,r6,r4
    9a28:	3946703a 	and	r3,r7,r5
    9a2c:	5201ffcc 	andi	r8,r10,2047
    9a30:	100d883a 	mov	r6,r2
    9a34:	180f883a 	mov	r7,r3
    9a38:	003fc706 	br	9958 <__pack_d+0x50>
    9a3c:	480897fa 	slli	r4,r9,31
    9a40:	4004d07a 	srli	r2,r8,1
    9a44:	4806d07a 	srli	r3,r9,1
    9a48:	52800044 	addi	r10,r10,1
    9a4c:	2084b03a 	or	r2,r4,r2
    9a50:	1011883a 	mov	r8,r2
    9a54:	1813883a 	mov	r9,r3
    9a58:	003feb06 	br	9a08 <__pack_d+0x100>
    9a5c:	383fe11e 	bne	r7,zero,99e4 <__pack_d+0xdc>
    9a60:	01004004 	movi	r4,256
    9a64:	4104703a 	and	r2,r8,r4
    9a68:	10c4b03a 	or	r2,r2,r3
    9a6c:	103fe326 	beq	r2,zero,99fc <__pack_d+0xf4>
    9a70:	3005883a 	mov	r2,r6
    9a74:	003fdc06 	br	99e8 <__pack_d+0xe0>
    9a78:	000d883a 	mov	r6,zero
    9a7c:	000f883a 	mov	r7,zero
    9a80:	0201ffc4 	movi	r8,2047
    9a84:	003fb406 	br	9958 <__pack_d+0x50>
    9a88:	0005883a 	mov	r2,zero
    9a8c:	00c00234 	movhi	r3,8
    9a90:	408cb03a 	or	r6,r8,r2
    9a94:	48ceb03a 	or	r7,r9,r3
    9a98:	013fffc4 	movi	r4,-1
    9a9c:	01400434 	movhi	r5,16
    9aa0:	297fffc4 	addi	r5,r5,-1
    9aa4:	3104703a 	and	r2,r6,r4
    9aa8:	3946703a 	and	r3,r7,r5
    9aac:	100d883a 	mov	r6,r2
    9ab0:	180f883a 	mov	r7,r3
    9ab4:	0201ffc4 	movi	r8,2047
    9ab8:	003fa706 	br	9958 <__pack_d+0x50>
    9abc:	1109c83a 	sub	r4,r2,r4
    9ac0:	00800e04 	movi	r2,56
    9ac4:	11004316 	blt	r2,r4,9bd4 <__pack_d+0x2cc>
    9ac8:	21fff804 	addi	r7,r4,-32
    9acc:	38004516 	blt	r7,zero,9be4 <__pack_d+0x2dc>
    9ad0:	49d8d83a 	srl	r12,r9,r7
    9ad4:	001b883a 	mov	r13,zero
    9ad8:	0023883a 	mov	r17,zero
    9adc:	01400044 	movi	r5,1
    9ae0:	0025883a 	mov	r18,zero
    9ae4:	38004716 	blt	r7,zero,9c04 <__pack_d+0x2fc>
    9ae8:	29d6983a 	sll	r11,r5,r7
    9aec:	0015883a 	mov	r10,zero
    9af0:	00bfffc4 	movi	r2,-1
    9af4:	5089883a 	add	r4,r10,r2
    9af8:	588b883a 	add	r5,r11,r2
    9afc:	228d803a 	cmpltu	r6,r4,r10
    9b00:	314b883a 	add	r5,r6,r5
    9b04:	4104703a 	and	r2,r8,r4
    9b08:	4946703a 	and	r3,r9,r5
    9b0c:	10c4b03a 	or	r2,r2,r3
    9b10:	10000226 	beq	r2,zero,9b1c <__pack_d+0x214>
    9b14:	04400044 	movi	r17,1
    9b18:	0025883a 	mov	r18,zero
    9b1c:	00803fc4 	movi	r2,255
    9b20:	644eb03a 	or	r7,r12,r17
    9b24:	3892703a 	and	r9,r7,r2
    9b28:	00802004 	movi	r2,128
    9b2c:	6c90b03a 	or	r8,r13,r18
    9b30:	0015883a 	mov	r10,zero
    9b34:	48801626 	beq	r9,r2,9b90 <__pack_d+0x288>
    9b38:	01001fc4 	movi	r4,127
    9b3c:	3905883a 	add	r2,r7,r4
    9b40:	11cd803a 	cmpltu	r6,r2,r7
    9b44:	320d883a 	add	r6,r6,r8
    9b48:	100f883a 	mov	r7,r2
    9b4c:	00840034 	movhi	r2,4096
    9b50:	10bfffc4 	addi	r2,r2,-1
    9b54:	3011883a 	mov	r8,r6
    9b58:	0007883a 	mov	r3,zero
    9b5c:	11801b36 	bltu	r2,r6,9bcc <__pack_d+0x2c4>
    9b60:	4004963a 	slli	r2,r8,24
    9b64:	3808d23a 	srli	r4,r7,8
    9b68:	400ad23a 	srli	r5,r8,8
    9b6c:	1813883a 	mov	r9,r3
    9b70:	1108b03a 	or	r4,r2,r4
    9b74:	00bfffc4 	movi	r2,-1
    9b78:	00c00434 	movhi	r3,16
    9b7c:	18ffffc4 	addi	r3,r3,-1
    9b80:	208c703a 	and	r6,r4,r2
    9b84:	28ce703a 	and	r7,r5,r3
    9b88:	4a01ffcc 	andi	r8,r9,2047
    9b8c:	003f7206 	br	9958 <__pack_d+0x50>
    9b90:	503fe91e 	bne	r10,zero,9b38 <__pack_d+0x230>
    9b94:	01004004 	movi	r4,256
    9b98:	3904703a 	and	r2,r7,r4
    9b9c:	0007883a 	mov	r3,zero
    9ba0:	10c4b03a 	or	r2,r2,r3
    9ba4:	10000626 	beq	r2,zero,9bc0 <__pack_d+0x2b8>
    9ba8:	3a45883a 	add	r2,r7,r9
    9bac:	11cd803a 	cmpltu	r6,r2,r7
    9bb0:	320d883a 	add	r6,r6,r8
    9bb4:	100f883a 	mov	r7,r2
    9bb8:	3011883a 	mov	r8,r6
    9bbc:	0007883a 	mov	r3,zero
    9bc0:	00840034 	movhi	r2,4096
    9bc4:	10bfffc4 	addi	r2,r2,-1
    9bc8:	123fe52e 	bgeu	r2,r8,9b60 <__pack_d+0x258>
    9bcc:	00c00044 	movi	r3,1
    9bd0:	003fe306 	br	9b60 <__pack_d+0x258>
    9bd4:	0009883a 	mov	r4,zero
    9bd8:	0013883a 	mov	r9,zero
    9bdc:	000b883a 	mov	r5,zero
    9be0:	003fe406 	br	9b74 <__pack_d+0x26c>
    9be4:	4a47883a 	add	r3,r9,r9
    9be8:	008007c4 	movi	r2,31
    9bec:	1105c83a 	sub	r2,r2,r4
    9bf0:	1886983a 	sll	r3,r3,r2
    9bf4:	4118d83a 	srl	r12,r8,r4
    9bf8:	491ad83a 	srl	r13,r9,r4
    9bfc:	1b18b03a 	or	r12,r3,r12
    9c00:	003fb506 	br	9ad8 <__pack_d+0x1d0>
    9c04:	2806d07a 	srli	r3,r5,1
    9c08:	008007c4 	movi	r2,31
    9c0c:	1105c83a 	sub	r2,r2,r4
    9c10:	1896d83a 	srl	r11,r3,r2
    9c14:	2914983a 	sll	r10,r5,r4
    9c18:	003fb506 	br	9af0 <__pack_d+0x1e8>

00009c1c <__unpack_d>:
    9c1c:	20c00117 	ldw	r3,4(r4)
    9c20:	22400017 	ldw	r9,0(r4)
    9c24:	00800434 	movhi	r2,16
    9c28:	10bfffc4 	addi	r2,r2,-1
    9c2c:	1808d53a 	srli	r4,r3,20
    9c30:	180cd7fa 	srli	r6,r3,31
    9c34:	1894703a 	and	r10,r3,r2
    9c38:	2201ffcc 	andi	r8,r4,2047
    9c3c:	281b883a 	mov	r13,r5
    9c40:	4817883a 	mov	r11,r9
    9c44:	29800115 	stw	r6,4(r5)
    9c48:	5019883a 	mov	r12,r10
    9c4c:	40001e1e 	bne	r8,zero,9cc8 <__unpack_d+0xac>
    9c50:	4a84b03a 	or	r2,r9,r10
    9c54:	10001926 	beq	r2,zero,9cbc <__unpack_d+0xa0>
    9c58:	4804d63a 	srli	r2,r9,24
    9c5c:	500c923a 	slli	r6,r10,8
    9c60:	013f0084 	movi	r4,-1022
    9c64:	00c40034 	movhi	r3,4096
    9c68:	18ffffc4 	addi	r3,r3,-1
    9c6c:	118cb03a 	or	r6,r2,r6
    9c70:	008000c4 	movi	r2,3
    9c74:	480a923a 	slli	r5,r9,8
    9c78:	68800015 	stw	r2,0(r13)
    9c7c:	69000215 	stw	r4,8(r13)
    9c80:	19800b36 	bltu	r3,r6,9cb0 <__unpack_d+0x94>
    9c84:	200f883a 	mov	r7,r4
    9c88:	1811883a 	mov	r8,r3
    9c8c:	2945883a 	add	r2,r5,r5
    9c90:	1149803a 	cmpltu	r4,r2,r5
    9c94:	3187883a 	add	r3,r6,r6
    9c98:	20c9883a 	add	r4,r4,r3
    9c9c:	100b883a 	mov	r5,r2
    9ca0:	200d883a 	mov	r6,r4
    9ca4:	39ffffc4 	addi	r7,r7,-1
    9ca8:	413ff82e 	bgeu	r8,r4,9c8c <__unpack_d+0x70>
    9cac:	69c00215 	stw	r7,8(r13)
    9cb0:	69800415 	stw	r6,16(r13)
    9cb4:	69400315 	stw	r5,12(r13)
    9cb8:	f800283a 	ret
    9cbc:	00800084 	movi	r2,2
    9cc0:	28800015 	stw	r2,0(r5)
    9cc4:	f800283a 	ret
    9cc8:	0081ffc4 	movi	r2,2047
    9ccc:	40800f26 	beq	r8,r2,9d0c <__unpack_d+0xf0>
    9cd0:	480cd63a 	srli	r6,r9,24
    9cd4:	5006923a 	slli	r3,r10,8
    9cd8:	4804923a 	slli	r2,r9,8
    9cdc:	0009883a 	mov	r4,zero
    9ce0:	30c6b03a 	or	r3,r6,r3
    9ce4:	01440034 	movhi	r5,4096
    9ce8:	110cb03a 	or	r6,r2,r4
    9cec:	423f0044 	addi	r8,r8,-1023
    9cf0:	194eb03a 	or	r7,r3,r5
    9cf4:	008000c4 	movi	r2,3
    9cf8:	69c00415 	stw	r7,16(r13)
    9cfc:	6a000215 	stw	r8,8(r13)
    9d00:	68800015 	stw	r2,0(r13)
    9d04:	69800315 	stw	r6,12(r13)
    9d08:	f800283a 	ret
    9d0c:	4a84b03a 	or	r2,r9,r10
    9d10:	1000031e 	bne	r2,zero,9d20 <__unpack_d+0x104>
    9d14:	00800104 	movi	r2,4
    9d18:	28800015 	stw	r2,0(r5)
    9d1c:	f800283a 	ret
    9d20:	0009883a 	mov	r4,zero
    9d24:	01400234 	movhi	r5,8
    9d28:	4904703a 	and	r2,r9,r4
    9d2c:	5146703a 	and	r3,r10,r5
    9d30:	10c4b03a 	or	r2,r2,r3
    9d34:	10000526 	beq	r2,zero,9d4c <__unpack_d+0x130>
    9d38:	00800044 	movi	r2,1
    9d3c:	68800015 	stw	r2,0(r13)
    9d40:	6b000415 	stw	r12,16(r13)
    9d44:	6ac00315 	stw	r11,12(r13)
    9d48:	f800283a 	ret
    9d4c:	68000015 	stw	zero,0(r13)
    9d50:	003ffb06 	br	9d40 <__unpack_d+0x124>

00009d54 <__fpcmp_parts_d>:
    9d54:	21800017 	ldw	r6,0(r4)
    9d58:	00c00044 	movi	r3,1
    9d5c:	19800a2e 	bgeu	r3,r6,9d88 <__fpcmp_parts_d+0x34>
    9d60:	28800017 	ldw	r2,0(r5)
    9d64:	1880082e 	bgeu	r3,r2,9d88 <__fpcmp_parts_d+0x34>
    9d68:	00c00104 	movi	r3,4
    9d6c:	30c02626 	beq	r6,r3,9e08 <__fpcmp_parts_d+0xb4>
    9d70:	10c02226 	beq	r2,r3,9dfc <__fpcmp_parts_d+0xa8>
    9d74:	00c00084 	movi	r3,2
    9d78:	30c00526 	beq	r6,r3,9d90 <__fpcmp_parts_d+0x3c>
    9d7c:	10c0071e 	bne	r2,r3,9d9c <__fpcmp_parts_d+0x48>
    9d80:	20800117 	ldw	r2,4(r4)
    9d84:	1000091e 	bne	r2,zero,9dac <__fpcmp_parts_d+0x58>
    9d88:	00800044 	movi	r2,1
    9d8c:	f800283a 	ret
    9d90:	10c01a1e 	bne	r2,r3,9dfc <__fpcmp_parts_d+0xa8>
    9d94:	0005883a 	mov	r2,zero
    9d98:	f800283a 	ret
    9d9c:	22000117 	ldw	r8,4(r4)
    9da0:	28800117 	ldw	r2,4(r5)
    9da4:	40800326 	beq	r8,r2,9db4 <__fpcmp_parts_d+0x60>
    9da8:	403ff726 	beq	r8,zero,9d88 <__fpcmp_parts_d+0x34>
    9dac:	00bfffc4 	movi	r2,-1
    9db0:	f800283a 	ret
    9db4:	20c00217 	ldw	r3,8(r4)
    9db8:	28800217 	ldw	r2,8(r5)
    9dbc:	10fffa16 	blt	r2,r3,9da8 <__fpcmp_parts_d+0x54>
    9dc0:	18800916 	blt	r3,r2,9de8 <__fpcmp_parts_d+0x94>
    9dc4:	21c00417 	ldw	r7,16(r4)
    9dc8:	28c00417 	ldw	r3,16(r5)
    9dcc:	21800317 	ldw	r6,12(r4)
    9dd0:	28800317 	ldw	r2,12(r5)
    9dd4:	19fff436 	bltu	r3,r7,9da8 <__fpcmp_parts_d+0x54>
    9dd8:	38c00526 	beq	r7,r3,9df0 <__fpcmp_parts_d+0x9c>
    9ddc:	38c00236 	bltu	r7,r3,9de8 <__fpcmp_parts_d+0x94>
    9de0:	19ffec1e 	bne	r3,r7,9d94 <__fpcmp_parts_d+0x40>
    9de4:	30bfeb2e 	bgeu	r6,r2,9d94 <__fpcmp_parts_d+0x40>
    9de8:	403fe71e 	bne	r8,zero,9d88 <__fpcmp_parts_d+0x34>
    9dec:	003fef06 	br	9dac <__fpcmp_parts_d+0x58>
    9df0:	11bffa2e 	bgeu	r2,r6,9ddc <__fpcmp_parts_d+0x88>
    9df4:	403fe426 	beq	r8,zero,9d88 <__fpcmp_parts_d+0x34>
    9df8:	003fec06 	br	9dac <__fpcmp_parts_d+0x58>
    9dfc:	28800117 	ldw	r2,4(r5)
    9e00:	103fe11e 	bne	r2,zero,9d88 <__fpcmp_parts_d+0x34>
    9e04:	003fe906 	br	9dac <__fpcmp_parts_d+0x58>
    9e08:	11bfdd1e 	bne	r2,r6,9d80 <__fpcmp_parts_d+0x2c>
    9e0c:	28c00117 	ldw	r3,4(r5)
    9e10:	20800117 	ldw	r2,4(r4)
    9e14:	1885c83a 	sub	r2,r3,r2
    9e18:	f800283a 	ret

00009e1c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9e1c:	defff804 	addi	sp,sp,-32
    9e20:	dfc00715 	stw	ra,28(sp)
    9e24:	df000615 	stw	fp,24(sp)
    9e28:	df000604 	addi	fp,sp,24
    9e2c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9e30:	e0bffc17 	ldw	r2,-16(fp)
    9e34:	1004803a 	cmplt	r2,r2,zero
    9e38:	1000091e 	bne	r2,zero,9e60 <close+0x44>
    9e3c:	e13ffc17 	ldw	r4,-16(fp)
    9e40:	01400304 	movi	r5,12
    9e44:	000972c0 	call	972c <__mulsi3>
    9e48:	1007883a 	mov	r3,r2
    9e4c:	00800074 	movhi	r2,1
    9e50:	1082ef04 	addi	r2,r2,3004
    9e54:	1887883a 	add	r3,r3,r2
    9e58:	e0ffff15 	stw	r3,-4(fp)
    9e5c:	00000106 	br	9e64 <close+0x48>
    9e60:	e03fff15 	stw	zero,-4(fp)
    9e64:	e0bfff17 	ldw	r2,-4(fp)
    9e68:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    9e6c:	e0bffb17 	ldw	r2,-20(fp)
    9e70:	1005003a 	cmpeq	r2,r2,zero
    9e74:	10001d1e 	bne	r2,zero,9eec <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9e78:	e0bffb17 	ldw	r2,-20(fp)
    9e7c:	10800017 	ldw	r2,0(r2)
    9e80:	10800417 	ldw	r2,16(r2)
    9e84:	1005003a 	cmpeq	r2,r2,zero
    9e88:	1000071e 	bne	r2,zero,9ea8 <close+0x8c>
    9e8c:	e0bffb17 	ldw	r2,-20(fp)
    9e90:	10800017 	ldw	r2,0(r2)
    9e94:	10800417 	ldw	r2,16(r2)
    9e98:	e13ffb17 	ldw	r4,-20(fp)
    9e9c:	103ee83a 	callr	r2
    9ea0:	e0bffe15 	stw	r2,-8(fp)
    9ea4:	00000106 	br	9eac <close+0x90>
    9ea8:	e03ffe15 	stw	zero,-8(fp)
    9eac:	e0bffe17 	ldw	r2,-8(fp)
    9eb0:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9eb4:	e13ffc17 	ldw	r4,-16(fp)
    9eb8:	000a6740 	call	a674 <alt_release_fd>
    if (rval < 0)
    9ebc:	e0bffa17 	ldw	r2,-24(fp)
    9ec0:	1004403a 	cmpge	r2,r2,zero
    9ec4:	1000071e 	bne	r2,zero,9ee4 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    9ec8:	0009f1c0 	call	9f1c <alt_get_errno>
    9ecc:	e0fffa17 	ldw	r3,-24(fp)
    9ed0:	00c7c83a 	sub	r3,zero,r3
    9ed4:	10c00015 	stw	r3,0(r2)
      return -1;
    9ed8:	00bfffc4 	movi	r2,-1
    9edc:	e0bffd15 	stw	r2,-12(fp)
    9ee0:	00000806 	br	9f04 <close+0xe8>
    }
    return 0;
    9ee4:	e03ffd15 	stw	zero,-12(fp)
    9ee8:	00000606 	br	9f04 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9eec:	0009f1c0 	call	9f1c <alt_get_errno>
    9ef0:	1007883a 	mov	r3,r2
    9ef4:	00801444 	movi	r2,81
    9ef8:	18800015 	stw	r2,0(r3)
    return -1;
    9efc:	00bfffc4 	movi	r2,-1
    9f00:	e0bffd15 	stw	r2,-12(fp)
    9f04:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    9f08:	e037883a 	mov	sp,fp
    9f0c:	dfc00117 	ldw	ra,4(sp)
    9f10:	df000017 	ldw	fp,0(sp)
    9f14:	dec00204 	addi	sp,sp,8
    9f18:	f800283a 	ret

00009f1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9f1c:	defffd04 	addi	sp,sp,-12
    9f20:	dfc00215 	stw	ra,8(sp)
    9f24:	df000115 	stw	fp,4(sp)
    9f28:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9f2c:	00800074 	movhi	r2,1
    9f30:	10877204 	addi	r2,r2,7624
    9f34:	10800017 	ldw	r2,0(r2)
    9f38:	1005003a 	cmpeq	r2,r2,zero
    9f3c:	1000061e 	bne	r2,zero,9f58 <alt_get_errno+0x3c>
    9f40:	00800074 	movhi	r2,1
    9f44:	10877204 	addi	r2,r2,7624
    9f48:	10800017 	ldw	r2,0(r2)
    9f4c:	103ee83a 	callr	r2
    9f50:	e0bfff15 	stw	r2,-4(fp)
    9f54:	00000306 	br	9f64 <alt_get_errno+0x48>
    9f58:	00800074 	movhi	r2,1
    9f5c:	10878204 	addi	r2,r2,7688
    9f60:	e0bfff15 	stw	r2,-4(fp)
    9f64:	e0bfff17 	ldw	r2,-4(fp)
}
    9f68:	e037883a 	mov	sp,fp
    9f6c:	dfc00117 	ldw	ra,4(sp)
    9f70:	df000017 	ldw	fp,0(sp)
    9f74:	dec00204 	addi	sp,sp,8
    9f78:	f800283a 	ret

00009f7c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9f7c:	defffc04 	addi	sp,sp,-16
    9f80:	df000315 	stw	fp,12(sp)
    9f84:	df000304 	addi	fp,sp,12
    9f88:	e13ffd15 	stw	r4,-12(fp)
    9f8c:	e17ffe15 	stw	r5,-8(fp)
    9f90:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9f94:	e0bfff17 	ldw	r2,-4(fp)
}
    9f98:	e037883a 	mov	sp,fp
    9f9c:	df000017 	ldw	fp,0(sp)
    9fa0:	dec00104 	addi	sp,sp,4
    9fa4:	f800283a 	ret

00009fa8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    9fa8:	defff904 	addi	sp,sp,-28
    9fac:	dfc00615 	stw	ra,24(sp)
    9fb0:	df000515 	stw	fp,20(sp)
    9fb4:	df000504 	addi	fp,sp,20
    9fb8:	e13ffc15 	stw	r4,-16(fp)
    9fbc:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9fc0:	e0bffc17 	ldw	r2,-16(fp)
    9fc4:	1004803a 	cmplt	r2,r2,zero
    9fc8:	1000091e 	bne	r2,zero,9ff0 <fstat+0x48>
    9fcc:	e13ffc17 	ldw	r4,-16(fp)
    9fd0:	01400304 	movi	r5,12
    9fd4:	000972c0 	call	972c <__mulsi3>
    9fd8:	1007883a 	mov	r3,r2
    9fdc:	00800074 	movhi	r2,1
    9fe0:	1082ef04 	addi	r2,r2,3004
    9fe4:	1887883a 	add	r3,r3,r2
    9fe8:	e0ffff15 	stw	r3,-4(fp)
    9fec:	00000106 	br	9ff4 <fstat+0x4c>
    9ff0:	e03fff15 	stw	zero,-4(fp)
    9ff4:	e0bfff17 	ldw	r2,-4(fp)
    9ff8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    9ffc:	e0bffb17 	ldw	r2,-20(fp)
    a000:	1005003a 	cmpeq	r2,r2,zero
    a004:	1000121e 	bne	r2,zero,a050 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    a008:	e0bffb17 	ldw	r2,-20(fp)
    a00c:	10800017 	ldw	r2,0(r2)
    a010:	10800817 	ldw	r2,32(r2)
    a014:	1005003a 	cmpeq	r2,r2,zero
    a018:	1000081e 	bne	r2,zero,a03c <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
    a01c:	e0bffb17 	ldw	r2,-20(fp)
    a020:	10800017 	ldw	r2,0(r2)
    a024:	10800817 	ldw	r2,32(r2)
    a028:	e13ffb17 	ldw	r4,-20(fp)
    a02c:	e17ffd17 	ldw	r5,-12(fp)
    a030:	103ee83a 	callr	r2
    a034:	e0bffe15 	stw	r2,-8(fp)
    a038:	00000b06 	br	a068 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    a03c:	e0fffd17 	ldw	r3,-12(fp)
    a040:	00880004 	movi	r2,8192
    a044:	18800115 	stw	r2,4(r3)
      return 0;
    a048:	e03ffe15 	stw	zero,-8(fp)
    a04c:	00000606 	br	a068 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a050:	000a0800 	call	a080 <alt_get_errno>
    a054:	1007883a 	mov	r3,r2
    a058:	00801444 	movi	r2,81
    a05c:	18800015 	stw	r2,0(r3)
    return -1;
    a060:	00bfffc4 	movi	r2,-1
    a064:	e0bffe15 	stw	r2,-8(fp)
    a068:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    a06c:	e037883a 	mov	sp,fp
    a070:	dfc00117 	ldw	ra,4(sp)
    a074:	df000017 	ldw	fp,0(sp)
    a078:	dec00204 	addi	sp,sp,8
    a07c:	f800283a 	ret

0000a080 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a080:	defffd04 	addi	sp,sp,-12
    a084:	dfc00215 	stw	ra,8(sp)
    a088:	df000115 	stw	fp,4(sp)
    a08c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a090:	00800074 	movhi	r2,1
    a094:	10877204 	addi	r2,r2,7624
    a098:	10800017 	ldw	r2,0(r2)
    a09c:	1005003a 	cmpeq	r2,r2,zero
    a0a0:	1000061e 	bne	r2,zero,a0bc <alt_get_errno+0x3c>
    a0a4:	00800074 	movhi	r2,1
    a0a8:	10877204 	addi	r2,r2,7624
    a0ac:	10800017 	ldw	r2,0(r2)
    a0b0:	103ee83a 	callr	r2
    a0b4:	e0bfff15 	stw	r2,-4(fp)
    a0b8:	00000306 	br	a0c8 <alt_get_errno+0x48>
    a0bc:	00800074 	movhi	r2,1
    a0c0:	10878204 	addi	r2,r2,7688
    a0c4:	e0bfff15 	stw	r2,-4(fp)
    a0c8:	e0bfff17 	ldw	r2,-4(fp)
}
    a0cc:	e037883a 	mov	sp,fp
    a0d0:	dfc00117 	ldw	ra,4(sp)
    a0d4:	df000017 	ldw	fp,0(sp)
    a0d8:	dec00204 	addi	sp,sp,8
    a0dc:	f800283a 	ret

0000a0e0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    a0e0:	deffeb04 	addi	sp,sp,-84
    a0e4:	dfc01415 	stw	ra,80(sp)
    a0e8:	df001315 	stw	fp,76(sp)
    a0ec:	df001304 	addi	fp,sp,76
    a0f0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a0f4:	e0bffd17 	ldw	r2,-12(fp)
    a0f8:	1004803a 	cmplt	r2,r2,zero
    a0fc:	1000091e 	bne	r2,zero,a124 <isatty+0x44>
    a100:	e13ffd17 	ldw	r4,-12(fp)
    a104:	01400304 	movi	r5,12
    a108:	000972c0 	call	972c <__mulsi3>
    a10c:	1007883a 	mov	r3,r2
    a110:	00800074 	movhi	r2,1
    a114:	1082ef04 	addi	r2,r2,3004
    a118:	1887883a 	add	r3,r3,r2
    a11c:	e0ffff15 	stw	r3,-4(fp)
    a120:	00000106 	br	a128 <isatty+0x48>
    a124:	e03fff15 	stw	zero,-4(fp)
    a128:	e0bfff17 	ldw	r2,-4(fp)
    a12c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    a130:	e0bfed17 	ldw	r2,-76(fp)
    a134:	1005003a 	cmpeq	r2,r2,zero
    a138:	10000f1e 	bne	r2,zero,a178 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    a13c:	e0bfed17 	ldw	r2,-76(fp)
    a140:	10800017 	ldw	r2,0(r2)
    a144:	10800817 	ldw	r2,32(r2)
    a148:	1004c03a 	cmpne	r2,r2,zero
    a14c:	1000031e 	bne	r2,zero,a15c <isatty+0x7c>
    {
      return 1;
    a150:	00800044 	movi	r2,1
    a154:	e0bffe15 	stw	r2,-8(fp)
    a158:	00000c06 	br	a18c <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    a15c:	e17fee04 	addi	r5,fp,-72
    a160:	e13ffd17 	ldw	r4,-12(fp)
    a164:	0009fa80 	call	9fa8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    a168:	e0bfef17 	ldw	r2,-68(fp)
    a16c:	10880020 	cmpeqi	r2,r2,8192
    a170:	e0bffe15 	stw	r2,-8(fp)
    a174:	00000506 	br	a18c <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a178:	000a1a40 	call	a1a4 <alt_get_errno>
    a17c:	1007883a 	mov	r3,r2
    a180:	00801444 	movi	r2,81
    a184:	18800015 	stw	r2,0(r3)
    return 0;
    a188:	e03ffe15 	stw	zero,-8(fp)
    a18c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    a190:	e037883a 	mov	sp,fp
    a194:	dfc00117 	ldw	ra,4(sp)
    a198:	df000017 	ldw	fp,0(sp)
    a19c:	dec00204 	addi	sp,sp,8
    a1a0:	f800283a 	ret

0000a1a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a1a4:	defffd04 	addi	sp,sp,-12
    a1a8:	dfc00215 	stw	ra,8(sp)
    a1ac:	df000115 	stw	fp,4(sp)
    a1b0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a1b4:	00800074 	movhi	r2,1
    a1b8:	10877204 	addi	r2,r2,7624
    a1bc:	10800017 	ldw	r2,0(r2)
    a1c0:	1005003a 	cmpeq	r2,r2,zero
    a1c4:	1000061e 	bne	r2,zero,a1e0 <alt_get_errno+0x3c>
    a1c8:	00800074 	movhi	r2,1
    a1cc:	10877204 	addi	r2,r2,7624
    a1d0:	10800017 	ldw	r2,0(r2)
    a1d4:	103ee83a 	callr	r2
    a1d8:	e0bfff15 	stw	r2,-4(fp)
    a1dc:	00000306 	br	a1ec <alt_get_errno+0x48>
    a1e0:	00800074 	movhi	r2,1
    a1e4:	10878204 	addi	r2,r2,7688
    a1e8:	e0bfff15 	stw	r2,-4(fp)
    a1ec:	e0bfff17 	ldw	r2,-4(fp)
}
    a1f0:	e037883a 	mov	sp,fp
    a1f4:	dfc00117 	ldw	ra,4(sp)
    a1f8:	df000017 	ldw	fp,0(sp)
    a1fc:	dec00204 	addi	sp,sp,8
    a200:	f800283a 	ret

0000a204 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    a204:	defffe04 	addi	sp,sp,-8
    a208:	dfc00115 	stw	ra,4(sp)
    a20c:	df000015 	stw	fp,0(sp)
    a210:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    a214:	01000074 	movhi	r4,1
    a218:	21347804 	addi	r4,r4,-11808
    a21c:	01400074 	movhi	r5,1
    a220:	2940e004 	addi	r5,r5,896
    a224:	01800074 	movhi	r6,1
    a228:	31877704 	addi	r6,r6,7644
    a22c:	000a2840 	call	a284 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    a230:	01000034 	movhi	r4,0
    a234:	21000804 	addi	r4,r4,32
    a238:	01400034 	movhi	r5,0
    a23c:	29400804 	addi	r5,r5,32
    a240:	01800034 	movhi	r6,0
    a244:	31806d04 	addi	r6,r6,436
    a248:	000a2840 	call	a284 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    a24c:	01000074 	movhi	r4,1
    a250:	21339804 	addi	r4,r4,-12704
    a254:	01400074 	movhi	r5,1
    a258:	29400004 	addi	r5,r5,0
    a25c:	01800074 	movhi	r6,1
    a260:	3180e004 	addi	r6,r6,896
    a264:	000a2840 	call	a284 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    a268:	000bc540 	call	bc54 <alt_dcache_flush_all>
  alt_icache_flush_all();
    a26c:	000be4c0 	call	be4c <alt_icache_flush_all>
}
    a270:	e037883a 	mov	sp,fp
    a274:	dfc00117 	ldw	ra,4(sp)
    a278:	df000017 	ldw	fp,0(sp)
    a27c:	dec00204 	addi	sp,sp,8
    a280:	f800283a 	ret

0000a284 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    a284:	defffc04 	addi	sp,sp,-16
    a288:	df000315 	stw	fp,12(sp)
    a28c:	df000304 	addi	fp,sp,12
    a290:	e13ffd15 	stw	r4,-12(fp)
    a294:	e17ffe15 	stw	r5,-8(fp)
    a298:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    a29c:	e0fffe17 	ldw	r3,-8(fp)
    a2a0:	e0bffd17 	ldw	r2,-12(fp)
    a2a4:	18800e26 	beq	r3,r2,a2e0 <alt_load_section+0x5c>
  {
    while( to != end )
    a2a8:	00000a06 	br	a2d4 <alt_load_section+0x50>
    {
      *to++ = *from++;
    a2ac:	e0bffd17 	ldw	r2,-12(fp)
    a2b0:	10c00017 	ldw	r3,0(r2)
    a2b4:	e0bffe17 	ldw	r2,-8(fp)
    a2b8:	10c00015 	stw	r3,0(r2)
    a2bc:	e0bffe17 	ldw	r2,-8(fp)
    a2c0:	10800104 	addi	r2,r2,4
    a2c4:	e0bffe15 	stw	r2,-8(fp)
    a2c8:	e0bffd17 	ldw	r2,-12(fp)
    a2cc:	10800104 	addi	r2,r2,4
    a2d0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    a2d4:	e0fffe17 	ldw	r3,-8(fp)
    a2d8:	e0bfff17 	ldw	r2,-4(fp)
    a2dc:	18bff31e 	bne	r3,r2,a2ac <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    a2e0:	e037883a 	mov	sp,fp
    a2e4:	df000017 	ldw	fp,0(sp)
    a2e8:	dec00104 	addi	sp,sp,4
    a2ec:	f800283a 	ret

0000a2f0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    a2f0:	defff804 	addi	sp,sp,-32
    a2f4:	dfc00715 	stw	ra,28(sp)
    a2f8:	df000615 	stw	fp,24(sp)
    a2fc:	df000604 	addi	fp,sp,24
    a300:	e13ffc15 	stw	r4,-16(fp)
    a304:	e17ffd15 	stw	r5,-12(fp)
    a308:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    a30c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a310:	e0bffc17 	ldw	r2,-16(fp)
    a314:	1004803a 	cmplt	r2,r2,zero
    a318:	1000091e 	bne	r2,zero,a340 <lseek+0x50>
    a31c:	e13ffc17 	ldw	r4,-16(fp)
    a320:	01400304 	movi	r5,12
    a324:	000972c0 	call	972c <__mulsi3>
    a328:	1007883a 	mov	r3,r2
    a32c:	00800074 	movhi	r2,1
    a330:	1082ef04 	addi	r2,r2,3004
    a334:	1887883a 	add	r3,r3,r2
    a338:	e0ffff15 	stw	r3,-4(fp)
    a33c:	00000106 	br	a344 <lseek+0x54>
    a340:	e03fff15 	stw	zero,-4(fp)
    a344:	e0bfff17 	ldw	r2,-4(fp)
    a348:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    a34c:	e0bffb17 	ldw	r2,-20(fp)
    a350:	1005003a 	cmpeq	r2,r2,zero
    a354:	1000111e 	bne	r2,zero,a39c <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    a358:	e0bffb17 	ldw	r2,-20(fp)
    a35c:	10800017 	ldw	r2,0(r2)
    a360:	10800717 	ldw	r2,28(r2)
    a364:	1005003a 	cmpeq	r2,r2,zero
    a368:	1000091e 	bne	r2,zero,a390 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    a36c:	e0bffb17 	ldw	r2,-20(fp)
    a370:	10800017 	ldw	r2,0(r2)
    a374:	10800717 	ldw	r2,28(r2)
    a378:	e13ffb17 	ldw	r4,-20(fp)
    a37c:	e17ffd17 	ldw	r5,-12(fp)
    a380:	e1bffe17 	ldw	r6,-8(fp)
    a384:	103ee83a 	callr	r2
    a388:	e0bffa15 	stw	r2,-24(fp)
    a38c:	00000506 	br	a3a4 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    a390:	00bfde84 	movi	r2,-134
    a394:	e0bffa15 	stw	r2,-24(fp)
    a398:	00000206 	br	a3a4 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
    a39c:	00bfebc4 	movi	r2,-81
    a3a0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    a3a4:	e0bffa17 	ldw	r2,-24(fp)
    a3a8:	1004403a 	cmpge	r2,r2,zero
    a3ac:	1000071e 	bne	r2,zero,a3cc <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
    a3b0:	000a3e40 	call	a3e4 <alt_get_errno>
    a3b4:	1007883a 	mov	r3,r2
    a3b8:	e0bffa17 	ldw	r2,-24(fp)
    a3bc:	0085c83a 	sub	r2,zero,r2
    a3c0:	18800015 	stw	r2,0(r3)
    rc = -1;
    a3c4:	00bfffc4 	movi	r2,-1
    a3c8:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    a3cc:	e0bffa17 	ldw	r2,-24(fp)
}
    a3d0:	e037883a 	mov	sp,fp
    a3d4:	dfc00117 	ldw	ra,4(sp)
    a3d8:	df000017 	ldw	fp,0(sp)
    a3dc:	dec00204 	addi	sp,sp,8
    a3e0:	f800283a 	ret

0000a3e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a3e4:	defffd04 	addi	sp,sp,-12
    a3e8:	dfc00215 	stw	ra,8(sp)
    a3ec:	df000115 	stw	fp,4(sp)
    a3f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a3f4:	00800074 	movhi	r2,1
    a3f8:	10877204 	addi	r2,r2,7624
    a3fc:	10800017 	ldw	r2,0(r2)
    a400:	1005003a 	cmpeq	r2,r2,zero
    a404:	1000061e 	bne	r2,zero,a420 <alt_get_errno+0x3c>
    a408:	00800074 	movhi	r2,1
    a40c:	10877204 	addi	r2,r2,7624
    a410:	10800017 	ldw	r2,0(r2)
    a414:	103ee83a 	callr	r2
    a418:	e0bfff15 	stw	r2,-4(fp)
    a41c:	00000306 	br	a42c <alt_get_errno+0x48>
    a420:	00800074 	movhi	r2,1
    a424:	10878204 	addi	r2,r2,7688
    a428:	e0bfff15 	stw	r2,-4(fp)
    a42c:	e0bfff17 	ldw	r2,-4(fp)
}
    a430:	e037883a 	mov	sp,fp
    a434:	dfc00117 	ldw	ra,4(sp)
    a438:	df000017 	ldw	fp,0(sp)
    a43c:	dec00204 	addi	sp,sp,8
    a440:	f800283a 	ret

0000a444 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    a444:	defffd04 	addi	sp,sp,-12
    a448:	dfc00215 	stw	ra,8(sp)
    a44c:	df000115 	stw	fp,4(sp)
    a450:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    a454:	0009883a 	mov	r4,zero
    a458:	000a92c0 	call	a92c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    a45c:	000a9600 	call	a960 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    a460:	01000074 	movhi	r4,1
    a464:	2100d604 	addi	r4,r4,856
    a468:	01400074 	movhi	r5,1
    a46c:	2940d604 	addi	r5,r5,856
    a470:	01800074 	movhi	r6,1
    a474:	3180d604 	addi	r6,r6,856
    a478:	000c2200 	call	c220 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    a47c:	000bd840 	call	bd84 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    a480:	01000074 	movhi	r4,1
    a484:	212f7a04 	addi	r4,r4,-16920
    a488:	000ca540 	call	ca54 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    a48c:	d1201c17 	ldw	r4,-32656(gp)
    a490:	d1601d17 	ldw	r5,-32652(gp)
    a494:	d1a01e17 	ldw	r6,-32648(gp)
    a498:	00002bc0 	call	2bc <main>
    a49c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    a4a0:	01000044 	movi	r4,1
    a4a4:	0009e1c0 	call	9e1c <close>
  exit (result);
    a4a8:	e13fff17 	ldw	r4,-4(fp)
    a4ac:	000ca680 	call	ca68 <exit>

0000a4b0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    a4b0:	defffe04 	addi	sp,sp,-8
    a4b4:	df000115 	stw	fp,4(sp)
    a4b8:	df000104 	addi	fp,sp,4
    a4bc:	e13fff15 	stw	r4,-4(fp)
}
    a4c0:	e037883a 	mov	sp,fp
    a4c4:	df000017 	ldw	fp,0(sp)
    a4c8:	dec00104 	addi	sp,sp,4
    a4cc:	f800283a 	ret

0000a4d0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    a4d0:	defffe04 	addi	sp,sp,-8
    a4d4:	df000115 	stw	fp,4(sp)
    a4d8:	df000104 	addi	fp,sp,4
    a4dc:	e13fff15 	stw	r4,-4(fp)
}
    a4e0:	e037883a 	mov	sp,fp
    a4e4:	df000017 	ldw	fp,0(sp)
    a4e8:	dec00104 	addi	sp,sp,4
    a4ec:	f800283a 	ret

0000a4f0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    a4f0:	defff704 	addi	sp,sp,-36
    a4f4:	dfc00815 	stw	ra,32(sp)
    a4f8:	df000715 	stw	fp,28(sp)
    a4fc:	df000704 	addi	fp,sp,28
    a500:	e13ffb15 	stw	r4,-20(fp)
    a504:	e17ffc15 	stw	r5,-16(fp)
    a508:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a50c:	e0bffb17 	ldw	r2,-20(fp)
    a510:	1004803a 	cmplt	r2,r2,zero
    a514:	1000091e 	bne	r2,zero,a53c <read+0x4c>
    a518:	e13ffb17 	ldw	r4,-20(fp)
    a51c:	01400304 	movi	r5,12
    a520:	000972c0 	call	972c <__mulsi3>
    a524:	1007883a 	mov	r3,r2
    a528:	00800074 	movhi	r2,1
    a52c:	1082ef04 	addi	r2,r2,3004
    a530:	1887883a 	add	r3,r3,r2
    a534:	e0ffff15 	stw	r3,-4(fp)
    a538:	00000106 	br	a540 <read+0x50>
    a53c:	e03fff15 	stw	zero,-4(fp)
    a540:	e0bfff17 	ldw	r2,-4(fp)
    a544:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    a548:	e0bffa17 	ldw	r2,-24(fp)
    a54c:	1005003a 	cmpeq	r2,r2,zero
    a550:	1000241e 	bne	r2,zero,a5e4 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    a554:	e0bffa17 	ldw	r2,-24(fp)
    a558:	10800217 	ldw	r2,8(r2)
    a55c:	108000cc 	andi	r2,r2,3
    a560:	10800060 	cmpeqi	r2,r2,1
    a564:	10001a1e 	bne	r2,zero,a5d0 <read+0xe0>
    a568:	e0bffa17 	ldw	r2,-24(fp)
    a56c:	10800017 	ldw	r2,0(r2)
    a570:	10800517 	ldw	r2,20(r2)
    a574:	1005003a 	cmpeq	r2,r2,zero
    a578:	1000151e 	bne	r2,zero,a5d0 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    a57c:	e0bffa17 	ldw	r2,-24(fp)
    a580:	10800017 	ldw	r2,0(r2)
    a584:	10800517 	ldw	r2,20(r2)
    a588:	e17ffc17 	ldw	r5,-16(fp)
    a58c:	e1bffd17 	ldw	r6,-12(fp)
    a590:	e13ffa17 	ldw	r4,-24(fp)
    a594:	103ee83a 	callr	r2
    a598:	e0bff915 	stw	r2,-28(fp)
    a59c:	e0bff917 	ldw	r2,-28(fp)
    a5a0:	1004403a 	cmpge	r2,r2,zero
    a5a4:	1000071e 	bne	r2,zero,a5c4 <read+0xd4>
        {
          ALT_ERRNO = -rval;
    a5a8:	000a6140 	call	a614 <alt_get_errno>
    a5ac:	e0fff917 	ldw	r3,-28(fp)
    a5b0:	00c7c83a 	sub	r3,zero,r3
    a5b4:	10c00015 	stw	r3,0(r2)
          return -1;
    a5b8:	00bfffc4 	movi	r2,-1
    a5bc:	e0bffe15 	stw	r2,-8(fp)
    a5c0:	00000e06 	br	a5fc <read+0x10c>
        }
        return rval;
    a5c4:	e0bff917 	ldw	r2,-28(fp)
    a5c8:	e0bffe15 	stw	r2,-8(fp)
    a5cc:	00000b06 	br	a5fc <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
    a5d0:	000a6140 	call	a614 <alt_get_errno>
    a5d4:	1007883a 	mov	r3,r2
    a5d8:	00800344 	movi	r2,13
    a5dc:	18800015 	stw	r2,0(r3)
    a5e0:	00000406 	br	a5f4 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    a5e4:	000a6140 	call	a614 <alt_get_errno>
    a5e8:	1007883a 	mov	r3,r2
    a5ec:	00801444 	movi	r2,81
    a5f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    a5f4:	00bfffc4 	movi	r2,-1
    a5f8:	e0bffe15 	stw	r2,-8(fp)
    a5fc:	e0bffe17 	ldw	r2,-8(fp)
}
    a600:	e037883a 	mov	sp,fp
    a604:	dfc00117 	ldw	ra,4(sp)
    a608:	df000017 	ldw	fp,0(sp)
    a60c:	dec00204 	addi	sp,sp,8
    a610:	f800283a 	ret

0000a614 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a614:	defffd04 	addi	sp,sp,-12
    a618:	dfc00215 	stw	ra,8(sp)
    a61c:	df000115 	stw	fp,4(sp)
    a620:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a624:	00800074 	movhi	r2,1
    a628:	10877204 	addi	r2,r2,7624
    a62c:	10800017 	ldw	r2,0(r2)
    a630:	1005003a 	cmpeq	r2,r2,zero
    a634:	1000061e 	bne	r2,zero,a650 <alt_get_errno+0x3c>
    a638:	00800074 	movhi	r2,1
    a63c:	10877204 	addi	r2,r2,7624
    a640:	10800017 	ldw	r2,0(r2)
    a644:	103ee83a 	callr	r2
    a648:	e0bfff15 	stw	r2,-4(fp)
    a64c:	00000306 	br	a65c <alt_get_errno+0x48>
    a650:	00800074 	movhi	r2,1
    a654:	10878204 	addi	r2,r2,7688
    a658:	e0bfff15 	stw	r2,-4(fp)
    a65c:	e0bfff17 	ldw	r2,-4(fp)
}
    a660:	e037883a 	mov	sp,fp
    a664:	dfc00117 	ldw	ra,4(sp)
    a668:	df000017 	ldw	fp,0(sp)
    a66c:	dec00204 	addi	sp,sp,8
    a670:	f800283a 	ret

0000a674 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a674:	defffc04 	addi	sp,sp,-16
    a678:	dfc00315 	stw	ra,12(sp)
    a67c:	df000215 	stw	fp,8(sp)
    a680:	dc000115 	stw	r16,4(sp)
    a684:	df000104 	addi	fp,sp,4
    a688:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a68c:	e0bfff17 	ldw	r2,-4(fp)
    a690:	108000d0 	cmplti	r2,r2,3
    a694:	10000f1e 	bne	r2,zero,a6d4 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    a698:	e13fff17 	ldw	r4,-4(fp)
    a69c:	04000074 	movhi	r16,1
    a6a0:	8402ef04 	addi	r16,r16,3004
    a6a4:	01400304 	movi	r5,12
    a6a8:	000972c0 	call	972c <__mulsi3>
    a6ac:	1405883a 	add	r2,r2,r16
    a6b0:	10800204 	addi	r2,r2,8
    a6b4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a6b8:	e13fff17 	ldw	r4,-4(fp)
    a6bc:	04000074 	movhi	r16,1
    a6c0:	8402ef04 	addi	r16,r16,3004
    a6c4:	01400304 	movi	r5,12
    a6c8:	000972c0 	call	972c <__mulsi3>
    a6cc:	1405883a 	add	r2,r2,r16
    a6d0:	10000015 	stw	zero,0(r2)
  }
}
    a6d4:	e037883a 	mov	sp,fp
    a6d8:	dfc00217 	ldw	ra,8(sp)
    a6dc:	df000117 	ldw	fp,4(sp)
    a6e0:	dc000017 	ldw	r16,0(sp)
    a6e4:	dec00304 	addi	sp,sp,12
    a6e8:	f800283a 	ret

0000a6ec <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    a6ec:	defff804 	addi	sp,sp,-32
    a6f0:	df000715 	stw	fp,28(sp)
    a6f4:	df000704 	addi	fp,sp,28
    a6f8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a6fc:	0005303a 	rdctl	r2,status
    a700:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a704:	e0fffb17 	ldw	r3,-20(fp)
    a708:	00bfff84 	movi	r2,-2
    a70c:	1884703a 	and	r2,r3,r2
    a710:	1001703a 	wrctl	status,r2
  
  return context;
    a714:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    a718:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    a71c:	d0a00c17 	ldw	r2,-32720(gp)
    a720:	10c000c4 	addi	r3,r2,3
    a724:	00bfff04 	movi	r2,-4
    a728:	1884703a 	and	r2,r3,r2
    a72c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    a730:	d0e00c17 	ldw	r3,-32720(gp)
    a734:	e0bffe17 	ldw	r2,-8(fp)
    a738:	1887883a 	add	r3,r3,r2
    a73c:	008000b4 	movhi	r2,2
    a740:	10a00004 	addi	r2,r2,-32768
    a744:	10c0072e 	bgeu	r2,r3,a764 <sbrk+0x78>
    a748:	e0bffd17 	ldw	r2,-12(fp)
    a74c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a750:	e0bffa17 	ldw	r2,-24(fp)
    a754:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    a758:	00bfffc4 	movi	r2,-1
    a75c:	e0bfff15 	stw	r2,-4(fp)
    a760:	00000c06 	br	a794 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    a764:	d0a00c17 	ldw	r2,-32720(gp)
    a768:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    a76c:	d0e00c17 	ldw	r3,-32720(gp)
    a770:	e0bffe17 	ldw	r2,-8(fp)
    a774:	1885883a 	add	r2,r3,r2
    a778:	d0a00c15 	stw	r2,-32720(gp)
    a77c:	e0bffd17 	ldw	r2,-12(fp)
    a780:	e0bff915 	stw	r2,-28(fp)
    a784:	e0bff917 	ldw	r2,-28(fp)
    a788:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    a78c:	e0bffc17 	ldw	r2,-16(fp)
    a790:	e0bfff15 	stw	r2,-4(fp)
    a794:	e0bfff17 	ldw	r2,-4(fp)
} 
    a798:	e037883a 	mov	sp,fp
    a79c:	df000017 	ldw	fp,0(sp)
    a7a0:	dec00104 	addi	sp,sp,4
    a7a4:	f800283a 	ret

0000a7a8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    a7a8:	defff704 	addi	sp,sp,-36
    a7ac:	dfc00815 	stw	ra,32(sp)
    a7b0:	df000715 	stw	fp,28(sp)
    a7b4:	df000704 	addi	fp,sp,28
    a7b8:	e13ffb15 	stw	r4,-20(fp)
    a7bc:	e17ffc15 	stw	r5,-16(fp)
    a7c0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a7c4:	e0bffb17 	ldw	r2,-20(fp)
    a7c8:	1004803a 	cmplt	r2,r2,zero
    a7cc:	1000091e 	bne	r2,zero,a7f4 <write+0x4c>
    a7d0:	e13ffb17 	ldw	r4,-20(fp)
    a7d4:	01400304 	movi	r5,12
    a7d8:	000972c0 	call	972c <__mulsi3>
    a7dc:	1007883a 	mov	r3,r2
    a7e0:	00800074 	movhi	r2,1
    a7e4:	1082ef04 	addi	r2,r2,3004
    a7e8:	1887883a 	add	r3,r3,r2
    a7ec:	e0ffff15 	stw	r3,-4(fp)
    a7f0:	00000106 	br	a7f8 <write+0x50>
    a7f4:	e03fff15 	stw	zero,-4(fp)
    a7f8:	e0bfff17 	ldw	r2,-4(fp)
    a7fc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    a800:	e0bffa17 	ldw	r2,-24(fp)
    a804:	1005003a 	cmpeq	r2,r2,zero
    a808:	1000241e 	bne	r2,zero,a89c <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    a80c:	e0bffa17 	ldw	r2,-24(fp)
    a810:	10800217 	ldw	r2,8(r2)
    a814:	108000cc 	andi	r2,r2,3
    a818:	1005003a 	cmpeq	r2,r2,zero
    a81c:	10001a1e 	bne	r2,zero,a888 <write+0xe0>
    a820:	e0bffa17 	ldw	r2,-24(fp)
    a824:	10800017 	ldw	r2,0(r2)
    a828:	10800617 	ldw	r2,24(r2)
    a82c:	1005003a 	cmpeq	r2,r2,zero
    a830:	1000151e 	bne	r2,zero,a888 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    a834:	e0bffa17 	ldw	r2,-24(fp)
    a838:	10800017 	ldw	r2,0(r2)
    a83c:	10800617 	ldw	r2,24(r2)
    a840:	e17ffc17 	ldw	r5,-16(fp)
    a844:	e1bffd17 	ldw	r6,-12(fp)
    a848:	e13ffa17 	ldw	r4,-24(fp)
    a84c:	103ee83a 	callr	r2
    a850:	e0bff915 	stw	r2,-28(fp)
    a854:	e0bff917 	ldw	r2,-28(fp)
    a858:	1004403a 	cmpge	r2,r2,zero
    a85c:	1000071e 	bne	r2,zero,a87c <write+0xd4>
      {
        ALT_ERRNO = -rval;
    a860:	000a8cc0 	call	a8cc <alt_get_errno>
    a864:	e0fff917 	ldw	r3,-28(fp)
    a868:	00c7c83a 	sub	r3,zero,r3
    a86c:	10c00015 	stw	r3,0(r2)
        return -1;
    a870:	00bfffc4 	movi	r2,-1
    a874:	e0bffe15 	stw	r2,-8(fp)
    a878:	00000e06 	br	a8b4 <write+0x10c>
      }
      return rval;
    a87c:	e0bff917 	ldw	r2,-28(fp)
    a880:	e0bffe15 	stw	r2,-8(fp)
    a884:	00000b06 	br	a8b4 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    a888:	000a8cc0 	call	a8cc <alt_get_errno>
    a88c:	1007883a 	mov	r3,r2
    a890:	00800344 	movi	r2,13
    a894:	18800015 	stw	r2,0(r3)
    a898:	00000406 	br	a8ac <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    a89c:	000a8cc0 	call	a8cc <alt_get_errno>
    a8a0:	1007883a 	mov	r3,r2
    a8a4:	00801444 	movi	r2,81
    a8a8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    a8ac:	00bfffc4 	movi	r2,-1
    a8b0:	e0bffe15 	stw	r2,-8(fp)
    a8b4:	e0bffe17 	ldw	r2,-8(fp)
}
    a8b8:	e037883a 	mov	sp,fp
    a8bc:	dfc00117 	ldw	ra,4(sp)
    a8c0:	df000017 	ldw	fp,0(sp)
    a8c4:	dec00204 	addi	sp,sp,8
    a8c8:	f800283a 	ret

0000a8cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a8cc:	defffd04 	addi	sp,sp,-12
    a8d0:	dfc00215 	stw	ra,8(sp)
    a8d4:	df000115 	stw	fp,4(sp)
    a8d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a8dc:	00800074 	movhi	r2,1
    a8e0:	10877204 	addi	r2,r2,7624
    a8e4:	10800017 	ldw	r2,0(r2)
    a8e8:	1005003a 	cmpeq	r2,r2,zero
    a8ec:	1000061e 	bne	r2,zero,a908 <alt_get_errno+0x3c>
    a8f0:	00800074 	movhi	r2,1
    a8f4:	10877204 	addi	r2,r2,7624
    a8f8:	10800017 	ldw	r2,0(r2)
    a8fc:	103ee83a 	callr	r2
    a900:	e0bfff15 	stw	r2,-4(fp)
    a904:	00000306 	br	a914 <alt_get_errno+0x48>
    a908:	00800074 	movhi	r2,1
    a90c:	10878204 	addi	r2,r2,7688
    a910:	e0bfff15 	stw	r2,-4(fp)
    a914:	e0bfff17 	ldw	r2,-4(fp)
}
    a918:	e037883a 	mov	sp,fp
    a91c:	dfc00117 	ldw	ra,4(sp)
    a920:	df000017 	ldw	fp,0(sp)
    a924:	dec00204 	addi	sp,sp,8
    a928:	f800283a 	ret

0000a92c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    a92c:	defffd04 	addi	sp,sp,-12
    a930:	dfc00215 	stw	ra,8(sp)
    a934:	df000115 	stw	fp,4(sp)
    a938:	df000104 	addi	fp,sp,4
    a93c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
    a940:	000c7200 	call	c720 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    a944:	00800044 	movi	r2,1
    a948:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    a94c:	e037883a 	mov	sp,fp
    a950:	dfc00117 	ldw	ra,4(sp)
    a954:	df000017 	ldw	fp,0(sp)
    a958:	dec00204 	addi	sp,sp,8
    a95c:	f800283a 	ret

0000a960 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    a960:	defffe04 	addi	sp,sp,-8
    a964:	dfc00115 	stw	ra,4(sp)
    a968:	df000015 	stw	fp,0(sp)
    a96c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    a970:	010000b4 	movhi	r4,2
    a974:	21241004 	addi	r4,r4,-28608
    a978:	000b883a 	mov	r5,zero
    a97c:	01800044 	movi	r6,1
    a980:	01c0fa04 	movi	r7,1000
    a984:	000ba700 	call	ba70 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_0, fifo_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    a988:	01000074 	movhi	r4,1
    a98c:	21035904 	addi	r4,r4,3428
    a990:	000b883a 	mov	r5,zero
    a994:	01800404 	movi	r6,16
    a998:	000b09c0 	call	b09c <altera_avalon_jtag_uart_init>
    a99c:	01000074 	movhi	r4,1
    a9a0:	21034f04 	addi	r4,r4,3388
    a9a4:	000a9bc0 	call	a9bc <alt_dev_reg>
}
    a9a8:	e037883a 	mov	sp,fp
    a9ac:	dfc00117 	ldw	ra,4(sp)
    a9b0:	df000017 	ldw	fp,0(sp)
    a9b4:	dec00204 	addi	sp,sp,8
    a9b8:	f800283a 	ret

0000a9bc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    a9bc:	defffd04 	addi	sp,sp,-12
    a9c0:	dfc00215 	stw	ra,8(sp)
    a9c4:	df000115 	stw	fp,4(sp)
    a9c8:	df000104 	addi	fp,sp,4
    a9cc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    a9d0:	e13fff17 	ldw	r4,-4(fp)
    a9d4:	01400074 	movhi	r5,1
    a9d8:	29476f04 	addi	r5,r5,7612
    a9dc:	000bc700 	call	bc70 <alt_dev_llist_insert>
}
    a9e0:	e037883a 	mov	sp,fp
    a9e4:	dfc00117 	ldw	ra,4(sp)
    a9e8:	df000017 	ldw	fp,0(sp)
    a9ec:	dec00204 	addi	sp,sp,8
    a9f0:	f800283a 	ret

0000a9f4 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
    a9f4:	defff904 	addi	sp,sp,-28
    a9f8:	dfc00615 	stw	ra,24(sp)
    a9fc:	df000515 	stw	fp,20(sp)
    aa00:	df000504 	addi	fp,sp,20
    aa04:	e13ffb15 	stw	r4,-20(fp)
    aa08:	e17ffc15 	stw	r5,-16(fp)
    aa0c:	e1bffd15 	stw	r6,-12(fp)
    aa10:	e1fffe15 	stw	r7,-8(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
    aa14:	e13ffb17 	ldw	r4,-20(fp)
    aa18:	01400fc4 	movi	r5,63
    aa1c:	000abe40 	call	abe4 <altera_avalon_fifo_clear_event>
    aa20:	1005003a 	cmpeq	r2,r2,zero
    aa24:	1000031e 	bne	r2,zero,aa34 <altera_avalon_fifo_init+0x40>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    aa28:	00bfffc4 	movi	r2,-1
    aa2c:	e0bfff15 	stw	r2,-4(fp)
    aa30:	00001906 	br	aa98 <altera_avalon_fifo_init+0xa4>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
    aa34:	e13ffb17 	ldw	r4,-20(fp)
    aa38:	e17ffc17 	ldw	r5,-16(fp)
    aa3c:	000ac4c0 	call	ac4c <altera_avalon_fifo_write_ienable>
    aa40:	1005003a 	cmpeq	r2,r2,zero
    aa44:	1000031e 	bne	r2,zero,aa54 <altera_avalon_fifo_init+0x60>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    aa48:	00bfff84 	movi	r2,-2
    aa4c:	e0bfff15 	stw	r2,-4(fp)
    aa50:	00001106 	br	aa98 <altera_avalon_fifo_init+0xa4>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
    aa54:	e13ffb17 	ldw	r4,-20(fp)
    aa58:	e17ffe17 	ldw	r5,-8(fp)
    aa5c:	000acac0 	call	acac <altera_avalon_fifo_write_almostfull>
    aa60:	1005003a 	cmpeq	r2,r2,zero
    aa64:	1000031e 	bne	r2,zero,aa74 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    aa68:	00bfff44 	movi	r2,-3
    aa6c:	e0bfff15 	stw	r2,-4(fp)
    aa70:	00000906 	br	aa98 <altera_avalon_fifo_init+0xa4>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
    aa74:	e13ffb17 	ldw	r4,-20(fp)
    aa78:	e17ffd17 	ldw	r5,-12(fp)
    aa7c:	000ad0c0 	call	ad0c <altera_avalon_fifo_write_almostempty>
    aa80:	1005003a 	cmpeq	r2,r2,zero
    aa84:	1000031e 	bne	r2,zero,aa94 <altera_avalon_fifo_init+0xa0>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    aa88:	00bfff44 	movi	r2,-3
    aa8c:	e0bfff15 	stw	r2,-4(fp)
    aa90:	00000106 	br	aa98 <altera_avalon_fifo_init+0xa4>
    }

    return ALTERA_AVALON_FIFO_OK;
    aa94:	e03fff15 	stw	zero,-4(fp)
    aa98:	e0bfff17 	ldw	r2,-4(fp)
}
    aa9c:	e037883a 	mov	sp,fp
    aaa0:	dfc00117 	ldw	ra,4(sp)
    aaa4:	df000017 	ldw	fp,0(sp)
    aaa8:	dec00204 	addi	sp,sp,8
    aaac:	f800283a 	ret

0000aab0 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    aab0:	defffd04 	addi	sp,sp,-12
    aab4:	df000215 	stw	fp,8(sp)
    aab8:	df000204 	addi	fp,sp,8
    aabc:	e13ffe15 	stw	r4,-8(fp)
    aac0:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
    aac4:	e0bffe17 	ldw	r2,-8(fp)
    aac8:	10800104 	addi	r2,r2,4
    aacc:	10800037 	ldwio	r2,0(r2)
    aad0:	1007883a 	mov	r3,r2
    aad4:	e0bfff17 	ldw	r2,-4(fp)
    aad8:	1884703a 	and	r2,r3,r2
}
    aadc:	e037883a 	mov	sp,fp
    aae0:	df000017 	ldw	fp,0(sp)
    aae4:	dec00104 	addi	sp,sp,4
    aae8:	f800283a 	ret

0000aaec <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
    aaec:	defffd04 	addi	sp,sp,-12
    aaf0:	df000215 	stw	fp,8(sp)
    aaf4:	df000204 	addi	fp,sp,8
    aaf8:	e13ffe15 	stw	r4,-8(fp)
    aafc:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
    ab00:	e0bffe17 	ldw	r2,-8(fp)
    ab04:	10800304 	addi	r2,r2,12
    ab08:	10800037 	ldwio	r2,0(r2)
    ab0c:	1007883a 	mov	r3,r2
    ab10:	e0bfff17 	ldw	r2,-4(fp)
    ab14:	1884703a 	and	r2,r3,r2
}
    ab18:	e037883a 	mov	sp,fp
    ab1c:	df000017 	ldw	fp,0(sp)
    ab20:	dec00104 	addi	sp,sp,4
    ab24:	f800283a 	ret

0000ab28 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
    ab28:	defffe04 	addi	sp,sp,-8
    ab2c:	df000115 	stw	fp,4(sp)
    ab30:	df000104 	addi	fp,sp,4
    ab34:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
    ab38:	e0bfff17 	ldw	r2,-4(fp)
    ab3c:	10800404 	addi	r2,r2,16
    ab40:	10800037 	ldwio	r2,0(r2)
}
    ab44:	e037883a 	mov	sp,fp
    ab48:	df000017 	ldw	fp,0(sp)
    ab4c:	dec00104 	addi	sp,sp,4
    ab50:	f800283a 	ret

0000ab54 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
    ab54:	defffe04 	addi	sp,sp,-8
    ab58:	df000115 	stw	fp,4(sp)
    ab5c:	df000104 	addi	fp,sp,4
    ab60:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
    ab64:	e0bfff17 	ldw	r2,-4(fp)
    ab68:	10800504 	addi	r2,r2,20
    ab6c:	10800037 	ldwio	r2,0(r2)
}
    ab70:	e037883a 	mov	sp,fp
    ab74:	df000017 	ldw	fp,0(sp)
    ab78:	dec00104 	addi	sp,sp,4
    ab7c:	f800283a 	ret

0000ab80 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
    ab80:	defffd04 	addi	sp,sp,-12
    ab84:	df000215 	stw	fp,8(sp)
    ab88:	df000204 	addi	fp,sp,8
    ab8c:	e13ffe15 	stw	r4,-8(fp)
    ab90:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
    ab94:	e0bffe17 	ldw	r2,-8(fp)
    ab98:	10800204 	addi	r2,r2,8
    ab9c:	10800037 	ldwio	r2,0(r2)
    aba0:	1007883a 	mov	r3,r2
    aba4:	e0bfff17 	ldw	r2,-4(fp)
    aba8:	1884703a 	and	r2,r3,r2
}
    abac:	e037883a 	mov	sp,fp
    abb0:	df000017 	ldw	fp,0(sp)
    abb4:	dec00104 	addi	sp,sp,4
    abb8:	f800283a 	ret

0000abbc <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
    abbc:	defffe04 	addi	sp,sp,-8
    abc0:	df000115 	stw	fp,4(sp)
    abc4:	df000104 	addi	fp,sp,4
    abc8:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
    abcc:	e0bfff17 	ldw	r2,-4(fp)
    abd0:	10800037 	ldwio	r2,0(r2)
}
    abd4:	e037883a 	mov	sp,fp
    abd8:	df000017 	ldw	fp,0(sp)
    abdc:	dec00104 	addi	sp,sp,4
    abe0:	f800283a 	ret

0000abe4 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
    abe4:	defffc04 	addi	sp,sp,-16
    abe8:	df000315 	stw	fp,12(sp)
    abec:	df000304 	addi	fp,sp,12
    abf0:	e13ffd15 	stw	r4,-12(fp)
    abf4:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
    abf8:	e0bffd17 	ldw	r2,-12(fp)
    abfc:	10800204 	addi	r2,r2,8
    ac00:	e0fffe17 	ldw	r3,-8(fp)
    ac04:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
    ac08:	e0bffd17 	ldw	r2,-12(fp)
    ac0c:	10800204 	addi	r2,r2,8
    ac10:	10800037 	ldwio	r2,0(r2)
    ac14:	1007883a 	mov	r3,r2
    ac18:	e0bffe17 	ldw	r2,-8(fp)
    ac1c:	1884703a 	and	r2,r3,r2
    ac20:	1004c03a 	cmpne	r2,r2,zero
    ac24:	1000021e 	bne	r2,zero,ac30 <altera_avalon_fifo_clear_event+0x4c>
        return ALTERA_AVALON_FIFO_OK;
    ac28:	e03fff15 	stw	zero,-4(fp)
    ac2c:	00000206 	br	ac38 <altera_avalon_fifo_clear_event+0x54>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    ac30:	00bfffc4 	movi	r2,-1
    ac34:	e0bfff15 	stw	r2,-4(fp)
    ac38:	e0bfff17 	ldw	r2,-4(fp)
}
    ac3c:	e037883a 	mov	sp,fp
    ac40:	df000017 	ldw	fp,0(sp)
    ac44:	dec00104 	addi	sp,sp,4
    ac48:	f800283a 	ret

0000ac4c <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    ac4c:	defffc04 	addi	sp,sp,-16
    ac50:	df000315 	stw	fp,12(sp)
    ac54:	df000304 	addi	fp,sp,12
    ac58:	e13ffd15 	stw	r4,-12(fp)
    ac5c:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
    ac60:	e0bffd17 	ldw	r2,-12(fp)
    ac64:	10800304 	addi	r2,r2,12
    ac68:	e0fffe17 	ldw	r3,-8(fp)
    ac6c:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
    ac70:	e0bffd17 	ldw	r2,-12(fp)
    ac74:	10800304 	addi	r2,r2,12
    ac78:	10800037 	ldwio	r2,0(r2)
    ac7c:	1007883a 	mov	r3,r2
    ac80:	e0bffe17 	ldw	r2,-8(fp)
    ac84:	1880021e 	bne	r3,r2,ac90 <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
    ac88:	e03fff15 	stw	zero,-4(fp)
    ac8c:	00000206 	br	ac98 <altera_avalon_fifo_write_ienable+0x4c>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    ac90:	00bfff84 	movi	r2,-2
    ac94:	e0bfff15 	stw	r2,-4(fp)
    ac98:	e0bfff17 	ldw	r2,-4(fp)
}
    ac9c:	e037883a 	mov	sp,fp
    aca0:	df000017 	ldw	fp,0(sp)
    aca4:	dec00104 	addi	sp,sp,4
    aca8:	f800283a 	ret

0000acac <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    acac:	defffc04 	addi	sp,sp,-16
    acb0:	df000315 	stw	fp,12(sp)
    acb4:	df000304 	addi	fp,sp,12
    acb8:	e13ffd15 	stw	r4,-12(fp)
    acbc:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
    acc0:	e0bffd17 	ldw	r2,-12(fp)
    acc4:	10800404 	addi	r2,r2,16
    acc8:	e0fffe17 	ldw	r3,-8(fp)
    accc:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
    acd0:	e0bffd17 	ldw	r2,-12(fp)
    acd4:	10800404 	addi	r2,r2,16
    acd8:	10800037 	ldwio	r2,0(r2)
    acdc:	1007883a 	mov	r3,r2
    ace0:	e0bffe17 	ldw	r2,-8(fp)
    ace4:	1880021e 	bne	r3,r2,acf0 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
    ace8:	e03fff15 	stw	zero,-4(fp)
    acec:	00000206 	br	acf8 <altera_avalon_fifo_write_almostfull+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    acf0:	00bfff44 	movi	r2,-3
    acf4:	e0bfff15 	stw	r2,-4(fp)
    acf8:	e0bfff17 	ldw	r2,-4(fp)
}
    acfc:	e037883a 	mov	sp,fp
    ad00:	df000017 	ldw	fp,0(sp)
    ad04:	dec00104 	addi	sp,sp,4
    ad08:	f800283a 	ret

0000ad0c <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    ad0c:	defffc04 	addi	sp,sp,-16
    ad10:	df000315 	stw	fp,12(sp)
    ad14:	df000304 	addi	fp,sp,12
    ad18:	e13ffd15 	stw	r4,-12(fp)
    ad1c:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
    ad20:	e0bffd17 	ldw	r2,-12(fp)
    ad24:	10800504 	addi	r2,r2,20
    ad28:	e0fffe17 	ldw	r3,-8(fp)
    ad2c:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
    ad30:	e0bffd17 	ldw	r2,-12(fp)
    ad34:	10800504 	addi	r2,r2,20
    ad38:	10800037 	ldwio	r2,0(r2)
    ad3c:	1007883a 	mov	r3,r2
    ad40:	e0bffe17 	ldw	r2,-8(fp)
    ad44:	1880021e 	bne	r3,r2,ad50 <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
    ad48:	e03fff15 	stw	zero,-4(fp)
    ad4c:	00000206 	br	ad58 <altera_avalon_fifo_write_almostempty+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    ad50:	00bfff44 	movi	r2,-3
    ad54:	e0bfff15 	stw	r2,-4(fp)
    ad58:	e0bfff17 	ldw	r2,-4(fp)
}
    ad5c:	e037883a 	mov	sp,fp
    ad60:	df000017 	ldw	fp,0(sp)
    ad64:	dec00104 	addi	sp,sp,4
    ad68:	f800283a 	ret

0000ad6c <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
    ad6c:	defffa04 	addi	sp,sp,-24
    ad70:	dfc00515 	stw	ra,20(sp)
    ad74:	df000415 	stw	fp,16(sp)
    ad78:	df000404 	addi	fp,sp,16
    ad7c:	e13ffc15 	stw	r4,-16(fp)
    ad80:	e17ffd15 	stw	r5,-12(fp)
    ad84:	e1bffe15 	stw	r6,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
    ad88:	e13ffd17 	ldw	r4,-12(fp)
    ad8c:	01400044 	movi	r5,1
    ad90:	000aab00 	call	aab0 <altera_avalon_fifo_read_status>
    ad94:	1004c03a 	cmpne	r2,r2,zero
    ad98:	1000051e 	bne	r2,zero,adb0 <altera_avalon_fifo_write_fifo+0x44>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
    ad9c:	e0bffc17 	ldw	r2,-16(fp)
    ada0:	e0fffe17 	ldw	r3,-8(fp)
    ada4:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
    ada8:	e03fff15 	stw	zero,-4(fp)
    adac:	00000206 	br	adb8 <altera_avalon_fifo_write_fifo+0x4c>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
    adb0:	00bfff04 	movi	r2,-4
    adb4:	e0bfff15 	stw	r2,-4(fp)
    adb8:	e0bfff17 	ldw	r2,-4(fp)
    }
}
    adbc:	e037883a 	mov	sp,fp
    adc0:	dfc00117 	ldw	ra,4(sp)
    adc4:	df000017 	ldw	fp,0(sp)
    adc8:	dec00204 	addi	sp,sp,8
    adcc:	f800283a 	ret

0000add0 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    add0:	defffa04 	addi	sp,sp,-24
    add4:	dfc00515 	stw	ra,20(sp)
    add8:	df000415 	stw	fp,16(sp)
    addc:	df000404 	addi	fp,sp,16
    ade0:	e13ffd15 	stw	r4,-12(fp)
    ade4:	e17ffe15 	stw	r5,-8(fp)
    ade8:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
    adec:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
    adf0:	e0bfff17 	ldw	r2,-4(fp)
    adf4:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    adf8:	e13ffe17 	ldw	r4,-8(fp)
    adfc:	01400084 	movi	r5,2
    ae00:	000aab00 	call	aab0 <altera_avalon_fifo_read_status>
    ae04:	1004c03a 	cmpne	r2,r2,zero
    ae08:	1000071e 	bne	r2,zero,ae28 <altera_avalon_read_fifo+0x58>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
    ae0c:	e13ffe17 	ldw	r4,-8(fp)
    ae10:	000abbc0 	call	abbc <altera_avalon_fifo_read_level>
    ae14:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    ae18:	e0bffd17 	ldw	r2,-12(fp)
    ae1c:	10c00037 	ldwio	r3,0(r2)
    ae20:	e0bfff17 	ldw	r2,-4(fp)
    ae24:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
    ae28:	e0bffc17 	ldw	r2,-16(fp)
}
    ae2c:	e037883a 	mov	sp,fp
    ae30:	dfc00117 	ldw	ra,4(sp)
    ae34:	df000017 	ldw	fp,0(sp)
    ae38:	dec00204 	addi	sp,sp,8
    ae3c:	f800283a 	ret

0000ae40 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
    ae40:	defffb04 	addi	sp,sp,-20
    ae44:	dfc00415 	stw	ra,16(sp)
    ae48:	df000315 	stw	fp,12(sp)
    ae4c:	df000304 	addi	fp,sp,12
    ae50:	e13ffd15 	stw	r4,-12(fp)
    ae54:	e17ffe15 	stw	r5,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    ae58:	e13ffe17 	ldw	r4,-8(fp)
    ae5c:	01400084 	movi	r5,2
    ae60:	000aab00 	call	aab0 <altera_avalon_fifo_read_status>
    ae64:	1004c03a 	cmpne	r2,r2,zero
    ae68:	1000041e 	bne	r2,zero,ae7c <altera_avalon_fifo_read_fifo+0x3c>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    ae6c:	e0bffd17 	ldw	r2,-12(fp)
    ae70:	10800037 	ldwio	r2,0(r2)
    ae74:	e0bfff15 	stw	r2,-4(fp)
    ae78:	00000106 	br	ae80 <altera_avalon_fifo_read_fifo+0x40>
    }
    return 0;
    ae7c:	e03fff15 	stw	zero,-4(fp)
    ae80:	e0bfff17 	ldw	r2,-4(fp)
}
    ae84:	e037883a 	mov	sp,fp
    ae88:	dfc00117 	ldw	ra,4(sp)
    ae8c:	df000017 	ldw	fp,0(sp)
    ae90:	dec00204 	addi	sp,sp,8
    ae94:	f800283a 	ret

0000ae98 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
    ae98:	defffa04 	addi	sp,sp,-24
    ae9c:	dfc00515 	stw	ra,20(sp)
    aea0:	df000415 	stw	fp,16(sp)
    aea4:	df000404 	addi	fp,sp,16
    aea8:	e13ffc15 	stw	r4,-16(fp)
    aeac:	e17ffd15 	stw	r5,-12(fp)
    aeb0:	e1bffe15 	stw	r6,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
    aeb4:	e13ffd17 	ldw	r4,-12(fp)
    aeb8:	01400044 	movi	r5,1
    aebc:	000aab00 	call	aab0 <altera_avalon_fifo_read_status>
    aec0:	1004c03a 	cmpne	r2,r2,zero
    aec4:	1000061e 	bne	r2,zero,aee0 <altera_avalon_fifo_write_other_info+0x48>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
    aec8:	e0bffc17 	ldw	r2,-16(fp)
    aecc:	10800104 	addi	r2,r2,4
    aed0:	e0fffe17 	ldw	r3,-8(fp)
    aed4:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
    aed8:	e03fff15 	stw	zero,-4(fp)
    aedc:	00000206 	br	aee8 <altera_avalon_fifo_write_other_info+0x50>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
    aee0:	00bfff04 	movi	r2,-4
    aee4:	e0bfff15 	stw	r2,-4(fp)
    aee8:	e0bfff17 	ldw	r2,-4(fp)
    }
}
    aeec:	e037883a 	mov	sp,fp
    aef0:	dfc00117 	ldw	ra,4(sp)
    aef4:	df000017 	ldw	fp,0(sp)
    aef8:	dec00204 	addi	sp,sp,8
    aefc:	f800283a 	ret

0000af00 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
    af00:	defffe04 	addi	sp,sp,-8
    af04:	df000115 	stw	fp,4(sp)
    af08:	df000104 	addi	fp,sp,4
    af0c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
    af10:	e0bfff17 	ldw	r2,-4(fp)
    af14:	10800104 	addi	r2,r2,4
    af18:	10800037 	ldwio	r2,0(r2)
}
    af1c:	e037883a 	mov	sp,fp
    af20:	df000017 	ldw	fp,0(sp)
    af24:	dec00104 	addi	sp,sp,4
    af28:	f800283a 	ret

0000af2c <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
    af2c:	defffe04 	addi	sp,sp,-8
    af30:	df000115 	stw	fp,4(sp)
    af34:	df000104 	addi	fp,sp,4
    af38:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
    af3c:	e0bfff17 	ldw	r2,-4(fp)
    af40:	10800037 	ldwio	r2,0(r2)
}
    af44:	e037883a 	mov	sp,fp
    af48:	df000017 	ldw	fp,0(sp)
    af4c:	dec00104 	addi	sp,sp,4
    af50:	f800283a 	ret

0000af54 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    af54:	defffa04 	addi	sp,sp,-24
    af58:	dfc00515 	stw	ra,20(sp)
    af5c:	df000415 	stw	fp,16(sp)
    af60:	df000404 	addi	fp,sp,16
    af64:	e13ffd15 	stw	r4,-12(fp)
    af68:	e17ffe15 	stw	r5,-8(fp)
    af6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    af70:	e0bffd17 	ldw	r2,-12(fp)
    af74:	10800017 	ldw	r2,0(r2)
    af78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    af7c:	e0bffc17 	ldw	r2,-16(fp)
    af80:	11000a04 	addi	r4,r2,40
    af84:	e0bffd17 	ldw	r2,-12(fp)
    af88:	11c00217 	ldw	r7,8(r2)
    af8c:	e17ffe17 	ldw	r5,-8(fp)
    af90:	e1bfff17 	ldw	r6,-4(fp)
    af94:	000b59c0 	call	b59c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    af98:	e037883a 	mov	sp,fp
    af9c:	dfc00117 	ldw	ra,4(sp)
    afa0:	df000017 	ldw	fp,0(sp)
    afa4:	dec00204 	addi	sp,sp,8
    afa8:	f800283a 	ret

0000afac <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    afac:	defffa04 	addi	sp,sp,-24
    afb0:	dfc00515 	stw	ra,20(sp)
    afb4:	df000415 	stw	fp,16(sp)
    afb8:	df000404 	addi	fp,sp,16
    afbc:	e13ffd15 	stw	r4,-12(fp)
    afc0:	e17ffe15 	stw	r5,-8(fp)
    afc4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    afc8:	e0bffd17 	ldw	r2,-12(fp)
    afcc:	10800017 	ldw	r2,0(r2)
    afd0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    afd4:	e0bffc17 	ldw	r2,-16(fp)
    afd8:	11000a04 	addi	r4,r2,40
    afdc:	e0bffd17 	ldw	r2,-12(fp)
    afe0:	11c00217 	ldw	r7,8(r2)
    afe4:	e17ffe17 	ldw	r5,-8(fp)
    afe8:	e1bfff17 	ldw	r6,-4(fp)
    afec:	000b7c00 	call	b7c0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    aff0:	e037883a 	mov	sp,fp
    aff4:	dfc00117 	ldw	ra,4(sp)
    aff8:	df000017 	ldw	fp,0(sp)
    affc:	dec00204 	addi	sp,sp,8
    b000:	f800283a 	ret

0000b004 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    b004:	defffc04 	addi	sp,sp,-16
    b008:	dfc00315 	stw	ra,12(sp)
    b00c:	df000215 	stw	fp,8(sp)
    b010:	df000204 	addi	fp,sp,8
    b014:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b018:	e0bfff17 	ldw	r2,-4(fp)
    b01c:	10800017 	ldw	r2,0(r2)
    b020:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    b024:	e0bffe17 	ldw	r2,-8(fp)
    b028:	11000a04 	addi	r4,r2,40
    b02c:	e0bfff17 	ldw	r2,-4(fp)
    b030:	11400217 	ldw	r5,8(r2)
    b034:	000b4340 	call	b434 <altera_avalon_jtag_uart_close>
}
    b038:	e037883a 	mov	sp,fp
    b03c:	dfc00117 	ldw	ra,4(sp)
    b040:	df000017 	ldw	fp,0(sp)
    b044:	dec00204 	addi	sp,sp,8
    b048:	f800283a 	ret

0000b04c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    b04c:	defffa04 	addi	sp,sp,-24
    b050:	dfc00515 	stw	ra,20(sp)
    b054:	df000415 	stw	fp,16(sp)
    b058:	df000404 	addi	fp,sp,16
    b05c:	e13ffd15 	stw	r4,-12(fp)
    b060:	e17ffe15 	stw	r5,-8(fp)
    b064:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    b068:	e0bffd17 	ldw	r2,-12(fp)
    b06c:	10800017 	ldw	r2,0(r2)
    b070:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    b074:	e0bffc17 	ldw	r2,-16(fp)
    b078:	11000a04 	addi	r4,r2,40
    b07c:	e17ffe17 	ldw	r5,-8(fp)
    b080:	e1bfff17 	ldw	r6,-4(fp)
    b084:	000b4a80 	call	b4a8 <altera_avalon_jtag_uart_ioctl>
}
    b088:	e037883a 	mov	sp,fp
    b08c:	dfc00117 	ldw	ra,4(sp)
    b090:	df000017 	ldw	fp,0(sp)
    b094:	dec00204 	addi	sp,sp,8
    b098:	f800283a 	ret

0000b09c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    b09c:	defffa04 	addi	sp,sp,-24
    b0a0:	dfc00515 	stw	ra,20(sp)
    b0a4:	df000415 	stw	fp,16(sp)
    b0a8:	df000404 	addi	fp,sp,16
    b0ac:	e13ffd15 	stw	r4,-12(fp)
    b0b0:	e17ffe15 	stw	r5,-8(fp)
    b0b4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b0b8:	e0fffd17 	ldw	r3,-12(fp)
    b0bc:	00800044 	movi	r2,1
    b0c0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    b0c4:	e0bffd17 	ldw	r2,-12(fp)
    b0c8:	10800017 	ldw	r2,0(r2)
    b0cc:	11000104 	addi	r4,r2,4
    b0d0:	e0bffd17 	ldw	r2,-12(fp)
    b0d4:	10800817 	ldw	r2,32(r2)
    b0d8:	1007883a 	mov	r3,r2
    b0dc:	2005883a 	mov	r2,r4
    b0e0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    b0e4:	e13ffe17 	ldw	r4,-8(fp)
    b0e8:	e17fff17 	ldw	r5,-4(fp)
    b0ec:	d8000015 	stw	zero,0(sp)
    b0f0:	01800074 	movhi	r6,1
    b0f4:	31ac5704 	addi	r6,r6,-20132
    b0f8:	e1fffd17 	ldw	r7,-12(fp)
    b0fc:	000be7c0 	call	be7c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    b100:	e0bffd17 	ldw	r2,-12(fp)
    b104:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    b108:	e0bffd17 	ldw	r2,-12(fp)
    b10c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    b110:	00800074 	movhi	r2,1
    b114:	10878704 	addi	r2,r2,7708
    b118:	10800017 	ldw	r2,0(r2)
    b11c:	100b883a 	mov	r5,r2
    b120:	01800074 	movhi	r6,1
    b124:	31ace104 	addi	r6,r6,-19580
    b128:	e1fffd17 	ldw	r7,-12(fp)
    b12c:	000bb000 	call	bb00 <alt_alarm_start>
    b130:	1004403a 	cmpge	r2,r2,zero
    b134:	1000041e 	bne	r2,zero,b148 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    b138:	e0fffd17 	ldw	r3,-12(fp)
    b13c:	00a00034 	movhi	r2,32768
    b140:	10bfffc4 	addi	r2,r2,-1
    b144:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    b148:	e037883a 	mov	sp,fp
    b14c:	dfc00117 	ldw	ra,4(sp)
    b150:	df000017 	ldw	fp,0(sp)
    b154:	dec00204 	addi	sp,sp,8
    b158:	f800283a 	ret

0000b15c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    b15c:	defff804 	addi	sp,sp,-32
    b160:	df000715 	stw	fp,28(sp)
    b164:	df000704 	addi	fp,sp,28
    b168:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    b16c:	e0bfff17 	ldw	r2,-4(fp)
    b170:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    b174:	e0bffe17 	ldw	r2,-8(fp)
    b178:	10800017 	ldw	r2,0(r2)
    b17c:	e0bffd15 	stw	r2,-12(fp)
    b180:	00000006 	br	b184 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b184:	e0bffd17 	ldw	r2,-12(fp)
    b188:	10800104 	addi	r2,r2,4
    b18c:	10800037 	ldwio	r2,0(r2)
    b190:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    b194:	e0bffc17 	ldw	r2,-16(fp)
    b198:	1080c00c 	andi	r2,r2,768
    b19c:	1005003a 	cmpeq	r2,r2,zero
    b1a0:	1000741e 	bne	r2,zero,b374 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    b1a4:	e0bffc17 	ldw	r2,-16(fp)
    b1a8:	1080400c 	andi	r2,r2,256
    b1ac:	1005003a 	cmpeq	r2,r2,zero
    b1b0:	1000351e 	bne	r2,zero,b288 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    b1b4:	00800074 	movhi	r2,1
    b1b8:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b1bc:	e0bffe17 	ldw	r2,-8(fp)
    b1c0:	10800a17 	ldw	r2,40(r2)
    b1c4:	10800044 	addi	r2,r2,1
    b1c8:	1081ffcc 	andi	r2,r2,2047
    b1cc:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    b1d0:	e0bffe17 	ldw	r2,-8(fp)
    b1d4:	10c00b17 	ldw	r3,44(r2)
    b1d8:	e0bffa17 	ldw	r2,-24(fp)
    b1dc:	18801626 	beq	r3,r2,b238 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    b1e0:	e0bffd17 	ldw	r2,-12(fp)
    b1e4:	10800037 	ldwio	r2,0(r2)
    b1e8:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    b1ec:	e0bffb17 	ldw	r2,-20(fp)
    b1f0:	10a0000c 	andi	r2,r2,32768
    b1f4:	1005003a 	cmpeq	r2,r2,zero
    b1f8:	10000f1e 	bne	r2,zero,b238 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    b1fc:	e0bffe17 	ldw	r2,-8(fp)
    b200:	10c00a17 	ldw	r3,40(r2)
    b204:	e0bffb17 	ldw	r2,-20(fp)
    b208:	1009883a 	mov	r4,r2
    b20c:	e0bffe17 	ldw	r2,-8(fp)
    b210:	1885883a 	add	r2,r3,r2
    b214:	10800e04 	addi	r2,r2,56
    b218:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b21c:	e0bffe17 	ldw	r2,-8(fp)
    b220:	10800a17 	ldw	r2,40(r2)
    b224:	10800044 	addi	r2,r2,1
    b228:	10c1ffcc 	andi	r3,r2,2047
    b22c:	e0bffe17 	ldw	r2,-8(fp)
    b230:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    b234:	003fe106 	br	b1bc <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    b238:	e0bffb17 	ldw	r2,-20(fp)
    b23c:	10bfffec 	andhi	r2,r2,65535
    b240:	1005003a 	cmpeq	r2,r2,zero
    b244:	1000101e 	bne	r2,zero,b288 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b248:	e0bffe17 	ldw	r2,-8(fp)
    b24c:	10c00817 	ldw	r3,32(r2)
    b250:	00bfff84 	movi	r2,-2
    b254:	1886703a 	and	r3,r3,r2
    b258:	e0bffe17 	ldw	r2,-8(fp)
    b25c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    b260:	e0bffd17 	ldw	r2,-12(fp)
    b264:	11000104 	addi	r4,r2,4
    b268:	e0bffe17 	ldw	r2,-8(fp)
    b26c:	10800817 	ldw	r2,32(r2)
    b270:	1007883a 	mov	r3,r2
    b274:	2005883a 	mov	r2,r4
    b278:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b27c:	e0bffd17 	ldw	r2,-12(fp)
    b280:	10800104 	addi	r2,r2,4
    b284:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    b288:	e0bffc17 	ldw	r2,-16(fp)
    b28c:	1080800c 	andi	r2,r2,512
    b290:	1005003a 	cmpeq	r2,r2,zero
    b294:	103fbb1e 	bne	r2,zero,b184 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    b298:	e0bffc17 	ldw	r2,-16(fp)
    b29c:	10bfffec 	andhi	r2,r2,65535
    b2a0:	1004d43a 	srli	r2,r2,16
    b2a4:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    b2a8:	00001506 	br	b300 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    b2ac:	e13ffd17 	ldw	r4,-12(fp)
    b2b0:	e0bffe17 	ldw	r2,-8(fp)
    b2b4:	10c00d17 	ldw	r3,52(r2)
    b2b8:	e0bffe17 	ldw	r2,-8(fp)
    b2bc:	1885883a 	add	r2,r3,r2
    b2c0:	10820e04 	addi	r2,r2,2104
    b2c4:	10800003 	ldbu	r2,0(r2)
    b2c8:	10c03fcc 	andi	r3,r2,255
    b2cc:	18c0201c 	xori	r3,r3,128
    b2d0:	18ffe004 	addi	r3,r3,-128
    b2d4:	2005883a 	mov	r2,r4
    b2d8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b2dc:	e0bffe17 	ldw	r2,-8(fp)
    b2e0:	10800d17 	ldw	r2,52(r2)
    b2e4:	10800044 	addi	r2,r2,1
    b2e8:	10c1ffcc 	andi	r3,r2,2047
    b2ec:	e0bffe17 	ldw	r2,-8(fp)
    b2f0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    b2f4:	e0bff917 	ldw	r2,-28(fp)
    b2f8:	10bfffc4 	addi	r2,r2,-1
    b2fc:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    b300:	e0bff917 	ldw	r2,-28(fp)
    b304:	1005003a 	cmpeq	r2,r2,zero
    b308:	1000051e 	bne	r2,zero,b320 <altera_avalon_jtag_uart_irq+0x1c4>
    b30c:	e0bffe17 	ldw	r2,-8(fp)
    b310:	10c00d17 	ldw	r3,52(r2)
    b314:	e0bffe17 	ldw	r2,-8(fp)
    b318:	10800c17 	ldw	r2,48(r2)
    b31c:	18bfe31e 	bne	r3,r2,b2ac <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    b320:	e0bff917 	ldw	r2,-28(fp)
    b324:	1005003a 	cmpeq	r2,r2,zero
    b328:	103f961e 	bne	r2,zero,b184 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    b32c:	e0bffe17 	ldw	r2,-8(fp)
    b330:	10c00817 	ldw	r3,32(r2)
    b334:	00bfff44 	movi	r2,-3
    b338:	1886703a 	and	r3,r3,r2
    b33c:	e0bffe17 	ldw	r2,-8(fp)
    b340:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b344:	e0bffe17 	ldw	r2,-8(fp)
    b348:	10800017 	ldw	r2,0(r2)
    b34c:	11000104 	addi	r4,r2,4
    b350:	e0bffe17 	ldw	r2,-8(fp)
    b354:	10800817 	ldw	r2,32(r2)
    b358:	1007883a 	mov	r3,r2
    b35c:	2005883a 	mov	r2,r4
    b360:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b364:	e0bffd17 	ldw	r2,-12(fp)
    b368:	10800104 	addi	r2,r2,4
    b36c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    b370:	003f8406 	br	b184 <altera_avalon_jtag_uart_irq+0x28>
}
    b374:	e037883a 	mov	sp,fp
    b378:	df000017 	ldw	fp,0(sp)
    b37c:	dec00104 	addi	sp,sp,4
    b380:	f800283a 	ret

0000b384 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    b384:	defffc04 	addi	sp,sp,-16
    b388:	df000315 	stw	fp,12(sp)
    b38c:	df000304 	addi	fp,sp,12
    b390:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    b394:	e0bfff17 	ldw	r2,-4(fp)
    b398:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    b39c:	e0bffe17 	ldw	r2,-8(fp)
    b3a0:	10800017 	ldw	r2,0(r2)
    b3a4:	10800104 	addi	r2,r2,4
    b3a8:	10800037 	ldwio	r2,0(r2)
    b3ac:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    b3b0:	e0bffd17 	ldw	r2,-12(fp)
    b3b4:	1081000c 	andi	r2,r2,1024
    b3b8:	1005003a 	cmpeq	r2,r2,zero
    b3bc:	10000c1e 	bne	r2,zero,b3f0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    b3c0:	e0bffe17 	ldw	r2,-8(fp)
    b3c4:	10800017 	ldw	r2,0(r2)
    b3c8:	11000104 	addi	r4,r2,4
    b3cc:	e0bffe17 	ldw	r2,-8(fp)
    b3d0:	10800817 	ldw	r2,32(r2)
    b3d4:	10810014 	ori	r2,r2,1024
    b3d8:	1007883a 	mov	r3,r2
    b3dc:	2005883a 	mov	r2,r4
    b3e0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    b3e4:	e0bffe17 	ldw	r2,-8(fp)
    b3e8:	10000915 	stw	zero,36(r2)
    b3ec:	00000a06 	br	b418 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    b3f0:	e0bffe17 	ldw	r2,-8(fp)
    b3f4:	10c00917 	ldw	r3,36(r2)
    b3f8:	00a00034 	movhi	r2,32768
    b3fc:	10bfff04 	addi	r2,r2,-4
    b400:	10c00536 	bltu	r2,r3,b418 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    b404:	e0bffe17 	ldw	r2,-8(fp)
    b408:	10800917 	ldw	r2,36(r2)
    b40c:	10c00044 	addi	r3,r2,1
    b410:	e0bffe17 	ldw	r2,-8(fp)
    b414:	10c00915 	stw	r3,36(r2)
    b418:	00800074 	movhi	r2,1
    b41c:	10878704 	addi	r2,r2,7708
    b420:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    b424:	e037883a 	mov	sp,fp
    b428:	df000017 	ldw	fp,0(sp)
    b42c:	dec00104 	addi	sp,sp,4
    b430:	f800283a 	ret

0000b434 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    b434:	defffc04 	addi	sp,sp,-16
    b438:	df000315 	stw	fp,12(sp)
    b43c:	df000304 	addi	fp,sp,12
    b440:	e13ffd15 	stw	r4,-12(fp)
    b444:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    b448:	00000706 	br	b468 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    b44c:	e0bffe17 	ldw	r2,-8(fp)
    b450:	1090000c 	andi	r2,r2,16384
    b454:	1005003a 	cmpeq	r2,r2,zero
    b458:	1000031e 	bne	r2,zero,b468 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    b45c:	00bffd44 	movi	r2,-11
    b460:	e0bfff15 	stw	r2,-4(fp)
    b464:	00000b06 	br	b494 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    b468:	e0bffd17 	ldw	r2,-12(fp)
    b46c:	10c00d17 	ldw	r3,52(r2)
    b470:	e0bffd17 	ldw	r2,-12(fp)
    b474:	10800c17 	ldw	r2,48(r2)
    b478:	18800526 	beq	r3,r2,b490 <altera_avalon_jtag_uart_close+0x5c>
    b47c:	e0bffd17 	ldw	r2,-12(fp)
    b480:	10c00917 	ldw	r3,36(r2)
    b484:	e0bffd17 	ldw	r2,-12(fp)
    b488:	10800117 	ldw	r2,4(r2)
    b48c:	18bfef36 	bltu	r3,r2,b44c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    b490:	e03fff15 	stw	zero,-4(fp)
    b494:	e0bfff17 	ldw	r2,-4(fp)
}
    b498:	e037883a 	mov	sp,fp
    b49c:	df000017 	ldw	fp,0(sp)
    b4a0:	dec00104 	addi	sp,sp,4
    b4a4:	f800283a 	ret

0000b4a8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    b4a8:	defff804 	addi	sp,sp,-32
    b4ac:	df000715 	stw	fp,28(sp)
    b4b0:	df000704 	addi	fp,sp,28
    b4b4:	e13ffb15 	stw	r4,-20(fp)
    b4b8:	e17ffc15 	stw	r5,-16(fp)
    b4bc:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    b4c0:	00bff9c4 	movi	r2,-25
    b4c4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    b4c8:	e0bffc17 	ldw	r2,-16(fp)
    b4cc:	e0bfff15 	stw	r2,-4(fp)
    b4d0:	e0ffff17 	ldw	r3,-4(fp)
    b4d4:	189a8060 	cmpeqi	r2,r3,27137
    b4d8:	1000041e 	bne	r2,zero,b4ec <altera_avalon_jtag_uart_ioctl+0x44>
    b4dc:	e0ffff17 	ldw	r3,-4(fp)
    b4e0:	189a80a0 	cmpeqi	r2,r3,27138
    b4e4:	10001b1e 	bne	r2,zero,b554 <altera_avalon_jtag_uart_ioctl+0xac>
    b4e8:	00002706 	br	b588 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    b4ec:	e0bffb17 	ldw	r2,-20(fp)
    b4f0:	10c00117 	ldw	r3,4(r2)
    b4f4:	00a00034 	movhi	r2,32768
    b4f8:	10bfffc4 	addi	r2,r2,-1
    b4fc:	18802226 	beq	r3,r2,b588 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    b500:	e0bffd17 	ldw	r2,-12(fp)
    b504:	10800017 	ldw	r2,0(r2)
    b508:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    b50c:	e0bff917 	ldw	r2,-28(fp)
    b510:	10800090 	cmplti	r2,r2,2
    b514:	1000071e 	bne	r2,zero,b534 <altera_avalon_jtag_uart_ioctl+0x8c>
    b518:	e0fff917 	ldw	r3,-28(fp)
    b51c:	00a00034 	movhi	r2,32768
    b520:	10bfffc4 	addi	r2,r2,-1
    b524:	18800326 	beq	r3,r2,b534 <altera_avalon_jtag_uart_ioctl+0x8c>
    b528:	e0bff917 	ldw	r2,-28(fp)
    b52c:	e0bffe15 	stw	r2,-8(fp)
    b530:	00000306 	br	b540 <altera_avalon_jtag_uart_ioctl+0x98>
    b534:	00e00034 	movhi	r3,32768
    b538:	18ffff84 	addi	r3,r3,-2
    b53c:	e0fffe15 	stw	r3,-8(fp)
    b540:	e0bffb17 	ldw	r2,-20(fp)
    b544:	e0fffe17 	ldw	r3,-8(fp)
    b548:	10c00115 	stw	r3,4(r2)
      rc = 0;
    b54c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    b550:	00000d06 	br	b588 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    b554:	e0bffb17 	ldw	r2,-20(fp)
    b558:	10c00117 	ldw	r3,4(r2)
    b55c:	00a00034 	movhi	r2,32768
    b560:	10bfffc4 	addi	r2,r2,-1
    b564:	18800826 	beq	r3,r2,b588 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    b568:	e13ffd17 	ldw	r4,-12(fp)
    b56c:	e0bffb17 	ldw	r2,-20(fp)
    b570:	10c00917 	ldw	r3,36(r2)
    b574:	e0bffb17 	ldw	r2,-20(fp)
    b578:	10800117 	ldw	r2,4(r2)
    b57c:	1885803a 	cmpltu	r2,r3,r2
    b580:	20800015 	stw	r2,0(r4)
      rc = 0;
    b584:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    b588:	e0bffa17 	ldw	r2,-24(fp)
}
    b58c:	e037883a 	mov	sp,fp
    b590:	df000017 	ldw	fp,0(sp)
    b594:	dec00104 	addi	sp,sp,4
    b598:	f800283a 	ret

0000b59c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    b59c:	defff204 	addi	sp,sp,-56
    b5a0:	dfc00d15 	stw	ra,52(sp)
    b5a4:	df000c15 	stw	fp,48(sp)
    b5a8:	df000c04 	addi	fp,sp,48
    b5ac:	e13ffb15 	stw	r4,-20(fp)
    b5b0:	e17ffc15 	stw	r5,-16(fp)
    b5b4:	e1bffd15 	stw	r6,-12(fp)
    b5b8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    b5bc:	e0bffc17 	ldw	r2,-16(fp)
    b5c0:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    b5c4:	00004806 	br	b6e8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    b5c8:	e0bffb17 	ldw	r2,-20(fp)
    b5cc:	10800a17 	ldw	r2,40(r2)
    b5d0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    b5d4:	e0bffb17 	ldw	r2,-20(fp)
    b5d8:	10800b17 	ldw	r2,44(r2)
    b5dc:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    b5e0:	e0fff717 	ldw	r3,-36(fp)
    b5e4:	e0bff617 	ldw	r2,-40(fp)
    b5e8:	18800536 	bltu	r3,r2,b600 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    b5ec:	e0bff717 	ldw	r2,-36(fp)
    b5f0:	e0fff617 	ldw	r3,-40(fp)
    b5f4:	10c5c83a 	sub	r2,r2,r3
    b5f8:	e0bff815 	stw	r2,-32(fp)
    b5fc:	00000406 	br	b610 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    b600:	00820004 	movi	r2,2048
    b604:	e0fff617 	ldw	r3,-40(fp)
    b608:	10c5c83a 	sub	r2,r2,r3
    b60c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    b610:	e0bff817 	ldw	r2,-32(fp)
    b614:	1005003a 	cmpeq	r2,r2,zero
    b618:	10001f1e 	bne	r2,zero,b698 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    b61c:	e0fffd17 	ldw	r3,-12(fp)
    b620:	e0bff817 	ldw	r2,-32(fp)
    b624:	1880022e 	bgeu	r3,r2,b630 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    b628:	e0bffd17 	ldw	r2,-12(fp)
    b62c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    b630:	e0bffb17 	ldw	r2,-20(fp)
    b634:	10c00e04 	addi	r3,r2,56
    b638:	e0bff617 	ldw	r2,-40(fp)
    b63c:	1887883a 	add	r3,r3,r2
    b640:	e0bffa17 	ldw	r2,-24(fp)
    b644:	1009883a 	mov	r4,r2
    b648:	180b883a 	mov	r5,r3
    b64c:	e1bff817 	ldw	r6,-32(fp)
    b650:	00057c00 	call	57c0 <memcpy>
      ptr   += n;
    b654:	e0fff817 	ldw	r3,-32(fp)
    b658:	e0bffa17 	ldw	r2,-24(fp)
    b65c:	10c5883a 	add	r2,r2,r3
    b660:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    b664:	e0fffd17 	ldw	r3,-12(fp)
    b668:	e0bff817 	ldw	r2,-32(fp)
    b66c:	1885c83a 	sub	r2,r3,r2
    b670:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b674:	e0fff617 	ldw	r3,-40(fp)
    b678:	e0bff817 	ldw	r2,-32(fp)
    b67c:	1885883a 	add	r2,r3,r2
    b680:	10c1ffcc 	andi	r3,r2,2047
    b684:	e0bffb17 	ldw	r2,-20(fp)
    b688:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    b68c:	e0bffd17 	ldw	r2,-12(fp)
    b690:	10800048 	cmpgei	r2,r2,1
    b694:	103fcc1e 	bne	r2,zero,b5c8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    b698:	e0fffa17 	ldw	r3,-24(fp)
    b69c:	e0bffc17 	ldw	r2,-16(fp)
    b6a0:	1880141e 	bne	r3,r2,b6f4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    b6a4:	e0bffe17 	ldw	r2,-8(fp)
    b6a8:	1090000c 	andi	r2,r2,16384
    b6ac:	1004c03a 	cmpne	r2,r2,zero
    b6b0:	1000101e 	bne	r2,zero,b6f4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    b6b4:	e0bffb17 	ldw	r2,-20(fp)
    b6b8:	10c00a17 	ldw	r3,40(r2)
    b6bc:	e0bff717 	ldw	r2,-36(fp)
    b6c0:	1880051e 	bne	r3,r2,b6d8 <altera_avalon_jtag_uart_read+0x13c>
    b6c4:	e0bffb17 	ldw	r2,-20(fp)
    b6c8:	10c00917 	ldw	r3,36(r2)
    b6cc:	e0bffb17 	ldw	r2,-20(fp)
    b6d0:	10800117 	ldw	r2,4(r2)
    b6d4:	18bff736 	bltu	r3,r2,b6b4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    b6d8:	e0bffb17 	ldw	r2,-20(fp)
    b6dc:	10c00a17 	ldw	r3,40(r2)
    b6e0:	e0bff717 	ldw	r2,-36(fp)
    b6e4:	18800326 	beq	r3,r2,b6f4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    b6e8:	e0bffd17 	ldw	r2,-12(fp)
    b6ec:	10800048 	cmpgei	r2,r2,1
    b6f0:	103fb51e 	bne	r2,zero,b5c8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    b6f4:	e0fffa17 	ldw	r3,-24(fp)
    b6f8:	e0bffc17 	ldw	r2,-16(fp)
    b6fc:	18801926 	beq	r3,r2,b764 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b700:	0005303a 	rdctl	r2,status
    b704:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b708:	e0fff517 	ldw	r3,-44(fp)
    b70c:	00bfff84 	movi	r2,-2
    b710:	1884703a 	and	r2,r3,r2
    b714:	1001703a 	wrctl	status,r2
  
  return context;
    b718:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    b71c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b720:	e0bffb17 	ldw	r2,-20(fp)
    b724:	10800817 	ldw	r2,32(r2)
    b728:	10c00054 	ori	r3,r2,1
    b72c:	e0bffb17 	ldw	r2,-20(fp)
    b730:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b734:	e0bffb17 	ldw	r2,-20(fp)
    b738:	10800017 	ldw	r2,0(r2)
    b73c:	11000104 	addi	r4,r2,4
    b740:	e0bffb17 	ldw	r2,-20(fp)
    b744:	10800817 	ldw	r2,32(r2)
    b748:	1007883a 	mov	r3,r2
    b74c:	2005883a 	mov	r2,r4
    b750:	10c00035 	stwio	r3,0(r2)
    b754:	e0bff917 	ldw	r2,-28(fp)
    b758:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b75c:	e0bff417 	ldw	r2,-48(fp)
    b760:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    b764:	e0fffa17 	ldw	r3,-24(fp)
    b768:	e0bffc17 	ldw	r2,-16(fp)
    b76c:	18800526 	beq	r3,r2,b784 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    b770:	e0fffa17 	ldw	r3,-24(fp)
    b774:	e0bffc17 	ldw	r2,-16(fp)
    b778:	1887c83a 	sub	r3,r3,r2
    b77c:	e0ffff15 	stw	r3,-4(fp)
    b780:	00000906 	br	b7a8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    b784:	e0bffe17 	ldw	r2,-8(fp)
    b788:	1090000c 	andi	r2,r2,16384
    b78c:	1005003a 	cmpeq	r2,r2,zero
    b790:	1000031e 	bne	r2,zero,b7a0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    b794:	00bffd44 	movi	r2,-11
    b798:	e0bfff15 	stw	r2,-4(fp)
    b79c:	00000206 	br	b7a8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    b7a0:	00bffec4 	movi	r2,-5
    b7a4:	e0bfff15 	stw	r2,-4(fp)
    b7a8:	e0bfff17 	ldw	r2,-4(fp)
}
    b7ac:	e037883a 	mov	sp,fp
    b7b0:	dfc00117 	ldw	ra,4(sp)
    b7b4:	df000017 	ldw	fp,0(sp)
    b7b8:	dec00204 	addi	sp,sp,8
    b7bc:	f800283a 	ret

0000b7c0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    b7c0:	defff204 	addi	sp,sp,-56
    b7c4:	dfc00d15 	stw	ra,52(sp)
    b7c8:	df000c15 	stw	fp,48(sp)
    b7cc:	df000c04 	addi	fp,sp,48
    b7d0:	e13ffb15 	stw	r4,-20(fp)
    b7d4:	e17ffc15 	stw	r5,-16(fp)
    b7d8:	e1bffd15 	stw	r6,-12(fp)
    b7dc:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    b7e0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    b7e4:	e0bffc17 	ldw	r2,-16(fp)
    b7e8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b7ec:	00003a06 	br	b8d8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    b7f0:	e0bffb17 	ldw	r2,-20(fp)
    b7f4:	10800c17 	ldw	r2,48(r2)
    b7f8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    b7fc:	e0bffb17 	ldw	r2,-20(fp)
    b800:	10800d17 	ldw	r2,52(r2)
    b804:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    b808:	e0fffa17 	ldw	r3,-24(fp)
    b80c:	e0bff917 	ldw	r2,-28(fp)
    b810:	1880062e 	bgeu	r3,r2,b82c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    b814:	e0fff917 	ldw	r3,-28(fp)
    b818:	e0bffa17 	ldw	r2,-24(fp)
    b81c:	1885c83a 	sub	r2,r3,r2
    b820:	10bfffc4 	addi	r2,r2,-1
    b824:	e0bff815 	stw	r2,-32(fp)
    b828:	00000c06 	br	b85c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    b82c:	e0bff917 	ldw	r2,-28(fp)
    b830:	1005003a 	cmpeq	r2,r2,zero
    b834:	1000051e 	bne	r2,zero,b84c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    b838:	00820004 	movi	r2,2048
    b83c:	e0fffa17 	ldw	r3,-24(fp)
    b840:	10c5c83a 	sub	r2,r2,r3
    b844:	e0bff815 	stw	r2,-32(fp)
    b848:	00000406 	br	b85c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    b84c:	0081ffc4 	movi	r2,2047
    b850:	e0fffa17 	ldw	r3,-24(fp)
    b854:	10c5c83a 	sub	r2,r2,r3
    b858:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    b85c:	e0bff817 	ldw	r2,-32(fp)
    b860:	1005003a 	cmpeq	r2,r2,zero
    b864:	10001f1e 	bne	r2,zero,b8e4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    b868:	e0fffd17 	ldw	r3,-12(fp)
    b86c:	e0bff817 	ldw	r2,-32(fp)
    b870:	1880022e 	bgeu	r3,r2,b87c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    b874:	e0bffd17 	ldw	r2,-12(fp)
    b878:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    b87c:	e0bffb17 	ldw	r2,-20(fp)
    b880:	10c20e04 	addi	r3,r2,2104
    b884:	e0bffa17 	ldw	r2,-24(fp)
    b888:	1885883a 	add	r2,r3,r2
    b88c:	e0fffc17 	ldw	r3,-16(fp)
    b890:	1009883a 	mov	r4,r2
    b894:	180b883a 	mov	r5,r3
    b898:	e1bff817 	ldw	r6,-32(fp)
    b89c:	00057c00 	call	57c0 <memcpy>
      ptr   += n;
    b8a0:	e0fff817 	ldw	r3,-32(fp)
    b8a4:	e0bffc17 	ldw	r2,-16(fp)
    b8a8:	10c5883a 	add	r2,r2,r3
    b8ac:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    b8b0:	e0fffd17 	ldw	r3,-12(fp)
    b8b4:	e0bff817 	ldw	r2,-32(fp)
    b8b8:	1885c83a 	sub	r2,r3,r2
    b8bc:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b8c0:	e0fffa17 	ldw	r3,-24(fp)
    b8c4:	e0bff817 	ldw	r2,-32(fp)
    b8c8:	1885883a 	add	r2,r3,r2
    b8cc:	10c1ffcc 	andi	r3,r2,2047
    b8d0:	e0bffb17 	ldw	r2,-20(fp)
    b8d4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b8d8:	e0bffd17 	ldw	r2,-12(fp)
    b8dc:	10800048 	cmpgei	r2,r2,1
    b8e0:	103fc31e 	bne	r2,zero,b7f0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b8e4:	0005303a 	rdctl	r2,status
    b8e8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b8ec:	e0fff517 	ldw	r3,-44(fp)
    b8f0:	00bfff84 	movi	r2,-2
    b8f4:	1884703a 	and	r2,r3,r2
    b8f8:	1001703a 	wrctl	status,r2
  
  return context;
    b8fc:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    b900:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    b904:	e0bffb17 	ldw	r2,-20(fp)
    b908:	10800817 	ldw	r2,32(r2)
    b90c:	10c00094 	ori	r3,r2,2
    b910:	e0bffb17 	ldw	r2,-20(fp)
    b914:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b918:	e0bffb17 	ldw	r2,-20(fp)
    b91c:	10800017 	ldw	r2,0(r2)
    b920:	11000104 	addi	r4,r2,4
    b924:	e0bffb17 	ldw	r2,-20(fp)
    b928:	10800817 	ldw	r2,32(r2)
    b92c:	1007883a 	mov	r3,r2
    b930:	2005883a 	mov	r2,r4
    b934:	10c00035 	stwio	r3,0(r2)
    b938:	e0bff717 	ldw	r2,-36(fp)
    b93c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b940:	e0bff417 	ldw	r2,-48(fp)
    b944:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    b948:	e0bffd17 	ldw	r2,-12(fp)
    b94c:	10800050 	cmplti	r2,r2,1
    b950:	1000111e 	bne	r2,zero,b998 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    b954:	e0bffe17 	ldw	r2,-8(fp)
    b958:	1090000c 	andi	r2,r2,16384
    b95c:	1004c03a 	cmpne	r2,r2,zero
    b960:	1000101e 	bne	r2,zero,b9a4 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    b964:	e0bffb17 	ldw	r2,-20(fp)
    b968:	10c00d17 	ldw	r3,52(r2)
    b96c:	e0bff917 	ldw	r2,-28(fp)
    b970:	1880051e 	bne	r3,r2,b988 <altera_avalon_jtag_uart_write+0x1c8>
    b974:	e0bffb17 	ldw	r2,-20(fp)
    b978:	10c00917 	ldw	r3,36(r2)
    b97c:	e0bffb17 	ldw	r2,-20(fp)
    b980:	10800117 	ldw	r2,4(r2)
    b984:	18bff736 	bltu	r3,r2,b964 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    b988:	e0bffb17 	ldw	r2,-20(fp)
    b98c:	10c00d17 	ldw	r3,52(r2)
    b990:	e0bff917 	ldw	r2,-28(fp)
    b994:	18800326 	beq	r3,r2,b9a4 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    b998:	e0bffd17 	ldw	r2,-12(fp)
    b99c:	10800048 	cmpgei	r2,r2,1
    b9a0:	103fcd1e 	bne	r2,zero,b8d8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    b9a4:	e0fffc17 	ldw	r3,-16(fp)
    b9a8:	e0bff617 	ldw	r2,-40(fp)
    b9ac:	18800526 	beq	r3,r2,b9c4 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    b9b0:	e0fffc17 	ldw	r3,-16(fp)
    b9b4:	e0bff617 	ldw	r2,-40(fp)
    b9b8:	1887c83a 	sub	r3,r3,r2
    b9bc:	e0ffff15 	stw	r3,-4(fp)
    b9c0:	00000906 	br	b9e8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    b9c4:	e0bffe17 	ldw	r2,-8(fp)
    b9c8:	1090000c 	andi	r2,r2,16384
    b9cc:	1005003a 	cmpeq	r2,r2,zero
    b9d0:	1000031e 	bne	r2,zero,b9e0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    b9d4:	00bffd44 	movi	r2,-11
    b9d8:	e0bfff15 	stw	r2,-4(fp)
    b9dc:	00000206 	br	b9e8 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    b9e0:	00bffec4 	movi	r2,-5
    b9e4:	e0bfff15 	stw	r2,-4(fp)
    b9e8:	e0bfff17 	ldw	r2,-4(fp)
}
    b9ec:	e037883a 	mov	sp,fp
    b9f0:	dfc00117 	ldw	ra,4(sp)
    b9f4:	df000017 	ldw	fp,0(sp)
    b9f8:	dec00204 	addi	sp,sp,8
    b9fc:	f800283a 	ret

0000ba00 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    ba00:	defffa04 	addi	sp,sp,-24
    ba04:	dfc00515 	stw	ra,20(sp)
    ba08:	df000415 	stw	fp,16(sp)
    ba0c:	df000404 	addi	fp,sp,16
    ba10:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    ba14:	e0bfff17 	ldw	r2,-4(fp)
    ba18:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    ba1c:	e0bfff17 	ldw	r2,-4(fp)
    ba20:	10800104 	addi	r2,r2,4
    ba24:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ba28:	0005303a 	rdctl	r2,status
    ba2c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ba30:	e0fffd17 	ldw	r3,-12(fp)
    ba34:	00bfff84 	movi	r2,-2
    ba38:	1884703a 	and	r2,r3,r2
    ba3c:	1001703a 	wrctl	status,r2
  
  return context;
    ba40:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    ba44:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    ba48:	000c6140 	call	c614 <alt_tick>
    ba4c:	e0bffe17 	ldw	r2,-8(fp)
    ba50:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ba54:	e0bffc17 	ldw	r2,-16(fp)
    ba58:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    ba5c:	e037883a 	mov	sp,fp
    ba60:	dfc00117 	ldw	ra,4(sp)
    ba64:	df000017 	ldw	fp,0(sp)
    ba68:	dec00204 	addi	sp,sp,8
    ba6c:	f800283a 	ret

0000ba70 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    ba70:	defff804 	addi	sp,sp,-32
    ba74:	dfc00715 	stw	ra,28(sp)
    ba78:	df000615 	stw	fp,24(sp)
    ba7c:	df000604 	addi	fp,sp,24
    ba80:	e13ffc15 	stw	r4,-16(fp)
    ba84:	e17ffd15 	stw	r5,-12(fp)
    ba88:	e1bffe15 	stw	r6,-8(fp)
    ba8c:	e1ffff15 	stw	r7,-4(fp)
    ba90:	e0bfff17 	ldw	r2,-4(fp)
    ba94:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    ba98:	00800074 	movhi	r2,1
    ba9c:	10878704 	addi	r2,r2,7708
    baa0:	10800017 	ldw	r2,0(r2)
    baa4:	1004c03a 	cmpne	r2,r2,zero
    baa8:	1000041e 	bne	r2,zero,babc <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    baac:	00c00074 	movhi	r3,1
    bab0:	18c78704 	addi	r3,r3,7708
    bab4:	e0bffb17 	ldw	r2,-20(fp)
    bab8:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    babc:	e0bffc17 	ldw	r2,-16(fp)
    bac0:	10800104 	addi	r2,r2,4
    bac4:	1007883a 	mov	r3,r2
    bac8:	008001c4 	movi	r2,7
    bacc:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    bad0:	d8000015 	stw	zero,0(sp)
    bad4:	e13ffd17 	ldw	r4,-12(fp)
    bad8:	e17ffe17 	ldw	r5,-8(fp)
    badc:	01800074 	movhi	r6,1
    bae0:	31ae8004 	addi	r6,r6,-17920
    bae4:	e1fffc17 	ldw	r7,-16(fp)
    bae8:	000be7c0 	call	be7c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    baec:	e037883a 	mov	sp,fp
    baf0:	dfc00117 	ldw	ra,4(sp)
    baf4:	df000017 	ldw	fp,0(sp)
    baf8:	dec00204 	addi	sp,sp,8
    bafc:	f800283a 	ret

0000bb00 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    bb00:	defff404 	addi	sp,sp,-48
    bb04:	df000b15 	stw	fp,44(sp)
    bb08:	df000b04 	addi	fp,sp,44
    bb0c:	e13ffb15 	stw	r4,-20(fp)
    bb10:	e17ffc15 	stw	r5,-16(fp)
    bb14:	e1bffd15 	stw	r6,-12(fp)
    bb18:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    bb1c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    bb20:	00800074 	movhi	r2,1
    bb24:	10878704 	addi	r2,r2,7708
    bb28:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    bb2c:	1005003a 	cmpeq	r2,r2,zero
    bb30:	1000411e 	bne	r2,zero,bc38 <alt_alarm_start+0x138>
  {
    if (alarm)
    bb34:	e0bffb17 	ldw	r2,-20(fp)
    bb38:	1005003a 	cmpeq	r2,r2,zero
    bb3c:	10003b1e 	bne	r2,zero,bc2c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    bb40:	e0fffb17 	ldw	r3,-20(fp)
    bb44:	e0bffd17 	ldw	r2,-12(fp)
    bb48:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    bb4c:	e0fffb17 	ldw	r3,-20(fp)
    bb50:	e0bffe17 	ldw	r2,-8(fp)
    bb54:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bb58:	0005303a 	rdctl	r2,status
    bb5c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bb60:	e0fff817 	ldw	r3,-32(fp)
    bb64:	00bfff84 	movi	r2,-2
    bb68:	1884703a 	and	r2,r3,r2
    bb6c:	1001703a 	wrctl	status,r2
  
  return context;
    bb70:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    bb74:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    bb78:	00800074 	movhi	r2,1
    bb7c:	10878804 	addi	r2,r2,7712
    bb80:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    bb84:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    bb88:	e0fffc17 	ldw	r3,-16(fp)
    bb8c:	e0bff917 	ldw	r2,-28(fp)
    bb90:	1885883a 	add	r2,r3,r2
    bb94:	10c00044 	addi	r3,r2,1
    bb98:	e0bffb17 	ldw	r2,-20(fp)
    bb9c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    bba0:	e0bffb17 	ldw	r2,-20(fp)
    bba4:	10c00217 	ldw	r3,8(r2)
    bba8:	e0bff917 	ldw	r2,-28(fp)
    bbac:	1880042e 	bgeu	r3,r2,bbc0 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    bbb0:	e0fffb17 	ldw	r3,-20(fp)
    bbb4:	00800044 	movi	r2,1
    bbb8:	18800405 	stb	r2,16(r3)
    bbbc:	00000206 	br	bbc8 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    bbc0:	e0bffb17 	ldw	r2,-20(fp)
    bbc4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    bbc8:	e0fffb17 	ldw	r3,-20(fp)
    bbcc:	00800074 	movhi	r2,1
    bbd0:	10877504 	addi	r2,r2,7636
    bbd4:	e0bff615 	stw	r2,-40(fp)
    bbd8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    bbdc:	e0fff717 	ldw	r3,-36(fp)
    bbe0:	e0bff617 	ldw	r2,-40(fp)
    bbe4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    bbe8:	e0bff617 	ldw	r2,-40(fp)
    bbec:	10c00017 	ldw	r3,0(r2)
    bbf0:	e0bff717 	ldw	r2,-36(fp)
    bbf4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    bbf8:	e0bff617 	ldw	r2,-40(fp)
    bbfc:	10c00017 	ldw	r3,0(r2)
    bc00:	e0bff717 	ldw	r2,-36(fp)
    bc04:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    bc08:	e0fff617 	ldw	r3,-40(fp)
    bc0c:	e0bff717 	ldw	r2,-36(fp)
    bc10:	18800015 	stw	r2,0(r3)
    bc14:	e0bffa17 	ldw	r2,-24(fp)
    bc18:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bc1c:	e0bff517 	ldw	r2,-44(fp)
    bc20:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    bc24:	e03fff15 	stw	zero,-4(fp)
    bc28:	00000506 	br	bc40 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    bc2c:	00bffa84 	movi	r2,-22
    bc30:	e0bfff15 	stw	r2,-4(fp)
    bc34:	00000206 	br	bc40 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    bc38:	00bfde84 	movi	r2,-134
    bc3c:	e0bfff15 	stw	r2,-4(fp)
    bc40:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    bc44:	e037883a 	mov	sp,fp
    bc48:	df000017 	ldw	fp,0(sp)
    bc4c:	dec00104 	addi	sp,sp,4
    bc50:	f800283a 	ret

0000bc54 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    bc54:	deffff04 	addi	sp,sp,-4
    bc58:	df000015 	stw	fp,0(sp)
    bc5c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    bc60:	e037883a 	mov	sp,fp
    bc64:	df000017 	ldw	fp,0(sp)
    bc68:	dec00104 	addi	sp,sp,4
    bc6c:	f800283a 	ret

0000bc70 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    bc70:	defff904 	addi	sp,sp,-28
    bc74:	dfc00615 	stw	ra,24(sp)
    bc78:	df000515 	stw	fp,20(sp)
    bc7c:	df000504 	addi	fp,sp,20
    bc80:	e13ffd15 	stw	r4,-12(fp)
    bc84:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    bc88:	e0bffd17 	ldw	r2,-12(fp)
    bc8c:	1005003a 	cmpeq	r2,r2,zero
    bc90:	1000041e 	bne	r2,zero,bca4 <alt_dev_llist_insert+0x34>
    bc94:	e0bffd17 	ldw	r2,-12(fp)
    bc98:	10800217 	ldw	r2,8(r2)
    bc9c:	1004c03a 	cmpne	r2,r2,zero
    bca0:	1000071e 	bne	r2,zero,bcc0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    bca4:	000bd240 	call	bd24 <alt_get_errno>
    bca8:	1007883a 	mov	r3,r2
    bcac:	00800584 	movi	r2,22
    bcb0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    bcb4:	00bffa84 	movi	r2,-22
    bcb8:	e0bfff15 	stw	r2,-4(fp)
    bcbc:	00001306 	br	bd0c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    bcc0:	e0fffd17 	ldw	r3,-12(fp)
    bcc4:	e0bffe17 	ldw	r2,-8(fp)
    bcc8:	e0bffb15 	stw	r2,-20(fp)
    bccc:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    bcd0:	e0fffc17 	ldw	r3,-16(fp)
    bcd4:	e0bffb17 	ldw	r2,-20(fp)
    bcd8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    bcdc:	e0bffb17 	ldw	r2,-20(fp)
    bce0:	10c00017 	ldw	r3,0(r2)
    bce4:	e0bffc17 	ldw	r2,-16(fp)
    bce8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    bcec:	e0bffb17 	ldw	r2,-20(fp)
    bcf0:	10c00017 	ldw	r3,0(r2)
    bcf4:	e0bffc17 	ldw	r2,-16(fp)
    bcf8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    bcfc:	e0fffb17 	ldw	r3,-20(fp)
    bd00:	e0bffc17 	ldw	r2,-16(fp)
    bd04:	18800015 	stw	r2,0(r3)

  return 0;  
    bd08:	e03fff15 	stw	zero,-4(fp)
    bd0c:	e0bfff17 	ldw	r2,-4(fp)
}
    bd10:	e037883a 	mov	sp,fp
    bd14:	dfc00117 	ldw	ra,4(sp)
    bd18:	df000017 	ldw	fp,0(sp)
    bd1c:	dec00204 	addi	sp,sp,8
    bd20:	f800283a 	ret

0000bd24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bd24:	defffd04 	addi	sp,sp,-12
    bd28:	dfc00215 	stw	ra,8(sp)
    bd2c:	df000115 	stw	fp,4(sp)
    bd30:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bd34:	00800074 	movhi	r2,1
    bd38:	10877204 	addi	r2,r2,7624
    bd3c:	10800017 	ldw	r2,0(r2)
    bd40:	1005003a 	cmpeq	r2,r2,zero
    bd44:	1000061e 	bne	r2,zero,bd60 <alt_get_errno+0x3c>
    bd48:	00800074 	movhi	r2,1
    bd4c:	10877204 	addi	r2,r2,7624
    bd50:	10800017 	ldw	r2,0(r2)
    bd54:	103ee83a 	callr	r2
    bd58:	e0bfff15 	stw	r2,-4(fp)
    bd5c:	00000306 	br	bd6c <alt_get_errno+0x48>
    bd60:	00800074 	movhi	r2,1
    bd64:	10878204 	addi	r2,r2,7688
    bd68:	e0bfff15 	stw	r2,-4(fp)
    bd6c:	e0bfff17 	ldw	r2,-4(fp)
}
    bd70:	e037883a 	mov	sp,fp
    bd74:	dfc00117 	ldw	ra,4(sp)
    bd78:	df000017 	ldw	fp,0(sp)
    bd7c:	dec00204 	addi	sp,sp,8
    bd80:	f800283a 	ret

0000bd84 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    bd84:	defffd04 	addi	sp,sp,-12
    bd88:	dfc00215 	stw	ra,8(sp)
    bd8c:	df000115 	stw	fp,4(sp)
    bd90:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    bd94:	00bfff04 	movi	r2,-4
    bd98:	00c00074 	movhi	r3,1
    bd9c:	18f39804 	addi	r3,r3,-12704
    bda0:	1885883a 	add	r2,r3,r2
    bda4:	e0bfff15 	stw	r2,-4(fp)
    bda8:	00000606 	br	bdc4 <_do_ctors+0x40>
        (*ctor) (); 
    bdac:	e0bfff17 	ldw	r2,-4(fp)
    bdb0:	10800017 	ldw	r2,0(r2)
    bdb4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    bdb8:	e0bfff17 	ldw	r2,-4(fp)
    bdbc:	10bfff04 	addi	r2,r2,-4
    bdc0:	e0bfff15 	stw	r2,-4(fp)
    bdc4:	e0ffff17 	ldw	r3,-4(fp)
    bdc8:	00800074 	movhi	r2,1
    bdcc:	10b39704 	addi	r2,r2,-12708
    bdd0:	18bff62e 	bgeu	r3,r2,bdac <_do_ctors+0x28>
        (*ctor) (); 
}
    bdd4:	e037883a 	mov	sp,fp
    bdd8:	dfc00117 	ldw	ra,4(sp)
    bddc:	df000017 	ldw	fp,0(sp)
    bde0:	dec00204 	addi	sp,sp,8
    bde4:	f800283a 	ret

0000bde8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    bde8:	defffd04 	addi	sp,sp,-12
    bdec:	dfc00215 	stw	ra,8(sp)
    bdf0:	df000115 	stw	fp,4(sp)
    bdf4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    bdf8:	00bfff04 	movi	r2,-4
    bdfc:	00c00074 	movhi	r3,1
    be00:	18f39804 	addi	r3,r3,-12704
    be04:	1885883a 	add	r2,r3,r2
    be08:	e0bfff15 	stw	r2,-4(fp)
    be0c:	00000606 	br	be28 <_do_dtors+0x40>
        (*dtor) (); 
    be10:	e0bfff17 	ldw	r2,-4(fp)
    be14:	10800017 	ldw	r2,0(r2)
    be18:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    be1c:	e0bfff17 	ldw	r2,-4(fp)
    be20:	10bfff04 	addi	r2,r2,-4
    be24:	e0bfff15 	stw	r2,-4(fp)
    be28:	e0ffff17 	ldw	r3,-4(fp)
    be2c:	00800074 	movhi	r2,1
    be30:	10b39804 	addi	r2,r2,-12704
    be34:	18bff62e 	bgeu	r3,r2,be10 <_do_dtors+0x28>
        (*dtor) (); 
}
    be38:	e037883a 	mov	sp,fp
    be3c:	dfc00117 	ldw	ra,4(sp)
    be40:	df000017 	ldw	fp,0(sp)
    be44:	dec00204 	addi	sp,sp,8
    be48:	f800283a 	ret

0000be4c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    be4c:	defffe04 	addi	sp,sp,-8
    be50:	dfc00115 	stw	ra,4(sp)
    be54:	df000015 	stw	fp,0(sp)
    be58:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    be5c:	0009883a 	mov	r4,zero
    be60:	01440004 	movi	r5,4096
    be64:	000c9c40 	call	c9c4 <alt_icache_flush>
#endif
}
    be68:	e037883a 	mov	sp,fp
    be6c:	dfc00117 	ldw	ra,4(sp)
    be70:	df000017 	ldw	fp,0(sp)
    be74:	dec00204 	addi	sp,sp,8
    be78:	f800283a 	ret

0000be7c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    be7c:	defff904 	addi	sp,sp,-28
    be80:	dfc00615 	stw	ra,24(sp)
    be84:	df000515 	stw	fp,20(sp)
    be88:	df000504 	addi	fp,sp,20
    be8c:	e13ffc15 	stw	r4,-16(fp)
    be90:	e17ffd15 	stw	r5,-12(fp)
    be94:	e1bffe15 	stw	r6,-8(fp)
    be98:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    be9c:	e0800217 	ldw	r2,8(fp)
    bea0:	d8800015 	stw	r2,0(sp)
    bea4:	e13ffc17 	ldw	r4,-16(fp)
    bea8:	e17ffd17 	ldw	r5,-12(fp)
    beac:	e1bffe17 	ldw	r6,-8(fp)
    beb0:	e1ffff17 	ldw	r7,-4(fp)
    beb4:	000c0500 	call	c050 <alt_iic_isr_register>
}  
    beb8:	e037883a 	mov	sp,fp
    bebc:	dfc00117 	ldw	ra,4(sp)
    bec0:	df000017 	ldw	fp,0(sp)
    bec4:	dec00204 	addi	sp,sp,8
    bec8:	f800283a 	ret

0000becc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    becc:	defff904 	addi	sp,sp,-28
    bed0:	df000615 	stw	fp,24(sp)
    bed4:	df000604 	addi	fp,sp,24
    bed8:	e13ffe15 	stw	r4,-8(fp)
    bedc:	e17fff15 	stw	r5,-4(fp)
    bee0:	e0bfff17 	ldw	r2,-4(fp)
    bee4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bee8:	0005303a 	rdctl	r2,status
    beec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bef0:	e0fffb17 	ldw	r3,-20(fp)
    bef4:	00bfff84 	movi	r2,-2
    bef8:	1884703a 	and	r2,r3,r2
    befc:	1001703a 	wrctl	status,r2
  
  return context;
    bf00:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    bf04:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    bf08:	e0fffc17 	ldw	r3,-16(fp)
    bf0c:	00800044 	movi	r2,1
    bf10:	10c4983a 	sll	r2,r2,r3
    bf14:	1007883a 	mov	r3,r2
    bf18:	00800074 	movhi	r2,1
    bf1c:	10878604 	addi	r2,r2,7704
    bf20:	10800017 	ldw	r2,0(r2)
    bf24:	1886b03a 	or	r3,r3,r2
    bf28:	00800074 	movhi	r2,1
    bf2c:	10878604 	addi	r2,r2,7704
    bf30:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    bf34:	00800074 	movhi	r2,1
    bf38:	10878604 	addi	r2,r2,7704
    bf3c:	10800017 	ldw	r2,0(r2)
    bf40:	100170fa 	wrctl	ienable,r2
    bf44:	e0bffd17 	ldw	r2,-12(fp)
    bf48:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bf4c:	e0bffa17 	ldw	r2,-24(fp)
    bf50:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    bf54:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    bf58:	e037883a 	mov	sp,fp
    bf5c:	df000017 	ldw	fp,0(sp)
    bf60:	dec00104 	addi	sp,sp,4
    bf64:	f800283a 	ret

0000bf68 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    bf68:	defff904 	addi	sp,sp,-28
    bf6c:	df000615 	stw	fp,24(sp)
    bf70:	df000604 	addi	fp,sp,24
    bf74:	e13ffe15 	stw	r4,-8(fp)
    bf78:	e17fff15 	stw	r5,-4(fp)
    bf7c:	e0bfff17 	ldw	r2,-4(fp)
    bf80:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bf84:	0005303a 	rdctl	r2,status
    bf88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bf8c:	e0fffb17 	ldw	r3,-20(fp)
    bf90:	00bfff84 	movi	r2,-2
    bf94:	1884703a 	and	r2,r3,r2
    bf98:	1001703a 	wrctl	status,r2
  
  return context;
    bf9c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    bfa0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    bfa4:	e0fffc17 	ldw	r3,-16(fp)
    bfa8:	00800044 	movi	r2,1
    bfac:	10c4983a 	sll	r2,r2,r3
    bfb0:	0084303a 	nor	r2,zero,r2
    bfb4:	1007883a 	mov	r3,r2
    bfb8:	00800074 	movhi	r2,1
    bfbc:	10878604 	addi	r2,r2,7704
    bfc0:	10800017 	ldw	r2,0(r2)
    bfc4:	1886703a 	and	r3,r3,r2
    bfc8:	00800074 	movhi	r2,1
    bfcc:	10878604 	addi	r2,r2,7704
    bfd0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    bfd4:	00800074 	movhi	r2,1
    bfd8:	10878604 	addi	r2,r2,7704
    bfdc:	10800017 	ldw	r2,0(r2)
    bfe0:	100170fa 	wrctl	ienable,r2
    bfe4:	e0bffd17 	ldw	r2,-12(fp)
    bfe8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bfec:	e0bffa17 	ldw	r2,-24(fp)
    bff0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    bff4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    bff8:	e037883a 	mov	sp,fp
    bffc:	df000017 	ldw	fp,0(sp)
    c000:	dec00104 	addi	sp,sp,4
    c004:	f800283a 	ret

0000c008 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    c008:	defffc04 	addi	sp,sp,-16
    c00c:	df000315 	stw	fp,12(sp)
    c010:	df000304 	addi	fp,sp,12
    c014:	e13ffe15 	stw	r4,-8(fp)
    c018:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    c01c:	000530fa 	rdctl	r2,ienable
    c020:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    c024:	e0ffff17 	ldw	r3,-4(fp)
    c028:	00800044 	movi	r2,1
    c02c:	10c4983a 	sll	r2,r2,r3
    c030:	1007883a 	mov	r3,r2
    c034:	e0bffd17 	ldw	r2,-12(fp)
    c038:	1884703a 	and	r2,r3,r2
    c03c:	1004c03a 	cmpne	r2,r2,zero
}
    c040:	e037883a 	mov	sp,fp
    c044:	df000017 	ldw	fp,0(sp)
    c048:	dec00104 	addi	sp,sp,4
    c04c:	f800283a 	ret

0000c050 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    c050:	defff404 	addi	sp,sp,-48
    c054:	dfc00b15 	stw	ra,44(sp)
    c058:	df000a15 	stw	fp,40(sp)
    c05c:	df000a04 	addi	fp,sp,40
    c060:	e13ffb15 	stw	r4,-20(fp)
    c064:	e17ffc15 	stw	r5,-16(fp)
    c068:	e1bffd15 	stw	r6,-12(fp)
    c06c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    c070:	00bffa84 	movi	r2,-22
    c074:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    c078:	e0bffc17 	ldw	r2,-16(fp)
    c07c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    c080:	e0bff917 	ldw	r2,-28(fp)
    c084:	10800808 	cmpgei	r2,r2,32
    c088:	1000291e 	bne	r2,zero,c130 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c08c:	0005303a 	rdctl	r2,status
    c090:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c094:	e0fff717 	ldw	r3,-36(fp)
    c098:	00bfff84 	movi	r2,-2
    c09c:	1884703a 	and	r2,r3,r2
    c0a0:	1001703a 	wrctl	status,r2
  
  return context;
    c0a4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    c0a8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    c0ac:	e0bff917 	ldw	r2,-28(fp)
    c0b0:	00c00074 	movhi	r3,1
    c0b4:	18c79304 	addi	r3,r3,7756
    c0b8:	100490fa 	slli	r2,r2,3
    c0bc:	10c7883a 	add	r3,r2,r3
    c0c0:	e0bffd17 	ldw	r2,-12(fp)
    c0c4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    c0c8:	e0bff917 	ldw	r2,-28(fp)
    c0cc:	00c00074 	movhi	r3,1
    c0d0:	18c79304 	addi	r3,r3,7756
    c0d4:	100490fa 	slli	r2,r2,3
    c0d8:	10c5883a 	add	r2,r2,r3
    c0dc:	10c00104 	addi	r3,r2,4
    c0e0:	e0bffe17 	ldw	r2,-8(fp)
    c0e4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    c0e8:	e0bffd17 	ldw	r2,-12(fp)
    c0ec:	1005003a 	cmpeq	r2,r2,zero
    c0f0:	1000051e 	bne	r2,zero,c108 <alt_iic_isr_register+0xb8>
    c0f4:	e17ff917 	ldw	r5,-28(fp)
    c0f8:	e13ffb17 	ldw	r4,-20(fp)
    c0fc:	000becc0 	call	becc <alt_ic_irq_enable>
    c100:	e0bfff15 	stw	r2,-4(fp)
    c104:	00000406 	br	c118 <alt_iic_isr_register+0xc8>
    c108:	e17ff917 	ldw	r5,-28(fp)
    c10c:	e13ffb17 	ldw	r4,-20(fp)
    c110:	000bf680 	call	bf68 <alt_ic_irq_disable>
    c114:	e0bfff15 	stw	r2,-4(fp)
    c118:	e0bfff17 	ldw	r2,-4(fp)
    c11c:	e0bffa15 	stw	r2,-24(fp)
    c120:	e0bff817 	ldw	r2,-32(fp)
    c124:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c128:	e0bff617 	ldw	r2,-40(fp)
    c12c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    c130:	e0bffa17 	ldw	r2,-24(fp)
}
    c134:	e037883a 	mov	sp,fp
    c138:	dfc00117 	ldw	ra,4(sp)
    c13c:	df000017 	ldw	fp,0(sp)
    c140:	dec00204 	addi	sp,sp,8
    c144:	f800283a 	ret

0000c148 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    c148:	defff804 	addi	sp,sp,-32
    c14c:	dfc00715 	stw	ra,28(sp)
    c150:	df000615 	stw	fp,24(sp)
    c154:	dc000515 	stw	r16,20(sp)
    c158:	df000504 	addi	fp,sp,20
    c15c:	e13ffc15 	stw	r4,-16(fp)
    c160:	e17ffd15 	stw	r5,-12(fp)
    c164:	e1bffe15 	stw	r6,-8(fp)
    c168:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    c16c:	e13ffd17 	ldw	r4,-12(fp)
    c170:	e17ffe17 	ldw	r5,-8(fp)
    c174:	e1bfff17 	ldw	r6,-4(fp)
    c178:	000c3900 	call	c390 <open>
    c17c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    c180:	e0bffb17 	ldw	r2,-20(fp)
    c184:	1004803a 	cmplt	r2,r2,zero
    c188:	10001f1e 	bne	r2,zero,c208 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    c18c:	e13ffb17 	ldw	r4,-20(fp)
    c190:	04000074 	movhi	r16,1
    c194:	8402ef04 	addi	r16,r16,3004
    c198:	01400304 	movi	r5,12
    c19c:	000972c0 	call	972c <__mulsi3>
    c1a0:	1405883a 	add	r2,r2,r16
    c1a4:	10c00017 	ldw	r3,0(r2)
    c1a8:	e0bffc17 	ldw	r2,-16(fp)
    c1ac:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    c1b0:	e13ffb17 	ldw	r4,-20(fp)
    c1b4:	04000074 	movhi	r16,1
    c1b8:	8402ef04 	addi	r16,r16,3004
    c1bc:	01400304 	movi	r5,12
    c1c0:	000972c0 	call	972c <__mulsi3>
    c1c4:	1405883a 	add	r2,r2,r16
    c1c8:	10800104 	addi	r2,r2,4
    c1cc:	10c00017 	ldw	r3,0(r2)
    c1d0:	e0bffc17 	ldw	r2,-16(fp)
    c1d4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    c1d8:	e13ffb17 	ldw	r4,-20(fp)
    c1dc:	04000074 	movhi	r16,1
    c1e0:	8402ef04 	addi	r16,r16,3004
    c1e4:	01400304 	movi	r5,12
    c1e8:	000972c0 	call	972c <__mulsi3>
    c1ec:	1405883a 	add	r2,r2,r16
    c1f0:	10800204 	addi	r2,r2,8
    c1f4:	10c00017 	ldw	r3,0(r2)
    c1f8:	e0bffc17 	ldw	r2,-16(fp)
    c1fc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    c200:	e13ffb17 	ldw	r4,-20(fp)
    c204:	000a6740 	call	a674 <alt_release_fd>
  }
} 
    c208:	e037883a 	mov	sp,fp
    c20c:	dfc00217 	ldw	ra,8(sp)
    c210:	df000117 	ldw	fp,4(sp)
    c214:	dc000017 	ldw	r16,0(sp)
    c218:	dec00304 	addi	sp,sp,12
    c21c:	f800283a 	ret

0000c220 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    c220:	defffb04 	addi	sp,sp,-20
    c224:	dfc00415 	stw	ra,16(sp)
    c228:	df000315 	stw	fp,12(sp)
    c22c:	df000304 	addi	fp,sp,12
    c230:	e13ffd15 	stw	r4,-12(fp)
    c234:	e17ffe15 	stw	r5,-8(fp)
    c238:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    c23c:	01000074 	movhi	r4,1
    c240:	2102f204 	addi	r4,r4,3016
    c244:	e17ffd17 	ldw	r5,-12(fp)
    c248:	01800044 	movi	r6,1
    c24c:	01c07fc4 	movi	r7,511
    c250:	000c1480 	call	c148 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    c254:	01000074 	movhi	r4,1
    c258:	2102ef04 	addi	r4,r4,3004
    c25c:	e17ffe17 	ldw	r5,-8(fp)
    c260:	000d883a 	mov	r6,zero
    c264:	01c07fc4 	movi	r7,511
    c268:	000c1480 	call	c148 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    c26c:	01000074 	movhi	r4,1
    c270:	2102f504 	addi	r4,r4,3028
    c274:	e17fff17 	ldw	r5,-4(fp)
    c278:	01800044 	movi	r6,1
    c27c:	01c07fc4 	movi	r7,511
    c280:	000c1480 	call	c148 <alt_open_fd>
}  
    c284:	e037883a 	mov	sp,fp
    c288:	dfc00117 	ldw	ra,4(sp)
    c28c:	df000017 	ldw	fp,0(sp)
    c290:	dec00204 	addi	sp,sp,8
    c294:	f800283a 	ret

0000c298 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    c298:	defffa04 	addi	sp,sp,-24
    c29c:	dfc00515 	stw	ra,20(sp)
    c2a0:	df000415 	stw	fp,16(sp)
    c2a4:	dc000315 	stw	r16,12(sp)
    c2a8:	df000304 	addi	fp,sp,12
    c2ac:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    c2b0:	e0bffe17 	ldw	r2,-8(fp)
    c2b4:	10800217 	ldw	r2,8(r2)
    c2b8:	10d00034 	orhi	r3,r2,16384
    c2bc:	e0bffe17 	ldw	r2,-8(fp)
    c2c0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c2c4:	e03ffd15 	stw	zero,-12(fp)
    c2c8:	00002306 	br	c358 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c2cc:	e13ffd17 	ldw	r4,-12(fp)
    c2d0:	04000074 	movhi	r16,1
    c2d4:	8402ef04 	addi	r16,r16,3004
    c2d8:	01400304 	movi	r5,12
    c2dc:	000972c0 	call	972c <__mulsi3>
    c2e0:	1405883a 	add	r2,r2,r16
    c2e4:	10c00017 	ldw	r3,0(r2)
    c2e8:	e0bffe17 	ldw	r2,-8(fp)
    c2ec:	10800017 	ldw	r2,0(r2)
    c2f0:	1880161e 	bne	r3,r2,c34c <alt_file_locked+0xb4>
    c2f4:	e13ffd17 	ldw	r4,-12(fp)
    c2f8:	04000074 	movhi	r16,1
    c2fc:	8402ef04 	addi	r16,r16,3004
    c300:	01400304 	movi	r5,12
    c304:	000972c0 	call	972c <__mulsi3>
    c308:	1405883a 	add	r2,r2,r16
    c30c:	10800204 	addi	r2,r2,8
    c310:	10800017 	ldw	r2,0(r2)
    c314:	1004403a 	cmpge	r2,r2,zero
    c318:	10000c1e 	bne	r2,zero,c34c <alt_file_locked+0xb4>
    c31c:	e13ffd17 	ldw	r4,-12(fp)
    c320:	01400304 	movi	r5,12
    c324:	000972c0 	call	972c <__mulsi3>
    c328:	1007883a 	mov	r3,r2
    c32c:	00800074 	movhi	r2,1
    c330:	1082ef04 	addi	r2,r2,3004
    c334:	1887883a 	add	r3,r3,r2
    c338:	e0bffe17 	ldw	r2,-8(fp)
    c33c:	18800326 	beq	r3,r2,c34c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    c340:	00bffcc4 	movi	r2,-13
    c344:	e0bfff15 	stw	r2,-4(fp)
    c348:	00000a06 	br	c374 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c34c:	e0bffd17 	ldw	r2,-12(fp)
    c350:	10800044 	addi	r2,r2,1
    c354:	e0bffd15 	stw	r2,-12(fp)
    c358:	00800074 	movhi	r2,1
    c35c:	10877104 	addi	r2,r2,7620
    c360:	10800017 	ldw	r2,0(r2)
    c364:	1007883a 	mov	r3,r2
    c368:	e0bffd17 	ldw	r2,-12(fp)
    c36c:	18bfd72e 	bgeu	r3,r2,c2cc <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c370:	e03fff15 	stw	zero,-4(fp)
    c374:	e0bfff17 	ldw	r2,-4(fp)
}
    c378:	e037883a 	mov	sp,fp
    c37c:	dfc00217 	ldw	ra,8(sp)
    c380:	df000117 	ldw	fp,4(sp)
    c384:	dc000017 	ldw	r16,0(sp)
    c388:	dec00304 	addi	sp,sp,12
    c38c:	f800283a 	ret

0000c390 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c390:	defff404 	addi	sp,sp,-48
    c394:	dfc00b15 	stw	ra,44(sp)
    c398:	df000a15 	stw	fp,40(sp)
    c39c:	df000a04 	addi	fp,sp,40
    c3a0:	e13ffb15 	stw	r4,-20(fp)
    c3a4:	e17ffc15 	stw	r5,-16(fp)
    c3a8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    c3ac:	00bfffc4 	movi	r2,-1
    c3b0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    c3b4:	00bffb44 	movi	r2,-19
    c3b8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    c3bc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    c3c0:	e13ffb17 	ldw	r4,-20(fp)
    c3c4:	01400074 	movhi	r5,1
    c3c8:	29476f04 	addi	r5,r5,7612
    c3cc:	000c7400 	call	c740 <alt_find_dev>
    c3d0:	e0bffa15 	stw	r2,-24(fp)
    c3d4:	e0bffa17 	ldw	r2,-24(fp)
    c3d8:	1004c03a 	cmpne	r2,r2,zero
    c3dc:	1000051e 	bne	r2,zero,c3f4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    c3e0:	e13ffb17 	ldw	r4,-20(fp)
    c3e4:	000c7d40 	call	c7d4 <alt_find_file>
    c3e8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    c3ec:	00800044 	movi	r2,1
    c3f0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    c3f4:	e0bffa17 	ldw	r2,-24(fp)
    c3f8:	1005003a 	cmpeq	r2,r2,zero
    c3fc:	1000311e 	bne	r2,zero,c4c4 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    c400:	e13ffa17 	ldw	r4,-24(fp)
    c404:	000c8f40 	call	c8f4 <alt_get_fd>
    c408:	e0bff815 	stw	r2,-32(fp)
    c40c:	e0bff817 	ldw	r2,-32(fp)
    c410:	1004403a 	cmpge	r2,r2,zero
    c414:	1000031e 	bne	r2,zero,c424 <open+0x94>
    {
      status = index;
    c418:	e0bff817 	ldw	r2,-32(fp)
    c41c:	e0bff715 	stw	r2,-36(fp)
    c420:	00002a06 	br	c4cc <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    c424:	e13ff817 	ldw	r4,-32(fp)
    c428:	01400304 	movi	r5,12
    c42c:	000972c0 	call	972c <__mulsi3>
    c430:	1007883a 	mov	r3,r2
    c434:	00800074 	movhi	r2,1
    c438:	1082ef04 	addi	r2,r2,3004
    c43c:	1885883a 	add	r2,r3,r2
    c440:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    c444:	e0fffc17 	ldw	r3,-16(fp)
    c448:	00900034 	movhi	r2,16384
    c44c:	10bfffc4 	addi	r2,r2,-1
    c450:	1886703a 	and	r3,r3,r2
    c454:	e0bff917 	ldw	r2,-28(fp)
    c458:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    c45c:	e0bff617 	ldw	r2,-40(fp)
    c460:	1004c03a 	cmpne	r2,r2,zero
    c464:	1000061e 	bne	r2,zero,c480 <open+0xf0>
    c468:	e13ff917 	ldw	r4,-28(fp)
    c46c:	000c2980 	call	c298 <alt_file_locked>
    c470:	e0bff715 	stw	r2,-36(fp)
    c474:	e0bff717 	ldw	r2,-36(fp)
    c478:	1004803a 	cmplt	r2,r2,zero
    c47c:	1000131e 	bne	r2,zero,c4cc <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    c480:	e0bffa17 	ldw	r2,-24(fp)
    c484:	10800317 	ldw	r2,12(r2)
    c488:	1005003a 	cmpeq	r2,r2,zero
    c48c:	1000091e 	bne	r2,zero,c4b4 <open+0x124>
    c490:	e0bffa17 	ldw	r2,-24(fp)
    c494:	10800317 	ldw	r2,12(r2)
    c498:	e13ff917 	ldw	r4,-28(fp)
    c49c:	e17ffb17 	ldw	r5,-20(fp)
    c4a0:	e1bffc17 	ldw	r6,-16(fp)
    c4a4:	e1fffd17 	ldw	r7,-12(fp)
    c4a8:	103ee83a 	callr	r2
    c4ac:	e0bfff15 	stw	r2,-4(fp)
    c4b0:	00000106 	br	c4b8 <open+0x128>
    c4b4:	e03fff15 	stw	zero,-4(fp)
    c4b8:	e0bfff17 	ldw	r2,-4(fp)
    c4bc:	e0bff715 	stw	r2,-36(fp)
    c4c0:	00000206 	br	c4cc <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    c4c4:	00bffb44 	movi	r2,-19
    c4c8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    c4cc:	e0bff717 	ldw	r2,-36(fp)
    c4d0:	1004403a 	cmpge	r2,r2,zero
    c4d4:	1000091e 	bne	r2,zero,c4fc <open+0x16c>
  {
    alt_release_fd (index);  
    c4d8:	e13ff817 	ldw	r4,-32(fp)
    c4dc:	000a6740 	call	a674 <alt_release_fd>
    ALT_ERRNO = -status;
    c4e0:	000c51c0 	call	c51c <alt_get_errno>
    c4e4:	e0fff717 	ldw	r3,-36(fp)
    c4e8:	00c7c83a 	sub	r3,zero,r3
    c4ec:	10c00015 	stw	r3,0(r2)
    return -1;
    c4f0:	00bfffc4 	movi	r2,-1
    c4f4:	e0bffe15 	stw	r2,-8(fp)
    c4f8:	00000206 	br	c504 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    c4fc:	e0bff817 	ldw	r2,-32(fp)
    c500:	e0bffe15 	stw	r2,-8(fp)
    c504:	e0bffe17 	ldw	r2,-8(fp)
}
    c508:	e037883a 	mov	sp,fp
    c50c:	dfc00117 	ldw	ra,4(sp)
    c510:	df000017 	ldw	fp,0(sp)
    c514:	dec00204 	addi	sp,sp,8
    c518:	f800283a 	ret

0000c51c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c51c:	defffd04 	addi	sp,sp,-12
    c520:	dfc00215 	stw	ra,8(sp)
    c524:	df000115 	stw	fp,4(sp)
    c528:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c52c:	00800074 	movhi	r2,1
    c530:	10877204 	addi	r2,r2,7624
    c534:	10800017 	ldw	r2,0(r2)
    c538:	1005003a 	cmpeq	r2,r2,zero
    c53c:	1000061e 	bne	r2,zero,c558 <alt_get_errno+0x3c>
    c540:	00800074 	movhi	r2,1
    c544:	10877204 	addi	r2,r2,7624
    c548:	10800017 	ldw	r2,0(r2)
    c54c:	103ee83a 	callr	r2
    c550:	e0bfff15 	stw	r2,-4(fp)
    c554:	00000306 	br	c564 <alt_get_errno+0x48>
    c558:	00800074 	movhi	r2,1
    c55c:	10878204 	addi	r2,r2,7688
    c560:	e0bfff15 	stw	r2,-4(fp)
    c564:	e0bfff17 	ldw	r2,-4(fp)
}
    c568:	e037883a 	mov	sp,fp
    c56c:	dfc00117 	ldw	ra,4(sp)
    c570:	df000017 	ldw	fp,0(sp)
    c574:	dec00204 	addi	sp,sp,8
    c578:	f800283a 	ret

0000c57c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    c57c:	defffa04 	addi	sp,sp,-24
    c580:	df000515 	stw	fp,20(sp)
    c584:	df000504 	addi	fp,sp,20
    c588:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c58c:	0005303a 	rdctl	r2,status
    c590:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c594:	e0fffd17 	ldw	r3,-12(fp)
    c598:	00bfff84 	movi	r2,-2
    c59c:	1884703a 	and	r2,r3,r2
    c5a0:	1001703a 	wrctl	status,r2
  
  return context;
    c5a4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    c5a8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    c5ac:	e0bfff17 	ldw	r2,-4(fp)
    c5b0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    c5b4:	e0bffc17 	ldw	r2,-16(fp)
    c5b8:	10c00017 	ldw	r3,0(r2)
    c5bc:	e0bffc17 	ldw	r2,-16(fp)
    c5c0:	10800117 	ldw	r2,4(r2)
    c5c4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    c5c8:	e0bffc17 	ldw	r2,-16(fp)
    c5cc:	10c00117 	ldw	r3,4(r2)
    c5d0:	e0bffc17 	ldw	r2,-16(fp)
    c5d4:	10800017 	ldw	r2,0(r2)
    c5d8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    c5dc:	e0fffc17 	ldw	r3,-16(fp)
    c5e0:	e0bffc17 	ldw	r2,-16(fp)
    c5e4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    c5e8:	e0fffc17 	ldw	r3,-16(fp)
    c5ec:	e0bffc17 	ldw	r2,-16(fp)
    c5f0:	18800015 	stw	r2,0(r3)
    c5f4:	e0bffe17 	ldw	r2,-8(fp)
    c5f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c5fc:	e0bffb17 	ldw	r2,-20(fp)
    c600:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    c604:	e037883a 	mov	sp,fp
    c608:	df000017 	ldw	fp,0(sp)
    c60c:	dec00104 	addi	sp,sp,4
    c610:	f800283a 	ret

0000c614 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    c614:	defffb04 	addi	sp,sp,-20
    c618:	dfc00415 	stw	ra,16(sp)
    c61c:	df000315 	stw	fp,12(sp)
    c620:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    c624:	d0a00e17 	ldw	r2,-32712(gp)
    c628:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    c62c:	d0a02117 	ldw	r2,-32636(gp)
    c630:	10800044 	addi	r2,r2,1
    c634:	d0a02115 	stw	r2,-32636(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c638:	00003106 	br	c700 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    c63c:	e0bffe17 	ldw	r2,-8(fp)
    c640:	10800017 	ldw	r2,0(r2)
    c644:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    c648:	e0bffe17 	ldw	r2,-8(fp)
    c64c:	10800403 	ldbu	r2,16(r2)
    c650:	10803fcc 	andi	r2,r2,255
    c654:	1005003a 	cmpeq	r2,r2,zero
    c658:	1000051e 	bne	r2,zero,c670 <alt_tick+0x5c>
    c65c:	d0a02117 	ldw	r2,-32636(gp)
    c660:	1004c03a 	cmpne	r2,r2,zero
    c664:	1000021e 	bne	r2,zero,c670 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    c668:	e0bffe17 	ldw	r2,-8(fp)
    c66c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    c670:	e0bffe17 	ldw	r2,-8(fp)
    c674:	10c00217 	ldw	r3,8(r2)
    c678:	d0a02117 	ldw	r2,-32636(gp)
    c67c:	10c01e36 	bltu	r2,r3,c6f8 <alt_tick+0xe4>
    c680:	e0bffe17 	ldw	r2,-8(fp)
    c684:	10800403 	ldbu	r2,16(r2)
    c688:	10803fcc 	andi	r2,r2,255
    c68c:	1004c03a 	cmpne	r2,r2,zero
    c690:	1000191e 	bne	r2,zero,c6f8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    c694:	e0bffe17 	ldw	r2,-8(fp)
    c698:	10c00317 	ldw	r3,12(r2)
    c69c:	e0bffe17 	ldw	r2,-8(fp)
    c6a0:	11000517 	ldw	r4,20(r2)
    c6a4:	183ee83a 	callr	r3
    c6a8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    c6ac:	e0bffd17 	ldw	r2,-12(fp)
    c6b0:	1004c03a 	cmpne	r2,r2,zero
    c6b4:	1000031e 	bne	r2,zero,c6c4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    c6b8:	e13ffe17 	ldw	r4,-8(fp)
    c6bc:	000c57c0 	call	c57c <alt_alarm_stop>
    c6c0:	00000d06 	br	c6f8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    c6c4:	e0bffe17 	ldw	r2,-8(fp)
    c6c8:	10c00217 	ldw	r3,8(r2)
    c6cc:	e0bffd17 	ldw	r2,-12(fp)
    c6d0:	1887883a 	add	r3,r3,r2
    c6d4:	e0bffe17 	ldw	r2,-8(fp)
    c6d8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    c6dc:	e0bffe17 	ldw	r2,-8(fp)
    c6e0:	10c00217 	ldw	r3,8(r2)
    c6e4:	d0a02117 	ldw	r2,-32636(gp)
    c6e8:	1880032e 	bgeu	r3,r2,c6f8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    c6ec:	e0fffe17 	ldw	r3,-8(fp)
    c6f0:	00800044 	movi	r2,1
    c6f4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    c6f8:	e0bfff17 	ldw	r2,-4(fp)
    c6fc:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c700:	d0e00e04 	addi	r3,gp,-32712
    c704:	e0bffe17 	ldw	r2,-8(fp)
    c708:	10ffcc1e 	bne	r2,r3,c63c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    c70c:	e037883a 	mov	sp,fp
    c710:	dfc00117 	ldw	ra,4(sp)
    c714:	df000017 	ldw	fp,0(sp)
    c718:	dec00204 	addi	sp,sp,8
    c71c:	f800283a 	ret

0000c720 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    c720:	deffff04 	addi	sp,sp,-4
    c724:	df000015 	stw	fp,0(sp)
    c728:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c72c:	000170fa 	wrctl	ienable,zero
}
    c730:	e037883a 	mov	sp,fp
    c734:	df000017 	ldw	fp,0(sp)
    c738:	dec00104 	addi	sp,sp,4
    c73c:	f800283a 	ret

0000c740 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c740:	defff904 	addi	sp,sp,-28
    c744:	dfc00615 	stw	ra,24(sp)
    c748:	df000515 	stw	fp,20(sp)
    c74c:	df000504 	addi	fp,sp,20
    c750:	e13ffd15 	stw	r4,-12(fp)
    c754:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c758:	e0bffe17 	ldw	r2,-8(fp)
    c75c:	10800017 	ldw	r2,0(r2)
    c760:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c764:	e13ffd17 	ldw	r4,-12(fp)
    c768:	00004dc0 	call	4dc <strlen>
    c76c:	10800044 	addi	r2,r2,1
    c770:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c774:	00000d06 	br	c7ac <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c778:	e0bffc17 	ldw	r2,-16(fp)
    c77c:	11000217 	ldw	r4,8(r2)
    c780:	e1bffb17 	ldw	r6,-20(fp)
    c784:	e17ffd17 	ldw	r5,-12(fp)
    c788:	000caa00 	call	caa0 <memcmp>
    c78c:	1004c03a 	cmpne	r2,r2,zero
    c790:	1000031e 	bne	r2,zero,c7a0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c794:	e0bffc17 	ldw	r2,-16(fp)
    c798:	e0bfff15 	stw	r2,-4(fp)
    c79c:	00000706 	br	c7bc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c7a0:	e0bffc17 	ldw	r2,-16(fp)
    c7a4:	10800017 	ldw	r2,0(r2)
    c7a8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c7ac:	e0fffe17 	ldw	r3,-8(fp)
    c7b0:	e0bffc17 	ldw	r2,-16(fp)
    c7b4:	10fff01e 	bne	r2,r3,c778 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    c7b8:	e03fff15 	stw	zero,-4(fp)
    c7bc:	e0bfff17 	ldw	r2,-4(fp)
}
    c7c0:	e037883a 	mov	sp,fp
    c7c4:	dfc00117 	ldw	ra,4(sp)
    c7c8:	df000017 	ldw	fp,0(sp)
    c7cc:	dec00204 	addi	sp,sp,8
    c7d0:	f800283a 	ret

0000c7d4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    c7d4:	defffa04 	addi	sp,sp,-24
    c7d8:	dfc00515 	stw	ra,20(sp)
    c7dc:	df000415 	stw	fp,16(sp)
    c7e0:	df000404 	addi	fp,sp,16
    c7e4:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    c7e8:	00800074 	movhi	r2,1
    c7ec:	10876d04 	addi	r2,r2,7604
    c7f0:	10800017 	ldw	r2,0(r2)
    c7f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c7f8:	00003306 	br	c8c8 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    c7fc:	e0bffd17 	ldw	r2,-12(fp)
    c800:	11000217 	ldw	r4,8(r2)
    c804:	00004dc0 	call	4dc <strlen>
    c808:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    c80c:	e0bffd17 	ldw	r2,-12(fp)
    c810:	10c00217 	ldw	r3,8(r2)
    c814:	e0bffc17 	ldw	r2,-16(fp)
    c818:	1885883a 	add	r2,r3,r2
    c81c:	10bfffc4 	addi	r2,r2,-1
    c820:	10800003 	ldbu	r2,0(r2)
    c824:	10803fcc 	andi	r2,r2,255
    c828:	1080201c 	xori	r2,r2,128
    c82c:	10bfe004 	addi	r2,r2,-128
    c830:	10800bd8 	cmpnei	r2,r2,47
    c834:	1000031e 	bne	r2,zero,c844 <alt_find_file+0x70>
    {
      len -= 1;
    c838:	e0bffc17 	ldw	r2,-16(fp)
    c83c:	10bfffc4 	addi	r2,r2,-1
    c840:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c844:	e0bffc17 	ldw	r2,-16(fp)
    c848:	1007883a 	mov	r3,r2
    c84c:	e0bffe17 	ldw	r2,-8(fp)
    c850:	1885883a 	add	r2,r3,r2
    c854:	10800003 	ldbu	r2,0(r2)
    c858:	10803fcc 	andi	r2,r2,255
    c85c:	1080201c 	xori	r2,r2,128
    c860:	10bfe004 	addi	r2,r2,-128
    c864:	10800be0 	cmpeqi	r2,r2,47
    c868:	10000a1e 	bne	r2,zero,c894 <alt_find_file+0xc0>
    c86c:	e0bffc17 	ldw	r2,-16(fp)
    c870:	1007883a 	mov	r3,r2
    c874:	e0bffe17 	ldw	r2,-8(fp)
    c878:	1885883a 	add	r2,r3,r2
    c87c:	10800003 	ldbu	r2,0(r2)
    c880:	10803fcc 	andi	r2,r2,255
    c884:	1080201c 	xori	r2,r2,128
    c888:	10bfe004 	addi	r2,r2,-128
    c88c:	1004c03a 	cmpne	r2,r2,zero
    c890:	10000a1e 	bne	r2,zero,c8bc <alt_find_file+0xe8>
    c894:	e0bffd17 	ldw	r2,-12(fp)
    c898:	11000217 	ldw	r4,8(r2)
    c89c:	e1bffc17 	ldw	r6,-16(fp)
    c8a0:	e17ffe17 	ldw	r5,-8(fp)
    c8a4:	000caa00 	call	caa0 <memcmp>
    c8a8:	1004c03a 	cmpne	r2,r2,zero
    c8ac:	1000031e 	bne	r2,zero,c8bc <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    c8b0:	e0bffd17 	ldw	r2,-12(fp)
    c8b4:	e0bfff15 	stw	r2,-4(fp)
    c8b8:	00000806 	br	c8dc <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    c8bc:	e0bffd17 	ldw	r2,-12(fp)
    c8c0:	10800017 	ldw	r2,0(r2)
    c8c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c8c8:	00c00074 	movhi	r3,1
    c8cc:	18c76d04 	addi	r3,r3,7604
    c8d0:	e0bffd17 	ldw	r2,-12(fp)
    c8d4:	10ffc91e 	bne	r2,r3,c7fc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    c8d8:	e03fff15 	stw	zero,-4(fp)
    c8dc:	e0bfff17 	ldw	r2,-4(fp)
}
    c8e0:	e037883a 	mov	sp,fp
    c8e4:	dfc00117 	ldw	ra,4(sp)
    c8e8:	df000017 	ldw	fp,0(sp)
    c8ec:	dec00204 	addi	sp,sp,8
    c8f0:	f800283a 	ret

0000c8f4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    c8f4:	defffa04 	addi	sp,sp,-24
    c8f8:	dfc00515 	stw	ra,20(sp)
    c8fc:	df000415 	stw	fp,16(sp)
    c900:	dc000315 	stw	r16,12(sp)
    c904:	df000304 	addi	fp,sp,12
    c908:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    c90c:	00bffa04 	movi	r2,-24
    c910:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c914:	e03ffe15 	stw	zero,-8(fp)
    c918:	00002006 	br	c99c <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    c91c:	e13ffe17 	ldw	r4,-8(fp)
    c920:	04000074 	movhi	r16,1
    c924:	8402ef04 	addi	r16,r16,3004
    c928:	01400304 	movi	r5,12
    c92c:	000972c0 	call	972c <__mulsi3>
    c930:	1405883a 	add	r2,r2,r16
    c934:	10800017 	ldw	r2,0(r2)
    c938:	1004c03a 	cmpne	r2,r2,zero
    c93c:	1000141e 	bne	r2,zero,c990 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    c940:	e13ffe17 	ldw	r4,-8(fp)
    c944:	04000074 	movhi	r16,1
    c948:	8402ef04 	addi	r16,r16,3004
    c94c:	01400304 	movi	r5,12
    c950:	000972c0 	call	972c <__mulsi3>
    c954:	1407883a 	add	r3,r2,r16
    c958:	e0bfff17 	ldw	r2,-4(fp)
    c95c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    c960:	00800074 	movhi	r2,1
    c964:	10877104 	addi	r2,r2,7620
    c968:	10c00017 	ldw	r3,0(r2)
    c96c:	e0bffe17 	ldw	r2,-8(fp)
    c970:	1880040e 	bge	r3,r2,c984 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    c974:	00c00074 	movhi	r3,1
    c978:	18c77104 	addi	r3,r3,7620
    c97c:	e0bffe17 	ldw	r2,-8(fp)
    c980:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    c984:	e0bffe17 	ldw	r2,-8(fp)
    c988:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    c98c:	00000606 	br	c9a8 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c990:	e0bffe17 	ldw	r2,-8(fp)
    c994:	10800044 	addi	r2,r2,1
    c998:	e0bffe15 	stw	r2,-8(fp)
    c99c:	e0bffe17 	ldw	r2,-8(fp)
    c9a0:	10800810 	cmplti	r2,r2,32
    c9a4:	103fdd1e 	bne	r2,zero,c91c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    c9a8:	e0bffd17 	ldw	r2,-12(fp)
}
    c9ac:	e037883a 	mov	sp,fp
    c9b0:	dfc00217 	ldw	ra,8(sp)
    c9b4:	df000117 	ldw	fp,4(sp)
    c9b8:	dc000017 	ldw	r16,0(sp)
    c9bc:	dec00304 	addi	sp,sp,12
    c9c0:	f800283a 	ret

0000c9c4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    c9c4:	defffb04 	addi	sp,sp,-20
    c9c8:	df000415 	stw	fp,16(sp)
    c9cc:	df000404 	addi	fp,sp,16
    c9d0:	e13ffe15 	stw	r4,-8(fp)
    c9d4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    c9d8:	e0bfff17 	ldw	r2,-4(fp)
    c9dc:	10840070 	cmpltui	r2,r2,4097
    c9e0:	1000021e 	bne	r2,zero,c9ec <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    c9e4:	00840004 	movi	r2,4096
    c9e8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    c9ec:	e0fffe17 	ldw	r3,-8(fp)
    c9f0:	e0bfff17 	ldw	r2,-4(fp)
    c9f4:	1885883a 	add	r2,r3,r2
    c9f8:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    c9fc:	e0bffe17 	ldw	r2,-8(fp)
    ca00:	e0bffd15 	stw	r2,-12(fp)
    ca04:	00000506 	br	ca1c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    ca08:	e0bffd17 	ldw	r2,-12(fp)
    ca0c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    ca10:	e0bffd17 	ldw	r2,-12(fp)
    ca14:	10800804 	addi	r2,r2,32
    ca18:	e0bffd15 	stw	r2,-12(fp)
    ca1c:	e0fffd17 	ldw	r3,-12(fp)
    ca20:	e0bffc17 	ldw	r2,-16(fp)
    ca24:	18bff836 	bltu	r3,r2,ca08 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    ca28:	e0bffe17 	ldw	r2,-8(fp)
    ca2c:	108007cc 	andi	r2,r2,31
    ca30:	1005003a 	cmpeq	r2,r2,zero
    ca34:	1000021e 	bne	r2,zero,ca40 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    ca38:	e0bffd17 	ldw	r2,-12(fp)
    ca3c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    ca40:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    ca44:	e037883a 	mov	sp,fp
    ca48:	df000017 	ldw	fp,0(sp)
    ca4c:	dec00104 	addi	sp,sp,4
    ca50:	f800283a 	ret

0000ca54 <atexit>:
    ca54:	200b883a 	mov	r5,r4
    ca58:	000d883a 	mov	r6,zero
    ca5c:	0009883a 	mov	r4,zero
    ca60:	000f883a 	mov	r7,zero
    ca64:	000cb141 	jmpi	cb14 <__register_exitproc>

0000ca68 <exit>:
    ca68:	defffe04 	addi	sp,sp,-8
    ca6c:	000b883a 	mov	r5,zero
    ca70:	dc000015 	stw	r16,0(sp)
    ca74:	dfc00115 	stw	ra,4(sp)
    ca78:	2021883a 	mov	r16,r4
    ca7c:	000cc4c0 	call	cc4c <__call_exitprocs>
    ca80:	00800074 	movhi	r2,1
    ca84:	10876804 	addi	r2,r2,7584
    ca88:	11000017 	ldw	r4,0(r2)
    ca8c:	20800f17 	ldw	r2,60(r4)
    ca90:	10000126 	beq	r2,zero,ca98 <exit+0x30>
    ca94:	103ee83a 	callr	r2
    ca98:	8009883a 	mov	r4,r16
    ca9c:	000ce3c0 	call	ce3c <_exit>

0000caa0 <memcmp>:
    caa0:	00c000c4 	movi	r3,3
    caa4:	1980032e 	bgeu	r3,r6,cab4 <memcmp+0x14>
    caa8:	2144b03a 	or	r2,r4,r5
    caac:	10c4703a 	and	r2,r2,r3
    cab0:	10000f26 	beq	r2,zero,caf0 <memcmp+0x50>
    cab4:	31ffffc4 	addi	r7,r6,-1
    cab8:	3000061e 	bne	r6,zero,cad4 <memcmp+0x34>
    cabc:	00000a06 	br	cae8 <memcmp+0x48>
    cac0:	39ffffc4 	addi	r7,r7,-1
    cac4:	00bfffc4 	movi	r2,-1
    cac8:	21000044 	addi	r4,r4,1
    cacc:	29400044 	addi	r5,r5,1
    cad0:	38800526 	beq	r7,r2,cae8 <memcmp+0x48>
    cad4:	20c00003 	ldbu	r3,0(r4)
    cad8:	28800003 	ldbu	r2,0(r5)
    cadc:	18bff826 	beq	r3,r2,cac0 <memcmp+0x20>
    cae0:	1885c83a 	sub	r2,r3,r2
    cae4:	f800283a 	ret
    cae8:	0005883a 	mov	r2,zero
    caec:	f800283a 	ret
    caf0:	180f883a 	mov	r7,r3
    caf4:	20c00017 	ldw	r3,0(r4)
    caf8:	28800017 	ldw	r2,0(r5)
    cafc:	18bfed1e 	bne	r3,r2,cab4 <memcmp+0x14>
    cb00:	31bfff04 	addi	r6,r6,-4
    cb04:	21000104 	addi	r4,r4,4
    cb08:	29400104 	addi	r5,r5,4
    cb0c:	39bff936 	bltu	r7,r6,caf4 <memcmp+0x54>
    cb10:	003fe806 	br	cab4 <memcmp+0x14>

0000cb14 <__register_exitproc>:
    cb14:	defffa04 	addi	sp,sp,-24
    cb18:	00800074 	movhi	r2,1
    cb1c:	10876804 	addi	r2,r2,7584
    cb20:	dc000015 	stw	r16,0(sp)
    cb24:	14000017 	ldw	r16,0(r2)
    cb28:	dd000415 	stw	r20,16(sp)
    cb2c:	2829883a 	mov	r20,r5
    cb30:	81405217 	ldw	r5,328(r16)
    cb34:	dcc00315 	stw	r19,12(sp)
    cb38:	dc800215 	stw	r18,8(sp)
    cb3c:	dc400115 	stw	r17,4(sp)
    cb40:	dfc00515 	stw	ra,20(sp)
    cb44:	2023883a 	mov	r17,r4
    cb48:	3027883a 	mov	r19,r6
    cb4c:	3825883a 	mov	r18,r7
    cb50:	28002526 	beq	r5,zero,cbe8 <__register_exitproc+0xd4>
    cb54:	29000117 	ldw	r4,4(r5)
    cb58:	008007c4 	movi	r2,31
    cb5c:	11002716 	blt	r2,r4,cbfc <__register_exitproc+0xe8>
    cb60:	8800101e 	bne	r17,zero,cba4 <__register_exitproc+0x90>
    cb64:	2105883a 	add	r2,r4,r4
    cb68:	1085883a 	add	r2,r2,r2
    cb6c:	20c00044 	addi	r3,r4,1
    cb70:	1145883a 	add	r2,r2,r5
    cb74:	0009883a 	mov	r4,zero
    cb78:	15000215 	stw	r20,8(r2)
    cb7c:	28c00115 	stw	r3,4(r5)
    cb80:	2005883a 	mov	r2,r4
    cb84:	dfc00517 	ldw	ra,20(sp)
    cb88:	dd000417 	ldw	r20,16(sp)
    cb8c:	dcc00317 	ldw	r19,12(sp)
    cb90:	dc800217 	ldw	r18,8(sp)
    cb94:	dc400117 	ldw	r17,4(sp)
    cb98:	dc000017 	ldw	r16,0(sp)
    cb9c:	dec00604 	addi	sp,sp,24
    cba0:	f800283a 	ret
    cba4:	29802204 	addi	r6,r5,136
    cba8:	00800044 	movi	r2,1
    cbac:	110e983a 	sll	r7,r2,r4
    cbb0:	30c04017 	ldw	r3,256(r6)
    cbb4:	2105883a 	add	r2,r4,r4
    cbb8:	1085883a 	add	r2,r2,r2
    cbbc:	1185883a 	add	r2,r2,r6
    cbc0:	19c6b03a 	or	r3,r3,r7
    cbc4:	14802015 	stw	r18,128(r2)
    cbc8:	14c00015 	stw	r19,0(r2)
    cbcc:	00800084 	movi	r2,2
    cbd0:	30c04015 	stw	r3,256(r6)
    cbd4:	88bfe31e 	bne	r17,r2,cb64 <__register_exitproc+0x50>
    cbd8:	30804117 	ldw	r2,260(r6)
    cbdc:	11c4b03a 	or	r2,r2,r7
    cbe0:	30804115 	stw	r2,260(r6)
    cbe4:	003fdf06 	br	cb64 <__register_exitproc+0x50>
    cbe8:	00800074 	movhi	r2,1
    cbec:	1087d304 	addi	r2,r2,8012
    cbf0:	100b883a 	mov	r5,r2
    cbf4:	80805215 	stw	r2,328(r16)
    cbf8:	003fd606 	br	cb54 <__register_exitproc+0x40>
    cbfc:	00800034 	movhi	r2,0
    cc00:	10800004 	addi	r2,r2,0
    cc04:	1000021e 	bne	r2,zero,cc10 <__register_exitproc+0xfc>
    cc08:	013fffc4 	movi	r4,-1
    cc0c:	003fdc06 	br	cb80 <__register_exitproc+0x6c>
    cc10:	01006404 	movi	r4,400
    cc14:	103ee83a 	callr	r2
    cc18:	1007883a 	mov	r3,r2
    cc1c:	103ffa26 	beq	r2,zero,cc08 <__register_exitproc+0xf4>
    cc20:	80805217 	ldw	r2,328(r16)
    cc24:	180b883a 	mov	r5,r3
    cc28:	18000115 	stw	zero,4(r3)
    cc2c:	18800015 	stw	r2,0(r3)
    cc30:	80c05215 	stw	r3,328(r16)
    cc34:	18006215 	stw	zero,392(r3)
    cc38:	18006315 	stw	zero,396(r3)
    cc3c:	0009883a 	mov	r4,zero
    cc40:	883fc826 	beq	r17,zero,cb64 <__register_exitproc+0x50>
    cc44:	003fd706 	br	cba4 <__register_exitproc+0x90>

0000cc48 <register_fini>:
    cc48:	f800283a 	ret

0000cc4c <__call_exitprocs>:
    cc4c:	00800074 	movhi	r2,1
    cc50:	10876804 	addi	r2,r2,7584
    cc54:	10800017 	ldw	r2,0(r2)
    cc58:	defff304 	addi	sp,sp,-52
    cc5c:	df000b15 	stw	fp,44(sp)
    cc60:	d8800115 	stw	r2,4(sp)
    cc64:	00800034 	movhi	r2,0
    cc68:	10800004 	addi	r2,r2,0
    cc6c:	1005003a 	cmpeq	r2,r2,zero
    cc70:	d8800215 	stw	r2,8(sp)
    cc74:	d8800117 	ldw	r2,4(sp)
    cc78:	dd400815 	stw	r21,32(sp)
    cc7c:	dd000715 	stw	r20,28(sp)
    cc80:	10805204 	addi	r2,r2,328
    cc84:	dfc00c15 	stw	ra,48(sp)
    cc88:	ddc00a15 	stw	r23,40(sp)
    cc8c:	dd800915 	stw	r22,36(sp)
    cc90:	dcc00615 	stw	r19,24(sp)
    cc94:	dc800515 	stw	r18,20(sp)
    cc98:	dc400415 	stw	r17,16(sp)
    cc9c:	dc000315 	stw	r16,12(sp)
    cca0:	282b883a 	mov	r21,r5
    cca4:	2039883a 	mov	fp,r4
    cca8:	d8800015 	stw	r2,0(sp)
    ccac:	2829003a 	cmpeq	r20,r5,zero
    ccb0:	d8800117 	ldw	r2,4(sp)
    ccb4:	14405217 	ldw	r17,328(r2)
    ccb8:	88001026 	beq	r17,zero,ccfc <__call_exitprocs+0xb0>
    ccbc:	ddc00017 	ldw	r23,0(sp)
    ccc0:	88800117 	ldw	r2,4(r17)
    ccc4:	8c802204 	addi	r18,r17,136
    ccc8:	143fffc4 	addi	r16,r2,-1
    cccc:	80000916 	blt	r16,zero,ccf4 <__call_exitprocs+0xa8>
    ccd0:	05bfffc4 	movi	r22,-1
    ccd4:	a000151e 	bne	r20,zero,cd2c <__call_exitprocs+0xe0>
    ccd8:	8409883a 	add	r4,r16,r16
    ccdc:	2105883a 	add	r2,r4,r4
    cce0:	1485883a 	add	r2,r2,r18
    cce4:	10c02017 	ldw	r3,128(r2)
    cce8:	a8c01126 	beq	r21,r3,cd30 <__call_exitprocs+0xe4>
    ccec:	843fffc4 	addi	r16,r16,-1
    ccf0:	85bff81e 	bne	r16,r22,ccd4 <__call_exitprocs+0x88>
    ccf4:	d8800217 	ldw	r2,8(sp)
    ccf8:	10003126 	beq	r2,zero,cdc0 <__call_exitprocs+0x174>
    ccfc:	dfc00c17 	ldw	ra,48(sp)
    cd00:	df000b17 	ldw	fp,44(sp)
    cd04:	ddc00a17 	ldw	r23,40(sp)
    cd08:	dd800917 	ldw	r22,36(sp)
    cd0c:	dd400817 	ldw	r21,32(sp)
    cd10:	dd000717 	ldw	r20,28(sp)
    cd14:	dcc00617 	ldw	r19,24(sp)
    cd18:	dc800517 	ldw	r18,20(sp)
    cd1c:	dc400417 	ldw	r17,16(sp)
    cd20:	dc000317 	ldw	r16,12(sp)
    cd24:	dec00d04 	addi	sp,sp,52
    cd28:	f800283a 	ret
    cd2c:	8409883a 	add	r4,r16,r16
    cd30:	88c00117 	ldw	r3,4(r17)
    cd34:	2105883a 	add	r2,r4,r4
    cd38:	1445883a 	add	r2,r2,r17
    cd3c:	18ffffc4 	addi	r3,r3,-1
    cd40:	11800217 	ldw	r6,8(r2)
    cd44:	1c001526 	beq	r3,r16,cd9c <__call_exitprocs+0x150>
    cd48:	10000215 	stw	zero,8(r2)
    cd4c:	303fe726 	beq	r6,zero,ccec <__call_exitprocs+0xa0>
    cd50:	00c00044 	movi	r3,1
    cd54:	1c06983a 	sll	r3,r3,r16
    cd58:	90804017 	ldw	r2,256(r18)
    cd5c:	8cc00117 	ldw	r19,4(r17)
    cd60:	1884703a 	and	r2,r3,r2
    cd64:	10001426 	beq	r2,zero,cdb8 <__call_exitprocs+0x16c>
    cd68:	90804117 	ldw	r2,260(r18)
    cd6c:	1884703a 	and	r2,r3,r2
    cd70:	10000c1e 	bne	r2,zero,cda4 <__call_exitprocs+0x158>
    cd74:	2105883a 	add	r2,r4,r4
    cd78:	1485883a 	add	r2,r2,r18
    cd7c:	11400017 	ldw	r5,0(r2)
    cd80:	e009883a 	mov	r4,fp
    cd84:	303ee83a 	callr	r6
    cd88:	88800117 	ldw	r2,4(r17)
    cd8c:	98bfc81e 	bne	r19,r2,ccb0 <__call_exitprocs+0x64>
    cd90:	b8800017 	ldw	r2,0(r23)
    cd94:	147fd526 	beq	r2,r17,ccec <__call_exitprocs+0xa0>
    cd98:	003fc506 	br	ccb0 <__call_exitprocs+0x64>
    cd9c:	8c000115 	stw	r16,4(r17)
    cda0:	003fea06 	br	cd4c <__call_exitprocs+0x100>
    cda4:	2105883a 	add	r2,r4,r4
    cda8:	1485883a 	add	r2,r2,r18
    cdac:	11000017 	ldw	r4,0(r2)
    cdb0:	303ee83a 	callr	r6
    cdb4:	003ff406 	br	cd88 <__call_exitprocs+0x13c>
    cdb8:	303ee83a 	callr	r6
    cdbc:	003ff206 	br	cd88 <__call_exitprocs+0x13c>
    cdc0:	88800117 	ldw	r2,4(r17)
    cdc4:	1000081e 	bne	r2,zero,cde8 <__call_exitprocs+0x19c>
    cdc8:	89000017 	ldw	r4,0(r17)
    cdcc:	20000726 	beq	r4,zero,cdec <__call_exitprocs+0x1a0>
    cdd0:	b9000015 	stw	r4,0(r23)
    cdd4:	8809883a 	mov	r4,r17
    cdd8:	00000000 	call	0 <__alt_mem_ins_mem_0>
    cddc:	bc400017 	ldw	r17,0(r23)
    cde0:	883fb71e 	bne	r17,zero,ccc0 <__call_exitprocs+0x74>
    cde4:	003fc506 	br	ccfc <__call_exitprocs+0xb0>
    cde8:	89000017 	ldw	r4,0(r17)
    cdec:	882f883a 	mov	r23,r17
    cdf0:	2023883a 	mov	r17,r4
    cdf4:	883fb21e 	bne	r17,zero,ccc0 <__call_exitprocs+0x74>
    cdf8:	003fc006 	br	ccfc <__call_exitprocs+0xb0>

0000cdfc <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    cdfc:	defffd04 	addi	sp,sp,-12
    ce00:	df000215 	stw	fp,8(sp)
    ce04:	df000204 	addi	fp,sp,8
    ce08:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    ce0c:	e0bfff17 	ldw	r2,-4(fp)
    ce10:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    ce14:	e0bffe17 	ldw	r2,-8(fp)
    ce18:	1005003a 	cmpeq	r2,r2,zero
    ce1c:	1000021e 	bne	r2,zero,ce28 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    ce20:	002af070 	cmpltui	zero,zero,43969
    ce24:	00000106 	br	ce2c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    ce28:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    ce2c:	e037883a 	mov	sp,fp
    ce30:	df000017 	ldw	fp,0(sp)
    ce34:	dec00104 	addi	sp,sp,4
    ce38:	f800283a 	ret

0000ce3c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    ce3c:	defffd04 	addi	sp,sp,-12
    ce40:	dfc00215 	stw	ra,8(sp)
    ce44:	df000115 	stw	fp,4(sp)
    ce48:	df000104 	addi	fp,sp,4
    ce4c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    ce50:	e13fff17 	ldw	r4,-4(fp)
    ce54:	000cdfc0 	call	cdfc <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    ce58:	003fff06 	br	ce58 <_exit+0x1c>
    ce5c:	0000cc48 	cmpgei	zero,zero,817
