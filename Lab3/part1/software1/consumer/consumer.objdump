
consumer.elf:     file format elf32-littlenios2
consumer.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000301b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00030000 paddr 0x00030000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00030020 paddr 0x00030020 align 2**12
         filesz 0x0000c784 memsz 0x0000c784 flags r-x
    LOAD off    0x0000e008 vaddr 0x00010008 paddr 0x0003c7a4 align 2**12
         filesz 0x00001dec memsz 0x000020ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00030000  00030000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00030020  00030020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c5f0  000301b4  000301b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000390  00010008  0003c7a4  0000e008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  00010398  0003cb34  0000e398  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000300  00011df4  0003e590  0000fdf4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000fdf4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000c98  00000000  00000000  0000fe18  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000013ef  00000000  00000000  00010ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00022ee2  00000000  00000000  00011e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007976  00000000  00000000  00034d81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013575  00000000  00000000  0003c6f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000018a4  00000000  00000000  0004fc6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002154  00000000  00000000  00051510  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000be16  00000000  00000000  00053664  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0005f47c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  0005f4a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00062e18  2**0
                  CONTENTS, READONLY
 18 .cpu          00000004  00000000  00000000  00062e1b  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00062e1f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00062e20  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00062e21  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00062e25  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00062e29  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00062e2d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00062e38  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00062e43  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  00062e4e  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000034  00000000  00000000  00062e51  2**0
                  CONTENTS, READONLY
 29 .jdi          00008508  00000000  00000000  00062e85  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0005609e  00000000  00000000  0006b38d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00030000 l    d  .entry	00000000 .entry
00030020 l    d  .exceptions	00000000 .exceptions
000301b4 l    d  .text	00000000 .text
00010008 l    d  .rodata	00000000 .rodata
00010398 l    d  .rwdata	00000000 .rwdata
00011df4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000301ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO_1.c
00000000 l    df *ABS*	00000000 consumer.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00030798 l     F .text	00000058 __sprint_r
000100c6 l     O .rodata	00000010 blanks.3452
000100b6 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000327fc l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000341f8 l     F .text	00000058 std
00034304 l     F .text	00000008 __fp_lock
0003430c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00010398 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00011dc0 l     O .rwdata	00000004 charset
000100fc l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00010244 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00038498 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000395c4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00039e38 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00039e98 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00039f98 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0003a0b8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0003a198 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0003a2f4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0003a520 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011de4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0003a7bc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010d54 l     O .rwdata	00001060 jtag_uart_1
0003a8ac l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0003aaec l     F .text	00000228 altera_avalon_jtag_uart_irq
0003ad14 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0003b390 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0003b6b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0003bad8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0003bc14 l     F .text	000000dc alt_file_locked
0003be78 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0003c58c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0003c740 l     F .text	00000040 alt_sim_halt
00035fb4 g     F .text	00000094 _mprec_log10
000360a0 g     F .text	00000088 __any_on
000377ac g     F .text	00000070 _isatty_r
0001021c g     O .rodata	00000028 __mprec_tinytens
0003a354 g     F .text	0000006c alt_main
00030670 g     F .text	000000a0 _puts_r
00011df4 g     O .bss	00000004 writep
00011e64 g     O .bss	00000100 alt_irq
0003781c g     F .text	00000078 _lseek_r
0003cb34 g       *ABS*	00000000 __flash_rwdata_start
00038fb8 g     F .text	00000088 __eqdf2
00030480 g     F .text	0000008c FIFO_1_INIT
000120f4 g       *ABS*	00000000 __alt_heap_start
000305f8 g     F .text	00000044 printf
00037278 g     F .text	00000068 __sseek
00034260 g     F .text	000000a4 __sinit
00034f38 g     F .text	00000084 _setlocale_r
00034360 g     F .text	00000068 __sfmoreglue
0003a3e0 g     F .text	00000020 __malloc_unlock
00011df8 g     O .bss	00000004 readp
00035a30 g     F .text	000000e0 memmove
00034350 g     F .text	00000010 _cleanup
00036128 g     F .text	000000bc _Balloc
000390c8 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00030000 g     F .entry	0000001c __reset
00030020 g       *ABS*	00000000 __flash_exceptions_start
00037738 g     F .text	00000074 _fstat_r
00011e20 g     O .bss	00000004 errno
00011e28 g     O .bss	00000004 alt_argv
00019db4 g       *ABS*	00000000 _gp
00010bd4 g     O .rwdata	00000180 alt_fd_list
0003c09c g     F .text	00000094 alt_find_dev
00035990 g     F .text	000000a0 memcpy
00034344 g     F .text	0000000c _cleanup_r
00039260 g     F .text	000000f8 __floatsidf
0003bb9c g     F .text	00000078 alt_io_redirect
000391d8 g     F .text	00000088 __ltdf2
0003c7a4 g       *ABS*	00000000 __DTOR_END__
00030710 g     F .text	00000014 puts
00035f04 g     F .text	000000b0 __ratio
0003af2c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0003063c g     F .text	00000034 _printf_r
00039700 g     F .text	00000008 __udivsi3
00039ff8 g     F .text	000000c0 isatty
0001012c g     O .rodata	000000c8 __mprec_tens
00034f14 g     F .text	00000008 __locale_charset
0003c308 g     F .text	00000090 alt_icache_flush
00011e14 g     O .bss	00000004 __malloc_top_pad
00011dbc g     O .rwdata	00000004 __mb_cur_max
00034f1c g     F .text	0000000c _localeconv_r
00036820 g     F .text	0000003c __i2b
000348f8 g     F .text	0000049c __sfvwrite_r
00037200 g     F .text	00000070 _sbrk_r
00030524 g     F .text	00000090 consumer
00011dfc g     O .bss	00000004 fullp
00037894 g     F .text	00000078 _read_r
00010798 g     O .rwdata	0000000c __lc_ctype
00011ddc g     O .rwdata	00000004 alt_max_fd
00039b3c g     F .text	00000138 __unpack_d
00037614 g     F .text	00000110 _fclose_r
000341c4 g     F .text	00000034 fflush
00011e18 g     O .bss	00000004 __malloc_max_sbrked_mem
00038928 g     F .text	00000074 __adddf3
00035de4 g     F .text	00000120 __b2d
00037ee8 g     F .text	000005b0 __umoddi3
0003a204 g     F .text	000000f0 lseek
00011db8 g     O .rwdata	00000004 _global_impure_ptr
00036b9c g     F .text	000005f4 _realloc_r
000120f4 g       *ABS*	00000000 __bss_end
0003b9e0 g     F .text	000000f8 alt_iic_isr_register
0003bf70 g     F .text	0000010c alt_tick
0003790c g     F .text	000005dc __udivdi3
000101f4 g     O .rodata	00000028 __mprec_bigtens
00036a7c g     F .text	00000120 __s2b
00039430 g     F .text	00000194 __floatunsidf
00035d04 g     F .text	00000060 __mcmp
0003432c g     F .text	00000018 __fp_lock_all
0003b998 g     F .text	00000048 alt_ic_irq_enabled
0003bed8 g     F .text	00000098 alt_alarm_stop
00011e30 g     O .bss	00000004 alt_irq_active
000300ec g     F .exceptions	000000c8 alt_irq_handler
00010bac g     O .rwdata	00000028 alt_dev_null
00030000 g       *ABS*	00000000 __alt_mem_onchip_mem1
0003b5e4 g     F .text	0000001c alt_dcache_flush_all
00035bd0 g     F .text	00000070 __hi0bits
00039358 g     F .text	000000d8 __fixdfsi
00011df4 g       *ABS*	00000000 __ram_rwdata_end
00011dd4 g     O .rwdata	00000008 alt_dev_list
0003a69c g     F .text	00000120 write
00010398 g       *ABS*	00000000 __ram_rodata_end
00039ec4 g     F .text	000000d4 fstat
0003695c g     F .text	00000120 __pow5mult
00011e08 g     O .bss	00000004 __nlocale_changed
00039708 g     F .text	00000008 __umodsi3
000120f4 g       *ABS*	00000000 end
0003aa2c g     F .text	000000c0 altera_avalon_jtag_uart_init
0003c7a0 g       *ABS*	00000000 __CTOR_LIST__
0001fff4 g       *ABS*	00000000 __alt_stack_pointer
0003b400 g     F .text	00000090 alt_avalon_timer_sc_init
000397a8 g     F .text	00000080 __clzsi2
0003b150 g     F .text	00000240 altera_avalon_jtag_uart_write
00034250 g     F .text	00000004 __sfp_lock_acquire
000358ac g     F .text	000000e4 memchr
000307f0 g     F .text	00001eac ___vfprintf_internal_r
000345e4 g     F .text	00000314 _free_r
0003c590 g     F .text	000001b0 __call_exitprocs
00011e0c g     O .bss	00000004 __mlocale_changed
00011dc8 g     O .rwdata	00000004 __malloc_sbrk_base
000301b4 g     F .text	0000003c _start
00011e34 g     O .bss	00000004 _alt_tick_rate
000364ec g     F .text	0000014c __lshift
00011e38 g     O .bss	00000004 _alt_nticks
0003a400 g     F .text	00000120 read
0003a850 g     F .text	0000005c alt_sys_init
0003c458 g     F .text	00000134 __register_exitproc
00036638 g     F .text	000001e8 __multiply
0003adc4 g     F .text	00000074 altera_avalon_jtag_uart_close
00010398 g       *ABS*	00000000 __ram_rwdata_start
00010008 g       *ABS*	00000000 __ram_rodata_start
00011e3c g     O .bss	00000028 __malloc_current_mallinfo
000361e4 g     F .text	0000017c __d2b
0003a8e4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0003c250 g     F .text	000000b8 alt_get_fd
00039c74 g     F .text	000000c8 __fpcmp_parts_d
000375a4 g     F .text	00000070 _close_r
0003c3e4 g     F .text	00000074 memcmp
0003a994 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
000120f4 g       *ABS*	00000000 __alt_stack_base
0003a9dc g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000326c0 g     F .text	0000013c __swsetup_r
00038d60 g     F .text	00000258 __divdf3
000343c8 g     F .text	000000f0 __sfp
00036048 g     F .text	00000058 __copybits
000107a4 g     O .rwdata	00000408 __malloc_av_
0003425c g     F .text	00000004 __sinit_lock_release
0003899c g     F .text	000003c4 __muldf3
0003735c g     F .text	00000060 __sread
0003c130 g     F .text	00000120 alt_find_file
0003b600 g     F .text	000000b4 alt_dev_llist_insert
0003a3c0 g     F .text	00000020 __malloc_lock
0003a5e0 g     F .text	000000bc sbrk
00033fc8 g     F .text	000001fc _fflush_r
000374f0 g     F .text	000000b4 _calloc_r
00011df4 g       *ABS*	00000000 __bss_start
00035b10 g     F .text	00000098 memset
0003050c g     F .text	00000018 main
00011e2c g     O .bss	00000004 alt_envp
00011e1c g     O .bss	00000004 __malloc_max_total_mem
0003a93c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00037270 g     F .text	00000008 __sclose
0001fff4 g       *ABS*	00000000 __alt_heap_limit
00037724 g     F .text	00000014 fclose
00011f64 g     O .bss	00000190 _atexit0
00032a14 g     F .text	000015b4 _dtoa_r
0003516c g     F .text	00000740 _malloc_r
00011de0 g     O .rwdata	00000004 alt_errno
00034e5c g     F .text	000000b8 _fwalk
000301f0 g     F .text	00000148 WRITE_FIFO_1
00039640 g     F .text	00000060 __divsi3
00010250 g     O .rodata	00000014 __thenan_df
000344b8 g     F .text	0000012c _malloc_trim_r
0003c7a4 g       *ABS*	00000000 __CTOR_END__
000373bc g     F .text	000000bc strcmp
0003c7a4 g       *ABS*	00000000 __flash_rodata_start
0003c7a4 g       *ABS*	00000000 __DTOR_LIST__
000305b4 g     F .text	00000044 delay
00039040 g     F .text	00000088 __nedf2
0003a81c g     F .text	00000034 alt_irq_init
0003a580 g     F .text	00000060 alt_release_fd
00010264 g     O .rodata	00000100 __clz_tab
00011e10 g     O .bss	00000004 _PathLocale
0003c398 g     F .text	00000014 atexit
00037478 g     F .text	00000078 _write_r
00034fbc g     F .text	0000001c setlocale
00011db4 g     O .rwdata	00000004 _impure_ptr
00011e24 g     O .bss	00000004 alt_argc
0003b778 g     F .text	00000064 _do_dtors
00030020 g       .exceptions	00000000 alt_irq_entry
00035d64 g     F .text	00000080 __ulp
00037190 g     F .text	00000040 __isinfd
00034314 g     F .text	00000018 __fp_unlock_all
00011dcc g     O .rwdata	00000008 alt_fs_list
00030020 g       *ABS*	00000000 __ram_exceptions_start
00034f28 g     F .text	00000010 localeconv
0003b80c g     F .text	00000050 alt_ic_isr_register
00011df4 g       *ABS*	00000000 _edata
000120f4 g       *ABS*	00000000 _end
000301b4 g       *ABS*	00000000 __ram_exceptions_end
0003ae38 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0003b8f8 g     F .text	000000a0 alt_ic_irq_disable
000372e0 g     F .text	0000007c __swrite
00011dc4 g     O .rwdata	00000004 __malloc_trim_threshold
0003c07c g     F .text	00000020 altera_nios2_qsys_irq_init
0003c3ac g     F .text	00000038 exit
00034d94 g     F .text	000000c8 _fwalk_reent
00036360 g     F .text	0000018c __mdiff
000396a0 g     F .text	00000060 __modsi3
0001fff4 g       *ABS*	00000000 __alt_data_end
00030020 g     F .exceptions	00000000 alt_exception
00034254 g     F .text	00000004 __sfp_lock_release
0003c780 g     F .text	00000020 _exit
000371d0 g     F .text	00000030 __isnand
0003b490 g     F .text	00000154 alt_alarm_start
00039710 g     F .text	00000098 __muldi3
00034fd8 g     F .text	00000194 __smakebuf_r
00030724 g     F .text	00000074 strlen
0003bcf0 g     F .text	00000188 open
00039150 g     F .text	00000088 __gedf2
00030338 g     F .text	00000148 READ_FIFO_1
0003b7dc g     F .text	00000030 alt_icache_flush_all
00011de8 g     O .rwdata	00000004 alt_priority_mask
00011e00 g     O .bss	00000004 emptyp
0003b85c g     F .text	0000009c alt_ic_irq_enable
0003269c g     F .text	00000024 __vfprintf_internal
000388a8 g     F .text	00000080 __subdf3
00035c40 g     F .text	000000c4 __lo0bits
00011dec g     O .rwdata	00000008 alt_alarm_list
0003b714 g     F .text	00000064 _do_ctors
00011e04 g     O .bss	00000004 countp
00039d3c g     F .text	000000fc close
0003a118 g     F .text	00000080 alt_load
00039828 g     F .text	00000314 __pack_d
00000000 g       *ABS*	00000000 __alt_mem_shared_mem
00000000  w      *UND*	00000000 free
00034258 g     F .text	00000004 __sinit_lock_acquire
0003685c g     F .text	00000100 __multadd
00035ba8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00030000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   30000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   30004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   30008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   3000c:	00bffd16 	blt	zero,r2,30004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   30010:	004000f4 	movhi	at,3
    ori r1, r1, %lo(_start)
   30014:	08406d14 	ori	at,at,436
    jmp r1
   30018:	0800683a 	jmp	at
   3001c:	00000000 	call	0 <__alt_mem_shared_mem>

Disassembly of section .exceptions:

00030020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   30020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   30024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   30028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   3002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   30030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   30034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   30038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   3003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   30040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   30044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   30048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   3004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   30050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   30054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   30058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   3005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   30060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   30064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   30068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   3006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   30070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   30074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   30078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   3007c:	10000326 	beq	r2,zero,3008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   30080:	20000226 	beq	r4,zero,3008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   30084:	00300ec0 	call	300ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   30088:	00000306 	br	30098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   3008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   30090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   30094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   30098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   3009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   300a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   300a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   300a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   300ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   300b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   300b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   300b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   300bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   300c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   300c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   300c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   300cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   300d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   300d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   300d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   300dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   300e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   300e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   300e8:	ef80083a 	eret

000300ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   300ec:	defff904 	addi	sp,sp,-28
   300f0:	dfc00615 	stw	ra,24(sp)
   300f4:	df000515 	stw	fp,20(sp)
   300f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   300fc:	0005313a 	rdctl	r2,ipending
   30100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   30104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   30108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   3010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   30110:	00800044 	movi	r2,1
   30114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   30118:	e0ffff17 	ldw	r3,-4(fp)
   3011c:	e0bffe17 	ldw	r2,-8(fp)
   30120:	1884703a 	and	r2,r3,r2
   30124:	1005003a 	cmpeq	r2,r2,zero
   30128:	1000161e 	bne	r2,zero,30184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   3012c:	e0bffd17 	ldw	r2,-12(fp)
   30130:	00c00074 	movhi	r3,1
   30134:	18c79904 	addi	r3,r3,7780
   30138:	100490fa 	slli	r2,r2,3
   3013c:	10c5883a 	add	r2,r2,r3
   30140:	11400017 	ldw	r5,0(r2)
   30144:	e0bffd17 	ldw	r2,-12(fp)
   30148:	00c00074 	movhi	r3,1
   3014c:	18c79904 	addi	r3,r3,7780
   30150:	100490fa 	slli	r2,r2,3
   30154:	10c5883a 	add	r2,r2,r3
   30158:	10800104 	addi	r2,r2,4
   3015c:	11000017 	ldw	r4,0(r2)
   30160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   30164:	0005313a 	rdctl	r2,ipending
   30168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   3016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   30170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   30174:	e0bfff17 	ldw	r2,-4(fp)
   30178:	1004c03a 	cmpne	r2,r2,zero
   3017c:	103fe31e 	bne	r2,zero,3010c <alt_irq_handler+0x20>
   30180:	00000706 	br	301a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   30184:	e0bffe17 	ldw	r2,-8(fp)
   30188:	1085883a 	add	r2,r2,r2
   3018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   30190:	e0bffd17 	ldw	r2,-12(fp)
   30194:	10800044 	addi	r2,r2,1
   30198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   3019c:	003fde06 	br	30118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   301a0:	e037883a 	mov	sp,fp
   301a4:	dfc00117 	ldw	ra,4(sp)
   301a8:	df000017 	ldw	fp,0(sp)
   301ac:	dec00204 	addi	sp,sp,8
   301b0:	f800283a 	ret

Disassembly of section .text:

000301b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   301b4:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   301b8:	defffd14 	ori	sp,sp,65524

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   301bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   301c0:	d6a76d14 	ori	gp,gp,40372
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   301c4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   301c8:	10877d14 	ori	r2,r2,7668

    movhi r3, %hi(__bss_end)
   301cc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   301d0:	18c83d14 	ori	r3,r3,8436

    beq r2, r3, 1f
   301d4:	10c00326 	beq	r2,r3,301e4 <_start+0x30>

0:
    stw zero, (r2)
   301d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   301dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   301e0:	10fffd36 	bltu	r2,r3,301d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   301e4:	003a1180 	call	3a118 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   301e8:	003a3540 	call	3a354 <alt_main>

000301ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   301ec:	003fff06 	br	301ec <alt_after_alt_main>

000301f0 <WRITE_FIFO_1>:

#include "FIFO_1.h"


void WRITE_FIFO_1(int *buffer)
{
   301f0:	defffe04 	addi	sp,sp,-8
   301f4:	df000115 	stw	fp,4(sp)
   301f8:	df000104 	addi	fp,sp,4
   301fc:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is full
	while(IORD_32DIRECT(MEM_BASE,fullp)==0x1){}
   30200:	d0a01217 	ldw	r2,-32696(gp)
   30204:	1007883a 	mov	r3,r2
   30208:	00be91d4 	movui	r2,64071
   3020c:	1885883a 	add	r2,r3,r2
   30210:	10800037 	ldwio	r2,0(r2)
   30214:	10800060 	cmpeqi	r2,r2,1
   30218:	103ff91e 	bne	r2,zero,30200 <WRITE_FIFO_1+0x10>

	// Write the data to FIFO
	IOWR_32DIRECT(MEM_BASE,writep,buffer);
   3021c:	d0a01017 	ldw	r2,-32704(gp)
   30220:	1007883a 	mov	r3,r2
   30224:	00be91d4 	movui	r2,64071
   30228:	1885883a 	add	r2,r3,r2
   3022c:	e0ffff17 	ldw	r3,-4(fp)
   30230:	10c00035 	stwio	r3,0(r2)

	// Update the write pointer
	writep += UNIT_SIZE;
   30234:	d0a01017 	ldw	r2,-32704(gp)
   30238:	10800804 	addi	r2,r2,32
   3023c:	d0a01015 	stw	r2,-32704(gp)

	// Update "count" in shared mem
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE,countp) + UNIT_SIZE);
   30240:	d0a01417 	ldw	r2,-32688(gp)
   30244:	1007883a 	mov	r3,r2
   30248:	00be91d4 	movui	r2,64071
   3024c:	1889883a 	add	r4,r3,r2
   30250:	d0a01417 	ldw	r2,-32688(gp)
   30254:	1007883a 	mov	r3,r2
   30258:	00be91d4 	movui	r2,64071
   3025c:	1885883a 	add	r2,r3,r2
   30260:	10800037 	ldwio	r2,0(r2)
   30264:	10c00804 	addi	r3,r2,32
   30268:	2005883a 	mov	r2,r4
   3026c:	10c00035 	stwio	r3,0(r2)

	// Update the "full?" and "empty?" flags accordingly
	// Set the full flag if FIFO is now full
	// Reset the empty flag if FIFO now has 1 entry
	if(writep==readp && IORD_32DIRECT(MEM_BASE,countp)== CAPACITY){
   30270:	d0e01017 	ldw	r3,-32704(gp)
   30274:	d0a01117 	ldw	r2,-32700(gp)
   30278:	18800f1e 	bne	r3,r2,302b8 <WRITE_FIFO_1+0xc8>
   3027c:	d0a01417 	ldw	r2,-32688(gp)
   30280:	1007883a 	mov	r3,r2
   30284:	00be91d4 	movui	r2,64071
   30288:	1885883a 	add	r2,r3,r2
   3028c:	10c00037 	ldwio	r3,0(r2)
   30290:	00be9214 	movui	r2,64072
   30294:	1880081e 	bne	r3,r2,302b8 <WRITE_FIFO_1+0xc8>
		IOWR_32DIRECT(MEM_BASE,fullp,0x1);
   30298:	d0a01217 	ldw	r2,-32696(gp)
   3029c:	1007883a 	mov	r3,r2
   302a0:	00be91d4 	movui	r2,64071
   302a4:	1885883a 	add	r2,r3,r2
   302a8:	1007883a 	mov	r3,r2
   302ac:	00800044 	movi	r2,1
   302b0:	18800035 	stwio	r2,0(r3)
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE,countp) + UNIT_SIZE);

	// Update the "full?" and "empty?" flags accordingly
	// Set the full flag if FIFO is now full
	// Reset the empty flag if FIFO now has 1 entry
	if(writep==readp && IORD_32DIRECT(MEM_BASE,countp)== CAPACITY){
   302b4:	00000506 	br	302cc <WRITE_FIFO_1+0xdc>
		IOWR_32DIRECT(MEM_BASE,fullp,0x1);
	}else{
		IOWR_32DIRECT(MEM_BASE,fullp,0x0);
   302b8:	d0a01217 	ldw	r2,-32696(gp)
   302bc:	1007883a 	mov	r3,r2
   302c0:	00be91d4 	movui	r2,64071
   302c4:	1885883a 	add	r2,r3,r2
   302c8:	10000035 	stwio	zero,0(r2)
	}
	if(writep==readp && IORD_32DIRECT(MEM_BASE,countp)== 0x0){
   302cc:	d0e01017 	ldw	r3,-32704(gp)
   302d0:	d0a01117 	ldw	r2,-32700(gp)
   302d4:	18800f1e 	bne	r3,r2,30314 <WRITE_FIFO_1+0x124>
   302d8:	d0a01417 	ldw	r2,-32688(gp)
   302dc:	1007883a 	mov	r3,r2
   302e0:	00be91d4 	movui	r2,64071
   302e4:	1885883a 	add	r2,r3,r2
   302e8:	10800037 	ldwio	r2,0(r2)
   302ec:	1004c03a 	cmpne	r2,r2,zero
   302f0:	1000081e 	bne	r2,zero,30314 <WRITE_FIFO_1+0x124>
		IOWR_32DIRECT(MEM_BASE,emptyp,0x1);
   302f4:	d0a01317 	ldw	r2,-32692(gp)
   302f8:	1007883a 	mov	r3,r2
   302fc:	00be91d4 	movui	r2,64071
   30300:	1885883a 	add	r2,r3,r2
   30304:	1007883a 	mov	r3,r2
   30308:	00800044 	movi	r2,1
   3030c:	18800035 	stwio	r2,0(r3)
	if(writep==readp && IORD_32DIRECT(MEM_BASE,countp)== CAPACITY){
		IOWR_32DIRECT(MEM_BASE,fullp,0x1);
	}else{
		IOWR_32DIRECT(MEM_BASE,fullp,0x0);
	}
	if(writep==readp && IORD_32DIRECT(MEM_BASE,countp)== 0x0){
   30310:	00000506 	br	30328 <WRITE_FIFO_1+0x138>
		IOWR_32DIRECT(MEM_BASE,emptyp,0x1);
	}else{
		IOWR_32DIRECT(MEM_BASE,emptyp,0x0);
   30314:	d0a01317 	ldw	r2,-32692(gp)
   30318:	1007883a 	mov	r3,r2
   3031c:	00be91d4 	movui	r2,64071
   30320:	1885883a 	add	r2,r3,r2
   30324:	10000035 	stwio	zero,0(r2)
	}
}
   30328:	e037883a 	mov	sp,fp
   3032c:	df000017 	ldw	fp,0(sp)
   30330:	dec00104 	addi	sp,sp,4
   30334:	f800283a 	ret

00030338 <READ_FIFO_1>:


void READ_FIFO_1(int *buffer)
{
   30338:	defffe04 	addi	sp,sp,-8
   3033c:	df000115 	stw	fp,4(sp)
   30340:	df000104 	addi	fp,sp,4
   30344:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is empty
	while(IORD_32DIRECT(MEM_BASE,emptyp)==0x1){}
   30348:	d0a01317 	ldw	r2,-32692(gp)
   3034c:	1007883a 	mov	r3,r2
   30350:	00be91d4 	movui	r2,64071
   30354:	1885883a 	add	r2,r3,r2
   30358:	10800037 	ldwio	r2,0(r2)
   3035c:	10800060 	cmpeqi	r2,r2,1
   30360:	103ff91e 	bne	r2,zero,30348 <READ_FIFO_1+0x10>

	// Read the data
	buffer = IORD_32DIRECT(MEM_BASE,readp);
   30364:	d0a01117 	ldw	r2,-32700(gp)
   30368:	1007883a 	mov	r3,r2
   3036c:	00be91d4 	movui	r2,64071
   30370:	1885883a 	add	r2,r3,r2
   30374:	10800037 	ldwio	r2,0(r2)
   30378:	e0bfff15 	stw	r2,-4(fp)

	// Update the read pointer
	readp += 0x4;
   3037c:	d0a01117 	ldw	r2,-32700(gp)
   30380:	10800104 	addi	r2,r2,4
   30384:	d0a01115 	stw	r2,-32700(gp)

	// Update "count" in shared mem
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE,countp) - UNIT_SIZE);
   30388:	d0a01417 	ldw	r2,-32688(gp)
   3038c:	1007883a 	mov	r3,r2
   30390:	00be91d4 	movui	r2,64071
   30394:	1889883a 	add	r4,r3,r2
   30398:	d0a01417 	ldw	r2,-32688(gp)
   3039c:	1007883a 	mov	r3,r2
   303a0:	00be91d4 	movui	r2,64071
   303a4:	1885883a 	add	r2,r3,r2
   303a8:	10800037 	ldwio	r2,0(r2)
   303ac:	10fff804 	addi	r3,r2,-32
   303b0:	2005883a 	mov	r2,r4
   303b4:	10c00035 	stwio	r3,0(r2)

	// Update the "full?" and "empty?" flags accordingly
	// Set the empty flag if FIFO is now empty
	// Reset the full flag if FIFO now has 1 entry less than capacity
	if(writep==readp && IORD_32DIRECT(MEM_BASE,countp)== CAPACITY){
   303b8:	d0e01017 	ldw	r3,-32704(gp)
   303bc:	d0a01117 	ldw	r2,-32700(gp)
   303c0:	18800f1e 	bne	r3,r2,30400 <READ_FIFO_1+0xc8>
   303c4:	d0a01417 	ldw	r2,-32688(gp)
   303c8:	1007883a 	mov	r3,r2
   303cc:	00be91d4 	movui	r2,64071
   303d0:	1885883a 	add	r2,r3,r2
   303d4:	10c00037 	ldwio	r3,0(r2)
   303d8:	00be9214 	movui	r2,64072
   303dc:	1880081e 	bne	r3,r2,30400 <READ_FIFO_1+0xc8>
		IOWR_32DIRECT(MEM_BASE,fullp,0x1);
   303e0:	d0a01217 	ldw	r2,-32696(gp)
   303e4:	1007883a 	mov	r3,r2
   303e8:	00be91d4 	movui	r2,64071
   303ec:	1885883a 	add	r2,r3,r2
   303f0:	1007883a 	mov	r3,r2
   303f4:	00800044 	movi	r2,1
   303f8:	18800035 	stwio	r2,0(r3)
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE,countp) - UNIT_SIZE);

	// Update the "full?" and "empty?" flags accordingly
	// Set the empty flag if FIFO is now empty
	// Reset the full flag if FIFO now has 1 entry less than capacity
	if(writep==readp && IORD_32DIRECT(MEM_BASE,countp)== CAPACITY){
   303fc:	00000506 	br	30414 <READ_FIFO_1+0xdc>
		IOWR_32DIRECT(MEM_BASE,fullp,0x1);
	}else{
		IOWR_32DIRECT(MEM_BASE,fullp,0x0);
   30400:	d0a01217 	ldw	r2,-32696(gp)
   30404:	1007883a 	mov	r3,r2
   30408:	00be91d4 	movui	r2,64071
   3040c:	1885883a 	add	r2,r3,r2
   30410:	10000035 	stwio	zero,0(r2)
	}
	if(writep==readp && IORD_32DIRECT(MEM_BASE,countp)== 0x0){
   30414:	d0e01017 	ldw	r3,-32704(gp)
   30418:	d0a01117 	ldw	r2,-32700(gp)
   3041c:	18800f1e 	bne	r3,r2,3045c <READ_FIFO_1+0x124>
   30420:	d0a01417 	ldw	r2,-32688(gp)
   30424:	1007883a 	mov	r3,r2
   30428:	00be91d4 	movui	r2,64071
   3042c:	1885883a 	add	r2,r3,r2
   30430:	10800037 	ldwio	r2,0(r2)
   30434:	1004c03a 	cmpne	r2,r2,zero
   30438:	1000081e 	bne	r2,zero,3045c <READ_FIFO_1+0x124>
		IOWR_32DIRECT(MEM_BASE,emptyp,0x1);
   3043c:	d0a01317 	ldw	r2,-32692(gp)
   30440:	1007883a 	mov	r3,r2
   30444:	00be91d4 	movui	r2,64071
   30448:	1885883a 	add	r2,r3,r2
   3044c:	1007883a 	mov	r3,r2
   30450:	00800044 	movi	r2,1
   30454:	18800035 	stwio	r2,0(r3)
	if(writep==readp && IORD_32DIRECT(MEM_BASE,countp)== CAPACITY){
		IOWR_32DIRECT(MEM_BASE,fullp,0x1);
	}else{
		IOWR_32DIRECT(MEM_BASE,fullp,0x0);
	}
	if(writep==readp && IORD_32DIRECT(MEM_BASE,countp)== 0x0){
   30458:	00000506 	br	30470 <READ_FIFO_1+0x138>
		IOWR_32DIRECT(MEM_BASE,emptyp,0x1);
	}else{
		IOWR_32DIRECT(MEM_BASE,emptyp,0x0);
   3045c:	d0a01317 	ldw	r2,-32692(gp)
   30460:	1007883a 	mov	r3,r2
   30464:	00be91d4 	movui	r2,64071
   30468:	1885883a 	add	r2,r3,r2
   3046c:	10000035 	stwio	zero,0(r2)
	}

}
   30470:	e037883a 	mov	sp,fp
   30474:	df000017 	ldw	fp,0(sp)
   30478:	dec00104 	addi	sp,sp,4
   3047c:	f800283a 	ret

00030480 <FIFO_1_INIT>:
//Initialization
void FIFO_1_INIT()
{
   30480:	deffff04 	addi	sp,sp,-4
   30484:	df000015 	stw	fp,0(sp)
   30488:	d839883a 	mov	fp,sp
	writep = STARTP; // Initially the FIFO is empty, so start writing at the first slot
   3048c:	00800304 	movi	r2,12
   30490:	d0a01015 	stw	r2,-32704(gp)
	readp  = STARTP;
   30494:	00800304 	movi	r2,12
   30498:	d0a01115 	stw	r2,-32700(gp)
	fullp   = 0x0;  // SET THIS OFFSET (If there are previous FIFOs in shared memory, use Prev Fifo's STARTP + Prev Fifo's size)
   3049c:	d0201215 	stw	zero,-32696(gp)
	emptyp   = fullp + UNIT_SIZE;
   304a0:	d0a01217 	ldw	r2,-32696(gp)
   304a4:	10800804 	addi	r2,r2,32
   304a8:	d0a01315 	stw	r2,-32692(gp)
	countp  = emptyp + UNIT_SIZE;
   304ac:	d0a01317 	ldw	r2,-32692(gp)
   304b0:	10800804 	addi	r2,r2,32
   304b4:	d0a01415 	stw	r2,-32688(gp)

	// Assigning values for the flags.
	IOWR_32DIRECT(MEM_BASE, fullp, 0x0);
   304b8:	d0a01217 	ldw	r2,-32696(gp)
   304bc:	1007883a 	mov	r3,r2
   304c0:	00be91d4 	movui	r2,64071
   304c4:	1885883a 	add	r2,r3,r2
   304c8:	10000035 	stwio	zero,0(r2)
	IOWR_32DIRECT(MEM_BASE, emptyp, 0x1); // The fifo is empty at the start
   304cc:	d0a01317 	ldw	r2,-32692(gp)
   304d0:	1007883a 	mov	r3,r2
   304d4:	00be91d4 	movui	r2,64071
   304d8:	1885883a 	add	r2,r3,r2
   304dc:	1007883a 	mov	r3,r2
   304e0:	00800044 	movi	r2,1
   304e4:	18800035 	stwio	r2,0(r3)
	IOWR_32DIRECT(MEM_BASE, countp, 0x0); // The fifo is empty at the start
   304e8:	d0a01417 	ldw	r2,-32688(gp)
   304ec:	1007883a 	mov	r3,r2
   304f0:	00be91d4 	movui	r2,64071
   304f4:	1885883a 	add	r2,r3,r2
   304f8:	10000035 	stwio	zero,0(r2)
}
   304fc:	e037883a 	mov	sp,fp
   30500:	df000017 	ldw	fp,0(sp)
   30504:	dec00104 	addi	sp,sp,4
   30508:	f800283a 	ret

0003050c <main>:
void delay(int n);
int consumer();


int main()
{
   3050c:	defffe04 	addi	sp,sp,-8
   30510:	dfc00115 	stw	ra,4(sp)
   30514:	df000015 	stw	fp,0(sp)
   30518:	d839883a 	mov	fp,sp
	consumer();
   3051c:	00305240 	call	30524 <consumer>
	
	while(1) { }
   30520:	003fff06 	br	30520 <main+0x14>

00030524 <consumer>:
	return 0;
}


int consumer()
{
   30524:	defffc04 	addi	sp,sp,-16
   30528:	dfc00315 	stw	ra,12(sp)
   3052c:	df000215 	stw	fp,8(sp)
   30530:	df000204 	addi	fp,sp,8
	printf("Consumer starting..\n");
   30534:	01000074 	movhi	r4,1
   30538:	21000204 	addi	r4,r4,8
   3053c:	00307100 	call	30710 <puts>

	FIFO_1_INIT(); // Initialize the producer-consumer fifo
   30540:	00304800 	call	30480 <FIFO_1_INIT>

	int j = 0;
   30544:	e03fff15 	stw	zero,-4(fp)
	int k = 5;
   30548:	00800144 	movi	r2,5
   3054c:	e0bffe15 	stw	r2,-8(fp)
	while(k<500)
   30550:	00000c06 	br	30584 <consumer+0x60>
	{
		READ_FIFO_1(&j);  // Read from the producer-consumer fifo
   30554:	e13fff04 	addi	r4,fp,-4
   30558:	00303380 	call	30338 <READ_FIFO_1>
		if(j==k)
   3055c:	e0ffff17 	ldw	r3,-4(fp)
   30560:	e0bffe17 	ldw	r2,-8(fp)
   30564:	1880041e 	bne	r3,r2,30578 <consumer+0x54>
			printf("Consumer succefully received [%i]\n",j);
   30568:	e17fff17 	ldw	r5,-4(fp)
   3056c:	01000074 	movhi	r4,1
   30570:	21000704 	addi	r4,r4,28
   30574:	00305f80 	call	305f8 <printf>

		k+=10;
   30578:	e0bffe17 	ldw	r2,-8(fp)
   3057c:	10800284 	addi	r2,r2,10
   30580:	e0bffe15 	stw	r2,-8(fp)

	FIFO_1_INIT(); // Initialize the producer-consumer fifo

	int j = 0;
	int k = 5;
	while(k<500)
   30584:	e0bffe17 	ldw	r2,-8(fp)
   30588:	10807d10 	cmplti	r2,r2,500
   3058c:	103ff11e 	bne	r2,zero,30554 <consumer+0x30>
			printf("Consumer succefully received [%i]\n",j);

		k+=10;
	}

	printf("Consumer finished..\n");
   30590:	01000074 	movhi	r4,1
   30594:	21001004 	addi	r4,r4,64
   30598:	00307100 	call	30710 <puts>
	return 0;
   3059c:	0005883a 	mov	r2,zero
}
   305a0:	e037883a 	mov	sp,fp
   305a4:	dfc00117 	ldw	ra,4(sp)
   305a8:	df000017 	ldw	fp,0(sp)
   305ac:	dec00204 	addi	sp,sp,8
   305b0:	f800283a 	ret

000305b4 <delay>:


void delay(int n)
{
   305b4:	defffd04 	addi	sp,sp,-12
   305b8:	df000215 	stw	fp,8(sp)
   305bc:	df000204 	addi	fp,sp,8
   305c0:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i=n; i>0; i--)
   305c4:	e0bfff17 	ldw	r2,-4(fp)
   305c8:	e0bffe15 	stw	r2,-8(fp)
   305cc:	00000306 	br	305dc <delay+0x28>
   305d0:	e0bffe17 	ldw	r2,-8(fp)
   305d4:	10bfffc4 	addi	r2,r2,-1
   305d8:	e0bffe15 	stw	r2,-8(fp)
   305dc:	e0bffe17 	ldw	r2,-8(fp)
   305e0:	10800048 	cmpgei	r2,r2,1
   305e4:	103ffa1e 	bne	r2,zero,305d0 <delay+0x1c>
	{
		continue;
	}
   305e8:	e037883a 	mov	sp,fp
   305ec:	df000017 	ldw	fp,0(sp)
   305f0:	dec00104 	addi	sp,sp,4
   305f4:	f800283a 	ret

000305f8 <printf>:
   305f8:	defffb04 	addi	sp,sp,-20
   305fc:	dfc00115 	stw	ra,4(sp)
   30600:	d9400215 	stw	r5,8(sp)
   30604:	d9800315 	stw	r6,12(sp)
   30608:	d9c00415 	stw	r7,16(sp)
   3060c:	00800074 	movhi	r2,1
   30610:	10876d04 	addi	r2,r2,7604
   30614:	10c00017 	ldw	r3,0(r2)
   30618:	200b883a 	mov	r5,r4
   3061c:	d8800204 	addi	r2,sp,8
   30620:	19000217 	ldw	r4,8(r3)
   30624:	100d883a 	mov	r6,r2
   30628:	d8800015 	stw	r2,0(sp)
   3062c:	003269c0 	call	3269c <__vfprintf_internal>
   30630:	dfc00117 	ldw	ra,4(sp)
   30634:	dec00504 	addi	sp,sp,20
   30638:	f800283a 	ret

0003063c <_printf_r>:
   3063c:	defffc04 	addi	sp,sp,-16
   30640:	dfc00115 	stw	ra,4(sp)
   30644:	d9800215 	stw	r6,8(sp)
   30648:	d9c00315 	stw	r7,12(sp)
   3064c:	280d883a 	mov	r6,r5
   30650:	21400217 	ldw	r5,8(r4)
   30654:	d8c00204 	addi	r3,sp,8
   30658:	180f883a 	mov	r7,r3
   3065c:	d8c00015 	stw	r3,0(sp)
   30660:	00307f00 	call	307f0 <___vfprintf_internal_r>
   30664:	dfc00117 	ldw	ra,4(sp)
   30668:	dec00404 	addi	sp,sp,16
   3066c:	f800283a 	ret

00030670 <_puts_r>:
   30670:	defff604 	addi	sp,sp,-40
   30674:	dc400715 	stw	r17,28(sp)
   30678:	2023883a 	mov	r17,r4
   3067c:	2809883a 	mov	r4,r5
   30680:	dfc00915 	stw	ra,36(sp)
   30684:	dcc00815 	stw	r19,32(sp)
   30688:	2827883a 	mov	r19,r5
   3068c:	00307240 	call	30724 <strlen>
   30690:	89400217 	ldw	r5,8(r17)
   30694:	00c00074 	movhi	r3,1
   30698:	18c01504 	addi	r3,r3,84
   3069c:	01c00044 	movi	r7,1
   306a0:	12000044 	addi	r8,r2,1
   306a4:	d8c00515 	stw	r3,20(sp)
   306a8:	d9c00615 	stw	r7,24(sp)
   306ac:	d8c00304 	addi	r3,sp,12
   306b0:	01c00084 	movi	r7,2
   306b4:	8809883a 	mov	r4,r17
   306b8:	d80d883a 	mov	r6,sp
   306bc:	d8c00015 	stw	r3,0(sp)
   306c0:	dcc00315 	stw	r19,12(sp)
   306c4:	da000215 	stw	r8,8(sp)
   306c8:	d9c00115 	stw	r7,4(sp)
   306cc:	d8800415 	stw	r2,16(sp)
   306d0:	00348f80 	call	348f8 <__sfvwrite_r>
   306d4:	00ffffc4 	movi	r3,-1
   306d8:	10000626 	beq	r2,zero,306f4 <_puts_r+0x84>
   306dc:	1805883a 	mov	r2,r3
   306e0:	dfc00917 	ldw	ra,36(sp)
   306e4:	dcc00817 	ldw	r19,32(sp)
   306e8:	dc400717 	ldw	r17,28(sp)
   306ec:	dec00a04 	addi	sp,sp,40
   306f0:	f800283a 	ret
   306f4:	00c00284 	movi	r3,10
   306f8:	1805883a 	mov	r2,r3
   306fc:	dfc00917 	ldw	ra,36(sp)
   30700:	dcc00817 	ldw	r19,32(sp)
   30704:	dc400717 	ldw	r17,28(sp)
   30708:	dec00a04 	addi	sp,sp,40
   3070c:	f800283a 	ret

00030710 <puts>:
   30710:	00800074 	movhi	r2,1
   30714:	10876d04 	addi	r2,r2,7604
   30718:	200b883a 	mov	r5,r4
   3071c:	11000017 	ldw	r4,0(r2)
   30720:	00306701 	jmpi	30670 <_puts_r>

00030724 <strlen>:
   30724:	208000cc 	andi	r2,r4,3
   30728:	2011883a 	mov	r8,r4
   3072c:	1000161e 	bne	r2,zero,30788 <strlen+0x64>
   30730:	20c00017 	ldw	r3,0(r4)
   30734:	017fbff4 	movhi	r5,65279
   30738:	297fbfc4 	addi	r5,r5,-257
   3073c:	01e02074 	movhi	r7,32897
   30740:	39e02004 	addi	r7,r7,-32640
   30744:	1945883a 	add	r2,r3,r5
   30748:	11c4703a 	and	r2,r2,r7
   3074c:	00c6303a 	nor	r3,zero,r3
   30750:	1886703a 	and	r3,r3,r2
   30754:	18000c1e 	bne	r3,zero,30788 <strlen+0x64>
   30758:	280d883a 	mov	r6,r5
   3075c:	380b883a 	mov	r5,r7
   30760:	21000104 	addi	r4,r4,4
   30764:	20800017 	ldw	r2,0(r4)
   30768:	1187883a 	add	r3,r2,r6
   3076c:	1946703a 	and	r3,r3,r5
   30770:	0084303a 	nor	r2,zero,r2
   30774:	10c4703a 	and	r2,r2,r3
   30778:	103ff926 	beq	r2,zero,30760 <strlen+0x3c>
   3077c:	20800007 	ldb	r2,0(r4)
   30780:	10000326 	beq	r2,zero,30790 <strlen+0x6c>
   30784:	21000044 	addi	r4,r4,1
   30788:	20800007 	ldb	r2,0(r4)
   3078c:	103ffd1e 	bne	r2,zero,30784 <strlen+0x60>
   30790:	2205c83a 	sub	r2,r4,r8
   30794:	f800283a 	ret

00030798 <__sprint_r>:
   30798:	30800217 	ldw	r2,8(r6)
   3079c:	defffe04 	addi	sp,sp,-8
   307a0:	dc000015 	stw	r16,0(sp)
   307a4:	dfc00115 	stw	ra,4(sp)
   307a8:	3021883a 	mov	r16,r6
   307ac:	0007883a 	mov	r3,zero
   307b0:	1000061e 	bne	r2,zero,307cc <__sprint_r+0x34>
   307b4:	1805883a 	mov	r2,r3
   307b8:	30000115 	stw	zero,4(r6)
   307bc:	dfc00117 	ldw	ra,4(sp)
   307c0:	dc000017 	ldw	r16,0(sp)
   307c4:	dec00204 	addi	sp,sp,8
   307c8:	f800283a 	ret
   307cc:	00348f80 	call	348f8 <__sfvwrite_r>
   307d0:	1007883a 	mov	r3,r2
   307d4:	1805883a 	mov	r2,r3
   307d8:	80000115 	stw	zero,4(r16)
   307dc:	80000215 	stw	zero,8(r16)
   307e0:	dfc00117 	ldw	ra,4(sp)
   307e4:	dc000017 	ldw	r16,0(sp)
   307e8:	dec00204 	addi	sp,sp,8
   307ec:	f800283a 	ret

000307f0 <___vfprintf_internal_r>:
   307f0:	defea404 	addi	sp,sp,-1392
   307f4:	dd815815 	stw	r22,1376(sp)
   307f8:	dc015215 	stw	r16,1352(sp)
   307fc:	d9c15115 	stw	r7,1348(sp)
   30800:	dfc15b15 	stw	ra,1388(sp)
   30804:	df015a15 	stw	fp,1384(sp)
   30808:	ddc15915 	stw	r23,1380(sp)
   3080c:	dd415715 	stw	r21,1372(sp)
   30810:	dd015615 	stw	r20,1368(sp)
   30814:	dcc15515 	stw	r19,1364(sp)
   30818:	dc815415 	stw	r18,1360(sp)
   3081c:	dc415315 	stw	r17,1356(sp)
   30820:	282d883a 	mov	r22,r5
   30824:	3021883a 	mov	r16,r6
   30828:	d9014f15 	stw	r4,1340(sp)
   3082c:	0034f1c0 	call	34f1c <_localeconv_r>
   30830:	10800017 	ldw	r2,0(r2)
   30834:	d9c15117 	ldw	r7,1348(sp)
   30838:	d8814915 	stw	r2,1316(sp)
   3083c:	d8814f17 	ldw	r2,1340(sp)
   30840:	10000226 	beq	r2,zero,3084c <___vfprintf_internal_r+0x5c>
   30844:	10800e17 	ldw	r2,56(r2)
   30848:	10020d26 	beq	r2,zero,31080 <___vfprintf_internal_r+0x890>
   3084c:	b080030b 	ldhu	r2,12(r22)
   30850:	1080020c 	andi	r2,r2,8
   30854:	10020e26 	beq	r2,zero,31090 <___vfprintf_internal_r+0x8a0>
   30858:	b0800417 	ldw	r2,16(r22)
   3085c:	10020c26 	beq	r2,zero,31090 <___vfprintf_internal_r+0x8a0>
   30860:	b200030b 	ldhu	r8,12(r22)
   30864:	00800284 	movi	r2,10
   30868:	40c0068c 	andi	r3,r8,26
   3086c:	18802f1e 	bne	r3,r2,3092c <___vfprintf_internal_r+0x13c>
   30870:	b080038f 	ldh	r2,14(r22)
   30874:	10002d16 	blt	r2,zero,3092c <___vfprintf_internal_r+0x13c>
   30878:	b240038b 	ldhu	r9,14(r22)
   3087c:	b2800717 	ldw	r10,28(r22)
   30880:	b2c00917 	ldw	r11,36(r22)
   30884:	d9014f17 	ldw	r4,1340(sp)
   30888:	dc402904 	addi	r17,sp,164
   3088c:	d8804004 	addi	r2,sp,256
   30890:	00c10004 	movi	r3,1024
   30894:	423fff4c 	andi	r8,r8,65533
   30898:	800d883a 	mov	r6,r16
   3089c:	880b883a 	mov	r5,r17
   308a0:	da002c0d 	sth	r8,176(sp)
   308a4:	da402c8d 	sth	r9,178(sp)
   308a8:	da803015 	stw	r10,192(sp)
   308ac:	dac03215 	stw	r11,200(sp)
   308b0:	d8802d15 	stw	r2,180(sp)
   308b4:	d8c02e15 	stw	r3,184(sp)
   308b8:	d8802915 	stw	r2,164(sp)
   308bc:	d8c02b15 	stw	r3,172(sp)
   308c0:	d8002f15 	stw	zero,188(sp)
   308c4:	00307f00 	call	307f0 <___vfprintf_internal_r>
   308c8:	d8814b15 	stw	r2,1324(sp)
   308cc:	10000416 	blt	r2,zero,308e0 <___vfprintf_internal_r+0xf0>
   308d0:	d9014f17 	ldw	r4,1340(sp)
   308d4:	880b883a 	mov	r5,r17
   308d8:	0033fc80 	call	33fc8 <_fflush_r>
   308dc:	1002321e 	bne	r2,zero,311a8 <___vfprintf_internal_r+0x9b8>
   308e0:	d8802c0b 	ldhu	r2,176(sp)
   308e4:	1080100c 	andi	r2,r2,64
   308e8:	10000326 	beq	r2,zero,308f8 <___vfprintf_internal_r+0x108>
   308ec:	b080030b 	ldhu	r2,12(r22)
   308f0:	10801014 	ori	r2,r2,64
   308f4:	b080030d 	sth	r2,12(r22)
   308f8:	d8814b17 	ldw	r2,1324(sp)
   308fc:	dfc15b17 	ldw	ra,1388(sp)
   30900:	df015a17 	ldw	fp,1384(sp)
   30904:	ddc15917 	ldw	r23,1380(sp)
   30908:	dd815817 	ldw	r22,1376(sp)
   3090c:	dd415717 	ldw	r21,1372(sp)
   30910:	dd015617 	ldw	r20,1368(sp)
   30914:	dcc15517 	ldw	r19,1364(sp)
   30918:	dc815417 	ldw	r18,1360(sp)
   3091c:	dc415317 	ldw	r17,1356(sp)
   30920:	dc015217 	ldw	r16,1352(sp)
   30924:	dec15c04 	addi	sp,sp,1392
   30928:	f800283a 	ret
   3092c:	0005883a 	mov	r2,zero
   30930:	0007883a 	mov	r3,zero
   30934:	dd401904 	addi	r21,sp,100
   30938:	d8814215 	stw	r2,1288(sp)
   3093c:	802f883a 	mov	r23,r16
   30940:	d8c14315 	stw	r3,1292(sp)
   30944:	d8014b15 	stw	zero,1324(sp)
   30948:	d8014815 	stw	zero,1312(sp)
   3094c:	d8014415 	stw	zero,1296(sp)
   30950:	d8014715 	stw	zero,1308(sp)
   30954:	dd400c15 	stw	r21,48(sp)
   30958:	d8000e15 	stw	zero,56(sp)
   3095c:	d8000d15 	stw	zero,52(sp)
   30960:	b8800007 	ldb	r2,0(r23)
   30964:	10001926 	beq	r2,zero,309cc <___vfprintf_internal_r+0x1dc>
   30968:	00c00944 	movi	r3,37
   3096c:	10c01726 	beq	r2,r3,309cc <___vfprintf_internal_r+0x1dc>
   30970:	b821883a 	mov	r16,r23
   30974:	00000106 	br	3097c <___vfprintf_internal_r+0x18c>
   30978:	10c00326 	beq	r2,r3,30988 <___vfprintf_internal_r+0x198>
   3097c:	84000044 	addi	r16,r16,1
   30980:	80800007 	ldb	r2,0(r16)
   30984:	103ffc1e 	bne	r2,zero,30978 <___vfprintf_internal_r+0x188>
   30988:	85e7c83a 	sub	r19,r16,r23
   3098c:	98000e26 	beq	r19,zero,309c8 <___vfprintf_internal_r+0x1d8>
   30990:	dc800e17 	ldw	r18,56(sp)
   30994:	dc400d17 	ldw	r17,52(sp)
   30998:	008001c4 	movi	r2,7
   3099c:	94e5883a 	add	r18,r18,r19
   309a0:	8c400044 	addi	r17,r17,1
   309a4:	adc00015 	stw	r23,0(r21)
   309a8:	dc800e15 	stw	r18,56(sp)
   309ac:	acc00115 	stw	r19,4(r21)
   309b0:	dc400d15 	stw	r17,52(sp)
   309b4:	14428b16 	blt	r2,r17,313e4 <___vfprintf_internal_r+0xbf4>
   309b8:	ad400204 	addi	r21,r21,8
   309bc:	d9014b17 	ldw	r4,1324(sp)
   309c0:	24c9883a 	add	r4,r4,r19
   309c4:	d9014b15 	stw	r4,1324(sp)
   309c8:	802f883a 	mov	r23,r16
   309cc:	b8800007 	ldb	r2,0(r23)
   309d0:	10013c26 	beq	r2,zero,30ec4 <___vfprintf_internal_r+0x6d4>
   309d4:	bdc00044 	addi	r23,r23,1
   309d8:	d8000405 	stb	zero,16(sp)
   309dc:	b8c00007 	ldb	r3,0(r23)
   309e0:	04ffffc4 	movi	r19,-1
   309e4:	d8014c15 	stw	zero,1328(sp)
   309e8:	d8014a15 	stw	zero,1320(sp)
   309ec:	d8c14d15 	stw	r3,1332(sp)
   309f0:	bdc00044 	addi	r23,r23,1
   309f4:	d9414d17 	ldw	r5,1332(sp)
   309f8:	00801604 	movi	r2,88
   309fc:	28fff804 	addi	r3,r5,-32
   30a00:	10c06036 	bltu	r2,r3,30b84 <___vfprintf_internal_r+0x394>
   30a04:	18c5883a 	add	r2,r3,r3
   30a08:	1085883a 	add	r2,r2,r2
   30a0c:	00c000f4 	movhi	r3,3
   30a10:	18c28804 	addi	r3,r3,2592
   30a14:	10c5883a 	add	r2,r2,r3
   30a18:	11000017 	ldw	r4,0(r2)
   30a1c:	2000683a 	jmp	r4
   30a20:	00031994 	movui	zero,3174
   30a24:	00030b84 	movi	zero,3118
   30a28:	00030b84 	movi	zero,3118
   30a2c:	00031980 	call	3198 <__alt_mem_shared_mem+0x3198>
   30a30:	00030b84 	movi	zero,3118
   30a34:	00030b84 	movi	zero,3118
   30a38:	00030b84 	movi	zero,3118
   30a3c:	00030b84 	movi	zero,3118
   30a40:	00030b84 	movi	zero,3118
   30a44:	00030b84 	movi	zero,3118
   30a48:	00031760 	cmpeqi	zero,zero,3165
   30a4c:	00031970 	cmpltui	zero,zero,3173
   30a50:	00030b84 	movi	zero,3118
   30a54:	00031778 	rdprs	zero,zero,3165
   30a58:	00031a0c 	andi	zero,zero,3176
   30a5c:	00030b84 	movi	zero,3118
   30a60:	000319f8 	rdprs	zero,zero,3175
   30a64:	000319c0 	call	319c <__alt_mem_shared_mem+0x319c>
   30a68:	000319c0 	call	319c <__alt_mem_shared_mem+0x319c>
   30a6c:	000319c0 	call	319c <__alt_mem_shared_mem+0x319c>
   30a70:	000319c0 	call	319c <__alt_mem_shared_mem+0x319c>
   30a74:	000319c0 	call	319c <__alt_mem_shared_mem+0x319c>
   30a78:	000319c0 	call	319c <__alt_mem_shared_mem+0x319c>
   30a7c:	000319c0 	call	319c <__alt_mem_shared_mem+0x319c>
   30a80:	000319c0 	call	319c <__alt_mem_shared_mem+0x319c>
   30a84:	000319c0 	call	319c <__alt_mem_shared_mem+0x319c>
   30a88:	00030b84 	movi	zero,3118
   30a8c:	00030b84 	movi	zero,3118
   30a90:	00030b84 	movi	zero,3118
   30a94:	00030b84 	movi	zero,3118
   30a98:	00030b84 	movi	zero,3118
   30a9c:	00030b84 	movi	zero,3118
   30aa0:	00030b84 	movi	zero,3118
   30aa4:	00030b84 	movi	zero,3118
   30aa8:	00030b84 	movi	zero,3118
   30aac:	00030b84 	movi	zero,3118
   30ab0:	000311dc 	xori	zero,zero,3143
   30ab4:	00031848 	cmpgei	zero,zero,3169
   30ab8:	00030b84 	movi	zero,3118
   30abc:	00031848 	cmpgei	zero,zero,3169
   30ac0:	00030b84 	movi	zero,3118
   30ac4:	00030b84 	movi	zero,3118
   30ac8:	00030b84 	movi	zero,3118
   30acc:	00030b84 	movi	zero,3118
   30ad0:	000319ac 	andhi	zero,zero,3174
   30ad4:	00030b84 	movi	zero,3118
   30ad8:	00030b84 	movi	zero,3118
   30adc:	00031290 	cmplti	zero,zero,3146
   30ae0:	00030b84 	movi	zero,3118
   30ae4:	00030b84 	movi	zero,3118
   30ae8:	00030b84 	movi	zero,3118
   30aec:	00030b84 	movi	zero,3118
   30af0:	00030b84 	movi	zero,3118
   30af4:	000312dc 	xori	zero,zero,3147
   30af8:	00030b84 	movi	zero,3118
   30afc:	00030b84 	movi	zero,3118
   30b00:	000318fc 	xorhi	zero,zero,3171
   30b04:	00030b84 	movi	zero,3118
   30b08:	00030b84 	movi	zero,3118
   30b0c:	00030b84 	movi	zero,3118
   30b10:	00030b84 	movi	zero,3118
   30b14:	00030b84 	movi	zero,3118
   30b18:	00030b84 	movi	zero,3118
   30b1c:	00030b84 	movi	zero,3118
   30b20:	00030b84 	movi	zero,3118
   30b24:	00030b84 	movi	zero,3118
   30b28:	00030b84 	movi	zero,3118
   30b2c:	000318d0 	cmplti	zero,zero,3171
   30b30:	000311e8 	cmpgeui	zero,zero,3143
   30b34:	00031848 	cmpgei	zero,zero,3169
   30b38:	00031848 	cmpgei	zero,zero,3169
   30b3c:	00031848 	cmpgei	zero,zero,3169
   30b40:	00031834 	movhi	zero,3168
   30b44:	000311e8 	cmpgeui	zero,zero,3143
   30b48:	00030b84 	movi	zero,3118
   30b4c:	00030b84 	movi	zero,3118
   30b50:	000317bc 	xorhi	zero,zero,3166
   30b54:	00030b84 	movi	zero,3118
   30b58:	0003178c 	andi	zero,zero,3166
   30b5c:	0003129c 	xori	zero,zero,3146
   30b60:	000317ec 	andhi	zero,zero,3167
   30b64:	000317d8 	cmpnei	zero,zero,3167
   30b68:	00030b84 	movi	zero,3118
   30b6c:	00031a68 	cmpgeui	zero,zero,3177
   30b70:	00030b84 	movi	zero,3118
   30b74:	000312e8 	cmpgeui	zero,zero,3147
   30b78:	00030b84 	movi	zero,3118
   30b7c:	00030b84 	movi	zero,3118
   30b80:	00031960 	cmpeqi	zero,zero,3173
   30b84:	d9014d17 	ldw	r4,1332(sp)
   30b88:	2000ce26 	beq	r4,zero,30ec4 <___vfprintf_internal_r+0x6d4>
   30b8c:	01400044 	movi	r5,1
   30b90:	d9800f04 	addi	r6,sp,60
   30b94:	d9c14015 	stw	r7,1280(sp)
   30b98:	d9414515 	stw	r5,1300(sp)
   30b9c:	d9814115 	stw	r6,1284(sp)
   30ba0:	280f883a 	mov	r7,r5
   30ba4:	d9000f05 	stb	r4,60(sp)
   30ba8:	d8000405 	stb	zero,16(sp)
   30bac:	d8014615 	stw	zero,1304(sp)
   30bb0:	d8c14c17 	ldw	r3,1328(sp)
   30bb4:	1880008c 	andi	r2,r3,2
   30bb8:	1005003a 	cmpeq	r2,r2,zero
   30bbc:	d8815015 	stw	r2,1344(sp)
   30bc0:	1000031e 	bne	r2,zero,30bd0 <___vfprintf_internal_r+0x3e0>
   30bc4:	d9014517 	ldw	r4,1300(sp)
   30bc8:	21000084 	addi	r4,r4,2
   30bcc:	d9014515 	stw	r4,1300(sp)
   30bd0:	d9414c17 	ldw	r5,1328(sp)
   30bd4:	2940210c 	andi	r5,r5,132
   30bd8:	d9414e15 	stw	r5,1336(sp)
   30bdc:	28002d1e 	bne	r5,zero,30c94 <___vfprintf_internal_r+0x4a4>
   30be0:	d9814a17 	ldw	r6,1320(sp)
   30be4:	d8814517 	ldw	r2,1300(sp)
   30be8:	30a1c83a 	sub	r16,r6,r2
   30bec:	0400290e 	bge	zero,r16,30c94 <___vfprintf_internal_r+0x4a4>
   30bf0:	00800404 	movi	r2,16
   30bf4:	1404580e 	bge	r2,r16,31d58 <___vfprintf_internal_r+0x1568>
   30bf8:	dc800e17 	ldw	r18,56(sp)
   30bfc:	dc400d17 	ldw	r17,52(sp)
   30c00:	1027883a 	mov	r19,r2
   30c04:	07000074 	movhi	fp,1
   30c08:	e7003184 	addi	fp,fp,198
   30c0c:	050001c4 	movi	r20,7
   30c10:	00000306 	br	30c20 <___vfprintf_internal_r+0x430>
   30c14:	843ffc04 	addi	r16,r16,-16
   30c18:	ad400204 	addi	r21,r21,8
   30c1c:	9c00130e 	bge	r19,r16,30c6c <___vfprintf_internal_r+0x47c>
   30c20:	94800404 	addi	r18,r18,16
   30c24:	8c400044 	addi	r17,r17,1
   30c28:	af000015 	stw	fp,0(r21)
   30c2c:	acc00115 	stw	r19,4(r21)
   30c30:	dc800e15 	stw	r18,56(sp)
   30c34:	dc400d15 	stw	r17,52(sp)
   30c38:	a47ff60e 	bge	r20,r17,30c14 <___vfprintf_internal_r+0x424>
   30c3c:	d9014f17 	ldw	r4,1340(sp)
   30c40:	b00b883a 	mov	r5,r22
   30c44:	d9800c04 	addi	r6,sp,48
   30c48:	d9c15115 	stw	r7,1348(sp)
   30c4c:	00307980 	call	30798 <__sprint_r>
   30c50:	d9c15117 	ldw	r7,1348(sp)
   30c54:	10009e1e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   30c58:	843ffc04 	addi	r16,r16,-16
   30c5c:	dc800e17 	ldw	r18,56(sp)
   30c60:	dc400d17 	ldw	r17,52(sp)
   30c64:	dd401904 	addi	r21,sp,100
   30c68:	9c3fed16 	blt	r19,r16,30c20 <___vfprintf_internal_r+0x430>
   30c6c:	9425883a 	add	r18,r18,r16
   30c70:	8c400044 	addi	r17,r17,1
   30c74:	008001c4 	movi	r2,7
   30c78:	af000015 	stw	fp,0(r21)
   30c7c:	ac000115 	stw	r16,4(r21)
   30c80:	dc800e15 	stw	r18,56(sp)
   30c84:	dc400d15 	stw	r17,52(sp)
   30c88:	1441f516 	blt	r2,r17,31460 <___vfprintf_internal_r+0xc70>
   30c8c:	ad400204 	addi	r21,r21,8
   30c90:	00000206 	br	30c9c <___vfprintf_internal_r+0x4ac>
   30c94:	dc800e17 	ldw	r18,56(sp)
   30c98:	dc400d17 	ldw	r17,52(sp)
   30c9c:	d8800407 	ldb	r2,16(sp)
   30ca0:	10000b26 	beq	r2,zero,30cd0 <___vfprintf_internal_r+0x4e0>
   30ca4:	00800044 	movi	r2,1
   30ca8:	94800044 	addi	r18,r18,1
   30cac:	8c400044 	addi	r17,r17,1
   30cb0:	a8800115 	stw	r2,4(r21)
   30cb4:	d8c00404 	addi	r3,sp,16
   30cb8:	008001c4 	movi	r2,7
   30cbc:	a8c00015 	stw	r3,0(r21)
   30cc0:	dc800e15 	stw	r18,56(sp)
   30cc4:	dc400d15 	stw	r17,52(sp)
   30cc8:	1441da16 	blt	r2,r17,31434 <___vfprintf_internal_r+0xc44>
   30ccc:	ad400204 	addi	r21,r21,8
   30cd0:	d9015017 	ldw	r4,1344(sp)
   30cd4:	20000b1e 	bne	r4,zero,30d04 <___vfprintf_internal_r+0x514>
   30cd8:	d8800444 	addi	r2,sp,17
   30cdc:	94800084 	addi	r18,r18,2
   30ce0:	8c400044 	addi	r17,r17,1
   30ce4:	a8800015 	stw	r2,0(r21)
   30ce8:	00c00084 	movi	r3,2
   30cec:	008001c4 	movi	r2,7
   30cf0:	a8c00115 	stw	r3,4(r21)
   30cf4:	dc800e15 	stw	r18,56(sp)
   30cf8:	dc400d15 	stw	r17,52(sp)
   30cfc:	1441c216 	blt	r2,r17,31408 <___vfprintf_internal_r+0xc18>
   30d00:	ad400204 	addi	r21,r21,8
   30d04:	d9414e17 	ldw	r5,1336(sp)
   30d08:	00802004 	movi	r2,128
   30d0c:	2880b126 	beq	r5,r2,30fd4 <___vfprintf_internal_r+0x7e4>
   30d10:	d8c14617 	ldw	r3,1304(sp)
   30d14:	19e1c83a 	sub	r16,r3,r7
   30d18:	0400260e 	bge	zero,r16,30db4 <___vfprintf_internal_r+0x5c4>
   30d1c:	00800404 	movi	r2,16
   30d20:	1403c90e 	bge	r2,r16,31c48 <___vfprintf_internal_r+0x1458>
   30d24:	1027883a 	mov	r19,r2
   30d28:	07000074 	movhi	fp,1
   30d2c:	e7002d84 	addi	fp,fp,182
   30d30:	050001c4 	movi	r20,7
   30d34:	00000306 	br	30d44 <___vfprintf_internal_r+0x554>
   30d38:	843ffc04 	addi	r16,r16,-16
   30d3c:	ad400204 	addi	r21,r21,8
   30d40:	9c00130e 	bge	r19,r16,30d90 <___vfprintf_internal_r+0x5a0>
   30d44:	94800404 	addi	r18,r18,16
   30d48:	8c400044 	addi	r17,r17,1
   30d4c:	af000015 	stw	fp,0(r21)
   30d50:	acc00115 	stw	r19,4(r21)
   30d54:	dc800e15 	stw	r18,56(sp)
   30d58:	dc400d15 	stw	r17,52(sp)
   30d5c:	a47ff60e 	bge	r20,r17,30d38 <___vfprintf_internal_r+0x548>
   30d60:	d9014f17 	ldw	r4,1340(sp)
   30d64:	b00b883a 	mov	r5,r22
   30d68:	d9800c04 	addi	r6,sp,48
   30d6c:	d9c15115 	stw	r7,1348(sp)
   30d70:	00307980 	call	30798 <__sprint_r>
   30d74:	d9c15117 	ldw	r7,1348(sp)
   30d78:	1000551e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   30d7c:	843ffc04 	addi	r16,r16,-16
   30d80:	dc800e17 	ldw	r18,56(sp)
   30d84:	dc400d17 	ldw	r17,52(sp)
   30d88:	dd401904 	addi	r21,sp,100
   30d8c:	9c3fed16 	blt	r19,r16,30d44 <___vfprintf_internal_r+0x554>
   30d90:	9425883a 	add	r18,r18,r16
   30d94:	8c400044 	addi	r17,r17,1
   30d98:	008001c4 	movi	r2,7
   30d9c:	af000015 	stw	fp,0(r21)
   30da0:	ac000115 	stw	r16,4(r21)
   30da4:	dc800e15 	stw	r18,56(sp)
   30da8:	dc400d15 	stw	r17,52(sp)
   30dac:	14418216 	blt	r2,r17,313b8 <___vfprintf_internal_r+0xbc8>
   30db0:	ad400204 	addi	r21,r21,8
   30db4:	d9014c17 	ldw	r4,1328(sp)
   30db8:	2080400c 	andi	r2,r4,256
   30dbc:	10004a1e 	bne	r2,zero,30ee8 <___vfprintf_internal_r+0x6f8>
   30dc0:	d9414117 	ldw	r5,1284(sp)
   30dc4:	91e5883a 	add	r18,r18,r7
   30dc8:	8c400044 	addi	r17,r17,1
   30dcc:	008001c4 	movi	r2,7
   30dd0:	a9400015 	stw	r5,0(r21)
   30dd4:	a9c00115 	stw	r7,4(r21)
   30dd8:	dc800e15 	stw	r18,56(sp)
   30ddc:	dc400d15 	stw	r17,52(sp)
   30de0:	14416716 	blt	r2,r17,31380 <___vfprintf_internal_r+0xb90>
   30de4:	a8c00204 	addi	r3,r21,8
   30de8:	d9814c17 	ldw	r6,1328(sp)
   30dec:	3080010c 	andi	r2,r6,4
   30df0:	10002826 	beq	r2,zero,30e94 <___vfprintf_internal_r+0x6a4>
   30df4:	d8814a17 	ldw	r2,1320(sp)
   30df8:	d9014517 	ldw	r4,1300(sp)
   30dfc:	1121c83a 	sub	r16,r2,r4
   30e00:	0400240e 	bge	zero,r16,30e94 <___vfprintf_internal_r+0x6a4>
   30e04:	00800404 	movi	r2,16
   30e08:	14044f0e 	bge	r2,r16,31f48 <___vfprintf_internal_r+0x1758>
   30e0c:	dc400d17 	ldw	r17,52(sp)
   30e10:	1027883a 	mov	r19,r2
   30e14:	07000074 	movhi	fp,1
   30e18:	e7003184 	addi	fp,fp,198
   30e1c:	050001c4 	movi	r20,7
   30e20:	00000306 	br	30e30 <___vfprintf_internal_r+0x640>
   30e24:	843ffc04 	addi	r16,r16,-16
   30e28:	18c00204 	addi	r3,r3,8
   30e2c:	9c00110e 	bge	r19,r16,30e74 <___vfprintf_internal_r+0x684>
   30e30:	94800404 	addi	r18,r18,16
   30e34:	8c400044 	addi	r17,r17,1
   30e38:	1f000015 	stw	fp,0(r3)
   30e3c:	1cc00115 	stw	r19,4(r3)
   30e40:	dc800e15 	stw	r18,56(sp)
   30e44:	dc400d15 	stw	r17,52(sp)
   30e48:	a47ff60e 	bge	r20,r17,30e24 <___vfprintf_internal_r+0x634>
   30e4c:	d9014f17 	ldw	r4,1340(sp)
   30e50:	b00b883a 	mov	r5,r22
   30e54:	d9800c04 	addi	r6,sp,48
   30e58:	00307980 	call	30798 <__sprint_r>
   30e5c:	10001c1e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   30e60:	843ffc04 	addi	r16,r16,-16
   30e64:	dc800e17 	ldw	r18,56(sp)
   30e68:	dc400d17 	ldw	r17,52(sp)
   30e6c:	d8c01904 	addi	r3,sp,100
   30e70:	9c3fef16 	blt	r19,r16,30e30 <___vfprintf_internal_r+0x640>
   30e74:	9425883a 	add	r18,r18,r16
   30e78:	8c400044 	addi	r17,r17,1
   30e7c:	008001c4 	movi	r2,7
   30e80:	1f000015 	stw	fp,0(r3)
   30e84:	1c000115 	stw	r16,4(r3)
   30e88:	dc800e15 	stw	r18,56(sp)
   30e8c:	dc400d15 	stw	r17,52(sp)
   30e90:	1440cb16 	blt	r2,r17,311c0 <___vfprintf_internal_r+0x9d0>
   30e94:	d8814a17 	ldw	r2,1320(sp)
   30e98:	d9414517 	ldw	r5,1300(sp)
   30e9c:	1140010e 	bge	r2,r5,30ea4 <___vfprintf_internal_r+0x6b4>
   30ea0:	2805883a 	mov	r2,r5
   30ea4:	d9814b17 	ldw	r6,1324(sp)
   30ea8:	308d883a 	add	r6,r6,r2
   30eac:	d9814b15 	stw	r6,1324(sp)
   30eb0:	90013b1e 	bne	r18,zero,313a0 <___vfprintf_internal_r+0xbb0>
   30eb4:	d9c14017 	ldw	r7,1280(sp)
   30eb8:	dd401904 	addi	r21,sp,100
   30ebc:	d8000d15 	stw	zero,52(sp)
   30ec0:	003ea706 	br	30960 <___vfprintf_internal_r+0x170>
   30ec4:	d8800e17 	ldw	r2,56(sp)
   30ec8:	10053f1e 	bne	r2,zero,323c8 <___vfprintf_internal_r+0x1bd8>
   30ecc:	d8000d15 	stw	zero,52(sp)
   30ed0:	b080030b 	ldhu	r2,12(r22)
   30ed4:	1080100c 	andi	r2,r2,64
   30ed8:	103e8726 	beq	r2,zero,308f8 <___vfprintf_internal_r+0x108>
   30edc:	00bfffc4 	movi	r2,-1
   30ee0:	d8814b15 	stw	r2,1324(sp)
   30ee4:	003e8406 	br	308f8 <___vfprintf_internal_r+0x108>
   30ee8:	d9814d17 	ldw	r6,1332(sp)
   30eec:	00801944 	movi	r2,101
   30ef0:	11806e16 	blt	r2,r6,310ac <___vfprintf_internal_r+0x8bc>
   30ef4:	d9414717 	ldw	r5,1308(sp)
   30ef8:	00c00044 	movi	r3,1
   30efc:	1943430e 	bge	r3,r5,31c0c <___vfprintf_internal_r+0x141c>
   30f00:	d8814117 	ldw	r2,1284(sp)
   30f04:	94800044 	addi	r18,r18,1
   30f08:	8c400044 	addi	r17,r17,1
   30f0c:	a8800015 	stw	r2,0(r21)
   30f10:	008001c4 	movi	r2,7
   30f14:	a8c00115 	stw	r3,4(r21)
   30f18:	dc800e15 	stw	r18,56(sp)
   30f1c:	dc400d15 	stw	r17,52(sp)
   30f20:	1441ca16 	blt	r2,r17,3164c <___vfprintf_internal_r+0xe5c>
   30f24:	a8c00204 	addi	r3,r21,8
   30f28:	d9014917 	ldw	r4,1316(sp)
   30f2c:	00800044 	movi	r2,1
   30f30:	94800044 	addi	r18,r18,1
   30f34:	8c400044 	addi	r17,r17,1
   30f38:	18800115 	stw	r2,4(r3)
   30f3c:	008001c4 	movi	r2,7
   30f40:	19000015 	stw	r4,0(r3)
   30f44:	dc800e15 	stw	r18,56(sp)
   30f48:	dc400d15 	stw	r17,52(sp)
   30f4c:	1441b616 	blt	r2,r17,31628 <___vfprintf_internal_r+0xe38>
   30f50:	1cc00204 	addi	r19,r3,8
   30f54:	d9014217 	ldw	r4,1288(sp)
   30f58:	d9414317 	ldw	r5,1292(sp)
   30f5c:	000d883a 	mov	r6,zero
   30f60:	000f883a 	mov	r7,zero
   30f64:	00390400 	call	39040 <__nedf2>
   30f68:	10017426 	beq	r2,zero,3153c <___vfprintf_internal_r+0xd4c>
   30f6c:	d9414717 	ldw	r5,1308(sp)
   30f70:	d9814117 	ldw	r6,1284(sp)
   30f74:	8c400044 	addi	r17,r17,1
   30f78:	2c85883a 	add	r2,r5,r18
   30f7c:	14bfffc4 	addi	r18,r2,-1
   30f80:	28bfffc4 	addi	r2,r5,-1
   30f84:	30c00044 	addi	r3,r6,1
   30f88:	98800115 	stw	r2,4(r19)
   30f8c:	008001c4 	movi	r2,7
   30f90:	98c00015 	stw	r3,0(r19)
   30f94:	dc800e15 	stw	r18,56(sp)
   30f98:	dc400d15 	stw	r17,52(sp)
   30f9c:	14418e16 	blt	r2,r17,315d8 <___vfprintf_internal_r+0xde8>
   30fa0:	9cc00204 	addi	r19,r19,8
   30fa4:	d9414817 	ldw	r5,1312(sp)
   30fa8:	d8800804 	addi	r2,sp,32
   30fac:	8c400044 	addi	r17,r17,1
   30fb0:	9165883a 	add	r18,r18,r5
   30fb4:	98800015 	stw	r2,0(r19)
   30fb8:	008001c4 	movi	r2,7
   30fbc:	99400115 	stw	r5,4(r19)
   30fc0:	dc800e15 	stw	r18,56(sp)
   30fc4:	dc400d15 	stw	r17,52(sp)
   30fc8:	1440ed16 	blt	r2,r17,31380 <___vfprintf_internal_r+0xb90>
   30fcc:	98c00204 	addi	r3,r19,8
   30fd0:	003f8506 	br	30de8 <___vfprintf_internal_r+0x5f8>
   30fd4:	d9814a17 	ldw	r6,1320(sp)
   30fd8:	d8814517 	ldw	r2,1300(sp)
   30fdc:	30a1c83a 	sub	r16,r6,r2
   30fe0:	043f4b0e 	bge	zero,r16,30d10 <___vfprintf_internal_r+0x520>
   30fe4:	00800404 	movi	r2,16
   30fe8:	1404340e 	bge	r2,r16,320bc <___vfprintf_internal_r+0x18cc>
   30fec:	1027883a 	mov	r19,r2
   30ff0:	07000074 	movhi	fp,1
   30ff4:	e7002d84 	addi	fp,fp,182
   30ff8:	050001c4 	movi	r20,7
   30ffc:	00000306 	br	3100c <___vfprintf_internal_r+0x81c>
   31000:	843ffc04 	addi	r16,r16,-16
   31004:	ad400204 	addi	r21,r21,8
   31008:	9c00130e 	bge	r19,r16,31058 <___vfprintf_internal_r+0x868>
   3100c:	94800404 	addi	r18,r18,16
   31010:	8c400044 	addi	r17,r17,1
   31014:	af000015 	stw	fp,0(r21)
   31018:	acc00115 	stw	r19,4(r21)
   3101c:	dc800e15 	stw	r18,56(sp)
   31020:	dc400d15 	stw	r17,52(sp)
   31024:	a47ff60e 	bge	r20,r17,31000 <___vfprintf_internal_r+0x810>
   31028:	d9014f17 	ldw	r4,1340(sp)
   3102c:	b00b883a 	mov	r5,r22
   31030:	d9800c04 	addi	r6,sp,48
   31034:	d9c15115 	stw	r7,1348(sp)
   31038:	00307980 	call	30798 <__sprint_r>
   3103c:	d9c15117 	ldw	r7,1348(sp)
   31040:	103fa31e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   31044:	843ffc04 	addi	r16,r16,-16
   31048:	dc800e17 	ldw	r18,56(sp)
   3104c:	dc400d17 	ldw	r17,52(sp)
   31050:	dd401904 	addi	r21,sp,100
   31054:	9c3fed16 	blt	r19,r16,3100c <___vfprintf_internal_r+0x81c>
   31058:	9425883a 	add	r18,r18,r16
   3105c:	8c400044 	addi	r17,r17,1
   31060:	008001c4 	movi	r2,7
   31064:	af000015 	stw	fp,0(r21)
   31068:	ac000115 	stw	r16,4(r21)
   3106c:	dc800e15 	stw	r18,56(sp)
   31070:	dc400d15 	stw	r17,52(sp)
   31074:	14416116 	blt	r2,r17,315fc <___vfprintf_internal_r+0xe0c>
   31078:	ad400204 	addi	r21,r21,8
   3107c:	003f2406 	br	30d10 <___vfprintf_internal_r+0x520>
   31080:	d9014f17 	ldw	r4,1340(sp)
   31084:	00342600 	call	34260 <__sinit>
   31088:	d9c15117 	ldw	r7,1348(sp)
   3108c:	003def06 	br	3084c <___vfprintf_internal_r+0x5c>
   31090:	d9014f17 	ldw	r4,1340(sp)
   31094:	b00b883a 	mov	r5,r22
   31098:	d9c15115 	stw	r7,1348(sp)
   3109c:	00326c00 	call	326c0 <__swsetup_r>
   310a0:	d9c15117 	ldw	r7,1348(sp)
   310a4:	103dee26 	beq	r2,zero,30860 <___vfprintf_internal_r+0x70>
   310a8:	003f8c06 	br	30edc <___vfprintf_internal_r+0x6ec>
   310ac:	d9014217 	ldw	r4,1288(sp)
   310b0:	d9414317 	ldw	r5,1292(sp)
   310b4:	000d883a 	mov	r6,zero
   310b8:	000f883a 	mov	r7,zero
   310bc:	0038fb80 	call	38fb8 <__eqdf2>
   310c0:	1000f21e 	bne	r2,zero,3148c <___vfprintf_internal_r+0xc9c>
   310c4:	00800074 	movhi	r2,1
   310c8:	10802d04 	addi	r2,r2,180
   310cc:	94800044 	addi	r18,r18,1
   310d0:	8c400044 	addi	r17,r17,1
   310d4:	a8800015 	stw	r2,0(r21)
   310d8:	00c00044 	movi	r3,1
   310dc:	008001c4 	movi	r2,7
   310e0:	a8c00115 	stw	r3,4(r21)
   310e4:	dc800e15 	stw	r18,56(sp)
   310e8:	dc400d15 	stw	r17,52(sp)
   310ec:	1442fa16 	blt	r2,r17,31cd8 <___vfprintf_internal_r+0x14e8>
   310f0:	a8c00204 	addi	r3,r21,8
   310f4:	d8800517 	ldw	r2,20(sp)
   310f8:	d9014717 	ldw	r4,1308(sp)
   310fc:	11015c0e 	bge	r2,r4,31670 <___vfprintf_internal_r+0xe80>
   31100:	dc400d17 	ldw	r17,52(sp)
   31104:	d9814917 	ldw	r6,1316(sp)
   31108:	00800044 	movi	r2,1
   3110c:	94800044 	addi	r18,r18,1
   31110:	8c400044 	addi	r17,r17,1
   31114:	18800115 	stw	r2,4(r3)
   31118:	008001c4 	movi	r2,7
   3111c:	19800015 	stw	r6,0(r3)
   31120:	dc800e15 	stw	r18,56(sp)
   31124:	dc400d15 	stw	r17,52(sp)
   31128:	14431016 	blt	r2,r17,31d6c <___vfprintf_internal_r+0x157c>
   3112c:	18c00204 	addi	r3,r3,8
   31130:	d8814717 	ldw	r2,1308(sp)
   31134:	143fffc4 	addi	r16,r2,-1
   31138:	043f2b0e 	bge	zero,r16,30de8 <___vfprintf_internal_r+0x5f8>
   3113c:	00800404 	movi	r2,16
   31140:	1402a20e 	bge	r2,r16,31bcc <___vfprintf_internal_r+0x13dc>
   31144:	dc400d17 	ldw	r17,52(sp)
   31148:	1027883a 	mov	r19,r2
   3114c:	07000074 	movhi	fp,1
   31150:	e7002d84 	addi	fp,fp,182
   31154:	050001c4 	movi	r20,7
   31158:	00000306 	br	31168 <___vfprintf_internal_r+0x978>
   3115c:	18c00204 	addi	r3,r3,8
   31160:	843ffc04 	addi	r16,r16,-16
   31164:	9c029c0e 	bge	r19,r16,31bd8 <___vfprintf_internal_r+0x13e8>
   31168:	94800404 	addi	r18,r18,16
   3116c:	8c400044 	addi	r17,r17,1
   31170:	1f000015 	stw	fp,0(r3)
   31174:	1cc00115 	stw	r19,4(r3)
   31178:	dc800e15 	stw	r18,56(sp)
   3117c:	dc400d15 	stw	r17,52(sp)
   31180:	a47ff60e 	bge	r20,r17,3115c <___vfprintf_internal_r+0x96c>
   31184:	d9014f17 	ldw	r4,1340(sp)
   31188:	b00b883a 	mov	r5,r22
   3118c:	d9800c04 	addi	r6,sp,48
   31190:	00307980 	call	30798 <__sprint_r>
   31194:	103f4e1e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   31198:	dc800e17 	ldw	r18,56(sp)
   3119c:	dc400d17 	ldw	r17,52(sp)
   311a0:	d8c01904 	addi	r3,sp,100
   311a4:	003fee06 	br	31160 <___vfprintf_internal_r+0x970>
   311a8:	d8802c0b 	ldhu	r2,176(sp)
   311ac:	00ffffc4 	movi	r3,-1
   311b0:	d8c14b15 	stw	r3,1324(sp)
   311b4:	1080100c 	andi	r2,r2,64
   311b8:	103dcc1e 	bne	r2,zero,308ec <___vfprintf_internal_r+0xfc>
   311bc:	003dce06 	br	308f8 <___vfprintf_internal_r+0x108>
   311c0:	d9014f17 	ldw	r4,1340(sp)
   311c4:	b00b883a 	mov	r5,r22
   311c8:	d9800c04 	addi	r6,sp,48
   311cc:	00307980 	call	30798 <__sprint_r>
   311d0:	103f3f1e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   311d4:	dc800e17 	ldw	r18,56(sp)
   311d8:	003f2e06 	br	30e94 <___vfprintf_internal_r+0x6a4>
   311dc:	d9414c17 	ldw	r5,1328(sp)
   311e0:	29400414 	ori	r5,r5,16
   311e4:	d9414c15 	stw	r5,1328(sp)
   311e8:	d9814c17 	ldw	r6,1328(sp)
   311ec:	3080080c 	andi	r2,r6,32
   311f0:	10014f1e 	bne	r2,zero,31730 <___vfprintf_internal_r+0xf40>
   311f4:	d8c14c17 	ldw	r3,1328(sp)
   311f8:	1880040c 	andi	r2,r3,16
   311fc:	1002ea1e 	bne	r2,zero,31da8 <___vfprintf_internal_r+0x15b8>
   31200:	d9014c17 	ldw	r4,1328(sp)
   31204:	2080100c 	andi	r2,r4,64
   31208:	1002e726 	beq	r2,zero,31da8 <___vfprintf_internal_r+0x15b8>
   3120c:	3880000f 	ldh	r2,0(r7)
   31210:	39c00104 	addi	r7,r7,4
   31214:	d9c14015 	stw	r7,1280(sp)
   31218:	1023d7fa 	srai	r17,r2,31
   3121c:	1021883a 	mov	r16,r2
   31220:	88037216 	blt	r17,zero,31fec <___vfprintf_internal_r+0x17fc>
   31224:	01000044 	movi	r4,1
   31228:	98000416 	blt	r19,zero,3123c <___vfprintf_internal_r+0xa4c>
   3122c:	d8c14c17 	ldw	r3,1328(sp)
   31230:	00bfdfc4 	movi	r2,-129
   31234:	1886703a 	and	r3,r3,r2
   31238:	d8c14c15 	stw	r3,1328(sp)
   3123c:	8444b03a 	or	r2,r16,r17
   31240:	1002261e 	bne	r2,zero,31adc <___vfprintf_internal_r+0x12ec>
   31244:	9802251e 	bne	r19,zero,31adc <___vfprintf_internal_r+0x12ec>
   31248:	20803fcc 	andi	r2,r4,255
   3124c:	10029b26 	beq	r2,zero,31cbc <___vfprintf_internal_r+0x14cc>
   31250:	d8c01904 	addi	r3,sp,100
   31254:	dd000f04 	addi	r20,sp,60
   31258:	d8c14115 	stw	r3,1284(sp)
   3125c:	d8c14117 	ldw	r3,1284(sp)
   31260:	dcc14515 	stw	r19,1300(sp)
   31264:	a0c5c83a 	sub	r2,r20,r3
   31268:	11c00a04 	addi	r7,r2,40
   3126c:	99c0010e 	bge	r19,r7,31274 <___vfprintf_internal_r+0xa84>
   31270:	d9c14515 	stw	r7,1300(sp)
   31274:	dcc14615 	stw	r19,1304(sp)
   31278:	d8800407 	ldb	r2,16(sp)
   3127c:	103e4c26 	beq	r2,zero,30bb0 <___vfprintf_internal_r+0x3c0>
   31280:	d8814517 	ldw	r2,1300(sp)
   31284:	10800044 	addi	r2,r2,1
   31288:	d8814515 	stw	r2,1300(sp)
   3128c:	003e4806 	br	30bb0 <___vfprintf_internal_r+0x3c0>
   31290:	d9814c17 	ldw	r6,1328(sp)
   31294:	31800414 	ori	r6,r6,16
   31298:	d9814c15 	stw	r6,1328(sp)
   3129c:	d8c14c17 	ldw	r3,1328(sp)
   312a0:	1880080c 	andi	r2,r3,32
   312a4:	1001271e 	bne	r2,zero,31744 <___vfprintf_internal_r+0xf54>
   312a8:	d9414c17 	ldw	r5,1328(sp)
   312ac:	2880040c 	andi	r2,r5,16
   312b0:	1002b61e 	bne	r2,zero,31d8c <___vfprintf_internal_r+0x159c>
   312b4:	d9814c17 	ldw	r6,1328(sp)
   312b8:	3080100c 	andi	r2,r6,64
   312bc:	1002b326 	beq	r2,zero,31d8c <___vfprintf_internal_r+0x159c>
   312c0:	3c00000b 	ldhu	r16,0(r7)
   312c4:	0009883a 	mov	r4,zero
   312c8:	39c00104 	addi	r7,r7,4
   312cc:	0023883a 	mov	r17,zero
   312d0:	d9c14015 	stw	r7,1280(sp)
   312d4:	d8000405 	stb	zero,16(sp)
   312d8:	003fd306 	br	31228 <___vfprintf_internal_r+0xa38>
   312dc:	d9014c17 	ldw	r4,1328(sp)
   312e0:	21000414 	ori	r4,r4,16
   312e4:	d9014c15 	stw	r4,1328(sp)
   312e8:	d9414c17 	ldw	r5,1328(sp)
   312ec:	2880080c 	andi	r2,r5,32
   312f0:	1001081e 	bne	r2,zero,31714 <___vfprintf_internal_r+0xf24>
   312f4:	d8c14c17 	ldw	r3,1328(sp)
   312f8:	1880040c 	andi	r2,r3,16
   312fc:	1002b01e 	bne	r2,zero,31dc0 <___vfprintf_internal_r+0x15d0>
   31300:	d9014c17 	ldw	r4,1328(sp)
   31304:	2080100c 	andi	r2,r4,64
   31308:	1002ad26 	beq	r2,zero,31dc0 <___vfprintf_internal_r+0x15d0>
   3130c:	3c00000b 	ldhu	r16,0(r7)
   31310:	01000044 	movi	r4,1
   31314:	39c00104 	addi	r7,r7,4
   31318:	0023883a 	mov	r17,zero
   3131c:	d9c14015 	stw	r7,1280(sp)
   31320:	d8000405 	stb	zero,16(sp)
   31324:	003fc006 	br	31228 <___vfprintf_internal_r+0xa38>
   31328:	d9014f17 	ldw	r4,1340(sp)
   3132c:	b00b883a 	mov	r5,r22
   31330:	d9800c04 	addi	r6,sp,48
   31334:	00307980 	call	30798 <__sprint_r>
   31338:	103ee51e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   3133c:	dc800e17 	ldw	r18,56(sp)
   31340:	d8c01904 	addi	r3,sp,100
   31344:	d9814c17 	ldw	r6,1328(sp)
   31348:	3080004c 	andi	r2,r6,1
   3134c:	1005003a 	cmpeq	r2,r2,zero
   31350:	103ea51e 	bne	r2,zero,30de8 <___vfprintf_internal_r+0x5f8>
   31354:	00800044 	movi	r2,1
   31358:	dc400d17 	ldw	r17,52(sp)
   3135c:	18800115 	stw	r2,4(r3)
   31360:	d8814917 	ldw	r2,1316(sp)
   31364:	94800044 	addi	r18,r18,1
   31368:	8c400044 	addi	r17,r17,1
   3136c:	18800015 	stw	r2,0(r3)
   31370:	008001c4 	movi	r2,7
   31374:	dc800e15 	stw	r18,56(sp)
   31378:	dc400d15 	stw	r17,52(sp)
   3137c:	14421e0e 	bge	r2,r17,31bf8 <___vfprintf_internal_r+0x1408>
   31380:	d9014f17 	ldw	r4,1340(sp)
   31384:	b00b883a 	mov	r5,r22
   31388:	d9800c04 	addi	r6,sp,48
   3138c:	00307980 	call	30798 <__sprint_r>
   31390:	103ecf1e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   31394:	dc800e17 	ldw	r18,56(sp)
   31398:	d8c01904 	addi	r3,sp,100
   3139c:	003e9206 	br	30de8 <___vfprintf_internal_r+0x5f8>
   313a0:	d9014f17 	ldw	r4,1340(sp)
   313a4:	b00b883a 	mov	r5,r22
   313a8:	d9800c04 	addi	r6,sp,48
   313ac:	00307980 	call	30798 <__sprint_r>
   313b0:	103ec026 	beq	r2,zero,30eb4 <___vfprintf_internal_r+0x6c4>
   313b4:	003ec606 	br	30ed0 <___vfprintf_internal_r+0x6e0>
   313b8:	d9014f17 	ldw	r4,1340(sp)
   313bc:	b00b883a 	mov	r5,r22
   313c0:	d9800c04 	addi	r6,sp,48
   313c4:	d9c15115 	stw	r7,1348(sp)
   313c8:	00307980 	call	30798 <__sprint_r>
   313cc:	d9c15117 	ldw	r7,1348(sp)
   313d0:	103ebf1e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   313d4:	dc800e17 	ldw	r18,56(sp)
   313d8:	dc400d17 	ldw	r17,52(sp)
   313dc:	dd401904 	addi	r21,sp,100
   313e0:	003e7406 	br	30db4 <___vfprintf_internal_r+0x5c4>
   313e4:	d9014f17 	ldw	r4,1340(sp)
   313e8:	b00b883a 	mov	r5,r22
   313ec:	d9800c04 	addi	r6,sp,48
   313f0:	d9c15115 	stw	r7,1348(sp)
   313f4:	00307980 	call	30798 <__sprint_r>
   313f8:	d9c15117 	ldw	r7,1348(sp)
   313fc:	103eb41e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   31400:	dd401904 	addi	r21,sp,100
   31404:	003d6d06 	br	309bc <___vfprintf_internal_r+0x1cc>
   31408:	d9014f17 	ldw	r4,1340(sp)
   3140c:	b00b883a 	mov	r5,r22
   31410:	d9800c04 	addi	r6,sp,48
   31414:	d9c15115 	stw	r7,1348(sp)
   31418:	00307980 	call	30798 <__sprint_r>
   3141c:	d9c15117 	ldw	r7,1348(sp)
   31420:	103eab1e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   31424:	dc800e17 	ldw	r18,56(sp)
   31428:	dc400d17 	ldw	r17,52(sp)
   3142c:	dd401904 	addi	r21,sp,100
   31430:	003e3406 	br	30d04 <___vfprintf_internal_r+0x514>
   31434:	d9014f17 	ldw	r4,1340(sp)
   31438:	b00b883a 	mov	r5,r22
   3143c:	d9800c04 	addi	r6,sp,48
   31440:	d9c15115 	stw	r7,1348(sp)
   31444:	00307980 	call	30798 <__sprint_r>
   31448:	d9c15117 	ldw	r7,1348(sp)
   3144c:	103ea01e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   31450:	dc800e17 	ldw	r18,56(sp)
   31454:	dc400d17 	ldw	r17,52(sp)
   31458:	dd401904 	addi	r21,sp,100
   3145c:	003e1c06 	br	30cd0 <___vfprintf_internal_r+0x4e0>
   31460:	d9014f17 	ldw	r4,1340(sp)
   31464:	b00b883a 	mov	r5,r22
   31468:	d9800c04 	addi	r6,sp,48
   3146c:	d9c15115 	stw	r7,1348(sp)
   31470:	00307980 	call	30798 <__sprint_r>
   31474:	d9c15117 	ldw	r7,1348(sp)
   31478:	103e951e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   3147c:	dc800e17 	ldw	r18,56(sp)
   31480:	dc400d17 	ldw	r17,52(sp)
   31484:	dd401904 	addi	r21,sp,100
   31488:	003e0406 	br	30c9c <___vfprintf_internal_r+0x4ac>
   3148c:	d9000517 	ldw	r4,20(sp)
   31490:	0102520e 	bge	zero,r4,31ddc <___vfprintf_internal_r+0x15ec>
   31494:	d9814717 	ldw	r6,1308(sp)
   31498:	21807a16 	blt	r4,r6,31684 <___vfprintf_internal_r+0xe94>
   3149c:	d8814117 	ldw	r2,1284(sp)
   314a0:	91a5883a 	add	r18,r18,r6
   314a4:	8c400044 	addi	r17,r17,1
   314a8:	a8800015 	stw	r2,0(r21)
   314ac:	008001c4 	movi	r2,7
   314b0:	a9800115 	stw	r6,4(r21)
   314b4:	dc800e15 	stw	r18,56(sp)
   314b8:	dc400d15 	stw	r17,52(sp)
   314bc:	1442f616 	blt	r2,r17,32098 <___vfprintf_internal_r+0x18a8>
   314c0:	a8c00204 	addi	r3,r21,8
   314c4:	d9414717 	ldw	r5,1308(sp)
   314c8:	2161c83a 	sub	r16,r4,r5
   314cc:	043f9d0e 	bge	zero,r16,31344 <___vfprintf_internal_r+0xb54>
   314d0:	00800404 	movi	r2,16
   314d4:	1402130e 	bge	r2,r16,31d24 <___vfprintf_internal_r+0x1534>
   314d8:	dc400d17 	ldw	r17,52(sp)
   314dc:	1027883a 	mov	r19,r2
   314e0:	07000074 	movhi	fp,1
   314e4:	e7002d84 	addi	fp,fp,182
   314e8:	050001c4 	movi	r20,7
   314ec:	00000306 	br	314fc <___vfprintf_internal_r+0xd0c>
   314f0:	18c00204 	addi	r3,r3,8
   314f4:	843ffc04 	addi	r16,r16,-16
   314f8:	9c020d0e 	bge	r19,r16,31d30 <___vfprintf_internal_r+0x1540>
   314fc:	94800404 	addi	r18,r18,16
   31500:	8c400044 	addi	r17,r17,1
   31504:	1f000015 	stw	fp,0(r3)
   31508:	1cc00115 	stw	r19,4(r3)
   3150c:	dc800e15 	stw	r18,56(sp)
   31510:	dc400d15 	stw	r17,52(sp)
   31514:	a47ff60e 	bge	r20,r17,314f0 <___vfprintf_internal_r+0xd00>
   31518:	d9014f17 	ldw	r4,1340(sp)
   3151c:	b00b883a 	mov	r5,r22
   31520:	d9800c04 	addi	r6,sp,48
   31524:	00307980 	call	30798 <__sprint_r>
   31528:	103e691e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   3152c:	dc800e17 	ldw	r18,56(sp)
   31530:	dc400d17 	ldw	r17,52(sp)
   31534:	d8c01904 	addi	r3,sp,100
   31538:	003fee06 	br	314f4 <___vfprintf_internal_r+0xd04>
   3153c:	d8814717 	ldw	r2,1308(sp)
   31540:	143fffc4 	addi	r16,r2,-1
   31544:	043e970e 	bge	zero,r16,30fa4 <___vfprintf_internal_r+0x7b4>
   31548:	00800404 	movi	r2,16
   3154c:	1400180e 	bge	r2,r16,315b0 <___vfprintf_internal_r+0xdc0>
   31550:	1029883a 	mov	r20,r2
   31554:	07000074 	movhi	fp,1
   31558:	e7002d84 	addi	fp,fp,182
   3155c:	054001c4 	movi	r21,7
   31560:	00000306 	br	31570 <___vfprintf_internal_r+0xd80>
   31564:	9cc00204 	addi	r19,r19,8
   31568:	843ffc04 	addi	r16,r16,-16
   3156c:	a400120e 	bge	r20,r16,315b8 <___vfprintf_internal_r+0xdc8>
   31570:	94800404 	addi	r18,r18,16
   31574:	8c400044 	addi	r17,r17,1
   31578:	9f000015 	stw	fp,0(r19)
   3157c:	9d000115 	stw	r20,4(r19)
   31580:	dc800e15 	stw	r18,56(sp)
   31584:	dc400d15 	stw	r17,52(sp)
   31588:	ac7ff60e 	bge	r21,r17,31564 <___vfprintf_internal_r+0xd74>
   3158c:	d9014f17 	ldw	r4,1340(sp)
   31590:	b00b883a 	mov	r5,r22
   31594:	d9800c04 	addi	r6,sp,48
   31598:	00307980 	call	30798 <__sprint_r>
   3159c:	103e4c1e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   315a0:	dc800e17 	ldw	r18,56(sp)
   315a4:	dc400d17 	ldw	r17,52(sp)
   315a8:	dcc01904 	addi	r19,sp,100
   315ac:	003fee06 	br	31568 <___vfprintf_internal_r+0xd78>
   315b0:	07000074 	movhi	fp,1
   315b4:	e7002d84 	addi	fp,fp,182
   315b8:	9425883a 	add	r18,r18,r16
   315bc:	8c400044 	addi	r17,r17,1
   315c0:	008001c4 	movi	r2,7
   315c4:	9f000015 	stw	fp,0(r19)
   315c8:	9c000115 	stw	r16,4(r19)
   315cc:	dc800e15 	stw	r18,56(sp)
   315d0:	dc400d15 	stw	r17,52(sp)
   315d4:	147e720e 	bge	r2,r17,30fa0 <___vfprintf_internal_r+0x7b0>
   315d8:	d9014f17 	ldw	r4,1340(sp)
   315dc:	b00b883a 	mov	r5,r22
   315e0:	d9800c04 	addi	r6,sp,48
   315e4:	00307980 	call	30798 <__sprint_r>
   315e8:	103e391e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   315ec:	dc800e17 	ldw	r18,56(sp)
   315f0:	dc400d17 	ldw	r17,52(sp)
   315f4:	dcc01904 	addi	r19,sp,100
   315f8:	003e6a06 	br	30fa4 <___vfprintf_internal_r+0x7b4>
   315fc:	d9014f17 	ldw	r4,1340(sp)
   31600:	b00b883a 	mov	r5,r22
   31604:	d9800c04 	addi	r6,sp,48
   31608:	d9c15115 	stw	r7,1348(sp)
   3160c:	00307980 	call	30798 <__sprint_r>
   31610:	d9c15117 	ldw	r7,1348(sp)
   31614:	103e2e1e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   31618:	dc800e17 	ldw	r18,56(sp)
   3161c:	dc400d17 	ldw	r17,52(sp)
   31620:	dd401904 	addi	r21,sp,100
   31624:	003dba06 	br	30d10 <___vfprintf_internal_r+0x520>
   31628:	d9014f17 	ldw	r4,1340(sp)
   3162c:	b00b883a 	mov	r5,r22
   31630:	d9800c04 	addi	r6,sp,48
   31634:	00307980 	call	30798 <__sprint_r>
   31638:	103e251e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   3163c:	dc800e17 	ldw	r18,56(sp)
   31640:	dc400d17 	ldw	r17,52(sp)
   31644:	dcc01904 	addi	r19,sp,100
   31648:	003e4206 	br	30f54 <___vfprintf_internal_r+0x764>
   3164c:	d9014f17 	ldw	r4,1340(sp)
   31650:	b00b883a 	mov	r5,r22
   31654:	d9800c04 	addi	r6,sp,48
   31658:	00307980 	call	30798 <__sprint_r>
   3165c:	103e1c1e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   31660:	dc800e17 	ldw	r18,56(sp)
   31664:	dc400d17 	ldw	r17,52(sp)
   31668:	d8c01904 	addi	r3,sp,100
   3166c:	003e2e06 	br	30f28 <___vfprintf_internal_r+0x738>
   31670:	d9414c17 	ldw	r5,1328(sp)
   31674:	2880004c 	andi	r2,r5,1
   31678:	1005003a 	cmpeq	r2,r2,zero
   3167c:	103dda1e 	bne	r2,zero,30de8 <___vfprintf_internal_r+0x5f8>
   31680:	003e9f06 	br	31100 <___vfprintf_internal_r+0x910>
   31684:	d8c14117 	ldw	r3,1284(sp)
   31688:	9125883a 	add	r18,r18,r4
   3168c:	8c400044 	addi	r17,r17,1
   31690:	008001c4 	movi	r2,7
   31694:	a8c00015 	stw	r3,0(r21)
   31698:	a9000115 	stw	r4,4(r21)
   3169c:	dc800e15 	stw	r18,56(sp)
   316a0:	dc400d15 	stw	r17,52(sp)
   316a4:	14426616 	blt	r2,r17,32040 <___vfprintf_internal_r+0x1850>
   316a8:	a8c00204 	addi	r3,r21,8
   316ac:	d9414917 	ldw	r5,1316(sp)
   316b0:	00800044 	movi	r2,1
   316b4:	94800044 	addi	r18,r18,1
   316b8:	8c400044 	addi	r17,r17,1
   316bc:	18800115 	stw	r2,4(r3)
   316c0:	008001c4 	movi	r2,7
   316c4:	19400015 	stw	r5,0(r3)
   316c8:	dc800e15 	stw	r18,56(sp)
   316cc:	dc400d15 	stw	r17,52(sp)
   316d0:	2021883a 	mov	r16,r4
   316d4:	14425016 	blt	r2,r17,32018 <___vfprintf_internal_r+0x1828>
   316d8:	19400204 	addi	r5,r3,8
   316dc:	d9814717 	ldw	r6,1308(sp)
   316e0:	8c400044 	addi	r17,r17,1
   316e4:	dc400d15 	stw	r17,52(sp)
   316e8:	3107c83a 	sub	r3,r6,r4
   316ec:	d9014117 	ldw	r4,1284(sp)
   316f0:	90e5883a 	add	r18,r18,r3
   316f4:	28c00115 	stw	r3,4(r5)
   316f8:	8105883a 	add	r2,r16,r4
   316fc:	28800015 	stw	r2,0(r5)
   31700:	008001c4 	movi	r2,7
   31704:	dc800e15 	stw	r18,56(sp)
   31708:	147f1d16 	blt	r2,r17,31380 <___vfprintf_internal_r+0xb90>
   3170c:	28c00204 	addi	r3,r5,8
   31710:	003db506 	br	30de8 <___vfprintf_internal_r+0x5f8>
   31714:	3c000017 	ldw	r16,0(r7)
   31718:	3c400117 	ldw	r17,4(r7)
   3171c:	39800204 	addi	r6,r7,8
   31720:	01000044 	movi	r4,1
   31724:	d9814015 	stw	r6,1280(sp)
   31728:	d8000405 	stb	zero,16(sp)
   3172c:	003ebe06 	br	31228 <___vfprintf_internal_r+0xa38>
   31730:	3c000017 	ldw	r16,0(r7)
   31734:	3c400117 	ldw	r17,4(r7)
   31738:	38800204 	addi	r2,r7,8
   3173c:	d8814015 	stw	r2,1280(sp)
   31740:	003eb706 	br	31220 <___vfprintf_internal_r+0xa30>
   31744:	3c000017 	ldw	r16,0(r7)
   31748:	3c400117 	ldw	r17,4(r7)
   3174c:	39000204 	addi	r4,r7,8
   31750:	d9014015 	stw	r4,1280(sp)
   31754:	0009883a 	mov	r4,zero
   31758:	d8000405 	stb	zero,16(sp)
   3175c:	003eb206 	br	31228 <___vfprintf_internal_r+0xa38>
   31760:	38c00017 	ldw	r3,0(r7)
   31764:	39c00104 	addi	r7,r7,4
   31768:	d8c14a15 	stw	r3,1320(sp)
   3176c:	1800d10e 	bge	r3,zero,31ab4 <___vfprintf_internal_r+0x12c4>
   31770:	00c7c83a 	sub	r3,zero,r3
   31774:	d8c14a15 	stw	r3,1320(sp)
   31778:	d9014c17 	ldw	r4,1328(sp)
   3177c:	b8c00007 	ldb	r3,0(r23)
   31780:	21000114 	ori	r4,r4,4
   31784:	d9014c15 	stw	r4,1328(sp)
   31788:	003c9806 	br	309ec <___vfprintf_internal_r+0x1fc>
   3178c:	d9814c17 	ldw	r6,1328(sp)
   31790:	3080080c 	andi	r2,r6,32
   31794:	1001f026 	beq	r2,zero,31f58 <___vfprintf_internal_r+0x1768>
   31798:	d9014b17 	ldw	r4,1324(sp)
   3179c:	38800017 	ldw	r2,0(r7)
   317a0:	39c00104 	addi	r7,r7,4
   317a4:	d9c14015 	stw	r7,1280(sp)
   317a8:	2007d7fa 	srai	r3,r4,31
   317ac:	d9c14017 	ldw	r7,1280(sp)
   317b0:	11000015 	stw	r4,0(r2)
   317b4:	10c00115 	stw	r3,4(r2)
   317b8:	003c6906 	br	30960 <___vfprintf_internal_r+0x170>
   317bc:	b8c00007 	ldb	r3,0(r23)
   317c0:	00801b04 	movi	r2,108
   317c4:	18824f26 	beq	r3,r2,32104 <___vfprintf_internal_r+0x1914>
   317c8:	d9414c17 	ldw	r5,1328(sp)
   317cc:	29400414 	ori	r5,r5,16
   317d0:	d9414c15 	stw	r5,1328(sp)
   317d4:	003c8506 	br	309ec <___vfprintf_internal_r+0x1fc>
   317d8:	d9814c17 	ldw	r6,1328(sp)
   317dc:	b8c00007 	ldb	r3,0(r23)
   317e0:	31800814 	ori	r6,r6,32
   317e4:	d9814c15 	stw	r6,1328(sp)
   317e8:	003c8006 	br	309ec <___vfprintf_internal_r+0x1fc>
   317ec:	d8814c17 	ldw	r2,1328(sp)
   317f0:	3c000017 	ldw	r16,0(r7)
   317f4:	00c01e04 	movi	r3,120
   317f8:	10800094 	ori	r2,r2,2
   317fc:	d8814c15 	stw	r2,1328(sp)
   31800:	39c00104 	addi	r7,r7,4
   31804:	01400074 	movhi	r5,1
   31808:	29401604 	addi	r5,r5,88
   3180c:	00800c04 	movi	r2,48
   31810:	0023883a 	mov	r17,zero
   31814:	01000084 	movi	r4,2
   31818:	d9c14015 	stw	r7,1280(sp)
   3181c:	d8c14d15 	stw	r3,1332(sp)
   31820:	d9414415 	stw	r5,1296(sp)
   31824:	d8800445 	stb	r2,17(sp)
   31828:	d8c00485 	stb	r3,18(sp)
   3182c:	d8000405 	stb	zero,16(sp)
   31830:	003e7d06 	br	31228 <___vfprintf_internal_r+0xa38>
   31834:	d8814c17 	ldw	r2,1328(sp)
   31838:	b8c00007 	ldb	r3,0(r23)
   3183c:	10801014 	ori	r2,r2,64
   31840:	d8814c15 	stw	r2,1328(sp)
   31844:	003c6906 	br	309ec <___vfprintf_internal_r+0x1fc>
   31848:	d9414c17 	ldw	r5,1328(sp)
   3184c:	2880020c 	andi	r2,r5,8
   31850:	1001df26 	beq	r2,zero,31fd0 <___vfprintf_internal_r+0x17e0>
   31854:	39800017 	ldw	r6,0(r7)
   31858:	38800204 	addi	r2,r7,8
   3185c:	d8814015 	stw	r2,1280(sp)
   31860:	d9814215 	stw	r6,1288(sp)
   31864:	39c00117 	ldw	r7,4(r7)
   31868:	d9c14315 	stw	r7,1292(sp)
   3186c:	d9014217 	ldw	r4,1288(sp)
   31870:	d9414317 	ldw	r5,1292(sp)
   31874:	00371900 	call	37190 <__isinfd>
   31878:	10021726 	beq	r2,zero,320d8 <___vfprintf_internal_r+0x18e8>
   3187c:	d9014217 	ldw	r4,1288(sp)
   31880:	d9414317 	ldw	r5,1292(sp)
   31884:	000d883a 	mov	r6,zero
   31888:	000f883a 	mov	r7,zero
   3188c:	00391d80 	call	391d8 <__ltdf2>
   31890:	1002ca16 	blt	r2,zero,323bc <___vfprintf_internal_r+0x1bcc>
   31894:	d9414d17 	ldw	r5,1332(sp)
   31898:	008011c4 	movi	r2,71
   3189c:	11420a16 	blt	r2,r5,320c8 <___vfprintf_internal_r+0x18d8>
   318a0:	01800074 	movhi	r6,1
   318a4:	31801b04 	addi	r6,r6,108
   318a8:	d9814115 	stw	r6,1284(sp)
   318ac:	d9014c17 	ldw	r4,1328(sp)
   318b0:	00c000c4 	movi	r3,3
   318b4:	00bfdfc4 	movi	r2,-129
   318b8:	2088703a 	and	r4,r4,r2
   318bc:	180f883a 	mov	r7,r3
   318c0:	d8c14515 	stw	r3,1300(sp)
   318c4:	d9014c15 	stw	r4,1328(sp)
   318c8:	d8014615 	stw	zero,1304(sp)
   318cc:	003e6a06 	br	31278 <___vfprintf_internal_r+0xa88>
   318d0:	38800017 	ldw	r2,0(r7)
   318d4:	00c00044 	movi	r3,1
   318d8:	39c00104 	addi	r7,r7,4
   318dc:	d9c14015 	stw	r7,1280(sp)
   318e0:	d9000f04 	addi	r4,sp,60
   318e4:	180f883a 	mov	r7,r3
   318e8:	d8c14515 	stw	r3,1300(sp)
   318ec:	d9014115 	stw	r4,1284(sp)
   318f0:	d8800f05 	stb	r2,60(sp)
   318f4:	d8000405 	stb	zero,16(sp)
   318f8:	003cac06 	br	30bac <___vfprintf_internal_r+0x3bc>
   318fc:	01400074 	movhi	r5,1
   31900:	29402104 	addi	r5,r5,132
   31904:	d9414415 	stw	r5,1296(sp)
   31908:	d9814c17 	ldw	r6,1328(sp)
   3190c:	3080080c 	andi	r2,r6,32
   31910:	1000f926 	beq	r2,zero,31cf8 <___vfprintf_internal_r+0x1508>
   31914:	3c000017 	ldw	r16,0(r7)
   31918:	3c400117 	ldw	r17,4(r7)
   3191c:	38800204 	addi	r2,r7,8
   31920:	d8814015 	stw	r2,1280(sp)
   31924:	d9414c17 	ldw	r5,1328(sp)
   31928:	2880004c 	andi	r2,r5,1
   3192c:	1005003a 	cmpeq	r2,r2,zero
   31930:	1000b31e 	bne	r2,zero,31c00 <___vfprintf_internal_r+0x1410>
   31934:	8444b03a 	or	r2,r16,r17
   31938:	1000b126 	beq	r2,zero,31c00 <___vfprintf_internal_r+0x1410>
   3193c:	d9814d17 	ldw	r6,1332(sp)
   31940:	29400094 	ori	r5,r5,2
   31944:	00800c04 	movi	r2,48
   31948:	01000084 	movi	r4,2
   3194c:	d9414c15 	stw	r5,1328(sp)
   31950:	d8800445 	stb	r2,17(sp)
   31954:	d9800485 	stb	r6,18(sp)
   31958:	d8000405 	stb	zero,16(sp)
   3195c:	003e3206 	br	31228 <___vfprintf_internal_r+0xa38>
   31960:	01800074 	movhi	r6,1
   31964:	31801604 	addi	r6,r6,88
   31968:	d9814415 	stw	r6,1296(sp)
   3196c:	003fe606 	br	31908 <___vfprintf_internal_r+0x1118>
   31970:	00800ac4 	movi	r2,43
   31974:	d8800405 	stb	r2,16(sp)
   31978:	b8c00007 	ldb	r3,0(r23)
   3197c:	003c1b06 	br	309ec <___vfprintf_internal_r+0x1fc>
   31980:	d8814c17 	ldw	r2,1328(sp)
   31984:	b8c00007 	ldb	r3,0(r23)
   31988:	10800054 	ori	r2,r2,1
   3198c:	d8814c15 	stw	r2,1328(sp)
   31990:	003c1606 	br	309ec <___vfprintf_internal_r+0x1fc>
   31994:	d8800407 	ldb	r2,16(sp)
   31998:	1000461e 	bne	r2,zero,31ab4 <___vfprintf_internal_r+0x12c4>
   3199c:	00800804 	movi	r2,32
   319a0:	d8800405 	stb	r2,16(sp)
   319a4:	b8c00007 	ldb	r3,0(r23)
   319a8:	003c1006 	br	309ec <___vfprintf_internal_r+0x1fc>
   319ac:	d9814c17 	ldw	r6,1328(sp)
   319b0:	b8c00007 	ldb	r3,0(r23)
   319b4:	31800214 	ori	r6,r6,8
   319b8:	d9814c15 	stw	r6,1328(sp)
   319bc:	003c0b06 	br	309ec <___vfprintf_internal_r+0x1fc>
   319c0:	0007883a 	mov	r3,zero
   319c4:	01000244 	movi	r4,9
   319c8:	188002a4 	muli	r2,r3,10
   319cc:	b8c00007 	ldb	r3,0(r23)
   319d0:	d9814d17 	ldw	r6,1332(sp)
   319d4:	bdc00044 	addi	r23,r23,1
   319d8:	d8c14d15 	stw	r3,1332(sp)
   319dc:	d9414d17 	ldw	r5,1332(sp)
   319e0:	3085883a 	add	r2,r6,r2
   319e4:	10fff404 	addi	r3,r2,-48
   319e8:	28bff404 	addi	r2,r5,-48
   319ec:	20bff62e 	bgeu	r4,r2,319c8 <___vfprintf_internal_r+0x11d8>
   319f0:	d8c14a15 	stw	r3,1320(sp)
   319f4:	003bff06 	br	309f4 <___vfprintf_internal_r+0x204>
   319f8:	d9414c17 	ldw	r5,1328(sp)
   319fc:	b8c00007 	ldb	r3,0(r23)
   31a00:	29402014 	ori	r5,r5,128
   31a04:	d9414c15 	stw	r5,1328(sp)
   31a08:	003bf806 	br	309ec <___vfprintf_internal_r+0x1fc>
   31a0c:	b8c00007 	ldb	r3,0(r23)
   31a10:	00800a84 	movi	r2,42
   31a14:	bdc00044 	addi	r23,r23,1
   31a18:	18831526 	beq	r3,r2,32670 <___vfprintf_internal_r+0x1e80>
   31a1c:	d8c14d15 	stw	r3,1332(sp)
   31a20:	18bff404 	addi	r2,r3,-48
   31a24:	00c00244 	movi	r3,9
   31a28:	18827836 	bltu	r3,r2,3240c <___vfprintf_internal_r+0x1c1c>
   31a2c:	000d883a 	mov	r6,zero
   31a30:	308002a4 	muli	r2,r6,10
   31a34:	b9800007 	ldb	r6,0(r23)
   31a38:	d9414d17 	ldw	r5,1332(sp)
   31a3c:	bdc00044 	addi	r23,r23,1
   31a40:	d9814d15 	stw	r6,1332(sp)
   31a44:	d9014d17 	ldw	r4,1332(sp)
   31a48:	1145883a 	add	r2,r2,r5
   31a4c:	11bff404 	addi	r6,r2,-48
   31a50:	20bff404 	addi	r2,r4,-48
   31a54:	18bff62e 	bgeu	r3,r2,31a30 <___vfprintf_internal_r+0x1240>
   31a58:	3027883a 	mov	r19,r6
   31a5c:	303be50e 	bge	r6,zero,309f4 <___vfprintf_internal_r+0x204>
   31a60:	04ffffc4 	movi	r19,-1
   31a64:	003be306 	br	309f4 <___vfprintf_internal_r+0x204>
   31a68:	d8000405 	stb	zero,16(sp)
   31a6c:	39800017 	ldw	r6,0(r7)
   31a70:	39c00104 	addi	r7,r7,4
   31a74:	d9c14015 	stw	r7,1280(sp)
   31a78:	d9814115 	stw	r6,1284(sp)
   31a7c:	3001c926 	beq	r6,zero,321a4 <___vfprintf_internal_r+0x19b4>
   31a80:	98000e16 	blt	r19,zero,31abc <___vfprintf_internal_r+0x12cc>
   31a84:	d9014117 	ldw	r4,1284(sp)
   31a88:	000b883a 	mov	r5,zero
   31a8c:	980d883a 	mov	r6,r19
   31a90:	00358ac0 	call	358ac <memchr>
   31a94:	10025926 	beq	r2,zero,323fc <___vfprintf_internal_r+0x1c0c>
   31a98:	d8c14117 	ldw	r3,1284(sp)
   31a9c:	10cfc83a 	sub	r7,r2,r3
   31aa0:	99c19e16 	blt	r19,r7,3211c <___vfprintf_internal_r+0x192c>
   31aa4:	d9c14515 	stw	r7,1300(sp)
   31aa8:	38000916 	blt	r7,zero,31ad0 <___vfprintf_internal_r+0x12e0>
   31aac:	d8014615 	stw	zero,1304(sp)
   31ab0:	003df106 	br	31278 <___vfprintf_internal_r+0xa88>
   31ab4:	b8c00007 	ldb	r3,0(r23)
   31ab8:	003bcc06 	br	309ec <___vfprintf_internal_r+0x1fc>
   31abc:	d9014117 	ldw	r4,1284(sp)
   31ac0:	00307240 	call	30724 <strlen>
   31ac4:	d8814515 	stw	r2,1300(sp)
   31ac8:	100f883a 	mov	r7,r2
   31acc:	103ff70e 	bge	r2,zero,31aac <___vfprintf_internal_r+0x12bc>
   31ad0:	d8014515 	stw	zero,1300(sp)
   31ad4:	d8014615 	stw	zero,1304(sp)
   31ad8:	003de706 	br	31278 <___vfprintf_internal_r+0xa88>
   31adc:	20c03fcc 	andi	r3,r4,255
   31ae0:	00800044 	movi	r2,1
   31ae4:	18802d26 	beq	r3,r2,31b9c <___vfprintf_internal_r+0x13ac>
   31ae8:	18800e36 	bltu	r3,r2,31b24 <___vfprintf_internal_r+0x1334>
   31aec:	00800084 	movi	r2,2
   31af0:	1880fa26 	beq	r3,r2,31edc <___vfprintf_internal_r+0x16ec>
   31af4:	01000074 	movhi	r4,1
   31af8:	21002604 	addi	r4,r4,152
   31afc:	00307240 	call	30724 <strlen>
   31b00:	100f883a 	mov	r7,r2
   31b04:	dcc14515 	stw	r19,1300(sp)
   31b08:	9880010e 	bge	r19,r2,31b10 <___vfprintf_internal_r+0x1320>
   31b0c:	d8814515 	stw	r2,1300(sp)
   31b10:	00800074 	movhi	r2,1
   31b14:	10802604 	addi	r2,r2,152
   31b18:	dcc14615 	stw	r19,1304(sp)
   31b1c:	d8814115 	stw	r2,1284(sp)
   31b20:	003dd506 	br	31278 <___vfprintf_internal_r+0xa88>
   31b24:	d9401904 	addi	r5,sp,100
   31b28:	dd000f04 	addi	r20,sp,60
   31b2c:	d9414115 	stw	r5,1284(sp)
   31b30:	880a977a 	slli	r5,r17,29
   31b34:	d9814117 	ldw	r6,1284(sp)
   31b38:	8004d0fa 	srli	r2,r16,3
   31b3c:	8806d0fa 	srli	r3,r17,3
   31b40:	810001cc 	andi	r4,r16,7
   31b44:	2884b03a 	or	r2,r5,r2
   31b48:	31bfffc4 	addi	r6,r6,-1
   31b4c:	21000c04 	addi	r4,r4,48
   31b50:	d9814115 	stw	r6,1284(sp)
   31b54:	10cab03a 	or	r5,r2,r3
   31b58:	31000005 	stb	r4,0(r6)
   31b5c:	1021883a 	mov	r16,r2
   31b60:	1823883a 	mov	r17,r3
   31b64:	283ff21e 	bne	r5,zero,31b30 <___vfprintf_internal_r+0x1340>
   31b68:	d8c14c17 	ldw	r3,1328(sp)
   31b6c:	1880004c 	andi	r2,r3,1
   31b70:	1005003a 	cmpeq	r2,r2,zero
   31b74:	103db91e 	bne	r2,zero,3125c <___vfprintf_internal_r+0xa6c>
   31b78:	20803fcc 	andi	r2,r4,255
   31b7c:	1080201c 	xori	r2,r2,128
   31b80:	10bfe004 	addi	r2,r2,-128
   31b84:	00c00c04 	movi	r3,48
   31b88:	10fdb426 	beq	r2,r3,3125c <___vfprintf_internal_r+0xa6c>
   31b8c:	31bfffc4 	addi	r6,r6,-1
   31b90:	d9814115 	stw	r6,1284(sp)
   31b94:	30c00005 	stb	r3,0(r6)
   31b98:	003db006 	br	3125c <___vfprintf_internal_r+0xa6c>
   31b9c:	88800068 	cmpgeui	r2,r17,1
   31ba0:	10002c1e 	bne	r2,zero,31c54 <___vfprintf_internal_r+0x1464>
   31ba4:	8800021e 	bne	r17,zero,31bb0 <___vfprintf_internal_r+0x13c0>
   31ba8:	00800244 	movi	r2,9
   31bac:	14002936 	bltu	r2,r16,31c54 <___vfprintf_internal_r+0x1464>
   31bb0:	d90018c4 	addi	r4,sp,99
   31bb4:	dd000f04 	addi	r20,sp,60
   31bb8:	d9014115 	stw	r4,1284(sp)
   31bbc:	d9014117 	ldw	r4,1284(sp)
   31bc0:	80800c04 	addi	r2,r16,48
   31bc4:	20800005 	stb	r2,0(r4)
   31bc8:	003da406 	br	3125c <___vfprintf_internal_r+0xa6c>
   31bcc:	dc400d17 	ldw	r17,52(sp)
   31bd0:	07000074 	movhi	fp,1
   31bd4:	e7002d84 	addi	fp,fp,182
   31bd8:	9425883a 	add	r18,r18,r16
   31bdc:	8c400044 	addi	r17,r17,1
   31be0:	008001c4 	movi	r2,7
   31be4:	1f000015 	stw	fp,0(r3)
   31be8:	1c000115 	stw	r16,4(r3)
   31bec:	dc800e15 	stw	r18,56(sp)
   31bf0:	dc400d15 	stw	r17,52(sp)
   31bf4:	147de216 	blt	r2,r17,31380 <___vfprintf_internal_r+0xb90>
   31bf8:	18c00204 	addi	r3,r3,8
   31bfc:	003c7a06 	br	30de8 <___vfprintf_internal_r+0x5f8>
   31c00:	01000084 	movi	r4,2
   31c04:	d8000405 	stb	zero,16(sp)
   31c08:	003d8706 	br	31228 <___vfprintf_internal_r+0xa38>
   31c0c:	d9814c17 	ldw	r6,1328(sp)
   31c10:	30c4703a 	and	r2,r6,r3
   31c14:	1005003a 	cmpeq	r2,r2,zero
   31c18:	103cb926 	beq	r2,zero,30f00 <___vfprintf_internal_r+0x710>
   31c1c:	d9014117 	ldw	r4,1284(sp)
   31c20:	94800044 	addi	r18,r18,1
   31c24:	8c400044 	addi	r17,r17,1
   31c28:	008001c4 	movi	r2,7
   31c2c:	a9000015 	stw	r4,0(r21)
   31c30:	a8c00115 	stw	r3,4(r21)
   31c34:	dc800e15 	stw	r18,56(sp)
   31c38:	dc400d15 	stw	r17,52(sp)
   31c3c:	147e6616 	blt	r2,r17,315d8 <___vfprintf_internal_r+0xde8>
   31c40:	acc00204 	addi	r19,r21,8
   31c44:	003cd706 	br	30fa4 <___vfprintf_internal_r+0x7b4>
   31c48:	07000074 	movhi	fp,1
   31c4c:	e7002d84 	addi	fp,fp,182
   31c50:	003c4f06 	br	30d90 <___vfprintf_internal_r+0x5a0>
   31c54:	dd000f04 	addi	r20,sp,60
   31c58:	dc801904 	addi	r18,sp,100
   31c5c:	8009883a 	mov	r4,r16
   31c60:	880b883a 	mov	r5,r17
   31c64:	01800284 	movi	r6,10
   31c68:	000f883a 	mov	r7,zero
   31c6c:	0037ee80 	call	37ee8 <__umoddi3>
   31c70:	12000c04 	addi	r8,r2,48
   31c74:	94bfffc4 	addi	r18,r18,-1
   31c78:	8009883a 	mov	r4,r16
   31c7c:	880b883a 	mov	r5,r17
   31c80:	01800284 	movi	r6,10
   31c84:	000f883a 	mov	r7,zero
   31c88:	92000005 	stb	r8,0(r18)
   31c8c:	003790c0 	call	3790c <__udivdi3>
   31c90:	1009883a 	mov	r4,r2
   31c94:	1021883a 	mov	r16,r2
   31c98:	18800068 	cmpgeui	r2,r3,1
   31c9c:	1823883a 	mov	r17,r3
   31ca0:	103fee1e 	bne	r2,zero,31c5c <___vfprintf_internal_r+0x146c>
   31ca4:	1800021e 	bne	r3,zero,31cb0 <___vfprintf_internal_r+0x14c0>
   31ca8:	00800244 	movi	r2,9
   31cac:	113feb36 	bltu	r2,r4,31c5c <___vfprintf_internal_r+0x146c>
   31cb0:	94bfffc4 	addi	r18,r18,-1
   31cb4:	dc814115 	stw	r18,1284(sp)
   31cb8:	003fc006 	br	31bbc <___vfprintf_internal_r+0x13cc>
   31cbc:	d9014c17 	ldw	r4,1328(sp)
   31cc0:	2080004c 	andi	r2,r4,1
   31cc4:	10009a1e 	bne	r2,zero,31f30 <___vfprintf_internal_r+0x1740>
   31cc8:	d9401904 	addi	r5,sp,100
   31ccc:	dd000f04 	addi	r20,sp,60
   31cd0:	d9414115 	stw	r5,1284(sp)
   31cd4:	003d6106 	br	3125c <___vfprintf_internal_r+0xa6c>
   31cd8:	d9014f17 	ldw	r4,1340(sp)
   31cdc:	b00b883a 	mov	r5,r22
   31ce0:	d9800c04 	addi	r6,sp,48
   31ce4:	00307980 	call	30798 <__sprint_r>
   31ce8:	103c791e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   31cec:	dc800e17 	ldw	r18,56(sp)
   31cf0:	d8c01904 	addi	r3,sp,100
   31cf4:	003cff06 	br	310f4 <___vfprintf_internal_r+0x904>
   31cf8:	d8c14c17 	ldw	r3,1328(sp)
   31cfc:	1880040c 	andi	r2,r3,16
   31d00:	1000711e 	bne	r2,zero,31ec8 <___vfprintf_internal_r+0x16d8>
   31d04:	d9014c17 	ldw	r4,1328(sp)
   31d08:	2080100c 	andi	r2,r4,64
   31d0c:	10006e26 	beq	r2,zero,31ec8 <___vfprintf_internal_r+0x16d8>
   31d10:	3c00000b 	ldhu	r16,0(r7)
   31d14:	0023883a 	mov	r17,zero
   31d18:	39c00104 	addi	r7,r7,4
   31d1c:	d9c14015 	stw	r7,1280(sp)
   31d20:	003f0006 	br	31924 <___vfprintf_internal_r+0x1134>
   31d24:	dc400d17 	ldw	r17,52(sp)
   31d28:	07000074 	movhi	fp,1
   31d2c:	e7002d84 	addi	fp,fp,182
   31d30:	9425883a 	add	r18,r18,r16
   31d34:	8c400044 	addi	r17,r17,1
   31d38:	008001c4 	movi	r2,7
   31d3c:	1f000015 	stw	fp,0(r3)
   31d40:	1c000115 	stw	r16,4(r3)
   31d44:	dc800e15 	stw	r18,56(sp)
   31d48:	dc400d15 	stw	r17,52(sp)
   31d4c:	147d7616 	blt	r2,r17,31328 <___vfprintf_internal_r+0xb38>
   31d50:	18c00204 	addi	r3,r3,8
   31d54:	003d7b06 	br	31344 <___vfprintf_internal_r+0xb54>
   31d58:	dc800e17 	ldw	r18,56(sp)
   31d5c:	dc400d17 	ldw	r17,52(sp)
   31d60:	07000074 	movhi	fp,1
   31d64:	e7003184 	addi	fp,fp,198
   31d68:	003bc006 	br	30c6c <___vfprintf_internal_r+0x47c>
   31d6c:	d9014f17 	ldw	r4,1340(sp)
   31d70:	b00b883a 	mov	r5,r22
   31d74:	d9800c04 	addi	r6,sp,48
   31d78:	00307980 	call	30798 <__sprint_r>
   31d7c:	103c541e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   31d80:	dc800e17 	ldw	r18,56(sp)
   31d84:	d8c01904 	addi	r3,sp,100
   31d88:	003ce906 	br	31130 <___vfprintf_internal_r+0x940>
   31d8c:	3c000017 	ldw	r16,0(r7)
   31d90:	0009883a 	mov	r4,zero
   31d94:	39c00104 	addi	r7,r7,4
   31d98:	0023883a 	mov	r17,zero
   31d9c:	d9c14015 	stw	r7,1280(sp)
   31da0:	d8000405 	stb	zero,16(sp)
   31da4:	003d2006 	br	31228 <___vfprintf_internal_r+0xa38>
   31da8:	38800017 	ldw	r2,0(r7)
   31dac:	39c00104 	addi	r7,r7,4
   31db0:	d9c14015 	stw	r7,1280(sp)
   31db4:	1023d7fa 	srai	r17,r2,31
   31db8:	1021883a 	mov	r16,r2
   31dbc:	003d1806 	br	31220 <___vfprintf_internal_r+0xa30>
   31dc0:	3c000017 	ldw	r16,0(r7)
   31dc4:	01000044 	movi	r4,1
   31dc8:	39c00104 	addi	r7,r7,4
   31dcc:	0023883a 	mov	r17,zero
   31dd0:	d9c14015 	stw	r7,1280(sp)
   31dd4:	d8000405 	stb	zero,16(sp)
   31dd8:	003d1306 	br	31228 <___vfprintf_internal_r+0xa38>
   31ddc:	00800074 	movhi	r2,1
   31de0:	10802d04 	addi	r2,r2,180
   31de4:	94800044 	addi	r18,r18,1
   31de8:	8c400044 	addi	r17,r17,1
   31dec:	a8800015 	stw	r2,0(r21)
   31df0:	00c00044 	movi	r3,1
   31df4:	008001c4 	movi	r2,7
   31df8:	a8c00115 	stw	r3,4(r21)
   31dfc:	dc800e15 	stw	r18,56(sp)
   31e00:	dc400d15 	stw	r17,52(sp)
   31e04:	1440ca16 	blt	r2,r17,32130 <___vfprintf_internal_r+0x1940>
   31e08:	a8c00204 	addi	r3,r21,8
   31e0c:	2000061e 	bne	r4,zero,31e28 <___vfprintf_internal_r+0x1638>
   31e10:	d9414717 	ldw	r5,1308(sp)
   31e14:	2800041e 	bne	r5,zero,31e28 <___vfprintf_internal_r+0x1638>
   31e18:	d9814c17 	ldw	r6,1328(sp)
   31e1c:	3080004c 	andi	r2,r6,1
   31e20:	1005003a 	cmpeq	r2,r2,zero
   31e24:	103bf01e 	bne	r2,zero,30de8 <___vfprintf_internal_r+0x5f8>
   31e28:	00800044 	movi	r2,1
   31e2c:	dc400d17 	ldw	r17,52(sp)
   31e30:	18800115 	stw	r2,4(r3)
   31e34:	d8814917 	ldw	r2,1316(sp)
   31e38:	94800044 	addi	r18,r18,1
   31e3c:	8c400044 	addi	r17,r17,1
   31e40:	18800015 	stw	r2,0(r3)
   31e44:	008001c4 	movi	r2,7
   31e48:	dc800e15 	stw	r18,56(sp)
   31e4c:	dc400d15 	stw	r17,52(sp)
   31e50:	1440ca16 	blt	r2,r17,3217c <___vfprintf_internal_r+0x198c>
   31e54:	18c00204 	addi	r3,r3,8
   31e58:	0121c83a 	sub	r16,zero,r4
   31e5c:	0400500e 	bge	zero,r16,31fa0 <___vfprintf_internal_r+0x17b0>
   31e60:	00800404 	movi	r2,16
   31e64:	1400800e 	bge	r2,r16,32068 <___vfprintf_internal_r+0x1878>
   31e68:	1027883a 	mov	r19,r2
   31e6c:	07000074 	movhi	fp,1
   31e70:	e7002d84 	addi	fp,fp,182
   31e74:	050001c4 	movi	r20,7
   31e78:	00000306 	br	31e88 <___vfprintf_internal_r+0x1698>
   31e7c:	18c00204 	addi	r3,r3,8
   31e80:	843ffc04 	addi	r16,r16,-16
   31e84:	9c007a0e 	bge	r19,r16,32070 <___vfprintf_internal_r+0x1880>
   31e88:	94800404 	addi	r18,r18,16
   31e8c:	8c400044 	addi	r17,r17,1
   31e90:	1f000015 	stw	fp,0(r3)
   31e94:	1cc00115 	stw	r19,4(r3)
   31e98:	dc800e15 	stw	r18,56(sp)
   31e9c:	dc400d15 	stw	r17,52(sp)
   31ea0:	a47ff60e 	bge	r20,r17,31e7c <___vfprintf_internal_r+0x168c>
   31ea4:	d9014f17 	ldw	r4,1340(sp)
   31ea8:	b00b883a 	mov	r5,r22
   31eac:	d9800c04 	addi	r6,sp,48
   31eb0:	00307980 	call	30798 <__sprint_r>
   31eb4:	103c061e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   31eb8:	dc800e17 	ldw	r18,56(sp)
   31ebc:	dc400d17 	ldw	r17,52(sp)
   31ec0:	d8c01904 	addi	r3,sp,100
   31ec4:	003fee06 	br	31e80 <___vfprintf_internal_r+0x1690>
   31ec8:	3c000017 	ldw	r16,0(r7)
   31ecc:	0023883a 	mov	r17,zero
   31ed0:	39c00104 	addi	r7,r7,4
   31ed4:	d9c14015 	stw	r7,1280(sp)
   31ed8:	003e9206 	br	31924 <___vfprintf_internal_r+0x1134>
   31edc:	d9401904 	addi	r5,sp,100
   31ee0:	dd000f04 	addi	r20,sp,60
   31ee4:	d9414115 	stw	r5,1284(sp)
   31ee8:	d9814417 	ldw	r6,1296(sp)
   31eec:	880a973a 	slli	r5,r17,28
   31ef0:	8004d13a 	srli	r2,r16,4
   31ef4:	810003cc 	andi	r4,r16,15
   31ef8:	3109883a 	add	r4,r6,r4
   31efc:	2884b03a 	or	r2,r5,r2
   31f00:	21400003 	ldbu	r5,0(r4)
   31f04:	d9014117 	ldw	r4,1284(sp)
   31f08:	8806d13a 	srli	r3,r17,4
   31f0c:	1021883a 	mov	r16,r2
   31f10:	213fffc4 	addi	r4,r4,-1
   31f14:	d9014115 	stw	r4,1284(sp)
   31f18:	d9814117 	ldw	r6,1284(sp)
   31f1c:	10c8b03a 	or	r4,r2,r3
   31f20:	1823883a 	mov	r17,r3
   31f24:	31400005 	stb	r5,0(r6)
   31f28:	203fef1e 	bne	r4,zero,31ee8 <___vfprintf_internal_r+0x16f8>
   31f2c:	003ccb06 	br	3125c <___vfprintf_internal_r+0xa6c>
   31f30:	00800c04 	movi	r2,48
   31f34:	d98018c4 	addi	r6,sp,99
   31f38:	dd000f04 	addi	r20,sp,60
   31f3c:	d88018c5 	stb	r2,99(sp)
   31f40:	d9814115 	stw	r6,1284(sp)
   31f44:	003cc506 	br	3125c <___vfprintf_internal_r+0xa6c>
   31f48:	dc400d17 	ldw	r17,52(sp)
   31f4c:	07000074 	movhi	fp,1
   31f50:	e7003184 	addi	fp,fp,198
   31f54:	003bc706 	br	30e74 <___vfprintf_internal_r+0x684>
   31f58:	d9414c17 	ldw	r5,1328(sp)
   31f5c:	2880040c 	andi	r2,r5,16
   31f60:	10007c26 	beq	r2,zero,32154 <___vfprintf_internal_r+0x1964>
   31f64:	38800017 	ldw	r2,0(r7)
   31f68:	39c00104 	addi	r7,r7,4
   31f6c:	d9c14015 	stw	r7,1280(sp)
   31f70:	d9814b17 	ldw	r6,1324(sp)
   31f74:	d9c14017 	ldw	r7,1280(sp)
   31f78:	11800015 	stw	r6,0(r2)
   31f7c:	003a7806 	br	30960 <___vfprintf_internal_r+0x170>
   31f80:	d9014f17 	ldw	r4,1340(sp)
   31f84:	b00b883a 	mov	r5,r22
   31f88:	d9800c04 	addi	r6,sp,48
   31f8c:	00307980 	call	30798 <__sprint_r>
   31f90:	103bcf1e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   31f94:	dc800e17 	ldw	r18,56(sp)
   31f98:	dc400d17 	ldw	r17,52(sp)
   31f9c:	d8c01904 	addi	r3,sp,100
   31fa0:	d9014717 	ldw	r4,1308(sp)
   31fa4:	d9414117 	ldw	r5,1284(sp)
   31fa8:	8c400044 	addi	r17,r17,1
   31fac:	9125883a 	add	r18,r18,r4
   31fb0:	008001c4 	movi	r2,7
   31fb4:	19400015 	stw	r5,0(r3)
   31fb8:	19000115 	stw	r4,4(r3)
   31fbc:	dc800e15 	stw	r18,56(sp)
   31fc0:	dc400d15 	stw	r17,52(sp)
   31fc4:	147cee16 	blt	r2,r17,31380 <___vfprintf_internal_r+0xb90>
   31fc8:	18c00204 	addi	r3,r3,8
   31fcc:	003b8606 	br	30de8 <___vfprintf_internal_r+0x5f8>
   31fd0:	38c00017 	ldw	r3,0(r7)
   31fd4:	39000204 	addi	r4,r7,8
   31fd8:	d9014015 	stw	r4,1280(sp)
   31fdc:	d8c14215 	stw	r3,1288(sp)
   31fe0:	39c00117 	ldw	r7,4(r7)
   31fe4:	d9c14315 	stw	r7,1292(sp)
   31fe8:	003e2006 	br	3186c <___vfprintf_internal_r+0x107c>
   31fec:	0005883a 	mov	r2,zero
   31ff0:	1409c83a 	sub	r4,r2,r16
   31ff4:	1105803a 	cmpltu	r2,r2,r4
   31ff8:	044bc83a 	sub	r5,zero,r17
   31ffc:	2885c83a 	sub	r2,r5,r2
   32000:	2021883a 	mov	r16,r4
   32004:	1023883a 	mov	r17,r2
   32008:	01000044 	movi	r4,1
   3200c:	00800b44 	movi	r2,45
   32010:	d8800405 	stb	r2,16(sp)
   32014:	003c8406 	br	31228 <___vfprintf_internal_r+0xa38>
   32018:	d9014f17 	ldw	r4,1340(sp)
   3201c:	b00b883a 	mov	r5,r22
   32020:	d9800c04 	addi	r6,sp,48
   32024:	00307980 	call	30798 <__sprint_r>
   32028:	103ba91e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   3202c:	dc800e17 	ldw	r18,56(sp)
   32030:	dc400d17 	ldw	r17,52(sp)
   32034:	d9000517 	ldw	r4,20(sp)
   32038:	d9401904 	addi	r5,sp,100
   3203c:	003da706 	br	316dc <___vfprintf_internal_r+0xeec>
   32040:	d9014f17 	ldw	r4,1340(sp)
   32044:	b00b883a 	mov	r5,r22
   32048:	d9800c04 	addi	r6,sp,48
   3204c:	00307980 	call	30798 <__sprint_r>
   32050:	103b9f1e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   32054:	dc800e17 	ldw	r18,56(sp)
   32058:	dc400d17 	ldw	r17,52(sp)
   3205c:	d9000517 	ldw	r4,20(sp)
   32060:	d8c01904 	addi	r3,sp,100
   32064:	003d9106 	br	316ac <___vfprintf_internal_r+0xebc>
   32068:	07000074 	movhi	fp,1
   3206c:	e7002d84 	addi	fp,fp,182
   32070:	9425883a 	add	r18,r18,r16
   32074:	8c400044 	addi	r17,r17,1
   32078:	008001c4 	movi	r2,7
   3207c:	1f000015 	stw	fp,0(r3)
   32080:	1c000115 	stw	r16,4(r3)
   32084:	dc800e15 	stw	r18,56(sp)
   32088:	dc400d15 	stw	r17,52(sp)
   3208c:	147fbc16 	blt	r2,r17,31f80 <___vfprintf_internal_r+0x1790>
   32090:	18c00204 	addi	r3,r3,8
   32094:	003fc206 	br	31fa0 <___vfprintf_internal_r+0x17b0>
   32098:	d9014f17 	ldw	r4,1340(sp)
   3209c:	b00b883a 	mov	r5,r22
   320a0:	d9800c04 	addi	r6,sp,48
   320a4:	00307980 	call	30798 <__sprint_r>
   320a8:	103b891e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   320ac:	dc800e17 	ldw	r18,56(sp)
   320b0:	d9000517 	ldw	r4,20(sp)
   320b4:	d8c01904 	addi	r3,sp,100
   320b8:	003d0206 	br	314c4 <___vfprintf_internal_r+0xcd4>
   320bc:	07000074 	movhi	fp,1
   320c0:	e7002d84 	addi	fp,fp,182
   320c4:	003be406 	br	31058 <___vfprintf_internal_r+0x868>
   320c8:	00800074 	movhi	r2,1
   320cc:	10801c04 	addi	r2,r2,112
   320d0:	d8814115 	stw	r2,1284(sp)
   320d4:	003df506 	br	318ac <___vfprintf_internal_r+0x10bc>
   320d8:	d9014217 	ldw	r4,1288(sp)
   320dc:	d9414317 	ldw	r5,1292(sp)
   320e0:	00371d00 	call	371d0 <__isnand>
   320e4:	10003926 	beq	r2,zero,321cc <___vfprintf_internal_r+0x19dc>
   320e8:	d9414d17 	ldw	r5,1332(sp)
   320ec:	008011c4 	movi	r2,71
   320f0:	1140ce16 	blt	r2,r5,3242c <___vfprintf_internal_r+0x1c3c>
   320f4:	01800074 	movhi	r6,1
   320f8:	31801d04 	addi	r6,r6,116
   320fc:	d9814115 	stw	r6,1284(sp)
   32100:	003dea06 	br	318ac <___vfprintf_internal_r+0x10bc>
   32104:	d9014c17 	ldw	r4,1328(sp)
   32108:	bdc00044 	addi	r23,r23,1
   3210c:	b8c00007 	ldb	r3,0(r23)
   32110:	21000814 	ori	r4,r4,32
   32114:	d9014c15 	stw	r4,1328(sp)
   32118:	003a3406 	br	309ec <___vfprintf_internal_r+0x1fc>
   3211c:	dcc14515 	stw	r19,1300(sp)
   32120:	98011016 	blt	r19,zero,32564 <___vfprintf_internal_r+0x1d74>
   32124:	980f883a 	mov	r7,r19
   32128:	d8014615 	stw	zero,1304(sp)
   3212c:	003c5206 	br	31278 <___vfprintf_internal_r+0xa88>
   32130:	d9014f17 	ldw	r4,1340(sp)
   32134:	b00b883a 	mov	r5,r22
   32138:	d9800c04 	addi	r6,sp,48
   3213c:	00307980 	call	30798 <__sprint_r>
   32140:	103b631e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   32144:	dc800e17 	ldw	r18,56(sp)
   32148:	d9000517 	ldw	r4,20(sp)
   3214c:	d8c01904 	addi	r3,sp,100
   32150:	003f2e06 	br	31e0c <___vfprintf_internal_r+0x161c>
   32154:	d8c14c17 	ldw	r3,1328(sp)
   32158:	1880100c 	andi	r2,r3,64
   3215c:	1000a026 	beq	r2,zero,323e0 <___vfprintf_internal_r+0x1bf0>
   32160:	38800017 	ldw	r2,0(r7)
   32164:	39c00104 	addi	r7,r7,4
   32168:	d9c14015 	stw	r7,1280(sp)
   3216c:	d9014b17 	ldw	r4,1324(sp)
   32170:	d9c14017 	ldw	r7,1280(sp)
   32174:	1100000d 	sth	r4,0(r2)
   32178:	0039f906 	br	30960 <___vfprintf_internal_r+0x170>
   3217c:	d9014f17 	ldw	r4,1340(sp)
   32180:	b00b883a 	mov	r5,r22
   32184:	d9800c04 	addi	r6,sp,48
   32188:	00307980 	call	30798 <__sprint_r>
   3218c:	103b501e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   32190:	dc800e17 	ldw	r18,56(sp)
   32194:	dc400d17 	ldw	r17,52(sp)
   32198:	d9000517 	ldw	r4,20(sp)
   3219c:	d8c01904 	addi	r3,sp,100
   321a0:	003f2d06 	br	31e58 <___vfprintf_internal_r+0x1668>
   321a4:	00800184 	movi	r2,6
   321a8:	14c09a36 	bltu	r2,r19,32414 <___vfprintf_internal_r+0x1c24>
   321ac:	dcc14515 	stw	r19,1300(sp)
   321b0:	9800010e 	bge	r19,zero,321b8 <___vfprintf_internal_r+0x19c8>
   321b4:	d8014515 	stw	zero,1300(sp)
   321b8:	00800074 	movhi	r2,1
   321bc:	10801f04 	addi	r2,r2,124
   321c0:	980f883a 	mov	r7,r19
   321c4:	d8814115 	stw	r2,1284(sp)
   321c8:	003a7806 	br	30bac <___vfprintf_internal_r+0x3bc>
   321cc:	00bfffc4 	movi	r2,-1
   321d0:	9880e226 	beq	r19,r2,3255c <___vfprintf_internal_r+0x1d6c>
   321d4:	d9414d17 	ldw	r5,1332(sp)
   321d8:	008019c4 	movi	r2,103
   321dc:	2880dc26 	beq	r5,r2,32550 <___vfprintf_internal_r+0x1d60>
   321e0:	008011c4 	movi	r2,71
   321e4:	2880da26 	beq	r5,r2,32550 <___vfprintf_internal_r+0x1d60>
   321e8:	d9414c17 	ldw	r5,1328(sp)
   321ec:	d9014317 	ldw	r4,1292(sp)
   321f0:	d9814217 	ldw	r6,1288(sp)
   321f4:	29404014 	ori	r5,r5,256
   321f8:	d9414c15 	stw	r5,1328(sp)
   321fc:	2000cc16 	blt	r4,zero,32530 <___vfprintf_internal_r+0x1d40>
   32200:	3021883a 	mov	r16,r6
   32204:	2023883a 	mov	r17,r4
   32208:	0039883a 	mov	fp,zero
   3220c:	d9414d17 	ldw	r5,1332(sp)
   32210:	00801984 	movi	r2,102
   32214:	2880b726 	beq	r5,r2,324f4 <___vfprintf_internal_r+0x1d04>
   32218:	00801184 	movi	r2,70
   3221c:	2880b526 	beq	r5,r2,324f4 <___vfprintf_internal_r+0x1d04>
   32220:	00801944 	movi	r2,101
   32224:	2880c826 	beq	r5,r2,32548 <___vfprintf_internal_r+0x1d58>
   32228:	00801144 	movi	r2,69
   3222c:	2880c626 	beq	r5,r2,32548 <___vfprintf_internal_r+0x1d58>
   32230:	9829883a 	mov	r20,r19
   32234:	d9014f17 	ldw	r4,1340(sp)
   32238:	d8800504 	addi	r2,sp,20
   3223c:	880d883a 	mov	r6,r17
   32240:	d8800115 	stw	r2,4(sp)
   32244:	d8c00604 	addi	r3,sp,24
   32248:	d8800704 	addi	r2,sp,28
   3224c:	800b883a 	mov	r5,r16
   32250:	01c00084 	movi	r7,2
   32254:	d8c00215 	stw	r3,8(sp)
   32258:	d8800315 	stw	r2,12(sp)
   3225c:	dd000015 	stw	r20,0(sp)
   32260:	0032a140 	call	32a14 <_dtoa_r>
   32264:	d9814d17 	ldw	r6,1332(sp)
   32268:	d8814115 	stw	r2,1284(sp)
   3226c:	008019c4 	movi	r2,103
   32270:	30809526 	beq	r6,r2,324c8 <___vfprintf_internal_r+0x1cd8>
   32274:	d8c14d17 	ldw	r3,1332(sp)
   32278:	008011c4 	movi	r2,71
   3227c:	18809226 	beq	r3,r2,324c8 <___vfprintf_internal_r+0x1cd8>
   32280:	d9414117 	ldw	r5,1284(sp)
   32284:	d9814d17 	ldw	r6,1332(sp)
   32288:	00801984 	movi	r2,102
   3228c:	2d25883a 	add	r18,r5,r20
   32290:	30808626 	beq	r6,r2,324ac <___vfprintf_internal_r+0x1cbc>
   32294:	00801184 	movi	r2,70
   32298:	30808426 	beq	r6,r2,324ac <___vfprintf_internal_r+0x1cbc>
   3229c:	000d883a 	mov	r6,zero
   322a0:	000f883a 	mov	r7,zero
   322a4:	880b883a 	mov	r5,r17
   322a8:	8009883a 	mov	r4,r16
   322ac:	0038fb80 	call	38fb8 <__eqdf2>
   322b0:	1000751e 	bne	r2,zero,32488 <___vfprintf_internal_r+0x1c98>
   322b4:	9005883a 	mov	r2,r18
   322b8:	dc800715 	stw	r18,28(sp)
   322bc:	d9014117 	ldw	r4,1284(sp)
   322c0:	d9414d17 	ldw	r5,1332(sp)
   322c4:	00c019c4 	movi	r3,103
   322c8:	1125c83a 	sub	r18,r2,r4
   322cc:	28c06826 	beq	r5,r3,32470 <___vfprintf_internal_r+0x1c80>
   322d0:	008011c4 	movi	r2,71
   322d4:	28806626 	beq	r5,r2,32470 <___vfprintf_internal_r+0x1c80>
   322d8:	d9000517 	ldw	r4,20(sp)
   322dc:	d8c14d17 	ldw	r3,1332(sp)
   322e0:	00801944 	movi	r2,101
   322e4:	10c05516 	blt	r2,r3,3243c <___vfprintf_internal_r+0x1c4c>
   322e8:	213fffc4 	addi	r4,r4,-1
   322ec:	d9000515 	stw	r4,20(sp)
   322f0:	d8c00805 	stb	r3,32(sp)
   322f4:	2021883a 	mov	r16,r4
   322f8:	2000c116 	blt	r4,zero,32600 <___vfprintf_internal_r+0x1e10>
   322fc:	00800ac4 	movi	r2,43
   32300:	d8800845 	stb	r2,33(sp)
   32304:	00800244 	movi	r2,9
   32308:	1400af0e 	bge	r2,r16,325c8 <___vfprintf_internal_r+0x1dd8>
   3230c:	1027883a 	mov	r19,r2
   32310:	dc400b84 	addi	r17,sp,46
   32314:	8009883a 	mov	r4,r16
   32318:	01400284 	movi	r5,10
   3231c:	00396a00 	call	396a0 <__modsi3>
   32320:	10800c04 	addi	r2,r2,48
   32324:	8c7fffc4 	addi	r17,r17,-1
   32328:	8009883a 	mov	r4,r16
   3232c:	01400284 	movi	r5,10
   32330:	88800005 	stb	r2,0(r17)
   32334:	00396400 	call	39640 <__divsi3>
   32338:	1021883a 	mov	r16,r2
   3233c:	98bff516 	blt	r19,r2,32314 <___vfprintf_internal_r+0x1b24>
   32340:	10c00c04 	addi	r3,r2,48
   32344:	d88009c4 	addi	r2,sp,39
   32348:	108001c4 	addi	r2,r2,7
   3234c:	897fffc4 	addi	r5,r17,-1
   32350:	88ffffc5 	stb	r3,-1(r17)
   32354:	2880a72e 	bgeu	r5,r2,325f4 <___vfprintf_internal_r+0x1e04>
   32358:	1009883a 	mov	r4,r2
   3235c:	d9800804 	addi	r6,sp,32
   32360:	d8c00884 	addi	r3,sp,34
   32364:	28800003 	ldbu	r2,0(r5)
   32368:	29400044 	addi	r5,r5,1
   3236c:	18800005 	stb	r2,0(r3)
   32370:	18c00044 	addi	r3,r3,1
   32374:	293ffb36 	bltu	r5,r4,32364 <___vfprintf_internal_r+0x1b74>
   32378:	1987c83a 	sub	r3,r3,r6
   3237c:	00800044 	movi	r2,1
   32380:	d8c14815 	stw	r3,1312(sp)
   32384:	90cf883a 	add	r7,r18,r3
   32388:	1480960e 	bge	r2,r18,325e4 <___vfprintf_internal_r+0x1df4>
   3238c:	39c00044 	addi	r7,r7,1
   32390:	d9c14515 	stw	r7,1300(sp)
   32394:	38003416 	blt	r7,zero,32468 <___vfprintf_internal_r+0x1c78>
   32398:	e0803fcc 	andi	r2,fp,255
   3239c:	1080201c 	xori	r2,r2,128
   323a0:	10bfe004 	addi	r2,r2,-128
   323a4:	10004e26 	beq	r2,zero,324e0 <___vfprintf_internal_r+0x1cf0>
   323a8:	00800b44 	movi	r2,45
   323ac:	dc814715 	stw	r18,1308(sp)
   323b0:	d8014615 	stw	zero,1304(sp)
   323b4:	d8800405 	stb	r2,16(sp)
   323b8:	003bb106 	br	31280 <___vfprintf_internal_r+0xa90>
   323bc:	00800b44 	movi	r2,45
   323c0:	d8800405 	stb	r2,16(sp)
   323c4:	003d3306 	br	31894 <___vfprintf_internal_r+0x10a4>
   323c8:	d9014f17 	ldw	r4,1340(sp)
   323cc:	b00b883a 	mov	r5,r22
   323d0:	d9800c04 	addi	r6,sp,48
   323d4:	00307980 	call	30798 <__sprint_r>
   323d8:	103abd1e 	bne	r2,zero,30ed0 <___vfprintf_internal_r+0x6e0>
   323dc:	003abb06 	br	30ecc <___vfprintf_internal_r+0x6dc>
   323e0:	38800017 	ldw	r2,0(r7)
   323e4:	39c00104 	addi	r7,r7,4
   323e8:	d9c14015 	stw	r7,1280(sp)
   323ec:	d9414b17 	ldw	r5,1324(sp)
   323f0:	d9c14017 	ldw	r7,1280(sp)
   323f4:	11400015 	stw	r5,0(r2)
   323f8:	00395906 	br	30960 <___vfprintf_internal_r+0x170>
   323fc:	980f883a 	mov	r7,r19
   32400:	dcc14515 	stw	r19,1300(sp)
   32404:	d8014615 	stw	zero,1304(sp)
   32408:	003b9b06 	br	31278 <___vfprintf_internal_r+0xa88>
   3240c:	0027883a 	mov	r19,zero
   32410:	00397806 	br	309f4 <___vfprintf_internal_r+0x204>
   32414:	00c00074 	movhi	r3,1
   32418:	18c01f04 	addi	r3,r3,124
   3241c:	100f883a 	mov	r7,r2
   32420:	d8814515 	stw	r2,1300(sp)
   32424:	d8c14115 	stw	r3,1284(sp)
   32428:	0039e006 	br	30bac <___vfprintf_internal_r+0x3bc>
   3242c:	00800074 	movhi	r2,1
   32430:	10801e04 	addi	r2,r2,120
   32434:	d8814115 	stw	r2,1284(sp)
   32438:	003d1c06 	br	318ac <___vfprintf_internal_r+0x10bc>
   3243c:	d9414d17 	ldw	r5,1332(sp)
   32440:	00801984 	movi	r2,102
   32444:	28804926 	beq	r5,r2,3256c <___vfprintf_internal_r+0x1d7c>
   32448:	200f883a 	mov	r7,r4
   3244c:	24805716 	blt	r4,r18,325ac <___vfprintf_internal_r+0x1dbc>
   32450:	d9414c17 	ldw	r5,1328(sp)
   32454:	2880004c 	andi	r2,r5,1
   32458:	10000126 	beq	r2,zero,32460 <___vfprintf_internal_r+0x1c70>
   3245c:	21c00044 	addi	r7,r4,1
   32460:	d9c14515 	stw	r7,1300(sp)
   32464:	383fcc0e 	bge	r7,zero,32398 <___vfprintf_internal_r+0x1ba8>
   32468:	d8014515 	stw	zero,1300(sp)
   3246c:	003fca06 	br	32398 <___vfprintf_internal_r+0x1ba8>
   32470:	d9000517 	ldw	r4,20(sp)
   32474:	00bfff04 	movi	r2,-4
   32478:	1100480e 	bge	r2,r4,3259c <___vfprintf_internal_r+0x1dac>
   3247c:	99004716 	blt	r19,r4,3259c <___vfprintf_internal_r+0x1dac>
   32480:	d8c14d15 	stw	r3,1332(sp)
   32484:	003ff006 	br	32448 <___vfprintf_internal_r+0x1c58>
   32488:	d8800717 	ldw	r2,28(sp)
   3248c:	14bf8b2e 	bgeu	r2,r18,322bc <___vfprintf_internal_r+0x1acc>
   32490:	9007883a 	mov	r3,r18
   32494:	01000c04 	movi	r4,48
   32498:	11000005 	stb	r4,0(r2)
   3249c:	10800044 	addi	r2,r2,1
   324a0:	d8800715 	stw	r2,28(sp)
   324a4:	18bffc1e 	bne	r3,r2,32498 <___vfprintf_internal_r+0x1ca8>
   324a8:	003f8406 	br	322bc <___vfprintf_internal_r+0x1acc>
   324ac:	d8814117 	ldw	r2,1284(sp)
   324b0:	10c00007 	ldb	r3,0(r2)
   324b4:	00800c04 	movi	r2,48
   324b8:	18805b26 	beq	r3,r2,32628 <___vfprintf_internal_r+0x1e38>
   324bc:	d9000517 	ldw	r4,20(sp)
   324c0:	9125883a 	add	r18,r18,r4
   324c4:	003f7506 	br	3229c <___vfprintf_internal_r+0x1aac>
   324c8:	d9014c17 	ldw	r4,1328(sp)
   324cc:	2080004c 	andi	r2,r4,1
   324d0:	1005003a 	cmpeq	r2,r2,zero
   324d4:	103f6a26 	beq	r2,zero,32280 <___vfprintf_internal_r+0x1a90>
   324d8:	d8800717 	ldw	r2,28(sp)
   324dc:	003f7706 	br	322bc <___vfprintf_internal_r+0x1acc>
   324e0:	d9c14515 	stw	r7,1300(sp)
   324e4:	38004d16 	blt	r7,zero,3261c <___vfprintf_internal_r+0x1e2c>
   324e8:	dc814715 	stw	r18,1308(sp)
   324ec:	d8014615 	stw	zero,1304(sp)
   324f0:	003b6106 	br	31278 <___vfprintf_internal_r+0xa88>
   324f4:	d9014f17 	ldw	r4,1340(sp)
   324f8:	d8800504 	addi	r2,sp,20
   324fc:	d8800115 	stw	r2,4(sp)
   32500:	d8c00604 	addi	r3,sp,24
   32504:	d8800704 	addi	r2,sp,28
   32508:	800b883a 	mov	r5,r16
   3250c:	880d883a 	mov	r6,r17
   32510:	01c000c4 	movi	r7,3
   32514:	d8c00215 	stw	r3,8(sp)
   32518:	d8800315 	stw	r2,12(sp)
   3251c:	dcc00015 	stw	r19,0(sp)
   32520:	9829883a 	mov	r20,r19
   32524:	0032a140 	call	32a14 <_dtoa_r>
   32528:	d8814115 	stw	r2,1284(sp)
   3252c:	003f5106 	br	32274 <___vfprintf_internal_r+0x1a84>
   32530:	d8c14217 	ldw	r3,1288(sp)
   32534:	d9014317 	ldw	r4,1292(sp)
   32538:	07000b44 	movi	fp,45
   3253c:	1821883a 	mov	r16,r3
   32540:	2460003c 	xorhi	r17,r4,32768
   32544:	003f3106 	br	3220c <___vfprintf_internal_r+0x1a1c>
   32548:	9d000044 	addi	r20,r19,1
   3254c:	003f3906 	br	32234 <___vfprintf_internal_r+0x1a44>
   32550:	983f251e 	bne	r19,zero,321e8 <___vfprintf_internal_r+0x19f8>
   32554:	04c00044 	movi	r19,1
   32558:	003f2306 	br	321e8 <___vfprintf_internal_r+0x19f8>
   3255c:	04c00184 	movi	r19,6
   32560:	003f2106 	br	321e8 <___vfprintf_internal_r+0x19f8>
   32564:	d8014515 	stw	zero,1300(sp)
   32568:	003eee06 	br	32124 <___vfprintf_internal_r+0x1934>
   3256c:	200f883a 	mov	r7,r4
   32570:	0100370e 	bge	zero,r4,32650 <___vfprintf_internal_r+0x1e60>
   32574:	9800031e 	bne	r19,zero,32584 <___vfprintf_internal_r+0x1d94>
   32578:	d9814c17 	ldw	r6,1328(sp)
   3257c:	3080004c 	andi	r2,r6,1
   32580:	103fb726 	beq	r2,zero,32460 <___vfprintf_internal_r+0x1c70>
   32584:	20800044 	addi	r2,r4,1
   32588:	98a7883a 	add	r19,r19,r2
   3258c:	dcc14515 	stw	r19,1300(sp)
   32590:	980f883a 	mov	r7,r19
   32594:	983f800e 	bge	r19,zero,32398 <___vfprintf_internal_r+0x1ba8>
   32598:	003fb306 	br	32468 <___vfprintf_internal_r+0x1c78>
   3259c:	d9814d17 	ldw	r6,1332(sp)
   325a0:	31bfff84 	addi	r6,r6,-2
   325a4:	d9814d15 	stw	r6,1332(sp)
   325a8:	003f4c06 	br	322dc <___vfprintf_internal_r+0x1aec>
   325ac:	0100180e 	bge	zero,r4,32610 <___vfprintf_internal_r+0x1e20>
   325b0:	00800044 	movi	r2,1
   325b4:	1485883a 	add	r2,r2,r18
   325b8:	d8814515 	stw	r2,1300(sp)
   325bc:	100f883a 	mov	r7,r2
   325c0:	103f750e 	bge	r2,zero,32398 <___vfprintf_internal_r+0x1ba8>
   325c4:	003fa806 	br	32468 <___vfprintf_internal_r+0x1c78>
   325c8:	80c00c04 	addi	r3,r16,48
   325cc:	00800c04 	movi	r2,48
   325d0:	d8c008c5 	stb	r3,35(sp)
   325d4:	d9800804 	addi	r6,sp,32
   325d8:	d8c00904 	addi	r3,sp,36
   325dc:	d8800885 	stb	r2,34(sp)
   325e0:	003f6506 	br	32378 <___vfprintf_internal_r+0x1b88>
   325e4:	d9014c17 	ldw	r4,1328(sp)
   325e8:	2084703a 	and	r2,r4,r2
   325ec:	103f9c26 	beq	r2,zero,32460 <___vfprintf_internal_r+0x1c70>
   325f0:	003f6606 	br	3238c <___vfprintf_internal_r+0x1b9c>
   325f4:	d9800804 	addi	r6,sp,32
   325f8:	d8c00884 	addi	r3,sp,34
   325fc:	003f5e06 	br	32378 <___vfprintf_internal_r+0x1b88>
   32600:	00800b44 	movi	r2,45
   32604:	0121c83a 	sub	r16,zero,r4
   32608:	d8800845 	stb	r2,33(sp)
   3260c:	003f3d06 	br	32304 <___vfprintf_internal_r+0x1b14>
   32610:	00800084 	movi	r2,2
   32614:	1105c83a 	sub	r2,r2,r4
   32618:	003fe606 	br	325b4 <___vfprintf_internal_r+0x1dc4>
   3261c:	d8014515 	stw	zero,1300(sp)
   32620:	dc814715 	stw	r18,1308(sp)
   32624:	003fb106 	br	324ec <___vfprintf_internal_r+0x1cfc>
   32628:	000d883a 	mov	r6,zero
   3262c:	000f883a 	mov	r7,zero
   32630:	8009883a 	mov	r4,r16
   32634:	880b883a 	mov	r5,r17
   32638:	00390400 	call	39040 <__nedf2>
   3263c:	103f9f26 	beq	r2,zero,324bc <___vfprintf_internal_r+0x1ccc>
   32640:	00800044 	movi	r2,1
   32644:	1509c83a 	sub	r4,r2,r20
   32648:	d9000515 	stw	r4,20(sp)
   3264c:	003f9b06 	br	324bc <___vfprintf_internal_r+0x1ccc>
   32650:	98000d1e 	bne	r19,zero,32688 <___vfprintf_internal_r+0x1e98>
   32654:	d8c14c17 	ldw	r3,1328(sp)
   32658:	1880004c 	andi	r2,r3,1
   3265c:	10000a1e 	bne	r2,zero,32688 <___vfprintf_internal_r+0x1e98>
   32660:	01000044 	movi	r4,1
   32664:	200f883a 	mov	r7,r4
   32668:	d9014515 	stw	r4,1300(sp)
   3266c:	003f4a06 	br	32398 <___vfprintf_internal_r+0x1ba8>
   32670:	3cc00017 	ldw	r19,0(r7)
   32674:	39c00104 	addi	r7,r7,4
   32678:	983d0e0e 	bge	r19,zero,31ab4 <___vfprintf_internal_r+0x12c4>
   3267c:	b8c00007 	ldb	r3,0(r23)
   32680:	04ffffc4 	movi	r19,-1
   32684:	0038d906 	br	309ec <___vfprintf_internal_r+0x1fc>
   32688:	9cc00084 	addi	r19,r19,2
   3268c:	dcc14515 	stw	r19,1300(sp)
   32690:	980f883a 	mov	r7,r19
   32694:	983f400e 	bge	r19,zero,32398 <___vfprintf_internal_r+0x1ba8>
   32698:	003f7306 	br	32468 <___vfprintf_internal_r+0x1c78>

0003269c <__vfprintf_internal>:
   3269c:	00800074 	movhi	r2,1
   326a0:	10876d04 	addi	r2,r2,7604
   326a4:	2013883a 	mov	r9,r4
   326a8:	11000017 	ldw	r4,0(r2)
   326ac:	2805883a 	mov	r2,r5
   326b0:	300f883a 	mov	r7,r6
   326b4:	480b883a 	mov	r5,r9
   326b8:	100d883a 	mov	r6,r2
   326bc:	00307f01 	jmpi	307f0 <___vfprintf_internal_r>

000326c0 <__swsetup_r>:
   326c0:	00800074 	movhi	r2,1
   326c4:	10876d04 	addi	r2,r2,7604
   326c8:	10c00017 	ldw	r3,0(r2)
   326cc:	defffd04 	addi	sp,sp,-12
   326d0:	dc400115 	stw	r17,4(sp)
   326d4:	dc000015 	stw	r16,0(sp)
   326d8:	dfc00215 	stw	ra,8(sp)
   326dc:	2023883a 	mov	r17,r4
   326e0:	2821883a 	mov	r16,r5
   326e4:	18000226 	beq	r3,zero,326f0 <__swsetup_r+0x30>
   326e8:	18800e17 	ldw	r2,56(r3)
   326ec:	10001f26 	beq	r2,zero,3276c <__swsetup_r+0xac>
   326f0:	8100030b 	ldhu	r4,12(r16)
   326f4:	2080020c 	andi	r2,r4,8
   326f8:	10002826 	beq	r2,zero,3279c <__swsetup_r+0xdc>
   326fc:	81400417 	ldw	r5,16(r16)
   32700:	28001d26 	beq	r5,zero,32778 <__swsetup_r+0xb8>
   32704:	2080004c 	andi	r2,r4,1
   32708:	1005003a 	cmpeq	r2,r2,zero
   3270c:	10000b26 	beq	r2,zero,3273c <__swsetup_r+0x7c>
   32710:	2080008c 	andi	r2,r4,2
   32714:	10001226 	beq	r2,zero,32760 <__swsetup_r+0xa0>
   32718:	0005883a 	mov	r2,zero
   3271c:	80800215 	stw	r2,8(r16)
   32720:	28000b26 	beq	r5,zero,32750 <__swsetup_r+0x90>
   32724:	0005883a 	mov	r2,zero
   32728:	dfc00217 	ldw	ra,8(sp)
   3272c:	dc400117 	ldw	r17,4(sp)
   32730:	dc000017 	ldw	r16,0(sp)
   32734:	dec00304 	addi	sp,sp,12
   32738:	f800283a 	ret
   3273c:	80800517 	ldw	r2,20(r16)
   32740:	80000215 	stw	zero,8(r16)
   32744:	0085c83a 	sub	r2,zero,r2
   32748:	80800615 	stw	r2,24(r16)
   3274c:	283ff51e 	bne	r5,zero,32724 <__swsetup_r+0x64>
   32750:	2080200c 	andi	r2,r4,128
   32754:	103ff326 	beq	r2,zero,32724 <__swsetup_r+0x64>
   32758:	00bfffc4 	movi	r2,-1
   3275c:	003ff206 	br	32728 <__swsetup_r+0x68>
   32760:	80800517 	ldw	r2,20(r16)
   32764:	80800215 	stw	r2,8(r16)
   32768:	003fed06 	br	32720 <__swsetup_r+0x60>
   3276c:	1809883a 	mov	r4,r3
   32770:	00342600 	call	34260 <__sinit>
   32774:	003fde06 	br	326f0 <__swsetup_r+0x30>
   32778:	20c0a00c 	andi	r3,r4,640
   3277c:	00808004 	movi	r2,512
   32780:	18bfe026 	beq	r3,r2,32704 <__swsetup_r+0x44>
   32784:	8809883a 	mov	r4,r17
   32788:	800b883a 	mov	r5,r16
   3278c:	0034fd80 	call	34fd8 <__smakebuf_r>
   32790:	8100030b 	ldhu	r4,12(r16)
   32794:	81400417 	ldw	r5,16(r16)
   32798:	003fda06 	br	32704 <__swsetup_r+0x44>
   3279c:	2080040c 	andi	r2,r4,16
   327a0:	103fed26 	beq	r2,zero,32758 <__swsetup_r+0x98>
   327a4:	2080010c 	andi	r2,r4,4
   327a8:	10001226 	beq	r2,zero,327f4 <__swsetup_r+0x134>
   327ac:	81400c17 	ldw	r5,48(r16)
   327b0:	28000526 	beq	r5,zero,327c8 <__swsetup_r+0x108>
   327b4:	80801004 	addi	r2,r16,64
   327b8:	28800226 	beq	r5,r2,327c4 <__swsetup_r+0x104>
   327bc:	8809883a 	mov	r4,r17
   327c0:	00345e40 	call	345e4 <_free_r>
   327c4:	80000c15 	stw	zero,48(r16)
   327c8:	8080030b 	ldhu	r2,12(r16)
   327cc:	81400417 	ldw	r5,16(r16)
   327d0:	80000115 	stw	zero,4(r16)
   327d4:	10bff6cc 	andi	r2,r2,65499
   327d8:	8080030d 	sth	r2,12(r16)
   327dc:	81400015 	stw	r5,0(r16)
   327e0:	8080030b 	ldhu	r2,12(r16)
   327e4:	10800214 	ori	r2,r2,8
   327e8:	113fffcc 	andi	r4,r2,65535
   327ec:	8080030d 	sth	r2,12(r16)
   327f0:	003fc306 	br	32700 <__swsetup_r+0x40>
   327f4:	81400417 	ldw	r5,16(r16)
   327f8:	003ff906 	br	327e0 <__swsetup_r+0x120>

000327fc <quorem>:
   327fc:	28c00417 	ldw	r3,16(r5)
   32800:	20800417 	ldw	r2,16(r4)
   32804:	defff604 	addi	sp,sp,-40
   32808:	ddc00715 	stw	r23,28(sp)
   3280c:	dd400515 	stw	r21,20(sp)
   32810:	dfc00915 	stw	ra,36(sp)
   32814:	df000815 	stw	fp,32(sp)
   32818:	dd800615 	stw	r22,24(sp)
   3281c:	dd000415 	stw	r20,16(sp)
   32820:	dcc00315 	stw	r19,12(sp)
   32824:	dc800215 	stw	r18,8(sp)
   32828:	dc400115 	stw	r17,4(sp)
   3282c:	dc000015 	stw	r16,0(sp)
   32830:	202f883a 	mov	r23,r4
   32834:	282b883a 	mov	r21,r5
   32838:	10c07416 	blt	r2,r3,32a0c <quorem+0x210>
   3283c:	1c7fffc4 	addi	r17,r3,-1
   32840:	8c45883a 	add	r2,r17,r17
   32844:	1085883a 	add	r2,r2,r2
   32848:	2c000504 	addi	r16,r5,20
   3284c:	24c00504 	addi	r19,r4,20
   32850:	14ed883a 	add	r22,r2,r19
   32854:	80a5883a 	add	r18,r16,r2
   32858:	b7000017 	ldw	fp,0(r22)
   3285c:	91400017 	ldw	r5,0(r18)
   32860:	e009883a 	mov	r4,fp
   32864:	29400044 	addi	r5,r5,1
   32868:	00397000 	call	39700 <__udivsi3>
   3286c:	1029883a 	mov	r20,r2
   32870:	10003c1e 	bne	r2,zero,32964 <quorem+0x168>
   32874:	a80b883a 	mov	r5,r21
   32878:	b809883a 	mov	r4,r23
   3287c:	0035d040 	call	35d04 <__mcmp>
   32880:	10002b16 	blt	r2,zero,32930 <quorem+0x134>
   32884:	a5000044 	addi	r20,r20,1
   32888:	980f883a 	mov	r7,r19
   3288c:	0011883a 	mov	r8,zero
   32890:	0009883a 	mov	r4,zero
   32894:	81400017 	ldw	r5,0(r16)
   32898:	38c00017 	ldw	r3,0(r7)
   3289c:	84000104 	addi	r16,r16,4
   328a0:	28bfffcc 	andi	r2,r5,65535
   328a4:	2085883a 	add	r2,r4,r2
   328a8:	11bfffcc 	andi	r6,r2,65535
   328ac:	193fffcc 	andi	r4,r3,65535
   328b0:	1004d43a 	srli	r2,r2,16
   328b4:	280ad43a 	srli	r5,r5,16
   328b8:	2189c83a 	sub	r4,r4,r6
   328bc:	2209883a 	add	r4,r4,r8
   328c0:	1806d43a 	srli	r3,r3,16
   328c4:	288b883a 	add	r5,r5,r2
   328c8:	200dd43a 	srai	r6,r4,16
   328cc:	28bfffcc 	andi	r2,r5,65535
   328d0:	1887c83a 	sub	r3,r3,r2
   328d4:	1987883a 	add	r3,r3,r6
   328d8:	3900000d 	sth	r4,0(r7)
   328dc:	38c0008d 	sth	r3,2(r7)
   328e0:	2808d43a 	srli	r4,r5,16
   328e4:	39c00104 	addi	r7,r7,4
   328e8:	1811d43a 	srai	r8,r3,16
   328ec:	943fe92e 	bgeu	r18,r16,32894 <quorem+0x98>
   328f0:	8c45883a 	add	r2,r17,r17
   328f4:	1085883a 	add	r2,r2,r2
   328f8:	9885883a 	add	r2,r19,r2
   328fc:	10c00017 	ldw	r3,0(r2)
   32900:	18000b1e 	bne	r3,zero,32930 <quorem+0x134>
   32904:	113fff04 	addi	r4,r2,-4
   32908:	9900082e 	bgeu	r19,r4,3292c <quorem+0x130>
   3290c:	10bfff17 	ldw	r2,-4(r2)
   32910:	10000326 	beq	r2,zero,32920 <quorem+0x124>
   32914:	00000506 	br	3292c <quorem+0x130>
   32918:	20800017 	ldw	r2,0(r4)
   3291c:	1000031e 	bne	r2,zero,3292c <quorem+0x130>
   32920:	213fff04 	addi	r4,r4,-4
   32924:	8c7fffc4 	addi	r17,r17,-1
   32928:	993ffb36 	bltu	r19,r4,32918 <quorem+0x11c>
   3292c:	bc400415 	stw	r17,16(r23)
   32930:	a005883a 	mov	r2,r20
   32934:	dfc00917 	ldw	ra,36(sp)
   32938:	df000817 	ldw	fp,32(sp)
   3293c:	ddc00717 	ldw	r23,28(sp)
   32940:	dd800617 	ldw	r22,24(sp)
   32944:	dd400517 	ldw	r21,20(sp)
   32948:	dd000417 	ldw	r20,16(sp)
   3294c:	dcc00317 	ldw	r19,12(sp)
   32950:	dc800217 	ldw	r18,8(sp)
   32954:	dc400117 	ldw	r17,4(sp)
   32958:	dc000017 	ldw	r16,0(sp)
   3295c:	dec00a04 	addi	sp,sp,40
   32960:	f800283a 	ret
   32964:	980f883a 	mov	r7,r19
   32968:	8011883a 	mov	r8,r16
   3296c:	0013883a 	mov	r9,zero
   32970:	000d883a 	mov	r6,zero
   32974:	40c00017 	ldw	r3,0(r8)
   32978:	39000017 	ldw	r4,0(r7)
   3297c:	42000104 	addi	r8,r8,4
   32980:	18bfffcc 	andi	r2,r3,65535
   32984:	a085383a 	mul	r2,r20,r2
   32988:	1806d43a 	srli	r3,r3,16
   3298c:	217fffcc 	andi	r5,r4,65535
   32990:	3085883a 	add	r2,r6,r2
   32994:	11bfffcc 	andi	r6,r2,65535
   32998:	a0c7383a 	mul	r3,r20,r3
   3299c:	1004d43a 	srli	r2,r2,16
   329a0:	298bc83a 	sub	r5,r5,r6
   329a4:	2a4b883a 	add	r5,r5,r9
   329a8:	2008d43a 	srli	r4,r4,16
   329ac:	1887883a 	add	r3,r3,r2
   329b0:	280dd43a 	srai	r6,r5,16
   329b4:	18bfffcc 	andi	r2,r3,65535
   329b8:	2089c83a 	sub	r4,r4,r2
   329bc:	2189883a 	add	r4,r4,r6
   329c0:	3900008d 	sth	r4,2(r7)
   329c4:	3940000d 	sth	r5,0(r7)
   329c8:	180cd43a 	srli	r6,r3,16
   329cc:	39c00104 	addi	r7,r7,4
   329d0:	2013d43a 	srai	r9,r4,16
   329d4:	923fe72e 	bgeu	r18,r8,32974 <quorem+0x178>
   329d8:	e03fa61e 	bne	fp,zero,32874 <quorem+0x78>
   329dc:	b0ffff04 	addi	r3,r22,-4
   329e0:	98c0082e 	bgeu	r19,r3,32a04 <quorem+0x208>
   329e4:	b0bfff17 	ldw	r2,-4(r22)
   329e8:	10000326 	beq	r2,zero,329f8 <quorem+0x1fc>
   329ec:	00000506 	br	32a04 <quorem+0x208>
   329f0:	18800017 	ldw	r2,0(r3)
   329f4:	1000031e 	bne	r2,zero,32a04 <quorem+0x208>
   329f8:	18ffff04 	addi	r3,r3,-4
   329fc:	8c7fffc4 	addi	r17,r17,-1
   32a00:	98fffb36 	bltu	r19,r3,329f0 <quorem+0x1f4>
   32a04:	bc400415 	stw	r17,16(r23)
   32a08:	003f9a06 	br	32874 <quorem+0x78>
   32a0c:	0005883a 	mov	r2,zero
   32a10:	003fc806 	br	32934 <quorem+0x138>

00032a14 <_dtoa_r>:
   32a14:	22001017 	ldw	r8,64(r4)
   32a18:	deffda04 	addi	sp,sp,-152
   32a1c:	dd402115 	stw	r21,132(sp)
   32a20:	dd002015 	stw	r20,128(sp)
   32a24:	dc801e15 	stw	r18,120(sp)
   32a28:	dc401d15 	stw	r17,116(sp)
   32a2c:	dfc02515 	stw	ra,148(sp)
   32a30:	df002415 	stw	fp,144(sp)
   32a34:	ddc02315 	stw	r23,140(sp)
   32a38:	dd802215 	stw	r22,136(sp)
   32a3c:	dcc01f15 	stw	r19,124(sp)
   32a40:	dc001c15 	stw	r16,112(sp)
   32a44:	d9001615 	stw	r4,88(sp)
   32a48:	3023883a 	mov	r17,r6
   32a4c:	2829883a 	mov	r20,r5
   32a50:	d9c01715 	stw	r7,92(sp)
   32a54:	dc802817 	ldw	r18,160(sp)
   32a58:	302b883a 	mov	r21,r6
   32a5c:	40000a26 	beq	r8,zero,32a88 <_dtoa_r+0x74>
   32a60:	20801117 	ldw	r2,68(r4)
   32a64:	400b883a 	mov	r5,r8
   32a68:	40800115 	stw	r2,4(r8)
   32a6c:	20c01117 	ldw	r3,68(r4)
   32a70:	00800044 	movi	r2,1
   32a74:	10c4983a 	sll	r2,r2,r3
   32a78:	40800215 	stw	r2,8(r8)
   32a7c:	0035ba80 	call	35ba8 <_Bfree>
   32a80:	d8c01617 	ldw	r3,88(sp)
   32a84:	18001015 	stw	zero,64(r3)
   32a88:	8800a316 	blt	r17,zero,32d18 <_dtoa_r+0x304>
   32a8c:	90000015 	stw	zero,0(r18)
   32a90:	a8dffc2c 	andhi	r3,r21,32752
   32a94:	009ffc34 	movhi	r2,32752
   32a98:	18809126 	beq	r3,r2,32ce0 <_dtoa_r+0x2cc>
   32a9c:	000d883a 	mov	r6,zero
   32aa0:	000f883a 	mov	r7,zero
   32aa4:	a009883a 	mov	r4,r20
   32aa8:	a80b883a 	mov	r5,r21
   32aac:	dd001215 	stw	r20,72(sp)
   32ab0:	dd401315 	stw	r21,76(sp)
   32ab4:	00390400 	call	39040 <__nedf2>
   32ab8:	1000171e 	bne	r2,zero,32b18 <_dtoa_r+0x104>
   32abc:	d9802717 	ldw	r6,156(sp)
   32ac0:	00800044 	movi	r2,1
   32ac4:	30800015 	stw	r2,0(r6)
   32ac8:	d8802917 	ldw	r2,164(sp)
   32acc:	10029b26 	beq	r2,zero,3353c <_dtoa_r+0xb28>
   32ad0:	d9002917 	ldw	r4,164(sp)
   32ad4:	00800074 	movhi	r2,1
   32ad8:	10802d44 	addi	r2,r2,181
   32adc:	10ffffc4 	addi	r3,r2,-1
   32ae0:	20800015 	stw	r2,0(r4)
   32ae4:	1805883a 	mov	r2,r3
   32ae8:	dfc02517 	ldw	ra,148(sp)
   32aec:	df002417 	ldw	fp,144(sp)
   32af0:	ddc02317 	ldw	r23,140(sp)
   32af4:	dd802217 	ldw	r22,136(sp)
   32af8:	dd402117 	ldw	r21,132(sp)
   32afc:	dd002017 	ldw	r20,128(sp)
   32b00:	dcc01f17 	ldw	r19,124(sp)
   32b04:	dc801e17 	ldw	r18,120(sp)
   32b08:	dc401d17 	ldw	r17,116(sp)
   32b0c:	dc001c17 	ldw	r16,112(sp)
   32b10:	dec02604 	addi	sp,sp,152
   32b14:	f800283a 	ret
   32b18:	d9001617 	ldw	r4,88(sp)
   32b1c:	d9401217 	ldw	r5,72(sp)
   32b20:	d8800104 	addi	r2,sp,4
   32b24:	a80d883a 	mov	r6,r21
   32b28:	d9c00204 	addi	r7,sp,8
   32b2c:	d8800015 	stw	r2,0(sp)
   32b30:	00361e40 	call	361e4 <__d2b>
   32b34:	d8800715 	stw	r2,28(sp)
   32b38:	a804d53a 	srli	r2,r21,20
   32b3c:	1101ffcc 	andi	r4,r2,2047
   32b40:	20008626 	beq	r4,zero,32d5c <_dtoa_r+0x348>
   32b44:	d8c01217 	ldw	r3,72(sp)
   32b48:	00800434 	movhi	r2,16
   32b4c:	10bfffc4 	addi	r2,r2,-1
   32b50:	ddc00117 	ldw	r23,4(sp)
   32b54:	a884703a 	and	r2,r21,r2
   32b58:	1811883a 	mov	r8,r3
   32b5c:	124ffc34 	orhi	r9,r2,16368
   32b60:	25bf0044 	addi	r22,r4,-1023
   32b64:	d8000815 	stw	zero,32(sp)
   32b68:	0005883a 	mov	r2,zero
   32b6c:	00cffe34 	movhi	r3,16376
   32b70:	480b883a 	mov	r5,r9
   32b74:	4009883a 	mov	r4,r8
   32b78:	180f883a 	mov	r7,r3
   32b7c:	100d883a 	mov	r6,r2
   32b80:	00388a80 	call	388a8 <__subdf3>
   32b84:	0218dbf4 	movhi	r8,25455
   32b88:	4210d844 	addi	r8,r8,17249
   32b8c:	024ff4f4 	movhi	r9,16339
   32b90:	4a61e9c4 	addi	r9,r9,-30809
   32b94:	480f883a 	mov	r7,r9
   32b98:	400d883a 	mov	r6,r8
   32b9c:	180b883a 	mov	r5,r3
   32ba0:	1009883a 	mov	r4,r2
   32ba4:	003899c0 	call	3899c <__muldf3>
   32ba8:	0222d874 	movhi	r8,35681
   32bac:	42322cc4 	addi	r8,r8,-14157
   32bb0:	024ff1f4 	movhi	r9,16327
   32bb4:	4a628a04 	addi	r9,r9,-30168
   32bb8:	480f883a 	mov	r7,r9
   32bbc:	400d883a 	mov	r6,r8
   32bc0:	180b883a 	mov	r5,r3
   32bc4:	1009883a 	mov	r4,r2
   32bc8:	00389280 	call	38928 <__adddf3>
   32bcc:	b009883a 	mov	r4,r22
   32bd0:	1021883a 	mov	r16,r2
   32bd4:	1823883a 	mov	r17,r3
   32bd8:	00392600 	call	39260 <__floatsidf>
   32bdc:	021427f4 	movhi	r8,20639
   32be0:	421e7ec4 	addi	r8,r8,31227
   32be4:	024ff4f4 	movhi	r9,16339
   32be8:	4a5104c4 	addi	r9,r9,17427
   32bec:	480f883a 	mov	r7,r9
   32bf0:	400d883a 	mov	r6,r8
   32bf4:	180b883a 	mov	r5,r3
   32bf8:	1009883a 	mov	r4,r2
   32bfc:	003899c0 	call	3899c <__muldf3>
   32c00:	180f883a 	mov	r7,r3
   32c04:	880b883a 	mov	r5,r17
   32c08:	100d883a 	mov	r6,r2
   32c0c:	8009883a 	mov	r4,r16
   32c10:	00389280 	call	38928 <__adddf3>
   32c14:	1009883a 	mov	r4,r2
   32c18:	180b883a 	mov	r5,r3
   32c1c:	1021883a 	mov	r16,r2
   32c20:	1823883a 	mov	r17,r3
   32c24:	00393580 	call	39358 <__fixdfsi>
   32c28:	000d883a 	mov	r6,zero
   32c2c:	000f883a 	mov	r7,zero
   32c30:	8009883a 	mov	r4,r16
   32c34:	880b883a 	mov	r5,r17
   32c38:	d8800d15 	stw	r2,52(sp)
   32c3c:	00391d80 	call	391d8 <__ltdf2>
   32c40:	10031716 	blt	r2,zero,338a0 <_dtoa_r+0xe8c>
   32c44:	d8c00d17 	ldw	r3,52(sp)
   32c48:	00800584 	movi	r2,22
   32c4c:	10c1482e 	bgeu	r2,r3,33170 <_dtoa_r+0x75c>
   32c50:	01000044 	movi	r4,1
   32c54:	d9000c15 	stw	r4,48(sp)
   32c58:	bd85c83a 	sub	r2,r23,r22
   32c5c:	11bfffc4 	addi	r6,r2,-1
   32c60:	30030b16 	blt	r6,zero,33890 <_dtoa_r+0xe7c>
   32c64:	d9800a15 	stw	r6,40(sp)
   32c68:	d8001115 	stw	zero,68(sp)
   32c6c:	d8c00d17 	ldw	r3,52(sp)
   32c70:	1802ff16 	blt	r3,zero,33870 <_dtoa_r+0xe5c>
   32c74:	d9000a17 	ldw	r4,40(sp)
   32c78:	d8c00915 	stw	r3,36(sp)
   32c7c:	d8001015 	stw	zero,64(sp)
   32c80:	20c9883a 	add	r4,r4,r3
   32c84:	d9000a15 	stw	r4,40(sp)
   32c88:	d9001717 	ldw	r4,92(sp)
   32c8c:	00800244 	movi	r2,9
   32c90:	11004636 	bltu	r2,r4,32dac <_dtoa_r+0x398>
   32c94:	00800144 	movi	r2,5
   32c98:	11020416 	blt	r2,r4,334ac <_dtoa_r+0xa98>
   32c9c:	04400044 	movi	r17,1
   32ca0:	d8c01717 	ldw	r3,92(sp)
   32ca4:	00800144 	movi	r2,5
   32ca8:	10c1ed36 	bltu	r2,r3,33460 <_dtoa_r+0xa4c>
   32cac:	18c5883a 	add	r2,r3,r3
   32cb0:	1085883a 	add	r2,r2,r2
   32cb4:	00c000f4 	movhi	r3,3
   32cb8:	18cb3204 	addi	r3,r3,11464
   32cbc:	10c5883a 	add	r2,r2,r3
   32cc0:	11000017 	ldw	r4,0(r2)
   32cc4:	2000683a 	jmp	r4
   32cc8:	00032db4 	movhi	zero,3254
   32ccc:	00032db4 	movhi	zero,3254
   32cd0:	000337b4 	movhi	zero,3294
   32cd4:	0003378c 	andi	zero,zero,3294
   32cd8:	000337d0 	cmplti	zero,zero,3295
   32cdc:	000337dc 	xori	zero,zero,3295
   32ce0:	d9002717 	ldw	r4,156(sp)
   32ce4:	0089c3c4 	movi	r2,9999
   32ce8:	20800015 	stw	r2,0(r4)
   32cec:	a0001026 	beq	r20,zero,32d30 <_dtoa_r+0x31c>
   32cf0:	00c00074 	movhi	r3,1
   32cf4:	18c03904 	addi	r3,r3,228
   32cf8:	d9802917 	ldw	r6,164(sp)
   32cfc:	303f7926 	beq	r6,zero,32ae4 <_dtoa_r+0xd0>
   32d00:	188000c7 	ldb	r2,3(r3)
   32d04:	190000c4 	addi	r4,r3,3
   32d08:	1000101e 	bne	r2,zero,32d4c <_dtoa_r+0x338>
   32d0c:	d8802917 	ldw	r2,164(sp)
   32d10:	11000015 	stw	r4,0(r2)
   32d14:	003f7306 	br	32ae4 <_dtoa_r+0xd0>
   32d18:	00a00034 	movhi	r2,32768
   32d1c:	10bfffc4 	addi	r2,r2,-1
   32d20:	00c00044 	movi	r3,1
   32d24:	88aa703a 	and	r21,r17,r2
   32d28:	90c00015 	stw	r3,0(r18)
   32d2c:	003f5806 	br	32a90 <_dtoa_r+0x7c>
   32d30:	00800434 	movhi	r2,16
   32d34:	10bfffc4 	addi	r2,r2,-1
   32d38:	a884703a 	and	r2,r21,r2
   32d3c:	103fec1e 	bne	r2,zero,32cf0 <_dtoa_r+0x2dc>
   32d40:	00c00074 	movhi	r3,1
   32d44:	18c03604 	addi	r3,r3,216
   32d48:	003feb06 	br	32cf8 <_dtoa_r+0x2e4>
   32d4c:	d8802917 	ldw	r2,164(sp)
   32d50:	19000204 	addi	r4,r3,8
   32d54:	11000015 	stw	r4,0(r2)
   32d58:	003f6206 	br	32ae4 <_dtoa_r+0xd0>
   32d5c:	ddc00117 	ldw	r23,4(sp)
   32d60:	d8800217 	ldw	r2,8(sp)
   32d64:	01000804 	movi	r4,32
   32d68:	b8c10c84 	addi	r3,r23,1074
   32d6c:	18a3883a 	add	r17,r3,r2
   32d70:	2441b80e 	bge	r4,r17,33454 <_dtoa_r+0xa40>
   32d74:	00c01004 	movi	r3,64
   32d78:	1c47c83a 	sub	r3,r3,r17
   32d7c:	88bff804 	addi	r2,r17,-32
   32d80:	a8c6983a 	sll	r3,r21,r3
   32d84:	a084d83a 	srl	r2,r20,r2
   32d88:	1888b03a 	or	r4,r3,r2
   32d8c:	00394300 	call	39430 <__floatunsidf>
   32d90:	1011883a 	mov	r8,r2
   32d94:	00bf8434 	movhi	r2,65040
   32d98:	01000044 	movi	r4,1
   32d9c:	10d3883a 	add	r9,r2,r3
   32da0:	8dbef344 	addi	r22,r17,-1075
   32da4:	d9000815 	stw	r4,32(sp)
   32da8:	003f6f06 	br	32b68 <_dtoa_r+0x154>
   32dac:	d8001715 	stw	zero,92(sp)
   32db0:	04400044 	movi	r17,1
   32db4:	00bfffc4 	movi	r2,-1
   32db8:	00c00044 	movi	r3,1
   32dbc:	d8800e15 	stw	r2,56(sp)
   32dc0:	d8002615 	stw	zero,152(sp)
   32dc4:	d8800f15 	stw	r2,60(sp)
   32dc8:	d8c00b15 	stw	r3,44(sp)
   32dcc:	1021883a 	mov	r16,r2
   32dd0:	d8801617 	ldw	r2,88(sp)
   32dd4:	10001115 	stw	zero,68(r2)
   32dd8:	d8801617 	ldw	r2,88(sp)
   32ddc:	11401117 	ldw	r5,68(r2)
   32de0:	1009883a 	mov	r4,r2
   32de4:	00361280 	call	36128 <_Balloc>
   32de8:	d8c01617 	ldw	r3,88(sp)
   32dec:	d8800515 	stw	r2,20(sp)
   32df0:	18801015 	stw	r2,64(r3)
   32df4:	00800384 	movi	r2,14
   32df8:	14006836 	bltu	r2,r16,32f9c <_dtoa_r+0x588>
   32dfc:	8805003a 	cmpeq	r2,r17,zero
   32e00:	1000661e 	bne	r2,zero,32f9c <_dtoa_r+0x588>
   32e04:	d9000d17 	ldw	r4,52(sp)
   32e08:	0102300e 	bge	zero,r4,336cc <_dtoa_r+0xcb8>
   32e0c:	208003cc 	andi	r2,r4,15
   32e10:	100490fa 	slli	r2,r2,3
   32e14:	2025d13a 	srai	r18,r4,4
   32e18:	00c00074 	movhi	r3,1
   32e1c:	18c04b04 	addi	r3,r3,300
   32e20:	10c5883a 	add	r2,r2,r3
   32e24:	90c0040c 	andi	r3,r18,16
   32e28:	14000017 	ldw	r16,0(r2)
   32e2c:	14400117 	ldw	r17,4(r2)
   32e30:	18036a1e 	bne	r3,zero,33bdc <_dtoa_r+0x11c8>
   32e34:	05800084 	movi	r22,2
   32e38:	90001026 	beq	r18,zero,32e7c <_dtoa_r+0x468>
   32e3c:	04c00074 	movhi	r19,1
   32e40:	9cc07d04 	addi	r19,r19,500
   32e44:	9080004c 	andi	r2,r18,1
   32e48:	1005003a 	cmpeq	r2,r2,zero
   32e4c:	1000081e 	bne	r2,zero,32e70 <_dtoa_r+0x45c>
   32e50:	99800017 	ldw	r6,0(r19)
   32e54:	99c00117 	ldw	r7,4(r19)
   32e58:	880b883a 	mov	r5,r17
   32e5c:	8009883a 	mov	r4,r16
   32e60:	003899c0 	call	3899c <__muldf3>
   32e64:	1021883a 	mov	r16,r2
   32e68:	b5800044 	addi	r22,r22,1
   32e6c:	1823883a 	mov	r17,r3
   32e70:	9025d07a 	srai	r18,r18,1
   32e74:	9cc00204 	addi	r19,r19,8
   32e78:	903ff21e 	bne	r18,zero,32e44 <_dtoa_r+0x430>
   32e7c:	a80b883a 	mov	r5,r21
   32e80:	a009883a 	mov	r4,r20
   32e84:	880f883a 	mov	r7,r17
   32e88:	800d883a 	mov	r6,r16
   32e8c:	0038d600 	call	38d60 <__divdf3>
   32e90:	1029883a 	mov	r20,r2
   32e94:	182b883a 	mov	r21,r3
   32e98:	d8c00c17 	ldw	r3,48(sp)
   32e9c:	1805003a 	cmpeq	r2,r3,zero
   32ea0:	1000081e 	bne	r2,zero,32ec4 <_dtoa_r+0x4b0>
   32ea4:	0005883a 	mov	r2,zero
   32ea8:	00cffc34 	movhi	r3,16368
   32eac:	180f883a 	mov	r7,r3
   32eb0:	a009883a 	mov	r4,r20
   32eb4:	a80b883a 	mov	r5,r21
   32eb8:	100d883a 	mov	r6,r2
   32ebc:	00391d80 	call	391d8 <__ltdf2>
   32ec0:	1003fe16 	blt	r2,zero,33ebc <_dtoa_r+0x14a8>
   32ec4:	b009883a 	mov	r4,r22
   32ec8:	00392600 	call	39260 <__floatsidf>
   32ecc:	180b883a 	mov	r5,r3
   32ed0:	1009883a 	mov	r4,r2
   32ed4:	a00d883a 	mov	r6,r20
   32ed8:	a80f883a 	mov	r7,r21
   32edc:	003899c0 	call	3899c <__muldf3>
   32ee0:	0011883a 	mov	r8,zero
   32ee4:	02500734 	movhi	r9,16412
   32ee8:	1009883a 	mov	r4,r2
   32eec:	180b883a 	mov	r5,r3
   32ef0:	480f883a 	mov	r7,r9
   32ef4:	400d883a 	mov	r6,r8
   32ef8:	00389280 	call	38928 <__adddf3>
   32efc:	d9000f17 	ldw	r4,60(sp)
   32f00:	102d883a 	mov	r22,r2
   32f04:	00bf3034 	movhi	r2,64704
   32f08:	18b9883a 	add	fp,r3,r2
   32f0c:	e02f883a 	mov	r23,fp
   32f10:	20028f1e 	bne	r4,zero,33950 <_dtoa_r+0xf3c>
   32f14:	0005883a 	mov	r2,zero
   32f18:	00d00534 	movhi	r3,16404
   32f1c:	a009883a 	mov	r4,r20
   32f20:	a80b883a 	mov	r5,r21
   32f24:	180f883a 	mov	r7,r3
   32f28:	100d883a 	mov	r6,r2
   32f2c:	00388a80 	call	388a8 <__subdf3>
   32f30:	1009883a 	mov	r4,r2
   32f34:	e00f883a 	mov	r7,fp
   32f38:	180b883a 	mov	r5,r3
   32f3c:	b00d883a 	mov	r6,r22
   32f40:	1025883a 	mov	r18,r2
   32f44:	1827883a 	mov	r19,r3
   32f48:	00390c80 	call	390c8 <__gtdf2>
   32f4c:	00834f16 	blt	zero,r2,33c8c <_dtoa_r+0x1278>
   32f50:	e0e0003c 	xorhi	r3,fp,32768
   32f54:	9009883a 	mov	r4,r18
   32f58:	980b883a 	mov	r5,r19
   32f5c:	180f883a 	mov	r7,r3
   32f60:	b00d883a 	mov	r6,r22
   32f64:	00391d80 	call	391d8 <__ltdf2>
   32f68:	1000080e 	bge	r2,zero,32f8c <_dtoa_r+0x578>
   32f6c:	0027883a 	mov	r19,zero
   32f70:	0025883a 	mov	r18,zero
   32f74:	d8802617 	ldw	r2,152(sp)
   32f78:	df000517 	ldw	fp,20(sp)
   32f7c:	d8000615 	stw	zero,24(sp)
   32f80:	0084303a 	nor	r2,zero,r2
   32f84:	d8800d15 	stw	r2,52(sp)
   32f88:	00019b06 	br	335f8 <_dtoa_r+0xbe4>
   32f8c:	d9801217 	ldw	r6,72(sp)
   32f90:	d8801317 	ldw	r2,76(sp)
   32f94:	3029883a 	mov	r20,r6
   32f98:	102b883a 	mov	r21,r2
   32f9c:	d8c00217 	ldw	r3,8(sp)
   32fa0:	18008516 	blt	r3,zero,331b8 <_dtoa_r+0x7a4>
   32fa4:	d9000d17 	ldw	r4,52(sp)
   32fa8:	00800384 	movi	r2,14
   32fac:	11008216 	blt	r2,r4,331b8 <_dtoa_r+0x7a4>
   32fb0:	200490fa 	slli	r2,r4,3
   32fb4:	d9802617 	ldw	r6,152(sp)
   32fb8:	00c00074 	movhi	r3,1
   32fbc:	18c04b04 	addi	r3,r3,300
   32fc0:	10c5883a 	add	r2,r2,r3
   32fc4:	14800017 	ldw	r18,0(r2)
   32fc8:	14c00117 	ldw	r19,4(r2)
   32fcc:	30031e16 	blt	r6,zero,33c48 <_dtoa_r+0x1234>
   32fd0:	d9000517 	ldw	r4,20(sp)
   32fd4:	d8c00f17 	ldw	r3,60(sp)
   32fd8:	a823883a 	mov	r17,r21
   32fdc:	a021883a 	mov	r16,r20
   32fe0:	192b883a 	add	r21,r3,r4
   32fe4:	2039883a 	mov	fp,r4
   32fe8:	00000f06 	br	33028 <_dtoa_r+0x614>
   32fec:	0005883a 	mov	r2,zero
   32ff0:	00d00934 	movhi	r3,16420
   32ff4:	5009883a 	mov	r4,r10
   32ff8:	580b883a 	mov	r5,r11
   32ffc:	180f883a 	mov	r7,r3
   33000:	100d883a 	mov	r6,r2
   33004:	003899c0 	call	3899c <__muldf3>
   33008:	180b883a 	mov	r5,r3
   3300c:	000d883a 	mov	r6,zero
   33010:	000f883a 	mov	r7,zero
   33014:	1009883a 	mov	r4,r2
   33018:	1021883a 	mov	r16,r2
   3301c:	1823883a 	mov	r17,r3
   33020:	00390400 	call	39040 <__nedf2>
   33024:	10004526 	beq	r2,zero,3313c <_dtoa_r+0x728>
   33028:	900d883a 	mov	r6,r18
   3302c:	980f883a 	mov	r7,r19
   33030:	8009883a 	mov	r4,r16
   33034:	880b883a 	mov	r5,r17
   33038:	0038d600 	call	38d60 <__divdf3>
   3303c:	180b883a 	mov	r5,r3
   33040:	1009883a 	mov	r4,r2
   33044:	00393580 	call	39358 <__fixdfsi>
   33048:	1009883a 	mov	r4,r2
   3304c:	1029883a 	mov	r20,r2
   33050:	00392600 	call	39260 <__floatsidf>
   33054:	180f883a 	mov	r7,r3
   33058:	9009883a 	mov	r4,r18
   3305c:	980b883a 	mov	r5,r19
   33060:	100d883a 	mov	r6,r2
   33064:	003899c0 	call	3899c <__muldf3>
   33068:	180f883a 	mov	r7,r3
   3306c:	880b883a 	mov	r5,r17
   33070:	8009883a 	mov	r4,r16
   33074:	100d883a 	mov	r6,r2
   33078:	00388a80 	call	388a8 <__subdf3>
   3307c:	1015883a 	mov	r10,r2
   33080:	a0800c04 	addi	r2,r20,48
   33084:	e0800005 	stb	r2,0(fp)
   33088:	e7000044 	addi	fp,fp,1
   3308c:	1817883a 	mov	r11,r3
   33090:	e57fd61e 	bne	fp,r21,32fec <_dtoa_r+0x5d8>
   33094:	500d883a 	mov	r6,r10
   33098:	180f883a 	mov	r7,r3
   3309c:	5009883a 	mov	r4,r10
   330a0:	180b883a 	mov	r5,r3
   330a4:	00389280 	call	38928 <__adddf3>
   330a8:	100d883a 	mov	r6,r2
   330ac:	9009883a 	mov	r4,r18
   330b0:	980b883a 	mov	r5,r19
   330b4:	180f883a 	mov	r7,r3
   330b8:	1021883a 	mov	r16,r2
   330bc:	1823883a 	mov	r17,r3
   330c0:	00391d80 	call	391d8 <__ltdf2>
   330c4:	10000816 	blt	r2,zero,330e8 <_dtoa_r+0x6d4>
   330c8:	980b883a 	mov	r5,r19
   330cc:	800d883a 	mov	r6,r16
   330d0:	880f883a 	mov	r7,r17
   330d4:	9009883a 	mov	r4,r18
   330d8:	0038fb80 	call	38fb8 <__eqdf2>
   330dc:	1000171e 	bne	r2,zero,3313c <_dtoa_r+0x728>
   330e0:	a080004c 	andi	r2,r20,1
   330e4:	10001526 	beq	r2,zero,3313c <_dtoa_r+0x728>
   330e8:	d8800d17 	ldw	r2,52(sp)
   330ec:	d8800415 	stw	r2,16(sp)
   330f0:	e009883a 	mov	r4,fp
   330f4:	213fffc4 	addi	r4,r4,-1
   330f8:	20c00007 	ldb	r3,0(r4)
   330fc:	00800e44 	movi	r2,57
   33100:	1880081e 	bne	r3,r2,33124 <_dtoa_r+0x710>
   33104:	d8800517 	ldw	r2,20(sp)
   33108:	113ffa1e 	bne	r2,r4,330f4 <_dtoa_r+0x6e0>
   3310c:	d8c00417 	ldw	r3,16(sp)
   33110:	d9800517 	ldw	r6,20(sp)
   33114:	00800c04 	movi	r2,48
   33118:	18c00044 	addi	r3,r3,1
   3311c:	d8c00415 	stw	r3,16(sp)
   33120:	30800005 	stb	r2,0(r6)
   33124:	20800003 	ldbu	r2,0(r4)
   33128:	d8c00417 	ldw	r3,16(sp)
   3312c:	27000044 	addi	fp,r4,1
   33130:	10800044 	addi	r2,r2,1
   33134:	d8c00d15 	stw	r3,52(sp)
   33138:	20800005 	stb	r2,0(r4)
   3313c:	d9001617 	ldw	r4,88(sp)
   33140:	d9400717 	ldw	r5,28(sp)
   33144:	0035ba80 	call	35ba8 <_Bfree>
   33148:	e0000005 	stb	zero,0(fp)
   3314c:	d9800d17 	ldw	r6,52(sp)
   33150:	d8c02717 	ldw	r3,156(sp)
   33154:	d9002917 	ldw	r4,164(sp)
   33158:	30800044 	addi	r2,r6,1
   3315c:	18800015 	stw	r2,0(r3)
   33160:	20029c26 	beq	r4,zero,33bd4 <_dtoa_r+0x11c0>
   33164:	d8c00517 	ldw	r3,20(sp)
   33168:	27000015 	stw	fp,0(r4)
   3316c:	003e5d06 	br	32ae4 <_dtoa_r+0xd0>
   33170:	d9800d17 	ldw	r6,52(sp)
   33174:	00c00074 	movhi	r3,1
   33178:	18c04b04 	addi	r3,r3,300
   3317c:	d9001217 	ldw	r4,72(sp)
   33180:	300490fa 	slli	r2,r6,3
   33184:	d9401317 	ldw	r5,76(sp)
   33188:	10c5883a 	add	r2,r2,r3
   3318c:	12000017 	ldw	r8,0(r2)
   33190:	12400117 	ldw	r9,4(r2)
   33194:	400d883a 	mov	r6,r8
   33198:	480f883a 	mov	r7,r9
   3319c:	00391d80 	call	391d8 <__ltdf2>
   331a0:	1000030e 	bge	r2,zero,331b0 <_dtoa_r+0x79c>
   331a4:	d8800d17 	ldw	r2,52(sp)
   331a8:	10bfffc4 	addi	r2,r2,-1
   331ac:	d8800d15 	stw	r2,52(sp)
   331b0:	d8000c15 	stw	zero,48(sp)
   331b4:	003ea806 	br	32c58 <_dtoa_r+0x244>
   331b8:	d9000b17 	ldw	r4,44(sp)
   331bc:	202cc03a 	cmpne	r22,r4,zero
   331c0:	b000c71e 	bne	r22,zero,334e0 <_dtoa_r+0xacc>
   331c4:	dc001117 	ldw	r16,68(sp)
   331c8:	dc801017 	ldw	r18,64(sp)
   331cc:	0027883a 	mov	r19,zero
   331d0:	04000b0e 	bge	zero,r16,33200 <_dtoa_r+0x7ec>
   331d4:	d8c00a17 	ldw	r3,40(sp)
   331d8:	00c0090e 	bge	zero,r3,33200 <_dtoa_r+0x7ec>
   331dc:	8005883a 	mov	r2,r16
   331e0:	1c011316 	blt	r3,r16,33630 <_dtoa_r+0xc1c>
   331e4:	d9000a17 	ldw	r4,40(sp)
   331e8:	d9801117 	ldw	r6,68(sp)
   331ec:	80a1c83a 	sub	r16,r16,r2
   331f0:	2089c83a 	sub	r4,r4,r2
   331f4:	308dc83a 	sub	r6,r6,r2
   331f8:	d9000a15 	stw	r4,40(sp)
   331fc:	d9801115 	stw	r6,68(sp)
   33200:	d8801017 	ldw	r2,64(sp)
   33204:	0080150e 	bge	zero,r2,3325c <_dtoa_r+0x848>
   33208:	d8c00b17 	ldw	r3,44(sp)
   3320c:	1805003a 	cmpeq	r2,r3,zero
   33210:	1001c91e 	bne	r2,zero,33938 <_dtoa_r+0xf24>
   33214:	04800e0e 	bge	zero,r18,33250 <_dtoa_r+0x83c>
   33218:	d9001617 	ldw	r4,88(sp)
   3321c:	980b883a 	mov	r5,r19
   33220:	900d883a 	mov	r6,r18
   33224:	003695c0 	call	3695c <__pow5mult>
   33228:	d9001617 	ldw	r4,88(sp)
   3322c:	d9800717 	ldw	r6,28(sp)
   33230:	100b883a 	mov	r5,r2
   33234:	1027883a 	mov	r19,r2
   33238:	00366380 	call	36638 <__multiply>
   3323c:	d9001617 	ldw	r4,88(sp)
   33240:	d9400717 	ldw	r5,28(sp)
   33244:	1023883a 	mov	r17,r2
   33248:	0035ba80 	call	35ba8 <_Bfree>
   3324c:	dc400715 	stw	r17,28(sp)
   33250:	d9001017 	ldw	r4,64(sp)
   33254:	248dc83a 	sub	r6,r4,r18
   33258:	30010e1e 	bne	r6,zero,33694 <_dtoa_r+0xc80>
   3325c:	d9001617 	ldw	r4,88(sp)
   33260:	04400044 	movi	r17,1
   33264:	880b883a 	mov	r5,r17
   33268:	00368200 	call	36820 <__i2b>
   3326c:	d9800917 	ldw	r6,36(sp)
   33270:	1025883a 	mov	r18,r2
   33274:	0180040e 	bge	zero,r6,33288 <_dtoa_r+0x874>
   33278:	d9001617 	ldw	r4,88(sp)
   3327c:	100b883a 	mov	r5,r2
   33280:	003695c0 	call	3695c <__pow5mult>
   33284:	1025883a 	mov	r18,r2
   33288:	d8801717 	ldw	r2,92(sp)
   3328c:	8880f30e 	bge	r17,r2,3365c <_dtoa_r+0xc48>
   33290:	0023883a 	mov	r17,zero
   33294:	d9800917 	ldw	r6,36(sp)
   33298:	30019e1e 	bne	r6,zero,33914 <_dtoa_r+0xf00>
   3329c:	00c00044 	movi	r3,1
   332a0:	d9000a17 	ldw	r4,40(sp)
   332a4:	20c5883a 	add	r2,r4,r3
   332a8:	10c007cc 	andi	r3,r2,31
   332ac:	1800841e 	bne	r3,zero,334c0 <_dtoa_r+0xaac>
   332b0:	00800704 	movi	r2,28
   332b4:	d9000a17 	ldw	r4,40(sp)
   332b8:	d9801117 	ldw	r6,68(sp)
   332bc:	80a1883a 	add	r16,r16,r2
   332c0:	2089883a 	add	r4,r4,r2
   332c4:	308d883a 	add	r6,r6,r2
   332c8:	d9000a15 	stw	r4,40(sp)
   332cc:	d9801115 	stw	r6,68(sp)
   332d0:	d8801117 	ldw	r2,68(sp)
   332d4:	0080050e 	bge	zero,r2,332ec <_dtoa_r+0x8d8>
   332d8:	d9400717 	ldw	r5,28(sp)
   332dc:	d9001617 	ldw	r4,88(sp)
   332e0:	100d883a 	mov	r6,r2
   332e4:	00364ec0 	call	364ec <__lshift>
   332e8:	d8800715 	stw	r2,28(sp)
   332ec:	d8c00a17 	ldw	r3,40(sp)
   332f0:	00c0050e 	bge	zero,r3,33308 <_dtoa_r+0x8f4>
   332f4:	d9001617 	ldw	r4,88(sp)
   332f8:	900b883a 	mov	r5,r18
   332fc:	180d883a 	mov	r6,r3
   33300:	00364ec0 	call	364ec <__lshift>
   33304:	1025883a 	mov	r18,r2
   33308:	d9000c17 	ldw	r4,48(sp)
   3330c:	2005003a 	cmpeq	r2,r4,zero
   33310:	10016f26 	beq	r2,zero,338d0 <_dtoa_r+0xebc>
   33314:	d9000f17 	ldw	r4,60(sp)
   33318:	0102170e 	bge	zero,r4,33b78 <_dtoa_r+0x1164>
   3331c:	d9800b17 	ldw	r6,44(sp)
   33320:	3005003a 	cmpeq	r2,r6,zero
   33324:	1000881e 	bne	r2,zero,33548 <_dtoa_r+0xb34>
   33328:	0400050e 	bge	zero,r16,33340 <_dtoa_r+0x92c>
   3332c:	d9001617 	ldw	r4,88(sp)
   33330:	980b883a 	mov	r5,r19
   33334:	800d883a 	mov	r6,r16
   33338:	00364ec0 	call	364ec <__lshift>
   3333c:	1027883a 	mov	r19,r2
   33340:	8804c03a 	cmpne	r2,r17,zero
   33344:	1002541e 	bne	r2,zero,33c98 <_dtoa_r+0x1284>
   33348:	980b883a 	mov	r5,r19
   3334c:	dd800517 	ldw	r22,20(sp)
   33350:	dcc00615 	stw	r19,24(sp)
   33354:	a700004c 	andi	fp,r20,1
   33358:	2827883a 	mov	r19,r5
   3335c:	d9000717 	ldw	r4,28(sp)
   33360:	900b883a 	mov	r5,r18
   33364:	00327fc0 	call	327fc <quorem>
   33368:	d9000717 	ldw	r4,28(sp)
   3336c:	d9400617 	ldw	r5,24(sp)
   33370:	1023883a 	mov	r17,r2
   33374:	8dc00c04 	addi	r23,r17,48
   33378:	0035d040 	call	35d04 <__mcmp>
   3337c:	d9001617 	ldw	r4,88(sp)
   33380:	900b883a 	mov	r5,r18
   33384:	980d883a 	mov	r6,r19
   33388:	1029883a 	mov	r20,r2
   3338c:	00363600 	call	36360 <__mdiff>
   33390:	102b883a 	mov	r21,r2
   33394:	10800317 	ldw	r2,12(r2)
   33398:	1001281e 	bne	r2,zero,3383c <_dtoa_r+0xe28>
   3339c:	d9000717 	ldw	r4,28(sp)
   333a0:	a80b883a 	mov	r5,r21
   333a4:	0035d040 	call	35d04 <__mcmp>
   333a8:	d9001617 	ldw	r4,88(sp)
   333ac:	1021883a 	mov	r16,r2
   333b0:	a80b883a 	mov	r5,r21
   333b4:	0035ba80 	call	35ba8 <_Bfree>
   333b8:	8000041e 	bne	r16,zero,333cc <_dtoa_r+0x9b8>
   333bc:	d8801717 	ldw	r2,92(sp)
   333c0:	1000021e 	bne	r2,zero,333cc <_dtoa_r+0x9b8>
   333c4:	e004c03a 	cmpne	r2,fp,zero
   333c8:	10011726 	beq	r2,zero,33828 <_dtoa_r+0xe14>
   333cc:	a0010616 	blt	r20,zero,337e8 <_dtoa_r+0xdd4>
   333d0:	a000041e 	bne	r20,zero,333e4 <_dtoa_r+0x9d0>
   333d4:	d8c01717 	ldw	r3,92(sp)
   333d8:	1800021e 	bne	r3,zero,333e4 <_dtoa_r+0x9d0>
   333dc:	e004c03a 	cmpne	r2,fp,zero
   333e0:	10010126 	beq	r2,zero,337e8 <_dtoa_r+0xdd4>
   333e4:	04023d16 	blt	zero,r16,33cdc <_dtoa_r+0x12c8>
   333e8:	b5c00005 	stb	r23,0(r22)
   333ec:	d9800517 	ldw	r6,20(sp)
   333f0:	d9000f17 	ldw	r4,60(sp)
   333f4:	b5800044 	addi	r22,r22,1
   333f8:	3105883a 	add	r2,r6,r4
   333fc:	b0806526 	beq	r22,r2,33594 <_dtoa_r+0xb80>
   33400:	d9400717 	ldw	r5,28(sp)
   33404:	d9001617 	ldw	r4,88(sp)
   33408:	01800284 	movi	r6,10
   3340c:	000f883a 	mov	r7,zero
   33410:	003685c0 	call	3685c <__multadd>
   33414:	d8800715 	stw	r2,28(sp)
   33418:	d8800617 	ldw	r2,24(sp)
   3341c:	14c10c26 	beq	r2,r19,33850 <_dtoa_r+0xe3c>
   33420:	d9400617 	ldw	r5,24(sp)
   33424:	d9001617 	ldw	r4,88(sp)
   33428:	01800284 	movi	r6,10
   3342c:	000f883a 	mov	r7,zero
   33430:	003685c0 	call	3685c <__multadd>
   33434:	d9001617 	ldw	r4,88(sp)
   33438:	980b883a 	mov	r5,r19
   3343c:	01800284 	movi	r6,10
   33440:	000f883a 	mov	r7,zero
   33444:	d8800615 	stw	r2,24(sp)
   33448:	003685c0 	call	3685c <__multadd>
   3344c:	1027883a 	mov	r19,r2
   33450:	003fc206 	br	3335c <_dtoa_r+0x948>
   33454:	2445c83a 	sub	r2,r4,r17
   33458:	a088983a 	sll	r4,r20,r2
   3345c:	003e4b06 	br	32d8c <_dtoa_r+0x378>
   33460:	01bfffc4 	movi	r6,-1
   33464:	00800044 	movi	r2,1
   33468:	d9800e15 	stw	r6,56(sp)
   3346c:	d9800f15 	stw	r6,60(sp)
   33470:	d8800b15 	stw	r2,44(sp)
   33474:	d8c01617 	ldw	r3,88(sp)
   33478:	008005c4 	movi	r2,23
   3347c:	18001115 	stw	zero,68(r3)
   33480:	1580082e 	bgeu	r2,r22,334a4 <_dtoa_r+0xa90>
   33484:	00c00104 	movi	r3,4
   33488:	0009883a 	mov	r4,zero
   3348c:	18c7883a 	add	r3,r3,r3
   33490:	18800504 	addi	r2,r3,20
   33494:	21000044 	addi	r4,r4,1
   33498:	b0bffc2e 	bgeu	r22,r2,3348c <_dtoa_r+0xa78>
   3349c:	d9801617 	ldw	r6,88(sp)
   334a0:	31001115 	stw	r4,68(r6)
   334a4:	dc000f17 	ldw	r16,60(sp)
   334a8:	003e4b06 	br	32dd8 <_dtoa_r+0x3c4>
   334ac:	d9801717 	ldw	r6,92(sp)
   334b0:	0023883a 	mov	r17,zero
   334b4:	31bfff04 	addi	r6,r6,-4
   334b8:	d9801715 	stw	r6,92(sp)
   334bc:	003df806 	br	32ca0 <_dtoa_r+0x28c>
   334c0:	00800804 	movi	r2,32
   334c4:	10c9c83a 	sub	r4,r2,r3
   334c8:	00c00104 	movi	r3,4
   334cc:	19005a16 	blt	r3,r4,33638 <_dtoa_r+0xc24>
   334d0:	008000c4 	movi	r2,3
   334d4:	113f7e16 	blt	r2,r4,332d0 <_dtoa_r+0x8bc>
   334d8:	20800704 	addi	r2,r4,28
   334dc:	003f7506 	br	332b4 <_dtoa_r+0x8a0>
   334e0:	d9801717 	ldw	r6,92(sp)
   334e4:	00800044 	movi	r2,1
   334e8:	1180a10e 	bge	r2,r6,33770 <_dtoa_r+0xd5c>
   334ec:	d9800f17 	ldw	r6,60(sp)
   334f0:	d8c01017 	ldw	r3,64(sp)
   334f4:	30bfffc4 	addi	r2,r6,-1
   334f8:	1881c616 	blt	r3,r2,33c14 <_dtoa_r+0x1200>
   334fc:	18a5c83a 	sub	r18,r3,r2
   33500:	d8800f17 	ldw	r2,60(sp)
   33504:	10026216 	blt	r2,zero,33e90 <_dtoa_r+0x147c>
   33508:	dc001117 	ldw	r16,68(sp)
   3350c:	1007883a 	mov	r3,r2
   33510:	d9800a17 	ldw	r6,40(sp)
   33514:	d8801117 	ldw	r2,68(sp)
   33518:	d9001617 	ldw	r4,88(sp)
   3351c:	30cd883a 	add	r6,r6,r3
   33520:	10c5883a 	add	r2,r2,r3
   33524:	01400044 	movi	r5,1
   33528:	d9800a15 	stw	r6,40(sp)
   3352c:	d8801115 	stw	r2,68(sp)
   33530:	00368200 	call	36820 <__i2b>
   33534:	1027883a 	mov	r19,r2
   33538:	003f2506 	br	331d0 <_dtoa_r+0x7bc>
   3353c:	00c00074 	movhi	r3,1
   33540:	18c02d04 	addi	r3,r3,180
   33544:	003d6706 	br	32ae4 <_dtoa_r+0xd0>
   33548:	dd800517 	ldw	r22,20(sp)
   3354c:	04000044 	movi	r16,1
   33550:	00000706 	br	33570 <_dtoa_r+0xb5c>
   33554:	d9400717 	ldw	r5,28(sp)
   33558:	d9001617 	ldw	r4,88(sp)
   3355c:	01800284 	movi	r6,10
   33560:	000f883a 	mov	r7,zero
   33564:	003685c0 	call	3685c <__multadd>
   33568:	d8800715 	stw	r2,28(sp)
   3356c:	84000044 	addi	r16,r16,1
   33570:	d9000717 	ldw	r4,28(sp)
   33574:	900b883a 	mov	r5,r18
   33578:	00327fc0 	call	327fc <quorem>
   3357c:	15c00c04 	addi	r23,r2,48
   33580:	b5c00005 	stb	r23,0(r22)
   33584:	d8c00f17 	ldw	r3,60(sp)
   33588:	b5800044 	addi	r22,r22,1
   3358c:	80fff116 	blt	r16,r3,33554 <_dtoa_r+0xb40>
   33590:	d8000615 	stw	zero,24(sp)
   33594:	d9400717 	ldw	r5,28(sp)
   33598:	d9001617 	ldw	r4,88(sp)
   3359c:	01800044 	movi	r6,1
   335a0:	00364ec0 	call	364ec <__lshift>
   335a4:	1009883a 	mov	r4,r2
   335a8:	900b883a 	mov	r5,r18
   335ac:	d8800715 	stw	r2,28(sp)
   335b0:	0035d040 	call	35d04 <__mcmp>
   335b4:	00803c0e 	bge	zero,r2,336a8 <_dtoa_r+0xc94>
   335b8:	b009883a 	mov	r4,r22
   335bc:	213fffc4 	addi	r4,r4,-1
   335c0:	21400003 	ldbu	r5,0(r4)
   335c4:	00800e44 	movi	r2,57
   335c8:	28c03fcc 	andi	r3,r5,255
   335cc:	18c0201c 	xori	r3,r3,128
   335d0:	18ffe004 	addi	r3,r3,-128
   335d4:	1881981e 	bne	r3,r2,33c38 <_dtoa_r+0x1224>
   335d8:	d9800517 	ldw	r6,20(sp)
   335dc:	21bff71e 	bne	r4,r6,335bc <_dtoa_r+0xba8>
   335e0:	d8800d17 	ldw	r2,52(sp)
   335e4:	37000044 	addi	fp,r6,1
   335e8:	10800044 	addi	r2,r2,1
   335ec:	d8800d15 	stw	r2,52(sp)
   335f0:	00800c44 	movi	r2,49
   335f4:	30800005 	stb	r2,0(r6)
   335f8:	d9001617 	ldw	r4,88(sp)
   335fc:	900b883a 	mov	r5,r18
   33600:	0035ba80 	call	35ba8 <_Bfree>
   33604:	983ecd26 	beq	r19,zero,3313c <_dtoa_r+0x728>
   33608:	d8c00617 	ldw	r3,24(sp)
   3360c:	18000426 	beq	r3,zero,33620 <_dtoa_r+0xc0c>
   33610:	1cc00326 	beq	r3,r19,33620 <_dtoa_r+0xc0c>
   33614:	d9001617 	ldw	r4,88(sp)
   33618:	180b883a 	mov	r5,r3
   3361c:	0035ba80 	call	35ba8 <_Bfree>
   33620:	d9001617 	ldw	r4,88(sp)
   33624:	980b883a 	mov	r5,r19
   33628:	0035ba80 	call	35ba8 <_Bfree>
   3362c:	003ec306 	br	3313c <_dtoa_r+0x728>
   33630:	1805883a 	mov	r2,r3
   33634:	003eeb06 	br	331e4 <_dtoa_r+0x7d0>
   33638:	d9800a17 	ldw	r6,40(sp)
   3363c:	d8c01117 	ldw	r3,68(sp)
   33640:	20bfff04 	addi	r2,r4,-4
   33644:	308d883a 	add	r6,r6,r2
   33648:	1887883a 	add	r3,r3,r2
   3364c:	80a1883a 	add	r16,r16,r2
   33650:	d9800a15 	stw	r6,40(sp)
   33654:	d8c01115 	stw	r3,68(sp)
   33658:	003f1d06 	br	332d0 <_dtoa_r+0x8bc>
   3365c:	a03f0c1e 	bne	r20,zero,33290 <_dtoa_r+0x87c>
   33660:	00800434 	movhi	r2,16
   33664:	10bfffc4 	addi	r2,r2,-1
   33668:	a884703a 	and	r2,r21,r2
   3366c:	103f081e 	bne	r2,zero,33290 <_dtoa_r+0x87c>
   33670:	a89ffc2c 	andhi	r2,r21,32752
   33674:	103f0626 	beq	r2,zero,33290 <_dtoa_r+0x87c>
   33678:	d8c01117 	ldw	r3,68(sp)
   3367c:	d9000a17 	ldw	r4,40(sp)
   33680:	18c00044 	addi	r3,r3,1
   33684:	21000044 	addi	r4,r4,1
   33688:	d8c01115 	stw	r3,68(sp)
   3368c:	d9000a15 	stw	r4,40(sp)
   33690:	003f0006 	br	33294 <_dtoa_r+0x880>
   33694:	d9400717 	ldw	r5,28(sp)
   33698:	d9001617 	ldw	r4,88(sp)
   3369c:	003695c0 	call	3695c <__pow5mult>
   336a0:	d8800715 	stw	r2,28(sp)
   336a4:	003eed06 	br	3325c <_dtoa_r+0x848>
   336a8:	1000021e 	bne	r2,zero,336b4 <_dtoa_r+0xca0>
   336ac:	b880004c 	andi	r2,r23,1
   336b0:	103fc11e 	bne	r2,zero,335b8 <_dtoa_r+0xba4>
   336b4:	b5bfffc4 	addi	r22,r22,-1
   336b8:	b0c00007 	ldb	r3,0(r22)
   336bc:	00800c04 	movi	r2,48
   336c0:	18bffc26 	beq	r3,r2,336b4 <_dtoa_r+0xca0>
   336c4:	b7000044 	addi	fp,r22,1
   336c8:	003fcb06 	br	335f8 <_dtoa_r+0xbe4>
   336cc:	d9800d17 	ldw	r6,52(sp)
   336d0:	018fc83a 	sub	r7,zero,r6
   336d4:	3801f726 	beq	r7,zero,33eb4 <_dtoa_r+0x14a0>
   336d8:	398003cc 	andi	r6,r7,15
   336dc:	300c90fa 	slli	r6,r6,3
   336e0:	01400074 	movhi	r5,1
   336e4:	29404b04 	addi	r5,r5,300
   336e8:	d9001217 	ldw	r4,72(sp)
   336ec:	314d883a 	add	r6,r6,r5
   336f0:	30c00117 	ldw	r3,4(r6)
   336f4:	30800017 	ldw	r2,0(r6)
   336f8:	d9401317 	ldw	r5,76(sp)
   336fc:	3821d13a 	srai	r16,r7,4
   33700:	100d883a 	mov	r6,r2
   33704:	180f883a 	mov	r7,r3
   33708:	003899c0 	call	3899c <__muldf3>
   3370c:	1011883a 	mov	r8,r2
   33710:	1813883a 	mov	r9,r3
   33714:	1029883a 	mov	r20,r2
   33718:	182b883a 	mov	r21,r3
   3371c:	8001e526 	beq	r16,zero,33eb4 <_dtoa_r+0x14a0>
   33720:	05800084 	movi	r22,2
   33724:	04400074 	movhi	r17,1
   33728:	8c407d04 	addi	r17,r17,500
   3372c:	8080004c 	andi	r2,r16,1
   33730:	1005003a 	cmpeq	r2,r2,zero
   33734:	1000081e 	bne	r2,zero,33758 <_dtoa_r+0xd44>
   33738:	89800017 	ldw	r6,0(r17)
   3373c:	89c00117 	ldw	r7,4(r17)
   33740:	480b883a 	mov	r5,r9
   33744:	4009883a 	mov	r4,r8
   33748:	003899c0 	call	3899c <__muldf3>
   3374c:	1011883a 	mov	r8,r2
   33750:	b5800044 	addi	r22,r22,1
   33754:	1813883a 	mov	r9,r3
   33758:	8021d07a 	srai	r16,r16,1
   3375c:	8c400204 	addi	r17,r17,8
   33760:	803ff21e 	bne	r16,zero,3372c <_dtoa_r+0xd18>
   33764:	4029883a 	mov	r20,r8
   33768:	482b883a 	mov	r21,r9
   3376c:	003dca06 	br	32e98 <_dtoa_r+0x484>
   33770:	d9000817 	ldw	r4,32(sp)
   33774:	2005003a 	cmpeq	r2,r4,zero
   33778:	1001f61e 	bne	r2,zero,33f54 <_dtoa_r+0x1540>
   3377c:	dc001117 	ldw	r16,68(sp)
   33780:	dc801017 	ldw	r18,64(sp)
   33784:	18c10cc4 	addi	r3,r3,1075
   33788:	003f6106 	br	33510 <_dtoa_r+0xafc>
   3378c:	d8000b15 	stw	zero,44(sp)
   33790:	d9802617 	ldw	r6,152(sp)
   33794:	d8c00d17 	ldw	r3,52(sp)
   33798:	30800044 	addi	r2,r6,1
   3379c:	18ad883a 	add	r22,r3,r2
   337a0:	b13fffc4 	addi	r4,r22,-1
   337a4:	d9000e15 	stw	r4,56(sp)
   337a8:	0581f60e 	bge	zero,r22,33f84 <_dtoa_r+0x1570>
   337ac:	dd800f15 	stw	r22,60(sp)
   337b0:	003f3006 	br	33474 <_dtoa_r+0xa60>
   337b4:	d8000b15 	stw	zero,44(sp)
   337b8:	d9002617 	ldw	r4,152(sp)
   337bc:	0101eb0e 	bge	zero,r4,33f6c <_dtoa_r+0x1558>
   337c0:	202d883a 	mov	r22,r4
   337c4:	d9000e15 	stw	r4,56(sp)
   337c8:	d9000f15 	stw	r4,60(sp)
   337cc:	003f2906 	br	33474 <_dtoa_r+0xa60>
   337d0:	01800044 	movi	r6,1
   337d4:	d9800b15 	stw	r6,44(sp)
   337d8:	003ff706 	br	337b8 <_dtoa_r+0xda4>
   337dc:	01000044 	movi	r4,1
   337e0:	d9000b15 	stw	r4,44(sp)
   337e4:	003fea06 	br	33790 <_dtoa_r+0xd7c>
   337e8:	04000c0e 	bge	zero,r16,3381c <_dtoa_r+0xe08>
   337ec:	d9400717 	ldw	r5,28(sp)
   337f0:	d9001617 	ldw	r4,88(sp)
   337f4:	01800044 	movi	r6,1
   337f8:	00364ec0 	call	364ec <__lshift>
   337fc:	1009883a 	mov	r4,r2
   33800:	900b883a 	mov	r5,r18
   33804:	d8800715 	stw	r2,28(sp)
   33808:	0035d040 	call	35d04 <__mcmp>
   3380c:	0081e00e 	bge	zero,r2,33f90 <_dtoa_r+0x157c>
   33810:	bdc00044 	addi	r23,r23,1
   33814:	00800e84 	movi	r2,58
   33818:	b881a226 	beq	r23,r2,33ea4 <_dtoa_r+0x1490>
   3381c:	b7000044 	addi	fp,r22,1
   33820:	b5c00005 	stb	r23,0(r22)
   33824:	003f7406 	br	335f8 <_dtoa_r+0xbe4>
   33828:	00800e44 	movi	r2,57
   3382c:	b8819d26 	beq	r23,r2,33ea4 <_dtoa_r+0x1490>
   33830:	053ffa0e 	bge	zero,r20,3381c <_dtoa_r+0xe08>
   33834:	8dc00c44 	addi	r23,r17,49
   33838:	003ff806 	br	3381c <_dtoa_r+0xe08>
   3383c:	d9001617 	ldw	r4,88(sp)
   33840:	a80b883a 	mov	r5,r21
   33844:	04000044 	movi	r16,1
   33848:	0035ba80 	call	35ba8 <_Bfree>
   3384c:	003edf06 	br	333cc <_dtoa_r+0x9b8>
   33850:	d9001617 	ldw	r4,88(sp)
   33854:	980b883a 	mov	r5,r19
   33858:	01800284 	movi	r6,10
   3385c:	000f883a 	mov	r7,zero
   33860:	003685c0 	call	3685c <__multadd>
   33864:	1027883a 	mov	r19,r2
   33868:	d8800615 	stw	r2,24(sp)
   3386c:	003ebb06 	br	3335c <_dtoa_r+0x948>
   33870:	d9801117 	ldw	r6,68(sp)
   33874:	d8800d17 	ldw	r2,52(sp)
   33878:	d8000915 	stw	zero,36(sp)
   3387c:	308dc83a 	sub	r6,r6,r2
   33880:	0087c83a 	sub	r3,zero,r2
   33884:	d9801115 	stw	r6,68(sp)
   33888:	d8c01015 	stw	r3,64(sp)
   3388c:	003cfe06 	br	32c88 <_dtoa_r+0x274>
   33890:	018dc83a 	sub	r6,zero,r6
   33894:	d9801115 	stw	r6,68(sp)
   33898:	d8000a15 	stw	zero,40(sp)
   3389c:	003cf306 	br	32c6c <_dtoa_r+0x258>
   338a0:	d9000d17 	ldw	r4,52(sp)
   338a4:	00392600 	call	39260 <__floatsidf>
   338a8:	880b883a 	mov	r5,r17
   338ac:	8009883a 	mov	r4,r16
   338b0:	180f883a 	mov	r7,r3
   338b4:	100d883a 	mov	r6,r2
   338b8:	00390400 	call	39040 <__nedf2>
   338bc:	103ce126 	beq	r2,zero,32c44 <_dtoa_r+0x230>
   338c0:	d9800d17 	ldw	r6,52(sp)
   338c4:	31bfffc4 	addi	r6,r6,-1
   338c8:	d9800d15 	stw	r6,52(sp)
   338cc:	003cdd06 	br	32c44 <_dtoa_r+0x230>
   338d0:	d9000717 	ldw	r4,28(sp)
   338d4:	900b883a 	mov	r5,r18
   338d8:	0035d040 	call	35d04 <__mcmp>
   338dc:	103e8d0e 	bge	r2,zero,33314 <_dtoa_r+0x900>
   338e0:	d9400717 	ldw	r5,28(sp)
   338e4:	d9001617 	ldw	r4,88(sp)
   338e8:	01800284 	movi	r6,10
   338ec:	000f883a 	mov	r7,zero
   338f0:	003685c0 	call	3685c <__multadd>
   338f4:	d9800d17 	ldw	r6,52(sp)
   338f8:	d8800715 	stw	r2,28(sp)
   338fc:	31bfffc4 	addi	r6,r6,-1
   33900:	d9800d15 	stw	r6,52(sp)
   33904:	b001a71e 	bne	r22,zero,33fa4 <_dtoa_r+0x1590>
   33908:	d8800e17 	ldw	r2,56(sp)
   3390c:	d8800f15 	stw	r2,60(sp)
   33910:	003e8006 	br	33314 <_dtoa_r+0x900>
   33914:	90800417 	ldw	r2,16(r18)
   33918:	1085883a 	add	r2,r2,r2
   3391c:	1085883a 	add	r2,r2,r2
   33920:	1485883a 	add	r2,r2,r18
   33924:	11000417 	ldw	r4,16(r2)
   33928:	0035bd00 	call	35bd0 <__hi0bits>
   3392c:	00c00804 	movi	r3,32
   33930:	1887c83a 	sub	r3,r3,r2
   33934:	003e5a06 	br	332a0 <_dtoa_r+0x88c>
   33938:	d9400717 	ldw	r5,28(sp)
   3393c:	d9801017 	ldw	r6,64(sp)
   33940:	d9001617 	ldw	r4,88(sp)
   33944:	003695c0 	call	3695c <__pow5mult>
   33948:	d8800715 	stw	r2,28(sp)
   3394c:	003e4306 	br	3325c <_dtoa_r+0x848>
   33950:	d9800f17 	ldw	r6,60(sp)
   33954:	d8800d17 	ldw	r2,52(sp)
   33958:	d9800315 	stw	r6,12(sp)
   3395c:	d8800415 	stw	r2,16(sp)
   33960:	d8c00b17 	ldw	r3,44(sp)
   33964:	1805003a 	cmpeq	r2,r3,zero
   33968:	1000e21e 	bne	r2,zero,33cf4 <_dtoa_r+0x12e0>
   3396c:	d9000317 	ldw	r4,12(sp)
   33970:	0005883a 	mov	r2,zero
   33974:	00cff834 	movhi	r3,16352
   33978:	200c90fa 	slli	r6,r4,3
   3397c:	01000074 	movhi	r4,1
   33980:	21004b04 	addi	r4,r4,300
   33984:	180b883a 	mov	r5,r3
   33988:	310d883a 	add	r6,r6,r4
   3398c:	327fff17 	ldw	r9,-4(r6)
   33990:	323ffe17 	ldw	r8,-8(r6)
   33994:	1009883a 	mov	r4,r2
   33998:	480f883a 	mov	r7,r9
   3399c:	400d883a 	mov	r6,r8
   339a0:	0038d600 	call	38d60 <__divdf3>
   339a4:	180b883a 	mov	r5,r3
   339a8:	b00d883a 	mov	r6,r22
   339ac:	b80f883a 	mov	r7,r23
   339b0:	1009883a 	mov	r4,r2
   339b4:	00388a80 	call	388a8 <__subdf3>
   339b8:	a80b883a 	mov	r5,r21
   339bc:	a009883a 	mov	r4,r20
   339c0:	d8c01915 	stw	r3,100(sp)
   339c4:	d8801815 	stw	r2,96(sp)
   339c8:	00393580 	call	39358 <__fixdfsi>
   339cc:	1009883a 	mov	r4,r2
   339d0:	1027883a 	mov	r19,r2
   339d4:	00392600 	call	39260 <__floatsidf>
   339d8:	a80b883a 	mov	r5,r21
   339dc:	a009883a 	mov	r4,r20
   339e0:	180f883a 	mov	r7,r3
   339e4:	100d883a 	mov	r6,r2
   339e8:	00388a80 	call	388a8 <__subdf3>
   339ec:	d9801817 	ldw	r6,96(sp)
   339f0:	1823883a 	mov	r17,r3
   339f4:	d8801415 	stw	r2,80(sp)
   339f8:	302d883a 	mov	r22,r6
   339fc:	d9800517 	ldw	r6,20(sp)
   33a00:	9cc00c04 	addi	r19,r19,48
   33a04:	dc401515 	stw	r17,84(sp)
   33a08:	d8c01917 	ldw	r3,100(sp)
   33a0c:	34c00005 	stb	r19,0(r6)
   33a10:	d8800517 	ldw	r2,20(sp)
   33a14:	d9401917 	ldw	r5,100(sp)
   33a18:	d9801417 	ldw	r6,80(sp)
   33a1c:	b009883a 	mov	r4,r22
   33a20:	880f883a 	mov	r7,r17
   33a24:	182f883a 	mov	r23,r3
   33a28:	17000044 	addi	fp,r2,1
   33a2c:	00390c80 	call	390c8 <__gtdf2>
   33a30:	00804e16 	blt	zero,r2,33b6c <_dtoa_r+0x1158>
   33a34:	d9801417 	ldw	r6,80(sp)
   33a38:	0005883a 	mov	r2,zero
   33a3c:	00cffc34 	movhi	r3,16368
   33a40:	180b883a 	mov	r5,r3
   33a44:	880f883a 	mov	r7,r17
   33a48:	1009883a 	mov	r4,r2
   33a4c:	00388a80 	call	388a8 <__subdf3>
   33a50:	d9401917 	ldw	r5,100(sp)
   33a54:	180f883a 	mov	r7,r3
   33a58:	b009883a 	mov	r4,r22
   33a5c:	100d883a 	mov	r6,r2
   33a60:	00390c80 	call	390c8 <__gtdf2>
   33a64:	00bda216 	blt	zero,r2,330f0 <_dtoa_r+0x6dc>
   33a68:	d8c00317 	ldw	r3,12(sp)
   33a6c:	00800044 	movi	r2,1
   33a70:	10c01216 	blt	r2,r3,33abc <_dtoa_r+0x10a8>
   33a74:	003d4506 	br	32f8c <_dtoa_r+0x578>
   33a78:	d9801417 	ldw	r6,80(sp)
   33a7c:	0005883a 	mov	r2,zero
   33a80:	00cffc34 	movhi	r3,16368
   33a84:	180b883a 	mov	r5,r3
   33a88:	880f883a 	mov	r7,r17
   33a8c:	1009883a 	mov	r4,r2
   33a90:	00388a80 	call	388a8 <__subdf3>
   33a94:	d9c01b17 	ldw	r7,108(sp)
   33a98:	180b883a 	mov	r5,r3
   33a9c:	1009883a 	mov	r4,r2
   33aa0:	b00d883a 	mov	r6,r22
   33aa4:	00391d80 	call	391d8 <__ltdf2>
   33aa8:	103d9116 	blt	r2,zero,330f0 <_dtoa_r+0x6dc>
   33aac:	d9800517 	ldw	r6,20(sp)
   33ab0:	d9000317 	ldw	r4,12(sp)
   33ab4:	3105883a 	add	r2,r6,r4
   33ab8:	e0bd3426 	beq	fp,r2,32f8c <_dtoa_r+0x578>
   33abc:	04500934 	movhi	r17,16420
   33ac0:	0021883a 	mov	r16,zero
   33ac4:	b80b883a 	mov	r5,r23
   33ac8:	b009883a 	mov	r4,r22
   33acc:	800d883a 	mov	r6,r16
   33ad0:	880f883a 	mov	r7,r17
   33ad4:	003899c0 	call	3899c <__muldf3>
   33ad8:	d9401517 	ldw	r5,84(sp)
   33adc:	d9001417 	ldw	r4,80(sp)
   33ae0:	880f883a 	mov	r7,r17
   33ae4:	000d883a 	mov	r6,zero
   33ae8:	d8801a15 	stw	r2,104(sp)
   33aec:	d8c01b15 	stw	r3,108(sp)
   33af0:	003899c0 	call	3899c <__muldf3>
   33af4:	180b883a 	mov	r5,r3
   33af8:	1009883a 	mov	r4,r2
   33afc:	1823883a 	mov	r17,r3
   33b00:	1021883a 	mov	r16,r2
   33b04:	00393580 	call	39358 <__fixdfsi>
   33b08:	1009883a 	mov	r4,r2
   33b0c:	102b883a 	mov	r21,r2
   33b10:	00392600 	call	39260 <__floatsidf>
   33b14:	880b883a 	mov	r5,r17
   33b18:	8009883a 	mov	r4,r16
   33b1c:	180f883a 	mov	r7,r3
   33b20:	100d883a 	mov	r6,r2
   33b24:	00388a80 	call	388a8 <__subdf3>
   33b28:	1021883a 	mov	r16,r2
   33b2c:	d9001b17 	ldw	r4,108(sp)
   33b30:	1823883a 	mov	r17,r3
   33b34:	dc001415 	stw	r16,80(sp)
   33b38:	ad400c04 	addi	r21,r21,48
   33b3c:	dc401515 	stw	r17,84(sp)
   33b40:	d8801a17 	ldw	r2,104(sp)
   33b44:	e5400005 	stb	r21,0(fp)
   33b48:	202f883a 	mov	r23,r4
   33b4c:	d9c01b17 	ldw	r7,108(sp)
   33b50:	d9001417 	ldw	r4,80(sp)
   33b54:	880b883a 	mov	r5,r17
   33b58:	100d883a 	mov	r6,r2
   33b5c:	102d883a 	mov	r22,r2
   33b60:	e7000044 	addi	fp,fp,1
   33b64:	00391d80 	call	391d8 <__ltdf2>
   33b68:	103fc30e 	bge	r2,zero,33a78 <_dtoa_r+0x1064>
   33b6c:	d9000417 	ldw	r4,16(sp)
   33b70:	d9000d15 	stw	r4,52(sp)
   33b74:	003d7106 	br	3313c <_dtoa_r+0x728>
   33b78:	d9801717 	ldw	r6,92(sp)
   33b7c:	00800084 	movi	r2,2
   33b80:	11bde60e 	bge	r2,r6,3331c <_dtoa_r+0x908>
   33b84:	203cfb1e 	bne	r4,zero,32f74 <_dtoa_r+0x560>
   33b88:	d9001617 	ldw	r4,88(sp)
   33b8c:	900b883a 	mov	r5,r18
   33b90:	01800144 	movi	r6,5
   33b94:	000f883a 	mov	r7,zero
   33b98:	003685c0 	call	3685c <__multadd>
   33b9c:	d9000717 	ldw	r4,28(sp)
   33ba0:	100b883a 	mov	r5,r2
   33ba4:	1025883a 	mov	r18,r2
   33ba8:	0035d040 	call	35d04 <__mcmp>
   33bac:	00bcf10e 	bge	zero,r2,32f74 <_dtoa_r+0x560>
   33bb0:	d8c00d17 	ldw	r3,52(sp)
   33bb4:	d9000517 	ldw	r4,20(sp)
   33bb8:	d8000615 	stw	zero,24(sp)
   33bbc:	18c00044 	addi	r3,r3,1
   33bc0:	d8c00d15 	stw	r3,52(sp)
   33bc4:	00800c44 	movi	r2,49
   33bc8:	27000044 	addi	fp,r4,1
   33bcc:	20800005 	stb	r2,0(r4)
   33bd0:	003e8906 	br	335f8 <_dtoa_r+0xbe4>
   33bd4:	d8c00517 	ldw	r3,20(sp)
   33bd8:	003bc206 	br	32ae4 <_dtoa_r+0xd0>
   33bdc:	01800074 	movhi	r6,1
   33be0:	31807d04 	addi	r6,r6,500
   33be4:	30c00917 	ldw	r3,36(r6)
   33be8:	30800817 	ldw	r2,32(r6)
   33bec:	d9001217 	ldw	r4,72(sp)
   33bf0:	d9401317 	ldw	r5,76(sp)
   33bf4:	180f883a 	mov	r7,r3
   33bf8:	100d883a 	mov	r6,r2
   33bfc:	0038d600 	call	38d60 <__divdf3>
   33c00:	948003cc 	andi	r18,r18,15
   33c04:	058000c4 	movi	r22,3
   33c08:	1029883a 	mov	r20,r2
   33c0c:	182b883a 	mov	r21,r3
   33c10:	003c8906 	br	32e38 <_dtoa_r+0x424>
   33c14:	d9001017 	ldw	r4,64(sp)
   33c18:	d9800917 	ldw	r6,36(sp)
   33c1c:	0025883a 	mov	r18,zero
   33c20:	1105c83a 	sub	r2,r2,r4
   33c24:	2089883a 	add	r4,r4,r2
   33c28:	308d883a 	add	r6,r6,r2
   33c2c:	d9001015 	stw	r4,64(sp)
   33c30:	d9800915 	stw	r6,36(sp)
   33c34:	003e3206 	br	33500 <_dtoa_r+0xaec>
   33c38:	28800044 	addi	r2,r5,1
   33c3c:	27000044 	addi	fp,r4,1
   33c40:	20800005 	stb	r2,0(r4)
   33c44:	003e6c06 	br	335f8 <_dtoa_r+0xbe4>
   33c48:	d8800f17 	ldw	r2,60(sp)
   33c4c:	00bce016 	blt	zero,r2,32fd0 <_dtoa_r+0x5bc>
   33c50:	d9800f17 	ldw	r6,60(sp)
   33c54:	303cc51e 	bne	r6,zero,32f6c <_dtoa_r+0x558>
   33c58:	0005883a 	mov	r2,zero
   33c5c:	00d00534 	movhi	r3,16404
   33c60:	980b883a 	mov	r5,r19
   33c64:	180f883a 	mov	r7,r3
   33c68:	9009883a 	mov	r4,r18
   33c6c:	100d883a 	mov	r6,r2
   33c70:	003899c0 	call	3899c <__muldf3>
   33c74:	180b883a 	mov	r5,r3
   33c78:	a80f883a 	mov	r7,r21
   33c7c:	1009883a 	mov	r4,r2
   33c80:	a00d883a 	mov	r6,r20
   33c84:	00391500 	call	39150 <__gedf2>
   33c88:	103cb80e 	bge	r2,zero,32f6c <_dtoa_r+0x558>
   33c8c:	0027883a 	mov	r19,zero
   33c90:	0025883a 	mov	r18,zero
   33c94:	003fc606 	br	33bb0 <_dtoa_r+0x119c>
   33c98:	99400117 	ldw	r5,4(r19)
   33c9c:	d9001617 	ldw	r4,88(sp)
   33ca0:	00361280 	call	36128 <_Balloc>
   33ca4:	99800417 	ldw	r6,16(r19)
   33ca8:	11000304 	addi	r4,r2,12
   33cac:	99400304 	addi	r5,r19,12
   33cb0:	318d883a 	add	r6,r6,r6
   33cb4:	318d883a 	add	r6,r6,r6
   33cb8:	31800204 	addi	r6,r6,8
   33cbc:	1023883a 	mov	r17,r2
   33cc0:	00359900 	call	35990 <memcpy>
   33cc4:	d9001617 	ldw	r4,88(sp)
   33cc8:	880b883a 	mov	r5,r17
   33ccc:	01800044 	movi	r6,1
   33cd0:	00364ec0 	call	364ec <__lshift>
   33cd4:	100b883a 	mov	r5,r2
   33cd8:	003d9c06 	br	3334c <_dtoa_r+0x938>
   33cdc:	00800e44 	movi	r2,57
   33ce0:	b8807026 	beq	r23,r2,33ea4 <_dtoa_r+0x1490>
   33ce4:	b8800044 	addi	r2,r23,1
   33ce8:	b7000044 	addi	fp,r22,1
   33cec:	b0800005 	stb	r2,0(r22)
   33cf0:	003e4106 	br	335f8 <_dtoa_r+0xbe4>
   33cf4:	d8800317 	ldw	r2,12(sp)
   33cf8:	01800074 	movhi	r6,1
   33cfc:	31804b04 	addi	r6,r6,300
   33d00:	b009883a 	mov	r4,r22
   33d04:	100e90fa 	slli	r7,r2,3
   33d08:	b80b883a 	mov	r5,r23
   33d0c:	398f883a 	add	r7,r7,r6
   33d10:	38bffe17 	ldw	r2,-8(r7)
   33d14:	d9800517 	ldw	r6,20(sp)
   33d18:	38ffff17 	ldw	r3,-4(r7)
   33d1c:	37000044 	addi	fp,r6,1
   33d20:	180f883a 	mov	r7,r3
   33d24:	100d883a 	mov	r6,r2
   33d28:	003899c0 	call	3899c <__muldf3>
   33d2c:	a80b883a 	mov	r5,r21
   33d30:	a009883a 	mov	r4,r20
   33d34:	182f883a 	mov	r23,r3
   33d38:	102d883a 	mov	r22,r2
   33d3c:	00393580 	call	39358 <__fixdfsi>
   33d40:	1009883a 	mov	r4,r2
   33d44:	1027883a 	mov	r19,r2
   33d48:	00392600 	call	39260 <__floatsidf>
   33d4c:	a80b883a 	mov	r5,r21
   33d50:	a009883a 	mov	r4,r20
   33d54:	180f883a 	mov	r7,r3
   33d58:	100d883a 	mov	r6,r2
   33d5c:	00388a80 	call	388a8 <__subdf3>
   33d60:	180b883a 	mov	r5,r3
   33d64:	d8c00517 	ldw	r3,20(sp)
   33d68:	9cc00c04 	addi	r19,r19,48
   33d6c:	1009883a 	mov	r4,r2
   33d70:	1cc00005 	stb	r19,0(r3)
   33d74:	2021883a 	mov	r16,r4
   33d78:	d9000317 	ldw	r4,12(sp)
   33d7c:	00800044 	movi	r2,1
   33d80:	2823883a 	mov	r17,r5
   33d84:	20802226 	beq	r4,r2,33e10 <_dtoa_r+0x13fc>
   33d88:	1029883a 	mov	r20,r2
   33d8c:	0005883a 	mov	r2,zero
   33d90:	00d00934 	movhi	r3,16420
   33d94:	180f883a 	mov	r7,r3
   33d98:	100d883a 	mov	r6,r2
   33d9c:	880b883a 	mov	r5,r17
   33da0:	8009883a 	mov	r4,r16
   33da4:	003899c0 	call	3899c <__muldf3>
   33da8:	180b883a 	mov	r5,r3
   33dac:	1009883a 	mov	r4,r2
   33db0:	1823883a 	mov	r17,r3
   33db4:	1021883a 	mov	r16,r2
   33db8:	00393580 	call	39358 <__fixdfsi>
   33dbc:	1009883a 	mov	r4,r2
   33dc0:	102b883a 	mov	r21,r2
   33dc4:	00392600 	call	39260 <__floatsidf>
   33dc8:	880b883a 	mov	r5,r17
   33dcc:	8009883a 	mov	r4,r16
   33dd0:	180f883a 	mov	r7,r3
   33dd4:	100d883a 	mov	r6,r2
   33dd8:	00388a80 	call	388a8 <__subdf3>
   33ddc:	180b883a 	mov	r5,r3
   33de0:	d8c00517 	ldw	r3,20(sp)
   33de4:	1009883a 	mov	r4,r2
   33de8:	ad400c04 	addi	r21,r21,48
   33dec:	1d05883a 	add	r2,r3,r20
   33df0:	15400005 	stb	r21,0(r2)
   33df4:	2021883a 	mov	r16,r4
   33df8:	d9000317 	ldw	r4,12(sp)
   33dfc:	a5000044 	addi	r20,r20,1
   33e00:	2823883a 	mov	r17,r5
   33e04:	a13fe11e 	bne	r20,r4,33d8c <_dtoa_r+0x1378>
   33e08:	e505883a 	add	r2,fp,r20
   33e0c:	173fffc4 	addi	fp,r2,-1
   33e10:	0025883a 	mov	r18,zero
   33e14:	04cff834 	movhi	r19,16352
   33e18:	b009883a 	mov	r4,r22
   33e1c:	b80b883a 	mov	r5,r23
   33e20:	900d883a 	mov	r6,r18
   33e24:	980f883a 	mov	r7,r19
   33e28:	00389280 	call	38928 <__adddf3>
   33e2c:	180b883a 	mov	r5,r3
   33e30:	1009883a 	mov	r4,r2
   33e34:	800d883a 	mov	r6,r16
   33e38:	880f883a 	mov	r7,r17
   33e3c:	00391d80 	call	391d8 <__ltdf2>
   33e40:	103cab16 	blt	r2,zero,330f0 <_dtoa_r+0x6dc>
   33e44:	0009883a 	mov	r4,zero
   33e48:	980b883a 	mov	r5,r19
   33e4c:	b80f883a 	mov	r7,r23
   33e50:	b00d883a 	mov	r6,r22
   33e54:	00388a80 	call	388a8 <__subdf3>
   33e58:	180b883a 	mov	r5,r3
   33e5c:	880f883a 	mov	r7,r17
   33e60:	1009883a 	mov	r4,r2
   33e64:	800d883a 	mov	r6,r16
   33e68:	00390c80 	call	390c8 <__gtdf2>
   33e6c:	00bc470e 	bge	zero,r2,32f8c <_dtoa_r+0x578>
   33e70:	00c00c04 	movi	r3,48
   33e74:	e73fffc4 	addi	fp,fp,-1
   33e78:	e0800007 	ldb	r2,0(fp)
   33e7c:	10fffd26 	beq	r2,r3,33e74 <_dtoa_r+0x1460>
   33e80:	d9800417 	ldw	r6,16(sp)
   33e84:	e7000044 	addi	fp,fp,1
   33e88:	d9800d15 	stw	r6,52(sp)
   33e8c:	003cab06 	br	3313c <_dtoa_r+0x728>
   33e90:	d8c00f17 	ldw	r3,60(sp)
   33e94:	d9001117 	ldw	r4,68(sp)
   33e98:	20e1c83a 	sub	r16,r4,r3
   33e9c:	0007883a 	mov	r3,zero
   33ea0:	003d9b06 	br	33510 <_dtoa_r+0xafc>
   33ea4:	00800e44 	movi	r2,57
   33ea8:	b0800005 	stb	r2,0(r22)
   33eac:	b5800044 	addi	r22,r22,1
   33eb0:	003dc106 	br	335b8 <_dtoa_r+0xba4>
   33eb4:	05800084 	movi	r22,2
   33eb8:	003bf706 	br	32e98 <_dtoa_r+0x484>
   33ebc:	d9000f17 	ldw	r4,60(sp)
   33ec0:	013c000e 	bge	zero,r4,32ec4 <_dtoa_r+0x4b0>
   33ec4:	d9800e17 	ldw	r6,56(sp)
   33ec8:	01bc300e 	bge	zero,r6,32f8c <_dtoa_r+0x578>
   33ecc:	0005883a 	mov	r2,zero
   33ed0:	00d00934 	movhi	r3,16420
   33ed4:	a80b883a 	mov	r5,r21
   33ed8:	180f883a 	mov	r7,r3
   33edc:	a009883a 	mov	r4,r20
   33ee0:	100d883a 	mov	r6,r2
   33ee4:	003899c0 	call	3899c <__muldf3>
   33ee8:	b1000044 	addi	r4,r22,1
   33eec:	1021883a 	mov	r16,r2
   33ef0:	1823883a 	mov	r17,r3
   33ef4:	00392600 	call	39260 <__floatsidf>
   33ef8:	880b883a 	mov	r5,r17
   33efc:	8009883a 	mov	r4,r16
   33f00:	180f883a 	mov	r7,r3
   33f04:	100d883a 	mov	r6,r2
   33f08:	003899c0 	call	3899c <__muldf3>
   33f0c:	0011883a 	mov	r8,zero
   33f10:	02500734 	movhi	r9,16412
   33f14:	180b883a 	mov	r5,r3
   33f18:	480f883a 	mov	r7,r9
   33f1c:	1009883a 	mov	r4,r2
   33f20:	400d883a 	mov	r6,r8
   33f24:	00389280 	call	38928 <__adddf3>
   33f28:	102d883a 	mov	r22,r2
   33f2c:	00bf3034 	movhi	r2,64704
   33f30:	10ef883a 	add	r23,r2,r3
   33f34:	d8800d17 	ldw	r2,52(sp)
   33f38:	d8c00e17 	ldw	r3,56(sp)
   33f3c:	8029883a 	mov	r20,r16
   33f40:	10bfffc4 	addi	r2,r2,-1
   33f44:	882b883a 	mov	r21,r17
   33f48:	d8800415 	stw	r2,16(sp)
   33f4c:	d8c00315 	stw	r3,12(sp)
   33f50:	003e8306 	br	33960 <_dtoa_r+0xf4c>
   33f54:	d8800117 	ldw	r2,4(sp)
   33f58:	dc001117 	ldw	r16,68(sp)
   33f5c:	dc801017 	ldw	r18,64(sp)
   33f60:	00c00d84 	movi	r3,54
   33f64:	1887c83a 	sub	r3,r3,r2
   33f68:	003d6906 	br	33510 <_dtoa_r+0xafc>
   33f6c:	01800044 	movi	r6,1
   33f70:	3021883a 	mov	r16,r6
   33f74:	d9800f15 	stw	r6,60(sp)
   33f78:	d9802615 	stw	r6,152(sp)
   33f7c:	d9800e15 	stw	r6,56(sp)
   33f80:	003b9306 	br	32dd0 <_dtoa_r+0x3bc>
   33f84:	b021883a 	mov	r16,r22
   33f88:	dd800f15 	stw	r22,60(sp)
   33f8c:	003b9006 	br	32dd0 <_dtoa_r+0x3bc>
   33f90:	103e221e 	bne	r2,zero,3381c <_dtoa_r+0xe08>
   33f94:	b880004c 	andi	r2,r23,1
   33f98:	1005003a 	cmpeq	r2,r2,zero
   33f9c:	103e1f1e 	bne	r2,zero,3381c <_dtoa_r+0xe08>
   33fa0:	003e1b06 	br	33810 <_dtoa_r+0xdfc>
   33fa4:	d9001617 	ldw	r4,88(sp)
   33fa8:	980b883a 	mov	r5,r19
   33fac:	01800284 	movi	r6,10
   33fb0:	000f883a 	mov	r7,zero
   33fb4:	003685c0 	call	3685c <__multadd>
   33fb8:	d8c00e17 	ldw	r3,56(sp)
   33fbc:	1027883a 	mov	r19,r2
   33fc0:	d8c00f15 	stw	r3,60(sp)
   33fc4:	003cd306 	br	33314 <_dtoa_r+0x900>

00033fc8 <_fflush_r>:
   33fc8:	defffb04 	addi	sp,sp,-20
   33fcc:	dcc00315 	stw	r19,12(sp)
   33fd0:	dc800215 	stw	r18,8(sp)
   33fd4:	dfc00415 	stw	ra,16(sp)
   33fd8:	dc400115 	stw	r17,4(sp)
   33fdc:	dc000015 	stw	r16,0(sp)
   33fe0:	2027883a 	mov	r19,r4
   33fe4:	2825883a 	mov	r18,r5
   33fe8:	20000226 	beq	r4,zero,33ff4 <_fflush_r+0x2c>
   33fec:	20800e17 	ldw	r2,56(r4)
   33ff0:	10005626 	beq	r2,zero,3414c <_fflush_r+0x184>
   33ff4:	9100030b 	ldhu	r4,12(r18)
   33ff8:	20ffffcc 	andi	r3,r4,65535
   33ffc:	18e0001c 	xori	r3,r3,32768
   34000:	18e00004 	addi	r3,r3,-32768
   34004:	1880020c 	andi	r2,r3,8
   34008:	1000261e 	bne	r2,zero,340a4 <_fflush_r+0xdc>
   3400c:	90c00117 	ldw	r3,4(r18)
   34010:	20820014 	ori	r2,r4,2048
   34014:	9080030d 	sth	r2,12(r18)
   34018:	1009883a 	mov	r4,r2
   3401c:	00c0400e 	bge	zero,r3,34120 <_fflush_r+0x158>
   34020:	92000a17 	ldw	r8,40(r18)
   34024:	40004026 	beq	r8,zero,34128 <_fflush_r+0x160>
   34028:	2084000c 	andi	r2,r4,4096
   3402c:	10005326 	beq	r2,zero,3417c <_fflush_r+0x1b4>
   34030:	94001417 	ldw	r16,80(r18)
   34034:	9080030b 	ldhu	r2,12(r18)
   34038:	1080010c 	andi	r2,r2,4
   3403c:	1000481e 	bne	r2,zero,34160 <_fflush_r+0x198>
   34040:	91400717 	ldw	r5,28(r18)
   34044:	9809883a 	mov	r4,r19
   34048:	800d883a 	mov	r6,r16
   3404c:	000f883a 	mov	r7,zero
   34050:	403ee83a 	callr	r8
   34054:	8080261e 	bne	r16,r2,340f0 <_fflush_r+0x128>
   34058:	9080030b 	ldhu	r2,12(r18)
   3405c:	91000417 	ldw	r4,16(r18)
   34060:	90000115 	stw	zero,4(r18)
   34064:	10bdffcc 	andi	r2,r2,63487
   34068:	10ffffcc 	andi	r3,r2,65535
   3406c:	18c4000c 	andi	r3,r3,4096
   34070:	9080030d 	sth	r2,12(r18)
   34074:	91000015 	stw	r4,0(r18)
   34078:	18002b26 	beq	r3,zero,34128 <_fflush_r+0x160>
   3407c:	0007883a 	mov	r3,zero
   34080:	1805883a 	mov	r2,r3
   34084:	94001415 	stw	r16,80(r18)
   34088:	dfc00417 	ldw	ra,16(sp)
   3408c:	dcc00317 	ldw	r19,12(sp)
   34090:	dc800217 	ldw	r18,8(sp)
   34094:	dc400117 	ldw	r17,4(sp)
   34098:	dc000017 	ldw	r16,0(sp)
   3409c:	dec00504 	addi	sp,sp,20
   340a0:	f800283a 	ret
   340a4:	94400417 	ldw	r17,16(r18)
   340a8:	88001f26 	beq	r17,zero,34128 <_fflush_r+0x160>
   340ac:	90800017 	ldw	r2,0(r18)
   340b0:	18c000cc 	andi	r3,r3,3
   340b4:	94400015 	stw	r17,0(r18)
   340b8:	1461c83a 	sub	r16,r2,r17
   340bc:	18002526 	beq	r3,zero,34154 <_fflush_r+0x18c>
   340c0:	0005883a 	mov	r2,zero
   340c4:	90800215 	stw	r2,8(r18)
   340c8:	0400170e 	bge	zero,r16,34128 <_fflush_r+0x160>
   340cc:	90c00917 	ldw	r3,36(r18)
   340d0:	91400717 	ldw	r5,28(r18)
   340d4:	880d883a 	mov	r6,r17
   340d8:	800f883a 	mov	r7,r16
   340dc:	9809883a 	mov	r4,r19
   340e0:	183ee83a 	callr	r3
   340e4:	88a3883a 	add	r17,r17,r2
   340e8:	80a1c83a 	sub	r16,r16,r2
   340ec:	00bff616 	blt	zero,r2,340c8 <_fflush_r+0x100>
   340f0:	9080030b 	ldhu	r2,12(r18)
   340f4:	00ffffc4 	movi	r3,-1
   340f8:	10801014 	ori	r2,r2,64
   340fc:	9080030d 	sth	r2,12(r18)
   34100:	1805883a 	mov	r2,r3
   34104:	dfc00417 	ldw	ra,16(sp)
   34108:	dcc00317 	ldw	r19,12(sp)
   3410c:	dc800217 	ldw	r18,8(sp)
   34110:	dc400117 	ldw	r17,4(sp)
   34114:	dc000017 	ldw	r16,0(sp)
   34118:	dec00504 	addi	sp,sp,20
   3411c:	f800283a 	ret
   34120:	90800f17 	ldw	r2,60(r18)
   34124:	00bfbe16 	blt	zero,r2,34020 <_fflush_r+0x58>
   34128:	0007883a 	mov	r3,zero
   3412c:	1805883a 	mov	r2,r3
   34130:	dfc00417 	ldw	ra,16(sp)
   34134:	dcc00317 	ldw	r19,12(sp)
   34138:	dc800217 	ldw	r18,8(sp)
   3413c:	dc400117 	ldw	r17,4(sp)
   34140:	dc000017 	ldw	r16,0(sp)
   34144:	dec00504 	addi	sp,sp,20
   34148:	f800283a 	ret
   3414c:	00342600 	call	34260 <__sinit>
   34150:	003fa806 	br	33ff4 <_fflush_r+0x2c>
   34154:	90800517 	ldw	r2,20(r18)
   34158:	90800215 	stw	r2,8(r18)
   3415c:	003fda06 	br	340c8 <_fflush_r+0x100>
   34160:	90800117 	ldw	r2,4(r18)
   34164:	90c00c17 	ldw	r3,48(r18)
   34168:	80a1c83a 	sub	r16,r16,r2
   3416c:	183fb426 	beq	r3,zero,34040 <_fflush_r+0x78>
   34170:	90800f17 	ldw	r2,60(r18)
   34174:	80a1c83a 	sub	r16,r16,r2
   34178:	003fb106 	br	34040 <_fflush_r+0x78>
   3417c:	91400717 	ldw	r5,28(r18)
   34180:	9809883a 	mov	r4,r19
   34184:	000d883a 	mov	r6,zero
   34188:	01c00044 	movi	r7,1
   3418c:	403ee83a 	callr	r8
   34190:	1021883a 	mov	r16,r2
   34194:	00bfffc4 	movi	r2,-1
   34198:	80800226 	beq	r16,r2,341a4 <_fflush_r+0x1dc>
   3419c:	92000a17 	ldw	r8,40(r18)
   341a0:	003fa406 	br	34034 <_fflush_r+0x6c>
   341a4:	98c00017 	ldw	r3,0(r19)
   341a8:	00800744 	movi	r2,29
   341ac:	18bfde26 	beq	r3,r2,34128 <_fflush_r+0x160>
   341b0:	9080030b 	ldhu	r2,12(r18)
   341b4:	8007883a 	mov	r3,r16
   341b8:	10801014 	ori	r2,r2,64
   341bc:	9080030d 	sth	r2,12(r18)
   341c0:	003fcf06 	br	34100 <_fflush_r+0x138>

000341c4 <fflush>:
   341c4:	014000f4 	movhi	r5,3
   341c8:	294ff204 	addi	r5,r5,16328
   341cc:	2007883a 	mov	r3,r4
   341d0:	20000526 	beq	r4,zero,341e8 <fflush+0x24>
   341d4:	00800074 	movhi	r2,1
   341d8:	10876d04 	addi	r2,r2,7604
   341dc:	11000017 	ldw	r4,0(r2)
   341e0:	180b883a 	mov	r5,r3
   341e4:	0033fc81 	jmpi	33fc8 <_fflush_r>
   341e8:	00800074 	movhi	r2,1
   341ec:	10876e04 	addi	r2,r2,7608
   341f0:	11000017 	ldw	r4,0(r2)
   341f4:	0034d941 	jmpi	34d94 <_fwalk_reent>

000341f8 <std>:
   341f8:	008000f4 	movhi	r2,3
   341fc:	109c9c04 	addi	r2,r2,29296
   34200:	20800b15 	stw	r2,44(r4)
   34204:	008000f4 	movhi	r2,3
   34208:	109cd704 	addi	r2,r2,29532
   3420c:	20800815 	stw	r2,32(r4)
   34210:	00c000f4 	movhi	r3,3
   34214:	18dcb804 	addi	r3,r3,29408
   34218:	008000f4 	movhi	r2,3
   3421c:	109c9e04 	addi	r2,r2,29304
   34220:	2140030d 	sth	r5,12(r4)
   34224:	2180038d 	sth	r6,14(r4)
   34228:	20c00915 	stw	r3,36(r4)
   3422c:	20800a15 	stw	r2,40(r4)
   34230:	20000015 	stw	zero,0(r4)
   34234:	20000115 	stw	zero,4(r4)
   34238:	20000215 	stw	zero,8(r4)
   3423c:	20000415 	stw	zero,16(r4)
   34240:	20000515 	stw	zero,20(r4)
   34244:	20000615 	stw	zero,24(r4)
   34248:	21000715 	stw	r4,28(r4)
   3424c:	f800283a 	ret

00034250 <__sfp_lock_acquire>:
   34250:	f800283a 	ret

00034254 <__sfp_lock_release>:
   34254:	f800283a 	ret

00034258 <__sinit_lock_acquire>:
   34258:	f800283a 	ret

0003425c <__sinit_lock_release>:
   3425c:	f800283a 	ret

00034260 <__sinit>:
   34260:	20800e17 	ldw	r2,56(r4)
   34264:	defffd04 	addi	sp,sp,-12
   34268:	dc400115 	stw	r17,4(sp)
   3426c:	dc000015 	stw	r16,0(sp)
   34270:	dfc00215 	stw	ra,8(sp)
   34274:	04400044 	movi	r17,1
   34278:	01400104 	movi	r5,4
   3427c:	000d883a 	mov	r6,zero
   34280:	2021883a 	mov	r16,r4
   34284:	2200bb04 	addi	r8,r4,748
   34288:	200f883a 	mov	r7,r4
   3428c:	10000526 	beq	r2,zero,342a4 <__sinit+0x44>
   34290:	dfc00217 	ldw	ra,8(sp)
   34294:	dc400117 	ldw	r17,4(sp)
   34298:	dc000017 	ldw	r16,0(sp)
   3429c:	dec00304 	addi	sp,sp,12
   342a0:	f800283a 	ret
   342a4:	21000117 	ldw	r4,4(r4)
   342a8:	008000f4 	movhi	r2,3
   342ac:	1090d104 	addi	r2,r2,17220
   342b0:	00c000c4 	movi	r3,3
   342b4:	80800f15 	stw	r2,60(r16)
   342b8:	80c0b915 	stw	r3,740(r16)
   342bc:	8200ba15 	stw	r8,744(r16)
   342c0:	84400e15 	stw	r17,56(r16)
   342c4:	8000b815 	stw	zero,736(r16)
   342c8:	00341f80 	call	341f8 <std>
   342cc:	81000217 	ldw	r4,8(r16)
   342d0:	880d883a 	mov	r6,r17
   342d4:	800f883a 	mov	r7,r16
   342d8:	01400284 	movi	r5,10
   342dc:	00341f80 	call	341f8 <std>
   342e0:	81000317 	ldw	r4,12(r16)
   342e4:	800f883a 	mov	r7,r16
   342e8:	01400484 	movi	r5,18
   342ec:	01800084 	movi	r6,2
   342f0:	dfc00217 	ldw	ra,8(sp)
   342f4:	dc400117 	ldw	r17,4(sp)
   342f8:	dc000017 	ldw	r16,0(sp)
   342fc:	dec00304 	addi	sp,sp,12
   34300:	00341f81 	jmpi	341f8 <std>

00034304 <__fp_lock>:
   34304:	0005883a 	mov	r2,zero
   34308:	f800283a 	ret

0003430c <__fp_unlock>:
   3430c:	0005883a 	mov	r2,zero
   34310:	f800283a 	ret

00034314 <__fp_unlock_all>:
   34314:	00800074 	movhi	r2,1
   34318:	10876d04 	addi	r2,r2,7604
   3431c:	11000017 	ldw	r4,0(r2)
   34320:	014000f4 	movhi	r5,3
   34324:	2950c304 	addi	r5,r5,17164
   34328:	0034e5c1 	jmpi	34e5c <_fwalk>

0003432c <__fp_lock_all>:
   3432c:	00800074 	movhi	r2,1
   34330:	10876d04 	addi	r2,r2,7604
   34334:	11000017 	ldw	r4,0(r2)
   34338:	014000f4 	movhi	r5,3
   3433c:	2950c104 	addi	r5,r5,17156
   34340:	0034e5c1 	jmpi	34e5c <_fwalk>

00034344 <_cleanup_r>:
   34344:	014000f4 	movhi	r5,3
   34348:	295dc904 	addi	r5,r5,30500
   3434c:	0034e5c1 	jmpi	34e5c <_fwalk>

00034350 <_cleanup>:
   34350:	00800074 	movhi	r2,1
   34354:	10876e04 	addi	r2,r2,7608
   34358:	11000017 	ldw	r4,0(r2)
   3435c:	00343441 	jmpi	34344 <_cleanup_r>

00034360 <__sfmoreglue>:
   34360:	defffc04 	addi	sp,sp,-16
   34364:	dc400115 	stw	r17,4(sp)
   34368:	2c401724 	muli	r17,r5,92
   3436c:	dc800215 	stw	r18,8(sp)
   34370:	2825883a 	mov	r18,r5
   34374:	89400304 	addi	r5,r17,12
   34378:	dc000015 	stw	r16,0(sp)
   3437c:	dfc00315 	stw	ra,12(sp)
   34380:	003516c0 	call	3516c <_malloc_r>
   34384:	0021883a 	mov	r16,zero
   34388:	880d883a 	mov	r6,r17
   3438c:	000b883a 	mov	r5,zero
   34390:	10000626 	beq	r2,zero,343ac <__sfmoreglue+0x4c>
   34394:	11000304 	addi	r4,r2,12
   34398:	14800115 	stw	r18,4(r2)
   3439c:	10000015 	stw	zero,0(r2)
   343a0:	11000215 	stw	r4,8(r2)
   343a4:	1021883a 	mov	r16,r2
   343a8:	0035b100 	call	35b10 <memset>
   343ac:	8005883a 	mov	r2,r16
   343b0:	dfc00317 	ldw	ra,12(sp)
   343b4:	dc800217 	ldw	r18,8(sp)
   343b8:	dc400117 	ldw	r17,4(sp)
   343bc:	dc000017 	ldw	r16,0(sp)
   343c0:	dec00404 	addi	sp,sp,16
   343c4:	f800283a 	ret

000343c8 <__sfp>:
   343c8:	defffd04 	addi	sp,sp,-12
   343cc:	00800074 	movhi	r2,1
   343d0:	10876e04 	addi	r2,r2,7608
   343d4:	dc000015 	stw	r16,0(sp)
   343d8:	14000017 	ldw	r16,0(r2)
   343dc:	dc400115 	stw	r17,4(sp)
   343e0:	dfc00215 	stw	ra,8(sp)
   343e4:	80800e17 	ldw	r2,56(r16)
   343e8:	2023883a 	mov	r17,r4
   343ec:	10002626 	beq	r2,zero,34488 <__sfp+0xc0>
   343f0:	8400b804 	addi	r16,r16,736
   343f4:	80800117 	ldw	r2,4(r16)
   343f8:	81000217 	ldw	r4,8(r16)
   343fc:	10ffffc4 	addi	r3,r2,-1
   34400:	18000916 	blt	r3,zero,34428 <__sfp+0x60>
   34404:	2080030f 	ldh	r2,12(r4)
   34408:	10000b26 	beq	r2,zero,34438 <__sfp+0x70>
   3440c:	017fffc4 	movi	r5,-1
   34410:	00000206 	br	3441c <__sfp+0x54>
   34414:	2080030f 	ldh	r2,12(r4)
   34418:	10000726 	beq	r2,zero,34438 <__sfp+0x70>
   3441c:	18ffffc4 	addi	r3,r3,-1
   34420:	21001704 	addi	r4,r4,92
   34424:	197ffb1e 	bne	r3,r5,34414 <__sfp+0x4c>
   34428:	80800017 	ldw	r2,0(r16)
   3442c:	10001926 	beq	r2,zero,34494 <__sfp+0xcc>
   34430:	1021883a 	mov	r16,r2
   34434:	003fef06 	br	343f4 <__sfp+0x2c>
   34438:	00bfffc4 	movi	r2,-1
   3443c:	00c00044 	movi	r3,1
   34440:	2080038d 	sth	r2,14(r4)
   34444:	20c0030d 	sth	r3,12(r4)
   34448:	20000015 	stw	zero,0(r4)
   3444c:	20000215 	stw	zero,8(r4)
   34450:	20000115 	stw	zero,4(r4)
   34454:	20000415 	stw	zero,16(r4)
   34458:	20000515 	stw	zero,20(r4)
   3445c:	20000615 	stw	zero,24(r4)
   34460:	20000c15 	stw	zero,48(r4)
   34464:	20000d15 	stw	zero,52(r4)
   34468:	20001115 	stw	zero,68(r4)
   3446c:	20001215 	stw	zero,72(r4)
   34470:	2005883a 	mov	r2,r4
   34474:	dfc00217 	ldw	ra,8(sp)
   34478:	dc400117 	ldw	r17,4(sp)
   3447c:	dc000017 	ldw	r16,0(sp)
   34480:	dec00304 	addi	sp,sp,12
   34484:	f800283a 	ret
   34488:	8009883a 	mov	r4,r16
   3448c:	00342600 	call	34260 <__sinit>
   34490:	003fd706 	br	343f0 <__sfp+0x28>
   34494:	8809883a 	mov	r4,r17
   34498:	01400104 	movi	r5,4
   3449c:	00343600 	call	34360 <__sfmoreglue>
   344a0:	80800015 	stw	r2,0(r16)
   344a4:	103fe21e 	bne	r2,zero,34430 <__sfp+0x68>
   344a8:	00800304 	movi	r2,12
   344ac:	0009883a 	mov	r4,zero
   344b0:	88800015 	stw	r2,0(r17)
   344b4:	003fee06 	br	34470 <__sfp+0xa8>

000344b8 <_malloc_trim_r>:
   344b8:	defffb04 	addi	sp,sp,-20
   344bc:	dcc00315 	stw	r19,12(sp)
   344c0:	04c00074 	movhi	r19,1
   344c4:	9cc1e904 	addi	r19,r19,1956
   344c8:	dc800215 	stw	r18,8(sp)
   344cc:	dc400115 	stw	r17,4(sp)
   344d0:	dc000015 	stw	r16,0(sp)
   344d4:	2823883a 	mov	r17,r5
   344d8:	2025883a 	mov	r18,r4
   344dc:	dfc00415 	stw	ra,16(sp)
   344e0:	003a3c00 	call	3a3c0 <__malloc_lock>
   344e4:	98800217 	ldw	r2,8(r19)
   344e8:	9009883a 	mov	r4,r18
   344ec:	000b883a 	mov	r5,zero
   344f0:	10c00117 	ldw	r3,4(r2)
   344f4:	00bfff04 	movi	r2,-4
   344f8:	18a0703a 	and	r16,r3,r2
   344fc:	8463c83a 	sub	r17,r16,r17
   34500:	8c43fbc4 	addi	r17,r17,4079
   34504:	8822d33a 	srli	r17,r17,12
   34508:	0083ffc4 	movi	r2,4095
   3450c:	8c7fffc4 	addi	r17,r17,-1
   34510:	8822933a 	slli	r17,r17,12
   34514:	1440060e 	bge	r2,r17,34530 <_malloc_trim_r+0x78>
   34518:	00372000 	call	37200 <_sbrk_r>
   3451c:	98c00217 	ldw	r3,8(r19)
   34520:	9009883a 	mov	r4,r18
   34524:	044bc83a 	sub	r5,zero,r17
   34528:	80c7883a 	add	r3,r16,r3
   3452c:	10c00926 	beq	r2,r3,34554 <_malloc_trim_r+0x9c>
   34530:	003a3e00 	call	3a3e0 <__malloc_unlock>
   34534:	0005883a 	mov	r2,zero
   34538:	dfc00417 	ldw	ra,16(sp)
   3453c:	dcc00317 	ldw	r19,12(sp)
   34540:	dc800217 	ldw	r18,8(sp)
   34544:	dc400117 	ldw	r17,4(sp)
   34548:	dc000017 	ldw	r16,0(sp)
   3454c:	dec00504 	addi	sp,sp,20
   34550:	f800283a 	ret
   34554:	9009883a 	mov	r4,r18
   34558:	00372000 	call	37200 <_sbrk_r>
   3455c:	844dc83a 	sub	r6,r16,r17
   34560:	00ffffc4 	movi	r3,-1
   34564:	9009883a 	mov	r4,r18
   34568:	000b883a 	mov	r5,zero
   3456c:	01c00074 	movhi	r7,1
   34570:	39c78f04 	addi	r7,r7,7740
   34574:	31800054 	ori	r6,r6,1
   34578:	10c00926 	beq	r2,r3,345a0 <_malloc_trim_r+0xe8>
   3457c:	38800017 	ldw	r2,0(r7)
   34580:	98c00217 	ldw	r3,8(r19)
   34584:	9009883a 	mov	r4,r18
   34588:	1445c83a 	sub	r2,r2,r17
   3458c:	38800015 	stw	r2,0(r7)
   34590:	19800115 	stw	r6,4(r3)
   34594:	003a3e00 	call	3a3e0 <__malloc_unlock>
   34598:	00800044 	movi	r2,1
   3459c:	003fe606 	br	34538 <_malloc_trim_r+0x80>
   345a0:	00372000 	call	37200 <_sbrk_r>
   345a4:	99800217 	ldw	r6,8(r19)
   345a8:	100f883a 	mov	r7,r2
   345ac:	9009883a 	mov	r4,r18
   345b0:	1187c83a 	sub	r3,r2,r6
   345b4:	008003c4 	movi	r2,15
   345b8:	19400054 	ori	r5,r3,1
   345bc:	10ffdc0e 	bge	r2,r3,34530 <_malloc_trim_r+0x78>
   345c0:	00800074 	movhi	r2,1
   345c4:	10877204 	addi	r2,r2,7624
   345c8:	10c00017 	ldw	r3,0(r2)
   345cc:	00800074 	movhi	r2,1
   345d0:	10878f04 	addi	r2,r2,7740
   345d4:	31400115 	stw	r5,4(r6)
   345d8:	38c7c83a 	sub	r3,r7,r3
   345dc:	10c00015 	stw	r3,0(r2)
   345e0:	003fd306 	br	34530 <_malloc_trim_r+0x78>

000345e4 <_free_r>:
   345e4:	defffd04 	addi	sp,sp,-12
   345e8:	dc400115 	stw	r17,4(sp)
   345ec:	dc000015 	stw	r16,0(sp)
   345f0:	dfc00215 	stw	ra,8(sp)
   345f4:	2821883a 	mov	r16,r5
   345f8:	2023883a 	mov	r17,r4
   345fc:	28005a26 	beq	r5,zero,34768 <_free_r+0x184>
   34600:	003a3c00 	call	3a3c0 <__malloc_lock>
   34604:	823ffe04 	addi	r8,r16,-8
   34608:	41400117 	ldw	r5,4(r8)
   3460c:	00bfff84 	movi	r2,-2
   34610:	02800074 	movhi	r10,1
   34614:	5281e904 	addi	r10,r10,1956
   34618:	288e703a 	and	r7,r5,r2
   3461c:	41cd883a 	add	r6,r8,r7
   34620:	30c00117 	ldw	r3,4(r6)
   34624:	51000217 	ldw	r4,8(r10)
   34628:	00bfff04 	movi	r2,-4
   3462c:	1892703a 	and	r9,r3,r2
   34630:	5017883a 	mov	r11,r10
   34634:	31006726 	beq	r6,r4,347d4 <_free_r+0x1f0>
   34638:	2880004c 	andi	r2,r5,1
   3463c:	1005003a 	cmpeq	r2,r2,zero
   34640:	32400115 	stw	r9,4(r6)
   34644:	10001a1e 	bne	r2,zero,346b0 <_free_r+0xcc>
   34648:	000b883a 	mov	r5,zero
   3464c:	3247883a 	add	r3,r6,r9
   34650:	18800117 	ldw	r2,4(r3)
   34654:	1080004c 	andi	r2,r2,1
   34658:	1000231e 	bne	r2,zero,346e8 <_free_r+0x104>
   3465c:	280ac03a 	cmpne	r5,r5,zero
   34660:	3a4f883a 	add	r7,r7,r9
   34664:	2800451e 	bne	r5,zero,3477c <_free_r+0x198>
   34668:	31000217 	ldw	r4,8(r6)
   3466c:	00800074 	movhi	r2,1
   34670:	1081eb04 	addi	r2,r2,1964
   34674:	20807b26 	beq	r4,r2,34864 <_free_r+0x280>
   34678:	30800317 	ldw	r2,12(r6)
   3467c:	3a07883a 	add	r3,r7,r8
   34680:	19c00015 	stw	r7,0(r3)
   34684:	11000215 	stw	r4,8(r2)
   34688:	20800315 	stw	r2,12(r4)
   3468c:	38800054 	ori	r2,r7,1
   34690:	40800115 	stw	r2,4(r8)
   34694:	28001a26 	beq	r5,zero,34700 <_free_r+0x11c>
   34698:	8809883a 	mov	r4,r17
   3469c:	dfc00217 	ldw	ra,8(sp)
   346a0:	dc400117 	ldw	r17,4(sp)
   346a4:	dc000017 	ldw	r16,0(sp)
   346a8:	dec00304 	addi	sp,sp,12
   346ac:	003a3e01 	jmpi	3a3e0 <__malloc_unlock>
   346b0:	80bffe17 	ldw	r2,-8(r16)
   346b4:	50c00204 	addi	r3,r10,8
   346b8:	4091c83a 	sub	r8,r8,r2
   346bc:	41000217 	ldw	r4,8(r8)
   346c0:	388f883a 	add	r7,r7,r2
   346c4:	20c06126 	beq	r4,r3,3484c <_free_r+0x268>
   346c8:	40800317 	ldw	r2,12(r8)
   346cc:	3247883a 	add	r3,r6,r9
   346d0:	000b883a 	mov	r5,zero
   346d4:	11000215 	stw	r4,8(r2)
   346d8:	20800315 	stw	r2,12(r4)
   346dc:	18800117 	ldw	r2,4(r3)
   346e0:	1080004c 	andi	r2,r2,1
   346e4:	103fdd26 	beq	r2,zero,3465c <_free_r+0x78>
   346e8:	38800054 	ori	r2,r7,1
   346ec:	3a07883a 	add	r3,r7,r8
   346f0:	280ac03a 	cmpne	r5,r5,zero
   346f4:	40800115 	stw	r2,4(r8)
   346f8:	19c00015 	stw	r7,0(r3)
   346fc:	283fe61e 	bne	r5,zero,34698 <_free_r+0xb4>
   34700:	00807fc4 	movi	r2,511
   34704:	11c01f2e 	bgeu	r2,r7,34784 <_free_r+0x1a0>
   34708:	3806d27a 	srli	r3,r7,9
   3470c:	1800481e 	bne	r3,zero,34830 <_free_r+0x24c>
   34710:	3804d0fa 	srli	r2,r7,3
   34714:	100690fa 	slli	r3,r2,3
   34718:	1acd883a 	add	r6,r3,r11
   3471c:	31400217 	ldw	r5,8(r6)
   34720:	31405926 	beq	r6,r5,34888 <_free_r+0x2a4>
   34724:	28800117 	ldw	r2,4(r5)
   34728:	00ffff04 	movi	r3,-4
   3472c:	10c4703a 	and	r2,r2,r3
   34730:	3880022e 	bgeu	r7,r2,3473c <_free_r+0x158>
   34734:	29400217 	ldw	r5,8(r5)
   34738:	317ffa1e 	bne	r6,r5,34724 <_free_r+0x140>
   3473c:	29800317 	ldw	r6,12(r5)
   34740:	41800315 	stw	r6,12(r8)
   34744:	41400215 	stw	r5,8(r8)
   34748:	8809883a 	mov	r4,r17
   3474c:	2a000315 	stw	r8,12(r5)
   34750:	32000215 	stw	r8,8(r6)
   34754:	dfc00217 	ldw	ra,8(sp)
   34758:	dc400117 	ldw	r17,4(sp)
   3475c:	dc000017 	ldw	r16,0(sp)
   34760:	dec00304 	addi	sp,sp,12
   34764:	003a3e01 	jmpi	3a3e0 <__malloc_unlock>
   34768:	dfc00217 	ldw	ra,8(sp)
   3476c:	dc400117 	ldw	r17,4(sp)
   34770:	dc000017 	ldw	r16,0(sp)
   34774:	dec00304 	addi	sp,sp,12
   34778:	f800283a 	ret
   3477c:	31000217 	ldw	r4,8(r6)
   34780:	003fbd06 	br	34678 <_free_r+0x94>
   34784:	3806d0fa 	srli	r3,r7,3
   34788:	00800044 	movi	r2,1
   3478c:	51400117 	ldw	r5,4(r10)
   34790:	180890fa 	slli	r4,r3,3
   34794:	1807d0ba 	srai	r3,r3,2
   34798:	22c9883a 	add	r4,r4,r11
   3479c:	21800217 	ldw	r6,8(r4)
   347a0:	10c4983a 	sll	r2,r2,r3
   347a4:	41000315 	stw	r4,12(r8)
   347a8:	41800215 	stw	r6,8(r8)
   347ac:	288ab03a 	or	r5,r5,r2
   347b0:	22000215 	stw	r8,8(r4)
   347b4:	8809883a 	mov	r4,r17
   347b8:	51400115 	stw	r5,4(r10)
   347bc:	32000315 	stw	r8,12(r6)
   347c0:	dfc00217 	ldw	ra,8(sp)
   347c4:	dc400117 	ldw	r17,4(sp)
   347c8:	dc000017 	ldw	r16,0(sp)
   347cc:	dec00304 	addi	sp,sp,12
   347d0:	003a3e01 	jmpi	3a3e0 <__malloc_unlock>
   347d4:	2880004c 	andi	r2,r5,1
   347d8:	3a4d883a 	add	r6,r7,r9
   347dc:	1000071e 	bne	r2,zero,347fc <_free_r+0x218>
   347e0:	80bffe17 	ldw	r2,-8(r16)
   347e4:	4091c83a 	sub	r8,r8,r2
   347e8:	41000317 	ldw	r4,12(r8)
   347ec:	40c00217 	ldw	r3,8(r8)
   347f0:	308d883a 	add	r6,r6,r2
   347f4:	20c00215 	stw	r3,8(r4)
   347f8:	19000315 	stw	r4,12(r3)
   347fc:	00800074 	movhi	r2,1
   34800:	10877104 	addi	r2,r2,7620
   34804:	11000017 	ldw	r4,0(r2)
   34808:	30c00054 	ori	r3,r6,1
   3480c:	52000215 	stw	r8,8(r10)
   34810:	40c00115 	stw	r3,4(r8)
   34814:	313fa036 	bltu	r6,r4,34698 <_free_r+0xb4>
   34818:	00800074 	movhi	r2,1
   3481c:	10878504 	addi	r2,r2,7700
   34820:	11400017 	ldw	r5,0(r2)
   34824:	8809883a 	mov	r4,r17
   34828:	00344b80 	call	344b8 <_malloc_trim_r>
   3482c:	003f9a06 	br	34698 <_free_r+0xb4>
   34830:	00800104 	movi	r2,4
   34834:	10c0072e 	bgeu	r2,r3,34854 <_free_r+0x270>
   34838:	00800504 	movi	r2,20
   3483c:	10c01936 	bltu	r2,r3,348a4 <_free_r+0x2c0>
   34840:	188016c4 	addi	r2,r3,91
   34844:	100690fa 	slli	r3,r2,3
   34848:	003fb306 	br	34718 <_free_r+0x134>
   3484c:	01400044 	movi	r5,1
   34850:	003f7e06 	br	3464c <_free_r+0x68>
   34854:	3804d1ba 	srli	r2,r7,6
   34858:	10800e04 	addi	r2,r2,56
   3485c:	100690fa 	slli	r3,r2,3
   34860:	003fad06 	br	34718 <_free_r+0x134>
   34864:	22000315 	stw	r8,12(r4)
   34868:	22000215 	stw	r8,8(r4)
   3486c:	3a05883a 	add	r2,r7,r8
   34870:	38c00054 	ori	r3,r7,1
   34874:	11c00015 	stw	r7,0(r2)
   34878:	41000215 	stw	r4,8(r8)
   3487c:	40c00115 	stw	r3,4(r8)
   34880:	41000315 	stw	r4,12(r8)
   34884:	003f8406 	br	34698 <_free_r+0xb4>
   34888:	1005d0ba 	srai	r2,r2,2
   3488c:	00c00044 	movi	r3,1
   34890:	51000117 	ldw	r4,4(r10)
   34894:	1886983a 	sll	r3,r3,r2
   34898:	20c8b03a 	or	r4,r4,r3
   3489c:	51000115 	stw	r4,4(r10)
   348a0:	003fa706 	br	34740 <_free_r+0x15c>
   348a4:	00801504 	movi	r2,84
   348a8:	10c00436 	bltu	r2,r3,348bc <_free_r+0x2d8>
   348ac:	3804d33a 	srli	r2,r7,12
   348b0:	10801b84 	addi	r2,r2,110
   348b4:	100690fa 	slli	r3,r2,3
   348b8:	003f9706 	br	34718 <_free_r+0x134>
   348bc:	00805504 	movi	r2,340
   348c0:	10c00436 	bltu	r2,r3,348d4 <_free_r+0x2f0>
   348c4:	3804d3fa 	srli	r2,r7,15
   348c8:	10801dc4 	addi	r2,r2,119
   348cc:	100690fa 	slli	r3,r2,3
   348d0:	003f9106 	br	34718 <_free_r+0x134>
   348d4:	00815504 	movi	r2,1364
   348d8:	10c0032e 	bgeu	r2,r3,348e8 <_free_r+0x304>
   348dc:	00801f84 	movi	r2,126
   348e0:	00c0fc04 	movi	r3,1008
   348e4:	003f8c06 	br	34718 <_free_r+0x134>
   348e8:	3804d4ba 	srli	r2,r7,18
   348ec:	10801f04 	addi	r2,r2,124
   348f0:	100690fa 	slli	r3,r2,3
   348f4:	003f8806 	br	34718 <_free_r+0x134>

000348f8 <__sfvwrite_r>:
   348f8:	30800217 	ldw	r2,8(r6)
   348fc:	defff504 	addi	sp,sp,-44
   34900:	df000915 	stw	fp,36(sp)
   34904:	dd800715 	stw	r22,28(sp)
   34908:	dc800315 	stw	r18,12(sp)
   3490c:	dfc00a15 	stw	ra,40(sp)
   34910:	ddc00815 	stw	r23,32(sp)
   34914:	dd400615 	stw	r21,24(sp)
   34918:	dd000515 	stw	r20,20(sp)
   3491c:	dcc00415 	stw	r19,16(sp)
   34920:	dc400215 	stw	r17,8(sp)
   34924:	dc000115 	stw	r16,4(sp)
   34928:	302d883a 	mov	r22,r6
   3492c:	2039883a 	mov	fp,r4
   34930:	2825883a 	mov	r18,r5
   34934:	10001c26 	beq	r2,zero,349a8 <__sfvwrite_r+0xb0>
   34938:	29c0030b 	ldhu	r7,12(r5)
   3493c:	3880020c 	andi	r2,r7,8
   34940:	10002726 	beq	r2,zero,349e0 <__sfvwrite_r+0xe8>
   34944:	28800417 	ldw	r2,16(r5)
   34948:	10002526 	beq	r2,zero,349e0 <__sfvwrite_r+0xe8>
   3494c:	3880008c 	andi	r2,r7,2
   34950:	b5400017 	ldw	r21,0(r22)
   34954:	10002826 	beq	r2,zero,349f8 <__sfvwrite_r+0x100>
   34958:	0021883a 	mov	r16,zero
   3495c:	0023883a 	mov	r17,zero
   34960:	880d883a 	mov	r6,r17
   34964:	e009883a 	mov	r4,fp
   34968:	00810004 	movi	r2,1024
   3496c:	80006e26 	beq	r16,zero,34b28 <__sfvwrite_r+0x230>
   34970:	800f883a 	mov	r7,r16
   34974:	91400717 	ldw	r5,28(r18)
   34978:	1400012e 	bgeu	r2,r16,34980 <__sfvwrite_r+0x88>
   3497c:	100f883a 	mov	r7,r2
   34980:	90c00917 	ldw	r3,36(r18)
   34984:	183ee83a 	callr	r3
   34988:	1007883a 	mov	r3,r2
   3498c:	80a1c83a 	sub	r16,r16,r2
   34990:	88a3883a 	add	r17,r17,r2
   34994:	00806d0e 	bge	zero,r2,34b4c <__sfvwrite_r+0x254>
   34998:	b0800217 	ldw	r2,8(r22)
   3499c:	10c5c83a 	sub	r2,r2,r3
   349a0:	b0800215 	stw	r2,8(r22)
   349a4:	103fee1e 	bne	r2,zero,34960 <__sfvwrite_r+0x68>
   349a8:	0009883a 	mov	r4,zero
   349ac:	2005883a 	mov	r2,r4
   349b0:	dfc00a17 	ldw	ra,40(sp)
   349b4:	df000917 	ldw	fp,36(sp)
   349b8:	ddc00817 	ldw	r23,32(sp)
   349bc:	dd800717 	ldw	r22,28(sp)
   349c0:	dd400617 	ldw	r21,24(sp)
   349c4:	dd000517 	ldw	r20,20(sp)
   349c8:	dcc00417 	ldw	r19,16(sp)
   349cc:	dc800317 	ldw	r18,12(sp)
   349d0:	dc400217 	ldw	r17,8(sp)
   349d4:	dc000117 	ldw	r16,4(sp)
   349d8:	dec00b04 	addi	sp,sp,44
   349dc:	f800283a 	ret
   349e0:	00326c00 	call	326c0 <__swsetup_r>
   349e4:	1000e41e 	bne	r2,zero,34d78 <__sfvwrite_r+0x480>
   349e8:	91c0030b 	ldhu	r7,12(r18)
   349ec:	b5400017 	ldw	r21,0(r22)
   349f0:	3880008c 	andi	r2,r7,2
   349f4:	103fd81e 	bne	r2,zero,34958 <__sfvwrite_r+0x60>
   349f8:	3880004c 	andi	r2,r7,1
   349fc:	1005003a 	cmpeq	r2,r2,zero
   34a00:	10005726 	beq	r2,zero,34b60 <__sfvwrite_r+0x268>
   34a04:	0029883a 	mov	r20,zero
   34a08:	002f883a 	mov	r23,zero
   34a0c:	a0004226 	beq	r20,zero,34b18 <__sfvwrite_r+0x220>
   34a10:	3880800c 	andi	r2,r7,512
   34a14:	94000217 	ldw	r16,8(r18)
   34a18:	10008b26 	beq	r2,zero,34c48 <__sfvwrite_r+0x350>
   34a1c:	800d883a 	mov	r6,r16
   34a20:	a400a536 	bltu	r20,r16,34cb8 <__sfvwrite_r+0x3c0>
   34a24:	3881200c 	andi	r2,r7,1152
   34a28:	10002726 	beq	r2,zero,34ac8 <__sfvwrite_r+0x1d0>
   34a2c:	90800517 	ldw	r2,20(r18)
   34a30:	92000417 	ldw	r8,16(r18)
   34a34:	91400017 	ldw	r5,0(r18)
   34a38:	1087883a 	add	r3,r2,r2
   34a3c:	1887883a 	add	r3,r3,r2
   34a40:	1808d7fa 	srli	r4,r3,31
   34a44:	2a21c83a 	sub	r16,r5,r8
   34a48:	80800044 	addi	r2,r16,1
   34a4c:	20c9883a 	add	r4,r4,r3
   34a50:	2027d07a 	srai	r19,r4,1
   34a54:	a085883a 	add	r2,r20,r2
   34a58:	980d883a 	mov	r6,r19
   34a5c:	9880022e 	bgeu	r19,r2,34a68 <__sfvwrite_r+0x170>
   34a60:	1027883a 	mov	r19,r2
   34a64:	100d883a 	mov	r6,r2
   34a68:	3881000c 	andi	r2,r7,1024
   34a6c:	1000b826 	beq	r2,zero,34d50 <__sfvwrite_r+0x458>
   34a70:	300b883a 	mov	r5,r6
   34a74:	e009883a 	mov	r4,fp
   34a78:	003516c0 	call	3516c <_malloc_r>
   34a7c:	10003126 	beq	r2,zero,34b44 <__sfvwrite_r+0x24c>
   34a80:	91400417 	ldw	r5,16(r18)
   34a84:	1009883a 	mov	r4,r2
   34a88:	800d883a 	mov	r6,r16
   34a8c:	1023883a 	mov	r17,r2
   34a90:	00359900 	call	35990 <memcpy>
   34a94:	90c0030b 	ldhu	r3,12(r18)
   34a98:	00beffc4 	movi	r2,-1025
   34a9c:	1886703a 	and	r3,r3,r2
   34aa0:	18c02014 	ori	r3,r3,128
   34aa4:	90c0030d 	sth	r3,12(r18)
   34aa8:	9c07c83a 	sub	r3,r19,r16
   34aac:	8c05883a 	add	r2,r17,r16
   34ab0:	a00d883a 	mov	r6,r20
   34ab4:	a021883a 	mov	r16,r20
   34ab8:	90800015 	stw	r2,0(r18)
   34abc:	90c00215 	stw	r3,8(r18)
   34ac0:	94400415 	stw	r17,16(r18)
   34ac4:	94c00515 	stw	r19,20(r18)
   34ac8:	91000017 	ldw	r4,0(r18)
   34acc:	b80b883a 	mov	r5,r23
   34ad0:	a023883a 	mov	r17,r20
   34ad4:	0035a300 	call	35a30 <memmove>
   34ad8:	90c00217 	ldw	r3,8(r18)
   34adc:	90800017 	ldw	r2,0(r18)
   34ae0:	a027883a 	mov	r19,r20
   34ae4:	1c07c83a 	sub	r3,r3,r16
   34ae8:	1405883a 	add	r2,r2,r16
   34aec:	90c00215 	stw	r3,8(r18)
   34af0:	a021883a 	mov	r16,r20
   34af4:	90800015 	stw	r2,0(r18)
   34af8:	b0800217 	ldw	r2,8(r22)
   34afc:	1405c83a 	sub	r2,r2,r16
   34b00:	b0800215 	stw	r2,8(r22)
   34b04:	103fa826 	beq	r2,zero,349a8 <__sfvwrite_r+0xb0>
   34b08:	a469c83a 	sub	r20,r20,r17
   34b0c:	91c0030b 	ldhu	r7,12(r18)
   34b10:	bcef883a 	add	r23,r23,r19
   34b14:	a03fbe1e 	bne	r20,zero,34a10 <__sfvwrite_r+0x118>
   34b18:	adc00017 	ldw	r23,0(r21)
   34b1c:	ad000117 	ldw	r20,4(r21)
   34b20:	ad400204 	addi	r21,r21,8
   34b24:	003fb906 	br	34a0c <__sfvwrite_r+0x114>
   34b28:	ac400017 	ldw	r17,0(r21)
   34b2c:	ac000117 	ldw	r16,4(r21)
   34b30:	ad400204 	addi	r21,r21,8
   34b34:	003f8a06 	br	34960 <__sfvwrite_r+0x68>
   34b38:	91400417 	ldw	r5,16(r18)
   34b3c:	e009883a 	mov	r4,fp
   34b40:	00345e40 	call	345e4 <_free_r>
   34b44:	00800304 	movi	r2,12
   34b48:	e0800015 	stw	r2,0(fp)
   34b4c:	9080030b 	ldhu	r2,12(r18)
   34b50:	013fffc4 	movi	r4,-1
   34b54:	10801014 	ori	r2,r2,64
   34b58:	9080030d 	sth	r2,12(r18)
   34b5c:	003f9306 	br	349ac <__sfvwrite_r+0xb4>
   34b60:	0027883a 	mov	r19,zero
   34b64:	002f883a 	mov	r23,zero
   34b68:	d8000015 	stw	zero,0(sp)
   34b6c:	0029883a 	mov	r20,zero
   34b70:	98001e26 	beq	r19,zero,34bec <__sfvwrite_r+0x2f4>
   34b74:	d8c00017 	ldw	r3,0(sp)
   34b78:	1804c03a 	cmpne	r2,r3,zero
   34b7c:	10005e26 	beq	r2,zero,34cf8 <__sfvwrite_r+0x400>
   34b80:	9821883a 	mov	r16,r19
   34b84:	a4c0012e 	bgeu	r20,r19,34b8c <__sfvwrite_r+0x294>
   34b88:	a021883a 	mov	r16,r20
   34b8c:	91000017 	ldw	r4,0(r18)
   34b90:	90800417 	ldw	r2,16(r18)
   34b94:	91800217 	ldw	r6,8(r18)
   34b98:	91c00517 	ldw	r7,20(r18)
   34b9c:	1100022e 	bgeu	r2,r4,34ba8 <__sfvwrite_r+0x2b0>
   34ba0:	31e3883a 	add	r17,r6,r7
   34ba4:	8c001616 	blt	r17,r16,34c00 <__sfvwrite_r+0x308>
   34ba8:	81c03816 	blt	r16,r7,34c8c <__sfvwrite_r+0x394>
   34bac:	90c00917 	ldw	r3,36(r18)
   34bb0:	91400717 	ldw	r5,28(r18)
   34bb4:	e009883a 	mov	r4,fp
   34bb8:	b80d883a 	mov	r6,r23
   34bbc:	183ee83a 	callr	r3
   34bc0:	1023883a 	mov	r17,r2
   34bc4:	00bfe10e 	bge	zero,r2,34b4c <__sfvwrite_r+0x254>
   34bc8:	a469c83a 	sub	r20,r20,r17
   34bcc:	a0001826 	beq	r20,zero,34c30 <__sfvwrite_r+0x338>
   34bd0:	b0800217 	ldw	r2,8(r22)
   34bd4:	1445c83a 	sub	r2,r2,r17
   34bd8:	b0800215 	stw	r2,8(r22)
   34bdc:	103f7226 	beq	r2,zero,349a8 <__sfvwrite_r+0xb0>
   34be0:	9c67c83a 	sub	r19,r19,r17
   34be4:	bc6f883a 	add	r23,r23,r17
   34be8:	983fe21e 	bne	r19,zero,34b74 <__sfvwrite_r+0x27c>
   34bec:	adc00017 	ldw	r23,0(r21)
   34bf0:	acc00117 	ldw	r19,4(r21)
   34bf4:	ad400204 	addi	r21,r21,8
   34bf8:	d8000015 	stw	zero,0(sp)
   34bfc:	003fdc06 	br	34b70 <__sfvwrite_r+0x278>
   34c00:	b80b883a 	mov	r5,r23
   34c04:	880d883a 	mov	r6,r17
   34c08:	0035a300 	call	35a30 <memmove>
   34c0c:	90c00017 	ldw	r3,0(r18)
   34c10:	e009883a 	mov	r4,fp
   34c14:	900b883a 	mov	r5,r18
   34c18:	1c47883a 	add	r3,r3,r17
   34c1c:	90c00015 	stw	r3,0(r18)
   34c20:	0033fc80 	call	33fc8 <_fflush_r>
   34c24:	103fc91e 	bne	r2,zero,34b4c <__sfvwrite_r+0x254>
   34c28:	a469c83a 	sub	r20,r20,r17
   34c2c:	a03fe81e 	bne	r20,zero,34bd0 <__sfvwrite_r+0x2d8>
   34c30:	e009883a 	mov	r4,fp
   34c34:	900b883a 	mov	r5,r18
   34c38:	0033fc80 	call	33fc8 <_fflush_r>
   34c3c:	103fc31e 	bne	r2,zero,34b4c <__sfvwrite_r+0x254>
   34c40:	d8000015 	stw	zero,0(sp)
   34c44:	003fe206 	br	34bd0 <__sfvwrite_r+0x2d8>
   34c48:	91000017 	ldw	r4,0(r18)
   34c4c:	90800417 	ldw	r2,16(r18)
   34c50:	1100022e 	bgeu	r2,r4,34c5c <__sfvwrite_r+0x364>
   34c54:	8023883a 	mov	r17,r16
   34c58:	85003136 	bltu	r16,r20,34d20 <__sfvwrite_r+0x428>
   34c5c:	91c00517 	ldw	r7,20(r18)
   34c60:	a1c01836 	bltu	r20,r7,34cc4 <__sfvwrite_r+0x3cc>
   34c64:	90c00917 	ldw	r3,36(r18)
   34c68:	91400717 	ldw	r5,28(r18)
   34c6c:	e009883a 	mov	r4,fp
   34c70:	b80d883a 	mov	r6,r23
   34c74:	183ee83a 	callr	r3
   34c78:	1021883a 	mov	r16,r2
   34c7c:	00bfb30e 	bge	zero,r2,34b4c <__sfvwrite_r+0x254>
   34c80:	1023883a 	mov	r17,r2
   34c84:	1027883a 	mov	r19,r2
   34c88:	003f9b06 	br	34af8 <__sfvwrite_r+0x200>
   34c8c:	b80b883a 	mov	r5,r23
   34c90:	800d883a 	mov	r6,r16
   34c94:	0035a300 	call	35a30 <memmove>
   34c98:	90c00217 	ldw	r3,8(r18)
   34c9c:	90800017 	ldw	r2,0(r18)
   34ca0:	8023883a 	mov	r17,r16
   34ca4:	1c07c83a 	sub	r3,r3,r16
   34ca8:	1405883a 	add	r2,r2,r16
   34cac:	90c00215 	stw	r3,8(r18)
   34cb0:	90800015 	stw	r2,0(r18)
   34cb4:	003fc406 	br	34bc8 <__sfvwrite_r+0x2d0>
   34cb8:	a00d883a 	mov	r6,r20
   34cbc:	a021883a 	mov	r16,r20
   34cc0:	003f8106 	br	34ac8 <__sfvwrite_r+0x1d0>
   34cc4:	b80b883a 	mov	r5,r23
   34cc8:	a00d883a 	mov	r6,r20
   34ccc:	0035a300 	call	35a30 <memmove>
   34cd0:	90c00217 	ldw	r3,8(r18)
   34cd4:	90800017 	ldw	r2,0(r18)
   34cd8:	a021883a 	mov	r16,r20
   34cdc:	1d07c83a 	sub	r3,r3,r20
   34ce0:	1505883a 	add	r2,r2,r20
   34ce4:	a023883a 	mov	r17,r20
   34ce8:	a027883a 	mov	r19,r20
   34cec:	90c00215 	stw	r3,8(r18)
   34cf0:	90800015 	stw	r2,0(r18)
   34cf4:	003f8006 	br	34af8 <__sfvwrite_r+0x200>
   34cf8:	b809883a 	mov	r4,r23
   34cfc:	01400284 	movi	r5,10
   34d00:	980d883a 	mov	r6,r19
   34d04:	00358ac0 	call	358ac <memchr>
   34d08:	10001726 	beq	r2,zero,34d68 <__sfvwrite_r+0x470>
   34d0c:	15c5c83a 	sub	r2,r2,r23
   34d10:	15000044 	addi	r20,r2,1
   34d14:	00800044 	movi	r2,1
   34d18:	d8800015 	stw	r2,0(sp)
   34d1c:	003f9806 	br	34b80 <__sfvwrite_r+0x288>
   34d20:	b80b883a 	mov	r5,r23
   34d24:	800d883a 	mov	r6,r16
   34d28:	0035a300 	call	35a30 <memmove>
   34d2c:	90c00017 	ldw	r3,0(r18)
   34d30:	e009883a 	mov	r4,fp
   34d34:	900b883a 	mov	r5,r18
   34d38:	1c07883a 	add	r3,r3,r16
   34d3c:	90c00015 	stw	r3,0(r18)
   34d40:	8027883a 	mov	r19,r16
   34d44:	0033fc80 	call	33fc8 <_fflush_r>
   34d48:	103f6b26 	beq	r2,zero,34af8 <__sfvwrite_r+0x200>
   34d4c:	003f7f06 	br	34b4c <__sfvwrite_r+0x254>
   34d50:	400b883a 	mov	r5,r8
   34d54:	e009883a 	mov	r4,fp
   34d58:	0036b9c0 	call	36b9c <_realloc_r>
   34d5c:	103f7626 	beq	r2,zero,34b38 <__sfvwrite_r+0x240>
   34d60:	1023883a 	mov	r17,r2
   34d64:	003f5006 	br	34aa8 <__sfvwrite_r+0x1b0>
   34d68:	00c00044 	movi	r3,1
   34d6c:	9d000044 	addi	r20,r19,1
   34d70:	d8c00015 	stw	r3,0(sp)
   34d74:	003f8206 	br	34b80 <__sfvwrite_r+0x288>
   34d78:	9080030b 	ldhu	r2,12(r18)
   34d7c:	00c00244 	movi	r3,9
   34d80:	013fffc4 	movi	r4,-1
   34d84:	10801014 	ori	r2,r2,64
   34d88:	9080030d 	sth	r2,12(r18)
   34d8c:	e0c00015 	stw	r3,0(fp)
   34d90:	003f0606 	br	349ac <__sfvwrite_r+0xb4>

00034d94 <_fwalk_reent>:
   34d94:	defff704 	addi	sp,sp,-36
   34d98:	dcc00315 	stw	r19,12(sp)
   34d9c:	24c0b804 	addi	r19,r4,736
   34da0:	dd800615 	stw	r22,24(sp)
   34da4:	dd400515 	stw	r21,20(sp)
   34da8:	dfc00815 	stw	ra,32(sp)
   34dac:	ddc00715 	stw	r23,28(sp)
   34db0:	dd000415 	stw	r20,16(sp)
   34db4:	dc800215 	stw	r18,8(sp)
   34db8:	dc400115 	stw	r17,4(sp)
   34dbc:	dc000015 	stw	r16,0(sp)
   34dc0:	202b883a 	mov	r21,r4
   34dc4:	282d883a 	mov	r22,r5
   34dc8:	00342500 	call	34250 <__sfp_lock_acquire>
   34dcc:	98002126 	beq	r19,zero,34e54 <_fwalk_reent+0xc0>
   34dd0:	002f883a 	mov	r23,zero
   34dd4:	9c800117 	ldw	r18,4(r19)
   34dd8:	9c000217 	ldw	r16,8(r19)
   34ddc:	90bfffc4 	addi	r2,r18,-1
   34de0:	10000d16 	blt	r2,zero,34e18 <_fwalk_reent+0x84>
   34de4:	0023883a 	mov	r17,zero
   34de8:	053fffc4 	movi	r20,-1
   34dec:	8080030f 	ldh	r2,12(r16)
   34df0:	8c400044 	addi	r17,r17,1
   34df4:	10000626 	beq	r2,zero,34e10 <_fwalk_reent+0x7c>
   34df8:	8080038f 	ldh	r2,14(r16)
   34dfc:	800b883a 	mov	r5,r16
   34e00:	a809883a 	mov	r4,r21
   34e04:	15000226 	beq	r2,r20,34e10 <_fwalk_reent+0x7c>
   34e08:	b03ee83a 	callr	r22
   34e0c:	b8aeb03a 	or	r23,r23,r2
   34e10:	84001704 	addi	r16,r16,92
   34e14:	947ff51e 	bne	r18,r17,34dec <_fwalk_reent+0x58>
   34e18:	9cc00017 	ldw	r19,0(r19)
   34e1c:	983fed1e 	bne	r19,zero,34dd4 <_fwalk_reent+0x40>
   34e20:	00342540 	call	34254 <__sfp_lock_release>
   34e24:	b805883a 	mov	r2,r23
   34e28:	dfc00817 	ldw	ra,32(sp)
   34e2c:	ddc00717 	ldw	r23,28(sp)
   34e30:	dd800617 	ldw	r22,24(sp)
   34e34:	dd400517 	ldw	r21,20(sp)
   34e38:	dd000417 	ldw	r20,16(sp)
   34e3c:	dcc00317 	ldw	r19,12(sp)
   34e40:	dc800217 	ldw	r18,8(sp)
   34e44:	dc400117 	ldw	r17,4(sp)
   34e48:	dc000017 	ldw	r16,0(sp)
   34e4c:	dec00904 	addi	sp,sp,36
   34e50:	f800283a 	ret
   34e54:	002f883a 	mov	r23,zero
   34e58:	003ff106 	br	34e20 <_fwalk_reent+0x8c>

00034e5c <_fwalk>:
   34e5c:	defff804 	addi	sp,sp,-32
   34e60:	dcc00315 	stw	r19,12(sp)
   34e64:	24c0b804 	addi	r19,r4,736
   34e68:	dd400515 	stw	r21,20(sp)
   34e6c:	dfc00715 	stw	ra,28(sp)
   34e70:	dd800615 	stw	r22,24(sp)
   34e74:	dd000415 	stw	r20,16(sp)
   34e78:	dc800215 	stw	r18,8(sp)
   34e7c:	dc400115 	stw	r17,4(sp)
   34e80:	dc000015 	stw	r16,0(sp)
   34e84:	282b883a 	mov	r21,r5
   34e88:	00342500 	call	34250 <__sfp_lock_acquire>
   34e8c:	98001f26 	beq	r19,zero,34f0c <_fwalk+0xb0>
   34e90:	002d883a 	mov	r22,zero
   34e94:	9c800117 	ldw	r18,4(r19)
   34e98:	9c000217 	ldw	r16,8(r19)
   34e9c:	90bfffc4 	addi	r2,r18,-1
   34ea0:	10000c16 	blt	r2,zero,34ed4 <_fwalk+0x78>
   34ea4:	0023883a 	mov	r17,zero
   34ea8:	053fffc4 	movi	r20,-1
   34eac:	8080030f 	ldh	r2,12(r16)
   34eb0:	8c400044 	addi	r17,r17,1
   34eb4:	10000526 	beq	r2,zero,34ecc <_fwalk+0x70>
   34eb8:	8080038f 	ldh	r2,14(r16)
   34ebc:	8009883a 	mov	r4,r16
   34ec0:	15000226 	beq	r2,r20,34ecc <_fwalk+0x70>
   34ec4:	a83ee83a 	callr	r21
   34ec8:	b0acb03a 	or	r22,r22,r2
   34ecc:	84001704 	addi	r16,r16,92
   34ed0:	947ff61e 	bne	r18,r17,34eac <_fwalk+0x50>
   34ed4:	9cc00017 	ldw	r19,0(r19)
   34ed8:	983fee1e 	bne	r19,zero,34e94 <_fwalk+0x38>
   34edc:	00342540 	call	34254 <__sfp_lock_release>
   34ee0:	b005883a 	mov	r2,r22
   34ee4:	dfc00717 	ldw	ra,28(sp)
   34ee8:	dd800617 	ldw	r22,24(sp)
   34eec:	dd400517 	ldw	r21,20(sp)
   34ef0:	dd000417 	ldw	r20,16(sp)
   34ef4:	dcc00317 	ldw	r19,12(sp)
   34ef8:	dc800217 	ldw	r18,8(sp)
   34efc:	dc400117 	ldw	r17,4(sp)
   34f00:	dc000017 	ldw	r16,0(sp)
   34f04:	dec00804 	addi	sp,sp,32
   34f08:	f800283a 	ret
   34f0c:	002d883a 	mov	r22,zero
   34f10:	003ff206 	br	34edc <_fwalk+0x80>

00034f14 <__locale_charset>:
   34f14:	d0a00317 	ldw	r2,-32756(gp)
   34f18:	f800283a 	ret

00034f1c <_localeconv_r>:
   34f1c:	00800074 	movhi	r2,1
   34f20:	10803f04 	addi	r2,r2,252
   34f24:	f800283a 	ret

00034f28 <localeconv>:
   34f28:	00800074 	movhi	r2,1
   34f2c:	10876d04 	addi	r2,r2,7604
   34f30:	11000017 	ldw	r4,0(r2)
   34f34:	0034f1c1 	jmpi	34f1c <_localeconv_r>

00034f38 <_setlocale_r>:
   34f38:	defffc04 	addi	sp,sp,-16
   34f3c:	00c00074 	movhi	r3,1
   34f40:	18c03a04 	addi	r3,r3,232
   34f44:	dc800215 	stw	r18,8(sp)
   34f48:	dc400115 	stw	r17,4(sp)
   34f4c:	dc000015 	stw	r16,0(sp)
   34f50:	2023883a 	mov	r17,r4
   34f54:	2825883a 	mov	r18,r5
   34f58:	dfc00315 	stw	ra,12(sp)
   34f5c:	3021883a 	mov	r16,r6
   34f60:	3009883a 	mov	r4,r6
   34f64:	180b883a 	mov	r5,r3
   34f68:	30000926 	beq	r6,zero,34f90 <_setlocale_r+0x58>
   34f6c:	00373bc0 	call	373bc <strcmp>
   34f70:	8009883a 	mov	r4,r16
   34f74:	01400074 	movhi	r5,1
   34f78:	29402504 	addi	r5,r5,148
   34f7c:	10000b1e 	bne	r2,zero,34fac <_setlocale_r+0x74>
   34f80:	8c000d15 	stw	r16,52(r17)
   34f84:	8c800c15 	stw	r18,48(r17)
   34f88:	00c00074 	movhi	r3,1
   34f8c:	18c03a04 	addi	r3,r3,232
   34f90:	1805883a 	mov	r2,r3
   34f94:	dfc00317 	ldw	ra,12(sp)
   34f98:	dc800217 	ldw	r18,8(sp)
   34f9c:	dc400117 	ldw	r17,4(sp)
   34fa0:	dc000017 	ldw	r16,0(sp)
   34fa4:	dec00404 	addi	sp,sp,16
   34fa8:	f800283a 	ret
   34fac:	00373bc0 	call	373bc <strcmp>
   34fb0:	0007883a 	mov	r3,zero
   34fb4:	103ff226 	beq	r2,zero,34f80 <_setlocale_r+0x48>
   34fb8:	003ff506 	br	34f90 <_setlocale_r+0x58>

00034fbc <setlocale>:
   34fbc:	01800074 	movhi	r6,1
   34fc0:	31876d04 	addi	r6,r6,7604
   34fc4:	2007883a 	mov	r3,r4
   34fc8:	31000017 	ldw	r4,0(r6)
   34fcc:	280d883a 	mov	r6,r5
   34fd0:	180b883a 	mov	r5,r3
   34fd4:	0034f381 	jmpi	34f38 <_setlocale_r>

00034fd8 <__smakebuf_r>:
   34fd8:	2880030b 	ldhu	r2,12(r5)
   34fdc:	deffed04 	addi	sp,sp,-76
   34fe0:	dc401015 	stw	r17,64(sp)
   34fe4:	1080008c 	andi	r2,r2,2
   34fe8:	dc000f15 	stw	r16,60(sp)
   34fec:	dfc01215 	stw	ra,72(sp)
   34ff0:	dc801115 	stw	r18,68(sp)
   34ff4:	2821883a 	mov	r16,r5
   34ff8:	2023883a 	mov	r17,r4
   34ffc:	10000b26 	beq	r2,zero,3502c <__smakebuf_r+0x54>
   35000:	28c010c4 	addi	r3,r5,67
   35004:	00800044 	movi	r2,1
   35008:	28800515 	stw	r2,20(r5)
   3500c:	28c00415 	stw	r3,16(r5)
   35010:	28c00015 	stw	r3,0(r5)
   35014:	dfc01217 	ldw	ra,72(sp)
   35018:	dc801117 	ldw	r18,68(sp)
   3501c:	dc401017 	ldw	r17,64(sp)
   35020:	dc000f17 	ldw	r16,60(sp)
   35024:	dec01304 	addi	sp,sp,76
   35028:	f800283a 	ret
   3502c:	2940038f 	ldh	r5,14(r5)
   35030:	28002116 	blt	r5,zero,350b8 <__smakebuf_r+0xe0>
   35034:	d80d883a 	mov	r6,sp
   35038:	00377380 	call	37738 <_fstat_r>
   3503c:	10001e16 	blt	r2,zero,350b8 <__smakebuf_r+0xe0>
   35040:	d8800117 	ldw	r2,4(sp)
   35044:	00e00014 	movui	r3,32768
   35048:	113c000c 	andi	r4,r2,61440
   3504c:	20c03126 	beq	r4,r3,35114 <__smakebuf_r+0x13c>
   35050:	8080030b 	ldhu	r2,12(r16)
   35054:	00c80004 	movi	r3,8192
   35058:	10820014 	ori	r2,r2,2048
   3505c:	8080030d 	sth	r2,12(r16)
   35060:	20c01e26 	beq	r4,r3,350dc <__smakebuf_r+0x104>
   35064:	04810004 	movi	r18,1024
   35068:	8809883a 	mov	r4,r17
   3506c:	900b883a 	mov	r5,r18
   35070:	003516c0 	call	3516c <_malloc_r>
   35074:	1009883a 	mov	r4,r2
   35078:	10003126 	beq	r2,zero,35140 <__smakebuf_r+0x168>
   3507c:	80c0030b 	ldhu	r3,12(r16)
   35080:	008000f4 	movhi	r2,3
   35084:	1090d104 	addi	r2,r2,17220
   35088:	88800f15 	stw	r2,60(r17)
   3508c:	18c02014 	ori	r3,r3,128
   35090:	84800515 	stw	r18,20(r16)
   35094:	80c0030d 	sth	r3,12(r16)
   35098:	81000415 	stw	r4,16(r16)
   3509c:	81000015 	stw	r4,0(r16)
   350a0:	dfc01217 	ldw	ra,72(sp)
   350a4:	dc801117 	ldw	r18,68(sp)
   350a8:	dc401017 	ldw	r17,64(sp)
   350ac:	dc000f17 	ldw	r16,60(sp)
   350b0:	dec01304 	addi	sp,sp,76
   350b4:	f800283a 	ret
   350b8:	80c0030b 	ldhu	r3,12(r16)
   350bc:	1880200c 	andi	r2,r3,128
   350c0:	10000426 	beq	r2,zero,350d4 <__smakebuf_r+0xfc>
   350c4:	04801004 	movi	r18,64
   350c8:	18820014 	ori	r2,r3,2048
   350cc:	8080030d 	sth	r2,12(r16)
   350d0:	003fe506 	br	35068 <__smakebuf_r+0x90>
   350d4:	04810004 	movi	r18,1024
   350d8:	003ffb06 	br	350c8 <__smakebuf_r+0xf0>
   350dc:	8140038f 	ldh	r5,14(r16)
   350e0:	8809883a 	mov	r4,r17
   350e4:	00377ac0 	call	377ac <_isatty_r>
   350e8:	103fde26 	beq	r2,zero,35064 <__smakebuf_r+0x8c>
   350ec:	8080030b 	ldhu	r2,12(r16)
   350f0:	80c010c4 	addi	r3,r16,67
   350f4:	04810004 	movi	r18,1024
   350f8:	10800054 	ori	r2,r2,1
   350fc:	8080030d 	sth	r2,12(r16)
   35100:	00800044 	movi	r2,1
   35104:	80c00415 	stw	r3,16(r16)
   35108:	80800515 	stw	r2,20(r16)
   3510c:	80c00015 	stw	r3,0(r16)
   35110:	003fd506 	br	35068 <__smakebuf_r+0x90>
   35114:	80c00a17 	ldw	r3,40(r16)
   35118:	008000f4 	movhi	r2,3
   3511c:	109c9e04 	addi	r2,r2,29304
   35120:	18bfcb1e 	bne	r3,r2,35050 <__smakebuf_r+0x78>
   35124:	8080030b 	ldhu	r2,12(r16)
   35128:	00c10004 	movi	r3,1024
   3512c:	1825883a 	mov	r18,r3
   35130:	10c4b03a 	or	r2,r2,r3
   35134:	8080030d 	sth	r2,12(r16)
   35138:	80c01315 	stw	r3,76(r16)
   3513c:	003fca06 	br	35068 <__smakebuf_r+0x90>
   35140:	8100030b 	ldhu	r4,12(r16)
   35144:	2080800c 	andi	r2,r4,512
   35148:	103fb21e 	bne	r2,zero,35014 <__smakebuf_r+0x3c>
   3514c:	80c010c4 	addi	r3,r16,67
   35150:	21000094 	ori	r4,r4,2
   35154:	00800044 	movi	r2,1
   35158:	80800515 	stw	r2,20(r16)
   3515c:	8100030d 	sth	r4,12(r16)
   35160:	80c00415 	stw	r3,16(r16)
   35164:	80c00015 	stw	r3,0(r16)
   35168:	003faa06 	br	35014 <__smakebuf_r+0x3c>

0003516c <_malloc_r>:
   3516c:	defff604 	addi	sp,sp,-40
   35170:	28c002c4 	addi	r3,r5,11
   35174:	00800584 	movi	r2,22
   35178:	dc800215 	stw	r18,8(sp)
   3517c:	dfc00915 	stw	ra,36(sp)
   35180:	df000815 	stw	fp,32(sp)
   35184:	ddc00715 	stw	r23,28(sp)
   35188:	dd800615 	stw	r22,24(sp)
   3518c:	dd400515 	stw	r21,20(sp)
   35190:	dd000415 	stw	r20,16(sp)
   35194:	dcc00315 	stw	r19,12(sp)
   35198:	dc400115 	stw	r17,4(sp)
   3519c:	dc000015 	stw	r16,0(sp)
   351a0:	2025883a 	mov	r18,r4
   351a4:	10c01236 	bltu	r2,r3,351f0 <_malloc_r+0x84>
   351a8:	04400404 	movi	r17,16
   351ac:	8940142e 	bgeu	r17,r5,35200 <_malloc_r+0x94>
   351b0:	00800304 	movi	r2,12
   351b4:	0007883a 	mov	r3,zero
   351b8:	90800015 	stw	r2,0(r18)
   351bc:	1805883a 	mov	r2,r3
   351c0:	dfc00917 	ldw	ra,36(sp)
   351c4:	df000817 	ldw	fp,32(sp)
   351c8:	ddc00717 	ldw	r23,28(sp)
   351cc:	dd800617 	ldw	r22,24(sp)
   351d0:	dd400517 	ldw	r21,20(sp)
   351d4:	dd000417 	ldw	r20,16(sp)
   351d8:	dcc00317 	ldw	r19,12(sp)
   351dc:	dc800217 	ldw	r18,8(sp)
   351e0:	dc400117 	ldw	r17,4(sp)
   351e4:	dc000017 	ldw	r16,0(sp)
   351e8:	dec00a04 	addi	sp,sp,40
   351ec:	f800283a 	ret
   351f0:	00bffe04 	movi	r2,-8
   351f4:	18a2703a 	and	r17,r3,r2
   351f8:	883fed16 	blt	r17,zero,351b0 <_malloc_r+0x44>
   351fc:	897fec36 	bltu	r17,r5,351b0 <_malloc_r+0x44>
   35200:	9009883a 	mov	r4,r18
   35204:	003a3c00 	call	3a3c0 <__malloc_lock>
   35208:	00807dc4 	movi	r2,503
   3520c:	14402b2e 	bgeu	r2,r17,352bc <_malloc_r+0x150>
   35210:	8806d27a 	srli	r3,r17,9
   35214:	18003f1e 	bne	r3,zero,35314 <_malloc_r+0x1a8>
   35218:	880cd0fa 	srli	r6,r17,3
   3521c:	300490fa 	slli	r2,r6,3
   35220:	02c00074 	movhi	r11,1
   35224:	5ac1e904 	addi	r11,r11,1956
   35228:	12cb883a 	add	r5,r2,r11
   3522c:	2c000317 	ldw	r16,12(r5)
   35230:	580f883a 	mov	r7,r11
   35234:	2c00041e 	bne	r5,r16,35248 <_malloc_r+0xdc>
   35238:	00000a06 	br	35264 <_malloc_r+0xf8>
   3523c:	1800860e 	bge	r3,zero,35458 <_malloc_r+0x2ec>
   35240:	84000317 	ldw	r16,12(r16)
   35244:	2c000726 	beq	r5,r16,35264 <_malloc_r+0xf8>
   35248:	80800117 	ldw	r2,4(r16)
   3524c:	00ffff04 	movi	r3,-4
   35250:	10c8703a 	and	r4,r2,r3
   35254:	2447c83a 	sub	r3,r4,r17
   35258:	008003c4 	movi	r2,15
   3525c:	10fff70e 	bge	r2,r3,3523c <_malloc_r+0xd0>
   35260:	31bfffc4 	addi	r6,r6,-1
   35264:	32400044 	addi	r9,r6,1
   35268:	02800074 	movhi	r10,1
   3526c:	5281eb04 	addi	r10,r10,1964
   35270:	54000217 	ldw	r16,8(r10)
   35274:	8280a026 	beq	r16,r10,354f8 <_malloc_r+0x38c>
   35278:	80800117 	ldw	r2,4(r16)
   3527c:	00ffff04 	movi	r3,-4
   35280:	10ca703a 	and	r5,r2,r3
   35284:	2c4dc83a 	sub	r6,r5,r17
   35288:	008003c4 	movi	r2,15
   3528c:	11808316 	blt	r2,r6,3549c <_malloc_r+0x330>
   35290:	52800315 	stw	r10,12(r10)
   35294:	52800215 	stw	r10,8(r10)
   35298:	30002916 	blt	r6,zero,35340 <_malloc_r+0x1d4>
   3529c:	8147883a 	add	r3,r16,r5
   352a0:	18800117 	ldw	r2,4(r3)
   352a4:	9009883a 	mov	r4,r18
   352a8:	10800054 	ori	r2,r2,1
   352ac:	18800115 	stw	r2,4(r3)
   352b0:	003a3e00 	call	3a3e0 <__malloc_unlock>
   352b4:	80c00204 	addi	r3,r16,8
   352b8:	003fc006 	br	351bc <_malloc_r+0x50>
   352bc:	02c00074 	movhi	r11,1
   352c0:	5ac1e904 	addi	r11,r11,1956
   352c4:	8ac5883a 	add	r2,r17,r11
   352c8:	14000317 	ldw	r16,12(r2)
   352cc:	580f883a 	mov	r7,r11
   352d0:	8806d0fa 	srli	r3,r17,3
   352d4:	14006c26 	beq	r2,r16,35488 <_malloc_r+0x31c>
   352d8:	80c00117 	ldw	r3,4(r16)
   352dc:	00bfff04 	movi	r2,-4
   352e0:	81800317 	ldw	r6,12(r16)
   352e4:	1886703a 	and	r3,r3,r2
   352e8:	80c7883a 	add	r3,r16,r3
   352ec:	18800117 	ldw	r2,4(r3)
   352f0:	81400217 	ldw	r5,8(r16)
   352f4:	9009883a 	mov	r4,r18
   352f8:	10800054 	ori	r2,r2,1
   352fc:	18800115 	stw	r2,4(r3)
   35300:	31400215 	stw	r5,8(r6)
   35304:	29800315 	stw	r6,12(r5)
   35308:	003a3e00 	call	3a3e0 <__malloc_unlock>
   3530c:	80c00204 	addi	r3,r16,8
   35310:	003faa06 	br	351bc <_malloc_r+0x50>
   35314:	00800104 	movi	r2,4
   35318:	10c0052e 	bgeu	r2,r3,35330 <_malloc_r+0x1c4>
   3531c:	00800504 	movi	r2,20
   35320:	10c07836 	bltu	r2,r3,35504 <_malloc_r+0x398>
   35324:	198016c4 	addi	r6,r3,91
   35328:	300490fa 	slli	r2,r6,3
   3532c:	003fbc06 	br	35220 <_malloc_r+0xb4>
   35330:	8804d1ba 	srli	r2,r17,6
   35334:	11800e04 	addi	r6,r2,56
   35338:	300490fa 	slli	r2,r6,3
   3533c:	003fb806 	br	35220 <_malloc_r+0xb4>
   35340:	00807fc4 	movi	r2,511
   35344:	1140bb36 	bltu	r2,r5,35634 <_malloc_r+0x4c8>
   35348:	2806d0fa 	srli	r3,r5,3
   3534c:	573ffe04 	addi	fp,r10,-8
   35350:	00800044 	movi	r2,1
   35354:	180890fa 	slli	r4,r3,3
   35358:	1807d0ba 	srai	r3,r3,2
   3535c:	e1c00117 	ldw	r7,4(fp)
   35360:	5909883a 	add	r4,r11,r4
   35364:	21400217 	ldw	r5,8(r4)
   35368:	10c4983a 	sll	r2,r2,r3
   3536c:	81000315 	stw	r4,12(r16)
   35370:	81400215 	stw	r5,8(r16)
   35374:	388eb03a 	or	r7,r7,r2
   35378:	2c000315 	stw	r16,12(r5)
   3537c:	24000215 	stw	r16,8(r4)
   35380:	e1c00115 	stw	r7,4(fp)
   35384:	4807883a 	mov	r3,r9
   35388:	4800cd16 	blt	r9,zero,356c0 <_malloc_r+0x554>
   3538c:	1807d0ba 	srai	r3,r3,2
   35390:	00800044 	movi	r2,1
   35394:	10c8983a 	sll	r4,r2,r3
   35398:	39004436 	bltu	r7,r4,354ac <_malloc_r+0x340>
   3539c:	21c4703a 	and	r2,r4,r7
   353a0:	10000a1e 	bne	r2,zero,353cc <_malloc_r+0x260>
   353a4:	2109883a 	add	r4,r4,r4
   353a8:	00bfff04 	movi	r2,-4
   353ac:	4884703a 	and	r2,r9,r2
   353b0:	3906703a 	and	r3,r7,r4
   353b4:	12400104 	addi	r9,r2,4
   353b8:	1800041e 	bne	r3,zero,353cc <_malloc_r+0x260>
   353bc:	2109883a 	add	r4,r4,r4
   353c0:	3904703a 	and	r2,r7,r4
   353c4:	4a400104 	addi	r9,r9,4
   353c8:	103ffc26 	beq	r2,zero,353bc <_malloc_r+0x250>
   353cc:	480490fa 	slli	r2,r9,3
   353d0:	4819883a 	mov	r12,r9
   353d4:	023fff04 	movi	r8,-4
   353d8:	589b883a 	add	r13,r11,r2
   353dc:	6807883a 	mov	r3,r13
   353e0:	014003c4 	movi	r5,15
   353e4:	1c000317 	ldw	r16,12(r3)
   353e8:	1c00041e 	bne	r3,r16,353fc <_malloc_r+0x290>
   353ec:	0000a706 	br	3568c <_malloc_r+0x520>
   353f0:	3000ab0e 	bge	r6,zero,356a0 <_malloc_r+0x534>
   353f4:	84000317 	ldw	r16,12(r16)
   353f8:	1c00a426 	beq	r3,r16,3568c <_malloc_r+0x520>
   353fc:	80800117 	ldw	r2,4(r16)
   35400:	1204703a 	and	r2,r2,r8
   35404:	144dc83a 	sub	r6,r2,r17
   35408:	29bff90e 	bge	r5,r6,353f0 <_malloc_r+0x284>
   3540c:	81000317 	ldw	r4,12(r16)
   35410:	80c00217 	ldw	r3,8(r16)
   35414:	89400054 	ori	r5,r17,1
   35418:	8445883a 	add	r2,r16,r17
   3541c:	20c00215 	stw	r3,8(r4)
   35420:	19000315 	stw	r4,12(r3)
   35424:	81400115 	stw	r5,4(r16)
   35428:	1187883a 	add	r3,r2,r6
   3542c:	31000054 	ori	r4,r6,1
   35430:	50800315 	stw	r2,12(r10)
   35434:	50800215 	stw	r2,8(r10)
   35438:	19800015 	stw	r6,0(r3)
   3543c:	11000115 	stw	r4,4(r2)
   35440:	12800215 	stw	r10,8(r2)
   35444:	12800315 	stw	r10,12(r2)
   35448:	9009883a 	mov	r4,r18
   3544c:	003a3e00 	call	3a3e0 <__malloc_unlock>
   35450:	80c00204 	addi	r3,r16,8
   35454:	003f5906 	br	351bc <_malloc_r+0x50>
   35458:	8109883a 	add	r4,r16,r4
   3545c:	20800117 	ldw	r2,4(r4)
   35460:	80c00217 	ldw	r3,8(r16)
   35464:	81400317 	ldw	r5,12(r16)
   35468:	10800054 	ori	r2,r2,1
   3546c:	20800115 	stw	r2,4(r4)
   35470:	28c00215 	stw	r3,8(r5)
   35474:	19400315 	stw	r5,12(r3)
   35478:	9009883a 	mov	r4,r18
   3547c:	003a3e00 	call	3a3e0 <__malloc_unlock>
   35480:	80c00204 	addi	r3,r16,8
   35484:	003f4d06 	br	351bc <_malloc_r+0x50>
   35488:	80800204 	addi	r2,r16,8
   3548c:	14000317 	ldw	r16,12(r2)
   35490:	143f911e 	bne	r2,r16,352d8 <_malloc_r+0x16c>
   35494:	1a400084 	addi	r9,r3,2
   35498:	003f7306 	br	35268 <_malloc_r+0xfc>
   3549c:	88c00054 	ori	r3,r17,1
   354a0:	8445883a 	add	r2,r16,r17
   354a4:	80c00115 	stw	r3,4(r16)
   354a8:	003fdf06 	br	35428 <_malloc_r+0x2bc>
   354ac:	e4000217 	ldw	r16,8(fp)
   354b0:	00bfff04 	movi	r2,-4
   354b4:	80c00117 	ldw	r3,4(r16)
   354b8:	802d883a 	mov	r22,r16
   354bc:	18aa703a 	and	r21,r3,r2
   354c0:	ac401636 	bltu	r21,r17,3551c <_malloc_r+0x3b0>
   354c4:	ac49c83a 	sub	r4,r21,r17
   354c8:	008003c4 	movi	r2,15
   354cc:	1100130e 	bge	r2,r4,3551c <_malloc_r+0x3b0>
   354d0:	88800054 	ori	r2,r17,1
   354d4:	8447883a 	add	r3,r16,r17
   354d8:	80800115 	stw	r2,4(r16)
   354dc:	20800054 	ori	r2,r4,1
   354e0:	18800115 	stw	r2,4(r3)
   354e4:	e0c00215 	stw	r3,8(fp)
   354e8:	9009883a 	mov	r4,r18
   354ec:	003a3e00 	call	3a3e0 <__malloc_unlock>
   354f0:	80c00204 	addi	r3,r16,8
   354f4:	003f3106 	br	351bc <_malloc_r+0x50>
   354f8:	39c00117 	ldw	r7,4(r7)
   354fc:	573ffe04 	addi	fp,r10,-8
   35500:	003fa006 	br	35384 <_malloc_r+0x218>
   35504:	00801504 	movi	r2,84
   35508:	10c06736 	bltu	r2,r3,356a8 <_malloc_r+0x53c>
   3550c:	8804d33a 	srli	r2,r17,12
   35510:	11801b84 	addi	r6,r2,110
   35514:	300490fa 	slli	r2,r6,3
   35518:	003f4106 	br	35220 <_malloc_r+0xb4>
   3551c:	d0a01817 	ldw	r2,-32672(gp)
   35520:	d0e00517 	ldw	r3,-32748(gp)
   35524:	053fffc4 	movi	r20,-1
   35528:	10800404 	addi	r2,r2,16
   3552c:	88a7883a 	add	r19,r17,r2
   35530:	1d000326 	beq	r3,r20,35540 <_malloc_r+0x3d4>
   35534:	98c3ffc4 	addi	r3,r19,4095
   35538:	00bc0004 	movi	r2,-4096
   3553c:	18a6703a 	and	r19,r3,r2
   35540:	9009883a 	mov	r4,r18
   35544:	980b883a 	mov	r5,r19
   35548:	00372000 	call	37200 <_sbrk_r>
   3554c:	1009883a 	mov	r4,r2
   35550:	15000426 	beq	r2,r20,35564 <_malloc_r+0x3f8>
   35554:	854b883a 	add	r5,r16,r21
   35558:	1029883a 	mov	r20,r2
   3555c:	11405a2e 	bgeu	r2,r5,356c8 <_malloc_r+0x55c>
   35560:	87000c26 	beq	r16,fp,35594 <_malloc_r+0x428>
   35564:	e4000217 	ldw	r16,8(fp)
   35568:	80c00117 	ldw	r3,4(r16)
   3556c:	00bfff04 	movi	r2,-4
   35570:	1884703a 	and	r2,r3,r2
   35574:	14400336 	bltu	r2,r17,35584 <_malloc_r+0x418>
   35578:	1449c83a 	sub	r4,r2,r17
   3557c:	008003c4 	movi	r2,15
   35580:	113fd316 	blt	r2,r4,354d0 <_malloc_r+0x364>
   35584:	9009883a 	mov	r4,r18
   35588:	003a3e00 	call	3a3e0 <__malloc_unlock>
   3558c:	0007883a 	mov	r3,zero
   35590:	003f0a06 	br	351bc <_malloc_r+0x50>
   35594:	05c00074 	movhi	r23,1
   35598:	bdc78f04 	addi	r23,r23,7740
   3559c:	b8800017 	ldw	r2,0(r23)
   355a0:	988d883a 	add	r6,r19,r2
   355a4:	b9800015 	stw	r6,0(r23)
   355a8:	d0e00517 	ldw	r3,-32748(gp)
   355ac:	00bfffc4 	movi	r2,-1
   355b0:	18808e26 	beq	r3,r2,357ec <_malloc_r+0x680>
   355b4:	2145c83a 	sub	r2,r4,r5
   355b8:	3085883a 	add	r2,r6,r2
   355bc:	b8800015 	stw	r2,0(r23)
   355c0:	20c001cc 	andi	r3,r4,7
   355c4:	18005f1e 	bne	r3,zero,35744 <_malloc_r+0x5d8>
   355c8:	000b883a 	mov	r5,zero
   355cc:	a4c5883a 	add	r2,r20,r19
   355d0:	1083ffcc 	andi	r2,r2,4095
   355d4:	00c40004 	movi	r3,4096
   355d8:	1887c83a 	sub	r3,r3,r2
   355dc:	28e7883a 	add	r19,r5,r3
   355e0:	9009883a 	mov	r4,r18
   355e4:	980b883a 	mov	r5,r19
   355e8:	00372000 	call	37200 <_sbrk_r>
   355ec:	1007883a 	mov	r3,r2
   355f0:	00bfffc4 	movi	r2,-1
   355f4:	18807a26 	beq	r3,r2,357e0 <_malloc_r+0x674>
   355f8:	1d05c83a 	sub	r2,r3,r20
   355fc:	9885883a 	add	r2,r19,r2
   35600:	10c00054 	ori	r3,r2,1
   35604:	b8800017 	ldw	r2,0(r23)
   35608:	a021883a 	mov	r16,r20
   3560c:	a0c00115 	stw	r3,4(r20)
   35610:	9885883a 	add	r2,r19,r2
   35614:	b8800015 	stw	r2,0(r23)
   35618:	e5000215 	stw	r20,8(fp)
   3561c:	b7003626 	beq	r22,fp,356f8 <_malloc_r+0x58c>
   35620:	018003c4 	movi	r6,15
   35624:	35404b36 	bltu	r6,r21,35754 <_malloc_r+0x5e8>
   35628:	00800044 	movi	r2,1
   3562c:	a0800115 	stw	r2,4(r20)
   35630:	003fcd06 	br	35568 <_malloc_r+0x3fc>
   35634:	2808d27a 	srli	r4,r5,9
   35638:	2000371e 	bne	r4,zero,35718 <_malloc_r+0x5ac>
   3563c:	2808d0fa 	srli	r4,r5,3
   35640:	200690fa 	slli	r3,r4,3
   35644:	1ad1883a 	add	r8,r3,r11
   35648:	41800217 	ldw	r6,8(r8)
   3564c:	41805b26 	beq	r8,r6,357bc <_malloc_r+0x650>
   35650:	30800117 	ldw	r2,4(r6)
   35654:	00ffff04 	movi	r3,-4
   35658:	10c4703a 	and	r2,r2,r3
   3565c:	2880022e 	bgeu	r5,r2,35668 <_malloc_r+0x4fc>
   35660:	31800217 	ldw	r6,8(r6)
   35664:	41bffa1e 	bne	r8,r6,35650 <_malloc_r+0x4e4>
   35668:	32000317 	ldw	r8,12(r6)
   3566c:	39c00117 	ldw	r7,4(r7)
   35670:	82000315 	stw	r8,12(r16)
   35674:	81800215 	stw	r6,8(r16)
   35678:	07000074 	movhi	fp,1
   3567c:	e701e904 	addi	fp,fp,1956
   35680:	34000315 	stw	r16,12(r6)
   35684:	44000215 	stw	r16,8(r8)
   35688:	003f3e06 	br	35384 <_malloc_r+0x218>
   3568c:	63000044 	addi	r12,r12,1
   35690:	608000cc 	andi	r2,r12,3
   35694:	10005d26 	beq	r2,zero,3580c <_malloc_r+0x6a0>
   35698:	18c00204 	addi	r3,r3,8
   3569c:	003f5106 	br	353e4 <_malloc_r+0x278>
   356a0:	8089883a 	add	r4,r16,r2
   356a4:	003f6d06 	br	3545c <_malloc_r+0x2f0>
   356a8:	00805504 	movi	r2,340
   356ac:	10c02036 	bltu	r2,r3,35730 <_malloc_r+0x5c4>
   356b0:	8804d3fa 	srli	r2,r17,15
   356b4:	11801dc4 	addi	r6,r2,119
   356b8:	300490fa 	slli	r2,r6,3
   356bc:	003ed806 	br	35220 <_malloc_r+0xb4>
   356c0:	48c000c4 	addi	r3,r9,3
   356c4:	003f3106 	br	3538c <_malloc_r+0x220>
   356c8:	05c00074 	movhi	r23,1
   356cc:	bdc78f04 	addi	r23,r23,7740
   356d0:	b8800017 	ldw	r2,0(r23)
   356d4:	988d883a 	add	r6,r19,r2
   356d8:	b9800015 	stw	r6,0(r23)
   356dc:	293fb21e 	bne	r5,r4,355a8 <_malloc_r+0x43c>
   356e0:	2083ffcc 	andi	r2,r4,4095
   356e4:	103fb01e 	bne	r2,zero,355a8 <_malloc_r+0x43c>
   356e8:	e4000217 	ldw	r16,8(fp)
   356ec:	9d45883a 	add	r2,r19,r21
   356f0:	10800054 	ori	r2,r2,1
   356f4:	80800115 	stw	r2,4(r16)
   356f8:	b8c00017 	ldw	r3,0(r23)
   356fc:	d0a01917 	ldw	r2,-32668(gp)
   35700:	10c0012e 	bgeu	r2,r3,35708 <_malloc_r+0x59c>
   35704:	d0e01915 	stw	r3,-32668(gp)
   35708:	d0a01a17 	ldw	r2,-32664(gp)
   3570c:	10ff962e 	bgeu	r2,r3,35568 <_malloc_r+0x3fc>
   35710:	d0e01a15 	stw	r3,-32664(gp)
   35714:	003f9406 	br	35568 <_malloc_r+0x3fc>
   35718:	00800104 	movi	r2,4
   3571c:	11001e36 	bltu	r2,r4,35798 <_malloc_r+0x62c>
   35720:	2804d1ba 	srli	r2,r5,6
   35724:	11000e04 	addi	r4,r2,56
   35728:	200690fa 	slli	r3,r4,3
   3572c:	003fc506 	br	35644 <_malloc_r+0x4d8>
   35730:	00815504 	movi	r2,1364
   35734:	10c01d2e 	bgeu	r2,r3,357ac <_malloc_r+0x640>
   35738:	01801f84 	movi	r6,126
   3573c:	0080fc04 	movi	r2,1008
   35740:	003eb706 	br	35220 <_malloc_r+0xb4>
   35744:	00800204 	movi	r2,8
   35748:	10cbc83a 	sub	r5,r2,r3
   3574c:	2169883a 	add	r20,r4,r5
   35750:	003f9e06 	br	355cc <_malloc_r+0x460>
   35754:	00bffe04 	movi	r2,-8
   35758:	a93ffd04 	addi	r4,r21,-12
   3575c:	2088703a 	and	r4,r4,r2
   35760:	b10b883a 	add	r5,r22,r4
   35764:	00c00144 	movi	r3,5
   35768:	28c00215 	stw	r3,8(r5)
   3576c:	28c00115 	stw	r3,4(r5)
   35770:	b0800117 	ldw	r2,4(r22)
   35774:	1080004c 	andi	r2,r2,1
   35778:	2084b03a 	or	r2,r4,r2
   3577c:	b0800115 	stw	r2,4(r22)
   35780:	313fdd2e 	bgeu	r6,r4,356f8 <_malloc_r+0x58c>
   35784:	b1400204 	addi	r5,r22,8
   35788:	9009883a 	mov	r4,r18
   3578c:	00345e40 	call	345e4 <_free_r>
   35790:	e4000217 	ldw	r16,8(fp)
   35794:	003fd806 	br	356f8 <_malloc_r+0x58c>
   35798:	00800504 	movi	r2,20
   3579c:	11001536 	bltu	r2,r4,357f4 <_malloc_r+0x688>
   357a0:	210016c4 	addi	r4,r4,91
   357a4:	200690fa 	slli	r3,r4,3
   357a8:	003fa606 	br	35644 <_malloc_r+0x4d8>
   357ac:	8804d4ba 	srli	r2,r17,18
   357b0:	11801f04 	addi	r6,r2,124
   357b4:	300490fa 	slli	r2,r6,3
   357b8:	003e9906 	br	35220 <_malloc_r+0xb4>
   357bc:	2009d0ba 	srai	r4,r4,2
   357c0:	01400074 	movhi	r5,1
   357c4:	2941e904 	addi	r5,r5,1956
   357c8:	00c00044 	movi	r3,1
   357cc:	28800117 	ldw	r2,4(r5)
   357d0:	1906983a 	sll	r3,r3,r4
   357d4:	10c4b03a 	or	r2,r2,r3
   357d8:	28800115 	stw	r2,4(r5)
   357dc:	003fa306 	br	3566c <_malloc_r+0x500>
   357e0:	0027883a 	mov	r19,zero
   357e4:	00c00044 	movi	r3,1
   357e8:	003f8606 	br	35604 <_malloc_r+0x498>
   357ec:	d1200515 	stw	r4,-32748(gp)
   357f0:	003f7306 	br	355c0 <_malloc_r+0x454>
   357f4:	00801504 	movi	r2,84
   357f8:	11001936 	bltu	r2,r4,35860 <_malloc_r+0x6f4>
   357fc:	2804d33a 	srli	r2,r5,12
   35800:	11001b84 	addi	r4,r2,110
   35804:	200690fa 	slli	r3,r4,3
   35808:	003f8e06 	br	35644 <_malloc_r+0x4d8>
   3580c:	480b883a 	mov	r5,r9
   35810:	6807883a 	mov	r3,r13
   35814:	288000cc 	andi	r2,r5,3
   35818:	18fffe04 	addi	r3,r3,-8
   3581c:	297fffc4 	addi	r5,r5,-1
   35820:	10001526 	beq	r2,zero,35878 <_malloc_r+0x70c>
   35824:	18800217 	ldw	r2,8(r3)
   35828:	10fffa26 	beq	r2,r3,35814 <_malloc_r+0x6a8>
   3582c:	2109883a 	add	r4,r4,r4
   35830:	393f1e36 	bltu	r7,r4,354ac <_malloc_r+0x340>
   35834:	203f1d26 	beq	r4,zero,354ac <_malloc_r+0x340>
   35838:	21c4703a 	and	r2,r4,r7
   3583c:	10000226 	beq	r2,zero,35848 <_malloc_r+0x6dc>
   35840:	6013883a 	mov	r9,r12
   35844:	003ee106 	br	353cc <_malloc_r+0x260>
   35848:	2109883a 	add	r4,r4,r4
   3584c:	3904703a 	and	r2,r7,r4
   35850:	63000104 	addi	r12,r12,4
   35854:	103ffc26 	beq	r2,zero,35848 <_malloc_r+0x6dc>
   35858:	6013883a 	mov	r9,r12
   3585c:	003edb06 	br	353cc <_malloc_r+0x260>
   35860:	00805504 	movi	r2,340
   35864:	11000836 	bltu	r2,r4,35888 <_malloc_r+0x71c>
   35868:	2804d3fa 	srli	r2,r5,15
   3586c:	11001dc4 	addi	r4,r2,119
   35870:	200690fa 	slli	r3,r4,3
   35874:	003f7306 	br	35644 <_malloc_r+0x4d8>
   35878:	0104303a 	nor	r2,zero,r4
   3587c:	388e703a 	and	r7,r7,r2
   35880:	e1c00115 	stw	r7,4(fp)
   35884:	003fe906 	br	3582c <_malloc_r+0x6c0>
   35888:	00815504 	movi	r2,1364
   3588c:	1100032e 	bgeu	r2,r4,3589c <_malloc_r+0x730>
   35890:	01001f84 	movi	r4,126
   35894:	00c0fc04 	movi	r3,1008
   35898:	003f6a06 	br	35644 <_malloc_r+0x4d8>
   3589c:	2804d4ba 	srli	r2,r5,18
   358a0:	11001f04 	addi	r4,r2,124
   358a4:	200690fa 	slli	r3,r4,3
   358a8:	003f6606 	br	35644 <_malloc_r+0x4d8>

000358ac <memchr>:
   358ac:	008000c4 	movi	r2,3
   358b0:	29403fcc 	andi	r5,r5,255
   358b4:	2007883a 	mov	r3,r4
   358b8:	1180022e 	bgeu	r2,r6,358c4 <memchr+0x18>
   358bc:	2084703a 	and	r2,r4,r2
   358c0:	10000b26 	beq	r2,zero,358f0 <memchr+0x44>
   358c4:	313fffc4 	addi	r4,r6,-1
   358c8:	3000051e 	bne	r6,zero,358e0 <memchr+0x34>
   358cc:	00002c06 	br	35980 <memchr+0xd4>
   358d0:	213fffc4 	addi	r4,r4,-1
   358d4:	00bfffc4 	movi	r2,-1
   358d8:	18c00044 	addi	r3,r3,1
   358dc:	20802826 	beq	r4,r2,35980 <memchr+0xd4>
   358e0:	18800003 	ldbu	r2,0(r3)
   358e4:	28bffa1e 	bne	r5,r2,358d0 <memchr+0x24>
   358e8:	1805883a 	mov	r2,r3
   358ec:	f800283a 	ret
   358f0:	0011883a 	mov	r8,zero
   358f4:	0007883a 	mov	r3,zero
   358f8:	01c00104 	movi	r7,4
   358fc:	4004923a 	slli	r2,r8,8
   35900:	18c00044 	addi	r3,r3,1
   35904:	1151883a 	add	r8,r2,r5
   35908:	19fffc1e 	bne	r3,r7,358fc <memchr+0x50>
   3590c:	02bfbff4 	movhi	r10,65279
   35910:	52bfbfc4 	addi	r10,r10,-257
   35914:	02602074 	movhi	r9,32897
   35918:	4a602004 	addi	r9,r9,-32640
   3591c:	02c000c4 	movi	r11,3
   35920:	20800017 	ldw	r2,0(r4)
   35924:	31bfff04 	addi	r6,r6,-4
   35928:	200f883a 	mov	r7,r4
   3592c:	1204f03a 	xor	r2,r2,r8
   35930:	1287883a 	add	r3,r2,r10
   35934:	1a46703a 	and	r3,r3,r9
   35938:	0084303a 	nor	r2,zero,r2
   3593c:	10c4703a 	and	r2,r2,r3
   35940:	10000b26 	beq	r2,zero,35970 <memchr+0xc4>
   35944:	20800003 	ldbu	r2,0(r4)
   35948:	28800f26 	beq	r5,r2,35988 <memchr+0xdc>
   3594c:	20800043 	ldbu	r2,1(r4)
   35950:	21c00044 	addi	r7,r4,1
   35954:	28800c26 	beq	r5,r2,35988 <memchr+0xdc>
   35958:	20800083 	ldbu	r2,2(r4)
   3595c:	21c00084 	addi	r7,r4,2
   35960:	28800926 	beq	r5,r2,35988 <memchr+0xdc>
   35964:	208000c3 	ldbu	r2,3(r4)
   35968:	21c000c4 	addi	r7,r4,3
   3596c:	28800626 	beq	r5,r2,35988 <memchr+0xdc>
   35970:	21000104 	addi	r4,r4,4
   35974:	59bfea36 	bltu	r11,r6,35920 <memchr+0x74>
   35978:	2007883a 	mov	r3,r4
   3597c:	003fd106 	br	358c4 <memchr+0x18>
   35980:	0005883a 	mov	r2,zero
   35984:	f800283a 	ret
   35988:	3805883a 	mov	r2,r7
   3598c:	f800283a 	ret

00035990 <memcpy>:
   35990:	01c003c4 	movi	r7,15
   35994:	2007883a 	mov	r3,r4
   35998:	3980032e 	bgeu	r7,r6,359a8 <memcpy+0x18>
   3599c:	2904b03a 	or	r2,r5,r4
   359a0:	108000cc 	andi	r2,r2,3
   359a4:	10000926 	beq	r2,zero,359cc <memcpy+0x3c>
   359a8:	30000626 	beq	r6,zero,359c4 <memcpy+0x34>
   359ac:	30cd883a 	add	r6,r6,r3
   359b0:	28800003 	ldbu	r2,0(r5)
   359b4:	29400044 	addi	r5,r5,1
   359b8:	18800005 	stb	r2,0(r3)
   359bc:	18c00044 	addi	r3,r3,1
   359c0:	30fffb1e 	bne	r6,r3,359b0 <memcpy+0x20>
   359c4:	2005883a 	mov	r2,r4
   359c8:	f800283a 	ret
   359cc:	3811883a 	mov	r8,r7
   359d0:	200f883a 	mov	r7,r4
   359d4:	28c00017 	ldw	r3,0(r5)
   359d8:	31bffc04 	addi	r6,r6,-16
   359dc:	38c00015 	stw	r3,0(r7)
   359e0:	28800117 	ldw	r2,4(r5)
   359e4:	38800115 	stw	r2,4(r7)
   359e8:	28c00217 	ldw	r3,8(r5)
   359ec:	38c00215 	stw	r3,8(r7)
   359f0:	28800317 	ldw	r2,12(r5)
   359f4:	29400404 	addi	r5,r5,16
   359f8:	38800315 	stw	r2,12(r7)
   359fc:	39c00404 	addi	r7,r7,16
   35a00:	41bff436 	bltu	r8,r6,359d4 <memcpy+0x44>
   35a04:	008000c4 	movi	r2,3
   35a08:	1180072e 	bgeu	r2,r6,35a28 <memcpy+0x98>
   35a0c:	1007883a 	mov	r3,r2
   35a10:	28800017 	ldw	r2,0(r5)
   35a14:	31bfff04 	addi	r6,r6,-4
   35a18:	29400104 	addi	r5,r5,4
   35a1c:	38800015 	stw	r2,0(r7)
   35a20:	39c00104 	addi	r7,r7,4
   35a24:	19bffa36 	bltu	r3,r6,35a10 <memcpy+0x80>
   35a28:	3807883a 	mov	r3,r7
   35a2c:	003fde06 	br	359a8 <memcpy+0x18>

00035a30 <memmove>:
   35a30:	2807883a 	mov	r3,r5
   35a34:	2011883a 	mov	r8,r4
   35a38:	29000c2e 	bgeu	r5,r4,35a6c <memmove+0x3c>
   35a3c:	298f883a 	add	r7,r5,r6
   35a40:	21c00a2e 	bgeu	r4,r7,35a6c <memmove+0x3c>
   35a44:	30000726 	beq	r6,zero,35a64 <memmove+0x34>
   35a48:	2187883a 	add	r3,r4,r6
   35a4c:	198dc83a 	sub	r6,r3,r6
   35a50:	39ffffc4 	addi	r7,r7,-1
   35a54:	38800003 	ldbu	r2,0(r7)
   35a58:	18ffffc4 	addi	r3,r3,-1
   35a5c:	18800005 	stb	r2,0(r3)
   35a60:	19bffb1e 	bne	r3,r6,35a50 <memmove+0x20>
   35a64:	2005883a 	mov	r2,r4
   35a68:	f800283a 	ret
   35a6c:	01c003c4 	movi	r7,15
   35a70:	39800a36 	bltu	r7,r6,35a9c <memmove+0x6c>
   35a74:	303ffb26 	beq	r6,zero,35a64 <memmove+0x34>
   35a78:	400f883a 	mov	r7,r8
   35a7c:	320d883a 	add	r6,r6,r8
   35a80:	28800003 	ldbu	r2,0(r5)
   35a84:	29400044 	addi	r5,r5,1
   35a88:	38800005 	stb	r2,0(r7)
   35a8c:	39c00044 	addi	r7,r7,1
   35a90:	39bffb1e 	bne	r7,r6,35a80 <memmove+0x50>
   35a94:	2005883a 	mov	r2,r4
   35a98:	f800283a 	ret
   35a9c:	1904b03a 	or	r2,r3,r4
   35aa0:	108000cc 	andi	r2,r2,3
   35aa4:	103ff31e 	bne	r2,zero,35a74 <memmove+0x44>
   35aa8:	3811883a 	mov	r8,r7
   35aac:	180b883a 	mov	r5,r3
   35ab0:	200f883a 	mov	r7,r4
   35ab4:	28c00017 	ldw	r3,0(r5)
   35ab8:	31bffc04 	addi	r6,r6,-16
   35abc:	38c00015 	stw	r3,0(r7)
   35ac0:	28800117 	ldw	r2,4(r5)
   35ac4:	38800115 	stw	r2,4(r7)
   35ac8:	28c00217 	ldw	r3,8(r5)
   35acc:	38c00215 	stw	r3,8(r7)
   35ad0:	28800317 	ldw	r2,12(r5)
   35ad4:	29400404 	addi	r5,r5,16
   35ad8:	38800315 	stw	r2,12(r7)
   35adc:	39c00404 	addi	r7,r7,16
   35ae0:	41bff436 	bltu	r8,r6,35ab4 <memmove+0x84>
   35ae4:	008000c4 	movi	r2,3
   35ae8:	1180072e 	bgeu	r2,r6,35b08 <memmove+0xd8>
   35aec:	1007883a 	mov	r3,r2
   35af0:	28800017 	ldw	r2,0(r5)
   35af4:	31bfff04 	addi	r6,r6,-4
   35af8:	29400104 	addi	r5,r5,4
   35afc:	38800015 	stw	r2,0(r7)
   35b00:	39c00104 	addi	r7,r7,4
   35b04:	19bffa36 	bltu	r3,r6,35af0 <memmove+0xc0>
   35b08:	3811883a 	mov	r8,r7
   35b0c:	003fd906 	br	35a74 <memmove+0x44>

00035b10 <memset>:
   35b10:	008000c4 	movi	r2,3
   35b14:	29403fcc 	andi	r5,r5,255
   35b18:	2007883a 	mov	r3,r4
   35b1c:	1180022e 	bgeu	r2,r6,35b28 <memset+0x18>
   35b20:	2084703a 	and	r2,r4,r2
   35b24:	10000826 	beq	r2,zero,35b48 <memset+0x38>
   35b28:	30000526 	beq	r6,zero,35b40 <memset+0x30>
   35b2c:	2805883a 	mov	r2,r5
   35b30:	30cd883a 	add	r6,r6,r3
   35b34:	18800005 	stb	r2,0(r3)
   35b38:	18c00044 	addi	r3,r3,1
   35b3c:	19bffd1e 	bne	r3,r6,35b34 <memset+0x24>
   35b40:	2005883a 	mov	r2,r4
   35b44:	f800283a 	ret
   35b48:	2804923a 	slli	r2,r5,8
   35b4c:	020003c4 	movi	r8,15
   35b50:	200f883a 	mov	r7,r4
   35b54:	2884b03a 	or	r2,r5,r2
   35b58:	1006943a 	slli	r3,r2,16
   35b5c:	10c6b03a 	or	r3,r2,r3
   35b60:	41800a2e 	bgeu	r8,r6,35b8c <memset+0x7c>
   35b64:	4005883a 	mov	r2,r8
   35b68:	31bffc04 	addi	r6,r6,-16
   35b6c:	38c00015 	stw	r3,0(r7)
   35b70:	38c00115 	stw	r3,4(r7)
   35b74:	38c00215 	stw	r3,8(r7)
   35b78:	38c00315 	stw	r3,12(r7)
   35b7c:	39c00404 	addi	r7,r7,16
   35b80:	11bff936 	bltu	r2,r6,35b68 <memset+0x58>
   35b84:	008000c4 	movi	r2,3
   35b88:	1180052e 	bgeu	r2,r6,35ba0 <memset+0x90>
   35b8c:	31bfff04 	addi	r6,r6,-4
   35b90:	008000c4 	movi	r2,3
   35b94:	38c00015 	stw	r3,0(r7)
   35b98:	39c00104 	addi	r7,r7,4
   35b9c:	11bffb36 	bltu	r2,r6,35b8c <memset+0x7c>
   35ba0:	3807883a 	mov	r3,r7
   35ba4:	003fe006 	br	35b28 <memset+0x18>

00035ba8 <_Bfree>:
   35ba8:	28000826 	beq	r5,zero,35bcc <_Bfree+0x24>
   35bac:	28800117 	ldw	r2,4(r5)
   35bb0:	21001317 	ldw	r4,76(r4)
   35bb4:	1085883a 	add	r2,r2,r2
   35bb8:	1085883a 	add	r2,r2,r2
   35bbc:	1105883a 	add	r2,r2,r4
   35bc0:	10c00017 	ldw	r3,0(r2)
   35bc4:	28c00015 	stw	r3,0(r5)
   35bc8:	11400015 	stw	r5,0(r2)
   35bcc:	f800283a 	ret

00035bd0 <__hi0bits>:
   35bd0:	20bfffec 	andhi	r2,r4,65535
   35bd4:	10001426 	beq	r2,zero,35c28 <__hi0bits+0x58>
   35bd8:	0007883a 	mov	r3,zero
   35bdc:	20bfc02c 	andhi	r2,r4,65280
   35be0:	1000021e 	bne	r2,zero,35bec <__hi0bits+0x1c>
   35be4:	2008923a 	slli	r4,r4,8
   35be8:	18c00204 	addi	r3,r3,8
   35bec:	20bc002c 	andhi	r2,r4,61440
   35bf0:	1000021e 	bne	r2,zero,35bfc <__hi0bits+0x2c>
   35bf4:	2008913a 	slli	r4,r4,4
   35bf8:	18c00104 	addi	r3,r3,4
   35bfc:	20b0002c 	andhi	r2,r4,49152
   35c00:	1000031e 	bne	r2,zero,35c10 <__hi0bits+0x40>
   35c04:	2105883a 	add	r2,r4,r4
   35c08:	18c00084 	addi	r3,r3,2
   35c0c:	1089883a 	add	r4,r2,r2
   35c10:	20000316 	blt	r4,zero,35c20 <__hi0bits+0x50>
   35c14:	2090002c 	andhi	r2,r4,16384
   35c18:	10000626 	beq	r2,zero,35c34 <__hi0bits+0x64>
   35c1c:	18c00044 	addi	r3,r3,1
   35c20:	1805883a 	mov	r2,r3
   35c24:	f800283a 	ret
   35c28:	2008943a 	slli	r4,r4,16
   35c2c:	00c00404 	movi	r3,16
   35c30:	003fea06 	br	35bdc <__hi0bits+0xc>
   35c34:	00c00804 	movi	r3,32
   35c38:	1805883a 	mov	r2,r3
   35c3c:	f800283a 	ret

00035c40 <__lo0bits>:
   35c40:	20c00017 	ldw	r3,0(r4)
   35c44:	188001cc 	andi	r2,r3,7
   35c48:	10000a26 	beq	r2,zero,35c74 <__lo0bits+0x34>
   35c4c:	1880004c 	andi	r2,r3,1
   35c50:	1005003a 	cmpeq	r2,r2,zero
   35c54:	10002126 	beq	r2,zero,35cdc <__lo0bits+0x9c>
   35c58:	1880008c 	andi	r2,r3,2
   35c5c:	1000251e 	bne	r2,zero,35cf4 <__lo0bits+0xb4>
   35c60:	1804d0ba 	srli	r2,r3,2
   35c64:	01400084 	movi	r5,2
   35c68:	20800015 	stw	r2,0(r4)
   35c6c:	2805883a 	mov	r2,r5
   35c70:	f800283a 	ret
   35c74:	18bfffcc 	andi	r2,r3,65535
   35c78:	10001526 	beq	r2,zero,35cd0 <__lo0bits+0x90>
   35c7c:	000b883a 	mov	r5,zero
   35c80:	18803fcc 	andi	r2,r3,255
   35c84:	1000021e 	bne	r2,zero,35c90 <__lo0bits+0x50>
   35c88:	1806d23a 	srli	r3,r3,8
   35c8c:	29400204 	addi	r5,r5,8
   35c90:	188003cc 	andi	r2,r3,15
   35c94:	1000021e 	bne	r2,zero,35ca0 <__lo0bits+0x60>
   35c98:	1806d13a 	srli	r3,r3,4
   35c9c:	29400104 	addi	r5,r5,4
   35ca0:	188000cc 	andi	r2,r3,3
   35ca4:	1000021e 	bne	r2,zero,35cb0 <__lo0bits+0x70>
   35ca8:	1806d0ba 	srli	r3,r3,2
   35cac:	29400084 	addi	r5,r5,2
   35cb0:	1880004c 	andi	r2,r3,1
   35cb4:	1000031e 	bne	r2,zero,35cc4 <__lo0bits+0x84>
   35cb8:	1806d07a 	srli	r3,r3,1
   35cbc:	18000a26 	beq	r3,zero,35ce8 <__lo0bits+0xa8>
   35cc0:	29400044 	addi	r5,r5,1
   35cc4:	2805883a 	mov	r2,r5
   35cc8:	20c00015 	stw	r3,0(r4)
   35ccc:	f800283a 	ret
   35cd0:	1806d43a 	srli	r3,r3,16
   35cd4:	01400404 	movi	r5,16
   35cd8:	003fe906 	br	35c80 <__lo0bits+0x40>
   35cdc:	000b883a 	mov	r5,zero
   35ce0:	2805883a 	mov	r2,r5
   35ce4:	f800283a 	ret
   35ce8:	01400804 	movi	r5,32
   35cec:	2805883a 	mov	r2,r5
   35cf0:	f800283a 	ret
   35cf4:	1804d07a 	srli	r2,r3,1
   35cf8:	01400044 	movi	r5,1
   35cfc:	20800015 	stw	r2,0(r4)
   35d00:	003fda06 	br	35c6c <__lo0bits+0x2c>

00035d04 <__mcmp>:
   35d04:	20800417 	ldw	r2,16(r4)
   35d08:	28c00417 	ldw	r3,16(r5)
   35d0c:	10cfc83a 	sub	r7,r2,r3
   35d10:	38000c1e 	bne	r7,zero,35d44 <__mcmp+0x40>
   35d14:	18c5883a 	add	r2,r3,r3
   35d18:	1085883a 	add	r2,r2,r2
   35d1c:	10c00504 	addi	r3,r2,20
   35d20:	21000504 	addi	r4,r4,20
   35d24:	28cb883a 	add	r5,r5,r3
   35d28:	2085883a 	add	r2,r4,r2
   35d2c:	10bfff04 	addi	r2,r2,-4
   35d30:	297fff04 	addi	r5,r5,-4
   35d34:	11800017 	ldw	r6,0(r2)
   35d38:	28c00017 	ldw	r3,0(r5)
   35d3c:	30c0031e 	bne	r6,r3,35d4c <__mcmp+0x48>
   35d40:	20bffa36 	bltu	r4,r2,35d2c <__mcmp+0x28>
   35d44:	3805883a 	mov	r2,r7
   35d48:	f800283a 	ret
   35d4c:	30c00336 	bltu	r6,r3,35d5c <__mcmp+0x58>
   35d50:	01c00044 	movi	r7,1
   35d54:	3805883a 	mov	r2,r7
   35d58:	f800283a 	ret
   35d5c:	01ffffc4 	movi	r7,-1
   35d60:	003ff806 	br	35d44 <__mcmp+0x40>

00035d64 <__ulp>:
   35d64:	295ffc2c 	andhi	r5,r5,32752
   35d68:	013f3034 	movhi	r4,64704
   35d6c:	290b883a 	add	r5,r5,r4
   35d70:	0145c83a 	sub	r2,zero,r5
   35d74:	1007d53a 	srai	r3,r2,20
   35d78:	000d883a 	mov	r6,zero
   35d7c:	0140040e 	bge	zero,r5,35d90 <__ulp+0x2c>
   35d80:	280f883a 	mov	r7,r5
   35d84:	3807883a 	mov	r3,r7
   35d88:	3005883a 	mov	r2,r6
   35d8c:	f800283a 	ret
   35d90:	008004c4 	movi	r2,19
   35d94:	193ffb04 	addi	r4,r3,-20
   35d98:	10c00c0e 	bge	r2,r3,35dcc <__ulp+0x68>
   35d9c:	008007c4 	movi	r2,31
   35da0:	1107c83a 	sub	r3,r2,r4
   35da4:	00800784 	movi	r2,30
   35da8:	01400044 	movi	r5,1
   35dac:	11000216 	blt	r2,r4,35db8 <__ulp+0x54>
   35db0:	00800044 	movi	r2,1
   35db4:	10ca983a 	sll	r5,r2,r3
   35db8:	000f883a 	mov	r7,zero
   35dbc:	280d883a 	mov	r6,r5
   35dc0:	3807883a 	mov	r3,r7
   35dc4:	3005883a 	mov	r2,r6
   35dc8:	f800283a 	ret
   35dcc:	00800234 	movhi	r2,8
   35dd0:	10cfd83a 	sra	r7,r2,r3
   35dd4:	000d883a 	mov	r6,zero
   35dd8:	3005883a 	mov	r2,r6
   35ddc:	3807883a 	mov	r3,r7
   35de0:	f800283a 	ret

00035de4 <__b2d>:
   35de4:	20800417 	ldw	r2,16(r4)
   35de8:	defff904 	addi	sp,sp,-28
   35dec:	dd000415 	stw	r20,16(sp)
   35df0:	1085883a 	add	r2,r2,r2
   35df4:	25000504 	addi	r20,r4,20
   35df8:	1085883a 	add	r2,r2,r2
   35dfc:	dc000015 	stw	r16,0(sp)
   35e00:	a0a1883a 	add	r16,r20,r2
   35e04:	dd400515 	stw	r21,20(sp)
   35e08:	857fff17 	ldw	r21,-4(r16)
   35e0c:	dc400115 	stw	r17,4(sp)
   35e10:	dfc00615 	stw	ra,24(sp)
   35e14:	a809883a 	mov	r4,r21
   35e18:	2823883a 	mov	r17,r5
   35e1c:	dcc00315 	stw	r19,12(sp)
   35e20:	dc800215 	stw	r18,8(sp)
   35e24:	0035bd00 	call	35bd0 <__hi0bits>
   35e28:	100b883a 	mov	r5,r2
   35e2c:	00800804 	movi	r2,32
   35e30:	1145c83a 	sub	r2,r2,r5
   35e34:	88800015 	stw	r2,0(r17)
   35e38:	00800284 	movi	r2,10
   35e3c:	80ffff04 	addi	r3,r16,-4
   35e40:	11401416 	blt	r2,r5,35e94 <__b2d+0xb0>
   35e44:	008002c4 	movi	r2,11
   35e48:	1149c83a 	sub	r4,r2,r5
   35e4c:	a0c02736 	bltu	r20,r3,35eec <__b2d+0x108>
   35e50:	000d883a 	mov	r6,zero
   35e54:	28800544 	addi	r2,r5,21
   35e58:	a906d83a 	srl	r3,r21,r4
   35e5c:	a884983a 	sll	r2,r21,r2
   35e60:	1ccffc34 	orhi	r19,r3,16368
   35e64:	11a4b03a 	or	r18,r2,r6
   35e68:	9005883a 	mov	r2,r18
   35e6c:	9807883a 	mov	r3,r19
   35e70:	dfc00617 	ldw	ra,24(sp)
   35e74:	dd400517 	ldw	r21,20(sp)
   35e78:	dd000417 	ldw	r20,16(sp)
   35e7c:	dcc00317 	ldw	r19,12(sp)
   35e80:	dc800217 	ldw	r18,8(sp)
   35e84:	dc400117 	ldw	r17,4(sp)
   35e88:	dc000017 	ldw	r16,0(sp)
   35e8c:	dec00704 	addi	sp,sp,28
   35e90:	f800283a 	ret
   35e94:	a0c00e36 	bltu	r20,r3,35ed0 <__b2d+0xec>
   35e98:	293ffd44 	addi	r4,r5,-11
   35e9c:	000d883a 	mov	r6,zero
   35ea0:	20000f26 	beq	r4,zero,35ee0 <__b2d+0xfc>
   35ea4:	00800804 	movi	r2,32
   35ea8:	110bc83a 	sub	r5,r2,r4
   35eac:	a0c01236 	bltu	r20,r3,35ef8 <__b2d+0x114>
   35eb0:	000f883a 	mov	r7,zero
   35eb4:	a904983a 	sll	r2,r21,r4
   35eb8:	3146d83a 	srl	r3,r6,r5
   35ebc:	3108983a 	sll	r4,r6,r4
   35ec0:	108ffc34 	orhi	r2,r2,16368
   35ec4:	18a6b03a 	or	r19,r3,r2
   35ec8:	3924b03a 	or	r18,r7,r4
   35ecc:	003fe606 	br	35e68 <__b2d+0x84>
   35ed0:	293ffd44 	addi	r4,r5,-11
   35ed4:	81bffe17 	ldw	r6,-8(r16)
   35ed8:	80fffe04 	addi	r3,r16,-8
   35edc:	203ff11e 	bne	r4,zero,35ea4 <__b2d+0xc0>
   35ee0:	accffc34 	orhi	r19,r21,16368
   35ee4:	3025883a 	mov	r18,r6
   35ee8:	003fdf06 	br	35e68 <__b2d+0x84>
   35eec:	18bfff17 	ldw	r2,-4(r3)
   35ef0:	110cd83a 	srl	r6,r2,r4
   35ef4:	003fd706 	br	35e54 <__b2d+0x70>
   35ef8:	18bfff17 	ldw	r2,-4(r3)
   35efc:	114ed83a 	srl	r7,r2,r5
   35f00:	003fec06 	br	35eb4 <__b2d+0xd0>

00035f04 <__ratio>:
   35f04:	defff904 	addi	sp,sp,-28
   35f08:	dc400215 	stw	r17,8(sp)
   35f0c:	2823883a 	mov	r17,r5
   35f10:	d80b883a 	mov	r5,sp
   35f14:	dfc00615 	stw	ra,24(sp)
   35f18:	dd000515 	stw	r20,20(sp)
   35f1c:	dcc00415 	stw	r19,16(sp)
   35f20:	dc800315 	stw	r18,12(sp)
   35f24:	2025883a 	mov	r18,r4
   35f28:	0035de40 	call	35de4 <__b2d>
   35f2c:	8809883a 	mov	r4,r17
   35f30:	d9400104 	addi	r5,sp,4
   35f34:	1027883a 	mov	r19,r2
   35f38:	1829883a 	mov	r20,r3
   35f3c:	0035de40 	call	35de4 <__b2d>
   35f40:	89000417 	ldw	r4,16(r17)
   35f44:	91c00417 	ldw	r7,16(r18)
   35f48:	d9800117 	ldw	r6,4(sp)
   35f4c:	180b883a 	mov	r5,r3
   35f50:	390fc83a 	sub	r7,r7,r4
   35f54:	1009883a 	mov	r4,r2
   35f58:	d8800017 	ldw	r2,0(sp)
   35f5c:	380e917a 	slli	r7,r7,5
   35f60:	2011883a 	mov	r8,r4
   35f64:	1185c83a 	sub	r2,r2,r6
   35f68:	11c5883a 	add	r2,r2,r7
   35f6c:	1006953a 	slli	r3,r2,20
   35f70:	2813883a 	mov	r9,r5
   35f74:	00800d0e 	bge	zero,r2,35fac <__ratio+0xa8>
   35f78:	1d29883a 	add	r20,r3,r20
   35f7c:	a00b883a 	mov	r5,r20
   35f80:	480f883a 	mov	r7,r9
   35f84:	9809883a 	mov	r4,r19
   35f88:	400d883a 	mov	r6,r8
   35f8c:	0038d600 	call	38d60 <__divdf3>
   35f90:	dfc00617 	ldw	ra,24(sp)
   35f94:	dd000517 	ldw	r20,20(sp)
   35f98:	dcc00417 	ldw	r19,16(sp)
   35f9c:	dc800317 	ldw	r18,12(sp)
   35fa0:	dc400217 	ldw	r17,8(sp)
   35fa4:	dec00704 	addi	sp,sp,28
   35fa8:	f800283a 	ret
   35fac:	28d3c83a 	sub	r9,r5,r3
   35fb0:	003ff206 	br	35f7c <__ratio+0x78>

00035fb4 <_mprec_log10>:
   35fb4:	defffe04 	addi	sp,sp,-8
   35fb8:	008005c4 	movi	r2,23
   35fbc:	dc000015 	stw	r16,0(sp)
   35fc0:	dfc00115 	stw	ra,4(sp)
   35fc4:	2021883a 	mov	r16,r4
   35fc8:	11000c16 	blt	r2,r4,35ffc <_mprec_log10+0x48>
   35fcc:	200490fa 	slli	r2,r4,3
   35fd0:	00c00074 	movhi	r3,1
   35fd4:	18c04b04 	addi	r3,r3,300
   35fd8:	10c5883a 	add	r2,r2,r3
   35fdc:	12400117 	ldw	r9,4(r2)
   35fe0:	12000017 	ldw	r8,0(r2)
   35fe4:	4807883a 	mov	r3,r9
   35fe8:	4005883a 	mov	r2,r8
   35fec:	dfc00117 	ldw	ra,4(sp)
   35ff0:	dc000017 	ldw	r16,0(sp)
   35ff4:	dec00204 	addi	sp,sp,8
   35ff8:	f800283a 	ret
   35ffc:	0011883a 	mov	r8,zero
   36000:	024ffc34 	movhi	r9,16368
   36004:	0005883a 	mov	r2,zero
   36008:	00d00934 	movhi	r3,16420
   3600c:	480b883a 	mov	r5,r9
   36010:	4009883a 	mov	r4,r8
   36014:	180f883a 	mov	r7,r3
   36018:	100d883a 	mov	r6,r2
   3601c:	003899c0 	call	3899c <__muldf3>
   36020:	843fffc4 	addi	r16,r16,-1
   36024:	1011883a 	mov	r8,r2
   36028:	1813883a 	mov	r9,r3
   3602c:	803ff51e 	bne	r16,zero,36004 <_mprec_log10+0x50>
   36030:	4005883a 	mov	r2,r8
   36034:	4807883a 	mov	r3,r9
   36038:	dfc00117 	ldw	ra,4(sp)
   3603c:	dc000017 	ldw	r16,0(sp)
   36040:	dec00204 	addi	sp,sp,8
   36044:	f800283a 	ret

00036048 <__copybits>:
   36048:	297fffc4 	addi	r5,r5,-1
   3604c:	30800417 	ldw	r2,16(r6)
   36050:	280bd17a 	srai	r5,r5,5
   36054:	31800504 	addi	r6,r6,20
   36058:	1085883a 	add	r2,r2,r2
   3605c:	294b883a 	add	r5,r5,r5
   36060:	294b883a 	add	r5,r5,r5
   36064:	1085883a 	add	r2,r2,r2
   36068:	290b883a 	add	r5,r5,r4
   3606c:	3087883a 	add	r3,r6,r2
   36070:	29400104 	addi	r5,r5,4
   36074:	30c0052e 	bgeu	r6,r3,3608c <__copybits+0x44>
   36078:	30800017 	ldw	r2,0(r6)
   3607c:	31800104 	addi	r6,r6,4
   36080:	20800015 	stw	r2,0(r4)
   36084:	21000104 	addi	r4,r4,4
   36088:	30fffb36 	bltu	r6,r3,36078 <__copybits+0x30>
   3608c:	2140032e 	bgeu	r4,r5,3609c <__copybits+0x54>
   36090:	20000015 	stw	zero,0(r4)
   36094:	21000104 	addi	r4,r4,4
   36098:	217ffd36 	bltu	r4,r5,36090 <__copybits+0x48>
   3609c:	f800283a 	ret

000360a0 <__any_on>:
   360a0:	20800417 	ldw	r2,16(r4)
   360a4:	2807d17a 	srai	r3,r5,5
   360a8:	21000504 	addi	r4,r4,20
   360ac:	10c00d0e 	bge	r2,r3,360e4 <__any_on+0x44>
   360b0:	1085883a 	add	r2,r2,r2
   360b4:	1085883a 	add	r2,r2,r2
   360b8:	208d883a 	add	r6,r4,r2
   360bc:	2180182e 	bgeu	r4,r6,36120 <__any_on+0x80>
   360c0:	30bfff17 	ldw	r2,-4(r6)
   360c4:	30ffff04 	addi	r3,r6,-4
   360c8:	1000041e 	bne	r2,zero,360dc <__any_on+0x3c>
   360cc:	20c0142e 	bgeu	r4,r3,36120 <__any_on+0x80>
   360d0:	18ffff04 	addi	r3,r3,-4
   360d4:	18800017 	ldw	r2,0(r3)
   360d8:	103ffc26 	beq	r2,zero,360cc <__any_on+0x2c>
   360dc:	00800044 	movi	r2,1
   360e0:	f800283a 	ret
   360e4:	18800a0e 	bge	r3,r2,36110 <__any_on+0x70>
   360e8:	294007cc 	andi	r5,r5,31
   360ec:	28000826 	beq	r5,zero,36110 <__any_on+0x70>
   360f0:	18c5883a 	add	r2,r3,r3
   360f4:	1085883a 	add	r2,r2,r2
   360f8:	208d883a 	add	r6,r4,r2
   360fc:	30c00017 	ldw	r3,0(r6)
   36100:	1944d83a 	srl	r2,r3,r5
   36104:	1144983a 	sll	r2,r2,r5
   36108:	18bff41e 	bne	r3,r2,360dc <__any_on+0x3c>
   3610c:	003feb06 	br	360bc <__any_on+0x1c>
   36110:	18c5883a 	add	r2,r3,r3
   36114:	1085883a 	add	r2,r2,r2
   36118:	208d883a 	add	r6,r4,r2
   3611c:	003fe706 	br	360bc <__any_on+0x1c>
   36120:	0005883a 	mov	r2,zero
   36124:	f800283a 	ret

00036128 <_Balloc>:
   36128:	20c01317 	ldw	r3,76(r4)
   3612c:	defffb04 	addi	sp,sp,-20
   36130:	dcc00315 	stw	r19,12(sp)
   36134:	dc800215 	stw	r18,8(sp)
   36138:	dfc00415 	stw	ra,16(sp)
   3613c:	2825883a 	mov	r18,r5
   36140:	dc400115 	stw	r17,4(sp)
   36144:	dc000015 	stw	r16,0(sp)
   36148:	2027883a 	mov	r19,r4
   3614c:	01800404 	movi	r6,16
   36150:	01400104 	movi	r5,4
   36154:	18001726 	beq	r3,zero,361b4 <_Balloc+0x8c>
   36158:	01400044 	movi	r5,1
   3615c:	9485883a 	add	r2,r18,r18
   36160:	2ca2983a 	sll	r17,r5,r18
   36164:	1085883a 	add	r2,r2,r2
   36168:	10c7883a 	add	r3,r2,r3
   3616c:	1c000017 	ldw	r16,0(r3)
   36170:	8c4d883a 	add	r6,r17,r17
   36174:	318d883a 	add	r6,r6,r6
   36178:	9809883a 	mov	r4,r19
   3617c:	31800504 	addi	r6,r6,20
   36180:	80001226 	beq	r16,zero,361cc <_Balloc+0xa4>
   36184:	80800017 	ldw	r2,0(r16)
   36188:	18800015 	stw	r2,0(r3)
   3618c:	80000415 	stw	zero,16(r16)
   36190:	80000315 	stw	zero,12(r16)
   36194:	8005883a 	mov	r2,r16
   36198:	dfc00417 	ldw	ra,16(sp)
   3619c:	dcc00317 	ldw	r19,12(sp)
   361a0:	dc800217 	ldw	r18,8(sp)
   361a4:	dc400117 	ldw	r17,4(sp)
   361a8:	dc000017 	ldw	r16,0(sp)
   361ac:	dec00504 	addi	sp,sp,20
   361b0:	f800283a 	ret
   361b4:	00374f00 	call	374f0 <_calloc_r>
   361b8:	1007883a 	mov	r3,r2
   361bc:	0021883a 	mov	r16,zero
   361c0:	98801315 	stw	r2,76(r19)
   361c4:	103fe41e 	bne	r2,zero,36158 <_Balloc+0x30>
   361c8:	003ff206 	br	36194 <_Balloc+0x6c>
   361cc:	00374f00 	call	374f0 <_calloc_r>
   361d0:	103ff026 	beq	r2,zero,36194 <_Balloc+0x6c>
   361d4:	1021883a 	mov	r16,r2
   361d8:	14800115 	stw	r18,4(r2)
   361dc:	14400215 	stw	r17,8(r2)
   361e0:	003fea06 	br	3618c <_Balloc+0x64>

000361e4 <__d2b>:
   361e4:	defff504 	addi	sp,sp,-44
   361e8:	dcc00515 	stw	r19,20(sp)
   361ec:	04c00044 	movi	r19,1
   361f0:	dc000215 	stw	r16,8(sp)
   361f4:	2821883a 	mov	r16,r5
   361f8:	980b883a 	mov	r5,r19
   361fc:	ddc00915 	stw	r23,36(sp)
   36200:	dd800815 	stw	r22,32(sp)
   36204:	dd400715 	stw	r21,28(sp)
   36208:	dd000615 	stw	r20,24(sp)
   3620c:	dc800415 	stw	r18,16(sp)
   36210:	dc400315 	stw	r17,12(sp)
   36214:	dfc00a15 	stw	ra,40(sp)
   36218:	3023883a 	mov	r17,r6
   3621c:	382d883a 	mov	r22,r7
   36220:	ddc00b17 	ldw	r23,44(sp)
   36224:	00361280 	call	36128 <_Balloc>
   36228:	1025883a 	mov	r18,r2
   3622c:	00a00034 	movhi	r2,32768
   36230:	10bfffc4 	addi	r2,r2,-1
   36234:	8888703a 	and	r4,r17,r2
   36238:	202ad53a 	srli	r21,r4,20
   3623c:	00800434 	movhi	r2,16
   36240:	10bfffc4 	addi	r2,r2,-1
   36244:	8886703a 	and	r3,r17,r2
   36248:	a829003a 	cmpeq	r20,r21,zero
   3624c:	800b883a 	mov	r5,r16
   36250:	d8c00115 	stw	r3,4(sp)
   36254:	94000504 	addi	r16,r18,20
   36258:	a000021e 	bne	r20,zero,36264 <__d2b+0x80>
   3625c:	18c00434 	orhi	r3,r3,16
   36260:	d8c00115 	stw	r3,4(sp)
   36264:	28002726 	beq	r5,zero,36304 <__d2b+0x120>
   36268:	d809883a 	mov	r4,sp
   3626c:	d9400015 	stw	r5,0(sp)
   36270:	0035c400 	call	35c40 <__lo0bits>
   36274:	100d883a 	mov	r6,r2
   36278:	10003526 	beq	r2,zero,36350 <__d2b+0x16c>
   3627c:	d8c00117 	ldw	r3,4(sp)
   36280:	00800804 	movi	r2,32
   36284:	1185c83a 	sub	r2,r2,r6
   36288:	d9000017 	ldw	r4,0(sp)
   3628c:	1886983a 	sll	r3,r3,r2
   36290:	1906b03a 	or	r3,r3,r4
   36294:	90c00515 	stw	r3,20(r18)
   36298:	d8c00117 	ldw	r3,4(sp)
   3629c:	1986d83a 	srl	r3,r3,r6
   362a0:	d8c00115 	stw	r3,4(sp)
   362a4:	180b003a 	cmpeq	r5,r3,zero
   362a8:	00800084 	movi	r2,2
   362ac:	114bc83a 	sub	r5,r2,r5
   362b0:	80c00115 	stw	r3,4(r16)
   362b4:	91400415 	stw	r5,16(r18)
   362b8:	a0001a1e 	bne	r20,zero,36324 <__d2b+0x140>
   362bc:	3545883a 	add	r2,r6,r21
   362c0:	10bef344 	addi	r2,r2,-1075
   362c4:	00c00d44 	movi	r3,53
   362c8:	b0800015 	stw	r2,0(r22)
   362cc:	1987c83a 	sub	r3,r3,r6
   362d0:	b8c00015 	stw	r3,0(r23)
   362d4:	9005883a 	mov	r2,r18
   362d8:	dfc00a17 	ldw	ra,40(sp)
   362dc:	ddc00917 	ldw	r23,36(sp)
   362e0:	dd800817 	ldw	r22,32(sp)
   362e4:	dd400717 	ldw	r21,28(sp)
   362e8:	dd000617 	ldw	r20,24(sp)
   362ec:	dcc00517 	ldw	r19,20(sp)
   362f0:	dc800417 	ldw	r18,16(sp)
   362f4:	dc400317 	ldw	r17,12(sp)
   362f8:	dc000217 	ldw	r16,8(sp)
   362fc:	dec00b04 	addi	sp,sp,44
   36300:	f800283a 	ret
   36304:	d9000104 	addi	r4,sp,4
   36308:	0035c400 	call	35c40 <__lo0bits>
   3630c:	11800804 	addi	r6,r2,32
   36310:	d8800117 	ldw	r2,4(sp)
   36314:	94c00415 	stw	r19,16(r18)
   36318:	980b883a 	mov	r5,r19
   3631c:	90800515 	stw	r2,20(r18)
   36320:	a03fe626 	beq	r20,zero,362bc <__d2b+0xd8>
   36324:	2945883a 	add	r2,r5,r5
   36328:	1085883a 	add	r2,r2,r2
   3632c:	1405883a 	add	r2,r2,r16
   36330:	113fff17 	ldw	r4,-4(r2)
   36334:	30fef384 	addi	r3,r6,-1074
   36338:	2820917a 	slli	r16,r5,5
   3633c:	b0c00015 	stw	r3,0(r22)
   36340:	0035bd00 	call	35bd0 <__hi0bits>
   36344:	80a1c83a 	sub	r16,r16,r2
   36348:	bc000015 	stw	r16,0(r23)
   3634c:	003fe106 	br	362d4 <__d2b+0xf0>
   36350:	d8800017 	ldw	r2,0(sp)
   36354:	90800515 	stw	r2,20(r18)
   36358:	d8c00117 	ldw	r3,4(sp)
   3635c:	003fd106 	br	362a4 <__d2b+0xc0>

00036360 <__mdiff>:
   36360:	defffb04 	addi	sp,sp,-20
   36364:	dc000015 	stw	r16,0(sp)
   36368:	2821883a 	mov	r16,r5
   3636c:	dc800215 	stw	r18,8(sp)
   36370:	300b883a 	mov	r5,r6
   36374:	2025883a 	mov	r18,r4
   36378:	8009883a 	mov	r4,r16
   3637c:	dc400115 	stw	r17,4(sp)
   36380:	dfc00415 	stw	ra,16(sp)
   36384:	dcc00315 	stw	r19,12(sp)
   36388:	3023883a 	mov	r17,r6
   3638c:	0035d040 	call	35d04 <__mcmp>
   36390:	10004226 	beq	r2,zero,3649c <__mdiff+0x13c>
   36394:	10005016 	blt	r2,zero,364d8 <__mdiff+0x178>
   36398:	0027883a 	mov	r19,zero
   3639c:	81400117 	ldw	r5,4(r16)
   363a0:	9009883a 	mov	r4,r18
   363a4:	00361280 	call	36128 <_Balloc>
   363a8:	1019883a 	mov	r12,r2
   363ac:	82800417 	ldw	r10,16(r16)
   363b0:	88800417 	ldw	r2,16(r17)
   363b4:	81800504 	addi	r6,r16,20
   363b8:	5287883a 	add	r3,r10,r10
   363bc:	1085883a 	add	r2,r2,r2
   363c0:	18c7883a 	add	r3,r3,r3
   363c4:	1085883a 	add	r2,r2,r2
   363c8:	8a000504 	addi	r8,r17,20
   363cc:	64c00315 	stw	r19,12(r12)
   363d0:	30db883a 	add	r13,r6,r3
   363d4:	4097883a 	add	r11,r8,r2
   363d8:	61c00504 	addi	r7,r12,20
   363dc:	0013883a 	mov	r9,zero
   363e0:	31000017 	ldw	r4,0(r6)
   363e4:	41400017 	ldw	r5,0(r8)
   363e8:	42000104 	addi	r8,r8,4
   363ec:	20bfffcc 	andi	r2,r4,65535
   363f0:	28ffffcc 	andi	r3,r5,65535
   363f4:	10c5c83a 	sub	r2,r2,r3
   363f8:	1245883a 	add	r2,r2,r9
   363fc:	2008d43a 	srli	r4,r4,16
   36400:	280ad43a 	srli	r5,r5,16
   36404:	1007d43a 	srai	r3,r2,16
   36408:	3880000d 	sth	r2,0(r7)
   3640c:	2149c83a 	sub	r4,r4,r5
   36410:	20c9883a 	add	r4,r4,r3
   36414:	3900008d 	sth	r4,2(r7)
   36418:	31800104 	addi	r6,r6,4
   3641c:	39c00104 	addi	r7,r7,4
   36420:	2013d43a 	srai	r9,r4,16
   36424:	42ffee36 	bltu	r8,r11,363e0 <__mdiff+0x80>
   36428:	33400c2e 	bgeu	r6,r13,3645c <__mdiff+0xfc>
   3642c:	30800017 	ldw	r2,0(r6)
   36430:	31800104 	addi	r6,r6,4
   36434:	10ffffcc 	andi	r3,r2,65535
   36438:	1a47883a 	add	r3,r3,r9
   3643c:	1004d43a 	srli	r2,r2,16
   36440:	1809d43a 	srai	r4,r3,16
   36444:	38c0000d 	sth	r3,0(r7)
   36448:	1105883a 	add	r2,r2,r4
   3644c:	3880008d 	sth	r2,2(r7)
   36450:	1013d43a 	srai	r9,r2,16
   36454:	39c00104 	addi	r7,r7,4
   36458:	337ff436 	bltu	r6,r13,3642c <__mdiff+0xcc>
   3645c:	38bfff17 	ldw	r2,-4(r7)
   36460:	38ffff04 	addi	r3,r7,-4
   36464:	1000041e 	bne	r2,zero,36478 <__mdiff+0x118>
   36468:	18ffff04 	addi	r3,r3,-4
   3646c:	18800017 	ldw	r2,0(r3)
   36470:	52bfffc4 	addi	r10,r10,-1
   36474:	103ffc26 	beq	r2,zero,36468 <__mdiff+0x108>
   36478:	6005883a 	mov	r2,r12
   3647c:	62800415 	stw	r10,16(r12)
   36480:	dfc00417 	ldw	ra,16(sp)
   36484:	dcc00317 	ldw	r19,12(sp)
   36488:	dc800217 	ldw	r18,8(sp)
   3648c:	dc400117 	ldw	r17,4(sp)
   36490:	dc000017 	ldw	r16,0(sp)
   36494:	dec00504 	addi	sp,sp,20
   36498:	f800283a 	ret
   3649c:	9009883a 	mov	r4,r18
   364a0:	000b883a 	mov	r5,zero
   364a4:	00361280 	call	36128 <_Balloc>
   364a8:	1019883a 	mov	r12,r2
   364ac:	00800044 	movi	r2,1
   364b0:	60800415 	stw	r2,16(r12)
   364b4:	6005883a 	mov	r2,r12
   364b8:	60000515 	stw	zero,20(r12)
   364bc:	dfc00417 	ldw	ra,16(sp)
   364c0:	dcc00317 	ldw	r19,12(sp)
   364c4:	dc800217 	ldw	r18,8(sp)
   364c8:	dc400117 	ldw	r17,4(sp)
   364cc:	dc000017 	ldw	r16,0(sp)
   364d0:	dec00504 	addi	sp,sp,20
   364d4:	f800283a 	ret
   364d8:	880d883a 	mov	r6,r17
   364dc:	04c00044 	movi	r19,1
   364e0:	8023883a 	mov	r17,r16
   364e4:	3021883a 	mov	r16,r6
   364e8:	003fac06 	br	3639c <__mdiff+0x3c>

000364ec <__lshift>:
   364ec:	defff904 	addi	sp,sp,-28
   364f0:	28800417 	ldw	r2,16(r5)
   364f4:	dc000015 	stw	r16,0(sp)
   364f8:	3021d17a 	srai	r16,r6,5
   364fc:	28c00217 	ldw	r3,8(r5)
   36500:	10800044 	addi	r2,r2,1
   36504:	dc400115 	stw	r17,4(sp)
   36508:	80a3883a 	add	r17,r16,r2
   3650c:	dd400515 	stw	r21,20(sp)
   36510:	dd000415 	stw	r20,16(sp)
   36514:	dc800215 	stw	r18,8(sp)
   36518:	dfc00615 	stw	ra,24(sp)
   3651c:	2825883a 	mov	r18,r5
   36520:	dcc00315 	stw	r19,12(sp)
   36524:	3029883a 	mov	r20,r6
   36528:	202b883a 	mov	r21,r4
   3652c:	29400117 	ldw	r5,4(r5)
   36530:	1c40030e 	bge	r3,r17,36540 <__lshift+0x54>
   36534:	18c7883a 	add	r3,r3,r3
   36538:	29400044 	addi	r5,r5,1
   3653c:	1c7ffd16 	blt	r3,r17,36534 <__lshift+0x48>
   36540:	a809883a 	mov	r4,r21
   36544:	00361280 	call	36128 <_Balloc>
   36548:	1027883a 	mov	r19,r2
   3654c:	11400504 	addi	r5,r2,20
   36550:	0400090e 	bge	zero,r16,36578 <__lshift+0x8c>
   36554:	2805883a 	mov	r2,r5
   36558:	0007883a 	mov	r3,zero
   3655c:	18c00044 	addi	r3,r3,1
   36560:	10000015 	stw	zero,0(r2)
   36564:	10800104 	addi	r2,r2,4
   36568:	80fffc1e 	bne	r16,r3,3655c <__lshift+0x70>
   3656c:	8405883a 	add	r2,r16,r16
   36570:	1085883a 	add	r2,r2,r2
   36574:	288b883a 	add	r5,r5,r2
   36578:	90800417 	ldw	r2,16(r18)
   3657c:	91000504 	addi	r4,r18,20
   36580:	a18007cc 	andi	r6,r20,31
   36584:	1085883a 	add	r2,r2,r2
   36588:	1085883a 	add	r2,r2,r2
   3658c:	208f883a 	add	r7,r4,r2
   36590:	30001e26 	beq	r6,zero,3660c <__lshift+0x120>
   36594:	00800804 	movi	r2,32
   36598:	1191c83a 	sub	r8,r2,r6
   3659c:	0007883a 	mov	r3,zero
   365a0:	20800017 	ldw	r2,0(r4)
   365a4:	1184983a 	sll	r2,r2,r6
   365a8:	1884b03a 	or	r2,r3,r2
   365ac:	28800015 	stw	r2,0(r5)
   365b0:	20c00017 	ldw	r3,0(r4)
   365b4:	21000104 	addi	r4,r4,4
   365b8:	29400104 	addi	r5,r5,4
   365bc:	1a06d83a 	srl	r3,r3,r8
   365c0:	21fff736 	bltu	r4,r7,365a0 <__lshift+0xb4>
   365c4:	28c00015 	stw	r3,0(r5)
   365c8:	18000126 	beq	r3,zero,365d0 <__lshift+0xe4>
   365cc:	8c400044 	addi	r17,r17,1
   365d0:	88bfffc4 	addi	r2,r17,-1
   365d4:	98800415 	stw	r2,16(r19)
   365d8:	a809883a 	mov	r4,r21
   365dc:	900b883a 	mov	r5,r18
   365e0:	0035ba80 	call	35ba8 <_Bfree>
   365e4:	9805883a 	mov	r2,r19
   365e8:	dfc00617 	ldw	ra,24(sp)
   365ec:	dd400517 	ldw	r21,20(sp)
   365f0:	dd000417 	ldw	r20,16(sp)
   365f4:	dcc00317 	ldw	r19,12(sp)
   365f8:	dc800217 	ldw	r18,8(sp)
   365fc:	dc400117 	ldw	r17,4(sp)
   36600:	dc000017 	ldw	r16,0(sp)
   36604:	dec00704 	addi	sp,sp,28
   36608:	f800283a 	ret
   3660c:	20800017 	ldw	r2,0(r4)
   36610:	21000104 	addi	r4,r4,4
   36614:	28800015 	stw	r2,0(r5)
   36618:	29400104 	addi	r5,r5,4
   3661c:	21ffec2e 	bgeu	r4,r7,365d0 <__lshift+0xe4>
   36620:	20800017 	ldw	r2,0(r4)
   36624:	21000104 	addi	r4,r4,4
   36628:	28800015 	stw	r2,0(r5)
   3662c:	29400104 	addi	r5,r5,4
   36630:	21fff636 	bltu	r4,r7,3660c <__lshift+0x120>
   36634:	003fe606 	br	365d0 <__lshift+0xe4>

00036638 <__multiply>:
   36638:	defff904 	addi	sp,sp,-28
   3663c:	dcc00315 	stw	r19,12(sp)
   36640:	dc800215 	stw	r18,8(sp)
   36644:	2cc00417 	ldw	r19,16(r5)
   36648:	34800417 	ldw	r18,16(r6)
   3664c:	dd000415 	stw	r20,16(sp)
   36650:	dc400115 	stw	r17,4(sp)
   36654:	dfc00615 	stw	ra,24(sp)
   36658:	dd400515 	stw	r21,20(sp)
   3665c:	dc000015 	stw	r16,0(sp)
   36660:	2823883a 	mov	r17,r5
   36664:	3029883a 	mov	r20,r6
   36668:	9c80040e 	bge	r19,r18,3667c <__multiply+0x44>
   3666c:	9027883a 	mov	r19,r18
   36670:	2c800417 	ldw	r18,16(r5)
   36674:	2829883a 	mov	r20,r5
   36678:	3023883a 	mov	r17,r6
   3667c:	88800217 	ldw	r2,8(r17)
   36680:	9ca1883a 	add	r16,r19,r18
   36684:	89400117 	ldw	r5,4(r17)
   36688:	1400010e 	bge	r2,r16,36690 <__multiply+0x58>
   3668c:	29400044 	addi	r5,r5,1
   36690:	00361280 	call	36128 <_Balloc>
   36694:	102b883a 	mov	r21,r2
   36698:	8405883a 	add	r2,r16,r16
   3669c:	1085883a 	add	r2,r2,r2
   366a0:	a9000504 	addi	r4,r21,20
   366a4:	209d883a 	add	r14,r4,r2
   366a8:	2380042e 	bgeu	r4,r14,366bc <__multiply+0x84>
   366ac:	2005883a 	mov	r2,r4
   366b0:	10000015 	stw	zero,0(r2)
   366b4:	10800104 	addi	r2,r2,4
   366b8:	13bffd36 	bltu	r2,r14,366b0 <__multiply+0x78>
   366bc:	9485883a 	add	r2,r18,r18
   366c0:	9cc7883a 	add	r3,r19,r19
   366c4:	a1800504 	addi	r6,r20,20
   366c8:	1085883a 	add	r2,r2,r2
   366cc:	8b400504 	addi	r13,r17,20
   366d0:	18c7883a 	add	r3,r3,r3
   366d4:	309f883a 	add	r15,r6,r2
   366d8:	68d7883a 	add	r11,r13,r3
   366dc:	33c03b2e 	bgeu	r6,r15,367cc <__multiply+0x194>
   366e0:	2019883a 	mov	r12,r4
   366e4:	30800017 	ldw	r2,0(r6)
   366e8:	127fffcc 	andi	r9,r2,65535
   366ec:	48001826 	beq	r9,zero,36750 <__multiply+0x118>
   366f0:	6811883a 	mov	r8,r13
   366f4:	600f883a 	mov	r7,r12
   366f8:	0015883a 	mov	r10,zero
   366fc:	40c00017 	ldw	r3,0(r8)
   36700:	39400017 	ldw	r5,0(r7)
   36704:	42000104 	addi	r8,r8,4
   36708:	193fffcc 	andi	r4,r3,65535
   3670c:	4909383a 	mul	r4,r9,r4
   36710:	1806d43a 	srli	r3,r3,16
   36714:	28bfffcc 	andi	r2,r5,65535
   36718:	5085883a 	add	r2,r10,r2
   3671c:	2089883a 	add	r4,r4,r2
   36720:	48c7383a 	mul	r3,r9,r3
   36724:	280ad43a 	srli	r5,r5,16
   36728:	2004d43a 	srli	r2,r4,16
   3672c:	3900000d 	sth	r4,0(r7)
   36730:	1947883a 	add	r3,r3,r5
   36734:	10c5883a 	add	r2,r2,r3
   36738:	3880008d 	sth	r2,2(r7)
   3673c:	1014d43a 	srli	r10,r2,16
   36740:	39c00104 	addi	r7,r7,4
   36744:	42ffed36 	bltu	r8,r11,366fc <__multiply+0xc4>
   36748:	3a800015 	stw	r10,0(r7)
   3674c:	30800017 	ldw	r2,0(r6)
   36750:	1012d43a 	srli	r9,r2,16
   36754:	48001926 	beq	r9,zero,367bc <__multiply+0x184>
   36758:	60800017 	ldw	r2,0(r12)
   3675c:	6811883a 	mov	r8,r13
   36760:	600f883a 	mov	r7,r12
   36764:	0015883a 	mov	r10,zero
   36768:	100b883a 	mov	r5,r2
   3676c:	41000017 	ldw	r4,0(r8)
   36770:	2806d43a 	srli	r3,r5,16
   36774:	3880000d 	sth	r2,0(r7)
   36778:	20bfffcc 	andi	r2,r4,65535
   3677c:	4885383a 	mul	r2,r9,r2
   36780:	50c7883a 	add	r3,r10,r3
   36784:	2008d43a 	srli	r4,r4,16
   36788:	10c5883a 	add	r2,r2,r3
   3678c:	3880008d 	sth	r2,2(r7)
   36790:	39c00104 	addi	r7,r7,4
   36794:	39400017 	ldw	r5,0(r7)
   36798:	4909383a 	mul	r4,r9,r4
   3679c:	1004d43a 	srli	r2,r2,16
   367a0:	28ffffcc 	andi	r3,r5,65535
   367a4:	20c9883a 	add	r4,r4,r3
   367a8:	1105883a 	add	r2,r2,r4
   367ac:	42000104 	addi	r8,r8,4
   367b0:	1014d43a 	srli	r10,r2,16
   367b4:	42ffed36 	bltu	r8,r11,3676c <__multiply+0x134>
   367b8:	38800015 	stw	r2,0(r7)
   367bc:	31800104 	addi	r6,r6,4
   367c0:	33c0022e 	bgeu	r6,r15,367cc <__multiply+0x194>
   367c4:	63000104 	addi	r12,r12,4
   367c8:	003fc606 	br	366e4 <__multiply+0xac>
   367cc:	0400090e 	bge	zero,r16,367f4 <__multiply+0x1bc>
   367d0:	70bfff17 	ldw	r2,-4(r14)
   367d4:	70ffff04 	addi	r3,r14,-4
   367d8:	10000326 	beq	r2,zero,367e8 <__multiply+0x1b0>
   367dc:	00000506 	br	367f4 <__multiply+0x1bc>
   367e0:	18800017 	ldw	r2,0(r3)
   367e4:	1000031e 	bne	r2,zero,367f4 <__multiply+0x1bc>
   367e8:	843fffc4 	addi	r16,r16,-1
   367ec:	18ffff04 	addi	r3,r3,-4
   367f0:	803ffb1e 	bne	r16,zero,367e0 <__multiply+0x1a8>
   367f4:	a805883a 	mov	r2,r21
   367f8:	ac000415 	stw	r16,16(r21)
   367fc:	dfc00617 	ldw	ra,24(sp)
   36800:	dd400517 	ldw	r21,20(sp)
   36804:	dd000417 	ldw	r20,16(sp)
   36808:	dcc00317 	ldw	r19,12(sp)
   3680c:	dc800217 	ldw	r18,8(sp)
   36810:	dc400117 	ldw	r17,4(sp)
   36814:	dc000017 	ldw	r16,0(sp)
   36818:	dec00704 	addi	sp,sp,28
   3681c:	f800283a 	ret

00036820 <__i2b>:
   36820:	defffd04 	addi	sp,sp,-12
   36824:	dc000015 	stw	r16,0(sp)
   36828:	04000044 	movi	r16,1
   3682c:	dc800115 	stw	r18,4(sp)
   36830:	2825883a 	mov	r18,r5
   36834:	800b883a 	mov	r5,r16
   36838:	dfc00215 	stw	ra,8(sp)
   3683c:	00361280 	call	36128 <_Balloc>
   36840:	14000415 	stw	r16,16(r2)
   36844:	14800515 	stw	r18,20(r2)
   36848:	dfc00217 	ldw	ra,8(sp)
   3684c:	dc800117 	ldw	r18,4(sp)
   36850:	dc000017 	ldw	r16,0(sp)
   36854:	dec00304 	addi	sp,sp,12
   36858:	f800283a 	ret

0003685c <__multadd>:
   3685c:	defffa04 	addi	sp,sp,-24
   36860:	dc800215 	stw	r18,8(sp)
   36864:	2c800417 	ldw	r18,16(r5)
   36868:	dd000415 	stw	r20,16(sp)
   3686c:	dcc00315 	stw	r19,12(sp)
   36870:	dc000015 	stw	r16,0(sp)
   36874:	dfc00515 	stw	ra,20(sp)
   36878:	3821883a 	mov	r16,r7
   3687c:	dc400115 	stw	r17,4(sp)
   36880:	2827883a 	mov	r19,r5
   36884:	2029883a 	mov	r20,r4
   36888:	2a000504 	addi	r8,r5,20
   3688c:	000f883a 	mov	r7,zero
   36890:	40800017 	ldw	r2,0(r8)
   36894:	39c00044 	addi	r7,r7,1
   36898:	10ffffcc 	andi	r3,r2,65535
   3689c:	1987383a 	mul	r3,r3,r6
   368a0:	1004d43a 	srli	r2,r2,16
   368a4:	1c07883a 	add	r3,r3,r16
   368a8:	180ad43a 	srli	r5,r3,16
   368ac:	1185383a 	mul	r2,r2,r6
   368b0:	18ffffcc 	andi	r3,r3,65535
   368b4:	1145883a 	add	r2,r2,r5
   368b8:	1008943a 	slli	r4,r2,16
   368bc:	1020d43a 	srli	r16,r2,16
   368c0:	20c9883a 	add	r4,r4,r3
   368c4:	41000015 	stw	r4,0(r8)
   368c8:	42000104 	addi	r8,r8,4
   368cc:	3cbff016 	blt	r7,r18,36890 <__multadd+0x34>
   368d0:	80000826 	beq	r16,zero,368f4 <__multadd+0x98>
   368d4:	98800217 	ldw	r2,8(r19)
   368d8:	90800f0e 	bge	r18,r2,36918 <__multadd+0xbc>
   368dc:	9485883a 	add	r2,r18,r18
   368e0:	1085883a 	add	r2,r2,r2
   368e4:	14c5883a 	add	r2,r2,r19
   368e8:	90c00044 	addi	r3,r18,1
   368ec:	14000515 	stw	r16,20(r2)
   368f0:	98c00415 	stw	r3,16(r19)
   368f4:	9805883a 	mov	r2,r19
   368f8:	dfc00517 	ldw	ra,20(sp)
   368fc:	dd000417 	ldw	r20,16(sp)
   36900:	dcc00317 	ldw	r19,12(sp)
   36904:	dc800217 	ldw	r18,8(sp)
   36908:	dc400117 	ldw	r17,4(sp)
   3690c:	dc000017 	ldw	r16,0(sp)
   36910:	dec00604 	addi	sp,sp,24
   36914:	f800283a 	ret
   36918:	99400117 	ldw	r5,4(r19)
   3691c:	a009883a 	mov	r4,r20
   36920:	29400044 	addi	r5,r5,1
   36924:	00361280 	call	36128 <_Balloc>
   36928:	99800417 	ldw	r6,16(r19)
   3692c:	99400304 	addi	r5,r19,12
   36930:	11000304 	addi	r4,r2,12
   36934:	318d883a 	add	r6,r6,r6
   36938:	318d883a 	add	r6,r6,r6
   3693c:	31800204 	addi	r6,r6,8
   36940:	1023883a 	mov	r17,r2
   36944:	00359900 	call	35990 <memcpy>
   36948:	980b883a 	mov	r5,r19
   3694c:	a009883a 	mov	r4,r20
   36950:	0035ba80 	call	35ba8 <_Bfree>
   36954:	8827883a 	mov	r19,r17
   36958:	003fe006 	br	368dc <__multadd+0x80>

0003695c <__pow5mult>:
   3695c:	defffa04 	addi	sp,sp,-24
   36960:	308000cc 	andi	r2,r6,3
   36964:	dd000415 	stw	r20,16(sp)
   36968:	dcc00315 	stw	r19,12(sp)
   3696c:	dc000015 	stw	r16,0(sp)
   36970:	dfc00515 	stw	ra,20(sp)
   36974:	dc800215 	stw	r18,8(sp)
   36978:	dc400115 	stw	r17,4(sp)
   3697c:	3021883a 	mov	r16,r6
   36980:	2027883a 	mov	r19,r4
   36984:	2829883a 	mov	r20,r5
   36988:	10002b1e 	bne	r2,zero,36a38 <__pow5mult+0xdc>
   3698c:	8025d0ba 	srai	r18,r16,2
   36990:	90001b26 	beq	r18,zero,36a00 <__pow5mult+0xa4>
   36994:	9c001217 	ldw	r16,72(r19)
   36998:	8000081e 	bne	r16,zero,369bc <__pow5mult+0x60>
   3699c:	00003006 	br	36a60 <__pow5mult+0x104>
   369a0:	800b883a 	mov	r5,r16
   369a4:	800d883a 	mov	r6,r16
   369a8:	9809883a 	mov	r4,r19
   369ac:	90001426 	beq	r18,zero,36a00 <__pow5mult+0xa4>
   369b0:	80800017 	ldw	r2,0(r16)
   369b4:	10001b26 	beq	r2,zero,36a24 <__pow5mult+0xc8>
   369b8:	1021883a 	mov	r16,r2
   369bc:	9080004c 	andi	r2,r18,1
   369c0:	1005003a 	cmpeq	r2,r2,zero
   369c4:	9025d07a 	srai	r18,r18,1
   369c8:	800d883a 	mov	r6,r16
   369cc:	9809883a 	mov	r4,r19
   369d0:	a00b883a 	mov	r5,r20
   369d4:	103ff21e 	bne	r2,zero,369a0 <__pow5mult+0x44>
   369d8:	00366380 	call	36638 <__multiply>
   369dc:	a00b883a 	mov	r5,r20
   369e0:	9809883a 	mov	r4,r19
   369e4:	1023883a 	mov	r17,r2
   369e8:	0035ba80 	call	35ba8 <_Bfree>
   369ec:	8829883a 	mov	r20,r17
   369f0:	800b883a 	mov	r5,r16
   369f4:	800d883a 	mov	r6,r16
   369f8:	9809883a 	mov	r4,r19
   369fc:	903fec1e 	bne	r18,zero,369b0 <__pow5mult+0x54>
   36a00:	a005883a 	mov	r2,r20
   36a04:	dfc00517 	ldw	ra,20(sp)
   36a08:	dd000417 	ldw	r20,16(sp)
   36a0c:	dcc00317 	ldw	r19,12(sp)
   36a10:	dc800217 	ldw	r18,8(sp)
   36a14:	dc400117 	ldw	r17,4(sp)
   36a18:	dc000017 	ldw	r16,0(sp)
   36a1c:	dec00604 	addi	sp,sp,24
   36a20:	f800283a 	ret
   36a24:	00366380 	call	36638 <__multiply>
   36a28:	80800015 	stw	r2,0(r16)
   36a2c:	1021883a 	mov	r16,r2
   36a30:	10000015 	stw	zero,0(r2)
   36a34:	003fe106 	br	369bc <__pow5mult+0x60>
   36a38:	1085883a 	add	r2,r2,r2
   36a3c:	00c00074 	movhi	r3,1
   36a40:	18c09104 	addi	r3,r3,580
   36a44:	1085883a 	add	r2,r2,r2
   36a48:	10c5883a 	add	r2,r2,r3
   36a4c:	11bfff17 	ldw	r6,-4(r2)
   36a50:	000f883a 	mov	r7,zero
   36a54:	003685c0 	call	3685c <__multadd>
   36a58:	1029883a 	mov	r20,r2
   36a5c:	003fcb06 	br	3698c <__pow5mult+0x30>
   36a60:	9809883a 	mov	r4,r19
   36a64:	01409c44 	movi	r5,625
   36a68:	00368200 	call	36820 <__i2b>
   36a6c:	98801215 	stw	r2,72(r19)
   36a70:	1021883a 	mov	r16,r2
   36a74:	10000015 	stw	zero,0(r2)
   36a78:	003fd006 	br	369bc <__pow5mult+0x60>

00036a7c <__s2b>:
   36a7c:	defff904 	addi	sp,sp,-28
   36a80:	dcc00315 	stw	r19,12(sp)
   36a84:	dc800215 	stw	r18,8(sp)
   36a88:	2827883a 	mov	r19,r5
   36a8c:	2025883a 	mov	r18,r4
   36a90:	01400244 	movi	r5,9
   36a94:	39000204 	addi	r4,r7,8
   36a98:	dd000415 	stw	r20,16(sp)
   36a9c:	dc400115 	stw	r17,4(sp)
   36aa0:	dfc00615 	stw	ra,24(sp)
   36aa4:	dd400515 	stw	r21,20(sp)
   36aa8:	dc000015 	stw	r16,0(sp)
   36aac:	3829883a 	mov	r20,r7
   36ab0:	3023883a 	mov	r17,r6
   36ab4:	00396400 	call	39640 <__divsi3>
   36ab8:	00c00044 	movi	r3,1
   36abc:	1880350e 	bge	r3,r2,36b94 <__s2b+0x118>
   36ac0:	000b883a 	mov	r5,zero
   36ac4:	18c7883a 	add	r3,r3,r3
   36ac8:	29400044 	addi	r5,r5,1
   36acc:	18bffd16 	blt	r3,r2,36ac4 <__s2b+0x48>
   36ad0:	9009883a 	mov	r4,r18
   36ad4:	00361280 	call	36128 <_Balloc>
   36ad8:	1011883a 	mov	r8,r2
   36adc:	d8800717 	ldw	r2,28(sp)
   36ae0:	00c00044 	movi	r3,1
   36ae4:	01800244 	movi	r6,9
   36ae8:	40800515 	stw	r2,20(r8)
   36aec:	40c00415 	stw	r3,16(r8)
   36af0:	3440260e 	bge	r6,r17,36b8c <__s2b+0x110>
   36af4:	3021883a 	mov	r16,r6
   36af8:	99ab883a 	add	r21,r19,r6
   36afc:	9c05883a 	add	r2,r19,r16
   36b00:	11c00007 	ldb	r7,0(r2)
   36b04:	400b883a 	mov	r5,r8
   36b08:	9009883a 	mov	r4,r18
   36b0c:	39fff404 	addi	r7,r7,-48
   36b10:	01800284 	movi	r6,10
   36b14:	003685c0 	call	3685c <__multadd>
   36b18:	84000044 	addi	r16,r16,1
   36b1c:	1011883a 	mov	r8,r2
   36b20:	8c3ff61e 	bne	r17,r16,36afc <__s2b+0x80>
   36b24:	ac45883a 	add	r2,r21,r17
   36b28:	117ffe04 	addi	r5,r2,-8
   36b2c:	880d883a 	mov	r6,r17
   36b30:	35000c0e 	bge	r6,r20,36b64 <__s2b+0xe8>
   36b34:	a185c83a 	sub	r2,r20,r6
   36b38:	2821883a 	mov	r16,r5
   36b3c:	28a3883a 	add	r17,r5,r2
   36b40:	81c00007 	ldb	r7,0(r16)
   36b44:	400b883a 	mov	r5,r8
   36b48:	9009883a 	mov	r4,r18
   36b4c:	39fff404 	addi	r7,r7,-48
   36b50:	01800284 	movi	r6,10
   36b54:	003685c0 	call	3685c <__multadd>
   36b58:	84000044 	addi	r16,r16,1
   36b5c:	1011883a 	mov	r8,r2
   36b60:	847ff71e 	bne	r16,r17,36b40 <__s2b+0xc4>
   36b64:	4005883a 	mov	r2,r8
   36b68:	dfc00617 	ldw	ra,24(sp)
   36b6c:	dd400517 	ldw	r21,20(sp)
   36b70:	dd000417 	ldw	r20,16(sp)
   36b74:	dcc00317 	ldw	r19,12(sp)
   36b78:	dc800217 	ldw	r18,8(sp)
   36b7c:	dc400117 	ldw	r17,4(sp)
   36b80:	dc000017 	ldw	r16,0(sp)
   36b84:	dec00704 	addi	sp,sp,28
   36b88:	f800283a 	ret
   36b8c:	99400284 	addi	r5,r19,10
   36b90:	003fe706 	br	36b30 <__s2b+0xb4>
   36b94:	000b883a 	mov	r5,zero
   36b98:	003fcd06 	br	36ad0 <__s2b+0x54>

00036b9c <_realloc_r>:
   36b9c:	defff404 	addi	sp,sp,-48
   36ba0:	dd800815 	stw	r22,32(sp)
   36ba4:	dc800415 	stw	r18,16(sp)
   36ba8:	dc400315 	stw	r17,12(sp)
   36bac:	dfc00b15 	stw	ra,44(sp)
   36bb0:	df000a15 	stw	fp,40(sp)
   36bb4:	ddc00915 	stw	r23,36(sp)
   36bb8:	dd400715 	stw	r21,28(sp)
   36bbc:	dd000615 	stw	r20,24(sp)
   36bc0:	dcc00515 	stw	r19,20(sp)
   36bc4:	dc000215 	stw	r16,8(sp)
   36bc8:	2825883a 	mov	r18,r5
   36bcc:	3023883a 	mov	r17,r6
   36bd0:	202d883a 	mov	r22,r4
   36bd4:	2800c926 	beq	r5,zero,36efc <_realloc_r+0x360>
   36bd8:	003a3c00 	call	3a3c0 <__malloc_lock>
   36bdc:	943ffe04 	addi	r16,r18,-8
   36be0:	88c002c4 	addi	r3,r17,11
   36be4:	00800584 	movi	r2,22
   36be8:	82000117 	ldw	r8,4(r16)
   36bec:	10c01b2e 	bgeu	r2,r3,36c5c <_realloc_r+0xc0>
   36bf0:	00bffe04 	movi	r2,-8
   36bf4:	188e703a 	and	r7,r3,r2
   36bf8:	3839883a 	mov	fp,r7
   36bfc:	38001a16 	blt	r7,zero,36c68 <_realloc_r+0xcc>
   36c00:	e4401936 	bltu	fp,r17,36c68 <_realloc_r+0xcc>
   36c04:	013fff04 	movi	r4,-4
   36c08:	4126703a 	and	r19,r8,r4
   36c0c:	99c02616 	blt	r19,r7,36ca8 <_realloc_r+0x10c>
   36c10:	802b883a 	mov	r21,r16
   36c14:	9829883a 	mov	r20,r19
   36c18:	84000204 	addi	r16,r16,8
   36c1c:	a80f883a 	mov	r7,r21
   36c20:	a70dc83a 	sub	r6,r20,fp
   36c24:	008003c4 	movi	r2,15
   36c28:	1180c136 	bltu	r2,r6,36f30 <_realloc_r+0x394>
   36c2c:	38800117 	ldw	r2,4(r7)
   36c30:	a549883a 	add	r4,r20,r21
   36c34:	1080004c 	andi	r2,r2,1
   36c38:	a084b03a 	or	r2,r20,r2
   36c3c:	38800115 	stw	r2,4(r7)
   36c40:	20c00117 	ldw	r3,4(r4)
   36c44:	18c00054 	ori	r3,r3,1
   36c48:	20c00115 	stw	r3,4(r4)
   36c4c:	b009883a 	mov	r4,r22
   36c50:	003a3e00 	call	3a3e0 <__malloc_unlock>
   36c54:	8023883a 	mov	r17,r16
   36c58:	00000606 	br	36c74 <_realloc_r+0xd8>
   36c5c:	01c00404 	movi	r7,16
   36c60:	3839883a 	mov	fp,r7
   36c64:	e47fe72e 	bgeu	fp,r17,36c04 <_realloc_r+0x68>
   36c68:	00800304 	movi	r2,12
   36c6c:	0023883a 	mov	r17,zero
   36c70:	b0800015 	stw	r2,0(r22)
   36c74:	8805883a 	mov	r2,r17
   36c78:	dfc00b17 	ldw	ra,44(sp)
   36c7c:	df000a17 	ldw	fp,40(sp)
   36c80:	ddc00917 	ldw	r23,36(sp)
   36c84:	dd800817 	ldw	r22,32(sp)
   36c88:	dd400717 	ldw	r21,28(sp)
   36c8c:	dd000617 	ldw	r20,24(sp)
   36c90:	dcc00517 	ldw	r19,20(sp)
   36c94:	dc800417 	ldw	r18,16(sp)
   36c98:	dc400317 	ldw	r17,12(sp)
   36c9c:	dc000217 	ldw	r16,8(sp)
   36ca0:	dec00c04 	addi	sp,sp,48
   36ca4:	f800283a 	ret
   36ca8:	00800074 	movhi	r2,1
   36cac:	1081e904 	addi	r2,r2,1956
   36cb0:	12400217 	ldw	r9,8(r2)
   36cb4:	84cd883a 	add	r6,r16,r19
   36cb8:	802b883a 	mov	r21,r16
   36cbc:	3240b926 	beq	r6,r9,36fa4 <_realloc_r+0x408>
   36cc0:	31400117 	ldw	r5,4(r6)
   36cc4:	00bfff84 	movi	r2,-2
   36cc8:	2884703a 	and	r2,r5,r2
   36ccc:	1185883a 	add	r2,r2,r6
   36cd0:	10c00117 	ldw	r3,4(r2)
   36cd4:	18c0004c 	andi	r3,r3,1
   36cd8:	1807003a 	cmpeq	r3,r3,zero
   36cdc:	1800a326 	beq	r3,zero,36f6c <_realloc_r+0x3d0>
   36ce0:	2908703a 	and	r4,r5,r4
   36ce4:	9929883a 	add	r20,r19,r4
   36ce8:	a1c0a30e 	bge	r20,r7,36f78 <_realloc_r+0x3dc>
   36cec:	4080004c 	andi	r2,r8,1
   36cf0:	1000551e 	bne	r2,zero,36e48 <_realloc_r+0x2ac>
   36cf4:	80800017 	ldw	r2,0(r16)
   36cf8:	80afc83a 	sub	r23,r16,r2
   36cfc:	b8c00117 	ldw	r3,4(r23)
   36d00:	00bfff04 	movi	r2,-4
   36d04:	1884703a 	and	r2,r3,r2
   36d08:	30002e26 	beq	r6,zero,36dc4 <_realloc_r+0x228>
   36d0c:	3240b926 	beq	r6,r9,36ff4 <_realloc_r+0x458>
   36d10:	98a9883a 	add	r20,r19,r2
   36d14:	2509883a 	add	r4,r4,r20
   36d18:	d9000015 	stw	r4,0(sp)
   36d1c:	21c02a16 	blt	r4,r7,36dc8 <_realloc_r+0x22c>
   36d20:	30800317 	ldw	r2,12(r6)
   36d24:	30c00217 	ldw	r3,8(r6)
   36d28:	01400904 	movi	r5,36
   36d2c:	99bfff04 	addi	r6,r19,-4
   36d30:	18800315 	stw	r2,12(r3)
   36d34:	10c00215 	stw	r3,8(r2)
   36d38:	b9000317 	ldw	r4,12(r23)
   36d3c:	b8800217 	ldw	r2,8(r23)
   36d40:	b82b883a 	mov	r21,r23
   36d44:	bc000204 	addi	r16,r23,8
   36d48:	20800215 	stw	r2,8(r4)
   36d4c:	11000315 	stw	r4,12(r2)
   36d50:	2980e436 	bltu	r5,r6,370e4 <_realloc_r+0x548>
   36d54:	008004c4 	movi	r2,19
   36d58:	9009883a 	mov	r4,r18
   36d5c:	8011883a 	mov	r8,r16
   36d60:	11800f2e 	bgeu	r2,r6,36da0 <_realloc_r+0x204>
   36d64:	90800017 	ldw	r2,0(r18)
   36d68:	ba000404 	addi	r8,r23,16
   36d6c:	91000204 	addi	r4,r18,8
   36d70:	b8800215 	stw	r2,8(r23)
   36d74:	90c00117 	ldw	r3,4(r18)
   36d78:	008006c4 	movi	r2,27
   36d7c:	b8c00315 	stw	r3,12(r23)
   36d80:	1180072e 	bgeu	r2,r6,36da0 <_realloc_r+0x204>
   36d84:	90c00217 	ldw	r3,8(r18)
   36d88:	ba000604 	addi	r8,r23,24
   36d8c:	91000404 	addi	r4,r18,16
   36d90:	b8c00415 	stw	r3,16(r23)
   36d94:	90800317 	ldw	r2,12(r18)
   36d98:	b8800515 	stw	r2,20(r23)
   36d9c:	3140e726 	beq	r6,r5,3713c <_realloc_r+0x5a0>
   36da0:	20800017 	ldw	r2,0(r4)
   36da4:	dd000017 	ldw	r20,0(sp)
   36da8:	b80f883a 	mov	r7,r23
   36dac:	40800015 	stw	r2,0(r8)
   36db0:	20c00117 	ldw	r3,4(r4)
   36db4:	40c00115 	stw	r3,4(r8)
   36db8:	20800217 	ldw	r2,8(r4)
   36dbc:	40800215 	stw	r2,8(r8)
   36dc0:	003f9706 	br	36c20 <_realloc_r+0x84>
   36dc4:	98a9883a 	add	r20,r19,r2
   36dc8:	a1c01f16 	blt	r20,r7,36e48 <_realloc_r+0x2ac>
   36dcc:	b8c00317 	ldw	r3,12(r23)
   36dd0:	b8800217 	ldw	r2,8(r23)
   36dd4:	99bfff04 	addi	r6,r19,-4
   36dd8:	01400904 	movi	r5,36
   36ddc:	b82b883a 	mov	r21,r23
   36de0:	18800215 	stw	r2,8(r3)
   36de4:	10c00315 	stw	r3,12(r2)
   36de8:	bc000204 	addi	r16,r23,8
   36dec:	2980c336 	bltu	r5,r6,370fc <_realloc_r+0x560>
   36df0:	008004c4 	movi	r2,19
   36df4:	9009883a 	mov	r4,r18
   36df8:	8011883a 	mov	r8,r16
   36dfc:	11800f2e 	bgeu	r2,r6,36e3c <_realloc_r+0x2a0>
   36e00:	90800017 	ldw	r2,0(r18)
   36e04:	ba000404 	addi	r8,r23,16
   36e08:	91000204 	addi	r4,r18,8
   36e0c:	b8800215 	stw	r2,8(r23)
   36e10:	90c00117 	ldw	r3,4(r18)
   36e14:	008006c4 	movi	r2,27
   36e18:	b8c00315 	stw	r3,12(r23)
   36e1c:	1180072e 	bgeu	r2,r6,36e3c <_realloc_r+0x2a0>
   36e20:	90c00217 	ldw	r3,8(r18)
   36e24:	ba000604 	addi	r8,r23,24
   36e28:	91000404 	addi	r4,r18,16
   36e2c:	b8c00415 	stw	r3,16(r23)
   36e30:	90800317 	ldw	r2,12(r18)
   36e34:	b8800515 	stw	r2,20(r23)
   36e38:	3140c726 	beq	r6,r5,37158 <_realloc_r+0x5bc>
   36e3c:	20800017 	ldw	r2,0(r4)
   36e40:	b80f883a 	mov	r7,r23
   36e44:	003fd906 	br	36dac <_realloc_r+0x210>
   36e48:	880b883a 	mov	r5,r17
   36e4c:	b009883a 	mov	r4,r22
   36e50:	003516c0 	call	3516c <_malloc_r>
   36e54:	1023883a 	mov	r17,r2
   36e58:	10002526 	beq	r2,zero,36ef0 <_realloc_r+0x354>
   36e5c:	80800117 	ldw	r2,4(r16)
   36e60:	00ffff84 	movi	r3,-2
   36e64:	893ffe04 	addi	r4,r17,-8
   36e68:	10c4703a 	and	r2,r2,r3
   36e6c:	8085883a 	add	r2,r16,r2
   36e70:	20809526 	beq	r4,r2,370c8 <_realloc_r+0x52c>
   36e74:	99bfff04 	addi	r6,r19,-4
   36e78:	01c00904 	movi	r7,36
   36e7c:	39804536 	bltu	r7,r6,36f94 <_realloc_r+0x3f8>
   36e80:	008004c4 	movi	r2,19
   36e84:	9009883a 	mov	r4,r18
   36e88:	880b883a 	mov	r5,r17
   36e8c:	11800f2e 	bgeu	r2,r6,36ecc <_realloc_r+0x330>
   36e90:	90800017 	ldw	r2,0(r18)
   36e94:	89400204 	addi	r5,r17,8
   36e98:	91000204 	addi	r4,r18,8
   36e9c:	88800015 	stw	r2,0(r17)
   36ea0:	90c00117 	ldw	r3,4(r18)
   36ea4:	008006c4 	movi	r2,27
   36ea8:	88c00115 	stw	r3,4(r17)
   36eac:	1180072e 	bgeu	r2,r6,36ecc <_realloc_r+0x330>
   36eb0:	90c00217 	ldw	r3,8(r18)
   36eb4:	89400404 	addi	r5,r17,16
   36eb8:	91000404 	addi	r4,r18,16
   36ebc:	88c00215 	stw	r3,8(r17)
   36ec0:	90800317 	ldw	r2,12(r18)
   36ec4:	88800315 	stw	r2,12(r17)
   36ec8:	31c09126 	beq	r6,r7,37110 <_realloc_r+0x574>
   36ecc:	20800017 	ldw	r2,0(r4)
   36ed0:	28800015 	stw	r2,0(r5)
   36ed4:	20c00117 	ldw	r3,4(r4)
   36ed8:	28c00115 	stw	r3,4(r5)
   36edc:	20800217 	ldw	r2,8(r4)
   36ee0:	28800215 	stw	r2,8(r5)
   36ee4:	900b883a 	mov	r5,r18
   36ee8:	b009883a 	mov	r4,r22
   36eec:	00345e40 	call	345e4 <_free_r>
   36ef0:	b009883a 	mov	r4,r22
   36ef4:	003a3e00 	call	3a3e0 <__malloc_unlock>
   36ef8:	003f5e06 	br	36c74 <_realloc_r+0xd8>
   36efc:	300b883a 	mov	r5,r6
   36f00:	dfc00b17 	ldw	ra,44(sp)
   36f04:	df000a17 	ldw	fp,40(sp)
   36f08:	ddc00917 	ldw	r23,36(sp)
   36f0c:	dd800817 	ldw	r22,32(sp)
   36f10:	dd400717 	ldw	r21,28(sp)
   36f14:	dd000617 	ldw	r20,24(sp)
   36f18:	dcc00517 	ldw	r19,20(sp)
   36f1c:	dc800417 	ldw	r18,16(sp)
   36f20:	dc400317 	ldw	r17,12(sp)
   36f24:	dc000217 	ldw	r16,8(sp)
   36f28:	dec00c04 	addi	sp,sp,48
   36f2c:	003516c1 	jmpi	3516c <_malloc_r>
   36f30:	38800117 	ldw	r2,4(r7)
   36f34:	e54b883a 	add	r5,fp,r21
   36f38:	31000054 	ori	r4,r6,1
   36f3c:	1080004c 	andi	r2,r2,1
   36f40:	1704b03a 	or	r2,r2,fp
   36f44:	38800115 	stw	r2,4(r7)
   36f48:	29000115 	stw	r4,4(r5)
   36f4c:	2987883a 	add	r3,r5,r6
   36f50:	18800117 	ldw	r2,4(r3)
   36f54:	29400204 	addi	r5,r5,8
   36f58:	b009883a 	mov	r4,r22
   36f5c:	10800054 	ori	r2,r2,1
   36f60:	18800115 	stw	r2,4(r3)
   36f64:	00345e40 	call	345e4 <_free_r>
   36f68:	003f3806 	br	36c4c <_realloc_r+0xb0>
   36f6c:	000d883a 	mov	r6,zero
   36f70:	0009883a 	mov	r4,zero
   36f74:	003f5d06 	br	36cec <_realloc_r+0x150>
   36f78:	30c00217 	ldw	r3,8(r6)
   36f7c:	30800317 	ldw	r2,12(r6)
   36f80:	800f883a 	mov	r7,r16
   36f84:	84000204 	addi	r16,r16,8
   36f88:	10c00215 	stw	r3,8(r2)
   36f8c:	18800315 	stw	r2,12(r3)
   36f90:	003f2306 	br	36c20 <_realloc_r+0x84>
   36f94:	8809883a 	mov	r4,r17
   36f98:	900b883a 	mov	r5,r18
   36f9c:	0035a300 	call	35a30 <memmove>
   36fa0:	003fd006 	br	36ee4 <_realloc_r+0x348>
   36fa4:	30800117 	ldw	r2,4(r6)
   36fa8:	e0c00404 	addi	r3,fp,16
   36fac:	1108703a 	and	r4,r2,r4
   36fb0:	9905883a 	add	r2,r19,r4
   36fb4:	10ff4d16 	blt	r2,r3,36cec <_realloc_r+0x150>
   36fb8:	1705c83a 	sub	r2,r2,fp
   36fbc:	870b883a 	add	r5,r16,fp
   36fc0:	10800054 	ori	r2,r2,1
   36fc4:	28800115 	stw	r2,4(r5)
   36fc8:	80c00117 	ldw	r3,4(r16)
   36fcc:	00800074 	movhi	r2,1
   36fd0:	1081e904 	addi	r2,r2,1956
   36fd4:	b009883a 	mov	r4,r22
   36fd8:	18c0004c 	andi	r3,r3,1
   36fdc:	e0c6b03a 	or	r3,fp,r3
   36fe0:	11400215 	stw	r5,8(r2)
   36fe4:	80c00115 	stw	r3,4(r16)
   36fe8:	003a3e00 	call	3a3e0 <__malloc_unlock>
   36fec:	84400204 	addi	r17,r16,8
   36ff0:	003f2006 	br	36c74 <_realloc_r+0xd8>
   36ff4:	98a9883a 	add	r20,r19,r2
   36ff8:	2509883a 	add	r4,r4,r20
   36ffc:	e0800404 	addi	r2,fp,16
   37000:	d9000115 	stw	r4,4(sp)
   37004:	20bf7016 	blt	r4,r2,36dc8 <_realloc_r+0x22c>
   37008:	b8c00317 	ldw	r3,12(r23)
   3700c:	b8800217 	ldw	r2,8(r23)
   37010:	99bfff04 	addi	r6,r19,-4
   37014:	01400904 	movi	r5,36
   37018:	18800215 	stw	r2,8(r3)
   3701c:	10c00315 	stw	r3,12(r2)
   37020:	bc400204 	addi	r17,r23,8
   37024:	29804136 	bltu	r5,r6,3712c <_realloc_r+0x590>
   37028:	008004c4 	movi	r2,19
   3702c:	9009883a 	mov	r4,r18
   37030:	880f883a 	mov	r7,r17
   37034:	11800f2e 	bgeu	r2,r6,37074 <_realloc_r+0x4d8>
   37038:	90800017 	ldw	r2,0(r18)
   3703c:	b9c00404 	addi	r7,r23,16
   37040:	91000204 	addi	r4,r18,8
   37044:	b8800215 	stw	r2,8(r23)
   37048:	90c00117 	ldw	r3,4(r18)
   3704c:	008006c4 	movi	r2,27
   37050:	b8c00315 	stw	r3,12(r23)
   37054:	1180072e 	bgeu	r2,r6,37074 <_realloc_r+0x4d8>
   37058:	90c00217 	ldw	r3,8(r18)
   3705c:	b9c00604 	addi	r7,r23,24
   37060:	91000404 	addi	r4,r18,16
   37064:	b8c00415 	stw	r3,16(r23)
   37068:	90800317 	ldw	r2,12(r18)
   3706c:	b8800515 	stw	r2,20(r23)
   37070:	31404026 	beq	r6,r5,37174 <_realloc_r+0x5d8>
   37074:	20800017 	ldw	r2,0(r4)
   37078:	38800015 	stw	r2,0(r7)
   3707c:	20c00117 	ldw	r3,4(r4)
   37080:	38c00115 	stw	r3,4(r7)
   37084:	20800217 	ldw	r2,8(r4)
   37088:	38800215 	stw	r2,8(r7)
   3708c:	d8c00117 	ldw	r3,4(sp)
   37090:	bf0b883a 	add	r5,r23,fp
   37094:	b009883a 	mov	r4,r22
   37098:	1f05c83a 	sub	r2,r3,fp
   3709c:	10800054 	ori	r2,r2,1
   370a0:	28800115 	stw	r2,4(r5)
   370a4:	b8c00117 	ldw	r3,4(r23)
   370a8:	00800074 	movhi	r2,1
   370ac:	1081e904 	addi	r2,r2,1956
   370b0:	11400215 	stw	r5,8(r2)
   370b4:	18c0004c 	andi	r3,r3,1
   370b8:	e0c6b03a 	or	r3,fp,r3
   370bc:	b8c00115 	stw	r3,4(r23)
   370c0:	003a3e00 	call	3a3e0 <__malloc_unlock>
   370c4:	003eeb06 	br	36c74 <_realloc_r+0xd8>
   370c8:	20800117 	ldw	r2,4(r4)
   370cc:	00ffff04 	movi	r3,-4
   370d0:	800f883a 	mov	r7,r16
   370d4:	10c4703a 	and	r2,r2,r3
   370d8:	98a9883a 	add	r20,r19,r2
   370dc:	84000204 	addi	r16,r16,8
   370e0:	003ecf06 	br	36c20 <_realloc_r+0x84>
   370e4:	900b883a 	mov	r5,r18
   370e8:	8009883a 	mov	r4,r16
   370ec:	0035a300 	call	35a30 <memmove>
   370f0:	dd000017 	ldw	r20,0(sp)
   370f4:	b80f883a 	mov	r7,r23
   370f8:	003ec906 	br	36c20 <_realloc_r+0x84>
   370fc:	900b883a 	mov	r5,r18
   37100:	8009883a 	mov	r4,r16
   37104:	0035a300 	call	35a30 <memmove>
   37108:	b80f883a 	mov	r7,r23
   3710c:	003ec406 	br	36c20 <_realloc_r+0x84>
   37110:	90c00417 	ldw	r3,16(r18)
   37114:	89400604 	addi	r5,r17,24
   37118:	91000604 	addi	r4,r18,24
   3711c:	88c00415 	stw	r3,16(r17)
   37120:	90800517 	ldw	r2,20(r18)
   37124:	88800515 	stw	r2,20(r17)
   37128:	003f6806 	br	36ecc <_realloc_r+0x330>
   3712c:	900b883a 	mov	r5,r18
   37130:	8809883a 	mov	r4,r17
   37134:	0035a300 	call	35a30 <memmove>
   37138:	003fd406 	br	3708c <_realloc_r+0x4f0>
   3713c:	90c00417 	ldw	r3,16(r18)
   37140:	91000604 	addi	r4,r18,24
   37144:	ba000804 	addi	r8,r23,32
   37148:	b8c00615 	stw	r3,24(r23)
   3714c:	90800517 	ldw	r2,20(r18)
   37150:	b8800715 	stw	r2,28(r23)
   37154:	003f1206 	br	36da0 <_realloc_r+0x204>
   37158:	90c00417 	ldw	r3,16(r18)
   3715c:	91000604 	addi	r4,r18,24
   37160:	ba000804 	addi	r8,r23,32
   37164:	b8c00615 	stw	r3,24(r23)
   37168:	90800517 	ldw	r2,20(r18)
   3716c:	b8800715 	stw	r2,28(r23)
   37170:	003f3206 	br	36e3c <_realloc_r+0x2a0>
   37174:	90c00417 	ldw	r3,16(r18)
   37178:	91000604 	addi	r4,r18,24
   3717c:	b9c00804 	addi	r7,r23,32
   37180:	b8c00615 	stw	r3,24(r23)
   37184:	90800517 	ldw	r2,20(r18)
   37188:	b8800715 	stw	r2,28(r23)
   3718c:	003fb906 	br	37074 <_realloc_r+0x4d8>

00037190 <__isinfd>:
   37190:	200d883a 	mov	r6,r4
   37194:	0109c83a 	sub	r4,zero,r4
   37198:	2188b03a 	or	r4,r4,r6
   3719c:	2008d7fa 	srli	r4,r4,31
   371a0:	00a00034 	movhi	r2,32768
   371a4:	10bfffc4 	addi	r2,r2,-1
   371a8:	1144703a 	and	r2,r2,r5
   371ac:	2088b03a 	or	r4,r4,r2
   371b0:	009ffc34 	movhi	r2,32752
   371b4:	1105c83a 	sub	r2,r2,r4
   371b8:	0087c83a 	sub	r3,zero,r2
   371bc:	10c4b03a 	or	r2,r2,r3
   371c0:	1004d7fa 	srli	r2,r2,31
   371c4:	00c00044 	movi	r3,1
   371c8:	1885c83a 	sub	r2,r3,r2
   371cc:	f800283a 	ret

000371d0 <__isnand>:
   371d0:	200d883a 	mov	r6,r4
   371d4:	0109c83a 	sub	r4,zero,r4
   371d8:	2188b03a 	or	r4,r4,r6
   371dc:	2008d7fa 	srli	r4,r4,31
   371e0:	00a00034 	movhi	r2,32768
   371e4:	10bfffc4 	addi	r2,r2,-1
   371e8:	1144703a 	and	r2,r2,r5
   371ec:	2088b03a 	or	r4,r4,r2
   371f0:	009ffc34 	movhi	r2,32752
   371f4:	1105c83a 	sub	r2,r2,r4
   371f8:	1004d7fa 	srli	r2,r2,31
   371fc:	f800283a 	ret

00037200 <_sbrk_r>:
   37200:	defffd04 	addi	sp,sp,-12
   37204:	dc000015 	stw	r16,0(sp)
   37208:	04000074 	movhi	r16,1
   3720c:	84078804 	addi	r16,r16,7712
   37210:	dc400115 	stw	r17,4(sp)
   37214:	80000015 	stw	zero,0(r16)
   37218:	2023883a 	mov	r17,r4
   3721c:	2809883a 	mov	r4,r5
   37220:	dfc00215 	stw	ra,8(sp)
   37224:	003a5e00 	call	3a5e0 <sbrk>
   37228:	1007883a 	mov	r3,r2
   3722c:	00bfffc4 	movi	r2,-1
   37230:	18800626 	beq	r3,r2,3724c <_sbrk_r+0x4c>
   37234:	1805883a 	mov	r2,r3
   37238:	dfc00217 	ldw	ra,8(sp)
   3723c:	dc400117 	ldw	r17,4(sp)
   37240:	dc000017 	ldw	r16,0(sp)
   37244:	dec00304 	addi	sp,sp,12
   37248:	f800283a 	ret
   3724c:	80800017 	ldw	r2,0(r16)
   37250:	103ff826 	beq	r2,zero,37234 <_sbrk_r+0x34>
   37254:	88800015 	stw	r2,0(r17)
   37258:	1805883a 	mov	r2,r3
   3725c:	dfc00217 	ldw	ra,8(sp)
   37260:	dc400117 	ldw	r17,4(sp)
   37264:	dc000017 	ldw	r16,0(sp)
   37268:	dec00304 	addi	sp,sp,12
   3726c:	f800283a 	ret

00037270 <__sclose>:
   37270:	2940038f 	ldh	r5,14(r5)
   37274:	00375a41 	jmpi	375a4 <_close_r>

00037278 <__sseek>:
   37278:	defffe04 	addi	sp,sp,-8
   3727c:	dc000015 	stw	r16,0(sp)
   37280:	2821883a 	mov	r16,r5
   37284:	2940038f 	ldh	r5,14(r5)
   37288:	dfc00115 	stw	ra,4(sp)
   3728c:	003781c0 	call	3781c <_lseek_r>
   37290:	1007883a 	mov	r3,r2
   37294:	00bfffc4 	movi	r2,-1
   37298:	18800926 	beq	r3,r2,372c0 <__sseek+0x48>
   3729c:	8080030b 	ldhu	r2,12(r16)
   372a0:	80c01415 	stw	r3,80(r16)
   372a4:	10840014 	ori	r2,r2,4096
   372a8:	8080030d 	sth	r2,12(r16)
   372ac:	1805883a 	mov	r2,r3
   372b0:	dfc00117 	ldw	ra,4(sp)
   372b4:	dc000017 	ldw	r16,0(sp)
   372b8:	dec00204 	addi	sp,sp,8
   372bc:	f800283a 	ret
   372c0:	8080030b 	ldhu	r2,12(r16)
   372c4:	10bbffcc 	andi	r2,r2,61439
   372c8:	8080030d 	sth	r2,12(r16)
   372cc:	1805883a 	mov	r2,r3
   372d0:	dfc00117 	ldw	ra,4(sp)
   372d4:	dc000017 	ldw	r16,0(sp)
   372d8:	dec00204 	addi	sp,sp,8
   372dc:	f800283a 	ret

000372e0 <__swrite>:
   372e0:	2880030b 	ldhu	r2,12(r5)
   372e4:	defffb04 	addi	sp,sp,-20
   372e8:	dcc00315 	stw	r19,12(sp)
   372ec:	1080400c 	andi	r2,r2,256
   372f0:	dc800215 	stw	r18,8(sp)
   372f4:	dc400115 	stw	r17,4(sp)
   372f8:	dc000015 	stw	r16,0(sp)
   372fc:	3027883a 	mov	r19,r6
   37300:	3825883a 	mov	r18,r7
   37304:	dfc00415 	stw	ra,16(sp)
   37308:	2821883a 	mov	r16,r5
   3730c:	000d883a 	mov	r6,zero
   37310:	01c00084 	movi	r7,2
   37314:	2023883a 	mov	r17,r4
   37318:	10000226 	beq	r2,zero,37324 <__swrite+0x44>
   3731c:	2940038f 	ldh	r5,14(r5)
   37320:	003781c0 	call	3781c <_lseek_r>
   37324:	8080030b 	ldhu	r2,12(r16)
   37328:	8140038f 	ldh	r5,14(r16)
   3732c:	8809883a 	mov	r4,r17
   37330:	10bbffcc 	andi	r2,r2,61439
   37334:	980d883a 	mov	r6,r19
   37338:	900f883a 	mov	r7,r18
   3733c:	8080030d 	sth	r2,12(r16)
   37340:	dfc00417 	ldw	ra,16(sp)
   37344:	dcc00317 	ldw	r19,12(sp)
   37348:	dc800217 	ldw	r18,8(sp)
   3734c:	dc400117 	ldw	r17,4(sp)
   37350:	dc000017 	ldw	r16,0(sp)
   37354:	dec00504 	addi	sp,sp,20
   37358:	00374781 	jmpi	37478 <_write_r>

0003735c <__sread>:
   3735c:	defffe04 	addi	sp,sp,-8
   37360:	dc000015 	stw	r16,0(sp)
   37364:	2821883a 	mov	r16,r5
   37368:	2940038f 	ldh	r5,14(r5)
   3736c:	dfc00115 	stw	ra,4(sp)
   37370:	00378940 	call	37894 <_read_r>
   37374:	1007883a 	mov	r3,r2
   37378:	10000816 	blt	r2,zero,3739c <__sread+0x40>
   3737c:	80801417 	ldw	r2,80(r16)
   37380:	10c5883a 	add	r2,r2,r3
   37384:	80801415 	stw	r2,80(r16)
   37388:	1805883a 	mov	r2,r3
   3738c:	dfc00117 	ldw	ra,4(sp)
   37390:	dc000017 	ldw	r16,0(sp)
   37394:	dec00204 	addi	sp,sp,8
   37398:	f800283a 	ret
   3739c:	8080030b 	ldhu	r2,12(r16)
   373a0:	10bbffcc 	andi	r2,r2,61439
   373a4:	8080030d 	sth	r2,12(r16)
   373a8:	1805883a 	mov	r2,r3
   373ac:	dfc00117 	ldw	ra,4(sp)
   373b0:	dc000017 	ldw	r16,0(sp)
   373b4:	dec00204 	addi	sp,sp,8
   373b8:	f800283a 	ret

000373bc <strcmp>:
   373bc:	2144b03a 	or	r2,r4,r5
   373c0:	108000cc 	andi	r2,r2,3
   373c4:	10001d1e 	bne	r2,zero,3743c <strcmp+0x80>
   373c8:	200f883a 	mov	r7,r4
   373cc:	28800017 	ldw	r2,0(r5)
   373d0:	21000017 	ldw	r4,0(r4)
   373d4:	280d883a 	mov	r6,r5
   373d8:	2080161e 	bne	r4,r2,37434 <strcmp+0x78>
   373dc:	023fbff4 	movhi	r8,65279
   373e0:	423fbfc4 	addi	r8,r8,-257
   373e4:	2207883a 	add	r3,r4,r8
   373e8:	01602074 	movhi	r5,32897
   373ec:	29602004 	addi	r5,r5,-32640
   373f0:	1946703a 	and	r3,r3,r5
   373f4:	0104303a 	nor	r2,zero,r4
   373f8:	10c4703a 	and	r2,r2,r3
   373fc:	10001c1e 	bne	r2,zero,37470 <strcmp+0xb4>
   37400:	4013883a 	mov	r9,r8
   37404:	2811883a 	mov	r8,r5
   37408:	00000106 	br	37410 <strcmp+0x54>
   3740c:	1800181e 	bne	r3,zero,37470 <strcmp+0xb4>
   37410:	39c00104 	addi	r7,r7,4
   37414:	39000017 	ldw	r4,0(r7)
   37418:	31800104 	addi	r6,r6,4
   3741c:	31400017 	ldw	r5,0(r6)
   37420:	2245883a 	add	r2,r4,r9
   37424:	1204703a 	and	r2,r2,r8
   37428:	0106303a 	nor	r3,zero,r4
   3742c:	1886703a 	and	r3,r3,r2
   37430:	217ff626 	beq	r4,r5,3740c <strcmp+0x50>
   37434:	3809883a 	mov	r4,r7
   37438:	300b883a 	mov	r5,r6
   3743c:	20c00007 	ldb	r3,0(r4)
   37440:	1800051e 	bne	r3,zero,37458 <strcmp+0x9c>
   37444:	00000606 	br	37460 <strcmp+0xa4>
   37448:	21000044 	addi	r4,r4,1
   3744c:	20c00007 	ldb	r3,0(r4)
   37450:	29400044 	addi	r5,r5,1
   37454:	18000226 	beq	r3,zero,37460 <strcmp+0xa4>
   37458:	28800007 	ldb	r2,0(r5)
   3745c:	18bffa26 	beq	r3,r2,37448 <strcmp+0x8c>
   37460:	20c00003 	ldbu	r3,0(r4)
   37464:	28800003 	ldbu	r2,0(r5)
   37468:	1885c83a 	sub	r2,r3,r2
   3746c:	f800283a 	ret
   37470:	0005883a 	mov	r2,zero
   37474:	f800283a 	ret

00037478 <_write_r>:
   37478:	defffd04 	addi	sp,sp,-12
   3747c:	dc000015 	stw	r16,0(sp)
   37480:	04000074 	movhi	r16,1
   37484:	84078804 	addi	r16,r16,7712
   37488:	dc400115 	stw	r17,4(sp)
   3748c:	80000015 	stw	zero,0(r16)
   37490:	2023883a 	mov	r17,r4
   37494:	2809883a 	mov	r4,r5
   37498:	300b883a 	mov	r5,r6
   3749c:	380d883a 	mov	r6,r7
   374a0:	dfc00215 	stw	ra,8(sp)
   374a4:	003a69c0 	call	3a69c <write>
   374a8:	1007883a 	mov	r3,r2
   374ac:	00bfffc4 	movi	r2,-1
   374b0:	18800626 	beq	r3,r2,374cc <_write_r+0x54>
   374b4:	1805883a 	mov	r2,r3
   374b8:	dfc00217 	ldw	ra,8(sp)
   374bc:	dc400117 	ldw	r17,4(sp)
   374c0:	dc000017 	ldw	r16,0(sp)
   374c4:	dec00304 	addi	sp,sp,12
   374c8:	f800283a 	ret
   374cc:	80800017 	ldw	r2,0(r16)
   374d0:	103ff826 	beq	r2,zero,374b4 <_write_r+0x3c>
   374d4:	88800015 	stw	r2,0(r17)
   374d8:	1805883a 	mov	r2,r3
   374dc:	dfc00217 	ldw	ra,8(sp)
   374e0:	dc400117 	ldw	r17,4(sp)
   374e4:	dc000017 	ldw	r16,0(sp)
   374e8:	dec00304 	addi	sp,sp,12
   374ec:	f800283a 	ret

000374f0 <_calloc_r>:
   374f0:	298b383a 	mul	r5,r5,r6
   374f4:	defffe04 	addi	sp,sp,-8
   374f8:	dc000015 	stw	r16,0(sp)
   374fc:	dfc00115 	stw	ra,4(sp)
   37500:	003516c0 	call	3516c <_malloc_r>
   37504:	1021883a 	mov	r16,r2
   37508:	01c00904 	movi	r7,36
   3750c:	10000d26 	beq	r2,zero,37544 <_calloc_r+0x54>
   37510:	10ffff17 	ldw	r3,-4(r2)
   37514:	1009883a 	mov	r4,r2
   37518:	00bfff04 	movi	r2,-4
   3751c:	1886703a 	and	r3,r3,r2
   37520:	1887883a 	add	r3,r3,r2
   37524:	180d883a 	mov	r6,r3
   37528:	000b883a 	mov	r5,zero
   3752c:	38c01736 	bltu	r7,r3,3758c <_calloc_r+0x9c>
   37530:	008004c4 	movi	r2,19
   37534:	10c00836 	bltu	r2,r3,37558 <_calloc_r+0x68>
   37538:	20000215 	stw	zero,8(r4)
   3753c:	20000015 	stw	zero,0(r4)
   37540:	20000115 	stw	zero,4(r4)
   37544:	8005883a 	mov	r2,r16
   37548:	dfc00117 	ldw	ra,4(sp)
   3754c:	dc000017 	ldw	r16,0(sp)
   37550:	dec00204 	addi	sp,sp,8
   37554:	f800283a 	ret
   37558:	008006c4 	movi	r2,27
   3755c:	80000015 	stw	zero,0(r16)
   37560:	80000115 	stw	zero,4(r16)
   37564:	81000204 	addi	r4,r16,8
   37568:	10fff32e 	bgeu	r2,r3,37538 <_calloc_r+0x48>
   3756c:	80000215 	stw	zero,8(r16)
   37570:	80000315 	stw	zero,12(r16)
   37574:	81000404 	addi	r4,r16,16
   37578:	19ffef1e 	bne	r3,r7,37538 <_calloc_r+0x48>
   3757c:	81000604 	addi	r4,r16,24
   37580:	80000415 	stw	zero,16(r16)
   37584:	80000515 	stw	zero,20(r16)
   37588:	003feb06 	br	37538 <_calloc_r+0x48>
   3758c:	0035b100 	call	35b10 <memset>
   37590:	8005883a 	mov	r2,r16
   37594:	dfc00117 	ldw	ra,4(sp)
   37598:	dc000017 	ldw	r16,0(sp)
   3759c:	dec00204 	addi	sp,sp,8
   375a0:	f800283a 	ret

000375a4 <_close_r>:
   375a4:	defffd04 	addi	sp,sp,-12
   375a8:	dc000015 	stw	r16,0(sp)
   375ac:	04000074 	movhi	r16,1
   375b0:	84078804 	addi	r16,r16,7712
   375b4:	dc400115 	stw	r17,4(sp)
   375b8:	80000015 	stw	zero,0(r16)
   375bc:	2023883a 	mov	r17,r4
   375c0:	2809883a 	mov	r4,r5
   375c4:	dfc00215 	stw	ra,8(sp)
   375c8:	0039d3c0 	call	39d3c <close>
   375cc:	1007883a 	mov	r3,r2
   375d0:	00bfffc4 	movi	r2,-1
   375d4:	18800626 	beq	r3,r2,375f0 <_close_r+0x4c>
   375d8:	1805883a 	mov	r2,r3
   375dc:	dfc00217 	ldw	ra,8(sp)
   375e0:	dc400117 	ldw	r17,4(sp)
   375e4:	dc000017 	ldw	r16,0(sp)
   375e8:	dec00304 	addi	sp,sp,12
   375ec:	f800283a 	ret
   375f0:	80800017 	ldw	r2,0(r16)
   375f4:	103ff826 	beq	r2,zero,375d8 <_close_r+0x34>
   375f8:	88800015 	stw	r2,0(r17)
   375fc:	1805883a 	mov	r2,r3
   37600:	dfc00217 	ldw	ra,8(sp)
   37604:	dc400117 	ldw	r17,4(sp)
   37608:	dc000017 	ldw	r16,0(sp)
   3760c:	dec00304 	addi	sp,sp,12
   37610:	f800283a 	ret

00037614 <_fclose_r>:
   37614:	defffc04 	addi	sp,sp,-16
   37618:	dc400115 	stw	r17,4(sp)
   3761c:	dc000015 	stw	r16,0(sp)
   37620:	dfc00315 	stw	ra,12(sp)
   37624:	dc800215 	stw	r18,8(sp)
   37628:	2821883a 	mov	r16,r5
   3762c:	2023883a 	mov	r17,r4
   37630:	28002926 	beq	r5,zero,376d8 <_fclose_r+0xc4>
   37634:	00342500 	call	34250 <__sfp_lock_acquire>
   37638:	88000226 	beq	r17,zero,37644 <_fclose_r+0x30>
   3763c:	88800e17 	ldw	r2,56(r17)
   37640:	10002d26 	beq	r2,zero,376f8 <_fclose_r+0xe4>
   37644:	8080030f 	ldh	r2,12(r16)
   37648:	10002226 	beq	r2,zero,376d4 <_fclose_r+0xc0>
   3764c:	8809883a 	mov	r4,r17
   37650:	800b883a 	mov	r5,r16
   37654:	0033fc80 	call	33fc8 <_fflush_r>
   37658:	1025883a 	mov	r18,r2
   3765c:	80800b17 	ldw	r2,44(r16)
   37660:	10000426 	beq	r2,zero,37674 <_fclose_r+0x60>
   37664:	81400717 	ldw	r5,28(r16)
   37668:	8809883a 	mov	r4,r17
   3766c:	103ee83a 	callr	r2
   37670:	10002a16 	blt	r2,zero,3771c <_fclose_r+0x108>
   37674:	8080030b 	ldhu	r2,12(r16)
   37678:	1080200c 	andi	r2,r2,128
   3767c:	1000231e 	bne	r2,zero,3770c <_fclose_r+0xf8>
   37680:	81400c17 	ldw	r5,48(r16)
   37684:	28000526 	beq	r5,zero,3769c <_fclose_r+0x88>
   37688:	80801004 	addi	r2,r16,64
   3768c:	28800226 	beq	r5,r2,37698 <_fclose_r+0x84>
   37690:	8809883a 	mov	r4,r17
   37694:	00345e40 	call	345e4 <_free_r>
   37698:	80000c15 	stw	zero,48(r16)
   3769c:	81401117 	ldw	r5,68(r16)
   376a0:	28000326 	beq	r5,zero,376b0 <_fclose_r+0x9c>
   376a4:	8809883a 	mov	r4,r17
   376a8:	00345e40 	call	345e4 <_free_r>
   376ac:	80001115 	stw	zero,68(r16)
   376b0:	8000030d 	sth	zero,12(r16)
   376b4:	00342540 	call	34254 <__sfp_lock_release>
   376b8:	9005883a 	mov	r2,r18
   376bc:	dfc00317 	ldw	ra,12(sp)
   376c0:	dc800217 	ldw	r18,8(sp)
   376c4:	dc400117 	ldw	r17,4(sp)
   376c8:	dc000017 	ldw	r16,0(sp)
   376cc:	dec00404 	addi	sp,sp,16
   376d0:	f800283a 	ret
   376d4:	00342540 	call	34254 <__sfp_lock_release>
   376d8:	0025883a 	mov	r18,zero
   376dc:	9005883a 	mov	r2,r18
   376e0:	dfc00317 	ldw	ra,12(sp)
   376e4:	dc800217 	ldw	r18,8(sp)
   376e8:	dc400117 	ldw	r17,4(sp)
   376ec:	dc000017 	ldw	r16,0(sp)
   376f0:	dec00404 	addi	sp,sp,16
   376f4:	f800283a 	ret
   376f8:	8809883a 	mov	r4,r17
   376fc:	00342600 	call	34260 <__sinit>
   37700:	8080030f 	ldh	r2,12(r16)
   37704:	103fd11e 	bne	r2,zero,3764c <_fclose_r+0x38>
   37708:	003ff206 	br	376d4 <_fclose_r+0xc0>
   3770c:	81400417 	ldw	r5,16(r16)
   37710:	8809883a 	mov	r4,r17
   37714:	00345e40 	call	345e4 <_free_r>
   37718:	003fd906 	br	37680 <_fclose_r+0x6c>
   3771c:	04bfffc4 	movi	r18,-1
   37720:	003fd406 	br	37674 <_fclose_r+0x60>

00037724 <fclose>:
   37724:	00800074 	movhi	r2,1
   37728:	10876d04 	addi	r2,r2,7604
   3772c:	200b883a 	mov	r5,r4
   37730:	11000017 	ldw	r4,0(r2)
   37734:	00376141 	jmpi	37614 <_fclose_r>

00037738 <_fstat_r>:
   37738:	defffd04 	addi	sp,sp,-12
   3773c:	dc000015 	stw	r16,0(sp)
   37740:	04000074 	movhi	r16,1
   37744:	84078804 	addi	r16,r16,7712
   37748:	dc400115 	stw	r17,4(sp)
   3774c:	80000015 	stw	zero,0(r16)
   37750:	2023883a 	mov	r17,r4
   37754:	2809883a 	mov	r4,r5
   37758:	300b883a 	mov	r5,r6
   3775c:	dfc00215 	stw	ra,8(sp)
   37760:	0039ec40 	call	39ec4 <fstat>
   37764:	1007883a 	mov	r3,r2
   37768:	00bfffc4 	movi	r2,-1
   3776c:	18800626 	beq	r3,r2,37788 <_fstat_r+0x50>
   37770:	1805883a 	mov	r2,r3
   37774:	dfc00217 	ldw	ra,8(sp)
   37778:	dc400117 	ldw	r17,4(sp)
   3777c:	dc000017 	ldw	r16,0(sp)
   37780:	dec00304 	addi	sp,sp,12
   37784:	f800283a 	ret
   37788:	80800017 	ldw	r2,0(r16)
   3778c:	103ff826 	beq	r2,zero,37770 <_fstat_r+0x38>
   37790:	88800015 	stw	r2,0(r17)
   37794:	1805883a 	mov	r2,r3
   37798:	dfc00217 	ldw	ra,8(sp)
   3779c:	dc400117 	ldw	r17,4(sp)
   377a0:	dc000017 	ldw	r16,0(sp)
   377a4:	dec00304 	addi	sp,sp,12
   377a8:	f800283a 	ret

000377ac <_isatty_r>:
   377ac:	defffd04 	addi	sp,sp,-12
   377b0:	dc000015 	stw	r16,0(sp)
   377b4:	04000074 	movhi	r16,1
   377b8:	84078804 	addi	r16,r16,7712
   377bc:	dc400115 	stw	r17,4(sp)
   377c0:	80000015 	stw	zero,0(r16)
   377c4:	2023883a 	mov	r17,r4
   377c8:	2809883a 	mov	r4,r5
   377cc:	dfc00215 	stw	ra,8(sp)
   377d0:	0039ff80 	call	39ff8 <isatty>
   377d4:	1007883a 	mov	r3,r2
   377d8:	00bfffc4 	movi	r2,-1
   377dc:	18800626 	beq	r3,r2,377f8 <_isatty_r+0x4c>
   377e0:	1805883a 	mov	r2,r3
   377e4:	dfc00217 	ldw	ra,8(sp)
   377e8:	dc400117 	ldw	r17,4(sp)
   377ec:	dc000017 	ldw	r16,0(sp)
   377f0:	dec00304 	addi	sp,sp,12
   377f4:	f800283a 	ret
   377f8:	80800017 	ldw	r2,0(r16)
   377fc:	103ff826 	beq	r2,zero,377e0 <_isatty_r+0x34>
   37800:	88800015 	stw	r2,0(r17)
   37804:	1805883a 	mov	r2,r3
   37808:	dfc00217 	ldw	ra,8(sp)
   3780c:	dc400117 	ldw	r17,4(sp)
   37810:	dc000017 	ldw	r16,0(sp)
   37814:	dec00304 	addi	sp,sp,12
   37818:	f800283a 	ret

0003781c <_lseek_r>:
   3781c:	defffd04 	addi	sp,sp,-12
   37820:	dc000015 	stw	r16,0(sp)
   37824:	04000074 	movhi	r16,1
   37828:	84078804 	addi	r16,r16,7712
   3782c:	dc400115 	stw	r17,4(sp)
   37830:	80000015 	stw	zero,0(r16)
   37834:	2023883a 	mov	r17,r4
   37838:	2809883a 	mov	r4,r5
   3783c:	300b883a 	mov	r5,r6
   37840:	380d883a 	mov	r6,r7
   37844:	dfc00215 	stw	ra,8(sp)
   37848:	003a2040 	call	3a204 <lseek>
   3784c:	1007883a 	mov	r3,r2
   37850:	00bfffc4 	movi	r2,-1
   37854:	18800626 	beq	r3,r2,37870 <_lseek_r+0x54>
   37858:	1805883a 	mov	r2,r3
   3785c:	dfc00217 	ldw	ra,8(sp)
   37860:	dc400117 	ldw	r17,4(sp)
   37864:	dc000017 	ldw	r16,0(sp)
   37868:	dec00304 	addi	sp,sp,12
   3786c:	f800283a 	ret
   37870:	80800017 	ldw	r2,0(r16)
   37874:	103ff826 	beq	r2,zero,37858 <_lseek_r+0x3c>
   37878:	88800015 	stw	r2,0(r17)
   3787c:	1805883a 	mov	r2,r3
   37880:	dfc00217 	ldw	ra,8(sp)
   37884:	dc400117 	ldw	r17,4(sp)
   37888:	dc000017 	ldw	r16,0(sp)
   3788c:	dec00304 	addi	sp,sp,12
   37890:	f800283a 	ret

00037894 <_read_r>:
   37894:	defffd04 	addi	sp,sp,-12
   37898:	dc000015 	stw	r16,0(sp)
   3789c:	04000074 	movhi	r16,1
   378a0:	84078804 	addi	r16,r16,7712
   378a4:	dc400115 	stw	r17,4(sp)
   378a8:	80000015 	stw	zero,0(r16)
   378ac:	2023883a 	mov	r17,r4
   378b0:	2809883a 	mov	r4,r5
   378b4:	300b883a 	mov	r5,r6
   378b8:	380d883a 	mov	r6,r7
   378bc:	dfc00215 	stw	ra,8(sp)
   378c0:	003a4000 	call	3a400 <read>
   378c4:	1007883a 	mov	r3,r2
   378c8:	00bfffc4 	movi	r2,-1
   378cc:	18800626 	beq	r3,r2,378e8 <_read_r+0x54>
   378d0:	1805883a 	mov	r2,r3
   378d4:	dfc00217 	ldw	ra,8(sp)
   378d8:	dc400117 	ldw	r17,4(sp)
   378dc:	dc000017 	ldw	r16,0(sp)
   378e0:	dec00304 	addi	sp,sp,12
   378e4:	f800283a 	ret
   378e8:	80800017 	ldw	r2,0(r16)
   378ec:	103ff826 	beq	r2,zero,378d0 <_read_r+0x3c>
   378f0:	88800015 	stw	r2,0(r17)
   378f4:	1805883a 	mov	r2,r3
   378f8:	dfc00217 	ldw	ra,8(sp)
   378fc:	dc400117 	ldw	r17,4(sp)
   37900:	dc000017 	ldw	r16,0(sp)
   37904:	dec00304 	addi	sp,sp,12
   37908:	f800283a 	ret

0003790c <__udivdi3>:
   3790c:	defff004 	addi	sp,sp,-64
   37910:	2005883a 	mov	r2,r4
   37914:	3011883a 	mov	r8,r6
   37918:	df000e15 	stw	fp,56(sp)
   3791c:	dd000a15 	stw	r20,40(sp)
   37920:	dc000615 	stw	r16,24(sp)
   37924:	dfc00f15 	stw	ra,60(sp)
   37928:	ddc00d15 	stw	r23,52(sp)
   3792c:	dd800c15 	stw	r22,48(sp)
   37930:	dd400b15 	stw	r21,44(sp)
   37934:	dcc00915 	stw	r19,36(sp)
   37938:	dc800815 	stw	r18,32(sp)
   3793c:	dc400715 	stw	r17,28(sp)
   37940:	4021883a 	mov	r16,r8
   37944:	1039883a 	mov	fp,r2
   37948:	2829883a 	mov	r20,r5
   3794c:	38003b1e 	bne	r7,zero,37a3c <__udivdi3+0x130>
   37950:	2a005c36 	bltu	r5,r8,37ac4 <__udivdi3+0x1b8>
   37954:	4000a626 	beq	r8,zero,37bf0 <__udivdi3+0x2e4>
   37958:	00bfffd4 	movui	r2,65535
   3795c:	14009e36 	bltu	r2,r16,37bd8 <__udivdi3+0x2cc>
   37960:	00803fc4 	movi	r2,255
   37964:	14013d36 	bltu	r2,r16,37e5c <__udivdi3+0x550>
   37968:	000b883a 	mov	r5,zero
   3796c:	0005883a 	mov	r2,zero
   37970:	8084d83a 	srl	r2,r16,r2
   37974:	01000074 	movhi	r4,1
   37978:	21009904 	addi	r4,r4,612
   3797c:	01800804 	movi	r6,32
   37980:	1105883a 	add	r2,r2,r4
   37984:	10c00003 	ldbu	r3,0(r2)
   37988:	28c7883a 	add	r3,r5,r3
   3798c:	30edc83a 	sub	r22,r6,r3
   37990:	b000ee1e 	bne	r22,zero,37d4c <__udivdi3+0x440>
   37994:	802ad43a 	srli	r21,r16,16
   37998:	00800044 	movi	r2,1
   3799c:	a423c83a 	sub	r17,r20,r16
   379a0:	85ffffcc 	andi	r23,r16,65535
   379a4:	d8800315 	stw	r2,12(sp)
   379a8:	8809883a 	mov	r4,r17
   379ac:	a80b883a 	mov	r5,r21
   379b0:	00397000 	call	39700 <__udivsi3>
   379b4:	8809883a 	mov	r4,r17
   379b8:	a80b883a 	mov	r5,r21
   379bc:	102d883a 	mov	r22,r2
   379c0:	00397080 	call	39708 <__umodsi3>
   379c4:	1004943a 	slli	r2,r2,16
   379c8:	e006d43a 	srli	r3,fp,16
   379cc:	bda3383a 	mul	r17,r23,r22
   379d0:	10c4b03a 	or	r2,r2,r3
   379d4:	1440042e 	bgeu	r2,r17,379e8 <__udivdi3+0xdc>
   379d8:	1405883a 	add	r2,r2,r16
   379dc:	b5bfffc4 	addi	r22,r22,-1
   379e0:	14000136 	bltu	r2,r16,379e8 <__udivdi3+0xdc>
   379e4:	14413d36 	bltu	r2,r17,37edc <__udivdi3+0x5d0>
   379e8:	1463c83a 	sub	r17,r2,r17
   379ec:	8809883a 	mov	r4,r17
   379f0:	a80b883a 	mov	r5,r21
   379f4:	00397000 	call	39700 <__udivsi3>
   379f8:	8809883a 	mov	r4,r17
   379fc:	a80b883a 	mov	r5,r21
   37a00:	1029883a 	mov	r20,r2
   37a04:	00397080 	call	39708 <__umodsi3>
   37a08:	1004943a 	slli	r2,r2,16
   37a0c:	bd09383a 	mul	r4,r23,r20
   37a10:	e0ffffcc 	andi	r3,fp,65535
   37a14:	10c4b03a 	or	r2,r2,r3
   37a18:	1100042e 	bgeu	r2,r4,37a2c <__udivdi3+0x120>
   37a1c:	8085883a 	add	r2,r16,r2
   37a20:	a53fffc4 	addi	r20,r20,-1
   37a24:	14000136 	bltu	r2,r16,37a2c <__udivdi3+0x120>
   37a28:	11012036 	bltu	r2,r4,37eac <__udivdi3+0x5a0>
   37a2c:	b004943a 	slli	r2,r22,16
   37a30:	d9000317 	ldw	r4,12(sp)
   37a34:	a084b03a 	or	r2,r20,r2
   37a38:	00001506 	br	37a90 <__udivdi3+0x184>
   37a3c:	380d883a 	mov	r6,r7
   37a40:	29c06236 	bltu	r5,r7,37bcc <__udivdi3+0x2c0>
   37a44:	00bfffd4 	movui	r2,65535
   37a48:	11c05a36 	bltu	r2,r7,37bb4 <__udivdi3+0x2a8>
   37a4c:	00803fc4 	movi	r2,255
   37a50:	11c0fc36 	bltu	r2,r7,37e44 <__udivdi3+0x538>
   37a54:	000b883a 	mov	r5,zero
   37a58:	0005883a 	mov	r2,zero
   37a5c:	3084d83a 	srl	r2,r6,r2
   37a60:	01000074 	movhi	r4,1
   37a64:	21009904 	addi	r4,r4,612
   37a68:	01c00804 	movi	r7,32
   37a6c:	1105883a 	add	r2,r2,r4
   37a70:	10c00003 	ldbu	r3,0(r2)
   37a74:	28c7883a 	add	r3,r5,r3
   37a78:	38efc83a 	sub	r23,r7,r3
   37a7c:	b800691e 	bne	r23,zero,37c24 <__udivdi3+0x318>
   37a80:	35000136 	bltu	r6,r20,37a88 <__udivdi3+0x17c>
   37a84:	e4005136 	bltu	fp,r16,37bcc <__udivdi3+0x2c0>
   37a88:	00800044 	movi	r2,1
   37a8c:	0009883a 	mov	r4,zero
   37a90:	2007883a 	mov	r3,r4
   37a94:	dfc00f17 	ldw	ra,60(sp)
   37a98:	df000e17 	ldw	fp,56(sp)
   37a9c:	ddc00d17 	ldw	r23,52(sp)
   37aa0:	dd800c17 	ldw	r22,48(sp)
   37aa4:	dd400b17 	ldw	r21,44(sp)
   37aa8:	dd000a17 	ldw	r20,40(sp)
   37aac:	dcc00917 	ldw	r19,36(sp)
   37ab0:	dc800817 	ldw	r18,32(sp)
   37ab4:	dc400717 	ldw	r17,28(sp)
   37ab8:	dc000617 	ldw	r16,24(sp)
   37abc:	dec01004 	addi	sp,sp,64
   37ac0:	f800283a 	ret
   37ac4:	00bfffd4 	movui	r2,65535
   37ac8:	12005036 	bltu	r2,r8,37c0c <__udivdi3+0x300>
   37acc:	00803fc4 	movi	r2,255
   37ad0:	1200e836 	bltu	r2,r8,37e74 <__udivdi3+0x568>
   37ad4:	000b883a 	mov	r5,zero
   37ad8:	0005883a 	mov	r2,zero
   37adc:	8084d83a 	srl	r2,r16,r2
   37ae0:	01000074 	movhi	r4,1
   37ae4:	21009904 	addi	r4,r4,612
   37ae8:	01800804 	movi	r6,32
   37aec:	1105883a 	add	r2,r2,r4
   37af0:	10c00003 	ldbu	r3,0(r2)
   37af4:	28c7883a 	add	r3,r5,r3
   37af8:	30cbc83a 	sub	r5,r6,r3
   37afc:	28000626 	beq	r5,zero,37b18 <__udivdi3+0x20c>
   37b00:	3145c83a 	sub	r2,r6,r5
   37b04:	e084d83a 	srl	r2,fp,r2
   37b08:	a146983a 	sll	r3,r20,r5
   37b0c:	e178983a 	sll	fp,fp,r5
   37b10:	8160983a 	sll	r16,r16,r5
   37b14:	18a8b03a 	or	r20,r3,r2
   37b18:	802ad43a 	srli	r21,r16,16
   37b1c:	a009883a 	mov	r4,r20
   37b20:	85ffffcc 	andi	r23,r16,65535
   37b24:	a80b883a 	mov	r5,r21
   37b28:	00397000 	call	39700 <__udivsi3>
   37b2c:	a009883a 	mov	r4,r20
   37b30:	a80b883a 	mov	r5,r21
   37b34:	102d883a 	mov	r22,r2
   37b38:	00397080 	call	39708 <__umodsi3>
   37b3c:	1004943a 	slli	r2,r2,16
   37b40:	e006d43a 	srli	r3,fp,16
   37b44:	bda3383a 	mul	r17,r23,r22
   37b48:	10c4b03a 	or	r2,r2,r3
   37b4c:	1440042e 	bgeu	r2,r17,37b60 <__udivdi3+0x254>
   37b50:	1405883a 	add	r2,r2,r16
   37b54:	b5bfffc4 	addi	r22,r22,-1
   37b58:	14000136 	bltu	r2,r16,37b60 <__udivdi3+0x254>
   37b5c:	1440d536 	bltu	r2,r17,37eb4 <__udivdi3+0x5a8>
   37b60:	1463c83a 	sub	r17,r2,r17
   37b64:	8809883a 	mov	r4,r17
   37b68:	a80b883a 	mov	r5,r21
   37b6c:	00397000 	call	39700 <__udivsi3>
   37b70:	8809883a 	mov	r4,r17
   37b74:	a80b883a 	mov	r5,r21
   37b78:	1029883a 	mov	r20,r2
   37b7c:	00397080 	call	39708 <__umodsi3>
   37b80:	1004943a 	slli	r2,r2,16
   37b84:	bd09383a 	mul	r4,r23,r20
   37b88:	e0ffffcc 	andi	r3,fp,65535
   37b8c:	10c4b03a 	or	r2,r2,r3
   37b90:	1100042e 	bgeu	r2,r4,37ba4 <__udivdi3+0x298>
   37b94:	8085883a 	add	r2,r16,r2
   37b98:	a53fffc4 	addi	r20,r20,-1
   37b9c:	14000136 	bltu	r2,r16,37ba4 <__udivdi3+0x298>
   37ba0:	1100c736 	bltu	r2,r4,37ec0 <__udivdi3+0x5b4>
   37ba4:	b004943a 	slli	r2,r22,16
   37ba8:	0009883a 	mov	r4,zero
   37bac:	a084b03a 	or	r2,r20,r2
   37bb0:	003fb706 	br	37a90 <__udivdi3+0x184>
   37bb4:	00804034 	movhi	r2,256
   37bb8:	10bfffc4 	addi	r2,r2,-1
   37bbc:	11c0a436 	bltu	r2,r7,37e50 <__udivdi3+0x544>
   37bc0:	01400404 	movi	r5,16
   37bc4:	2805883a 	mov	r2,r5
   37bc8:	003fa406 	br	37a5c <__udivdi3+0x150>
   37bcc:	0005883a 	mov	r2,zero
   37bd0:	0009883a 	mov	r4,zero
   37bd4:	003fae06 	br	37a90 <__udivdi3+0x184>
   37bd8:	00804034 	movhi	r2,256
   37bdc:	10bfffc4 	addi	r2,r2,-1
   37be0:	1400a136 	bltu	r2,r16,37e68 <__udivdi3+0x55c>
   37be4:	01400404 	movi	r5,16
   37be8:	2805883a 	mov	r2,r5
   37bec:	003f6006 	br	37970 <__udivdi3+0x64>
   37bf0:	01000044 	movi	r4,1
   37bf4:	000b883a 	mov	r5,zero
   37bf8:	00397000 	call	39700 <__udivsi3>
   37bfc:	1021883a 	mov	r16,r2
   37c00:	00bfffd4 	movui	r2,65535
   37c04:	143ff436 	bltu	r2,r16,37bd8 <__udivdi3+0x2cc>
   37c08:	003f5506 	br	37960 <__udivdi3+0x54>
   37c0c:	00804034 	movhi	r2,256
   37c10:	10bfffc4 	addi	r2,r2,-1
   37c14:	12009a36 	bltu	r2,r8,37e80 <__udivdi3+0x574>
   37c18:	01400404 	movi	r5,16
   37c1c:	2805883a 	mov	r2,r5
   37c20:	003fae06 	br	37adc <__udivdi3+0x1d0>
   37c24:	3dc5c83a 	sub	r2,r7,r23
   37c28:	35c8983a 	sll	r4,r6,r23
   37c2c:	8086d83a 	srl	r3,r16,r2
   37c30:	a0a2d83a 	srl	r17,r20,r2
   37c34:	e084d83a 	srl	r2,fp,r2
   37c38:	20eab03a 	or	r21,r4,r3
   37c3c:	a82cd43a 	srli	r22,r21,16
   37c40:	a5c6983a 	sll	r3,r20,r23
   37c44:	8809883a 	mov	r4,r17
   37c48:	b00b883a 	mov	r5,r22
   37c4c:	1886b03a 	or	r3,r3,r2
   37c50:	d8c00215 	stw	r3,8(sp)
   37c54:	00397000 	call	39700 <__udivsi3>
   37c58:	8809883a 	mov	r4,r17
   37c5c:	b00b883a 	mov	r5,r22
   37c60:	1029883a 	mov	r20,r2
   37c64:	00397080 	call	39708 <__umodsi3>
   37c68:	a8ffffcc 	andi	r3,r21,65535
   37c6c:	d8c00515 	stw	r3,20(sp)
   37c70:	d9000217 	ldw	r4,8(sp)
   37c74:	d9400517 	ldw	r5,20(sp)
   37c78:	1004943a 	slli	r2,r2,16
   37c7c:	2006d43a 	srli	r3,r4,16
   37c80:	85e0983a 	sll	r16,r16,r23
   37c84:	2d23383a 	mul	r17,r5,r20
   37c88:	10c4b03a 	or	r2,r2,r3
   37c8c:	dc000015 	stw	r16,0(sp)
   37c90:	1440032e 	bgeu	r2,r17,37ca0 <__udivdi3+0x394>
   37c94:	1545883a 	add	r2,r2,r21
   37c98:	a53fffc4 	addi	r20,r20,-1
   37c9c:	15407f2e 	bgeu	r2,r21,37e9c <__udivdi3+0x590>
   37ca0:	1463c83a 	sub	r17,r2,r17
   37ca4:	8809883a 	mov	r4,r17
   37ca8:	b00b883a 	mov	r5,r22
   37cac:	00397000 	call	39700 <__udivsi3>
   37cb0:	8809883a 	mov	r4,r17
   37cb4:	b00b883a 	mov	r5,r22
   37cb8:	1021883a 	mov	r16,r2
   37cbc:	00397080 	call	39708 <__umodsi3>
   37cc0:	d8c00517 	ldw	r3,20(sp)
   37cc4:	d9000217 	ldw	r4,8(sp)
   37cc8:	1004943a 	slli	r2,r2,16
   37ccc:	1c0f383a 	mul	r7,r3,r16
   37cd0:	20ffffcc 	andi	r3,r4,65535
   37cd4:	10e2b03a 	or	r17,r2,r3
   37cd8:	89c0032e 	bgeu	r17,r7,37ce8 <__udivdi3+0x3dc>
   37cdc:	8d63883a 	add	r17,r17,r21
   37ce0:	843fffc4 	addi	r16,r16,-1
   37ce4:	8d40692e 	bgeu	r17,r21,37e8c <__udivdi3+0x580>
   37ce8:	a008943a 	slli	r4,r20,16
   37cec:	d9400017 	ldw	r5,0(sp)
   37cf0:	89e3c83a 	sub	r17,r17,r7
   37cf4:	8110b03a 	or	r8,r16,r4
   37cf8:	280cd43a 	srli	r6,r5,16
   37cfc:	28ffffcc 	andi	r3,r5,65535
   37d00:	40bfffcc 	andi	r2,r8,65535
   37d04:	400ad43a 	srli	r5,r8,16
   37d08:	10d3383a 	mul	r9,r2,r3
   37d0c:	1185383a 	mul	r2,r2,r6
   37d10:	28c7383a 	mul	r3,r5,r3
   37d14:	4808d43a 	srli	r4,r9,16
   37d18:	298b383a 	mul	r5,r5,r6
   37d1c:	10c5883a 	add	r2,r2,r3
   37d20:	2089883a 	add	r4,r4,r2
   37d24:	20c0022e 	bgeu	r4,r3,37d30 <__udivdi3+0x424>
   37d28:	00800074 	movhi	r2,1
   37d2c:	288b883a 	add	r5,r5,r2
   37d30:	2004d43a 	srli	r2,r4,16
   37d34:	288b883a 	add	r5,r5,r2
   37d38:	89403f36 	bltu	r17,r5,37e38 <__udivdi3+0x52c>
   37d3c:	89403926 	beq	r17,r5,37e24 <__udivdi3+0x518>
   37d40:	4005883a 	mov	r2,r8
   37d44:	0009883a 	mov	r4,zero
   37d48:	003f5106 	br	37a90 <__udivdi3+0x184>
   37d4c:	85a0983a 	sll	r16,r16,r22
   37d50:	3585c83a 	sub	r2,r6,r22
   37d54:	a0a2d83a 	srl	r17,r20,r2
   37d58:	802ad43a 	srli	r21,r16,16
   37d5c:	e084d83a 	srl	r2,fp,r2
   37d60:	a586983a 	sll	r3,r20,r22
   37d64:	8809883a 	mov	r4,r17
   37d68:	a80b883a 	mov	r5,r21
   37d6c:	1886b03a 	or	r3,r3,r2
   37d70:	d8c00115 	stw	r3,4(sp)
   37d74:	00397000 	call	39700 <__udivsi3>
   37d78:	8809883a 	mov	r4,r17
   37d7c:	a80b883a 	mov	r5,r21
   37d80:	d8800415 	stw	r2,16(sp)
   37d84:	00397080 	call	39708 <__umodsi3>
   37d88:	d9000117 	ldw	r4,4(sp)
   37d8c:	d9400417 	ldw	r5,16(sp)
   37d90:	1004943a 	slli	r2,r2,16
   37d94:	85ffffcc 	andi	r23,r16,65535
   37d98:	2006d43a 	srli	r3,r4,16
   37d9c:	b963383a 	mul	r17,r23,r5
   37da0:	10c4b03a 	or	r2,r2,r3
   37da4:	1440042e 	bgeu	r2,r17,37db8 <__udivdi3+0x4ac>
   37da8:	297fffc4 	addi	r5,r5,-1
   37dac:	1405883a 	add	r2,r2,r16
   37db0:	d9400415 	stw	r5,16(sp)
   37db4:	1400442e 	bgeu	r2,r16,37ec8 <__udivdi3+0x5bc>
   37db8:	1463c83a 	sub	r17,r2,r17
   37dbc:	8809883a 	mov	r4,r17
   37dc0:	a80b883a 	mov	r5,r21
   37dc4:	00397000 	call	39700 <__udivsi3>
   37dc8:	8809883a 	mov	r4,r17
   37dcc:	a80b883a 	mov	r5,r21
   37dd0:	1029883a 	mov	r20,r2
   37dd4:	00397080 	call	39708 <__umodsi3>
   37dd8:	d9400117 	ldw	r5,4(sp)
   37ddc:	1004943a 	slli	r2,r2,16
   37de0:	bd09383a 	mul	r4,r23,r20
   37de4:	28ffffcc 	andi	r3,r5,65535
   37de8:	10c6b03a 	or	r3,r2,r3
   37dec:	1900062e 	bgeu	r3,r4,37e08 <__udivdi3+0x4fc>
   37df0:	1c07883a 	add	r3,r3,r16
   37df4:	a53fffc4 	addi	r20,r20,-1
   37df8:	1c000336 	bltu	r3,r16,37e08 <__udivdi3+0x4fc>
   37dfc:	1900022e 	bgeu	r3,r4,37e08 <__udivdi3+0x4fc>
   37e00:	a53fffc4 	addi	r20,r20,-1
   37e04:	1c07883a 	add	r3,r3,r16
   37e08:	d9400417 	ldw	r5,16(sp)
   37e0c:	e5b8983a 	sll	fp,fp,r22
   37e10:	1923c83a 	sub	r17,r3,r4
   37e14:	2804943a 	slli	r2,r5,16
   37e18:	a0a8b03a 	or	r20,r20,r2
   37e1c:	dd000315 	stw	r20,12(sp)
   37e20:	003ee106 	br	379a8 <__udivdi3+0x9c>
   37e24:	2004943a 	slli	r2,r4,16
   37e28:	e5c8983a 	sll	r4,fp,r23
   37e2c:	48ffffcc 	andi	r3,r9,65535
   37e30:	10c5883a 	add	r2,r2,r3
   37e34:	20bfc22e 	bgeu	r4,r2,37d40 <__udivdi3+0x434>
   37e38:	40bfffc4 	addi	r2,r8,-1
   37e3c:	0009883a 	mov	r4,zero
   37e40:	003f1306 	br	37a90 <__udivdi3+0x184>
   37e44:	01400204 	movi	r5,8
   37e48:	2805883a 	mov	r2,r5
   37e4c:	003f0306 	br	37a5c <__udivdi3+0x150>
   37e50:	01400604 	movi	r5,24
   37e54:	2805883a 	mov	r2,r5
   37e58:	003f0006 	br	37a5c <__udivdi3+0x150>
   37e5c:	01400204 	movi	r5,8
   37e60:	2805883a 	mov	r2,r5
   37e64:	003ec206 	br	37970 <__udivdi3+0x64>
   37e68:	01400604 	movi	r5,24
   37e6c:	2805883a 	mov	r2,r5
   37e70:	003ebf06 	br	37970 <__udivdi3+0x64>
   37e74:	01400204 	movi	r5,8
   37e78:	2805883a 	mov	r2,r5
   37e7c:	003f1706 	br	37adc <__udivdi3+0x1d0>
   37e80:	01400604 	movi	r5,24
   37e84:	2805883a 	mov	r2,r5
   37e88:	003f1406 	br	37adc <__udivdi3+0x1d0>
   37e8c:	89ff962e 	bgeu	r17,r7,37ce8 <__udivdi3+0x3dc>
   37e90:	8d63883a 	add	r17,r17,r21
   37e94:	843fffc4 	addi	r16,r16,-1
   37e98:	003f9306 	br	37ce8 <__udivdi3+0x3dc>
   37e9c:	147f802e 	bgeu	r2,r17,37ca0 <__udivdi3+0x394>
   37ea0:	a53fffc4 	addi	r20,r20,-1
   37ea4:	1545883a 	add	r2,r2,r21
   37ea8:	003f7d06 	br	37ca0 <__udivdi3+0x394>
   37eac:	a53fffc4 	addi	r20,r20,-1
   37eb0:	003ede06 	br	37a2c <__udivdi3+0x120>
   37eb4:	b5bfffc4 	addi	r22,r22,-1
   37eb8:	1405883a 	add	r2,r2,r16
   37ebc:	003f2806 	br	37b60 <__udivdi3+0x254>
   37ec0:	a53fffc4 	addi	r20,r20,-1
   37ec4:	003f3706 	br	37ba4 <__udivdi3+0x298>
   37ec8:	147fbb2e 	bgeu	r2,r17,37db8 <__udivdi3+0x4ac>
   37ecc:	297fffc4 	addi	r5,r5,-1
   37ed0:	1405883a 	add	r2,r2,r16
   37ed4:	d9400415 	stw	r5,16(sp)
   37ed8:	003fb706 	br	37db8 <__udivdi3+0x4ac>
   37edc:	b5bfffc4 	addi	r22,r22,-1
   37ee0:	1405883a 	add	r2,r2,r16
   37ee4:	003ec006 	br	379e8 <__udivdi3+0xdc>

00037ee8 <__umoddi3>:
   37ee8:	defff104 	addi	sp,sp,-60
   37eec:	dd800b15 	stw	r22,44(sp)
   37ef0:	dd000915 	stw	r20,36(sp)
   37ef4:	dc000515 	stw	r16,20(sp)
   37ef8:	dfc00e15 	stw	ra,56(sp)
   37efc:	df000d15 	stw	fp,52(sp)
   37f00:	ddc00c15 	stw	r23,48(sp)
   37f04:	dd400a15 	stw	r21,40(sp)
   37f08:	dcc00815 	stw	r19,32(sp)
   37f0c:	dc800715 	stw	r18,28(sp)
   37f10:	dc400615 	stw	r17,24(sp)
   37f14:	3021883a 	mov	r16,r6
   37f18:	202d883a 	mov	r22,r4
   37f1c:	2829883a 	mov	r20,r5
   37f20:	38002b1e 	bne	r7,zero,37fd0 <__umoddi3+0xe8>
   37f24:	29805036 	bltu	r5,r6,38068 <__umoddi3+0x180>
   37f28:	30008a26 	beq	r6,zero,38154 <__umoddi3+0x26c>
   37f2c:	00bfffd4 	movui	r2,65535
   37f30:	14008236 	bltu	r2,r16,3813c <__umoddi3+0x254>
   37f34:	00803fc4 	movi	r2,255
   37f38:	14013636 	bltu	r2,r16,38414 <__umoddi3+0x52c>
   37f3c:	000b883a 	mov	r5,zero
   37f40:	0005883a 	mov	r2,zero
   37f44:	8084d83a 	srl	r2,r16,r2
   37f48:	01000074 	movhi	r4,1
   37f4c:	21009904 	addi	r4,r4,612
   37f50:	01800804 	movi	r6,32
   37f54:	1105883a 	add	r2,r2,r4
   37f58:	10c00003 	ldbu	r3,0(r2)
   37f5c:	28c7883a 	add	r3,r5,r3
   37f60:	30efc83a 	sub	r23,r6,r3
   37f64:	b800941e 	bne	r23,zero,381b8 <__umoddi3+0x2d0>
   37f68:	802ad43a 	srli	r21,r16,16
   37f6c:	a423c83a 	sub	r17,r20,r16
   37f70:	0039883a 	mov	fp,zero
   37f74:	853fffcc 	andi	r20,r16,65535
   37f78:	8809883a 	mov	r4,r17
   37f7c:	a80b883a 	mov	r5,r21
   37f80:	00397000 	call	39700 <__udivsi3>
   37f84:	8809883a 	mov	r4,r17
   37f88:	a80b883a 	mov	r5,r21
   37f8c:	a0a3383a 	mul	r17,r20,r2
   37f90:	00397080 	call	39708 <__umodsi3>
   37f94:	1004943a 	slli	r2,r2,16
   37f98:	b006d43a 	srli	r3,r22,16
   37f9c:	10c4b03a 	or	r2,r2,r3
   37fa0:	1440032e 	bgeu	r2,r17,37fb0 <__umoddi3+0xc8>
   37fa4:	1405883a 	add	r2,r2,r16
   37fa8:	14000136 	bltu	r2,r16,37fb0 <__umoddi3+0xc8>
   37fac:	14413536 	bltu	r2,r17,38484 <__umoddi3+0x59c>
   37fb0:	1463c83a 	sub	r17,r2,r17
   37fb4:	8809883a 	mov	r4,r17
   37fb8:	a80b883a 	mov	r5,r21
   37fbc:	00397000 	call	39700 <__udivsi3>
   37fc0:	8809883a 	mov	r4,r17
   37fc4:	a0a3383a 	mul	r17,r20,r2
   37fc8:	a80b883a 	mov	r5,r21
   37fcc:	00004d06 	br	38104 <__umoddi3+0x21c>
   37fd0:	380d883a 	mov	r6,r7
   37fd4:	29c0102e 	bgeu	r5,r7,38018 <__umoddi3+0x130>
   37fd8:	2011883a 	mov	r8,r4
   37fdc:	2813883a 	mov	r9,r5
   37fe0:	4005883a 	mov	r2,r8
   37fe4:	4807883a 	mov	r3,r9
   37fe8:	dfc00e17 	ldw	ra,56(sp)
   37fec:	df000d17 	ldw	fp,52(sp)
   37ff0:	ddc00c17 	ldw	r23,48(sp)
   37ff4:	dd800b17 	ldw	r22,44(sp)
   37ff8:	dd400a17 	ldw	r21,40(sp)
   37ffc:	dd000917 	ldw	r20,36(sp)
   38000:	dcc00817 	ldw	r19,32(sp)
   38004:	dc800717 	ldw	r18,28(sp)
   38008:	dc400617 	ldw	r17,24(sp)
   3800c:	dc000517 	ldw	r16,20(sp)
   38010:	dec00f04 	addi	sp,sp,60
   38014:	f800283a 	ret
   38018:	00bfffd4 	movui	r2,65535
   3801c:	11c05a36 	bltu	r2,r7,38188 <__umoddi3+0x2a0>
   38020:	00803fc4 	movi	r2,255
   38024:	11c0fe36 	bltu	r2,r7,38420 <__umoddi3+0x538>
   38028:	000b883a 	mov	r5,zero
   3802c:	0005883a 	mov	r2,zero
   38030:	3084d83a 	srl	r2,r6,r2
   38034:	01000074 	movhi	r4,1
   38038:	21009904 	addi	r4,r4,612
   3803c:	01c00804 	movi	r7,32
   38040:	1105883a 	add	r2,r2,r4
   38044:	10c00003 	ldbu	r3,0(r2)
   38048:	28c7883a 	add	r3,r5,r3
   3804c:	38ebc83a 	sub	r21,r7,r3
   38050:	a800851e 	bne	r21,zero,38268 <__umoddi3+0x380>
   38054:	35005236 	bltu	r6,r20,381a0 <__umoddi3+0x2b8>
   38058:	b400512e 	bgeu	r22,r16,381a0 <__umoddi3+0x2b8>
   3805c:	b011883a 	mov	r8,r22
   38060:	a013883a 	mov	r9,r20
   38064:	003fde06 	br	37fe0 <__umoddi3+0xf8>
   38068:	00bfffd4 	movui	r2,65535
   3806c:	11804036 	bltu	r2,r6,38170 <__umoddi3+0x288>
   38070:	00803fc4 	movi	r2,255
   38074:	1180ed36 	bltu	r2,r6,3842c <__umoddi3+0x544>
   38078:	000b883a 	mov	r5,zero
   3807c:	0005883a 	mov	r2,zero
   38080:	8084d83a 	srl	r2,r16,r2
   38084:	01000074 	movhi	r4,1
   38088:	21009904 	addi	r4,r4,612
   3808c:	01800804 	movi	r6,32
   38090:	1105883a 	add	r2,r2,r4
   38094:	10c00003 	ldbu	r3,0(r2)
   38098:	28c7883a 	add	r3,r5,r3
   3809c:	30c7c83a 	sub	r3,r6,r3
   380a0:	1800bf1e 	bne	r3,zero,383a0 <__umoddi3+0x4b8>
   380a4:	0039883a 	mov	fp,zero
   380a8:	802ad43a 	srli	r21,r16,16
   380ac:	a009883a 	mov	r4,r20
   380b0:	85ffffcc 	andi	r23,r16,65535
   380b4:	a80b883a 	mov	r5,r21
   380b8:	00397000 	call	39700 <__udivsi3>
   380bc:	a009883a 	mov	r4,r20
   380c0:	a80b883a 	mov	r5,r21
   380c4:	b8a3383a 	mul	r17,r23,r2
   380c8:	00397080 	call	39708 <__umodsi3>
   380cc:	1004943a 	slli	r2,r2,16
   380d0:	b006d43a 	srli	r3,r22,16
   380d4:	10c4b03a 	or	r2,r2,r3
   380d8:	1440032e 	bgeu	r2,r17,380e8 <__umoddi3+0x200>
   380dc:	1405883a 	add	r2,r2,r16
   380e0:	14000136 	bltu	r2,r16,380e8 <__umoddi3+0x200>
   380e4:	1440e536 	bltu	r2,r17,3847c <__umoddi3+0x594>
   380e8:	1463c83a 	sub	r17,r2,r17
   380ec:	8809883a 	mov	r4,r17
   380f0:	a80b883a 	mov	r5,r21
   380f4:	00397000 	call	39700 <__udivsi3>
   380f8:	8809883a 	mov	r4,r17
   380fc:	b8a3383a 	mul	r17,r23,r2
   38100:	a80b883a 	mov	r5,r21
   38104:	00397080 	call	39708 <__umodsi3>
   38108:	1004943a 	slli	r2,r2,16
   3810c:	b0ffffcc 	andi	r3,r22,65535
   38110:	10c4b03a 	or	r2,r2,r3
   38114:	1440042e 	bgeu	r2,r17,38128 <__umoddi3+0x240>
   38118:	1405883a 	add	r2,r2,r16
   3811c:	14000236 	bltu	r2,r16,38128 <__umoddi3+0x240>
   38120:	1440012e 	bgeu	r2,r17,38128 <__umoddi3+0x240>
   38124:	1405883a 	add	r2,r2,r16
   38128:	1445c83a 	sub	r2,r2,r17
   3812c:	1724d83a 	srl	r18,r2,fp
   38130:	0013883a 	mov	r9,zero
   38134:	9011883a 	mov	r8,r18
   38138:	003fa906 	br	37fe0 <__umoddi3+0xf8>
   3813c:	00804034 	movhi	r2,256
   38140:	10bfffc4 	addi	r2,r2,-1
   38144:	1400b036 	bltu	r2,r16,38408 <__umoddi3+0x520>
   38148:	01400404 	movi	r5,16
   3814c:	2805883a 	mov	r2,r5
   38150:	003f7c06 	br	37f44 <__umoddi3+0x5c>
   38154:	01000044 	movi	r4,1
   38158:	000b883a 	mov	r5,zero
   3815c:	00397000 	call	39700 <__udivsi3>
   38160:	1021883a 	mov	r16,r2
   38164:	00bfffd4 	movui	r2,65535
   38168:	143ff436 	bltu	r2,r16,3813c <__umoddi3+0x254>
   3816c:	003f7106 	br	37f34 <__umoddi3+0x4c>
   38170:	00804034 	movhi	r2,256
   38174:	10bfffc4 	addi	r2,r2,-1
   38178:	1180af36 	bltu	r2,r6,38438 <__umoddi3+0x550>
   3817c:	01400404 	movi	r5,16
   38180:	2805883a 	mov	r2,r5
   38184:	003fbe06 	br	38080 <__umoddi3+0x198>
   38188:	00804034 	movhi	r2,256
   3818c:	10bfffc4 	addi	r2,r2,-1
   38190:	11c0ac36 	bltu	r2,r7,38444 <__umoddi3+0x55c>
   38194:	01400404 	movi	r5,16
   38198:	2805883a 	mov	r2,r5
   3819c:	003fa406 	br	38030 <__umoddi3+0x148>
   381a0:	b409c83a 	sub	r4,r22,r16
   381a4:	b105803a 	cmpltu	r2,r22,r4
   381a8:	a187c83a 	sub	r3,r20,r6
   381ac:	18a9c83a 	sub	r20,r3,r2
   381b0:	202d883a 	mov	r22,r4
   381b4:	003fa906 	br	3805c <__umoddi3+0x174>
   381b8:	85e0983a 	sll	r16,r16,r23
   381bc:	35c5c83a 	sub	r2,r6,r23
   381c0:	a0a2d83a 	srl	r17,r20,r2
   381c4:	802ad43a 	srli	r21,r16,16
   381c8:	b084d83a 	srl	r2,r22,r2
   381cc:	a5c6983a 	sll	r3,r20,r23
   381d0:	8809883a 	mov	r4,r17
   381d4:	a80b883a 	mov	r5,r21
   381d8:	1886b03a 	or	r3,r3,r2
   381dc:	d8c00115 	stw	r3,4(sp)
   381e0:	853fffcc 	andi	r20,r16,65535
   381e4:	00397000 	call	39700 <__udivsi3>
   381e8:	8809883a 	mov	r4,r17
   381ec:	a80b883a 	mov	r5,r21
   381f0:	a0a3383a 	mul	r17,r20,r2
   381f4:	00397080 	call	39708 <__umodsi3>
   381f8:	d9000117 	ldw	r4,4(sp)
   381fc:	1004943a 	slli	r2,r2,16
   38200:	b839883a 	mov	fp,r23
   38204:	2006d43a 	srli	r3,r4,16
   38208:	10c4b03a 	or	r2,r2,r3
   3820c:	1440022e 	bgeu	r2,r17,38218 <__umoddi3+0x330>
   38210:	1405883a 	add	r2,r2,r16
   38214:	1400962e 	bgeu	r2,r16,38470 <__umoddi3+0x588>
   38218:	1463c83a 	sub	r17,r2,r17
   3821c:	8809883a 	mov	r4,r17
   38220:	a80b883a 	mov	r5,r21
   38224:	00397000 	call	39700 <__udivsi3>
   38228:	8809883a 	mov	r4,r17
   3822c:	a80b883a 	mov	r5,r21
   38230:	a0a3383a 	mul	r17,r20,r2
   38234:	00397080 	call	39708 <__umodsi3>
   38238:	d9400117 	ldw	r5,4(sp)
   3823c:	1004943a 	slli	r2,r2,16
   38240:	28ffffcc 	andi	r3,r5,65535
   38244:	10c4b03a 	or	r2,r2,r3
   38248:	1440042e 	bgeu	r2,r17,3825c <__umoddi3+0x374>
   3824c:	1405883a 	add	r2,r2,r16
   38250:	14000236 	bltu	r2,r16,3825c <__umoddi3+0x374>
   38254:	1440012e 	bgeu	r2,r17,3825c <__umoddi3+0x374>
   38258:	1405883a 	add	r2,r2,r16
   3825c:	b5ec983a 	sll	r22,r22,r23
   38260:	1463c83a 	sub	r17,r2,r17
   38264:	003f4406 	br	37f78 <__umoddi3+0x90>
   38268:	3d4fc83a 	sub	r7,r7,r21
   3826c:	3546983a 	sll	r3,r6,r21
   38270:	81c4d83a 	srl	r2,r16,r7
   38274:	a1e2d83a 	srl	r17,r20,r7
   38278:	a54c983a 	sll	r6,r20,r21
   3827c:	18aeb03a 	or	r23,r3,r2
   38280:	b828d43a 	srli	r20,r23,16
   38284:	b1c4d83a 	srl	r2,r22,r7
   38288:	8809883a 	mov	r4,r17
   3828c:	a00b883a 	mov	r5,r20
   38290:	308cb03a 	or	r6,r6,r2
   38294:	d9c00315 	stw	r7,12(sp)
   38298:	d9800215 	stw	r6,8(sp)
   3829c:	00397000 	call	39700 <__udivsi3>
   382a0:	8809883a 	mov	r4,r17
   382a4:	a00b883a 	mov	r5,r20
   382a8:	1039883a 	mov	fp,r2
   382ac:	00397080 	call	39708 <__umodsi3>
   382b0:	b8ffffcc 	andi	r3,r23,65535
   382b4:	d8c00415 	stw	r3,16(sp)
   382b8:	d9000217 	ldw	r4,8(sp)
   382bc:	d9400417 	ldw	r5,16(sp)
   382c0:	1004943a 	slli	r2,r2,16
   382c4:	2006d43a 	srli	r3,r4,16
   382c8:	8560983a 	sll	r16,r16,r21
   382cc:	2f23383a 	mul	r17,r5,fp
   382d0:	10c4b03a 	or	r2,r2,r3
   382d4:	dc000015 	stw	r16,0(sp)
   382d8:	b56c983a 	sll	r22,r22,r21
   382dc:	1440032e 	bgeu	r2,r17,382ec <__umoddi3+0x404>
   382e0:	15c5883a 	add	r2,r2,r23
   382e4:	e73fffc4 	addi	fp,fp,-1
   382e8:	15c05d2e 	bgeu	r2,r23,38460 <__umoddi3+0x578>
   382ec:	1463c83a 	sub	r17,r2,r17
   382f0:	8809883a 	mov	r4,r17
   382f4:	a00b883a 	mov	r5,r20
   382f8:	00397000 	call	39700 <__udivsi3>
   382fc:	8809883a 	mov	r4,r17
   38300:	a00b883a 	mov	r5,r20
   38304:	1021883a 	mov	r16,r2
   38308:	00397080 	call	39708 <__umodsi3>
   3830c:	d8c00417 	ldw	r3,16(sp)
   38310:	d9000217 	ldw	r4,8(sp)
   38314:	1004943a 	slli	r2,r2,16
   38318:	1c23383a 	mul	r17,r3,r16
   3831c:	20ffffcc 	andi	r3,r4,65535
   38320:	10ceb03a 	or	r7,r2,r3
   38324:	3c40032e 	bgeu	r7,r17,38334 <__umoddi3+0x44c>
   38328:	3dcf883a 	add	r7,r7,r23
   3832c:	843fffc4 	addi	r16,r16,-1
   38330:	3dc0472e 	bgeu	r7,r23,38450 <__umoddi3+0x568>
   38334:	e004943a 	slli	r2,fp,16
   38338:	d9400017 	ldw	r5,0(sp)
   3833c:	3c4fc83a 	sub	r7,r7,r17
   38340:	8084b03a 	or	r2,r16,r2
   38344:	28ffffcc 	andi	r3,r5,65535
   38348:	280cd43a 	srli	r6,r5,16
   3834c:	100ad43a 	srli	r5,r2,16
   38350:	10bfffcc 	andi	r2,r2,65535
   38354:	10d1383a 	mul	r8,r2,r3
   38358:	28c7383a 	mul	r3,r5,r3
   3835c:	1185383a 	mul	r2,r2,r6
   38360:	4008d43a 	srli	r4,r8,16
   38364:	298b383a 	mul	r5,r5,r6
   38368:	10c5883a 	add	r2,r2,r3
   3836c:	2089883a 	add	r4,r4,r2
   38370:	20c0022e 	bgeu	r4,r3,3837c <__umoddi3+0x494>
   38374:	00800074 	movhi	r2,1
   38378:	288b883a 	add	r5,r5,r2
   3837c:	2004d43a 	srli	r2,r4,16
   38380:	2008943a 	slli	r4,r4,16
   38384:	40ffffcc 	andi	r3,r8,65535
   38388:	288b883a 	add	r5,r5,r2
   3838c:	20c9883a 	add	r4,r4,r3
   38390:	39400b36 	bltu	r7,r5,383c0 <__umoddi3+0x4d8>
   38394:	39403d26 	beq	r7,r5,3848c <__umoddi3+0x5a4>
   38398:	394bc83a 	sub	r5,r7,r5
   3839c:	00000f06 	br	383dc <__umoddi3+0x4f4>
   383a0:	30c5c83a 	sub	r2,r6,r3
   383a4:	1839883a 	mov	fp,r3
   383a8:	b084d83a 	srl	r2,r22,r2
   383ac:	a0c6983a 	sll	r3,r20,r3
   383b0:	8720983a 	sll	r16,r16,fp
   383b4:	b72c983a 	sll	r22,r22,fp
   383b8:	18a8b03a 	or	r20,r3,r2
   383bc:	003f3a06 	br	380a8 <__umoddi3+0x1c0>
   383c0:	d8c00017 	ldw	r3,0(sp)
   383c4:	20c5c83a 	sub	r2,r4,r3
   383c8:	2089803a 	cmpltu	r4,r4,r2
   383cc:	2dc7c83a 	sub	r3,r5,r23
   383d0:	1907c83a 	sub	r3,r3,r4
   383d4:	38cbc83a 	sub	r5,r7,r3
   383d8:	1009883a 	mov	r4,r2
   383dc:	b105c83a 	sub	r2,r22,r4
   383e0:	b087803a 	cmpltu	r3,r22,r2
   383e4:	28c7c83a 	sub	r3,r5,r3
   383e8:	d9400317 	ldw	r5,12(sp)
   383ec:	1544d83a 	srl	r2,r2,r21
   383f0:	1948983a 	sll	r4,r3,r5
   383f4:	1d46d83a 	srl	r3,r3,r21
   383f8:	20a4b03a 	or	r18,r4,r2
   383fc:	9011883a 	mov	r8,r18
   38400:	1813883a 	mov	r9,r3
   38404:	003ef606 	br	37fe0 <__umoddi3+0xf8>
   38408:	01400604 	movi	r5,24
   3840c:	2805883a 	mov	r2,r5
   38410:	003ecc06 	br	37f44 <__umoddi3+0x5c>
   38414:	01400204 	movi	r5,8
   38418:	2805883a 	mov	r2,r5
   3841c:	003ec906 	br	37f44 <__umoddi3+0x5c>
   38420:	01400204 	movi	r5,8
   38424:	2805883a 	mov	r2,r5
   38428:	003f0106 	br	38030 <__umoddi3+0x148>
   3842c:	01400204 	movi	r5,8
   38430:	2805883a 	mov	r2,r5
   38434:	003f1206 	br	38080 <__umoddi3+0x198>
   38438:	01400604 	movi	r5,24
   3843c:	2805883a 	mov	r2,r5
   38440:	003f0f06 	br	38080 <__umoddi3+0x198>
   38444:	01400604 	movi	r5,24
   38448:	2805883a 	mov	r2,r5
   3844c:	003ef806 	br	38030 <__umoddi3+0x148>
   38450:	3c7fb82e 	bgeu	r7,r17,38334 <__umoddi3+0x44c>
   38454:	843fffc4 	addi	r16,r16,-1
   38458:	3dcf883a 	add	r7,r7,r23
   3845c:	003fb506 	br	38334 <__umoddi3+0x44c>
   38460:	147fa22e 	bgeu	r2,r17,382ec <__umoddi3+0x404>
   38464:	e73fffc4 	addi	fp,fp,-1
   38468:	15c5883a 	add	r2,r2,r23
   3846c:	003f9f06 	br	382ec <__umoddi3+0x404>
   38470:	147f692e 	bgeu	r2,r17,38218 <__umoddi3+0x330>
   38474:	1405883a 	add	r2,r2,r16
   38478:	003f6706 	br	38218 <__umoddi3+0x330>
   3847c:	1405883a 	add	r2,r2,r16
   38480:	003f1906 	br	380e8 <__umoddi3+0x200>
   38484:	1405883a 	add	r2,r2,r16
   38488:	003ec906 	br	37fb0 <__umoddi3+0xc8>
   3848c:	b13fcc36 	bltu	r22,r4,383c0 <__umoddi3+0x4d8>
   38490:	000b883a 	mov	r5,zero
   38494:	003fd106 	br	383dc <__umoddi3+0x4f4>

00038498 <_fpadd_parts>:
   38498:	defff804 	addi	sp,sp,-32
   3849c:	dcc00315 	stw	r19,12(sp)
   384a0:	2027883a 	mov	r19,r4
   384a4:	21000017 	ldw	r4,0(r4)
   384a8:	00c00044 	movi	r3,1
   384ac:	dd400515 	stw	r21,20(sp)
   384b0:	dd000415 	stw	r20,16(sp)
   384b4:	ddc00715 	stw	r23,28(sp)
   384b8:	dd800615 	stw	r22,24(sp)
   384bc:	dc800215 	stw	r18,8(sp)
   384c0:	dc400115 	stw	r17,4(sp)
   384c4:	dc000015 	stw	r16,0(sp)
   384c8:	282b883a 	mov	r21,r5
   384cc:	3029883a 	mov	r20,r6
   384d0:	1900632e 	bgeu	r3,r4,38660 <_fpadd_parts+0x1c8>
   384d4:	28800017 	ldw	r2,0(r5)
   384d8:	1880812e 	bgeu	r3,r2,386e0 <_fpadd_parts+0x248>
   384dc:	00c00104 	movi	r3,4
   384e0:	20c0dc26 	beq	r4,r3,38854 <_fpadd_parts+0x3bc>
   384e4:	10c07e26 	beq	r2,r3,386e0 <_fpadd_parts+0x248>
   384e8:	00c00084 	movi	r3,2
   384ec:	10c06726 	beq	r2,r3,3868c <_fpadd_parts+0x1f4>
   384f0:	20c07b26 	beq	r4,r3,386e0 <_fpadd_parts+0x248>
   384f4:	9dc00217 	ldw	r23,8(r19)
   384f8:	28c00217 	ldw	r3,8(r5)
   384fc:	9c400317 	ldw	r17,12(r19)
   38500:	2bc00317 	ldw	r15,12(r5)
   38504:	b8cdc83a 	sub	r6,r23,r3
   38508:	9c800417 	ldw	r18,16(r19)
   3850c:	2c000417 	ldw	r16,16(r5)
   38510:	3009883a 	mov	r4,r6
   38514:	30009716 	blt	r6,zero,38774 <_fpadd_parts+0x2dc>
   38518:	00800fc4 	movi	r2,63
   3851c:	11806b16 	blt	r2,r6,386cc <_fpadd_parts+0x234>
   38520:	0100a40e 	bge	zero,r4,387b4 <_fpadd_parts+0x31c>
   38524:	35bff804 	addi	r22,r6,-32
   38528:	b000bc16 	blt	r22,zero,3881c <_fpadd_parts+0x384>
   3852c:	8596d83a 	srl	r11,r16,r22
   38530:	0019883a 	mov	r12,zero
   38534:	0013883a 	mov	r9,zero
   38538:	01000044 	movi	r4,1
   3853c:	0015883a 	mov	r10,zero
   38540:	b000be16 	blt	r22,zero,3883c <_fpadd_parts+0x3a4>
   38544:	2590983a 	sll	r8,r4,r22
   38548:	000f883a 	mov	r7,zero
   3854c:	00bfffc4 	movi	r2,-1
   38550:	3889883a 	add	r4,r7,r2
   38554:	408b883a 	add	r5,r8,r2
   38558:	21cd803a 	cmpltu	r6,r4,r7
   3855c:	314b883a 	add	r5,r6,r5
   38560:	7904703a 	and	r2,r15,r4
   38564:	8146703a 	and	r3,r16,r5
   38568:	10c4b03a 	or	r2,r2,r3
   3856c:	10000226 	beq	r2,zero,38578 <_fpadd_parts+0xe0>
   38570:	02400044 	movi	r9,1
   38574:	0015883a 	mov	r10,zero
   38578:	5a5eb03a 	or	r15,r11,r9
   3857c:	62a0b03a 	or	r16,r12,r10
   38580:	99400117 	ldw	r5,4(r19)
   38584:	a8800117 	ldw	r2,4(r21)
   38588:	28806e26 	beq	r5,r2,38744 <_fpadd_parts+0x2ac>
   3858c:	28006626 	beq	r5,zero,38728 <_fpadd_parts+0x290>
   38590:	7c45c83a 	sub	r2,r15,r17
   38594:	7889803a 	cmpltu	r4,r15,r2
   38598:	8487c83a 	sub	r3,r16,r18
   3859c:	1909c83a 	sub	r4,r3,r4
   385a0:	100d883a 	mov	r6,r2
   385a4:	200f883a 	mov	r7,r4
   385a8:	38007716 	blt	r7,zero,38788 <_fpadd_parts+0x2f0>
   385ac:	a5c00215 	stw	r23,8(r20)
   385b0:	a1c00415 	stw	r7,16(r20)
   385b4:	a0000115 	stw	zero,4(r20)
   385b8:	a1800315 	stw	r6,12(r20)
   385bc:	a2000317 	ldw	r8,12(r20)
   385c0:	a2400417 	ldw	r9,16(r20)
   385c4:	00bfffc4 	movi	r2,-1
   385c8:	408b883a 	add	r5,r8,r2
   385cc:	2a09803a 	cmpltu	r4,r5,r8
   385d0:	488d883a 	add	r6,r9,r2
   385d4:	01c40034 	movhi	r7,4096
   385d8:	39ffffc4 	addi	r7,r7,-1
   385dc:	218d883a 	add	r6,r4,r6
   385e0:	39801736 	bltu	r7,r6,38640 <_fpadd_parts+0x1a8>
   385e4:	31c06526 	beq	r6,r7,3877c <_fpadd_parts+0x2e4>
   385e8:	a3000217 	ldw	r12,8(r20)
   385ec:	4209883a 	add	r4,r8,r8
   385f0:	00bfffc4 	movi	r2,-1
   385f4:	220f803a 	cmpltu	r7,r4,r8
   385f8:	4a4b883a 	add	r5,r9,r9
   385fc:	394f883a 	add	r7,r7,r5
   38600:	2095883a 	add	r10,r4,r2
   38604:	3897883a 	add	r11,r7,r2
   38608:	510d803a 	cmpltu	r6,r10,r4
   3860c:	6099883a 	add	r12,r12,r2
   38610:	32d7883a 	add	r11,r6,r11
   38614:	00840034 	movhi	r2,4096
   38618:	10bfffc4 	addi	r2,r2,-1
   3861c:	2011883a 	mov	r8,r4
   38620:	3813883a 	mov	r9,r7
   38624:	a1000315 	stw	r4,12(r20)
   38628:	a1c00415 	stw	r7,16(r20)
   3862c:	a3000215 	stw	r12,8(r20)
   38630:	12c00336 	bltu	r2,r11,38640 <_fpadd_parts+0x1a8>
   38634:	58bfed1e 	bne	r11,r2,385ec <_fpadd_parts+0x154>
   38638:	00bfff84 	movi	r2,-2
   3863c:	12bfeb2e 	bgeu	r2,r10,385ec <_fpadd_parts+0x154>
   38640:	a2800417 	ldw	r10,16(r20)
   38644:	008000c4 	movi	r2,3
   38648:	00c80034 	movhi	r3,8192
   3864c:	18ffffc4 	addi	r3,r3,-1
   38650:	a2400317 	ldw	r9,12(r20)
   38654:	a0800015 	stw	r2,0(r20)
   38658:	1a802336 	bltu	r3,r10,386e8 <_fpadd_parts+0x250>
   3865c:	a027883a 	mov	r19,r20
   38660:	9805883a 	mov	r2,r19
   38664:	ddc00717 	ldw	r23,28(sp)
   38668:	dd800617 	ldw	r22,24(sp)
   3866c:	dd400517 	ldw	r21,20(sp)
   38670:	dd000417 	ldw	r20,16(sp)
   38674:	dcc00317 	ldw	r19,12(sp)
   38678:	dc800217 	ldw	r18,8(sp)
   3867c:	dc400117 	ldw	r17,4(sp)
   38680:	dc000017 	ldw	r16,0(sp)
   38684:	dec00804 	addi	sp,sp,32
   38688:	f800283a 	ret
   3868c:	20fff41e 	bne	r4,r3,38660 <_fpadd_parts+0x1c8>
   38690:	31000015 	stw	r4,0(r6)
   38694:	98800117 	ldw	r2,4(r19)
   38698:	30800115 	stw	r2,4(r6)
   3869c:	98c00217 	ldw	r3,8(r19)
   386a0:	30c00215 	stw	r3,8(r6)
   386a4:	98800317 	ldw	r2,12(r19)
   386a8:	30800315 	stw	r2,12(r6)
   386ac:	98c00417 	ldw	r3,16(r19)
   386b0:	30c00415 	stw	r3,16(r6)
   386b4:	98800117 	ldw	r2,4(r19)
   386b8:	28c00117 	ldw	r3,4(r5)
   386bc:	3027883a 	mov	r19,r6
   386c0:	10c4703a 	and	r2,r2,r3
   386c4:	30800115 	stw	r2,4(r6)
   386c8:	003fe506 	br	38660 <_fpadd_parts+0x1c8>
   386cc:	1dc02616 	blt	r3,r23,38768 <_fpadd_parts+0x2d0>
   386d0:	0023883a 	mov	r17,zero
   386d4:	182f883a 	mov	r23,r3
   386d8:	0025883a 	mov	r18,zero
   386dc:	003fa806 	br	38580 <_fpadd_parts+0xe8>
   386e0:	a827883a 	mov	r19,r21
   386e4:	003fde06 	br	38660 <_fpadd_parts+0x1c8>
   386e8:	01800044 	movi	r6,1
   386ec:	500497fa 	slli	r2,r10,31
   386f0:	4808d07a 	srli	r4,r9,1
   386f4:	518ad83a 	srl	r5,r10,r6
   386f8:	a2000217 	ldw	r8,8(r20)
   386fc:	1108b03a 	or	r4,r2,r4
   38700:	0007883a 	mov	r3,zero
   38704:	4984703a 	and	r2,r9,r6
   38708:	208cb03a 	or	r6,r4,r2
   3870c:	28ceb03a 	or	r7,r5,r3
   38710:	42000044 	addi	r8,r8,1
   38714:	a027883a 	mov	r19,r20
   38718:	a1c00415 	stw	r7,16(r20)
   3871c:	a2000215 	stw	r8,8(r20)
   38720:	a1800315 	stw	r6,12(r20)
   38724:	003fce06 	br	38660 <_fpadd_parts+0x1c8>
   38728:	8bc5c83a 	sub	r2,r17,r15
   3872c:	8889803a 	cmpltu	r4,r17,r2
   38730:	9407c83a 	sub	r3,r18,r16
   38734:	1909c83a 	sub	r4,r3,r4
   38738:	100d883a 	mov	r6,r2
   3873c:	200f883a 	mov	r7,r4
   38740:	003f9906 	br	385a8 <_fpadd_parts+0x110>
   38744:	7c45883a 	add	r2,r15,r17
   38748:	13c9803a 	cmpltu	r4,r2,r15
   3874c:	8487883a 	add	r3,r16,r18
   38750:	20c9883a 	add	r4,r4,r3
   38754:	a1400115 	stw	r5,4(r20)
   38758:	a5c00215 	stw	r23,8(r20)
   3875c:	a0800315 	stw	r2,12(r20)
   38760:	a1000415 	stw	r4,16(r20)
   38764:	003fb606 	br	38640 <_fpadd_parts+0x1a8>
   38768:	001f883a 	mov	r15,zero
   3876c:	0021883a 	mov	r16,zero
   38770:	003f8306 	br	38580 <_fpadd_parts+0xe8>
   38774:	018dc83a 	sub	r6,zero,r6
   38778:	003f6706 	br	38518 <_fpadd_parts+0x80>
   3877c:	00bfff84 	movi	r2,-2
   38780:	117faf36 	bltu	r2,r5,38640 <_fpadd_parts+0x1a8>
   38784:	003f9806 	br	385e8 <_fpadd_parts+0x150>
   38788:	0005883a 	mov	r2,zero
   3878c:	1189c83a 	sub	r4,r2,r6
   38790:	1105803a 	cmpltu	r2,r2,r4
   38794:	01cbc83a 	sub	r5,zero,r7
   38798:	2885c83a 	sub	r2,r5,r2
   3879c:	01800044 	movi	r6,1
   387a0:	a1800115 	stw	r6,4(r20)
   387a4:	a5c00215 	stw	r23,8(r20)
   387a8:	a1000315 	stw	r4,12(r20)
   387ac:	a0800415 	stw	r2,16(r20)
   387b0:	003f8206 	br	385bc <_fpadd_parts+0x124>
   387b4:	203f7226 	beq	r4,zero,38580 <_fpadd_parts+0xe8>
   387b8:	35bff804 	addi	r22,r6,-32
   387bc:	b9af883a 	add	r23,r23,r6
   387c0:	b0003116 	blt	r22,zero,38888 <_fpadd_parts+0x3f0>
   387c4:	959ad83a 	srl	r13,r18,r22
   387c8:	001d883a 	mov	r14,zero
   387cc:	000f883a 	mov	r7,zero
   387d0:	01000044 	movi	r4,1
   387d4:	0011883a 	mov	r8,zero
   387d8:	b0002516 	blt	r22,zero,38870 <_fpadd_parts+0x3d8>
   387dc:	2594983a 	sll	r10,r4,r22
   387e0:	0013883a 	mov	r9,zero
   387e4:	00bfffc4 	movi	r2,-1
   387e8:	4889883a 	add	r4,r9,r2
   387ec:	508b883a 	add	r5,r10,r2
   387f0:	224d803a 	cmpltu	r6,r4,r9
   387f4:	314b883a 	add	r5,r6,r5
   387f8:	8904703a 	and	r2,r17,r4
   387fc:	9146703a 	and	r3,r18,r5
   38800:	10c4b03a 	or	r2,r2,r3
   38804:	10000226 	beq	r2,zero,38810 <_fpadd_parts+0x378>
   38808:	01c00044 	movi	r7,1
   3880c:	0011883a 	mov	r8,zero
   38810:	69e2b03a 	or	r17,r13,r7
   38814:	7224b03a 	or	r18,r14,r8
   38818:	003f5906 	br	38580 <_fpadd_parts+0xe8>
   3881c:	8407883a 	add	r3,r16,r16
   38820:	008007c4 	movi	r2,31
   38824:	1185c83a 	sub	r2,r2,r6
   38828:	1886983a 	sll	r3,r3,r2
   3882c:	7996d83a 	srl	r11,r15,r6
   38830:	8198d83a 	srl	r12,r16,r6
   38834:	1ad6b03a 	or	r11,r3,r11
   38838:	003f3e06 	br	38534 <_fpadd_parts+0x9c>
   3883c:	2006d07a 	srli	r3,r4,1
   38840:	008007c4 	movi	r2,31
   38844:	1185c83a 	sub	r2,r2,r6
   38848:	1890d83a 	srl	r8,r3,r2
   3884c:	218e983a 	sll	r7,r4,r6
   38850:	003f3e06 	br	3854c <_fpadd_parts+0xb4>
   38854:	113f821e 	bne	r2,r4,38660 <_fpadd_parts+0x1c8>
   38858:	28c00117 	ldw	r3,4(r5)
   3885c:	98800117 	ldw	r2,4(r19)
   38860:	10ff7f26 	beq	r2,r3,38660 <_fpadd_parts+0x1c8>
   38864:	04c00074 	movhi	r19,1
   38868:	9cc09404 	addi	r19,r19,592
   3886c:	003f7c06 	br	38660 <_fpadd_parts+0x1c8>
   38870:	2006d07a 	srli	r3,r4,1
   38874:	008007c4 	movi	r2,31
   38878:	1185c83a 	sub	r2,r2,r6
   3887c:	1894d83a 	srl	r10,r3,r2
   38880:	2192983a 	sll	r9,r4,r6
   38884:	003fd706 	br	387e4 <_fpadd_parts+0x34c>
   38888:	9487883a 	add	r3,r18,r18
   3888c:	008007c4 	movi	r2,31
   38890:	1185c83a 	sub	r2,r2,r6
   38894:	1886983a 	sll	r3,r3,r2
   38898:	899ad83a 	srl	r13,r17,r6
   3889c:	919cd83a 	srl	r14,r18,r6
   388a0:	1b5ab03a 	or	r13,r3,r13
   388a4:	003fc906 	br	387cc <_fpadd_parts+0x334>

000388a8 <__subdf3>:
   388a8:	deffea04 	addi	sp,sp,-88
   388ac:	dcc01415 	stw	r19,80(sp)
   388b0:	dcc00404 	addi	r19,sp,16
   388b4:	2011883a 	mov	r8,r4
   388b8:	2813883a 	mov	r9,r5
   388bc:	dc401315 	stw	r17,76(sp)
   388c0:	d809883a 	mov	r4,sp
   388c4:	980b883a 	mov	r5,r19
   388c8:	dc400904 	addi	r17,sp,36
   388cc:	dfc01515 	stw	ra,84(sp)
   388d0:	da400115 	stw	r9,4(sp)
   388d4:	d9c00315 	stw	r7,12(sp)
   388d8:	da000015 	stw	r8,0(sp)
   388dc:	d9800215 	stw	r6,8(sp)
   388e0:	0039b3c0 	call	39b3c <__unpack_d>
   388e4:	d9000204 	addi	r4,sp,8
   388e8:	880b883a 	mov	r5,r17
   388ec:	0039b3c0 	call	39b3c <__unpack_d>
   388f0:	d8800a17 	ldw	r2,40(sp)
   388f4:	880b883a 	mov	r5,r17
   388f8:	9809883a 	mov	r4,r19
   388fc:	d9800e04 	addi	r6,sp,56
   38900:	1080005c 	xori	r2,r2,1
   38904:	d8800a15 	stw	r2,40(sp)
   38908:	00384980 	call	38498 <_fpadd_parts>
   3890c:	1009883a 	mov	r4,r2
   38910:	00398280 	call	39828 <__pack_d>
   38914:	dfc01517 	ldw	ra,84(sp)
   38918:	dcc01417 	ldw	r19,80(sp)
   3891c:	dc401317 	ldw	r17,76(sp)
   38920:	dec01604 	addi	sp,sp,88
   38924:	f800283a 	ret

00038928 <__adddf3>:
   38928:	deffea04 	addi	sp,sp,-88
   3892c:	dcc01415 	stw	r19,80(sp)
   38930:	dcc00404 	addi	r19,sp,16
   38934:	2011883a 	mov	r8,r4
   38938:	2813883a 	mov	r9,r5
   3893c:	dc401315 	stw	r17,76(sp)
   38940:	d809883a 	mov	r4,sp
   38944:	980b883a 	mov	r5,r19
   38948:	dc400904 	addi	r17,sp,36
   3894c:	dfc01515 	stw	ra,84(sp)
   38950:	da400115 	stw	r9,4(sp)
   38954:	d9c00315 	stw	r7,12(sp)
   38958:	da000015 	stw	r8,0(sp)
   3895c:	d9800215 	stw	r6,8(sp)
   38960:	0039b3c0 	call	39b3c <__unpack_d>
   38964:	d9000204 	addi	r4,sp,8
   38968:	880b883a 	mov	r5,r17
   3896c:	0039b3c0 	call	39b3c <__unpack_d>
   38970:	d9800e04 	addi	r6,sp,56
   38974:	9809883a 	mov	r4,r19
   38978:	880b883a 	mov	r5,r17
   3897c:	00384980 	call	38498 <_fpadd_parts>
   38980:	1009883a 	mov	r4,r2
   38984:	00398280 	call	39828 <__pack_d>
   38988:	dfc01517 	ldw	ra,84(sp)
   3898c:	dcc01417 	ldw	r19,80(sp)
   38990:	dc401317 	ldw	r17,76(sp)
   38994:	dec01604 	addi	sp,sp,88
   38998:	f800283a 	ret

0003899c <__muldf3>:
   3899c:	deffe004 	addi	sp,sp,-128
   389a0:	dc401815 	stw	r17,96(sp)
   389a4:	dc400404 	addi	r17,sp,16
   389a8:	2011883a 	mov	r8,r4
   389ac:	2813883a 	mov	r9,r5
   389b0:	dc001715 	stw	r16,92(sp)
   389b4:	d809883a 	mov	r4,sp
   389b8:	880b883a 	mov	r5,r17
   389bc:	dc000904 	addi	r16,sp,36
   389c0:	dfc01f15 	stw	ra,124(sp)
   389c4:	da400115 	stw	r9,4(sp)
   389c8:	d9c00315 	stw	r7,12(sp)
   389cc:	da000015 	stw	r8,0(sp)
   389d0:	d9800215 	stw	r6,8(sp)
   389d4:	ddc01e15 	stw	r23,120(sp)
   389d8:	dd801d15 	stw	r22,116(sp)
   389dc:	dd401c15 	stw	r21,112(sp)
   389e0:	dd001b15 	stw	r20,108(sp)
   389e4:	dcc01a15 	stw	r19,104(sp)
   389e8:	dc801915 	stw	r18,100(sp)
   389ec:	0039b3c0 	call	39b3c <__unpack_d>
   389f0:	d9000204 	addi	r4,sp,8
   389f4:	800b883a 	mov	r5,r16
   389f8:	0039b3c0 	call	39b3c <__unpack_d>
   389fc:	d9000417 	ldw	r4,16(sp)
   38a00:	00800044 	movi	r2,1
   38a04:	1100102e 	bgeu	r2,r4,38a48 <__muldf3+0xac>
   38a08:	d8c00917 	ldw	r3,36(sp)
   38a0c:	10c0062e 	bgeu	r2,r3,38a28 <__muldf3+0x8c>
   38a10:	00800104 	movi	r2,4
   38a14:	20800a26 	beq	r4,r2,38a40 <__muldf3+0xa4>
   38a18:	1880cc26 	beq	r3,r2,38d4c <__muldf3+0x3b0>
   38a1c:	00800084 	movi	r2,2
   38a20:	20800926 	beq	r4,r2,38a48 <__muldf3+0xac>
   38a24:	1880191e 	bne	r3,r2,38a8c <__muldf3+0xf0>
   38a28:	d8c00a17 	ldw	r3,40(sp)
   38a2c:	d8800517 	ldw	r2,20(sp)
   38a30:	8009883a 	mov	r4,r16
   38a34:	10c4c03a 	cmpne	r2,r2,r3
   38a38:	d8800a15 	stw	r2,40(sp)
   38a3c:	00000706 	br	38a5c <__muldf3+0xc0>
   38a40:	00800084 	movi	r2,2
   38a44:	1880c326 	beq	r3,r2,38d54 <__muldf3+0x3b8>
   38a48:	d8800517 	ldw	r2,20(sp)
   38a4c:	d8c00a17 	ldw	r3,40(sp)
   38a50:	8809883a 	mov	r4,r17
   38a54:	10c4c03a 	cmpne	r2,r2,r3
   38a58:	d8800515 	stw	r2,20(sp)
   38a5c:	00398280 	call	39828 <__pack_d>
   38a60:	dfc01f17 	ldw	ra,124(sp)
   38a64:	ddc01e17 	ldw	r23,120(sp)
   38a68:	dd801d17 	ldw	r22,116(sp)
   38a6c:	dd401c17 	ldw	r21,112(sp)
   38a70:	dd001b17 	ldw	r20,108(sp)
   38a74:	dcc01a17 	ldw	r19,104(sp)
   38a78:	dc801917 	ldw	r18,100(sp)
   38a7c:	dc401817 	ldw	r17,96(sp)
   38a80:	dc001717 	ldw	r16,92(sp)
   38a84:	dec02004 	addi	sp,sp,128
   38a88:	f800283a 	ret
   38a8c:	dd800717 	ldw	r22,28(sp)
   38a90:	dc800c17 	ldw	r18,48(sp)
   38a94:	002b883a 	mov	r21,zero
   38a98:	0023883a 	mov	r17,zero
   38a9c:	a80b883a 	mov	r5,r21
   38aa0:	b00d883a 	mov	r6,r22
   38aa4:	880f883a 	mov	r7,r17
   38aa8:	ddc00817 	ldw	r23,32(sp)
   38aac:	dcc00d17 	ldw	r19,52(sp)
   38ab0:	9009883a 	mov	r4,r18
   38ab4:	00397100 	call	39710 <__muldi3>
   38ab8:	001b883a 	mov	r13,zero
   38abc:	680f883a 	mov	r7,r13
   38ac0:	b009883a 	mov	r4,r22
   38ac4:	000b883a 	mov	r5,zero
   38ac8:	980d883a 	mov	r6,r19
   38acc:	b82d883a 	mov	r22,r23
   38ad0:	002f883a 	mov	r23,zero
   38ad4:	db401615 	stw	r13,88(sp)
   38ad8:	d8801315 	stw	r2,76(sp)
   38adc:	d8c01415 	stw	r3,80(sp)
   38ae0:	dcc01515 	stw	r19,84(sp)
   38ae4:	00397100 	call	39710 <__muldi3>
   38ae8:	b00d883a 	mov	r6,r22
   38aec:	000b883a 	mov	r5,zero
   38af0:	9009883a 	mov	r4,r18
   38af4:	b80f883a 	mov	r7,r23
   38af8:	1021883a 	mov	r16,r2
   38afc:	1823883a 	mov	r17,r3
   38b00:	00397100 	call	39710 <__muldi3>
   38b04:	8085883a 	add	r2,r16,r2
   38b08:	140d803a 	cmpltu	r6,r2,r16
   38b0c:	88c7883a 	add	r3,r17,r3
   38b10:	30cd883a 	add	r6,r6,r3
   38b14:	1029883a 	mov	r20,r2
   38b18:	302b883a 	mov	r21,r6
   38b1c:	da801317 	ldw	r10,76(sp)
   38b20:	dac01417 	ldw	r11,80(sp)
   38b24:	db001517 	ldw	r12,84(sp)
   38b28:	db401617 	ldw	r13,88(sp)
   38b2c:	3440612e 	bgeu	r6,r17,38cb4 <__muldf3+0x318>
   38b30:	0009883a 	mov	r4,zero
   38b34:	5105883a 	add	r2,r10,r4
   38b38:	128d803a 	cmpltu	r6,r2,r10
   38b3c:	5d07883a 	add	r3,r11,r20
   38b40:	30cd883a 	add	r6,r6,r3
   38b44:	0021883a 	mov	r16,zero
   38b48:	04400044 	movi	r17,1
   38b4c:	1025883a 	mov	r18,r2
   38b50:	3027883a 	mov	r19,r6
   38b54:	32c06236 	bltu	r6,r11,38ce0 <__muldf3+0x344>
   38b58:	59807a26 	beq	r11,r6,38d44 <__muldf3+0x3a8>
   38b5c:	680b883a 	mov	r5,r13
   38b60:	b80f883a 	mov	r7,r23
   38b64:	6009883a 	mov	r4,r12
   38b68:	b00d883a 	mov	r6,r22
   38b6c:	00397100 	call	39710 <__muldi3>
   38b70:	1009883a 	mov	r4,r2
   38b74:	000f883a 	mov	r7,zero
   38b78:	1545883a 	add	r2,r2,r21
   38b7c:	1111803a 	cmpltu	r8,r2,r4
   38b80:	19c7883a 	add	r3,r3,r7
   38b84:	40c7883a 	add	r3,r8,r3
   38b88:	88cb883a 	add	r5,r17,r3
   38b8c:	d8c00617 	ldw	r3,24(sp)
   38b90:	8089883a 	add	r4,r16,r2
   38b94:	d8800b17 	ldw	r2,44(sp)
   38b98:	18c00104 	addi	r3,r3,4
   38b9c:	240d803a 	cmpltu	r6,r4,r16
   38ba0:	10c7883a 	add	r3,r2,r3
   38ba4:	2013883a 	mov	r9,r4
   38ba8:	d8800a17 	ldw	r2,40(sp)
   38bac:	d9000517 	ldw	r4,20(sp)
   38bb0:	314d883a 	add	r6,r6,r5
   38bb4:	3015883a 	mov	r10,r6
   38bb8:	2088c03a 	cmpne	r4,r4,r2
   38bbc:	00880034 	movhi	r2,8192
   38bc0:	10bfffc4 	addi	r2,r2,-1
   38bc4:	d9000f15 	stw	r4,60(sp)
   38bc8:	d8c01015 	stw	r3,64(sp)
   38bcc:	1180162e 	bgeu	r2,r6,38c28 <__muldf3+0x28c>
   38bd0:	1811883a 	mov	r8,r3
   38bd4:	101f883a 	mov	r15,r2
   38bd8:	980497fa 	slli	r2,r19,31
   38bdc:	9016d07a 	srli	r11,r18,1
   38be0:	500697fa 	slli	r3,r10,31
   38be4:	480cd07a 	srli	r6,r9,1
   38be8:	500ed07a 	srli	r7,r10,1
   38bec:	12d6b03a 	or	r11,r2,r11
   38bf0:	00800044 	movi	r2,1
   38bf4:	198cb03a 	or	r6,r3,r6
   38bf8:	4888703a 	and	r4,r9,r2
   38bfc:	9818d07a 	srli	r12,r19,1
   38c00:	001b883a 	mov	r13,zero
   38c04:	03a00034 	movhi	r14,32768
   38c08:	3013883a 	mov	r9,r6
   38c0c:	3815883a 	mov	r10,r7
   38c10:	4091883a 	add	r8,r8,r2
   38c14:	20000226 	beq	r4,zero,38c20 <__muldf3+0x284>
   38c18:	5b64b03a 	or	r18,r11,r13
   38c1c:	63a6b03a 	or	r19,r12,r14
   38c20:	7abfed36 	bltu	r15,r10,38bd8 <__muldf3+0x23c>
   38c24:	da001015 	stw	r8,64(sp)
   38c28:	00840034 	movhi	r2,4096
   38c2c:	10bfffc4 	addi	r2,r2,-1
   38c30:	12801436 	bltu	r2,r10,38c84 <__muldf3+0x2e8>
   38c34:	da001017 	ldw	r8,64(sp)
   38c38:	101f883a 	mov	r15,r2
   38c3c:	4a45883a 	add	r2,r9,r9
   38c40:	124d803a 	cmpltu	r6,r2,r9
   38c44:	5287883a 	add	r3,r10,r10
   38c48:	9497883a 	add	r11,r18,r18
   38c4c:	5c8f803a 	cmpltu	r7,r11,r18
   38c50:	9cd9883a 	add	r12,r19,r19
   38c54:	01000044 	movi	r4,1
   38c58:	30cd883a 	add	r6,r6,r3
   38c5c:	3b0f883a 	add	r7,r7,r12
   38c60:	423fffc4 	addi	r8,r8,-1
   38c64:	1013883a 	mov	r9,r2
   38c68:	3015883a 	mov	r10,r6
   38c6c:	111ab03a 	or	r13,r2,r4
   38c70:	98003016 	blt	r19,zero,38d34 <__muldf3+0x398>
   38c74:	5825883a 	mov	r18,r11
   38c78:	3827883a 	mov	r19,r7
   38c7c:	7abfef2e 	bgeu	r15,r10,38c3c <__muldf3+0x2a0>
   38c80:	da001015 	stw	r8,64(sp)
   38c84:	00803fc4 	movi	r2,255
   38c88:	488e703a 	and	r7,r9,r2
   38c8c:	00802004 	movi	r2,128
   38c90:	0007883a 	mov	r3,zero
   38c94:	0011883a 	mov	r8,zero
   38c98:	38801826 	beq	r7,r2,38cfc <__muldf3+0x360>
   38c9c:	008000c4 	movi	r2,3
   38ca0:	d9000e04 	addi	r4,sp,56
   38ca4:	da801215 	stw	r10,72(sp)
   38ca8:	d8800e15 	stw	r2,56(sp)
   38cac:	da401115 	stw	r9,68(sp)
   38cb0:	003f6a06 	br	38a5c <__muldf3+0xc0>
   38cb4:	89802126 	beq	r17,r6,38d3c <__muldf3+0x3a0>
   38cb8:	0009883a 	mov	r4,zero
   38cbc:	5105883a 	add	r2,r10,r4
   38cc0:	128d803a 	cmpltu	r6,r2,r10
   38cc4:	5d07883a 	add	r3,r11,r20
   38cc8:	30cd883a 	add	r6,r6,r3
   38ccc:	0021883a 	mov	r16,zero
   38cd0:	0023883a 	mov	r17,zero
   38cd4:	1025883a 	mov	r18,r2
   38cd8:	3027883a 	mov	r19,r6
   38cdc:	32ff9e2e 	bgeu	r6,r11,38b58 <__muldf3+0x1bc>
   38ce0:	00800044 	movi	r2,1
   38ce4:	8089883a 	add	r4,r16,r2
   38ce8:	240d803a 	cmpltu	r6,r4,r16
   38cec:	344d883a 	add	r6,r6,r17
   38cf0:	2021883a 	mov	r16,r4
   38cf4:	3023883a 	mov	r17,r6
   38cf8:	003f9806 	br	38b5c <__muldf3+0x1c0>
   38cfc:	403fe71e 	bne	r8,zero,38c9c <__muldf3+0x300>
   38d00:	01004004 	movi	r4,256
   38d04:	4904703a 	and	r2,r9,r4
   38d08:	10c4b03a 	or	r2,r2,r3
   38d0c:	103fe31e 	bne	r2,zero,38c9c <__muldf3+0x300>
   38d10:	94c4b03a 	or	r2,r18,r19
   38d14:	103fe126 	beq	r2,zero,38c9c <__muldf3+0x300>
   38d18:	49c5883a 	add	r2,r9,r7
   38d1c:	1251803a 	cmpltu	r8,r2,r9
   38d20:	4291883a 	add	r8,r8,r10
   38d24:	013fc004 	movi	r4,-256
   38d28:	1112703a 	and	r9,r2,r4
   38d2c:	4015883a 	mov	r10,r8
   38d30:	003fda06 	br	38c9c <__muldf3+0x300>
   38d34:	6813883a 	mov	r9,r13
   38d38:	003fce06 	br	38c74 <__muldf3+0x2d8>
   38d3c:	143f7c36 	bltu	r2,r16,38b30 <__muldf3+0x194>
   38d40:	003fdd06 	br	38cb8 <__muldf3+0x31c>
   38d44:	12bf852e 	bgeu	r2,r10,38b5c <__muldf3+0x1c0>
   38d48:	003fe506 	br	38ce0 <__muldf3+0x344>
   38d4c:	00800084 	movi	r2,2
   38d50:	20bf351e 	bne	r4,r2,38a28 <__muldf3+0x8c>
   38d54:	01000074 	movhi	r4,1
   38d58:	21009404 	addi	r4,r4,592
   38d5c:	003f3f06 	br	38a5c <__muldf3+0xc0>

00038d60 <__divdf3>:
   38d60:	deffed04 	addi	sp,sp,-76
   38d64:	dcc01115 	stw	r19,68(sp)
   38d68:	dcc00404 	addi	r19,sp,16
   38d6c:	2011883a 	mov	r8,r4
   38d70:	2813883a 	mov	r9,r5
   38d74:	dc000e15 	stw	r16,56(sp)
   38d78:	d809883a 	mov	r4,sp
   38d7c:	980b883a 	mov	r5,r19
   38d80:	dc000904 	addi	r16,sp,36
   38d84:	dfc01215 	stw	ra,72(sp)
   38d88:	da400115 	stw	r9,4(sp)
   38d8c:	d9c00315 	stw	r7,12(sp)
   38d90:	da000015 	stw	r8,0(sp)
   38d94:	d9800215 	stw	r6,8(sp)
   38d98:	dc801015 	stw	r18,64(sp)
   38d9c:	dc400f15 	stw	r17,60(sp)
   38da0:	0039b3c0 	call	39b3c <__unpack_d>
   38da4:	d9000204 	addi	r4,sp,8
   38da8:	800b883a 	mov	r5,r16
   38dac:	0039b3c0 	call	39b3c <__unpack_d>
   38db0:	d9000417 	ldw	r4,16(sp)
   38db4:	00800044 	movi	r2,1
   38db8:	11000b2e 	bgeu	r2,r4,38de8 <__divdf3+0x88>
   38dbc:	d9400917 	ldw	r5,36(sp)
   38dc0:	1140762e 	bgeu	r2,r5,38f9c <__divdf3+0x23c>
   38dc4:	d8800517 	ldw	r2,20(sp)
   38dc8:	d8c00a17 	ldw	r3,40(sp)
   38dcc:	01800104 	movi	r6,4
   38dd0:	10c4f03a 	xor	r2,r2,r3
   38dd4:	d8800515 	stw	r2,20(sp)
   38dd8:	21800226 	beq	r4,r6,38de4 <__divdf3+0x84>
   38ddc:	00800084 	movi	r2,2
   38de0:	2080141e 	bne	r4,r2,38e34 <__divdf3+0xd4>
   38de4:	29000926 	beq	r5,r4,38e0c <__divdf3+0xac>
   38de8:	9809883a 	mov	r4,r19
   38dec:	00398280 	call	39828 <__pack_d>
   38df0:	dfc01217 	ldw	ra,72(sp)
   38df4:	dcc01117 	ldw	r19,68(sp)
   38df8:	dc801017 	ldw	r18,64(sp)
   38dfc:	dc400f17 	ldw	r17,60(sp)
   38e00:	dc000e17 	ldw	r16,56(sp)
   38e04:	dec01304 	addi	sp,sp,76
   38e08:	f800283a 	ret
   38e0c:	01000074 	movhi	r4,1
   38e10:	21009404 	addi	r4,r4,592
   38e14:	00398280 	call	39828 <__pack_d>
   38e18:	dfc01217 	ldw	ra,72(sp)
   38e1c:	dcc01117 	ldw	r19,68(sp)
   38e20:	dc801017 	ldw	r18,64(sp)
   38e24:	dc400f17 	ldw	r17,60(sp)
   38e28:	dc000e17 	ldw	r16,56(sp)
   38e2c:	dec01304 	addi	sp,sp,76
   38e30:	f800283a 	ret
   38e34:	29805b26 	beq	r5,r6,38fa4 <__divdf3+0x244>
   38e38:	28802d26 	beq	r5,r2,38ef0 <__divdf3+0x190>
   38e3c:	d8c00617 	ldw	r3,24(sp)
   38e40:	d8800b17 	ldw	r2,44(sp)
   38e44:	d9c00817 	ldw	r7,32(sp)
   38e48:	dc400d17 	ldw	r17,52(sp)
   38e4c:	188bc83a 	sub	r5,r3,r2
   38e50:	d9800717 	ldw	r6,28(sp)
   38e54:	dc000c17 	ldw	r16,48(sp)
   38e58:	d9400615 	stw	r5,24(sp)
   38e5c:	3c403836 	bltu	r7,r17,38f40 <__divdf3+0x1e0>
   38e60:	89c03626 	beq	r17,r7,38f3c <__divdf3+0x1dc>
   38e64:	0015883a 	mov	r10,zero
   38e68:	001d883a 	mov	r14,zero
   38e6c:	02c40034 	movhi	r11,4096
   38e70:	001f883a 	mov	r15,zero
   38e74:	003f883a 	mov	ra,zero
   38e78:	04800f44 	movi	r18,61
   38e7c:	00000f06 	br	38ebc <__divdf3+0x15c>
   38e80:	601d883a 	mov	r14,r12
   38e84:	681f883a 	mov	r15,r13
   38e88:	400d883a 	mov	r6,r8
   38e8c:	100f883a 	mov	r7,r2
   38e90:	3191883a 	add	r8,r6,r6
   38e94:	5808d07a 	srli	r4,r11,1
   38e98:	4185803a 	cmpltu	r2,r8,r6
   38e9c:	39d3883a 	add	r9,r7,r7
   38ea0:	28c6b03a 	or	r3,r5,r3
   38ea4:	1245883a 	add	r2,r2,r9
   38ea8:	1815883a 	mov	r10,r3
   38eac:	2017883a 	mov	r11,r4
   38eb0:	400d883a 	mov	r6,r8
   38eb4:	100f883a 	mov	r7,r2
   38eb8:	fc801726 	beq	ra,r18,38f18 <__divdf3+0x1b8>
   38ebc:	580a97fa 	slli	r5,r11,31
   38ec0:	5006d07a 	srli	r3,r10,1
   38ec4:	ffc00044 	addi	ra,ra,1
   38ec8:	3c7ff136 	bltu	r7,r17,38e90 <__divdf3+0x130>
   38ecc:	3411c83a 	sub	r8,r6,r16
   38ed0:	3205803a 	cmpltu	r2,r6,r8
   38ed4:	3c53c83a 	sub	r9,r7,r17
   38ed8:	7298b03a 	or	r12,r14,r10
   38edc:	7adab03a 	or	r13,r15,r11
   38ee0:	4885c83a 	sub	r2,r9,r2
   38ee4:	89ffe61e 	bne	r17,r7,38e80 <__divdf3+0x120>
   38ee8:	343fe936 	bltu	r6,r16,38e90 <__divdf3+0x130>
   38eec:	003fe406 	br	38e80 <__divdf3+0x120>
   38ef0:	9809883a 	mov	r4,r19
   38ef4:	d9800415 	stw	r6,16(sp)
   38ef8:	00398280 	call	39828 <__pack_d>
   38efc:	dfc01217 	ldw	ra,72(sp)
   38f00:	dcc01117 	ldw	r19,68(sp)
   38f04:	dc801017 	ldw	r18,64(sp)
   38f08:	dc400f17 	ldw	r17,60(sp)
   38f0c:	dc000e17 	ldw	r16,56(sp)
   38f10:	dec01304 	addi	sp,sp,76
   38f14:	f800283a 	ret
   38f18:	00803fc4 	movi	r2,255
   38f1c:	7090703a 	and	r8,r14,r2
   38f20:	00802004 	movi	r2,128
   38f24:	0007883a 	mov	r3,zero
   38f28:	0013883a 	mov	r9,zero
   38f2c:	40800d26 	beq	r8,r2,38f64 <__divdf3+0x204>
   38f30:	dbc00815 	stw	r15,32(sp)
   38f34:	db800715 	stw	r14,28(sp)
   38f38:	003fab06 	br	38de8 <__divdf3+0x88>
   38f3c:	343fc92e 	bgeu	r6,r16,38e64 <__divdf3+0x104>
   38f40:	3185883a 	add	r2,r6,r6
   38f44:	1189803a 	cmpltu	r4,r2,r6
   38f48:	39c7883a 	add	r3,r7,r7
   38f4c:	20c9883a 	add	r4,r4,r3
   38f50:	297fffc4 	addi	r5,r5,-1
   38f54:	100d883a 	mov	r6,r2
   38f58:	200f883a 	mov	r7,r4
   38f5c:	d9400615 	stw	r5,24(sp)
   38f60:	003fc006 	br	38e64 <__divdf3+0x104>
   38f64:	483ff21e 	bne	r9,zero,38f30 <__divdf3+0x1d0>
   38f68:	01004004 	movi	r4,256
   38f6c:	7104703a 	and	r2,r14,r4
   38f70:	10c4b03a 	or	r2,r2,r3
   38f74:	103fee1e 	bne	r2,zero,38f30 <__divdf3+0x1d0>
   38f78:	31c4b03a 	or	r2,r6,r7
   38f7c:	103fec26 	beq	r2,zero,38f30 <__divdf3+0x1d0>
   38f80:	7205883a 	add	r2,r14,r8
   38f84:	1391803a 	cmpltu	r8,r2,r14
   38f88:	43d1883a 	add	r8,r8,r15
   38f8c:	013fc004 	movi	r4,-256
   38f90:	111c703a 	and	r14,r2,r4
   38f94:	401f883a 	mov	r15,r8
   38f98:	003fe506 	br	38f30 <__divdf3+0x1d0>
   38f9c:	8009883a 	mov	r4,r16
   38fa0:	003f9206 	br	38dec <__divdf3+0x8c>
   38fa4:	9809883a 	mov	r4,r19
   38fa8:	d8000715 	stw	zero,28(sp)
   38fac:	d8000815 	stw	zero,32(sp)
   38fb0:	d8000615 	stw	zero,24(sp)
   38fb4:	003f8d06 	br	38dec <__divdf3+0x8c>

00038fb8 <__eqdf2>:
   38fb8:	deffef04 	addi	sp,sp,-68
   38fbc:	dc400f15 	stw	r17,60(sp)
   38fc0:	dc400404 	addi	r17,sp,16
   38fc4:	2005883a 	mov	r2,r4
   38fc8:	2807883a 	mov	r3,r5
   38fcc:	dc000e15 	stw	r16,56(sp)
   38fd0:	d809883a 	mov	r4,sp
   38fd4:	880b883a 	mov	r5,r17
   38fd8:	dc000904 	addi	r16,sp,36
   38fdc:	d8c00115 	stw	r3,4(sp)
   38fe0:	d8800015 	stw	r2,0(sp)
   38fe4:	d9800215 	stw	r6,8(sp)
   38fe8:	dfc01015 	stw	ra,64(sp)
   38fec:	d9c00315 	stw	r7,12(sp)
   38ff0:	0039b3c0 	call	39b3c <__unpack_d>
   38ff4:	d9000204 	addi	r4,sp,8
   38ff8:	800b883a 	mov	r5,r16
   38ffc:	0039b3c0 	call	39b3c <__unpack_d>
   39000:	d8800417 	ldw	r2,16(sp)
   39004:	00c00044 	movi	r3,1
   39008:	180d883a 	mov	r6,r3
   3900c:	1880062e 	bgeu	r3,r2,39028 <__eqdf2+0x70>
   39010:	d8800917 	ldw	r2,36(sp)
   39014:	8809883a 	mov	r4,r17
   39018:	800b883a 	mov	r5,r16
   3901c:	1880022e 	bgeu	r3,r2,39028 <__eqdf2+0x70>
   39020:	0039c740 	call	39c74 <__fpcmp_parts_d>
   39024:	100d883a 	mov	r6,r2
   39028:	3005883a 	mov	r2,r6
   3902c:	dfc01017 	ldw	ra,64(sp)
   39030:	dc400f17 	ldw	r17,60(sp)
   39034:	dc000e17 	ldw	r16,56(sp)
   39038:	dec01104 	addi	sp,sp,68
   3903c:	f800283a 	ret

00039040 <__nedf2>:
   39040:	deffef04 	addi	sp,sp,-68
   39044:	dc400f15 	stw	r17,60(sp)
   39048:	dc400404 	addi	r17,sp,16
   3904c:	2005883a 	mov	r2,r4
   39050:	2807883a 	mov	r3,r5
   39054:	dc000e15 	stw	r16,56(sp)
   39058:	d809883a 	mov	r4,sp
   3905c:	880b883a 	mov	r5,r17
   39060:	dc000904 	addi	r16,sp,36
   39064:	d8c00115 	stw	r3,4(sp)
   39068:	d8800015 	stw	r2,0(sp)
   3906c:	d9800215 	stw	r6,8(sp)
   39070:	dfc01015 	stw	ra,64(sp)
   39074:	d9c00315 	stw	r7,12(sp)
   39078:	0039b3c0 	call	39b3c <__unpack_d>
   3907c:	d9000204 	addi	r4,sp,8
   39080:	800b883a 	mov	r5,r16
   39084:	0039b3c0 	call	39b3c <__unpack_d>
   39088:	d8800417 	ldw	r2,16(sp)
   3908c:	00c00044 	movi	r3,1
   39090:	180d883a 	mov	r6,r3
   39094:	1880062e 	bgeu	r3,r2,390b0 <__nedf2+0x70>
   39098:	d8800917 	ldw	r2,36(sp)
   3909c:	8809883a 	mov	r4,r17
   390a0:	800b883a 	mov	r5,r16
   390a4:	1880022e 	bgeu	r3,r2,390b0 <__nedf2+0x70>
   390a8:	0039c740 	call	39c74 <__fpcmp_parts_d>
   390ac:	100d883a 	mov	r6,r2
   390b0:	3005883a 	mov	r2,r6
   390b4:	dfc01017 	ldw	ra,64(sp)
   390b8:	dc400f17 	ldw	r17,60(sp)
   390bc:	dc000e17 	ldw	r16,56(sp)
   390c0:	dec01104 	addi	sp,sp,68
   390c4:	f800283a 	ret

000390c8 <__gtdf2>:
   390c8:	deffef04 	addi	sp,sp,-68
   390cc:	dc400f15 	stw	r17,60(sp)
   390d0:	dc400404 	addi	r17,sp,16
   390d4:	2005883a 	mov	r2,r4
   390d8:	2807883a 	mov	r3,r5
   390dc:	dc000e15 	stw	r16,56(sp)
   390e0:	d809883a 	mov	r4,sp
   390e4:	880b883a 	mov	r5,r17
   390e8:	dc000904 	addi	r16,sp,36
   390ec:	d8c00115 	stw	r3,4(sp)
   390f0:	d8800015 	stw	r2,0(sp)
   390f4:	d9800215 	stw	r6,8(sp)
   390f8:	dfc01015 	stw	ra,64(sp)
   390fc:	d9c00315 	stw	r7,12(sp)
   39100:	0039b3c0 	call	39b3c <__unpack_d>
   39104:	d9000204 	addi	r4,sp,8
   39108:	800b883a 	mov	r5,r16
   3910c:	0039b3c0 	call	39b3c <__unpack_d>
   39110:	d8800417 	ldw	r2,16(sp)
   39114:	00c00044 	movi	r3,1
   39118:	01bfffc4 	movi	r6,-1
   3911c:	1880062e 	bgeu	r3,r2,39138 <__gtdf2+0x70>
   39120:	d8800917 	ldw	r2,36(sp)
   39124:	8809883a 	mov	r4,r17
   39128:	800b883a 	mov	r5,r16
   3912c:	1880022e 	bgeu	r3,r2,39138 <__gtdf2+0x70>
   39130:	0039c740 	call	39c74 <__fpcmp_parts_d>
   39134:	100d883a 	mov	r6,r2
   39138:	3005883a 	mov	r2,r6
   3913c:	dfc01017 	ldw	ra,64(sp)
   39140:	dc400f17 	ldw	r17,60(sp)
   39144:	dc000e17 	ldw	r16,56(sp)
   39148:	dec01104 	addi	sp,sp,68
   3914c:	f800283a 	ret

00039150 <__gedf2>:
   39150:	deffef04 	addi	sp,sp,-68
   39154:	dc400f15 	stw	r17,60(sp)
   39158:	dc400404 	addi	r17,sp,16
   3915c:	2005883a 	mov	r2,r4
   39160:	2807883a 	mov	r3,r5
   39164:	dc000e15 	stw	r16,56(sp)
   39168:	d809883a 	mov	r4,sp
   3916c:	880b883a 	mov	r5,r17
   39170:	dc000904 	addi	r16,sp,36
   39174:	d8c00115 	stw	r3,4(sp)
   39178:	d8800015 	stw	r2,0(sp)
   3917c:	d9800215 	stw	r6,8(sp)
   39180:	dfc01015 	stw	ra,64(sp)
   39184:	d9c00315 	stw	r7,12(sp)
   39188:	0039b3c0 	call	39b3c <__unpack_d>
   3918c:	d9000204 	addi	r4,sp,8
   39190:	800b883a 	mov	r5,r16
   39194:	0039b3c0 	call	39b3c <__unpack_d>
   39198:	d8800417 	ldw	r2,16(sp)
   3919c:	00c00044 	movi	r3,1
   391a0:	01bfffc4 	movi	r6,-1
   391a4:	1880062e 	bgeu	r3,r2,391c0 <__gedf2+0x70>
   391a8:	d8800917 	ldw	r2,36(sp)
   391ac:	8809883a 	mov	r4,r17
   391b0:	800b883a 	mov	r5,r16
   391b4:	1880022e 	bgeu	r3,r2,391c0 <__gedf2+0x70>
   391b8:	0039c740 	call	39c74 <__fpcmp_parts_d>
   391bc:	100d883a 	mov	r6,r2
   391c0:	3005883a 	mov	r2,r6
   391c4:	dfc01017 	ldw	ra,64(sp)
   391c8:	dc400f17 	ldw	r17,60(sp)
   391cc:	dc000e17 	ldw	r16,56(sp)
   391d0:	dec01104 	addi	sp,sp,68
   391d4:	f800283a 	ret

000391d8 <__ltdf2>:
   391d8:	deffef04 	addi	sp,sp,-68
   391dc:	dc400f15 	stw	r17,60(sp)
   391e0:	dc400404 	addi	r17,sp,16
   391e4:	2005883a 	mov	r2,r4
   391e8:	2807883a 	mov	r3,r5
   391ec:	dc000e15 	stw	r16,56(sp)
   391f0:	d809883a 	mov	r4,sp
   391f4:	880b883a 	mov	r5,r17
   391f8:	dc000904 	addi	r16,sp,36
   391fc:	d8c00115 	stw	r3,4(sp)
   39200:	d8800015 	stw	r2,0(sp)
   39204:	d9800215 	stw	r6,8(sp)
   39208:	dfc01015 	stw	ra,64(sp)
   3920c:	d9c00315 	stw	r7,12(sp)
   39210:	0039b3c0 	call	39b3c <__unpack_d>
   39214:	d9000204 	addi	r4,sp,8
   39218:	800b883a 	mov	r5,r16
   3921c:	0039b3c0 	call	39b3c <__unpack_d>
   39220:	d8800417 	ldw	r2,16(sp)
   39224:	00c00044 	movi	r3,1
   39228:	180d883a 	mov	r6,r3
   3922c:	1880062e 	bgeu	r3,r2,39248 <__ltdf2+0x70>
   39230:	d8800917 	ldw	r2,36(sp)
   39234:	8809883a 	mov	r4,r17
   39238:	800b883a 	mov	r5,r16
   3923c:	1880022e 	bgeu	r3,r2,39248 <__ltdf2+0x70>
   39240:	0039c740 	call	39c74 <__fpcmp_parts_d>
   39244:	100d883a 	mov	r6,r2
   39248:	3005883a 	mov	r2,r6
   3924c:	dfc01017 	ldw	ra,64(sp)
   39250:	dc400f17 	ldw	r17,60(sp)
   39254:	dc000e17 	ldw	r16,56(sp)
   39258:	dec01104 	addi	sp,sp,68
   3925c:	f800283a 	ret

00039260 <__floatsidf>:
   39260:	2006d7fa 	srli	r3,r4,31
   39264:	defff604 	addi	sp,sp,-40
   39268:	008000c4 	movi	r2,3
   3926c:	dfc00915 	stw	ra,36(sp)
   39270:	dcc00815 	stw	r19,32(sp)
   39274:	dc800715 	stw	r18,28(sp)
   39278:	dc400615 	stw	r17,24(sp)
   3927c:	dc000515 	stw	r16,20(sp)
   39280:	d8800015 	stw	r2,0(sp)
   39284:	d8c00115 	stw	r3,4(sp)
   39288:	20000f1e 	bne	r4,zero,392c8 <__floatsidf+0x68>
   3928c:	00800084 	movi	r2,2
   39290:	d8800015 	stw	r2,0(sp)
   39294:	d809883a 	mov	r4,sp
   39298:	00398280 	call	39828 <__pack_d>
   3929c:	1009883a 	mov	r4,r2
   392a0:	180b883a 	mov	r5,r3
   392a4:	2005883a 	mov	r2,r4
   392a8:	2807883a 	mov	r3,r5
   392ac:	dfc00917 	ldw	ra,36(sp)
   392b0:	dcc00817 	ldw	r19,32(sp)
   392b4:	dc800717 	ldw	r18,28(sp)
   392b8:	dc400617 	ldw	r17,24(sp)
   392bc:	dc000517 	ldw	r16,20(sp)
   392c0:	dec00a04 	addi	sp,sp,40
   392c4:	f800283a 	ret
   392c8:	00800f04 	movi	r2,60
   392cc:	1807003a 	cmpeq	r3,r3,zero
   392d0:	d8800215 	stw	r2,8(sp)
   392d4:	18001126 	beq	r3,zero,3931c <__floatsidf+0xbc>
   392d8:	0027883a 	mov	r19,zero
   392dc:	2025883a 	mov	r18,r4
   392e0:	d9000315 	stw	r4,12(sp)
   392e4:	dcc00415 	stw	r19,16(sp)
   392e8:	00397a80 	call	397a8 <__clzsi2>
   392ec:	11000744 	addi	r4,r2,29
   392f0:	013fe80e 	bge	zero,r4,39294 <__floatsidf+0x34>
   392f4:	10bfff44 	addi	r2,r2,-3
   392f8:	10000c16 	blt	r2,zero,3932c <__floatsidf+0xcc>
   392fc:	90a2983a 	sll	r17,r18,r2
   39300:	0021883a 	mov	r16,zero
   39304:	d8800217 	ldw	r2,8(sp)
   39308:	dc400415 	stw	r17,16(sp)
   3930c:	dc000315 	stw	r16,12(sp)
   39310:	1105c83a 	sub	r2,r2,r4
   39314:	d8800215 	stw	r2,8(sp)
   39318:	003fde06 	br	39294 <__floatsidf+0x34>
   3931c:	00a00034 	movhi	r2,32768
   39320:	20800a26 	beq	r4,r2,3934c <__floatsidf+0xec>
   39324:	0109c83a 	sub	r4,zero,r4
   39328:	003feb06 	br	392d8 <__floatsidf+0x78>
   3932c:	9006d07a 	srli	r3,r18,1
   39330:	008007c4 	movi	r2,31
   39334:	1105c83a 	sub	r2,r2,r4
   39338:	1886d83a 	srl	r3,r3,r2
   3933c:	9922983a 	sll	r17,r19,r4
   39340:	9120983a 	sll	r16,r18,r4
   39344:	1c62b03a 	or	r17,r3,r17
   39348:	003fee06 	br	39304 <__floatsidf+0xa4>
   3934c:	0009883a 	mov	r4,zero
   39350:	01707834 	movhi	r5,49632
   39354:	003fd306 	br	392a4 <__floatsidf+0x44>

00039358 <__fixdfsi>:
   39358:	defff804 	addi	sp,sp,-32
   3935c:	2005883a 	mov	r2,r4
   39360:	2807883a 	mov	r3,r5
   39364:	d809883a 	mov	r4,sp
   39368:	d9400204 	addi	r5,sp,8
   3936c:	d8c00115 	stw	r3,4(sp)
   39370:	d8800015 	stw	r2,0(sp)
   39374:	dfc00715 	stw	ra,28(sp)
   39378:	0039b3c0 	call	39b3c <__unpack_d>
   3937c:	d8c00217 	ldw	r3,8(sp)
   39380:	00800084 	movi	r2,2
   39384:	1880051e 	bne	r3,r2,3939c <__fixdfsi+0x44>
   39388:	0007883a 	mov	r3,zero
   3938c:	1805883a 	mov	r2,r3
   39390:	dfc00717 	ldw	ra,28(sp)
   39394:	dec00804 	addi	sp,sp,32
   39398:	f800283a 	ret
   3939c:	00800044 	movi	r2,1
   393a0:	10fff92e 	bgeu	r2,r3,39388 <__fixdfsi+0x30>
   393a4:	00800104 	movi	r2,4
   393a8:	18800426 	beq	r3,r2,393bc <__fixdfsi+0x64>
   393ac:	d8c00417 	ldw	r3,16(sp)
   393b0:	183ff516 	blt	r3,zero,39388 <__fixdfsi+0x30>
   393b4:	00800784 	movi	r2,30
   393b8:	10c0080e 	bge	r2,r3,393dc <__fixdfsi+0x84>
   393bc:	d8800317 	ldw	r2,12(sp)
   393c0:	1000121e 	bne	r2,zero,3940c <__fixdfsi+0xb4>
   393c4:	00e00034 	movhi	r3,32768
   393c8:	18ffffc4 	addi	r3,r3,-1
   393cc:	1805883a 	mov	r2,r3
   393d0:	dfc00717 	ldw	ra,28(sp)
   393d4:	dec00804 	addi	sp,sp,32
   393d8:	f800283a 	ret
   393dc:	00800f04 	movi	r2,60
   393e0:	10d1c83a 	sub	r8,r2,r3
   393e4:	40bff804 	addi	r2,r8,-32
   393e8:	d9800517 	ldw	r6,20(sp)
   393ec:	d9c00617 	ldw	r7,24(sp)
   393f0:	10000816 	blt	r2,zero,39414 <__fixdfsi+0xbc>
   393f4:	3888d83a 	srl	r4,r7,r2
   393f8:	d8800317 	ldw	r2,12(sp)
   393fc:	2007883a 	mov	r3,r4
   39400:	103fe226 	beq	r2,zero,3938c <__fixdfsi+0x34>
   39404:	0107c83a 	sub	r3,zero,r4
   39408:	003fe006 	br	3938c <__fixdfsi+0x34>
   3940c:	00e00034 	movhi	r3,32768
   39410:	003fde06 	br	3938c <__fixdfsi+0x34>
   39414:	39c7883a 	add	r3,r7,r7
   39418:	008007c4 	movi	r2,31
   3941c:	1205c83a 	sub	r2,r2,r8
   39420:	1886983a 	sll	r3,r3,r2
   39424:	3208d83a 	srl	r4,r6,r8
   39428:	1908b03a 	or	r4,r3,r4
   3942c:	003ff206 	br	393f8 <__fixdfsi+0xa0>

00039430 <__floatunsidf>:
   39430:	defff204 	addi	sp,sp,-56
   39434:	dfc00d15 	stw	ra,52(sp)
   39438:	ddc00c15 	stw	r23,48(sp)
   3943c:	dd800b15 	stw	r22,44(sp)
   39440:	dd400a15 	stw	r21,40(sp)
   39444:	dd000915 	stw	r20,36(sp)
   39448:	dcc00815 	stw	r19,32(sp)
   3944c:	dc800715 	stw	r18,28(sp)
   39450:	dc400615 	stw	r17,24(sp)
   39454:	dc000515 	stw	r16,20(sp)
   39458:	d8000115 	stw	zero,4(sp)
   3945c:	20000f1e 	bne	r4,zero,3949c <__floatunsidf+0x6c>
   39460:	00800084 	movi	r2,2
   39464:	d8800015 	stw	r2,0(sp)
   39468:	d809883a 	mov	r4,sp
   3946c:	00398280 	call	39828 <__pack_d>
   39470:	dfc00d17 	ldw	ra,52(sp)
   39474:	ddc00c17 	ldw	r23,48(sp)
   39478:	dd800b17 	ldw	r22,44(sp)
   3947c:	dd400a17 	ldw	r21,40(sp)
   39480:	dd000917 	ldw	r20,36(sp)
   39484:	dcc00817 	ldw	r19,32(sp)
   39488:	dc800717 	ldw	r18,28(sp)
   3948c:	dc400617 	ldw	r17,24(sp)
   39490:	dc000517 	ldw	r16,20(sp)
   39494:	dec00e04 	addi	sp,sp,56
   39498:	f800283a 	ret
   3949c:	008000c4 	movi	r2,3
   394a0:	00c00f04 	movi	r3,60
   394a4:	002f883a 	mov	r23,zero
   394a8:	202d883a 	mov	r22,r4
   394ac:	d8800015 	stw	r2,0(sp)
   394b0:	d8c00215 	stw	r3,8(sp)
   394b4:	d9000315 	stw	r4,12(sp)
   394b8:	ddc00415 	stw	r23,16(sp)
   394bc:	00397a80 	call	397a8 <__clzsi2>
   394c0:	12400744 	addi	r9,r2,29
   394c4:	48000b16 	blt	r9,zero,394f4 <__floatunsidf+0xc4>
   394c8:	483fe726 	beq	r9,zero,39468 <__floatunsidf+0x38>
   394cc:	10bfff44 	addi	r2,r2,-3
   394d0:	10002e16 	blt	r2,zero,3958c <__floatunsidf+0x15c>
   394d4:	b0a2983a 	sll	r17,r22,r2
   394d8:	0021883a 	mov	r16,zero
   394dc:	d8800217 	ldw	r2,8(sp)
   394e0:	dc400415 	stw	r17,16(sp)
   394e4:	dc000315 	stw	r16,12(sp)
   394e8:	1245c83a 	sub	r2,r2,r9
   394ec:	d8800215 	stw	r2,8(sp)
   394f0:	003fdd06 	br	39468 <__floatunsidf+0x38>
   394f4:	0255c83a 	sub	r10,zero,r9
   394f8:	51bff804 	addi	r6,r10,-32
   394fc:	30001b16 	blt	r6,zero,3956c <__floatunsidf+0x13c>
   39500:	b9a8d83a 	srl	r20,r23,r6
   39504:	002b883a 	mov	r21,zero
   39508:	000f883a 	mov	r7,zero
   3950c:	01000044 	movi	r4,1
   39510:	0011883a 	mov	r8,zero
   39514:	30002516 	blt	r6,zero,395ac <__floatunsidf+0x17c>
   39518:	21a6983a 	sll	r19,r4,r6
   3951c:	0025883a 	mov	r18,zero
   39520:	00bfffc4 	movi	r2,-1
   39524:	9089883a 	add	r4,r18,r2
   39528:	988b883a 	add	r5,r19,r2
   3952c:	248d803a 	cmpltu	r6,r4,r18
   39530:	314b883a 	add	r5,r6,r5
   39534:	b104703a 	and	r2,r22,r4
   39538:	b946703a 	and	r3,r23,r5
   3953c:	10c4b03a 	or	r2,r2,r3
   39540:	10000226 	beq	r2,zero,3954c <__floatunsidf+0x11c>
   39544:	01c00044 	movi	r7,1
   39548:	0011883a 	mov	r8,zero
   3954c:	d9000217 	ldw	r4,8(sp)
   39550:	a1c4b03a 	or	r2,r20,r7
   39554:	aa06b03a 	or	r3,r21,r8
   39558:	2249c83a 	sub	r4,r4,r9
   3955c:	d8c00415 	stw	r3,16(sp)
   39560:	d9000215 	stw	r4,8(sp)
   39564:	d8800315 	stw	r2,12(sp)
   39568:	003fbf06 	br	39468 <__floatunsidf+0x38>
   3956c:	bdc7883a 	add	r3,r23,r23
   39570:	008007c4 	movi	r2,31
   39574:	1285c83a 	sub	r2,r2,r10
   39578:	1886983a 	sll	r3,r3,r2
   3957c:	b2a8d83a 	srl	r20,r22,r10
   39580:	baaad83a 	srl	r21,r23,r10
   39584:	1d28b03a 	or	r20,r3,r20
   39588:	003fdf06 	br	39508 <__floatunsidf+0xd8>
   3958c:	b006d07a 	srli	r3,r22,1
   39590:	008007c4 	movi	r2,31
   39594:	1245c83a 	sub	r2,r2,r9
   39598:	1886d83a 	srl	r3,r3,r2
   3959c:	ba62983a 	sll	r17,r23,r9
   395a0:	b260983a 	sll	r16,r22,r9
   395a4:	1c62b03a 	or	r17,r3,r17
   395a8:	003fcc06 	br	394dc <__floatunsidf+0xac>
   395ac:	2006d07a 	srli	r3,r4,1
   395b0:	008007c4 	movi	r2,31
   395b4:	1285c83a 	sub	r2,r2,r10
   395b8:	18a6d83a 	srl	r19,r3,r2
   395bc:	22a4983a 	sll	r18,r4,r10
   395c0:	003fd706 	br	39520 <__floatunsidf+0xf0>

000395c4 <udivmodsi4>:
   395c4:	29001b2e 	bgeu	r5,r4,39634 <udivmodsi4+0x70>
   395c8:	28001a16 	blt	r5,zero,39634 <udivmodsi4+0x70>
   395cc:	00800044 	movi	r2,1
   395d0:	0007883a 	mov	r3,zero
   395d4:	01c007c4 	movi	r7,31
   395d8:	00000306 	br	395e8 <udivmodsi4+0x24>
   395dc:	19c01326 	beq	r3,r7,3962c <udivmodsi4+0x68>
   395e0:	18c00044 	addi	r3,r3,1
   395e4:	28000416 	blt	r5,zero,395f8 <udivmodsi4+0x34>
   395e8:	294b883a 	add	r5,r5,r5
   395ec:	1085883a 	add	r2,r2,r2
   395f0:	293ffa36 	bltu	r5,r4,395dc <udivmodsi4+0x18>
   395f4:	10000d26 	beq	r2,zero,3962c <udivmodsi4+0x68>
   395f8:	0007883a 	mov	r3,zero
   395fc:	21400236 	bltu	r4,r5,39608 <udivmodsi4+0x44>
   39600:	2149c83a 	sub	r4,r4,r5
   39604:	1886b03a 	or	r3,r3,r2
   39608:	1004d07a 	srli	r2,r2,1
   3960c:	280ad07a 	srli	r5,r5,1
   39610:	103ffa1e 	bne	r2,zero,395fc <udivmodsi4+0x38>
   39614:	30000226 	beq	r6,zero,39620 <udivmodsi4+0x5c>
   39618:	2005883a 	mov	r2,r4
   3961c:	f800283a 	ret
   39620:	1809883a 	mov	r4,r3
   39624:	2005883a 	mov	r2,r4
   39628:	f800283a 	ret
   3962c:	0007883a 	mov	r3,zero
   39630:	003ff806 	br	39614 <udivmodsi4+0x50>
   39634:	00800044 	movi	r2,1
   39638:	0007883a 	mov	r3,zero
   3963c:	003fef06 	br	395fc <udivmodsi4+0x38>

00039640 <__divsi3>:
   39640:	defffe04 	addi	sp,sp,-8
   39644:	dc000015 	stw	r16,0(sp)
   39648:	dfc00115 	stw	ra,4(sp)
   3964c:	0021883a 	mov	r16,zero
   39650:	20000c16 	blt	r4,zero,39684 <__divsi3+0x44>
   39654:	000d883a 	mov	r6,zero
   39658:	28000e16 	blt	r5,zero,39694 <__divsi3+0x54>
   3965c:	00395c40 	call	395c4 <udivmodsi4>
   39660:	1007883a 	mov	r3,r2
   39664:	8005003a 	cmpeq	r2,r16,zero
   39668:	1000011e 	bne	r2,zero,39670 <__divsi3+0x30>
   3966c:	00c7c83a 	sub	r3,zero,r3
   39670:	1805883a 	mov	r2,r3
   39674:	dfc00117 	ldw	ra,4(sp)
   39678:	dc000017 	ldw	r16,0(sp)
   3967c:	dec00204 	addi	sp,sp,8
   39680:	f800283a 	ret
   39684:	0109c83a 	sub	r4,zero,r4
   39688:	04000044 	movi	r16,1
   3968c:	000d883a 	mov	r6,zero
   39690:	283ff20e 	bge	r5,zero,3965c <__divsi3+0x1c>
   39694:	014bc83a 	sub	r5,zero,r5
   39698:	8021003a 	cmpeq	r16,r16,zero
   3969c:	003fef06 	br	3965c <__divsi3+0x1c>

000396a0 <__modsi3>:
   396a0:	deffff04 	addi	sp,sp,-4
   396a4:	dfc00015 	stw	ra,0(sp)
   396a8:	01800044 	movi	r6,1
   396ac:	2807883a 	mov	r3,r5
   396b0:	20000416 	blt	r4,zero,396c4 <__modsi3+0x24>
   396b4:	28000c16 	blt	r5,zero,396e8 <__modsi3+0x48>
   396b8:	dfc00017 	ldw	ra,0(sp)
   396bc:	dec00104 	addi	sp,sp,4
   396c0:	00395c41 	jmpi	395c4 <udivmodsi4>
   396c4:	0109c83a 	sub	r4,zero,r4
   396c8:	28000b16 	blt	r5,zero,396f8 <__modsi3+0x58>
   396cc:	180b883a 	mov	r5,r3
   396d0:	01800044 	movi	r6,1
   396d4:	00395c40 	call	395c4 <udivmodsi4>
   396d8:	0085c83a 	sub	r2,zero,r2
   396dc:	dfc00017 	ldw	ra,0(sp)
   396e0:	dec00104 	addi	sp,sp,4
   396e4:	f800283a 	ret
   396e8:	014bc83a 	sub	r5,zero,r5
   396ec:	dfc00017 	ldw	ra,0(sp)
   396f0:	dec00104 	addi	sp,sp,4
   396f4:	00395c41 	jmpi	395c4 <udivmodsi4>
   396f8:	0147c83a 	sub	r3,zero,r5
   396fc:	003ff306 	br	396cc <__modsi3+0x2c>

00039700 <__udivsi3>:
   39700:	000d883a 	mov	r6,zero
   39704:	00395c41 	jmpi	395c4 <udivmodsi4>

00039708 <__umodsi3>:
   39708:	01800044 	movi	r6,1
   3970c:	00395c41 	jmpi	395c4 <udivmodsi4>

00039710 <__muldi3>:
   39710:	2011883a 	mov	r8,r4
   39714:	427fffcc 	andi	r9,r8,65535
   39718:	4018d43a 	srli	r12,r8,16
   3971c:	32bfffcc 	andi	r10,r6,65535
   39720:	3016d43a 	srli	r11,r6,16
   39724:	4a85383a 	mul	r2,r9,r10
   39728:	6295383a 	mul	r10,r12,r10
   3972c:	4ad3383a 	mul	r9,r9,r11
   39730:	113fffcc 	andi	r4,r2,65535
   39734:	1004d43a 	srli	r2,r2,16
   39738:	4a93883a 	add	r9,r9,r10
   3973c:	3807883a 	mov	r3,r7
   39740:	1245883a 	add	r2,r2,r9
   39744:	280f883a 	mov	r7,r5
   39748:	180b883a 	mov	r5,r3
   3974c:	1006943a 	slli	r3,r2,16
   39750:	defffd04 	addi	sp,sp,-12
   39754:	dc800215 	stw	r18,8(sp)
   39758:	1907883a 	add	r3,r3,r4
   3975c:	dc400115 	stw	r17,4(sp)
   39760:	dc000015 	stw	r16,0(sp)
   39764:	4165383a 	mul	r18,r8,r5
   39768:	31e3383a 	mul	r17,r6,r7
   3976c:	1012d43a 	srli	r9,r2,16
   39770:	62d9383a 	mul	r12,r12,r11
   39774:	181f883a 	mov	r15,r3
   39778:	1280022e 	bgeu	r2,r10,39784 <__muldi3+0x74>
   3977c:	00800074 	movhi	r2,1
   39780:	6099883a 	add	r12,r12,r2
   39784:	624d883a 	add	r6,r12,r9
   39788:	9187883a 	add	r3,r18,r6
   3978c:	88c7883a 	add	r3,r17,r3
   39790:	7805883a 	mov	r2,r15
   39794:	dc800217 	ldw	r18,8(sp)
   39798:	dc400117 	ldw	r17,4(sp)
   3979c:	dc000017 	ldw	r16,0(sp)
   397a0:	dec00304 	addi	sp,sp,12
   397a4:	f800283a 	ret

000397a8 <__clzsi2>:
   397a8:	00bfffd4 	movui	r2,65535
   397ac:	11000e36 	bltu	r2,r4,397e8 <__clzsi2+0x40>
   397b0:	00803fc4 	movi	r2,255
   397b4:	01400204 	movi	r5,8
   397b8:	0007883a 	mov	r3,zero
   397bc:	11001036 	bltu	r2,r4,39800 <__clzsi2+0x58>
   397c0:	000b883a 	mov	r5,zero
   397c4:	20c6d83a 	srl	r3,r4,r3
   397c8:	00800074 	movhi	r2,1
   397cc:	10809904 	addi	r2,r2,612
   397d0:	1887883a 	add	r3,r3,r2
   397d4:	18800003 	ldbu	r2,0(r3)
   397d8:	00c00804 	movi	r3,32
   397dc:	2885883a 	add	r2,r5,r2
   397e0:	1885c83a 	sub	r2,r3,r2
   397e4:	f800283a 	ret
   397e8:	01400404 	movi	r5,16
   397ec:	00804034 	movhi	r2,256
   397f0:	10bfffc4 	addi	r2,r2,-1
   397f4:	2807883a 	mov	r3,r5
   397f8:	113ff22e 	bgeu	r2,r4,397c4 <__clzsi2+0x1c>
   397fc:	01400604 	movi	r5,24
   39800:	2807883a 	mov	r3,r5
   39804:	20c6d83a 	srl	r3,r4,r3
   39808:	00800074 	movhi	r2,1
   3980c:	10809904 	addi	r2,r2,612
   39810:	1887883a 	add	r3,r3,r2
   39814:	18800003 	ldbu	r2,0(r3)
   39818:	00c00804 	movi	r3,32
   3981c:	2885883a 	add	r2,r5,r2
   39820:	1885c83a 	sub	r2,r3,r2
   39824:	f800283a 	ret

00039828 <__pack_d>:
   39828:	20c00017 	ldw	r3,0(r4)
   3982c:	defffd04 	addi	sp,sp,-12
   39830:	dc000015 	stw	r16,0(sp)
   39834:	dc800215 	stw	r18,8(sp)
   39838:	dc400115 	stw	r17,4(sp)
   3983c:	00800044 	movi	r2,1
   39840:	22000317 	ldw	r8,12(r4)
   39844:	001f883a 	mov	r15,zero
   39848:	22400417 	ldw	r9,16(r4)
   3984c:	24000117 	ldw	r16,4(r4)
   39850:	10c0552e 	bgeu	r2,r3,399a8 <__pack_d+0x180>
   39854:	00800104 	movi	r2,4
   39858:	18804f26 	beq	r3,r2,39998 <__pack_d+0x170>
   3985c:	00800084 	movi	r2,2
   39860:	18800226 	beq	r3,r2,3986c <__pack_d+0x44>
   39864:	4244b03a 	or	r2,r8,r9
   39868:	10001a1e 	bne	r2,zero,398d4 <__pack_d+0xac>
   3986c:	000d883a 	mov	r6,zero
   39870:	000f883a 	mov	r7,zero
   39874:	0011883a 	mov	r8,zero
   39878:	00800434 	movhi	r2,16
   3987c:	10bfffc4 	addi	r2,r2,-1
   39880:	301d883a 	mov	r14,r6
   39884:	3884703a 	and	r2,r7,r2
   39888:	400a953a 	slli	r5,r8,20
   3988c:	79bffc2c 	andhi	r6,r15,65520
   39890:	308cb03a 	or	r6,r6,r2
   39894:	00e00434 	movhi	r3,32784
   39898:	18ffffc4 	addi	r3,r3,-1
   3989c:	800497fa 	slli	r2,r16,31
   398a0:	30c6703a 	and	r3,r6,r3
   398a4:	1946b03a 	or	r3,r3,r5
   398a8:	01600034 	movhi	r5,32768
   398ac:	297fffc4 	addi	r5,r5,-1
   398b0:	194a703a 	and	r5,r3,r5
   398b4:	288ab03a 	or	r5,r5,r2
   398b8:	2807883a 	mov	r3,r5
   398bc:	7005883a 	mov	r2,r14
   398c0:	dc800217 	ldw	r18,8(sp)
   398c4:	dc400117 	ldw	r17,4(sp)
   398c8:	dc000017 	ldw	r16,0(sp)
   398cc:	dec00304 	addi	sp,sp,12
   398d0:	f800283a 	ret
   398d4:	21000217 	ldw	r4,8(r4)
   398d8:	00bf0084 	movi	r2,-1022
   398dc:	20803f16 	blt	r4,r2,399dc <__pack_d+0x1b4>
   398e0:	0080ffc4 	movi	r2,1023
   398e4:	11002c16 	blt	r2,r4,39998 <__pack_d+0x170>
   398e8:	00803fc4 	movi	r2,255
   398ec:	408c703a 	and	r6,r8,r2
   398f0:	00802004 	movi	r2,128
   398f4:	0007883a 	mov	r3,zero
   398f8:	000f883a 	mov	r7,zero
   398fc:	2280ffc4 	addi	r10,r4,1023
   39900:	30801e26 	beq	r6,r2,3997c <__pack_d+0x154>
   39904:	00801fc4 	movi	r2,127
   39908:	4089883a 	add	r4,r8,r2
   3990c:	220d803a 	cmpltu	r6,r4,r8
   39910:	324d883a 	add	r6,r6,r9
   39914:	2011883a 	mov	r8,r4
   39918:	3013883a 	mov	r9,r6
   3991c:	00880034 	movhi	r2,8192
   39920:	10bfffc4 	addi	r2,r2,-1
   39924:	12400d36 	bltu	r2,r9,3995c <__pack_d+0x134>
   39928:	4804963a 	slli	r2,r9,24
   3992c:	400cd23a 	srli	r6,r8,8
   39930:	480ed23a 	srli	r7,r9,8
   39934:	013fffc4 	movi	r4,-1
   39938:	118cb03a 	or	r6,r2,r6
   3993c:	01400434 	movhi	r5,16
   39940:	297fffc4 	addi	r5,r5,-1
   39944:	3104703a 	and	r2,r6,r4
   39948:	3946703a 	and	r3,r7,r5
   3994c:	5201ffcc 	andi	r8,r10,2047
   39950:	100d883a 	mov	r6,r2
   39954:	180f883a 	mov	r7,r3
   39958:	003fc706 	br	39878 <__pack_d+0x50>
   3995c:	480897fa 	slli	r4,r9,31
   39960:	4004d07a 	srli	r2,r8,1
   39964:	4806d07a 	srli	r3,r9,1
   39968:	52800044 	addi	r10,r10,1
   3996c:	2084b03a 	or	r2,r4,r2
   39970:	1011883a 	mov	r8,r2
   39974:	1813883a 	mov	r9,r3
   39978:	003feb06 	br	39928 <__pack_d+0x100>
   3997c:	383fe11e 	bne	r7,zero,39904 <__pack_d+0xdc>
   39980:	01004004 	movi	r4,256
   39984:	4104703a 	and	r2,r8,r4
   39988:	10c4b03a 	or	r2,r2,r3
   3998c:	103fe326 	beq	r2,zero,3991c <__pack_d+0xf4>
   39990:	3005883a 	mov	r2,r6
   39994:	003fdc06 	br	39908 <__pack_d+0xe0>
   39998:	000d883a 	mov	r6,zero
   3999c:	000f883a 	mov	r7,zero
   399a0:	0201ffc4 	movi	r8,2047
   399a4:	003fb406 	br	39878 <__pack_d+0x50>
   399a8:	0005883a 	mov	r2,zero
   399ac:	00c00234 	movhi	r3,8
   399b0:	408cb03a 	or	r6,r8,r2
   399b4:	48ceb03a 	or	r7,r9,r3
   399b8:	013fffc4 	movi	r4,-1
   399bc:	01400434 	movhi	r5,16
   399c0:	297fffc4 	addi	r5,r5,-1
   399c4:	3104703a 	and	r2,r6,r4
   399c8:	3946703a 	and	r3,r7,r5
   399cc:	100d883a 	mov	r6,r2
   399d0:	180f883a 	mov	r7,r3
   399d4:	0201ffc4 	movi	r8,2047
   399d8:	003fa706 	br	39878 <__pack_d+0x50>
   399dc:	1109c83a 	sub	r4,r2,r4
   399e0:	00800e04 	movi	r2,56
   399e4:	11004316 	blt	r2,r4,39af4 <__pack_d+0x2cc>
   399e8:	21fff804 	addi	r7,r4,-32
   399ec:	38004516 	blt	r7,zero,39b04 <__pack_d+0x2dc>
   399f0:	49d8d83a 	srl	r12,r9,r7
   399f4:	001b883a 	mov	r13,zero
   399f8:	0023883a 	mov	r17,zero
   399fc:	01400044 	movi	r5,1
   39a00:	0025883a 	mov	r18,zero
   39a04:	38004716 	blt	r7,zero,39b24 <__pack_d+0x2fc>
   39a08:	29d6983a 	sll	r11,r5,r7
   39a0c:	0015883a 	mov	r10,zero
   39a10:	00bfffc4 	movi	r2,-1
   39a14:	5089883a 	add	r4,r10,r2
   39a18:	588b883a 	add	r5,r11,r2
   39a1c:	228d803a 	cmpltu	r6,r4,r10
   39a20:	314b883a 	add	r5,r6,r5
   39a24:	4104703a 	and	r2,r8,r4
   39a28:	4946703a 	and	r3,r9,r5
   39a2c:	10c4b03a 	or	r2,r2,r3
   39a30:	10000226 	beq	r2,zero,39a3c <__pack_d+0x214>
   39a34:	04400044 	movi	r17,1
   39a38:	0025883a 	mov	r18,zero
   39a3c:	00803fc4 	movi	r2,255
   39a40:	644eb03a 	or	r7,r12,r17
   39a44:	3892703a 	and	r9,r7,r2
   39a48:	00802004 	movi	r2,128
   39a4c:	6c90b03a 	or	r8,r13,r18
   39a50:	0015883a 	mov	r10,zero
   39a54:	48801626 	beq	r9,r2,39ab0 <__pack_d+0x288>
   39a58:	01001fc4 	movi	r4,127
   39a5c:	3905883a 	add	r2,r7,r4
   39a60:	11cd803a 	cmpltu	r6,r2,r7
   39a64:	320d883a 	add	r6,r6,r8
   39a68:	100f883a 	mov	r7,r2
   39a6c:	00840034 	movhi	r2,4096
   39a70:	10bfffc4 	addi	r2,r2,-1
   39a74:	3011883a 	mov	r8,r6
   39a78:	0007883a 	mov	r3,zero
   39a7c:	11801b36 	bltu	r2,r6,39aec <__pack_d+0x2c4>
   39a80:	4004963a 	slli	r2,r8,24
   39a84:	3808d23a 	srli	r4,r7,8
   39a88:	400ad23a 	srli	r5,r8,8
   39a8c:	1813883a 	mov	r9,r3
   39a90:	1108b03a 	or	r4,r2,r4
   39a94:	00bfffc4 	movi	r2,-1
   39a98:	00c00434 	movhi	r3,16
   39a9c:	18ffffc4 	addi	r3,r3,-1
   39aa0:	208c703a 	and	r6,r4,r2
   39aa4:	28ce703a 	and	r7,r5,r3
   39aa8:	4a01ffcc 	andi	r8,r9,2047
   39aac:	003f7206 	br	39878 <__pack_d+0x50>
   39ab0:	503fe91e 	bne	r10,zero,39a58 <__pack_d+0x230>
   39ab4:	01004004 	movi	r4,256
   39ab8:	3904703a 	and	r2,r7,r4
   39abc:	0007883a 	mov	r3,zero
   39ac0:	10c4b03a 	or	r2,r2,r3
   39ac4:	10000626 	beq	r2,zero,39ae0 <__pack_d+0x2b8>
   39ac8:	3a45883a 	add	r2,r7,r9
   39acc:	11cd803a 	cmpltu	r6,r2,r7
   39ad0:	320d883a 	add	r6,r6,r8
   39ad4:	100f883a 	mov	r7,r2
   39ad8:	3011883a 	mov	r8,r6
   39adc:	0007883a 	mov	r3,zero
   39ae0:	00840034 	movhi	r2,4096
   39ae4:	10bfffc4 	addi	r2,r2,-1
   39ae8:	123fe52e 	bgeu	r2,r8,39a80 <__pack_d+0x258>
   39aec:	00c00044 	movi	r3,1
   39af0:	003fe306 	br	39a80 <__pack_d+0x258>
   39af4:	0009883a 	mov	r4,zero
   39af8:	0013883a 	mov	r9,zero
   39afc:	000b883a 	mov	r5,zero
   39b00:	003fe406 	br	39a94 <__pack_d+0x26c>
   39b04:	4a47883a 	add	r3,r9,r9
   39b08:	008007c4 	movi	r2,31
   39b0c:	1105c83a 	sub	r2,r2,r4
   39b10:	1886983a 	sll	r3,r3,r2
   39b14:	4118d83a 	srl	r12,r8,r4
   39b18:	491ad83a 	srl	r13,r9,r4
   39b1c:	1b18b03a 	or	r12,r3,r12
   39b20:	003fb506 	br	399f8 <__pack_d+0x1d0>
   39b24:	2806d07a 	srli	r3,r5,1
   39b28:	008007c4 	movi	r2,31
   39b2c:	1105c83a 	sub	r2,r2,r4
   39b30:	1896d83a 	srl	r11,r3,r2
   39b34:	2914983a 	sll	r10,r5,r4
   39b38:	003fb506 	br	39a10 <__pack_d+0x1e8>

00039b3c <__unpack_d>:
   39b3c:	20c00117 	ldw	r3,4(r4)
   39b40:	22400017 	ldw	r9,0(r4)
   39b44:	00800434 	movhi	r2,16
   39b48:	10bfffc4 	addi	r2,r2,-1
   39b4c:	1808d53a 	srli	r4,r3,20
   39b50:	180cd7fa 	srli	r6,r3,31
   39b54:	1894703a 	and	r10,r3,r2
   39b58:	2201ffcc 	andi	r8,r4,2047
   39b5c:	281b883a 	mov	r13,r5
   39b60:	4817883a 	mov	r11,r9
   39b64:	29800115 	stw	r6,4(r5)
   39b68:	5019883a 	mov	r12,r10
   39b6c:	40001e1e 	bne	r8,zero,39be8 <__unpack_d+0xac>
   39b70:	4a84b03a 	or	r2,r9,r10
   39b74:	10001926 	beq	r2,zero,39bdc <__unpack_d+0xa0>
   39b78:	4804d63a 	srli	r2,r9,24
   39b7c:	500c923a 	slli	r6,r10,8
   39b80:	013f0084 	movi	r4,-1022
   39b84:	00c40034 	movhi	r3,4096
   39b88:	18ffffc4 	addi	r3,r3,-1
   39b8c:	118cb03a 	or	r6,r2,r6
   39b90:	008000c4 	movi	r2,3
   39b94:	480a923a 	slli	r5,r9,8
   39b98:	68800015 	stw	r2,0(r13)
   39b9c:	69000215 	stw	r4,8(r13)
   39ba0:	19800b36 	bltu	r3,r6,39bd0 <__unpack_d+0x94>
   39ba4:	200f883a 	mov	r7,r4
   39ba8:	1811883a 	mov	r8,r3
   39bac:	2945883a 	add	r2,r5,r5
   39bb0:	1149803a 	cmpltu	r4,r2,r5
   39bb4:	3187883a 	add	r3,r6,r6
   39bb8:	20c9883a 	add	r4,r4,r3
   39bbc:	100b883a 	mov	r5,r2
   39bc0:	200d883a 	mov	r6,r4
   39bc4:	39ffffc4 	addi	r7,r7,-1
   39bc8:	413ff82e 	bgeu	r8,r4,39bac <__unpack_d+0x70>
   39bcc:	69c00215 	stw	r7,8(r13)
   39bd0:	69800415 	stw	r6,16(r13)
   39bd4:	69400315 	stw	r5,12(r13)
   39bd8:	f800283a 	ret
   39bdc:	00800084 	movi	r2,2
   39be0:	28800015 	stw	r2,0(r5)
   39be4:	f800283a 	ret
   39be8:	0081ffc4 	movi	r2,2047
   39bec:	40800f26 	beq	r8,r2,39c2c <__unpack_d+0xf0>
   39bf0:	480cd63a 	srli	r6,r9,24
   39bf4:	5006923a 	slli	r3,r10,8
   39bf8:	4804923a 	slli	r2,r9,8
   39bfc:	0009883a 	mov	r4,zero
   39c00:	30c6b03a 	or	r3,r6,r3
   39c04:	01440034 	movhi	r5,4096
   39c08:	110cb03a 	or	r6,r2,r4
   39c0c:	423f0044 	addi	r8,r8,-1023
   39c10:	194eb03a 	or	r7,r3,r5
   39c14:	008000c4 	movi	r2,3
   39c18:	69c00415 	stw	r7,16(r13)
   39c1c:	6a000215 	stw	r8,8(r13)
   39c20:	68800015 	stw	r2,0(r13)
   39c24:	69800315 	stw	r6,12(r13)
   39c28:	f800283a 	ret
   39c2c:	4a84b03a 	or	r2,r9,r10
   39c30:	1000031e 	bne	r2,zero,39c40 <__unpack_d+0x104>
   39c34:	00800104 	movi	r2,4
   39c38:	28800015 	stw	r2,0(r5)
   39c3c:	f800283a 	ret
   39c40:	0009883a 	mov	r4,zero
   39c44:	01400234 	movhi	r5,8
   39c48:	4904703a 	and	r2,r9,r4
   39c4c:	5146703a 	and	r3,r10,r5
   39c50:	10c4b03a 	or	r2,r2,r3
   39c54:	10000526 	beq	r2,zero,39c6c <__unpack_d+0x130>
   39c58:	00800044 	movi	r2,1
   39c5c:	68800015 	stw	r2,0(r13)
   39c60:	6b000415 	stw	r12,16(r13)
   39c64:	6ac00315 	stw	r11,12(r13)
   39c68:	f800283a 	ret
   39c6c:	68000015 	stw	zero,0(r13)
   39c70:	003ffb06 	br	39c60 <__unpack_d+0x124>

00039c74 <__fpcmp_parts_d>:
   39c74:	21800017 	ldw	r6,0(r4)
   39c78:	00c00044 	movi	r3,1
   39c7c:	19800a2e 	bgeu	r3,r6,39ca8 <__fpcmp_parts_d+0x34>
   39c80:	28800017 	ldw	r2,0(r5)
   39c84:	1880082e 	bgeu	r3,r2,39ca8 <__fpcmp_parts_d+0x34>
   39c88:	00c00104 	movi	r3,4
   39c8c:	30c02626 	beq	r6,r3,39d28 <__fpcmp_parts_d+0xb4>
   39c90:	10c02226 	beq	r2,r3,39d1c <__fpcmp_parts_d+0xa8>
   39c94:	00c00084 	movi	r3,2
   39c98:	30c00526 	beq	r6,r3,39cb0 <__fpcmp_parts_d+0x3c>
   39c9c:	10c0071e 	bne	r2,r3,39cbc <__fpcmp_parts_d+0x48>
   39ca0:	20800117 	ldw	r2,4(r4)
   39ca4:	1000091e 	bne	r2,zero,39ccc <__fpcmp_parts_d+0x58>
   39ca8:	00800044 	movi	r2,1
   39cac:	f800283a 	ret
   39cb0:	10c01a1e 	bne	r2,r3,39d1c <__fpcmp_parts_d+0xa8>
   39cb4:	0005883a 	mov	r2,zero
   39cb8:	f800283a 	ret
   39cbc:	22000117 	ldw	r8,4(r4)
   39cc0:	28800117 	ldw	r2,4(r5)
   39cc4:	40800326 	beq	r8,r2,39cd4 <__fpcmp_parts_d+0x60>
   39cc8:	403ff726 	beq	r8,zero,39ca8 <__fpcmp_parts_d+0x34>
   39ccc:	00bfffc4 	movi	r2,-1
   39cd0:	f800283a 	ret
   39cd4:	20c00217 	ldw	r3,8(r4)
   39cd8:	28800217 	ldw	r2,8(r5)
   39cdc:	10fffa16 	blt	r2,r3,39cc8 <__fpcmp_parts_d+0x54>
   39ce0:	18800916 	blt	r3,r2,39d08 <__fpcmp_parts_d+0x94>
   39ce4:	21c00417 	ldw	r7,16(r4)
   39ce8:	28c00417 	ldw	r3,16(r5)
   39cec:	21800317 	ldw	r6,12(r4)
   39cf0:	28800317 	ldw	r2,12(r5)
   39cf4:	19fff436 	bltu	r3,r7,39cc8 <__fpcmp_parts_d+0x54>
   39cf8:	38c00526 	beq	r7,r3,39d10 <__fpcmp_parts_d+0x9c>
   39cfc:	38c00236 	bltu	r7,r3,39d08 <__fpcmp_parts_d+0x94>
   39d00:	19ffec1e 	bne	r3,r7,39cb4 <__fpcmp_parts_d+0x40>
   39d04:	30bfeb2e 	bgeu	r6,r2,39cb4 <__fpcmp_parts_d+0x40>
   39d08:	403fe71e 	bne	r8,zero,39ca8 <__fpcmp_parts_d+0x34>
   39d0c:	003fef06 	br	39ccc <__fpcmp_parts_d+0x58>
   39d10:	11bffa2e 	bgeu	r2,r6,39cfc <__fpcmp_parts_d+0x88>
   39d14:	403fe426 	beq	r8,zero,39ca8 <__fpcmp_parts_d+0x34>
   39d18:	003fec06 	br	39ccc <__fpcmp_parts_d+0x58>
   39d1c:	28800117 	ldw	r2,4(r5)
   39d20:	103fe11e 	bne	r2,zero,39ca8 <__fpcmp_parts_d+0x34>
   39d24:	003fe906 	br	39ccc <__fpcmp_parts_d+0x58>
   39d28:	11bfdd1e 	bne	r2,r6,39ca0 <__fpcmp_parts_d+0x2c>
   39d2c:	28c00117 	ldw	r3,4(r5)
   39d30:	20800117 	ldw	r2,4(r4)
   39d34:	1885c83a 	sub	r2,r3,r2
   39d38:	f800283a 	ret

00039d3c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   39d3c:	defff804 	addi	sp,sp,-32
   39d40:	dfc00715 	stw	ra,28(sp)
   39d44:	df000615 	stw	fp,24(sp)
   39d48:	df000604 	addi	fp,sp,24
   39d4c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   39d50:	e0bffc17 	ldw	r2,-16(fp)
   39d54:	1004803a 	cmplt	r2,r2,zero
   39d58:	1000081e 	bne	r2,zero,39d7c <close+0x40>
   39d5c:	e0bffc17 	ldw	r2,-16(fp)
   39d60:	10800324 	muli	r2,r2,12
   39d64:	1007883a 	mov	r3,r2
   39d68:	00800074 	movhi	r2,1
   39d6c:	1082f504 	addi	r2,r2,3028
   39d70:	1887883a 	add	r3,r3,r2
   39d74:	e0ffff15 	stw	r3,-4(fp)
   39d78:	00000106 	br	39d80 <close+0x44>
   39d7c:	e03fff15 	stw	zero,-4(fp)
   39d80:	e0bfff17 	ldw	r2,-4(fp)
   39d84:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   39d88:	e0bffb17 	ldw	r2,-20(fp)
   39d8c:	1005003a 	cmpeq	r2,r2,zero
   39d90:	10001d1e 	bne	r2,zero,39e08 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   39d94:	e0bffb17 	ldw	r2,-20(fp)
   39d98:	10800017 	ldw	r2,0(r2)
   39d9c:	10800417 	ldw	r2,16(r2)
   39da0:	1005003a 	cmpeq	r2,r2,zero
   39da4:	1000071e 	bne	r2,zero,39dc4 <close+0x88>
   39da8:	e0bffb17 	ldw	r2,-20(fp)
   39dac:	10800017 	ldw	r2,0(r2)
   39db0:	10800417 	ldw	r2,16(r2)
   39db4:	e13ffb17 	ldw	r4,-20(fp)
   39db8:	103ee83a 	callr	r2
   39dbc:	e0bffe15 	stw	r2,-8(fp)
   39dc0:	00000106 	br	39dc8 <close+0x8c>
   39dc4:	e03ffe15 	stw	zero,-8(fp)
   39dc8:	e0bffe17 	ldw	r2,-8(fp)
   39dcc:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   39dd0:	e13ffc17 	ldw	r4,-16(fp)
   39dd4:	003a5800 	call	3a580 <alt_release_fd>
    if (rval < 0)
   39dd8:	e0bffa17 	ldw	r2,-24(fp)
   39ddc:	1004403a 	cmpge	r2,r2,zero
   39de0:	1000071e 	bne	r2,zero,39e00 <close+0xc4>
    {
      ALT_ERRNO = -rval;
   39de4:	0039e380 	call	39e38 <alt_get_errno>
   39de8:	e0fffa17 	ldw	r3,-24(fp)
   39dec:	00c7c83a 	sub	r3,zero,r3
   39df0:	10c00015 	stw	r3,0(r2)
      return -1;
   39df4:	00bfffc4 	movi	r2,-1
   39df8:	e0bffd15 	stw	r2,-12(fp)
   39dfc:	00000806 	br	39e20 <close+0xe4>
    }
    return 0;
   39e00:	e03ffd15 	stw	zero,-12(fp)
   39e04:	00000606 	br	39e20 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   39e08:	0039e380 	call	39e38 <alt_get_errno>
   39e0c:	1007883a 	mov	r3,r2
   39e10:	00801444 	movi	r2,81
   39e14:	18800015 	stw	r2,0(r3)
    return -1;
   39e18:	00bfffc4 	movi	r2,-1
   39e1c:	e0bffd15 	stw	r2,-12(fp)
   39e20:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   39e24:	e037883a 	mov	sp,fp
   39e28:	dfc00117 	ldw	ra,4(sp)
   39e2c:	df000017 	ldw	fp,0(sp)
   39e30:	dec00204 	addi	sp,sp,8
   39e34:	f800283a 	ret

00039e38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   39e38:	defffd04 	addi	sp,sp,-12
   39e3c:	dfc00215 	stw	ra,8(sp)
   39e40:	df000115 	stw	fp,4(sp)
   39e44:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   39e48:	00800074 	movhi	r2,1
   39e4c:	10877804 	addi	r2,r2,7648
   39e50:	10800017 	ldw	r2,0(r2)
   39e54:	1005003a 	cmpeq	r2,r2,zero
   39e58:	1000061e 	bne	r2,zero,39e74 <alt_get_errno+0x3c>
   39e5c:	00800074 	movhi	r2,1
   39e60:	10877804 	addi	r2,r2,7648
   39e64:	10800017 	ldw	r2,0(r2)
   39e68:	103ee83a 	callr	r2
   39e6c:	e0bfff15 	stw	r2,-4(fp)
   39e70:	00000306 	br	39e80 <alt_get_errno+0x48>
   39e74:	00800074 	movhi	r2,1
   39e78:	10878804 	addi	r2,r2,7712
   39e7c:	e0bfff15 	stw	r2,-4(fp)
   39e80:	e0bfff17 	ldw	r2,-4(fp)
}
   39e84:	e037883a 	mov	sp,fp
   39e88:	dfc00117 	ldw	ra,4(sp)
   39e8c:	df000017 	ldw	fp,0(sp)
   39e90:	dec00204 	addi	sp,sp,8
   39e94:	f800283a 	ret

00039e98 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   39e98:	defffc04 	addi	sp,sp,-16
   39e9c:	df000315 	stw	fp,12(sp)
   39ea0:	df000304 	addi	fp,sp,12
   39ea4:	e13ffd15 	stw	r4,-12(fp)
   39ea8:	e17ffe15 	stw	r5,-8(fp)
   39eac:	e1bfff15 	stw	r6,-4(fp)
  return len;
   39eb0:	e0bfff17 	ldw	r2,-4(fp)
}
   39eb4:	e037883a 	mov	sp,fp
   39eb8:	df000017 	ldw	fp,0(sp)
   39ebc:	dec00104 	addi	sp,sp,4
   39ec0:	f800283a 	ret

00039ec4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   39ec4:	defff904 	addi	sp,sp,-28
   39ec8:	dfc00615 	stw	ra,24(sp)
   39ecc:	df000515 	stw	fp,20(sp)
   39ed0:	df000504 	addi	fp,sp,20
   39ed4:	e13ffc15 	stw	r4,-16(fp)
   39ed8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   39edc:	e0bffc17 	ldw	r2,-16(fp)
   39ee0:	1004803a 	cmplt	r2,r2,zero
   39ee4:	1000081e 	bne	r2,zero,39f08 <fstat+0x44>
   39ee8:	e0bffc17 	ldw	r2,-16(fp)
   39eec:	10800324 	muli	r2,r2,12
   39ef0:	1007883a 	mov	r3,r2
   39ef4:	00800074 	movhi	r2,1
   39ef8:	1082f504 	addi	r2,r2,3028
   39efc:	1887883a 	add	r3,r3,r2
   39f00:	e0ffff15 	stw	r3,-4(fp)
   39f04:	00000106 	br	39f0c <fstat+0x48>
   39f08:	e03fff15 	stw	zero,-4(fp)
   39f0c:	e0bfff17 	ldw	r2,-4(fp)
   39f10:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   39f14:	e0bffb17 	ldw	r2,-20(fp)
   39f18:	1005003a 	cmpeq	r2,r2,zero
   39f1c:	1000121e 	bne	r2,zero,39f68 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   39f20:	e0bffb17 	ldw	r2,-20(fp)
   39f24:	10800017 	ldw	r2,0(r2)
   39f28:	10800817 	ldw	r2,32(r2)
   39f2c:	1005003a 	cmpeq	r2,r2,zero
   39f30:	1000081e 	bne	r2,zero,39f54 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   39f34:	e0bffb17 	ldw	r2,-20(fp)
   39f38:	10800017 	ldw	r2,0(r2)
   39f3c:	10800817 	ldw	r2,32(r2)
   39f40:	e13ffb17 	ldw	r4,-20(fp)
   39f44:	e17ffd17 	ldw	r5,-12(fp)
   39f48:	103ee83a 	callr	r2
   39f4c:	e0bffe15 	stw	r2,-8(fp)
   39f50:	00000b06 	br	39f80 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   39f54:	e0fffd17 	ldw	r3,-12(fp)
   39f58:	00880004 	movi	r2,8192
   39f5c:	18800115 	stw	r2,4(r3)
      return 0;
   39f60:	e03ffe15 	stw	zero,-8(fp)
   39f64:	00000606 	br	39f80 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   39f68:	0039f980 	call	39f98 <alt_get_errno>
   39f6c:	1007883a 	mov	r3,r2
   39f70:	00801444 	movi	r2,81
   39f74:	18800015 	stw	r2,0(r3)
    return -1;
   39f78:	00bfffc4 	movi	r2,-1
   39f7c:	e0bffe15 	stw	r2,-8(fp)
   39f80:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   39f84:	e037883a 	mov	sp,fp
   39f88:	dfc00117 	ldw	ra,4(sp)
   39f8c:	df000017 	ldw	fp,0(sp)
   39f90:	dec00204 	addi	sp,sp,8
   39f94:	f800283a 	ret

00039f98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   39f98:	defffd04 	addi	sp,sp,-12
   39f9c:	dfc00215 	stw	ra,8(sp)
   39fa0:	df000115 	stw	fp,4(sp)
   39fa4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   39fa8:	00800074 	movhi	r2,1
   39fac:	10877804 	addi	r2,r2,7648
   39fb0:	10800017 	ldw	r2,0(r2)
   39fb4:	1005003a 	cmpeq	r2,r2,zero
   39fb8:	1000061e 	bne	r2,zero,39fd4 <alt_get_errno+0x3c>
   39fbc:	00800074 	movhi	r2,1
   39fc0:	10877804 	addi	r2,r2,7648
   39fc4:	10800017 	ldw	r2,0(r2)
   39fc8:	103ee83a 	callr	r2
   39fcc:	e0bfff15 	stw	r2,-4(fp)
   39fd0:	00000306 	br	39fe0 <alt_get_errno+0x48>
   39fd4:	00800074 	movhi	r2,1
   39fd8:	10878804 	addi	r2,r2,7712
   39fdc:	e0bfff15 	stw	r2,-4(fp)
   39fe0:	e0bfff17 	ldw	r2,-4(fp)
}
   39fe4:	e037883a 	mov	sp,fp
   39fe8:	dfc00117 	ldw	ra,4(sp)
   39fec:	df000017 	ldw	fp,0(sp)
   39ff0:	dec00204 	addi	sp,sp,8
   39ff4:	f800283a 	ret

00039ff8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   39ff8:	deffeb04 	addi	sp,sp,-84
   39ffc:	dfc01415 	stw	ra,80(sp)
   3a000:	df001315 	stw	fp,76(sp)
   3a004:	df001304 	addi	fp,sp,76
   3a008:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   3a00c:	e0bffd17 	ldw	r2,-12(fp)
   3a010:	1004803a 	cmplt	r2,r2,zero
   3a014:	1000081e 	bne	r2,zero,3a038 <isatty+0x40>
   3a018:	e0bffd17 	ldw	r2,-12(fp)
   3a01c:	10800324 	muli	r2,r2,12
   3a020:	1007883a 	mov	r3,r2
   3a024:	00800074 	movhi	r2,1
   3a028:	1082f504 	addi	r2,r2,3028
   3a02c:	1887883a 	add	r3,r3,r2
   3a030:	e0ffff15 	stw	r3,-4(fp)
   3a034:	00000106 	br	3a03c <isatty+0x44>
   3a038:	e03fff15 	stw	zero,-4(fp)
   3a03c:	e0bfff17 	ldw	r2,-4(fp)
   3a040:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   3a044:	e0bfed17 	ldw	r2,-76(fp)
   3a048:	1005003a 	cmpeq	r2,r2,zero
   3a04c:	10000f1e 	bne	r2,zero,3a08c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   3a050:	e0bfed17 	ldw	r2,-76(fp)
   3a054:	10800017 	ldw	r2,0(r2)
   3a058:	10800817 	ldw	r2,32(r2)
   3a05c:	1004c03a 	cmpne	r2,r2,zero
   3a060:	1000031e 	bne	r2,zero,3a070 <isatty+0x78>
    {
      return 1;
   3a064:	00800044 	movi	r2,1
   3a068:	e0bffe15 	stw	r2,-8(fp)
   3a06c:	00000c06 	br	3a0a0 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   3a070:	e17fee04 	addi	r5,fp,-72
   3a074:	e13ffd17 	ldw	r4,-12(fp)
   3a078:	0039ec40 	call	39ec4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   3a07c:	e0bfef17 	ldw	r2,-68(fp)
   3a080:	10880020 	cmpeqi	r2,r2,8192
   3a084:	e0bffe15 	stw	r2,-8(fp)
   3a088:	00000506 	br	3a0a0 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   3a08c:	003a0b80 	call	3a0b8 <alt_get_errno>
   3a090:	1007883a 	mov	r3,r2
   3a094:	00801444 	movi	r2,81
   3a098:	18800015 	stw	r2,0(r3)
    return 0;
   3a09c:	e03ffe15 	stw	zero,-8(fp)
   3a0a0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   3a0a4:	e037883a 	mov	sp,fp
   3a0a8:	dfc00117 	ldw	ra,4(sp)
   3a0ac:	df000017 	ldw	fp,0(sp)
   3a0b0:	dec00204 	addi	sp,sp,8
   3a0b4:	f800283a 	ret

0003a0b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3a0b8:	defffd04 	addi	sp,sp,-12
   3a0bc:	dfc00215 	stw	ra,8(sp)
   3a0c0:	df000115 	stw	fp,4(sp)
   3a0c4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   3a0c8:	00800074 	movhi	r2,1
   3a0cc:	10877804 	addi	r2,r2,7648
   3a0d0:	10800017 	ldw	r2,0(r2)
   3a0d4:	1005003a 	cmpeq	r2,r2,zero
   3a0d8:	1000061e 	bne	r2,zero,3a0f4 <alt_get_errno+0x3c>
   3a0dc:	00800074 	movhi	r2,1
   3a0e0:	10877804 	addi	r2,r2,7648
   3a0e4:	10800017 	ldw	r2,0(r2)
   3a0e8:	103ee83a 	callr	r2
   3a0ec:	e0bfff15 	stw	r2,-4(fp)
   3a0f0:	00000306 	br	3a100 <alt_get_errno+0x48>
   3a0f4:	00800074 	movhi	r2,1
   3a0f8:	10878804 	addi	r2,r2,7712
   3a0fc:	e0bfff15 	stw	r2,-4(fp)
   3a100:	e0bfff17 	ldw	r2,-4(fp)
}
   3a104:	e037883a 	mov	sp,fp
   3a108:	dfc00117 	ldw	ra,4(sp)
   3a10c:	df000017 	ldw	fp,0(sp)
   3a110:	dec00204 	addi	sp,sp,8
   3a114:	f800283a 	ret

0003a118 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   3a118:	defffe04 	addi	sp,sp,-8
   3a11c:	dfc00115 	stw	ra,4(sp)
   3a120:	df000015 	stw	fp,0(sp)
   3a124:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   3a128:	01000134 	movhi	r4,4
   3a12c:	2132cd04 	addi	r4,r4,-13516
   3a130:	01400074 	movhi	r5,1
   3a134:	2940e604 	addi	r5,r5,920
   3a138:	01800074 	movhi	r6,1
   3a13c:	31877d04 	addi	r6,r6,7668
   3a140:	003a1980 	call	3a198 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   3a144:	010000f4 	movhi	r4,3
   3a148:	21000804 	addi	r4,r4,32
   3a14c:	014000f4 	movhi	r5,3
   3a150:	29400804 	addi	r5,r5,32
   3a154:	018000f4 	movhi	r6,3
   3a158:	31806d04 	addi	r6,r6,436
   3a15c:	003a1980 	call	3a198 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   3a160:	01000134 	movhi	r4,4
   3a164:	2131e904 	addi	r4,r4,-14428
   3a168:	01400074 	movhi	r5,1
   3a16c:	29400204 	addi	r5,r5,8
   3a170:	01800074 	movhi	r6,1
   3a174:	3180e604 	addi	r6,r6,920
   3a178:	003a1980 	call	3a198 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   3a17c:	003b5e40 	call	3b5e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   3a180:	003b7dc0 	call	3b7dc <alt_icache_flush_all>
}
   3a184:	e037883a 	mov	sp,fp
   3a188:	dfc00117 	ldw	ra,4(sp)
   3a18c:	df000017 	ldw	fp,0(sp)
   3a190:	dec00204 	addi	sp,sp,8
   3a194:	f800283a 	ret

0003a198 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   3a198:	defffc04 	addi	sp,sp,-16
   3a19c:	df000315 	stw	fp,12(sp)
   3a1a0:	df000304 	addi	fp,sp,12
   3a1a4:	e13ffd15 	stw	r4,-12(fp)
   3a1a8:	e17ffe15 	stw	r5,-8(fp)
   3a1ac:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   3a1b0:	e0fffe17 	ldw	r3,-8(fp)
   3a1b4:	e0bffd17 	ldw	r2,-12(fp)
   3a1b8:	18800e26 	beq	r3,r2,3a1f4 <alt_load_section+0x5c>
  {
    while( to != end )
   3a1bc:	00000a06 	br	3a1e8 <alt_load_section+0x50>
    {
      *to++ = *from++;
   3a1c0:	e0bffd17 	ldw	r2,-12(fp)
   3a1c4:	10c00017 	ldw	r3,0(r2)
   3a1c8:	e0bffe17 	ldw	r2,-8(fp)
   3a1cc:	10c00015 	stw	r3,0(r2)
   3a1d0:	e0bffe17 	ldw	r2,-8(fp)
   3a1d4:	10800104 	addi	r2,r2,4
   3a1d8:	e0bffe15 	stw	r2,-8(fp)
   3a1dc:	e0bffd17 	ldw	r2,-12(fp)
   3a1e0:	10800104 	addi	r2,r2,4
   3a1e4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   3a1e8:	e0fffe17 	ldw	r3,-8(fp)
   3a1ec:	e0bfff17 	ldw	r2,-4(fp)
   3a1f0:	18bff31e 	bne	r3,r2,3a1c0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   3a1f4:	e037883a 	mov	sp,fp
   3a1f8:	df000017 	ldw	fp,0(sp)
   3a1fc:	dec00104 	addi	sp,sp,4
   3a200:	f800283a 	ret

0003a204 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   3a204:	defff804 	addi	sp,sp,-32
   3a208:	dfc00715 	stw	ra,28(sp)
   3a20c:	df000615 	stw	fp,24(sp)
   3a210:	df000604 	addi	fp,sp,24
   3a214:	e13ffc15 	stw	r4,-16(fp)
   3a218:	e17ffd15 	stw	r5,-12(fp)
   3a21c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   3a220:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   3a224:	e0bffc17 	ldw	r2,-16(fp)
   3a228:	1004803a 	cmplt	r2,r2,zero
   3a22c:	1000081e 	bne	r2,zero,3a250 <lseek+0x4c>
   3a230:	e0bffc17 	ldw	r2,-16(fp)
   3a234:	10800324 	muli	r2,r2,12
   3a238:	1007883a 	mov	r3,r2
   3a23c:	00800074 	movhi	r2,1
   3a240:	1082f504 	addi	r2,r2,3028
   3a244:	1887883a 	add	r3,r3,r2
   3a248:	e0ffff15 	stw	r3,-4(fp)
   3a24c:	00000106 	br	3a254 <lseek+0x50>
   3a250:	e03fff15 	stw	zero,-4(fp)
   3a254:	e0bfff17 	ldw	r2,-4(fp)
   3a258:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   3a25c:	e0bffb17 	ldw	r2,-20(fp)
   3a260:	1005003a 	cmpeq	r2,r2,zero
   3a264:	1000111e 	bne	r2,zero,3a2ac <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   3a268:	e0bffb17 	ldw	r2,-20(fp)
   3a26c:	10800017 	ldw	r2,0(r2)
   3a270:	10800717 	ldw	r2,28(r2)
   3a274:	1005003a 	cmpeq	r2,r2,zero
   3a278:	1000091e 	bne	r2,zero,3a2a0 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   3a27c:	e0bffb17 	ldw	r2,-20(fp)
   3a280:	10800017 	ldw	r2,0(r2)
   3a284:	10800717 	ldw	r2,28(r2)
   3a288:	e13ffb17 	ldw	r4,-20(fp)
   3a28c:	e17ffd17 	ldw	r5,-12(fp)
   3a290:	e1bffe17 	ldw	r6,-8(fp)
   3a294:	103ee83a 	callr	r2
   3a298:	e0bffa15 	stw	r2,-24(fp)
   3a29c:	00000506 	br	3a2b4 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   3a2a0:	00bfde84 	movi	r2,-134
   3a2a4:	e0bffa15 	stw	r2,-24(fp)
   3a2a8:	00000206 	br	3a2b4 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   3a2ac:	00bfebc4 	movi	r2,-81
   3a2b0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   3a2b4:	e0bffa17 	ldw	r2,-24(fp)
   3a2b8:	1004403a 	cmpge	r2,r2,zero
   3a2bc:	1000071e 	bne	r2,zero,3a2dc <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   3a2c0:	003a2f40 	call	3a2f4 <alt_get_errno>
   3a2c4:	1007883a 	mov	r3,r2
   3a2c8:	e0bffa17 	ldw	r2,-24(fp)
   3a2cc:	0085c83a 	sub	r2,zero,r2
   3a2d0:	18800015 	stw	r2,0(r3)
    rc = -1;
   3a2d4:	00bfffc4 	movi	r2,-1
   3a2d8:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   3a2dc:	e0bffa17 	ldw	r2,-24(fp)
}
   3a2e0:	e037883a 	mov	sp,fp
   3a2e4:	dfc00117 	ldw	ra,4(sp)
   3a2e8:	df000017 	ldw	fp,0(sp)
   3a2ec:	dec00204 	addi	sp,sp,8
   3a2f0:	f800283a 	ret

0003a2f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3a2f4:	defffd04 	addi	sp,sp,-12
   3a2f8:	dfc00215 	stw	ra,8(sp)
   3a2fc:	df000115 	stw	fp,4(sp)
   3a300:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   3a304:	00800074 	movhi	r2,1
   3a308:	10877804 	addi	r2,r2,7648
   3a30c:	10800017 	ldw	r2,0(r2)
   3a310:	1005003a 	cmpeq	r2,r2,zero
   3a314:	1000061e 	bne	r2,zero,3a330 <alt_get_errno+0x3c>
   3a318:	00800074 	movhi	r2,1
   3a31c:	10877804 	addi	r2,r2,7648
   3a320:	10800017 	ldw	r2,0(r2)
   3a324:	103ee83a 	callr	r2
   3a328:	e0bfff15 	stw	r2,-4(fp)
   3a32c:	00000306 	br	3a33c <alt_get_errno+0x48>
   3a330:	00800074 	movhi	r2,1
   3a334:	10878804 	addi	r2,r2,7712
   3a338:	e0bfff15 	stw	r2,-4(fp)
   3a33c:	e0bfff17 	ldw	r2,-4(fp)
}
   3a340:	e037883a 	mov	sp,fp
   3a344:	dfc00117 	ldw	ra,4(sp)
   3a348:	df000017 	ldw	fp,0(sp)
   3a34c:	dec00204 	addi	sp,sp,8
   3a350:	f800283a 	ret

0003a354 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   3a354:	defffd04 	addi	sp,sp,-12
   3a358:	dfc00215 	stw	ra,8(sp)
   3a35c:	df000115 	stw	fp,4(sp)
   3a360:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   3a364:	0009883a 	mov	r4,zero
   3a368:	003a81c0 	call	3a81c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   3a36c:	003a8500 	call	3a850 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   3a370:	01000074 	movhi	r4,1
   3a374:	2100dc04 	addi	r4,r4,880
   3a378:	01400074 	movhi	r5,1
   3a37c:	2940dc04 	addi	r5,r5,880
   3a380:	01800074 	movhi	r6,1
   3a384:	3180dc04 	addi	r6,r6,880
   3a388:	003bb9c0 	call	3bb9c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   3a38c:	003b7140 	call	3b714 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   3a390:	01000134 	movhi	r4,4
   3a394:	212dde04 	addi	r4,r4,-18568
   3a398:	003c3980 	call	3c398 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   3a39c:	d1201c17 	ldw	r4,-32656(gp)
   3a3a0:	d1601d17 	ldw	r5,-32652(gp)
   3a3a4:	d1a01e17 	ldw	r6,-32648(gp)
   3a3a8:	003050c0 	call	3050c <main>
   3a3ac:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   3a3b0:	01000044 	movi	r4,1
   3a3b4:	0039d3c0 	call	39d3c <close>
  exit (result);
   3a3b8:	e13fff17 	ldw	r4,-4(fp)
   3a3bc:	003c3ac0 	call	3c3ac <exit>

0003a3c0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   3a3c0:	defffe04 	addi	sp,sp,-8
   3a3c4:	df000115 	stw	fp,4(sp)
   3a3c8:	df000104 	addi	fp,sp,4
   3a3cc:	e13fff15 	stw	r4,-4(fp)
}
   3a3d0:	e037883a 	mov	sp,fp
   3a3d4:	df000017 	ldw	fp,0(sp)
   3a3d8:	dec00104 	addi	sp,sp,4
   3a3dc:	f800283a 	ret

0003a3e0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   3a3e0:	defffe04 	addi	sp,sp,-8
   3a3e4:	df000115 	stw	fp,4(sp)
   3a3e8:	df000104 	addi	fp,sp,4
   3a3ec:	e13fff15 	stw	r4,-4(fp)
}
   3a3f0:	e037883a 	mov	sp,fp
   3a3f4:	df000017 	ldw	fp,0(sp)
   3a3f8:	dec00104 	addi	sp,sp,4
   3a3fc:	f800283a 	ret

0003a400 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   3a400:	defff704 	addi	sp,sp,-36
   3a404:	dfc00815 	stw	ra,32(sp)
   3a408:	df000715 	stw	fp,28(sp)
   3a40c:	df000704 	addi	fp,sp,28
   3a410:	e13ffb15 	stw	r4,-20(fp)
   3a414:	e17ffc15 	stw	r5,-16(fp)
   3a418:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   3a41c:	e0bffb17 	ldw	r2,-20(fp)
   3a420:	1004803a 	cmplt	r2,r2,zero
   3a424:	1000081e 	bne	r2,zero,3a448 <read+0x48>
   3a428:	e0bffb17 	ldw	r2,-20(fp)
   3a42c:	10800324 	muli	r2,r2,12
   3a430:	1007883a 	mov	r3,r2
   3a434:	00800074 	movhi	r2,1
   3a438:	1082f504 	addi	r2,r2,3028
   3a43c:	1887883a 	add	r3,r3,r2
   3a440:	e0ffff15 	stw	r3,-4(fp)
   3a444:	00000106 	br	3a44c <read+0x4c>
   3a448:	e03fff15 	stw	zero,-4(fp)
   3a44c:	e0bfff17 	ldw	r2,-4(fp)
   3a450:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   3a454:	e0bffa17 	ldw	r2,-24(fp)
   3a458:	1005003a 	cmpeq	r2,r2,zero
   3a45c:	1000241e 	bne	r2,zero,3a4f0 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   3a460:	e0bffa17 	ldw	r2,-24(fp)
   3a464:	10800217 	ldw	r2,8(r2)
   3a468:	108000cc 	andi	r2,r2,3
   3a46c:	10800060 	cmpeqi	r2,r2,1
   3a470:	10001a1e 	bne	r2,zero,3a4dc <read+0xdc>
   3a474:	e0bffa17 	ldw	r2,-24(fp)
   3a478:	10800017 	ldw	r2,0(r2)
   3a47c:	10800517 	ldw	r2,20(r2)
   3a480:	1005003a 	cmpeq	r2,r2,zero
   3a484:	1000151e 	bne	r2,zero,3a4dc <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   3a488:	e0bffa17 	ldw	r2,-24(fp)
   3a48c:	10800017 	ldw	r2,0(r2)
   3a490:	10800517 	ldw	r2,20(r2)
   3a494:	e17ffc17 	ldw	r5,-16(fp)
   3a498:	e1bffd17 	ldw	r6,-12(fp)
   3a49c:	e13ffa17 	ldw	r4,-24(fp)
   3a4a0:	103ee83a 	callr	r2
   3a4a4:	e0bff915 	stw	r2,-28(fp)
   3a4a8:	e0bff917 	ldw	r2,-28(fp)
   3a4ac:	1004403a 	cmpge	r2,r2,zero
   3a4b0:	1000071e 	bne	r2,zero,3a4d0 <read+0xd0>
        {
          ALT_ERRNO = -rval;
   3a4b4:	003a5200 	call	3a520 <alt_get_errno>
   3a4b8:	e0fff917 	ldw	r3,-28(fp)
   3a4bc:	00c7c83a 	sub	r3,zero,r3
   3a4c0:	10c00015 	stw	r3,0(r2)
          return -1;
   3a4c4:	00bfffc4 	movi	r2,-1
   3a4c8:	e0bffe15 	stw	r2,-8(fp)
   3a4cc:	00000e06 	br	3a508 <read+0x108>
        }
        return rval;
   3a4d0:	e0bff917 	ldw	r2,-28(fp)
   3a4d4:	e0bffe15 	stw	r2,-8(fp)
   3a4d8:	00000b06 	br	3a508 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   3a4dc:	003a5200 	call	3a520 <alt_get_errno>
   3a4e0:	1007883a 	mov	r3,r2
   3a4e4:	00800344 	movi	r2,13
   3a4e8:	18800015 	stw	r2,0(r3)
   3a4ec:	00000406 	br	3a500 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   3a4f0:	003a5200 	call	3a520 <alt_get_errno>
   3a4f4:	1007883a 	mov	r3,r2
   3a4f8:	00801444 	movi	r2,81
   3a4fc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   3a500:	00bfffc4 	movi	r2,-1
   3a504:	e0bffe15 	stw	r2,-8(fp)
   3a508:	e0bffe17 	ldw	r2,-8(fp)
}
   3a50c:	e037883a 	mov	sp,fp
   3a510:	dfc00117 	ldw	ra,4(sp)
   3a514:	df000017 	ldw	fp,0(sp)
   3a518:	dec00204 	addi	sp,sp,8
   3a51c:	f800283a 	ret

0003a520 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3a520:	defffd04 	addi	sp,sp,-12
   3a524:	dfc00215 	stw	ra,8(sp)
   3a528:	df000115 	stw	fp,4(sp)
   3a52c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   3a530:	00800074 	movhi	r2,1
   3a534:	10877804 	addi	r2,r2,7648
   3a538:	10800017 	ldw	r2,0(r2)
   3a53c:	1005003a 	cmpeq	r2,r2,zero
   3a540:	1000061e 	bne	r2,zero,3a55c <alt_get_errno+0x3c>
   3a544:	00800074 	movhi	r2,1
   3a548:	10877804 	addi	r2,r2,7648
   3a54c:	10800017 	ldw	r2,0(r2)
   3a550:	103ee83a 	callr	r2
   3a554:	e0bfff15 	stw	r2,-4(fp)
   3a558:	00000306 	br	3a568 <alt_get_errno+0x48>
   3a55c:	00800074 	movhi	r2,1
   3a560:	10878804 	addi	r2,r2,7712
   3a564:	e0bfff15 	stw	r2,-4(fp)
   3a568:	e0bfff17 	ldw	r2,-4(fp)
}
   3a56c:	e037883a 	mov	sp,fp
   3a570:	dfc00117 	ldw	ra,4(sp)
   3a574:	df000017 	ldw	fp,0(sp)
   3a578:	dec00204 	addi	sp,sp,8
   3a57c:	f800283a 	ret

0003a580 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   3a580:	defffe04 	addi	sp,sp,-8
   3a584:	df000115 	stw	fp,4(sp)
   3a588:	df000104 	addi	fp,sp,4
   3a58c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   3a590:	e0bfff17 	ldw	r2,-4(fp)
   3a594:	108000d0 	cmplti	r2,r2,3
   3a598:	10000d1e 	bne	r2,zero,3a5d0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   3a59c:	e0bfff17 	ldw	r2,-4(fp)
   3a5a0:	00c00074 	movhi	r3,1
   3a5a4:	18c2f504 	addi	r3,r3,3028
   3a5a8:	10800324 	muli	r2,r2,12
   3a5ac:	10c5883a 	add	r2,r2,r3
   3a5b0:	10800204 	addi	r2,r2,8
   3a5b4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   3a5b8:	e0bfff17 	ldw	r2,-4(fp)
   3a5bc:	00c00074 	movhi	r3,1
   3a5c0:	18c2f504 	addi	r3,r3,3028
   3a5c4:	10800324 	muli	r2,r2,12
   3a5c8:	10c5883a 	add	r2,r2,r3
   3a5cc:	10000015 	stw	zero,0(r2)
  }
}
   3a5d0:	e037883a 	mov	sp,fp
   3a5d4:	df000017 	ldw	fp,0(sp)
   3a5d8:	dec00104 	addi	sp,sp,4
   3a5dc:	f800283a 	ret

0003a5e0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   3a5e0:	defff804 	addi	sp,sp,-32
   3a5e4:	df000715 	stw	fp,28(sp)
   3a5e8:	df000704 	addi	fp,sp,28
   3a5ec:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3a5f0:	0005303a 	rdctl	r2,status
   3a5f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3a5f8:	e0fffb17 	ldw	r3,-20(fp)
   3a5fc:	00bfff84 	movi	r2,-2
   3a600:	1884703a 	and	r2,r3,r2
   3a604:	1001703a 	wrctl	status,r2
  
  return context;
   3a608:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   3a60c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   3a610:	d0a00c17 	ldw	r2,-32720(gp)
   3a614:	10c000c4 	addi	r3,r2,3
   3a618:	00bfff04 	movi	r2,-4
   3a61c:	1884703a 	and	r2,r3,r2
   3a620:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   3a624:	d0e00c17 	ldw	r3,-32720(gp)
   3a628:	e0bffe17 	ldw	r2,-8(fp)
   3a62c:	1887883a 	add	r3,r3,r2
   3a630:	008000b4 	movhi	r2,2
   3a634:	10bffd04 	addi	r2,r2,-12
   3a638:	10c0072e 	bgeu	r2,r3,3a658 <sbrk+0x78>
   3a63c:	e0bffd17 	ldw	r2,-12(fp)
   3a640:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3a644:	e0bffa17 	ldw	r2,-24(fp)
   3a648:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   3a64c:	00bfffc4 	movi	r2,-1
   3a650:	e0bfff15 	stw	r2,-4(fp)
   3a654:	00000c06 	br	3a688 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   3a658:	d0a00c17 	ldw	r2,-32720(gp)
   3a65c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   3a660:	d0e00c17 	ldw	r3,-32720(gp)
   3a664:	e0bffe17 	ldw	r2,-8(fp)
   3a668:	1885883a 	add	r2,r3,r2
   3a66c:	d0a00c15 	stw	r2,-32720(gp)
   3a670:	e0bffd17 	ldw	r2,-12(fp)
   3a674:	e0bff915 	stw	r2,-28(fp)
   3a678:	e0bff917 	ldw	r2,-28(fp)
   3a67c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   3a680:	e0bffc17 	ldw	r2,-16(fp)
   3a684:	e0bfff15 	stw	r2,-4(fp)
   3a688:	e0bfff17 	ldw	r2,-4(fp)
} 
   3a68c:	e037883a 	mov	sp,fp
   3a690:	df000017 	ldw	fp,0(sp)
   3a694:	dec00104 	addi	sp,sp,4
   3a698:	f800283a 	ret

0003a69c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   3a69c:	defff704 	addi	sp,sp,-36
   3a6a0:	dfc00815 	stw	ra,32(sp)
   3a6a4:	df000715 	stw	fp,28(sp)
   3a6a8:	df000704 	addi	fp,sp,28
   3a6ac:	e13ffb15 	stw	r4,-20(fp)
   3a6b0:	e17ffc15 	stw	r5,-16(fp)
   3a6b4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   3a6b8:	e0bffb17 	ldw	r2,-20(fp)
   3a6bc:	1004803a 	cmplt	r2,r2,zero
   3a6c0:	1000081e 	bne	r2,zero,3a6e4 <write+0x48>
   3a6c4:	e0bffb17 	ldw	r2,-20(fp)
   3a6c8:	10800324 	muli	r2,r2,12
   3a6cc:	1007883a 	mov	r3,r2
   3a6d0:	00800074 	movhi	r2,1
   3a6d4:	1082f504 	addi	r2,r2,3028
   3a6d8:	1887883a 	add	r3,r3,r2
   3a6dc:	e0ffff15 	stw	r3,-4(fp)
   3a6e0:	00000106 	br	3a6e8 <write+0x4c>
   3a6e4:	e03fff15 	stw	zero,-4(fp)
   3a6e8:	e0bfff17 	ldw	r2,-4(fp)
   3a6ec:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   3a6f0:	e0bffa17 	ldw	r2,-24(fp)
   3a6f4:	1005003a 	cmpeq	r2,r2,zero
   3a6f8:	1000241e 	bne	r2,zero,3a78c <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   3a6fc:	e0bffa17 	ldw	r2,-24(fp)
   3a700:	10800217 	ldw	r2,8(r2)
   3a704:	108000cc 	andi	r2,r2,3
   3a708:	1005003a 	cmpeq	r2,r2,zero
   3a70c:	10001a1e 	bne	r2,zero,3a778 <write+0xdc>
   3a710:	e0bffa17 	ldw	r2,-24(fp)
   3a714:	10800017 	ldw	r2,0(r2)
   3a718:	10800617 	ldw	r2,24(r2)
   3a71c:	1005003a 	cmpeq	r2,r2,zero
   3a720:	1000151e 	bne	r2,zero,3a778 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   3a724:	e0bffa17 	ldw	r2,-24(fp)
   3a728:	10800017 	ldw	r2,0(r2)
   3a72c:	10800617 	ldw	r2,24(r2)
   3a730:	e17ffc17 	ldw	r5,-16(fp)
   3a734:	e1bffd17 	ldw	r6,-12(fp)
   3a738:	e13ffa17 	ldw	r4,-24(fp)
   3a73c:	103ee83a 	callr	r2
   3a740:	e0bff915 	stw	r2,-28(fp)
   3a744:	e0bff917 	ldw	r2,-28(fp)
   3a748:	1004403a 	cmpge	r2,r2,zero
   3a74c:	1000071e 	bne	r2,zero,3a76c <write+0xd0>
      {
        ALT_ERRNO = -rval;
   3a750:	003a7bc0 	call	3a7bc <alt_get_errno>
   3a754:	e0fff917 	ldw	r3,-28(fp)
   3a758:	00c7c83a 	sub	r3,zero,r3
   3a75c:	10c00015 	stw	r3,0(r2)
        return -1;
   3a760:	00bfffc4 	movi	r2,-1
   3a764:	e0bffe15 	stw	r2,-8(fp)
   3a768:	00000e06 	br	3a7a4 <write+0x108>
      }
      return rval;
   3a76c:	e0bff917 	ldw	r2,-28(fp)
   3a770:	e0bffe15 	stw	r2,-8(fp)
   3a774:	00000b06 	br	3a7a4 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   3a778:	003a7bc0 	call	3a7bc <alt_get_errno>
   3a77c:	1007883a 	mov	r3,r2
   3a780:	00800344 	movi	r2,13
   3a784:	18800015 	stw	r2,0(r3)
   3a788:	00000406 	br	3a79c <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   3a78c:	003a7bc0 	call	3a7bc <alt_get_errno>
   3a790:	1007883a 	mov	r3,r2
   3a794:	00801444 	movi	r2,81
   3a798:	18800015 	stw	r2,0(r3)
  }
  return -1;
   3a79c:	00bfffc4 	movi	r2,-1
   3a7a0:	e0bffe15 	stw	r2,-8(fp)
   3a7a4:	e0bffe17 	ldw	r2,-8(fp)
}
   3a7a8:	e037883a 	mov	sp,fp
   3a7ac:	dfc00117 	ldw	ra,4(sp)
   3a7b0:	df000017 	ldw	fp,0(sp)
   3a7b4:	dec00204 	addi	sp,sp,8
   3a7b8:	f800283a 	ret

0003a7bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3a7bc:	defffd04 	addi	sp,sp,-12
   3a7c0:	dfc00215 	stw	ra,8(sp)
   3a7c4:	df000115 	stw	fp,4(sp)
   3a7c8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   3a7cc:	00800074 	movhi	r2,1
   3a7d0:	10877804 	addi	r2,r2,7648
   3a7d4:	10800017 	ldw	r2,0(r2)
   3a7d8:	1005003a 	cmpeq	r2,r2,zero
   3a7dc:	1000061e 	bne	r2,zero,3a7f8 <alt_get_errno+0x3c>
   3a7e0:	00800074 	movhi	r2,1
   3a7e4:	10877804 	addi	r2,r2,7648
   3a7e8:	10800017 	ldw	r2,0(r2)
   3a7ec:	103ee83a 	callr	r2
   3a7f0:	e0bfff15 	stw	r2,-4(fp)
   3a7f4:	00000306 	br	3a804 <alt_get_errno+0x48>
   3a7f8:	00800074 	movhi	r2,1
   3a7fc:	10878804 	addi	r2,r2,7712
   3a800:	e0bfff15 	stw	r2,-4(fp)
   3a804:	e0bfff17 	ldw	r2,-4(fp)
}
   3a808:	e037883a 	mov	sp,fp
   3a80c:	dfc00117 	ldw	ra,4(sp)
   3a810:	df000017 	ldw	fp,0(sp)
   3a814:	dec00204 	addi	sp,sp,8
   3a818:	f800283a 	ret

0003a81c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   3a81c:	defffd04 	addi	sp,sp,-12
   3a820:	dfc00215 	stw	ra,8(sp)
   3a824:	df000115 	stw	fp,4(sp)
   3a828:	df000104 	addi	fp,sp,4
   3a82c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU1, cpu1);
   3a830:	003c07c0 	call	3c07c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   3a834:	00800044 	movi	r2,1
   3a838:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   3a83c:	e037883a 	mov	sp,fp
   3a840:	dfc00117 	ldw	ra,4(sp)
   3a844:	df000017 	ldw	fp,0(sp)
   3a848:	dec00204 	addi	sp,sp,8
   3a84c:	f800283a 	ret

0003a850 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   3a850:	defffe04 	addi	sp,sp,-8
   3a854:	dfc00115 	stw	ra,4(sp)
   3a858:	df000015 	stw	fp,0(sp)
   3a85c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
   3a860:	01000134 	movhi	r4,4
   3a864:	21040004 	addi	r4,r4,4096
   3a868:	000b883a 	mov	r5,zero
   3a86c:	01800044 	movi	r6,1
   3a870:	01c0fa04 	movi	r7,1000
   3a874:	003b4000 	call	3b400 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1, jtag_uart_1);
   3a878:	01000074 	movhi	r4,1
   3a87c:	21035f04 	addi	r4,r4,3452
   3a880:	000b883a 	mov	r5,zero
   3a884:	01800404 	movi	r6,16
   3a888:	003aa2c0 	call	3aa2c <altera_avalon_jtag_uart_init>
   3a88c:	01000074 	movhi	r4,1
   3a890:	21035504 	addi	r4,r4,3412
   3a894:	003a8ac0 	call	3a8ac <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
   3a898:	e037883a 	mov	sp,fp
   3a89c:	dfc00117 	ldw	ra,4(sp)
   3a8a0:	df000017 	ldw	fp,0(sp)
   3a8a4:	dec00204 	addi	sp,sp,8
   3a8a8:	f800283a 	ret

0003a8ac <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   3a8ac:	defffd04 	addi	sp,sp,-12
   3a8b0:	dfc00215 	stw	ra,8(sp)
   3a8b4:	df000115 	stw	fp,4(sp)
   3a8b8:	df000104 	addi	fp,sp,4
   3a8bc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   3a8c0:	e13fff17 	ldw	r4,-4(fp)
   3a8c4:	01400074 	movhi	r5,1
   3a8c8:	29477504 	addi	r5,r5,7636
   3a8cc:	003b6000 	call	3b600 <alt_dev_llist_insert>
}
   3a8d0:	e037883a 	mov	sp,fp
   3a8d4:	dfc00117 	ldw	ra,4(sp)
   3a8d8:	df000017 	ldw	fp,0(sp)
   3a8dc:	dec00204 	addi	sp,sp,8
   3a8e0:	f800283a 	ret

0003a8e4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   3a8e4:	defffa04 	addi	sp,sp,-24
   3a8e8:	dfc00515 	stw	ra,20(sp)
   3a8ec:	df000415 	stw	fp,16(sp)
   3a8f0:	df000404 	addi	fp,sp,16
   3a8f4:	e13ffd15 	stw	r4,-12(fp)
   3a8f8:	e17ffe15 	stw	r5,-8(fp)
   3a8fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   3a900:	e0bffd17 	ldw	r2,-12(fp)
   3a904:	10800017 	ldw	r2,0(r2)
   3a908:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   3a90c:	e0bffc17 	ldw	r2,-16(fp)
   3a910:	11000a04 	addi	r4,r2,40
   3a914:	e0bffd17 	ldw	r2,-12(fp)
   3a918:	11c00217 	ldw	r7,8(r2)
   3a91c:	e17ffe17 	ldw	r5,-8(fp)
   3a920:	e1bfff17 	ldw	r6,-4(fp)
   3a924:	003af2c0 	call	3af2c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   3a928:	e037883a 	mov	sp,fp
   3a92c:	dfc00117 	ldw	ra,4(sp)
   3a930:	df000017 	ldw	fp,0(sp)
   3a934:	dec00204 	addi	sp,sp,8
   3a938:	f800283a 	ret

0003a93c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   3a93c:	defffa04 	addi	sp,sp,-24
   3a940:	dfc00515 	stw	ra,20(sp)
   3a944:	df000415 	stw	fp,16(sp)
   3a948:	df000404 	addi	fp,sp,16
   3a94c:	e13ffd15 	stw	r4,-12(fp)
   3a950:	e17ffe15 	stw	r5,-8(fp)
   3a954:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   3a958:	e0bffd17 	ldw	r2,-12(fp)
   3a95c:	10800017 	ldw	r2,0(r2)
   3a960:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   3a964:	e0bffc17 	ldw	r2,-16(fp)
   3a968:	11000a04 	addi	r4,r2,40
   3a96c:	e0bffd17 	ldw	r2,-12(fp)
   3a970:	11c00217 	ldw	r7,8(r2)
   3a974:	e17ffe17 	ldw	r5,-8(fp)
   3a978:	e1bfff17 	ldw	r6,-4(fp)
   3a97c:	003b1500 	call	3b150 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   3a980:	e037883a 	mov	sp,fp
   3a984:	dfc00117 	ldw	ra,4(sp)
   3a988:	df000017 	ldw	fp,0(sp)
   3a98c:	dec00204 	addi	sp,sp,8
   3a990:	f800283a 	ret

0003a994 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   3a994:	defffc04 	addi	sp,sp,-16
   3a998:	dfc00315 	stw	ra,12(sp)
   3a99c:	df000215 	stw	fp,8(sp)
   3a9a0:	df000204 	addi	fp,sp,8
   3a9a4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   3a9a8:	e0bfff17 	ldw	r2,-4(fp)
   3a9ac:	10800017 	ldw	r2,0(r2)
   3a9b0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   3a9b4:	e0bffe17 	ldw	r2,-8(fp)
   3a9b8:	11000a04 	addi	r4,r2,40
   3a9bc:	e0bfff17 	ldw	r2,-4(fp)
   3a9c0:	11400217 	ldw	r5,8(r2)
   3a9c4:	003adc40 	call	3adc4 <altera_avalon_jtag_uart_close>
}
   3a9c8:	e037883a 	mov	sp,fp
   3a9cc:	dfc00117 	ldw	ra,4(sp)
   3a9d0:	df000017 	ldw	fp,0(sp)
   3a9d4:	dec00204 	addi	sp,sp,8
   3a9d8:	f800283a 	ret

0003a9dc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   3a9dc:	defffa04 	addi	sp,sp,-24
   3a9e0:	dfc00515 	stw	ra,20(sp)
   3a9e4:	df000415 	stw	fp,16(sp)
   3a9e8:	df000404 	addi	fp,sp,16
   3a9ec:	e13ffd15 	stw	r4,-12(fp)
   3a9f0:	e17ffe15 	stw	r5,-8(fp)
   3a9f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   3a9f8:	e0bffd17 	ldw	r2,-12(fp)
   3a9fc:	10800017 	ldw	r2,0(r2)
   3aa00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   3aa04:	e0bffc17 	ldw	r2,-16(fp)
   3aa08:	11000a04 	addi	r4,r2,40
   3aa0c:	e17ffe17 	ldw	r5,-8(fp)
   3aa10:	e1bfff17 	ldw	r6,-4(fp)
   3aa14:	003ae380 	call	3ae38 <altera_avalon_jtag_uart_ioctl>
}
   3aa18:	e037883a 	mov	sp,fp
   3aa1c:	dfc00117 	ldw	ra,4(sp)
   3aa20:	df000017 	ldw	fp,0(sp)
   3aa24:	dec00204 	addi	sp,sp,8
   3aa28:	f800283a 	ret

0003aa2c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   3aa2c:	defffa04 	addi	sp,sp,-24
   3aa30:	dfc00515 	stw	ra,20(sp)
   3aa34:	df000415 	stw	fp,16(sp)
   3aa38:	df000404 	addi	fp,sp,16
   3aa3c:	e13ffd15 	stw	r4,-12(fp)
   3aa40:	e17ffe15 	stw	r5,-8(fp)
   3aa44:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   3aa48:	e0fffd17 	ldw	r3,-12(fp)
   3aa4c:	00800044 	movi	r2,1
   3aa50:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   3aa54:	e0bffd17 	ldw	r2,-12(fp)
   3aa58:	10800017 	ldw	r2,0(r2)
   3aa5c:	11000104 	addi	r4,r2,4
   3aa60:	e0bffd17 	ldw	r2,-12(fp)
   3aa64:	10800817 	ldw	r2,32(r2)
   3aa68:	1007883a 	mov	r3,r2
   3aa6c:	2005883a 	mov	r2,r4
   3aa70:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   3aa74:	e13ffe17 	ldw	r4,-8(fp)
   3aa78:	e17fff17 	ldw	r5,-4(fp)
   3aa7c:	d8000015 	stw	zero,0(sp)
   3aa80:	01800134 	movhi	r6,4
   3aa84:	31aabb04 	addi	r6,r6,-21780
   3aa88:	e1fffd17 	ldw	r7,-12(fp)
   3aa8c:	003b80c0 	call	3b80c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   3aa90:	e0bffd17 	ldw	r2,-12(fp)
   3aa94:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   3aa98:	e0bffd17 	ldw	r2,-12(fp)
   3aa9c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   3aaa0:	00800074 	movhi	r2,1
   3aaa4:	10878d04 	addi	r2,r2,7732
   3aaa8:	10800017 	ldw	r2,0(r2)
   3aaac:	100b883a 	mov	r5,r2
   3aab0:	01800134 	movhi	r6,4
   3aab4:	31ab4504 	addi	r6,r6,-21228
   3aab8:	e1fffd17 	ldw	r7,-12(fp)
   3aabc:	003b4900 	call	3b490 <alt_alarm_start>
   3aac0:	1004403a 	cmpge	r2,r2,zero
   3aac4:	1000041e 	bne	r2,zero,3aad8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   3aac8:	e0fffd17 	ldw	r3,-12(fp)
   3aacc:	00a00034 	movhi	r2,32768
   3aad0:	10bfffc4 	addi	r2,r2,-1
   3aad4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   3aad8:	e037883a 	mov	sp,fp
   3aadc:	dfc00117 	ldw	ra,4(sp)
   3aae0:	df000017 	ldw	fp,0(sp)
   3aae4:	dec00204 	addi	sp,sp,8
   3aae8:	f800283a 	ret

0003aaec <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   3aaec:	defff804 	addi	sp,sp,-32
   3aaf0:	df000715 	stw	fp,28(sp)
   3aaf4:	df000704 	addi	fp,sp,28
   3aaf8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   3aafc:	e0bfff17 	ldw	r2,-4(fp)
   3ab00:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   3ab04:	e0bffe17 	ldw	r2,-8(fp)
   3ab08:	10800017 	ldw	r2,0(r2)
   3ab0c:	e0bffd15 	stw	r2,-12(fp)
   3ab10:	00000006 	br	3ab14 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   3ab14:	e0bffd17 	ldw	r2,-12(fp)
   3ab18:	10800104 	addi	r2,r2,4
   3ab1c:	10800037 	ldwio	r2,0(r2)
   3ab20:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   3ab24:	e0bffc17 	ldw	r2,-16(fp)
   3ab28:	1080c00c 	andi	r2,r2,768
   3ab2c:	1005003a 	cmpeq	r2,r2,zero
   3ab30:	1000741e 	bne	r2,zero,3ad04 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   3ab34:	e0bffc17 	ldw	r2,-16(fp)
   3ab38:	1080400c 	andi	r2,r2,256
   3ab3c:	1005003a 	cmpeq	r2,r2,zero
   3ab40:	1000351e 	bne	r2,zero,3ac18 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   3ab44:	00800074 	movhi	r2,1
   3ab48:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3ab4c:	e0bffe17 	ldw	r2,-8(fp)
   3ab50:	10800a17 	ldw	r2,40(r2)
   3ab54:	10800044 	addi	r2,r2,1
   3ab58:	1081ffcc 	andi	r2,r2,2047
   3ab5c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   3ab60:	e0bffe17 	ldw	r2,-8(fp)
   3ab64:	10c00b17 	ldw	r3,44(r2)
   3ab68:	e0bffa17 	ldw	r2,-24(fp)
   3ab6c:	18801626 	beq	r3,r2,3abc8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   3ab70:	e0bffd17 	ldw	r2,-12(fp)
   3ab74:	10800037 	ldwio	r2,0(r2)
   3ab78:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   3ab7c:	e0bffb17 	ldw	r2,-20(fp)
   3ab80:	10a0000c 	andi	r2,r2,32768
   3ab84:	1005003a 	cmpeq	r2,r2,zero
   3ab88:	10000f1e 	bne	r2,zero,3abc8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   3ab8c:	e0bffe17 	ldw	r2,-8(fp)
   3ab90:	10c00a17 	ldw	r3,40(r2)
   3ab94:	e0bffb17 	ldw	r2,-20(fp)
   3ab98:	1009883a 	mov	r4,r2
   3ab9c:	e0bffe17 	ldw	r2,-8(fp)
   3aba0:	1885883a 	add	r2,r3,r2
   3aba4:	10800e04 	addi	r2,r2,56
   3aba8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3abac:	e0bffe17 	ldw	r2,-8(fp)
   3abb0:	10800a17 	ldw	r2,40(r2)
   3abb4:	10800044 	addi	r2,r2,1
   3abb8:	10c1ffcc 	andi	r3,r2,2047
   3abbc:	e0bffe17 	ldw	r2,-8(fp)
   3abc0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   3abc4:	003fe106 	br	3ab4c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   3abc8:	e0bffb17 	ldw	r2,-20(fp)
   3abcc:	10bfffec 	andhi	r2,r2,65535
   3abd0:	1005003a 	cmpeq	r2,r2,zero
   3abd4:	1000101e 	bne	r2,zero,3ac18 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   3abd8:	e0bffe17 	ldw	r2,-8(fp)
   3abdc:	10c00817 	ldw	r3,32(r2)
   3abe0:	00bfff84 	movi	r2,-2
   3abe4:	1886703a 	and	r3,r3,r2
   3abe8:	e0bffe17 	ldw	r2,-8(fp)
   3abec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   3abf0:	e0bffd17 	ldw	r2,-12(fp)
   3abf4:	11000104 	addi	r4,r2,4
   3abf8:	e0bffe17 	ldw	r2,-8(fp)
   3abfc:	10800817 	ldw	r2,32(r2)
   3ac00:	1007883a 	mov	r3,r2
   3ac04:	2005883a 	mov	r2,r4
   3ac08:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   3ac0c:	e0bffd17 	ldw	r2,-12(fp)
   3ac10:	10800104 	addi	r2,r2,4
   3ac14:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   3ac18:	e0bffc17 	ldw	r2,-16(fp)
   3ac1c:	1080800c 	andi	r2,r2,512
   3ac20:	1005003a 	cmpeq	r2,r2,zero
   3ac24:	103fbb1e 	bne	r2,zero,3ab14 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   3ac28:	e0bffc17 	ldw	r2,-16(fp)
   3ac2c:	10bfffec 	andhi	r2,r2,65535
   3ac30:	1004d43a 	srli	r2,r2,16
   3ac34:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   3ac38:	00001506 	br	3ac90 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   3ac3c:	e13ffd17 	ldw	r4,-12(fp)
   3ac40:	e0bffe17 	ldw	r2,-8(fp)
   3ac44:	10c00d17 	ldw	r3,52(r2)
   3ac48:	e0bffe17 	ldw	r2,-8(fp)
   3ac4c:	1885883a 	add	r2,r3,r2
   3ac50:	10820e04 	addi	r2,r2,2104
   3ac54:	10800003 	ldbu	r2,0(r2)
   3ac58:	10c03fcc 	andi	r3,r2,255
   3ac5c:	18c0201c 	xori	r3,r3,128
   3ac60:	18ffe004 	addi	r3,r3,-128
   3ac64:	2005883a 	mov	r2,r4
   3ac68:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3ac6c:	e0bffe17 	ldw	r2,-8(fp)
   3ac70:	10800d17 	ldw	r2,52(r2)
   3ac74:	10800044 	addi	r2,r2,1
   3ac78:	10c1ffcc 	andi	r3,r2,2047
   3ac7c:	e0bffe17 	ldw	r2,-8(fp)
   3ac80:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   3ac84:	e0bff917 	ldw	r2,-28(fp)
   3ac88:	10bfffc4 	addi	r2,r2,-1
   3ac8c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   3ac90:	e0bff917 	ldw	r2,-28(fp)
   3ac94:	1005003a 	cmpeq	r2,r2,zero
   3ac98:	1000051e 	bne	r2,zero,3acb0 <altera_avalon_jtag_uart_irq+0x1c4>
   3ac9c:	e0bffe17 	ldw	r2,-8(fp)
   3aca0:	10c00d17 	ldw	r3,52(r2)
   3aca4:	e0bffe17 	ldw	r2,-8(fp)
   3aca8:	10800c17 	ldw	r2,48(r2)
   3acac:	18bfe31e 	bne	r3,r2,3ac3c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   3acb0:	e0bff917 	ldw	r2,-28(fp)
   3acb4:	1005003a 	cmpeq	r2,r2,zero
   3acb8:	103f961e 	bne	r2,zero,3ab14 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   3acbc:	e0bffe17 	ldw	r2,-8(fp)
   3acc0:	10c00817 	ldw	r3,32(r2)
   3acc4:	00bfff44 	movi	r2,-3
   3acc8:	1886703a 	and	r3,r3,r2
   3accc:	e0bffe17 	ldw	r2,-8(fp)
   3acd0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   3acd4:	e0bffe17 	ldw	r2,-8(fp)
   3acd8:	10800017 	ldw	r2,0(r2)
   3acdc:	11000104 	addi	r4,r2,4
   3ace0:	e0bffe17 	ldw	r2,-8(fp)
   3ace4:	10800817 	ldw	r2,32(r2)
   3ace8:	1007883a 	mov	r3,r2
   3acec:	2005883a 	mov	r2,r4
   3acf0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   3acf4:	e0bffd17 	ldw	r2,-12(fp)
   3acf8:	10800104 	addi	r2,r2,4
   3acfc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   3ad00:	003f8406 	br	3ab14 <altera_avalon_jtag_uart_irq+0x28>
}
   3ad04:	e037883a 	mov	sp,fp
   3ad08:	df000017 	ldw	fp,0(sp)
   3ad0c:	dec00104 	addi	sp,sp,4
   3ad10:	f800283a 	ret

0003ad14 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   3ad14:	defffc04 	addi	sp,sp,-16
   3ad18:	df000315 	stw	fp,12(sp)
   3ad1c:	df000304 	addi	fp,sp,12
   3ad20:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   3ad24:	e0bfff17 	ldw	r2,-4(fp)
   3ad28:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   3ad2c:	e0bffe17 	ldw	r2,-8(fp)
   3ad30:	10800017 	ldw	r2,0(r2)
   3ad34:	10800104 	addi	r2,r2,4
   3ad38:	10800037 	ldwio	r2,0(r2)
   3ad3c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   3ad40:	e0bffd17 	ldw	r2,-12(fp)
   3ad44:	1081000c 	andi	r2,r2,1024
   3ad48:	1005003a 	cmpeq	r2,r2,zero
   3ad4c:	10000c1e 	bne	r2,zero,3ad80 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   3ad50:	e0bffe17 	ldw	r2,-8(fp)
   3ad54:	10800017 	ldw	r2,0(r2)
   3ad58:	11000104 	addi	r4,r2,4
   3ad5c:	e0bffe17 	ldw	r2,-8(fp)
   3ad60:	10800817 	ldw	r2,32(r2)
   3ad64:	10810014 	ori	r2,r2,1024
   3ad68:	1007883a 	mov	r3,r2
   3ad6c:	2005883a 	mov	r2,r4
   3ad70:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   3ad74:	e0bffe17 	ldw	r2,-8(fp)
   3ad78:	10000915 	stw	zero,36(r2)
   3ad7c:	00000a06 	br	3ada8 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   3ad80:	e0bffe17 	ldw	r2,-8(fp)
   3ad84:	10c00917 	ldw	r3,36(r2)
   3ad88:	00a00034 	movhi	r2,32768
   3ad8c:	10bfff04 	addi	r2,r2,-4
   3ad90:	10c00536 	bltu	r2,r3,3ada8 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   3ad94:	e0bffe17 	ldw	r2,-8(fp)
   3ad98:	10800917 	ldw	r2,36(r2)
   3ad9c:	10c00044 	addi	r3,r2,1
   3ada0:	e0bffe17 	ldw	r2,-8(fp)
   3ada4:	10c00915 	stw	r3,36(r2)
   3ada8:	00800074 	movhi	r2,1
   3adac:	10878d04 	addi	r2,r2,7732
   3adb0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   3adb4:	e037883a 	mov	sp,fp
   3adb8:	df000017 	ldw	fp,0(sp)
   3adbc:	dec00104 	addi	sp,sp,4
   3adc0:	f800283a 	ret

0003adc4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   3adc4:	defffc04 	addi	sp,sp,-16
   3adc8:	df000315 	stw	fp,12(sp)
   3adcc:	df000304 	addi	fp,sp,12
   3add0:	e13ffd15 	stw	r4,-12(fp)
   3add4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   3add8:	00000706 	br	3adf8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   3addc:	e0bffe17 	ldw	r2,-8(fp)
   3ade0:	1090000c 	andi	r2,r2,16384
   3ade4:	1005003a 	cmpeq	r2,r2,zero
   3ade8:	1000031e 	bne	r2,zero,3adf8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   3adec:	00bffd44 	movi	r2,-11
   3adf0:	e0bfff15 	stw	r2,-4(fp)
   3adf4:	00000b06 	br	3ae24 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   3adf8:	e0bffd17 	ldw	r2,-12(fp)
   3adfc:	10c00d17 	ldw	r3,52(r2)
   3ae00:	e0bffd17 	ldw	r2,-12(fp)
   3ae04:	10800c17 	ldw	r2,48(r2)
   3ae08:	18800526 	beq	r3,r2,3ae20 <altera_avalon_jtag_uart_close+0x5c>
   3ae0c:	e0bffd17 	ldw	r2,-12(fp)
   3ae10:	10c00917 	ldw	r3,36(r2)
   3ae14:	e0bffd17 	ldw	r2,-12(fp)
   3ae18:	10800117 	ldw	r2,4(r2)
   3ae1c:	18bfef36 	bltu	r3,r2,3addc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   3ae20:	e03fff15 	stw	zero,-4(fp)
   3ae24:	e0bfff17 	ldw	r2,-4(fp)
}
   3ae28:	e037883a 	mov	sp,fp
   3ae2c:	df000017 	ldw	fp,0(sp)
   3ae30:	dec00104 	addi	sp,sp,4
   3ae34:	f800283a 	ret

0003ae38 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   3ae38:	defff804 	addi	sp,sp,-32
   3ae3c:	df000715 	stw	fp,28(sp)
   3ae40:	df000704 	addi	fp,sp,28
   3ae44:	e13ffb15 	stw	r4,-20(fp)
   3ae48:	e17ffc15 	stw	r5,-16(fp)
   3ae4c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   3ae50:	00bff9c4 	movi	r2,-25
   3ae54:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   3ae58:	e0bffc17 	ldw	r2,-16(fp)
   3ae5c:	e0bfff15 	stw	r2,-4(fp)
   3ae60:	e0ffff17 	ldw	r3,-4(fp)
   3ae64:	189a8060 	cmpeqi	r2,r3,27137
   3ae68:	1000041e 	bne	r2,zero,3ae7c <altera_avalon_jtag_uart_ioctl+0x44>
   3ae6c:	e0ffff17 	ldw	r3,-4(fp)
   3ae70:	189a80a0 	cmpeqi	r2,r3,27138
   3ae74:	10001b1e 	bne	r2,zero,3aee4 <altera_avalon_jtag_uart_ioctl+0xac>
   3ae78:	00002706 	br	3af18 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   3ae7c:	e0bffb17 	ldw	r2,-20(fp)
   3ae80:	10c00117 	ldw	r3,4(r2)
   3ae84:	00a00034 	movhi	r2,32768
   3ae88:	10bfffc4 	addi	r2,r2,-1
   3ae8c:	18802226 	beq	r3,r2,3af18 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   3ae90:	e0bffd17 	ldw	r2,-12(fp)
   3ae94:	10800017 	ldw	r2,0(r2)
   3ae98:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   3ae9c:	e0bff917 	ldw	r2,-28(fp)
   3aea0:	10800090 	cmplti	r2,r2,2
   3aea4:	1000071e 	bne	r2,zero,3aec4 <altera_avalon_jtag_uart_ioctl+0x8c>
   3aea8:	e0fff917 	ldw	r3,-28(fp)
   3aeac:	00a00034 	movhi	r2,32768
   3aeb0:	10bfffc4 	addi	r2,r2,-1
   3aeb4:	18800326 	beq	r3,r2,3aec4 <altera_avalon_jtag_uart_ioctl+0x8c>
   3aeb8:	e0bff917 	ldw	r2,-28(fp)
   3aebc:	e0bffe15 	stw	r2,-8(fp)
   3aec0:	00000306 	br	3aed0 <altera_avalon_jtag_uart_ioctl+0x98>
   3aec4:	00e00034 	movhi	r3,32768
   3aec8:	18ffff84 	addi	r3,r3,-2
   3aecc:	e0fffe15 	stw	r3,-8(fp)
   3aed0:	e0bffb17 	ldw	r2,-20(fp)
   3aed4:	e0fffe17 	ldw	r3,-8(fp)
   3aed8:	10c00115 	stw	r3,4(r2)
      rc = 0;
   3aedc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   3aee0:	00000d06 	br	3af18 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   3aee4:	e0bffb17 	ldw	r2,-20(fp)
   3aee8:	10c00117 	ldw	r3,4(r2)
   3aeec:	00a00034 	movhi	r2,32768
   3aef0:	10bfffc4 	addi	r2,r2,-1
   3aef4:	18800826 	beq	r3,r2,3af18 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   3aef8:	e13ffd17 	ldw	r4,-12(fp)
   3aefc:	e0bffb17 	ldw	r2,-20(fp)
   3af00:	10c00917 	ldw	r3,36(r2)
   3af04:	e0bffb17 	ldw	r2,-20(fp)
   3af08:	10800117 	ldw	r2,4(r2)
   3af0c:	1885803a 	cmpltu	r2,r3,r2
   3af10:	20800015 	stw	r2,0(r4)
      rc = 0;
   3af14:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   3af18:	e0bffa17 	ldw	r2,-24(fp)
}
   3af1c:	e037883a 	mov	sp,fp
   3af20:	df000017 	ldw	fp,0(sp)
   3af24:	dec00104 	addi	sp,sp,4
   3af28:	f800283a 	ret

0003af2c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   3af2c:	defff204 	addi	sp,sp,-56
   3af30:	dfc00d15 	stw	ra,52(sp)
   3af34:	df000c15 	stw	fp,48(sp)
   3af38:	df000c04 	addi	fp,sp,48
   3af3c:	e13ffb15 	stw	r4,-20(fp)
   3af40:	e17ffc15 	stw	r5,-16(fp)
   3af44:	e1bffd15 	stw	r6,-12(fp)
   3af48:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   3af4c:	e0bffc17 	ldw	r2,-16(fp)
   3af50:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   3af54:	00004806 	br	3b078 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   3af58:	e0bffb17 	ldw	r2,-20(fp)
   3af5c:	10800a17 	ldw	r2,40(r2)
   3af60:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   3af64:	e0bffb17 	ldw	r2,-20(fp)
   3af68:	10800b17 	ldw	r2,44(r2)
   3af6c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   3af70:	e0fff717 	ldw	r3,-36(fp)
   3af74:	e0bff617 	ldw	r2,-40(fp)
   3af78:	18800536 	bltu	r3,r2,3af90 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   3af7c:	e0bff717 	ldw	r2,-36(fp)
   3af80:	e0fff617 	ldw	r3,-40(fp)
   3af84:	10c5c83a 	sub	r2,r2,r3
   3af88:	e0bff815 	stw	r2,-32(fp)
   3af8c:	00000406 	br	3afa0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   3af90:	00820004 	movi	r2,2048
   3af94:	e0fff617 	ldw	r3,-40(fp)
   3af98:	10c5c83a 	sub	r2,r2,r3
   3af9c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   3afa0:	e0bff817 	ldw	r2,-32(fp)
   3afa4:	1005003a 	cmpeq	r2,r2,zero
   3afa8:	10001f1e 	bne	r2,zero,3b028 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   3afac:	e0fffd17 	ldw	r3,-12(fp)
   3afb0:	e0bff817 	ldw	r2,-32(fp)
   3afb4:	1880022e 	bgeu	r3,r2,3afc0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   3afb8:	e0bffd17 	ldw	r2,-12(fp)
   3afbc:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   3afc0:	e0bffb17 	ldw	r2,-20(fp)
   3afc4:	10c00e04 	addi	r3,r2,56
   3afc8:	e0bff617 	ldw	r2,-40(fp)
   3afcc:	1887883a 	add	r3,r3,r2
   3afd0:	e0bffa17 	ldw	r2,-24(fp)
   3afd4:	1009883a 	mov	r4,r2
   3afd8:	180b883a 	mov	r5,r3
   3afdc:	e1bff817 	ldw	r6,-32(fp)
   3afe0:	00359900 	call	35990 <memcpy>
      ptr   += n;
   3afe4:	e0fff817 	ldw	r3,-32(fp)
   3afe8:	e0bffa17 	ldw	r2,-24(fp)
   3afec:	10c5883a 	add	r2,r2,r3
   3aff0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   3aff4:	e0fffd17 	ldw	r3,-12(fp)
   3aff8:	e0bff817 	ldw	r2,-32(fp)
   3affc:	1885c83a 	sub	r2,r3,r2
   3b000:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3b004:	e0fff617 	ldw	r3,-40(fp)
   3b008:	e0bff817 	ldw	r2,-32(fp)
   3b00c:	1885883a 	add	r2,r3,r2
   3b010:	10c1ffcc 	andi	r3,r2,2047
   3b014:	e0bffb17 	ldw	r2,-20(fp)
   3b018:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   3b01c:	e0bffd17 	ldw	r2,-12(fp)
   3b020:	10800048 	cmpgei	r2,r2,1
   3b024:	103fcc1e 	bne	r2,zero,3af58 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   3b028:	e0fffa17 	ldw	r3,-24(fp)
   3b02c:	e0bffc17 	ldw	r2,-16(fp)
   3b030:	1880141e 	bne	r3,r2,3b084 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   3b034:	e0bffe17 	ldw	r2,-8(fp)
   3b038:	1090000c 	andi	r2,r2,16384
   3b03c:	1004c03a 	cmpne	r2,r2,zero
   3b040:	1000101e 	bne	r2,zero,3b084 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   3b044:	e0bffb17 	ldw	r2,-20(fp)
   3b048:	10c00a17 	ldw	r3,40(r2)
   3b04c:	e0bff717 	ldw	r2,-36(fp)
   3b050:	1880051e 	bne	r3,r2,3b068 <altera_avalon_jtag_uart_read+0x13c>
   3b054:	e0bffb17 	ldw	r2,-20(fp)
   3b058:	10c00917 	ldw	r3,36(r2)
   3b05c:	e0bffb17 	ldw	r2,-20(fp)
   3b060:	10800117 	ldw	r2,4(r2)
   3b064:	18bff736 	bltu	r3,r2,3b044 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   3b068:	e0bffb17 	ldw	r2,-20(fp)
   3b06c:	10c00a17 	ldw	r3,40(r2)
   3b070:	e0bff717 	ldw	r2,-36(fp)
   3b074:	18800326 	beq	r3,r2,3b084 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   3b078:	e0bffd17 	ldw	r2,-12(fp)
   3b07c:	10800048 	cmpgei	r2,r2,1
   3b080:	103fb51e 	bne	r2,zero,3af58 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   3b084:	e0fffa17 	ldw	r3,-24(fp)
   3b088:	e0bffc17 	ldw	r2,-16(fp)
   3b08c:	18801926 	beq	r3,r2,3b0f4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3b090:	0005303a 	rdctl	r2,status
   3b094:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3b098:	e0fff517 	ldw	r3,-44(fp)
   3b09c:	00bfff84 	movi	r2,-2
   3b0a0:	1884703a 	and	r2,r3,r2
   3b0a4:	1001703a 	wrctl	status,r2
  
  return context;
   3b0a8:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   3b0ac:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   3b0b0:	e0bffb17 	ldw	r2,-20(fp)
   3b0b4:	10800817 	ldw	r2,32(r2)
   3b0b8:	10c00054 	ori	r3,r2,1
   3b0bc:	e0bffb17 	ldw	r2,-20(fp)
   3b0c0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   3b0c4:	e0bffb17 	ldw	r2,-20(fp)
   3b0c8:	10800017 	ldw	r2,0(r2)
   3b0cc:	11000104 	addi	r4,r2,4
   3b0d0:	e0bffb17 	ldw	r2,-20(fp)
   3b0d4:	10800817 	ldw	r2,32(r2)
   3b0d8:	1007883a 	mov	r3,r2
   3b0dc:	2005883a 	mov	r2,r4
   3b0e0:	10c00035 	stwio	r3,0(r2)
   3b0e4:	e0bff917 	ldw	r2,-28(fp)
   3b0e8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3b0ec:	e0bff417 	ldw	r2,-48(fp)
   3b0f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   3b0f4:	e0fffa17 	ldw	r3,-24(fp)
   3b0f8:	e0bffc17 	ldw	r2,-16(fp)
   3b0fc:	18800526 	beq	r3,r2,3b114 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   3b100:	e0fffa17 	ldw	r3,-24(fp)
   3b104:	e0bffc17 	ldw	r2,-16(fp)
   3b108:	1887c83a 	sub	r3,r3,r2
   3b10c:	e0ffff15 	stw	r3,-4(fp)
   3b110:	00000906 	br	3b138 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   3b114:	e0bffe17 	ldw	r2,-8(fp)
   3b118:	1090000c 	andi	r2,r2,16384
   3b11c:	1005003a 	cmpeq	r2,r2,zero
   3b120:	1000031e 	bne	r2,zero,3b130 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   3b124:	00bffd44 	movi	r2,-11
   3b128:	e0bfff15 	stw	r2,-4(fp)
   3b12c:	00000206 	br	3b138 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   3b130:	00bffec4 	movi	r2,-5
   3b134:	e0bfff15 	stw	r2,-4(fp)
   3b138:	e0bfff17 	ldw	r2,-4(fp)
}
   3b13c:	e037883a 	mov	sp,fp
   3b140:	dfc00117 	ldw	ra,4(sp)
   3b144:	df000017 	ldw	fp,0(sp)
   3b148:	dec00204 	addi	sp,sp,8
   3b14c:	f800283a 	ret

0003b150 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   3b150:	defff204 	addi	sp,sp,-56
   3b154:	dfc00d15 	stw	ra,52(sp)
   3b158:	df000c15 	stw	fp,48(sp)
   3b15c:	df000c04 	addi	fp,sp,48
   3b160:	e13ffb15 	stw	r4,-20(fp)
   3b164:	e17ffc15 	stw	r5,-16(fp)
   3b168:	e1bffd15 	stw	r6,-12(fp)
   3b16c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   3b170:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   3b174:	e0bffc17 	ldw	r2,-16(fp)
   3b178:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   3b17c:	00003a06 	br	3b268 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   3b180:	e0bffb17 	ldw	r2,-20(fp)
   3b184:	10800c17 	ldw	r2,48(r2)
   3b188:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   3b18c:	e0bffb17 	ldw	r2,-20(fp)
   3b190:	10800d17 	ldw	r2,52(r2)
   3b194:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   3b198:	e0fffa17 	ldw	r3,-24(fp)
   3b19c:	e0bff917 	ldw	r2,-28(fp)
   3b1a0:	1880062e 	bgeu	r3,r2,3b1bc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   3b1a4:	e0fff917 	ldw	r3,-28(fp)
   3b1a8:	e0bffa17 	ldw	r2,-24(fp)
   3b1ac:	1885c83a 	sub	r2,r3,r2
   3b1b0:	10bfffc4 	addi	r2,r2,-1
   3b1b4:	e0bff815 	stw	r2,-32(fp)
   3b1b8:	00000c06 	br	3b1ec <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   3b1bc:	e0bff917 	ldw	r2,-28(fp)
   3b1c0:	1005003a 	cmpeq	r2,r2,zero
   3b1c4:	1000051e 	bne	r2,zero,3b1dc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   3b1c8:	00820004 	movi	r2,2048
   3b1cc:	e0fffa17 	ldw	r3,-24(fp)
   3b1d0:	10c5c83a 	sub	r2,r2,r3
   3b1d4:	e0bff815 	stw	r2,-32(fp)
   3b1d8:	00000406 	br	3b1ec <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   3b1dc:	0081ffc4 	movi	r2,2047
   3b1e0:	e0fffa17 	ldw	r3,-24(fp)
   3b1e4:	10c5c83a 	sub	r2,r2,r3
   3b1e8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   3b1ec:	e0bff817 	ldw	r2,-32(fp)
   3b1f0:	1005003a 	cmpeq	r2,r2,zero
   3b1f4:	10001f1e 	bne	r2,zero,3b274 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   3b1f8:	e0fffd17 	ldw	r3,-12(fp)
   3b1fc:	e0bff817 	ldw	r2,-32(fp)
   3b200:	1880022e 	bgeu	r3,r2,3b20c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   3b204:	e0bffd17 	ldw	r2,-12(fp)
   3b208:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   3b20c:	e0bffb17 	ldw	r2,-20(fp)
   3b210:	10c20e04 	addi	r3,r2,2104
   3b214:	e0bffa17 	ldw	r2,-24(fp)
   3b218:	1885883a 	add	r2,r3,r2
   3b21c:	e0fffc17 	ldw	r3,-16(fp)
   3b220:	1009883a 	mov	r4,r2
   3b224:	180b883a 	mov	r5,r3
   3b228:	e1bff817 	ldw	r6,-32(fp)
   3b22c:	00359900 	call	35990 <memcpy>
      ptr   += n;
   3b230:	e0fff817 	ldw	r3,-32(fp)
   3b234:	e0bffc17 	ldw	r2,-16(fp)
   3b238:	10c5883a 	add	r2,r2,r3
   3b23c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   3b240:	e0fffd17 	ldw	r3,-12(fp)
   3b244:	e0bff817 	ldw	r2,-32(fp)
   3b248:	1885c83a 	sub	r2,r3,r2
   3b24c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3b250:	e0fffa17 	ldw	r3,-24(fp)
   3b254:	e0bff817 	ldw	r2,-32(fp)
   3b258:	1885883a 	add	r2,r3,r2
   3b25c:	10c1ffcc 	andi	r3,r2,2047
   3b260:	e0bffb17 	ldw	r2,-20(fp)
   3b264:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   3b268:	e0bffd17 	ldw	r2,-12(fp)
   3b26c:	10800048 	cmpgei	r2,r2,1
   3b270:	103fc31e 	bne	r2,zero,3b180 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3b274:	0005303a 	rdctl	r2,status
   3b278:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3b27c:	e0fff517 	ldw	r3,-44(fp)
   3b280:	00bfff84 	movi	r2,-2
   3b284:	1884703a 	and	r2,r3,r2
   3b288:	1001703a 	wrctl	status,r2
  
  return context;
   3b28c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   3b290:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   3b294:	e0bffb17 	ldw	r2,-20(fp)
   3b298:	10800817 	ldw	r2,32(r2)
   3b29c:	10c00094 	ori	r3,r2,2
   3b2a0:	e0bffb17 	ldw	r2,-20(fp)
   3b2a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   3b2a8:	e0bffb17 	ldw	r2,-20(fp)
   3b2ac:	10800017 	ldw	r2,0(r2)
   3b2b0:	11000104 	addi	r4,r2,4
   3b2b4:	e0bffb17 	ldw	r2,-20(fp)
   3b2b8:	10800817 	ldw	r2,32(r2)
   3b2bc:	1007883a 	mov	r3,r2
   3b2c0:	2005883a 	mov	r2,r4
   3b2c4:	10c00035 	stwio	r3,0(r2)
   3b2c8:	e0bff717 	ldw	r2,-36(fp)
   3b2cc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3b2d0:	e0bff417 	ldw	r2,-48(fp)
   3b2d4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   3b2d8:	e0bffd17 	ldw	r2,-12(fp)
   3b2dc:	10800050 	cmplti	r2,r2,1
   3b2e0:	1000111e 	bne	r2,zero,3b328 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   3b2e4:	e0bffe17 	ldw	r2,-8(fp)
   3b2e8:	1090000c 	andi	r2,r2,16384
   3b2ec:	1004c03a 	cmpne	r2,r2,zero
   3b2f0:	1000101e 	bne	r2,zero,3b334 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   3b2f4:	e0bffb17 	ldw	r2,-20(fp)
   3b2f8:	10c00d17 	ldw	r3,52(r2)
   3b2fc:	e0bff917 	ldw	r2,-28(fp)
   3b300:	1880051e 	bne	r3,r2,3b318 <altera_avalon_jtag_uart_write+0x1c8>
   3b304:	e0bffb17 	ldw	r2,-20(fp)
   3b308:	10c00917 	ldw	r3,36(r2)
   3b30c:	e0bffb17 	ldw	r2,-20(fp)
   3b310:	10800117 	ldw	r2,4(r2)
   3b314:	18bff736 	bltu	r3,r2,3b2f4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   3b318:	e0bffb17 	ldw	r2,-20(fp)
   3b31c:	10c00d17 	ldw	r3,52(r2)
   3b320:	e0bff917 	ldw	r2,-28(fp)
   3b324:	18800326 	beq	r3,r2,3b334 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   3b328:	e0bffd17 	ldw	r2,-12(fp)
   3b32c:	10800048 	cmpgei	r2,r2,1
   3b330:	103fcd1e 	bne	r2,zero,3b268 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   3b334:	e0fffc17 	ldw	r3,-16(fp)
   3b338:	e0bff617 	ldw	r2,-40(fp)
   3b33c:	18800526 	beq	r3,r2,3b354 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   3b340:	e0fffc17 	ldw	r3,-16(fp)
   3b344:	e0bff617 	ldw	r2,-40(fp)
   3b348:	1887c83a 	sub	r3,r3,r2
   3b34c:	e0ffff15 	stw	r3,-4(fp)
   3b350:	00000906 	br	3b378 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   3b354:	e0bffe17 	ldw	r2,-8(fp)
   3b358:	1090000c 	andi	r2,r2,16384
   3b35c:	1005003a 	cmpeq	r2,r2,zero
   3b360:	1000031e 	bne	r2,zero,3b370 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   3b364:	00bffd44 	movi	r2,-11
   3b368:	e0bfff15 	stw	r2,-4(fp)
   3b36c:	00000206 	br	3b378 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   3b370:	00bffec4 	movi	r2,-5
   3b374:	e0bfff15 	stw	r2,-4(fp)
   3b378:	e0bfff17 	ldw	r2,-4(fp)
}
   3b37c:	e037883a 	mov	sp,fp
   3b380:	dfc00117 	ldw	ra,4(sp)
   3b384:	df000017 	ldw	fp,0(sp)
   3b388:	dec00204 	addi	sp,sp,8
   3b38c:	f800283a 	ret

0003b390 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   3b390:	defffa04 	addi	sp,sp,-24
   3b394:	dfc00515 	stw	ra,20(sp)
   3b398:	df000415 	stw	fp,16(sp)
   3b39c:	df000404 	addi	fp,sp,16
   3b3a0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   3b3a4:	e0bfff17 	ldw	r2,-4(fp)
   3b3a8:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   3b3ac:	e0bfff17 	ldw	r2,-4(fp)
   3b3b0:	10800104 	addi	r2,r2,4
   3b3b4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3b3b8:	0005303a 	rdctl	r2,status
   3b3bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3b3c0:	e0fffd17 	ldw	r3,-12(fp)
   3b3c4:	00bfff84 	movi	r2,-2
   3b3c8:	1884703a 	and	r2,r3,r2
   3b3cc:	1001703a 	wrctl	status,r2
  
  return context;
   3b3d0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   3b3d4:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   3b3d8:	003bf700 	call	3bf70 <alt_tick>
   3b3dc:	e0bffe17 	ldw	r2,-8(fp)
   3b3e0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3b3e4:	e0bffc17 	ldw	r2,-16(fp)
   3b3e8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   3b3ec:	e037883a 	mov	sp,fp
   3b3f0:	dfc00117 	ldw	ra,4(sp)
   3b3f4:	df000017 	ldw	fp,0(sp)
   3b3f8:	dec00204 	addi	sp,sp,8
   3b3fc:	f800283a 	ret

0003b400 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   3b400:	defff804 	addi	sp,sp,-32
   3b404:	dfc00715 	stw	ra,28(sp)
   3b408:	df000615 	stw	fp,24(sp)
   3b40c:	df000604 	addi	fp,sp,24
   3b410:	e13ffc15 	stw	r4,-16(fp)
   3b414:	e17ffd15 	stw	r5,-12(fp)
   3b418:	e1bffe15 	stw	r6,-8(fp)
   3b41c:	e1ffff15 	stw	r7,-4(fp)
   3b420:	e0bfff17 	ldw	r2,-4(fp)
   3b424:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   3b428:	00800074 	movhi	r2,1
   3b42c:	10878d04 	addi	r2,r2,7732
   3b430:	10800017 	ldw	r2,0(r2)
   3b434:	1004c03a 	cmpne	r2,r2,zero
   3b438:	1000041e 	bne	r2,zero,3b44c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   3b43c:	00c00074 	movhi	r3,1
   3b440:	18c78d04 	addi	r3,r3,7732
   3b444:	e0bffb17 	ldw	r2,-20(fp)
   3b448:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   3b44c:	e0bffc17 	ldw	r2,-16(fp)
   3b450:	10800104 	addi	r2,r2,4
   3b454:	1007883a 	mov	r3,r2
   3b458:	008001c4 	movi	r2,7
   3b45c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   3b460:	d8000015 	stw	zero,0(sp)
   3b464:	e13ffd17 	ldw	r4,-12(fp)
   3b468:	e17ffe17 	ldw	r5,-8(fp)
   3b46c:	01800134 	movhi	r6,4
   3b470:	31ace404 	addi	r6,r6,-19568
   3b474:	e1fffc17 	ldw	r7,-16(fp)
   3b478:	003b80c0 	call	3b80c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   3b47c:	e037883a 	mov	sp,fp
   3b480:	dfc00117 	ldw	ra,4(sp)
   3b484:	df000017 	ldw	fp,0(sp)
   3b488:	dec00204 	addi	sp,sp,8
   3b48c:	f800283a 	ret

0003b490 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   3b490:	defff404 	addi	sp,sp,-48
   3b494:	df000b15 	stw	fp,44(sp)
   3b498:	df000b04 	addi	fp,sp,44
   3b49c:	e13ffb15 	stw	r4,-20(fp)
   3b4a0:	e17ffc15 	stw	r5,-16(fp)
   3b4a4:	e1bffd15 	stw	r6,-12(fp)
   3b4a8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   3b4ac:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   3b4b0:	00800074 	movhi	r2,1
   3b4b4:	10878d04 	addi	r2,r2,7732
   3b4b8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   3b4bc:	1005003a 	cmpeq	r2,r2,zero
   3b4c0:	1000411e 	bne	r2,zero,3b5c8 <alt_alarm_start+0x138>
  {
    if (alarm)
   3b4c4:	e0bffb17 	ldw	r2,-20(fp)
   3b4c8:	1005003a 	cmpeq	r2,r2,zero
   3b4cc:	10003b1e 	bne	r2,zero,3b5bc <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   3b4d0:	e0fffb17 	ldw	r3,-20(fp)
   3b4d4:	e0bffd17 	ldw	r2,-12(fp)
   3b4d8:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   3b4dc:	e0fffb17 	ldw	r3,-20(fp)
   3b4e0:	e0bffe17 	ldw	r2,-8(fp)
   3b4e4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3b4e8:	0005303a 	rdctl	r2,status
   3b4ec:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3b4f0:	e0fff817 	ldw	r3,-32(fp)
   3b4f4:	00bfff84 	movi	r2,-2
   3b4f8:	1884703a 	and	r2,r3,r2
   3b4fc:	1001703a 	wrctl	status,r2
  
  return context;
   3b500:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   3b504:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   3b508:	00800074 	movhi	r2,1
   3b50c:	10878e04 	addi	r2,r2,7736
   3b510:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   3b514:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   3b518:	e0fffc17 	ldw	r3,-16(fp)
   3b51c:	e0bff917 	ldw	r2,-28(fp)
   3b520:	1885883a 	add	r2,r3,r2
   3b524:	10c00044 	addi	r3,r2,1
   3b528:	e0bffb17 	ldw	r2,-20(fp)
   3b52c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   3b530:	e0bffb17 	ldw	r2,-20(fp)
   3b534:	10c00217 	ldw	r3,8(r2)
   3b538:	e0bff917 	ldw	r2,-28(fp)
   3b53c:	1880042e 	bgeu	r3,r2,3b550 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   3b540:	e0fffb17 	ldw	r3,-20(fp)
   3b544:	00800044 	movi	r2,1
   3b548:	18800405 	stb	r2,16(r3)
   3b54c:	00000206 	br	3b558 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   3b550:	e0bffb17 	ldw	r2,-20(fp)
   3b554:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   3b558:	e0fffb17 	ldw	r3,-20(fp)
   3b55c:	00800074 	movhi	r2,1
   3b560:	10877b04 	addi	r2,r2,7660
   3b564:	e0bff615 	stw	r2,-40(fp)
   3b568:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   3b56c:	e0fff717 	ldw	r3,-36(fp)
   3b570:	e0bff617 	ldw	r2,-40(fp)
   3b574:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   3b578:	e0bff617 	ldw	r2,-40(fp)
   3b57c:	10c00017 	ldw	r3,0(r2)
   3b580:	e0bff717 	ldw	r2,-36(fp)
   3b584:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   3b588:	e0bff617 	ldw	r2,-40(fp)
   3b58c:	10c00017 	ldw	r3,0(r2)
   3b590:	e0bff717 	ldw	r2,-36(fp)
   3b594:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   3b598:	e0fff617 	ldw	r3,-40(fp)
   3b59c:	e0bff717 	ldw	r2,-36(fp)
   3b5a0:	18800015 	stw	r2,0(r3)
   3b5a4:	e0bffa17 	ldw	r2,-24(fp)
   3b5a8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3b5ac:	e0bff517 	ldw	r2,-44(fp)
   3b5b0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   3b5b4:	e03fff15 	stw	zero,-4(fp)
   3b5b8:	00000506 	br	3b5d0 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   3b5bc:	00bffa84 	movi	r2,-22
   3b5c0:	e0bfff15 	stw	r2,-4(fp)
   3b5c4:	00000206 	br	3b5d0 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   3b5c8:	00bfde84 	movi	r2,-134
   3b5cc:	e0bfff15 	stw	r2,-4(fp)
   3b5d0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   3b5d4:	e037883a 	mov	sp,fp
   3b5d8:	df000017 	ldw	fp,0(sp)
   3b5dc:	dec00104 	addi	sp,sp,4
   3b5e0:	f800283a 	ret

0003b5e4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   3b5e4:	deffff04 	addi	sp,sp,-4
   3b5e8:	df000015 	stw	fp,0(sp)
   3b5ec:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   3b5f0:	e037883a 	mov	sp,fp
   3b5f4:	df000017 	ldw	fp,0(sp)
   3b5f8:	dec00104 	addi	sp,sp,4
   3b5fc:	f800283a 	ret

0003b600 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   3b600:	defff904 	addi	sp,sp,-28
   3b604:	dfc00615 	stw	ra,24(sp)
   3b608:	df000515 	stw	fp,20(sp)
   3b60c:	df000504 	addi	fp,sp,20
   3b610:	e13ffd15 	stw	r4,-12(fp)
   3b614:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   3b618:	e0bffd17 	ldw	r2,-12(fp)
   3b61c:	1005003a 	cmpeq	r2,r2,zero
   3b620:	1000041e 	bne	r2,zero,3b634 <alt_dev_llist_insert+0x34>
   3b624:	e0bffd17 	ldw	r2,-12(fp)
   3b628:	10800217 	ldw	r2,8(r2)
   3b62c:	1004c03a 	cmpne	r2,r2,zero
   3b630:	1000071e 	bne	r2,zero,3b650 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   3b634:	003b6b40 	call	3b6b4 <alt_get_errno>
   3b638:	1007883a 	mov	r3,r2
   3b63c:	00800584 	movi	r2,22
   3b640:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   3b644:	00bffa84 	movi	r2,-22
   3b648:	e0bfff15 	stw	r2,-4(fp)
   3b64c:	00001306 	br	3b69c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   3b650:	e0fffd17 	ldw	r3,-12(fp)
   3b654:	e0bffe17 	ldw	r2,-8(fp)
   3b658:	e0bffb15 	stw	r2,-20(fp)
   3b65c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   3b660:	e0fffc17 	ldw	r3,-16(fp)
   3b664:	e0bffb17 	ldw	r2,-20(fp)
   3b668:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   3b66c:	e0bffb17 	ldw	r2,-20(fp)
   3b670:	10c00017 	ldw	r3,0(r2)
   3b674:	e0bffc17 	ldw	r2,-16(fp)
   3b678:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   3b67c:	e0bffb17 	ldw	r2,-20(fp)
   3b680:	10c00017 	ldw	r3,0(r2)
   3b684:	e0bffc17 	ldw	r2,-16(fp)
   3b688:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   3b68c:	e0fffb17 	ldw	r3,-20(fp)
   3b690:	e0bffc17 	ldw	r2,-16(fp)
   3b694:	18800015 	stw	r2,0(r3)

  return 0;  
   3b698:	e03fff15 	stw	zero,-4(fp)
   3b69c:	e0bfff17 	ldw	r2,-4(fp)
}
   3b6a0:	e037883a 	mov	sp,fp
   3b6a4:	dfc00117 	ldw	ra,4(sp)
   3b6a8:	df000017 	ldw	fp,0(sp)
   3b6ac:	dec00204 	addi	sp,sp,8
   3b6b0:	f800283a 	ret

0003b6b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3b6b4:	defffd04 	addi	sp,sp,-12
   3b6b8:	dfc00215 	stw	ra,8(sp)
   3b6bc:	df000115 	stw	fp,4(sp)
   3b6c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   3b6c4:	00800074 	movhi	r2,1
   3b6c8:	10877804 	addi	r2,r2,7648
   3b6cc:	10800017 	ldw	r2,0(r2)
   3b6d0:	1005003a 	cmpeq	r2,r2,zero
   3b6d4:	1000061e 	bne	r2,zero,3b6f0 <alt_get_errno+0x3c>
   3b6d8:	00800074 	movhi	r2,1
   3b6dc:	10877804 	addi	r2,r2,7648
   3b6e0:	10800017 	ldw	r2,0(r2)
   3b6e4:	103ee83a 	callr	r2
   3b6e8:	e0bfff15 	stw	r2,-4(fp)
   3b6ec:	00000306 	br	3b6fc <alt_get_errno+0x48>
   3b6f0:	00800074 	movhi	r2,1
   3b6f4:	10878804 	addi	r2,r2,7712
   3b6f8:	e0bfff15 	stw	r2,-4(fp)
   3b6fc:	e0bfff17 	ldw	r2,-4(fp)
}
   3b700:	e037883a 	mov	sp,fp
   3b704:	dfc00117 	ldw	ra,4(sp)
   3b708:	df000017 	ldw	fp,0(sp)
   3b70c:	dec00204 	addi	sp,sp,8
   3b710:	f800283a 	ret

0003b714 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   3b714:	defffd04 	addi	sp,sp,-12
   3b718:	dfc00215 	stw	ra,8(sp)
   3b71c:	df000115 	stw	fp,4(sp)
   3b720:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   3b724:	00bfff04 	movi	r2,-4
   3b728:	00c00134 	movhi	r3,4
   3b72c:	18f1e904 	addi	r3,r3,-14428
   3b730:	1885883a 	add	r2,r3,r2
   3b734:	e0bfff15 	stw	r2,-4(fp)
   3b738:	00000606 	br	3b754 <_do_ctors+0x40>
        (*ctor) (); 
   3b73c:	e0bfff17 	ldw	r2,-4(fp)
   3b740:	10800017 	ldw	r2,0(r2)
   3b744:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   3b748:	e0bfff17 	ldw	r2,-4(fp)
   3b74c:	10bfff04 	addi	r2,r2,-4
   3b750:	e0bfff15 	stw	r2,-4(fp)
   3b754:	e0ffff17 	ldw	r3,-4(fp)
   3b758:	00800134 	movhi	r2,4
   3b75c:	10b1e804 	addi	r2,r2,-14432
   3b760:	18bff62e 	bgeu	r3,r2,3b73c <_do_ctors+0x28>
        (*ctor) (); 
}
   3b764:	e037883a 	mov	sp,fp
   3b768:	dfc00117 	ldw	ra,4(sp)
   3b76c:	df000017 	ldw	fp,0(sp)
   3b770:	dec00204 	addi	sp,sp,8
   3b774:	f800283a 	ret

0003b778 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   3b778:	defffd04 	addi	sp,sp,-12
   3b77c:	dfc00215 	stw	ra,8(sp)
   3b780:	df000115 	stw	fp,4(sp)
   3b784:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   3b788:	00bfff04 	movi	r2,-4
   3b78c:	00c00134 	movhi	r3,4
   3b790:	18f1e904 	addi	r3,r3,-14428
   3b794:	1885883a 	add	r2,r3,r2
   3b798:	e0bfff15 	stw	r2,-4(fp)
   3b79c:	00000606 	br	3b7b8 <_do_dtors+0x40>
        (*dtor) (); 
   3b7a0:	e0bfff17 	ldw	r2,-4(fp)
   3b7a4:	10800017 	ldw	r2,0(r2)
   3b7a8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   3b7ac:	e0bfff17 	ldw	r2,-4(fp)
   3b7b0:	10bfff04 	addi	r2,r2,-4
   3b7b4:	e0bfff15 	stw	r2,-4(fp)
   3b7b8:	e0ffff17 	ldw	r3,-4(fp)
   3b7bc:	00800134 	movhi	r2,4
   3b7c0:	10b1e904 	addi	r2,r2,-14428
   3b7c4:	18bff62e 	bgeu	r3,r2,3b7a0 <_do_dtors+0x28>
        (*dtor) (); 
}
   3b7c8:	e037883a 	mov	sp,fp
   3b7cc:	dfc00117 	ldw	ra,4(sp)
   3b7d0:	df000017 	ldw	fp,0(sp)
   3b7d4:	dec00204 	addi	sp,sp,8
   3b7d8:	f800283a 	ret

0003b7dc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   3b7dc:	defffe04 	addi	sp,sp,-8
   3b7e0:	dfc00115 	stw	ra,4(sp)
   3b7e4:	df000015 	stw	fp,0(sp)
   3b7e8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   3b7ec:	0009883a 	mov	r4,zero
   3b7f0:	01440004 	movi	r5,4096
   3b7f4:	003c3080 	call	3c308 <alt_icache_flush>
#endif
}
   3b7f8:	e037883a 	mov	sp,fp
   3b7fc:	dfc00117 	ldw	ra,4(sp)
   3b800:	df000017 	ldw	fp,0(sp)
   3b804:	dec00204 	addi	sp,sp,8
   3b808:	f800283a 	ret

0003b80c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   3b80c:	defff904 	addi	sp,sp,-28
   3b810:	dfc00615 	stw	ra,24(sp)
   3b814:	df000515 	stw	fp,20(sp)
   3b818:	df000504 	addi	fp,sp,20
   3b81c:	e13ffc15 	stw	r4,-16(fp)
   3b820:	e17ffd15 	stw	r5,-12(fp)
   3b824:	e1bffe15 	stw	r6,-8(fp)
   3b828:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   3b82c:	e0800217 	ldw	r2,8(fp)
   3b830:	d8800015 	stw	r2,0(sp)
   3b834:	e13ffc17 	ldw	r4,-16(fp)
   3b838:	e17ffd17 	ldw	r5,-12(fp)
   3b83c:	e1bffe17 	ldw	r6,-8(fp)
   3b840:	e1ffff17 	ldw	r7,-4(fp)
   3b844:	003b9e00 	call	3b9e0 <alt_iic_isr_register>
}  
   3b848:	e037883a 	mov	sp,fp
   3b84c:	dfc00117 	ldw	ra,4(sp)
   3b850:	df000017 	ldw	fp,0(sp)
   3b854:	dec00204 	addi	sp,sp,8
   3b858:	f800283a 	ret

0003b85c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   3b85c:	defff904 	addi	sp,sp,-28
   3b860:	df000615 	stw	fp,24(sp)
   3b864:	df000604 	addi	fp,sp,24
   3b868:	e13ffe15 	stw	r4,-8(fp)
   3b86c:	e17fff15 	stw	r5,-4(fp)
   3b870:	e0bfff17 	ldw	r2,-4(fp)
   3b874:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3b878:	0005303a 	rdctl	r2,status
   3b87c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3b880:	e0fffb17 	ldw	r3,-20(fp)
   3b884:	00bfff84 	movi	r2,-2
   3b888:	1884703a 	and	r2,r3,r2
   3b88c:	1001703a 	wrctl	status,r2
  
  return context;
   3b890:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   3b894:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   3b898:	e0fffc17 	ldw	r3,-16(fp)
   3b89c:	00800044 	movi	r2,1
   3b8a0:	10c4983a 	sll	r2,r2,r3
   3b8a4:	1007883a 	mov	r3,r2
   3b8a8:	00800074 	movhi	r2,1
   3b8ac:	10878c04 	addi	r2,r2,7728
   3b8b0:	10800017 	ldw	r2,0(r2)
   3b8b4:	1886b03a 	or	r3,r3,r2
   3b8b8:	00800074 	movhi	r2,1
   3b8bc:	10878c04 	addi	r2,r2,7728
   3b8c0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   3b8c4:	00800074 	movhi	r2,1
   3b8c8:	10878c04 	addi	r2,r2,7728
   3b8cc:	10800017 	ldw	r2,0(r2)
   3b8d0:	100170fa 	wrctl	ienable,r2
   3b8d4:	e0bffd17 	ldw	r2,-12(fp)
   3b8d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3b8dc:	e0bffa17 	ldw	r2,-24(fp)
   3b8e0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   3b8e4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   3b8e8:	e037883a 	mov	sp,fp
   3b8ec:	df000017 	ldw	fp,0(sp)
   3b8f0:	dec00104 	addi	sp,sp,4
   3b8f4:	f800283a 	ret

0003b8f8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   3b8f8:	defff904 	addi	sp,sp,-28
   3b8fc:	df000615 	stw	fp,24(sp)
   3b900:	df000604 	addi	fp,sp,24
   3b904:	e13ffe15 	stw	r4,-8(fp)
   3b908:	e17fff15 	stw	r5,-4(fp)
   3b90c:	e0bfff17 	ldw	r2,-4(fp)
   3b910:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3b914:	0005303a 	rdctl	r2,status
   3b918:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3b91c:	e0fffb17 	ldw	r3,-20(fp)
   3b920:	00bfff84 	movi	r2,-2
   3b924:	1884703a 	and	r2,r3,r2
   3b928:	1001703a 	wrctl	status,r2
  
  return context;
   3b92c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   3b930:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   3b934:	e0fffc17 	ldw	r3,-16(fp)
   3b938:	00800044 	movi	r2,1
   3b93c:	10c4983a 	sll	r2,r2,r3
   3b940:	0084303a 	nor	r2,zero,r2
   3b944:	1007883a 	mov	r3,r2
   3b948:	00800074 	movhi	r2,1
   3b94c:	10878c04 	addi	r2,r2,7728
   3b950:	10800017 	ldw	r2,0(r2)
   3b954:	1886703a 	and	r3,r3,r2
   3b958:	00800074 	movhi	r2,1
   3b95c:	10878c04 	addi	r2,r2,7728
   3b960:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   3b964:	00800074 	movhi	r2,1
   3b968:	10878c04 	addi	r2,r2,7728
   3b96c:	10800017 	ldw	r2,0(r2)
   3b970:	100170fa 	wrctl	ienable,r2
   3b974:	e0bffd17 	ldw	r2,-12(fp)
   3b978:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3b97c:	e0bffa17 	ldw	r2,-24(fp)
   3b980:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   3b984:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   3b988:	e037883a 	mov	sp,fp
   3b98c:	df000017 	ldw	fp,0(sp)
   3b990:	dec00104 	addi	sp,sp,4
   3b994:	f800283a 	ret

0003b998 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   3b998:	defffc04 	addi	sp,sp,-16
   3b99c:	df000315 	stw	fp,12(sp)
   3b9a0:	df000304 	addi	fp,sp,12
   3b9a4:	e13ffe15 	stw	r4,-8(fp)
   3b9a8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   3b9ac:	000530fa 	rdctl	r2,ienable
   3b9b0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   3b9b4:	e0ffff17 	ldw	r3,-4(fp)
   3b9b8:	00800044 	movi	r2,1
   3b9bc:	10c4983a 	sll	r2,r2,r3
   3b9c0:	1007883a 	mov	r3,r2
   3b9c4:	e0bffd17 	ldw	r2,-12(fp)
   3b9c8:	1884703a 	and	r2,r3,r2
   3b9cc:	1004c03a 	cmpne	r2,r2,zero
}
   3b9d0:	e037883a 	mov	sp,fp
   3b9d4:	df000017 	ldw	fp,0(sp)
   3b9d8:	dec00104 	addi	sp,sp,4
   3b9dc:	f800283a 	ret

0003b9e0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   3b9e0:	defff404 	addi	sp,sp,-48
   3b9e4:	dfc00b15 	stw	ra,44(sp)
   3b9e8:	df000a15 	stw	fp,40(sp)
   3b9ec:	df000a04 	addi	fp,sp,40
   3b9f0:	e13ffb15 	stw	r4,-20(fp)
   3b9f4:	e17ffc15 	stw	r5,-16(fp)
   3b9f8:	e1bffd15 	stw	r6,-12(fp)
   3b9fc:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   3ba00:	00bffa84 	movi	r2,-22
   3ba04:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   3ba08:	e0bffc17 	ldw	r2,-16(fp)
   3ba0c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   3ba10:	e0bff917 	ldw	r2,-28(fp)
   3ba14:	10800808 	cmpgei	r2,r2,32
   3ba18:	1000291e 	bne	r2,zero,3bac0 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3ba1c:	0005303a 	rdctl	r2,status
   3ba20:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3ba24:	e0fff717 	ldw	r3,-36(fp)
   3ba28:	00bfff84 	movi	r2,-2
   3ba2c:	1884703a 	and	r2,r3,r2
   3ba30:	1001703a 	wrctl	status,r2
  
  return context;
   3ba34:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   3ba38:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   3ba3c:	e0bff917 	ldw	r2,-28(fp)
   3ba40:	00c00074 	movhi	r3,1
   3ba44:	18c79904 	addi	r3,r3,7780
   3ba48:	100490fa 	slli	r2,r2,3
   3ba4c:	10c7883a 	add	r3,r2,r3
   3ba50:	e0bffd17 	ldw	r2,-12(fp)
   3ba54:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   3ba58:	e0bff917 	ldw	r2,-28(fp)
   3ba5c:	00c00074 	movhi	r3,1
   3ba60:	18c79904 	addi	r3,r3,7780
   3ba64:	100490fa 	slli	r2,r2,3
   3ba68:	10c5883a 	add	r2,r2,r3
   3ba6c:	10c00104 	addi	r3,r2,4
   3ba70:	e0bffe17 	ldw	r2,-8(fp)
   3ba74:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   3ba78:	e0bffd17 	ldw	r2,-12(fp)
   3ba7c:	1005003a 	cmpeq	r2,r2,zero
   3ba80:	1000051e 	bne	r2,zero,3ba98 <alt_iic_isr_register+0xb8>
   3ba84:	e17ff917 	ldw	r5,-28(fp)
   3ba88:	e13ffb17 	ldw	r4,-20(fp)
   3ba8c:	003b85c0 	call	3b85c <alt_ic_irq_enable>
   3ba90:	e0bfff15 	stw	r2,-4(fp)
   3ba94:	00000406 	br	3baa8 <alt_iic_isr_register+0xc8>
   3ba98:	e17ff917 	ldw	r5,-28(fp)
   3ba9c:	e13ffb17 	ldw	r4,-20(fp)
   3baa0:	003b8f80 	call	3b8f8 <alt_ic_irq_disable>
   3baa4:	e0bfff15 	stw	r2,-4(fp)
   3baa8:	e0bfff17 	ldw	r2,-4(fp)
   3baac:	e0bffa15 	stw	r2,-24(fp)
   3bab0:	e0bff817 	ldw	r2,-32(fp)
   3bab4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3bab8:	e0bff617 	ldw	r2,-40(fp)
   3babc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   3bac0:	e0bffa17 	ldw	r2,-24(fp)
}
   3bac4:	e037883a 	mov	sp,fp
   3bac8:	dfc00117 	ldw	ra,4(sp)
   3bacc:	df000017 	ldw	fp,0(sp)
   3bad0:	dec00204 	addi	sp,sp,8
   3bad4:	f800283a 	ret

0003bad8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   3bad8:	defff904 	addi	sp,sp,-28
   3badc:	dfc00615 	stw	ra,24(sp)
   3bae0:	df000515 	stw	fp,20(sp)
   3bae4:	df000504 	addi	fp,sp,20
   3bae8:	e13ffc15 	stw	r4,-16(fp)
   3baec:	e17ffd15 	stw	r5,-12(fp)
   3baf0:	e1bffe15 	stw	r6,-8(fp)
   3baf4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   3baf8:	e13ffd17 	ldw	r4,-12(fp)
   3bafc:	e17ffe17 	ldw	r5,-8(fp)
   3bb00:	e1bfff17 	ldw	r6,-4(fp)
   3bb04:	003bcf00 	call	3bcf0 <open>
   3bb08:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   3bb0c:	e0bffb17 	ldw	r2,-20(fp)
   3bb10:	1004803a 	cmplt	r2,r2,zero
   3bb14:	10001c1e 	bne	r2,zero,3bb88 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   3bb18:	e0bffb17 	ldw	r2,-20(fp)
   3bb1c:	00c00074 	movhi	r3,1
   3bb20:	18c2f504 	addi	r3,r3,3028
   3bb24:	10800324 	muli	r2,r2,12
   3bb28:	10c5883a 	add	r2,r2,r3
   3bb2c:	10c00017 	ldw	r3,0(r2)
   3bb30:	e0bffc17 	ldw	r2,-16(fp)
   3bb34:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   3bb38:	e0bffb17 	ldw	r2,-20(fp)
   3bb3c:	00c00074 	movhi	r3,1
   3bb40:	18c2f504 	addi	r3,r3,3028
   3bb44:	10800324 	muli	r2,r2,12
   3bb48:	10c5883a 	add	r2,r2,r3
   3bb4c:	10800104 	addi	r2,r2,4
   3bb50:	10c00017 	ldw	r3,0(r2)
   3bb54:	e0bffc17 	ldw	r2,-16(fp)
   3bb58:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   3bb5c:	e0bffb17 	ldw	r2,-20(fp)
   3bb60:	00c00074 	movhi	r3,1
   3bb64:	18c2f504 	addi	r3,r3,3028
   3bb68:	10800324 	muli	r2,r2,12
   3bb6c:	10c5883a 	add	r2,r2,r3
   3bb70:	10800204 	addi	r2,r2,8
   3bb74:	10c00017 	ldw	r3,0(r2)
   3bb78:	e0bffc17 	ldw	r2,-16(fp)
   3bb7c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   3bb80:	e13ffb17 	ldw	r4,-20(fp)
   3bb84:	003a5800 	call	3a580 <alt_release_fd>
  }
} 
   3bb88:	e037883a 	mov	sp,fp
   3bb8c:	dfc00117 	ldw	ra,4(sp)
   3bb90:	df000017 	ldw	fp,0(sp)
   3bb94:	dec00204 	addi	sp,sp,8
   3bb98:	f800283a 	ret

0003bb9c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   3bb9c:	defffb04 	addi	sp,sp,-20
   3bba0:	dfc00415 	stw	ra,16(sp)
   3bba4:	df000315 	stw	fp,12(sp)
   3bba8:	df000304 	addi	fp,sp,12
   3bbac:	e13ffd15 	stw	r4,-12(fp)
   3bbb0:	e17ffe15 	stw	r5,-8(fp)
   3bbb4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   3bbb8:	01000074 	movhi	r4,1
   3bbbc:	2102f804 	addi	r4,r4,3040
   3bbc0:	e17ffd17 	ldw	r5,-12(fp)
   3bbc4:	01800044 	movi	r6,1
   3bbc8:	01c07fc4 	movi	r7,511
   3bbcc:	003bad80 	call	3bad8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   3bbd0:	01000074 	movhi	r4,1
   3bbd4:	2102f504 	addi	r4,r4,3028
   3bbd8:	e17ffe17 	ldw	r5,-8(fp)
   3bbdc:	000d883a 	mov	r6,zero
   3bbe0:	01c07fc4 	movi	r7,511
   3bbe4:	003bad80 	call	3bad8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   3bbe8:	01000074 	movhi	r4,1
   3bbec:	2102fb04 	addi	r4,r4,3052
   3bbf0:	e17fff17 	ldw	r5,-4(fp)
   3bbf4:	01800044 	movi	r6,1
   3bbf8:	01c07fc4 	movi	r7,511
   3bbfc:	003bad80 	call	3bad8 <alt_open_fd>
}  
   3bc00:	e037883a 	mov	sp,fp
   3bc04:	dfc00117 	ldw	ra,4(sp)
   3bc08:	df000017 	ldw	fp,0(sp)
   3bc0c:	dec00204 	addi	sp,sp,8
   3bc10:	f800283a 	ret

0003bc14 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   3bc14:	defffc04 	addi	sp,sp,-16
   3bc18:	df000315 	stw	fp,12(sp)
   3bc1c:	df000304 	addi	fp,sp,12
   3bc20:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   3bc24:	e0bffe17 	ldw	r2,-8(fp)
   3bc28:	10800217 	ldw	r2,8(r2)
   3bc2c:	10d00034 	orhi	r3,r2,16384
   3bc30:	e0bffe17 	ldw	r2,-8(fp)
   3bc34:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   3bc38:	e03ffd15 	stw	zero,-12(fp)
   3bc3c:	00002006 	br	3bcc0 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   3bc40:	e0bffd17 	ldw	r2,-12(fp)
   3bc44:	00c00074 	movhi	r3,1
   3bc48:	18c2f504 	addi	r3,r3,3028
   3bc4c:	10800324 	muli	r2,r2,12
   3bc50:	10c5883a 	add	r2,r2,r3
   3bc54:	10c00017 	ldw	r3,0(r2)
   3bc58:	e0bffe17 	ldw	r2,-8(fp)
   3bc5c:	10800017 	ldw	r2,0(r2)
   3bc60:	1880141e 	bne	r3,r2,3bcb4 <alt_file_locked+0xa0>
   3bc64:	e0bffd17 	ldw	r2,-12(fp)
   3bc68:	00c00074 	movhi	r3,1
   3bc6c:	18c2f504 	addi	r3,r3,3028
   3bc70:	10800324 	muli	r2,r2,12
   3bc74:	10c5883a 	add	r2,r2,r3
   3bc78:	10800204 	addi	r2,r2,8
   3bc7c:	10800017 	ldw	r2,0(r2)
   3bc80:	1004403a 	cmpge	r2,r2,zero
   3bc84:	10000b1e 	bne	r2,zero,3bcb4 <alt_file_locked+0xa0>
   3bc88:	e0bffd17 	ldw	r2,-12(fp)
   3bc8c:	10800324 	muli	r2,r2,12
   3bc90:	1007883a 	mov	r3,r2
   3bc94:	00800074 	movhi	r2,1
   3bc98:	1082f504 	addi	r2,r2,3028
   3bc9c:	1887883a 	add	r3,r3,r2
   3bca0:	e0bffe17 	ldw	r2,-8(fp)
   3bca4:	18800326 	beq	r3,r2,3bcb4 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   3bca8:	00bffcc4 	movi	r2,-13
   3bcac:	e0bfff15 	stw	r2,-4(fp)
   3bcb0:	00000a06 	br	3bcdc <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   3bcb4:	e0bffd17 	ldw	r2,-12(fp)
   3bcb8:	10800044 	addi	r2,r2,1
   3bcbc:	e0bffd15 	stw	r2,-12(fp)
   3bcc0:	00800074 	movhi	r2,1
   3bcc4:	10877704 	addi	r2,r2,7644
   3bcc8:	10800017 	ldw	r2,0(r2)
   3bccc:	1007883a 	mov	r3,r2
   3bcd0:	e0bffd17 	ldw	r2,-12(fp)
   3bcd4:	18bfda2e 	bgeu	r3,r2,3bc40 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   3bcd8:	e03fff15 	stw	zero,-4(fp)
   3bcdc:	e0bfff17 	ldw	r2,-4(fp)
}
   3bce0:	e037883a 	mov	sp,fp
   3bce4:	df000017 	ldw	fp,0(sp)
   3bce8:	dec00104 	addi	sp,sp,4
   3bcec:	f800283a 	ret

0003bcf0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   3bcf0:	defff404 	addi	sp,sp,-48
   3bcf4:	dfc00b15 	stw	ra,44(sp)
   3bcf8:	df000a15 	stw	fp,40(sp)
   3bcfc:	df000a04 	addi	fp,sp,40
   3bd00:	e13ffb15 	stw	r4,-20(fp)
   3bd04:	e17ffc15 	stw	r5,-16(fp)
   3bd08:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   3bd0c:	00bfffc4 	movi	r2,-1
   3bd10:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   3bd14:	00bffb44 	movi	r2,-19
   3bd18:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   3bd1c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   3bd20:	e13ffb17 	ldw	r4,-20(fp)
   3bd24:	01400074 	movhi	r5,1
   3bd28:	29477504 	addi	r5,r5,7636
   3bd2c:	003c09c0 	call	3c09c <alt_find_dev>
   3bd30:	e0bffa15 	stw	r2,-24(fp)
   3bd34:	e0bffa17 	ldw	r2,-24(fp)
   3bd38:	1004c03a 	cmpne	r2,r2,zero
   3bd3c:	1000051e 	bne	r2,zero,3bd54 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   3bd40:	e13ffb17 	ldw	r4,-20(fp)
   3bd44:	003c1300 	call	3c130 <alt_find_file>
   3bd48:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   3bd4c:	00800044 	movi	r2,1
   3bd50:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   3bd54:	e0bffa17 	ldw	r2,-24(fp)
   3bd58:	1005003a 	cmpeq	r2,r2,zero
   3bd5c:	1000301e 	bne	r2,zero,3be20 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   3bd60:	e13ffa17 	ldw	r4,-24(fp)
   3bd64:	003c2500 	call	3c250 <alt_get_fd>
   3bd68:	e0bff815 	stw	r2,-32(fp)
   3bd6c:	e0bff817 	ldw	r2,-32(fp)
   3bd70:	1004403a 	cmpge	r2,r2,zero
   3bd74:	1000031e 	bne	r2,zero,3bd84 <open+0x94>
    {
      status = index;
   3bd78:	e0bff817 	ldw	r2,-32(fp)
   3bd7c:	e0bff715 	stw	r2,-36(fp)
   3bd80:	00002906 	br	3be28 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   3bd84:	e0bff817 	ldw	r2,-32(fp)
   3bd88:	10800324 	muli	r2,r2,12
   3bd8c:	1007883a 	mov	r3,r2
   3bd90:	00800074 	movhi	r2,1
   3bd94:	1082f504 	addi	r2,r2,3028
   3bd98:	1885883a 	add	r2,r3,r2
   3bd9c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   3bda0:	e0fffc17 	ldw	r3,-16(fp)
   3bda4:	00900034 	movhi	r2,16384
   3bda8:	10bfffc4 	addi	r2,r2,-1
   3bdac:	1886703a 	and	r3,r3,r2
   3bdb0:	e0bff917 	ldw	r2,-28(fp)
   3bdb4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   3bdb8:	e0bff617 	ldw	r2,-40(fp)
   3bdbc:	1004c03a 	cmpne	r2,r2,zero
   3bdc0:	1000061e 	bne	r2,zero,3bddc <open+0xec>
   3bdc4:	e13ff917 	ldw	r4,-28(fp)
   3bdc8:	003bc140 	call	3bc14 <alt_file_locked>
   3bdcc:	e0bff715 	stw	r2,-36(fp)
   3bdd0:	e0bff717 	ldw	r2,-36(fp)
   3bdd4:	1004803a 	cmplt	r2,r2,zero
   3bdd8:	1000131e 	bne	r2,zero,3be28 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   3bddc:	e0bffa17 	ldw	r2,-24(fp)
   3bde0:	10800317 	ldw	r2,12(r2)
   3bde4:	1005003a 	cmpeq	r2,r2,zero
   3bde8:	1000091e 	bne	r2,zero,3be10 <open+0x120>
   3bdec:	e0bffa17 	ldw	r2,-24(fp)
   3bdf0:	10800317 	ldw	r2,12(r2)
   3bdf4:	e13ff917 	ldw	r4,-28(fp)
   3bdf8:	e17ffb17 	ldw	r5,-20(fp)
   3bdfc:	e1bffc17 	ldw	r6,-16(fp)
   3be00:	e1fffd17 	ldw	r7,-12(fp)
   3be04:	103ee83a 	callr	r2
   3be08:	e0bfff15 	stw	r2,-4(fp)
   3be0c:	00000106 	br	3be14 <open+0x124>
   3be10:	e03fff15 	stw	zero,-4(fp)
   3be14:	e0bfff17 	ldw	r2,-4(fp)
   3be18:	e0bff715 	stw	r2,-36(fp)
   3be1c:	00000206 	br	3be28 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   3be20:	00bffb44 	movi	r2,-19
   3be24:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   3be28:	e0bff717 	ldw	r2,-36(fp)
   3be2c:	1004403a 	cmpge	r2,r2,zero
   3be30:	1000091e 	bne	r2,zero,3be58 <open+0x168>
  {
    alt_release_fd (index);  
   3be34:	e13ff817 	ldw	r4,-32(fp)
   3be38:	003a5800 	call	3a580 <alt_release_fd>
    ALT_ERRNO = -status;
   3be3c:	003be780 	call	3be78 <alt_get_errno>
   3be40:	e0fff717 	ldw	r3,-36(fp)
   3be44:	00c7c83a 	sub	r3,zero,r3
   3be48:	10c00015 	stw	r3,0(r2)
    return -1;
   3be4c:	00bfffc4 	movi	r2,-1
   3be50:	e0bffe15 	stw	r2,-8(fp)
   3be54:	00000206 	br	3be60 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   3be58:	e0bff817 	ldw	r2,-32(fp)
   3be5c:	e0bffe15 	stw	r2,-8(fp)
   3be60:	e0bffe17 	ldw	r2,-8(fp)
}
   3be64:	e037883a 	mov	sp,fp
   3be68:	dfc00117 	ldw	ra,4(sp)
   3be6c:	df000017 	ldw	fp,0(sp)
   3be70:	dec00204 	addi	sp,sp,8
   3be74:	f800283a 	ret

0003be78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3be78:	defffd04 	addi	sp,sp,-12
   3be7c:	dfc00215 	stw	ra,8(sp)
   3be80:	df000115 	stw	fp,4(sp)
   3be84:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   3be88:	00800074 	movhi	r2,1
   3be8c:	10877804 	addi	r2,r2,7648
   3be90:	10800017 	ldw	r2,0(r2)
   3be94:	1005003a 	cmpeq	r2,r2,zero
   3be98:	1000061e 	bne	r2,zero,3beb4 <alt_get_errno+0x3c>
   3be9c:	00800074 	movhi	r2,1
   3bea0:	10877804 	addi	r2,r2,7648
   3bea4:	10800017 	ldw	r2,0(r2)
   3bea8:	103ee83a 	callr	r2
   3beac:	e0bfff15 	stw	r2,-4(fp)
   3beb0:	00000306 	br	3bec0 <alt_get_errno+0x48>
   3beb4:	00800074 	movhi	r2,1
   3beb8:	10878804 	addi	r2,r2,7712
   3bebc:	e0bfff15 	stw	r2,-4(fp)
   3bec0:	e0bfff17 	ldw	r2,-4(fp)
}
   3bec4:	e037883a 	mov	sp,fp
   3bec8:	dfc00117 	ldw	ra,4(sp)
   3becc:	df000017 	ldw	fp,0(sp)
   3bed0:	dec00204 	addi	sp,sp,8
   3bed4:	f800283a 	ret

0003bed8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   3bed8:	defffa04 	addi	sp,sp,-24
   3bedc:	df000515 	stw	fp,20(sp)
   3bee0:	df000504 	addi	fp,sp,20
   3bee4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3bee8:	0005303a 	rdctl	r2,status
   3beec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3bef0:	e0fffd17 	ldw	r3,-12(fp)
   3bef4:	00bfff84 	movi	r2,-2
   3bef8:	1884703a 	and	r2,r3,r2
   3befc:	1001703a 	wrctl	status,r2
  
  return context;
   3bf00:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   3bf04:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   3bf08:	e0bfff17 	ldw	r2,-4(fp)
   3bf0c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   3bf10:	e0bffc17 	ldw	r2,-16(fp)
   3bf14:	10c00017 	ldw	r3,0(r2)
   3bf18:	e0bffc17 	ldw	r2,-16(fp)
   3bf1c:	10800117 	ldw	r2,4(r2)
   3bf20:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   3bf24:	e0bffc17 	ldw	r2,-16(fp)
   3bf28:	10c00117 	ldw	r3,4(r2)
   3bf2c:	e0bffc17 	ldw	r2,-16(fp)
   3bf30:	10800017 	ldw	r2,0(r2)
   3bf34:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   3bf38:	e0fffc17 	ldw	r3,-16(fp)
   3bf3c:	e0bffc17 	ldw	r2,-16(fp)
   3bf40:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   3bf44:	e0fffc17 	ldw	r3,-16(fp)
   3bf48:	e0bffc17 	ldw	r2,-16(fp)
   3bf4c:	18800015 	stw	r2,0(r3)
   3bf50:	e0bffe17 	ldw	r2,-8(fp)
   3bf54:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3bf58:	e0bffb17 	ldw	r2,-20(fp)
   3bf5c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   3bf60:	e037883a 	mov	sp,fp
   3bf64:	df000017 	ldw	fp,0(sp)
   3bf68:	dec00104 	addi	sp,sp,4
   3bf6c:	f800283a 	ret

0003bf70 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   3bf70:	defffb04 	addi	sp,sp,-20
   3bf74:	dfc00415 	stw	ra,16(sp)
   3bf78:	df000315 	stw	fp,12(sp)
   3bf7c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   3bf80:	d0a00e17 	ldw	r2,-32712(gp)
   3bf84:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   3bf88:	d0a02117 	ldw	r2,-32636(gp)
   3bf8c:	10800044 	addi	r2,r2,1
   3bf90:	d0a02115 	stw	r2,-32636(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   3bf94:	00003106 	br	3c05c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   3bf98:	e0bffe17 	ldw	r2,-8(fp)
   3bf9c:	10800017 	ldw	r2,0(r2)
   3bfa0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   3bfa4:	e0bffe17 	ldw	r2,-8(fp)
   3bfa8:	10800403 	ldbu	r2,16(r2)
   3bfac:	10803fcc 	andi	r2,r2,255
   3bfb0:	1005003a 	cmpeq	r2,r2,zero
   3bfb4:	1000051e 	bne	r2,zero,3bfcc <alt_tick+0x5c>
   3bfb8:	d0a02117 	ldw	r2,-32636(gp)
   3bfbc:	1004c03a 	cmpne	r2,r2,zero
   3bfc0:	1000021e 	bne	r2,zero,3bfcc <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   3bfc4:	e0bffe17 	ldw	r2,-8(fp)
   3bfc8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   3bfcc:	e0bffe17 	ldw	r2,-8(fp)
   3bfd0:	10c00217 	ldw	r3,8(r2)
   3bfd4:	d0a02117 	ldw	r2,-32636(gp)
   3bfd8:	10c01e36 	bltu	r2,r3,3c054 <alt_tick+0xe4>
   3bfdc:	e0bffe17 	ldw	r2,-8(fp)
   3bfe0:	10800403 	ldbu	r2,16(r2)
   3bfe4:	10803fcc 	andi	r2,r2,255
   3bfe8:	1004c03a 	cmpne	r2,r2,zero
   3bfec:	1000191e 	bne	r2,zero,3c054 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   3bff0:	e0bffe17 	ldw	r2,-8(fp)
   3bff4:	10c00317 	ldw	r3,12(r2)
   3bff8:	e0bffe17 	ldw	r2,-8(fp)
   3bffc:	11000517 	ldw	r4,20(r2)
   3c000:	183ee83a 	callr	r3
   3c004:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   3c008:	e0bffd17 	ldw	r2,-12(fp)
   3c00c:	1004c03a 	cmpne	r2,r2,zero
   3c010:	1000031e 	bne	r2,zero,3c020 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   3c014:	e13ffe17 	ldw	r4,-8(fp)
   3c018:	003bed80 	call	3bed8 <alt_alarm_stop>
   3c01c:	00000d06 	br	3c054 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   3c020:	e0bffe17 	ldw	r2,-8(fp)
   3c024:	10c00217 	ldw	r3,8(r2)
   3c028:	e0bffd17 	ldw	r2,-12(fp)
   3c02c:	1887883a 	add	r3,r3,r2
   3c030:	e0bffe17 	ldw	r2,-8(fp)
   3c034:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   3c038:	e0bffe17 	ldw	r2,-8(fp)
   3c03c:	10c00217 	ldw	r3,8(r2)
   3c040:	d0a02117 	ldw	r2,-32636(gp)
   3c044:	1880032e 	bgeu	r3,r2,3c054 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   3c048:	e0fffe17 	ldw	r3,-8(fp)
   3c04c:	00800044 	movi	r2,1
   3c050:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   3c054:	e0bfff17 	ldw	r2,-4(fp)
   3c058:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   3c05c:	d0e00e04 	addi	r3,gp,-32712
   3c060:	e0bffe17 	ldw	r2,-8(fp)
   3c064:	10ffcc1e 	bne	r2,r3,3bf98 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   3c068:	e037883a 	mov	sp,fp
   3c06c:	dfc00117 	ldw	ra,4(sp)
   3c070:	df000017 	ldw	fp,0(sp)
   3c074:	dec00204 	addi	sp,sp,8
   3c078:	f800283a 	ret

0003c07c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   3c07c:	deffff04 	addi	sp,sp,-4
   3c080:	df000015 	stw	fp,0(sp)
   3c084:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   3c088:	000170fa 	wrctl	ienable,zero
}
   3c08c:	e037883a 	mov	sp,fp
   3c090:	df000017 	ldw	fp,0(sp)
   3c094:	dec00104 	addi	sp,sp,4
   3c098:	f800283a 	ret

0003c09c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   3c09c:	defff904 	addi	sp,sp,-28
   3c0a0:	dfc00615 	stw	ra,24(sp)
   3c0a4:	df000515 	stw	fp,20(sp)
   3c0a8:	df000504 	addi	fp,sp,20
   3c0ac:	e13ffd15 	stw	r4,-12(fp)
   3c0b0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   3c0b4:	e0bffe17 	ldw	r2,-8(fp)
   3c0b8:	10800017 	ldw	r2,0(r2)
   3c0bc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   3c0c0:	e13ffd17 	ldw	r4,-12(fp)
   3c0c4:	00307240 	call	30724 <strlen>
   3c0c8:	10800044 	addi	r2,r2,1
   3c0cc:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   3c0d0:	00000d06 	br	3c108 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   3c0d4:	e0bffc17 	ldw	r2,-16(fp)
   3c0d8:	11000217 	ldw	r4,8(r2)
   3c0dc:	e1bffb17 	ldw	r6,-20(fp)
   3c0e0:	e17ffd17 	ldw	r5,-12(fp)
   3c0e4:	003c3e40 	call	3c3e4 <memcmp>
   3c0e8:	1004c03a 	cmpne	r2,r2,zero
   3c0ec:	1000031e 	bne	r2,zero,3c0fc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   3c0f0:	e0bffc17 	ldw	r2,-16(fp)
   3c0f4:	e0bfff15 	stw	r2,-4(fp)
   3c0f8:	00000706 	br	3c118 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   3c0fc:	e0bffc17 	ldw	r2,-16(fp)
   3c100:	10800017 	ldw	r2,0(r2)
   3c104:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   3c108:	e0fffe17 	ldw	r3,-8(fp)
   3c10c:	e0bffc17 	ldw	r2,-16(fp)
   3c110:	10fff01e 	bne	r2,r3,3c0d4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   3c114:	e03fff15 	stw	zero,-4(fp)
   3c118:	e0bfff17 	ldw	r2,-4(fp)
}
   3c11c:	e037883a 	mov	sp,fp
   3c120:	dfc00117 	ldw	ra,4(sp)
   3c124:	df000017 	ldw	fp,0(sp)
   3c128:	dec00204 	addi	sp,sp,8
   3c12c:	f800283a 	ret

0003c130 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   3c130:	defffa04 	addi	sp,sp,-24
   3c134:	dfc00515 	stw	ra,20(sp)
   3c138:	df000415 	stw	fp,16(sp)
   3c13c:	df000404 	addi	fp,sp,16
   3c140:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   3c144:	00800074 	movhi	r2,1
   3c148:	10877304 	addi	r2,r2,7628
   3c14c:	10800017 	ldw	r2,0(r2)
   3c150:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   3c154:	00003306 	br	3c224 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   3c158:	e0bffd17 	ldw	r2,-12(fp)
   3c15c:	11000217 	ldw	r4,8(r2)
   3c160:	00307240 	call	30724 <strlen>
   3c164:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   3c168:	e0bffd17 	ldw	r2,-12(fp)
   3c16c:	10c00217 	ldw	r3,8(r2)
   3c170:	e0bffc17 	ldw	r2,-16(fp)
   3c174:	1885883a 	add	r2,r3,r2
   3c178:	10bfffc4 	addi	r2,r2,-1
   3c17c:	10800003 	ldbu	r2,0(r2)
   3c180:	10803fcc 	andi	r2,r2,255
   3c184:	1080201c 	xori	r2,r2,128
   3c188:	10bfe004 	addi	r2,r2,-128
   3c18c:	10800bd8 	cmpnei	r2,r2,47
   3c190:	1000031e 	bne	r2,zero,3c1a0 <alt_find_file+0x70>
    {
      len -= 1;
   3c194:	e0bffc17 	ldw	r2,-16(fp)
   3c198:	10bfffc4 	addi	r2,r2,-1
   3c19c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   3c1a0:	e0bffc17 	ldw	r2,-16(fp)
   3c1a4:	1007883a 	mov	r3,r2
   3c1a8:	e0bffe17 	ldw	r2,-8(fp)
   3c1ac:	1885883a 	add	r2,r3,r2
   3c1b0:	10800003 	ldbu	r2,0(r2)
   3c1b4:	10803fcc 	andi	r2,r2,255
   3c1b8:	1080201c 	xori	r2,r2,128
   3c1bc:	10bfe004 	addi	r2,r2,-128
   3c1c0:	10800be0 	cmpeqi	r2,r2,47
   3c1c4:	10000a1e 	bne	r2,zero,3c1f0 <alt_find_file+0xc0>
   3c1c8:	e0bffc17 	ldw	r2,-16(fp)
   3c1cc:	1007883a 	mov	r3,r2
   3c1d0:	e0bffe17 	ldw	r2,-8(fp)
   3c1d4:	1885883a 	add	r2,r3,r2
   3c1d8:	10800003 	ldbu	r2,0(r2)
   3c1dc:	10803fcc 	andi	r2,r2,255
   3c1e0:	1080201c 	xori	r2,r2,128
   3c1e4:	10bfe004 	addi	r2,r2,-128
   3c1e8:	1004c03a 	cmpne	r2,r2,zero
   3c1ec:	10000a1e 	bne	r2,zero,3c218 <alt_find_file+0xe8>
   3c1f0:	e0bffd17 	ldw	r2,-12(fp)
   3c1f4:	11000217 	ldw	r4,8(r2)
   3c1f8:	e1bffc17 	ldw	r6,-16(fp)
   3c1fc:	e17ffe17 	ldw	r5,-8(fp)
   3c200:	003c3e40 	call	3c3e4 <memcmp>
   3c204:	1004c03a 	cmpne	r2,r2,zero
   3c208:	1000031e 	bne	r2,zero,3c218 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   3c20c:	e0bffd17 	ldw	r2,-12(fp)
   3c210:	e0bfff15 	stw	r2,-4(fp)
   3c214:	00000806 	br	3c238 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   3c218:	e0bffd17 	ldw	r2,-12(fp)
   3c21c:	10800017 	ldw	r2,0(r2)
   3c220:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   3c224:	00c00074 	movhi	r3,1
   3c228:	18c77304 	addi	r3,r3,7628
   3c22c:	e0bffd17 	ldw	r2,-12(fp)
   3c230:	10ffc91e 	bne	r2,r3,3c158 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   3c234:	e03fff15 	stw	zero,-4(fp)
   3c238:	e0bfff17 	ldw	r2,-4(fp)
}
   3c23c:	e037883a 	mov	sp,fp
   3c240:	dfc00117 	ldw	ra,4(sp)
   3c244:	df000017 	ldw	fp,0(sp)
   3c248:	dec00204 	addi	sp,sp,8
   3c24c:	f800283a 	ret

0003c250 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   3c250:	defffc04 	addi	sp,sp,-16
   3c254:	df000315 	stw	fp,12(sp)
   3c258:	df000304 	addi	fp,sp,12
   3c25c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   3c260:	00bffa04 	movi	r2,-24
   3c264:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   3c268:	e03ffe15 	stw	zero,-8(fp)
   3c26c:	00001e06 	br	3c2e8 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   3c270:	e0bffe17 	ldw	r2,-8(fp)
   3c274:	00c00074 	movhi	r3,1
   3c278:	18c2f504 	addi	r3,r3,3028
   3c27c:	10800324 	muli	r2,r2,12
   3c280:	10c5883a 	add	r2,r2,r3
   3c284:	10800017 	ldw	r2,0(r2)
   3c288:	1004c03a 	cmpne	r2,r2,zero
   3c28c:	1000131e 	bne	r2,zero,3c2dc <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   3c290:	e0bffe17 	ldw	r2,-8(fp)
   3c294:	00c00074 	movhi	r3,1
   3c298:	18c2f504 	addi	r3,r3,3028
   3c29c:	10800324 	muli	r2,r2,12
   3c2a0:	10c7883a 	add	r3,r2,r3
   3c2a4:	e0bfff17 	ldw	r2,-4(fp)
   3c2a8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   3c2ac:	00800074 	movhi	r2,1
   3c2b0:	10877704 	addi	r2,r2,7644
   3c2b4:	10c00017 	ldw	r3,0(r2)
   3c2b8:	e0bffe17 	ldw	r2,-8(fp)
   3c2bc:	1880040e 	bge	r3,r2,3c2d0 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   3c2c0:	00c00074 	movhi	r3,1
   3c2c4:	18c77704 	addi	r3,r3,7644
   3c2c8:	e0bffe17 	ldw	r2,-8(fp)
   3c2cc:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   3c2d0:	e0bffe17 	ldw	r2,-8(fp)
   3c2d4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   3c2d8:	00000606 	br	3c2f4 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   3c2dc:	e0bffe17 	ldw	r2,-8(fp)
   3c2e0:	10800044 	addi	r2,r2,1
   3c2e4:	e0bffe15 	stw	r2,-8(fp)
   3c2e8:	e0bffe17 	ldw	r2,-8(fp)
   3c2ec:	10800810 	cmplti	r2,r2,32
   3c2f0:	103fdf1e 	bne	r2,zero,3c270 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   3c2f4:	e0bffd17 	ldw	r2,-12(fp)
}
   3c2f8:	e037883a 	mov	sp,fp
   3c2fc:	df000017 	ldw	fp,0(sp)
   3c300:	dec00104 	addi	sp,sp,4
   3c304:	f800283a 	ret

0003c308 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   3c308:	defffb04 	addi	sp,sp,-20
   3c30c:	df000415 	stw	fp,16(sp)
   3c310:	df000404 	addi	fp,sp,16
   3c314:	e13ffe15 	stw	r4,-8(fp)
   3c318:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   3c31c:	e0bfff17 	ldw	r2,-4(fp)
   3c320:	10840070 	cmpltui	r2,r2,4097
   3c324:	1000021e 	bne	r2,zero,3c330 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   3c328:	00840004 	movi	r2,4096
   3c32c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   3c330:	e0fffe17 	ldw	r3,-8(fp)
   3c334:	e0bfff17 	ldw	r2,-4(fp)
   3c338:	1885883a 	add	r2,r3,r2
   3c33c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   3c340:	e0bffe17 	ldw	r2,-8(fp)
   3c344:	e0bffd15 	stw	r2,-12(fp)
   3c348:	00000506 	br	3c360 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   3c34c:	e0bffd17 	ldw	r2,-12(fp)
   3c350:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   3c354:	e0bffd17 	ldw	r2,-12(fp)
   3c358:	10800804 	addi	r2,r2,32
   3c35c:	e0bffd15 	stw	r2,-12(fp)
   3c360:	e0fffd17 	ldw	r3,-12(fp)
   3c364:	e0bffc17 	ldw	r2,-16(fp)
   3c368:	18bff836 	bltu	r3,r2,3c34c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   3c36c:	e0bffe17 	ldw	r2,-8(fp)
   3c370:	108007cc 	andi	r2,r2,31
   3c374:	1005003a 	cmpeq	r2,r2,zero
   3c378:	1000021e 	bne	r2,zero,3c384 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   3c37c:	e0bffd17 	ldw	r2,-12(fp)
   3c380:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   3c384:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   3c388:	e037883a 	mov	sp,fp
   3c38c:	df000017 	ldw	fp,0(sp)
   3c390:	dec00104 	addi	sp,sp,4
   3c394:	f800283a 	ret

0003c398 <atexit>:
   3c398:	200b883a 	mov	r5,r4
   3c39c:	000d883a 	mov	r6,zero
   3c3a0:	0009883a 	mov	r4,zero
   3c3a4:	000f883a 	mov	r7,zero
   3c3a8:	003c4581 	jmpi	3c458 <__register_exitproc>

0003c3ac <exit>:
   3c3ac:	defffe04 	addi	sp,sp,-8
   3c3b0:	000b883a 	mov	r5,zero
   3c3b4:	dc000015 	stw	r16,0(sp)
   3c3b8:	dfc00115 	stw	ra,4(sp)
   3c3bc:	2021883a 	mov	r16,r4
   3c3c0:	003c5900 	call	3c590 <__call_exitprocs>
   3c3c4:	00800074 	movhi	r2,1
   3c3c8:	10876e04 	addi	r2,r2,7608
   3c3cc:	11000017 	ldw	r4,0(r2)
   3c3d0:	20800f17 	ldw	r2,60(r4)
   3c3d4:	10000126 	beq	r2,zero,3c3dc <exit+0x30>
   3c3d8:	103ee83a 	callr	r2
   3c3dc:	8009883a 	mov	r4,r16
   3c3e0:	003c7800 	call	3c780 <_exit>

0003c3e4 <memcmp>:
   3c3e4:	00c000c4 	movi	r3,3
   3c3e8:	1980032e 	bgeu	r3,r6,3c3f8 <memcmp+0x14>
   3c3ec:	2144b03a 	or	r2,r4,r5
   3c3f0:	10c4703a 	and	r2,r2,r3
   3c3f4:	10000f26 	beq	r2,zero,3c434 <memcmp+0x50>
   3c3f8:	31ffffc4 	addi	r7,r6,-1
   3c3fc:	3000061e 	bne	r6,zero,3c418 <memcmp+0x34>
   3c400:	00000a06 	br	3c42c <memcmp+0x48>
   3c404:	39ffffc4 	addi	r7,r7,-1
   3c408:	00bfffc4 	movi	r2,-1
   3c40c:	21000044 	addi	r4,r4,1
   3c410:	29400044 	addi	r5,r5,1
   3c414:	38800526 	beq	r7,r2,3c42c <memcmp+0x48>
   3c418:	20c00003 	ldbu	r3,0(r4)
   3c41c:	28800003 	ldbu	r2,0(r5)
   3c420:	18bff826 	beq	r3,r2,3c404 <memcmp+0x20>
   3c424:	1885c83a 	sub	r2,r3,r2
   3c428:	f800283a 	ret
   3c42c:	0005883a 	mov	r2,zero
   3c430:	f800283a 	ret
   3c434:	180f883a 	mov	r7,r3
   3c438:	20c00017 	ldw	r3,0(r4)
   3c43c:	28800017 	ldw	r2,0(r5)
   3c440:	18bfed1e 	bne	r3,r2,3c3f8 <memcmp+0x14>
   3c444:	31bfff04 	addi	r6,r6,-4
   3c448:	21000104 	addi	r4,r4,4
   3c44c:	29400104 	addi	r5,r5,4
   3c450:	39bff936 	bltu	r7,r6,3c438 <memcmp+0x54>
   3c454:	003fe806 	br	3c3f8 <memcmp+0x14>

0003c458 <__register_exitproc>:
   3c458:	defffa04 	addi	sp,sp,-24
   3c45c:	00800074 	movhi	r2,1
   3c460:	10876e04 	addi	r2,r2,7608
   3c464:	dc000015 	stw	r16,0(sp)
   3c468:	14000017 	ldw	r16,0(r2)
   3c46c:	dd000415 	stw	r20,16(sp)
   3c470:	2829883a 	mov	r20,r5
   3c474:	81405217 	ldw	r5,328(r16)
   3c478:	dcc00315 	stw	r19,12(sp)
   3c47c:	dc800215 	stw	r18,8(sp)
   3c480:	dc400115 	stw	r17,4(sp)
   3c484:	dfc00515 	stw	ra,20(sp)
   3c488:	2023883a 	mov	r17,r4
   3c48c:	3027883a 	mov	r19,r6
   3c490:	3825883a 	mov	r18,r7
   3c494:	28002526 	beq	r5,zero,3c52c <__register_exitproc+0xd4>
   3c498:	29000117 	ldw	r4,4(r5)
   3c49c:	008007c4 	movi	r2,31
   3c4a0:	11002716 	blt	r2,r4,3c540 <__register_exitproc+0xe8>
   3c4a4:	8800101e 	bne	r17,zero,3c4e8 <__register_exitproc+0x90>
   3c4a8:	2105883a 	add	r2,r4,r4
   3c4ac:	1085883a 	add	r2,r2,r2
   3c4b0:	20c00044 	addi	r3,r4,1
   3c4b4:	1145883a 	add	r2,r2,r5
   3c4b8:	0009883a 	mov	r4,zero
   3c4bc:	15000215 	stw	r20,8(r2)
   3c4c0:	28c00115 	stw	r3,4(r5)
   3c4c4:	2005883a 	mov	r2,r4
   3c4c8:	dfc00517 	ldw	ra,20(sp)
   3c4cc:	dd000417 	ldw	r20,16(sp)
   3c4d0:	dcc00317 	ldw	r19,12(sp)
   3c4d4:	dc800217 	ldw	r18,8(sp)
   3c4d8:	dc400117 	ldw	r17,4(sp)
   3c4dc:	dc000017 	ldw	r16,0(sp)
   3c4e0:	dec00604 	addi	sp,sp,24
   3c4e4:	f800283a 	ret
   3c4e8:	29802204 	addi	r6,r5,136
   3c4ec:	00800044 	movi	r2,1
   3c4f0:	110e983a 	sll	r7,r2,r4
   3c4f4:	30c04017 	ldw	r3,256(r6)
   3c4f8:	2105883a 	add	r2,r4,r4
   3c4fc:	1085883a 	add	r2,r2,r2
   3c500:	1185883a 	add	r2,r2,r6
   3c504:	19c6b03a 	or	r3,r3,r7
   3c508:	14802015 	stw	r18,128(r2)
   3c50c:	14c00015 	stw	r19,0(r2)
   3c510:	00800084 	movi	r2,2
   3c514:	30c04015 	stw	r3,256(r6)
   3c518:	88bfe31e 	bne	r17,r2,3c4a8 <__register_exitproc+0x50>
   3c51c:	30804117 	ldw	r2,260(r6)
   3c520:	11c4b03a 	or	r2,r2,r7
   3c524:	30804115 	stw	r2,260(r6)
   3c528:	003fdf06 	br	3c4a8 <__register_exitproc+0x50>
   3c52c:	00800074 	movhi	r2,1
   3c530:	1087d904 	addi	r2,r2,8036
   3c534:	100b883a 	mov	r5,r2
   3c538:	80805215 	stw	r2,328(r16)
   3c53c:	003fd606 	br	3c498 <__register_exitproc+0x40>
   3c540:	00800034 	movhi	r2,0
   3c544:	10800004 	addi	r2,r2,0
   3c548:	1000021e 	bne	r2,zero,3c554 <__register_exitproc+0xfc>
   3c54c:	013fffc4 	movi	r4,-1
   3c550:	003fdc06 	br	3c4c4 <__register_exitproc+0x6c>
   3c554:	01006404 	movi	r4,400
   3c558:	103ee83a 	callr	r2
   3c55c:	1007883a 	mov	r3,r2
   3c560:	103ffa26 	beq	r2,zero,3c54c <__register_exitproc+0xf4>
   3c564:	80805217 	ldw	r2,328(r16)
   3c568:	180b883a 	mov	r5,r3
   3c56c:	18000115 	stw	zero,4(r3)
   3c570:	18800015 	stw	r2,0(r3)
   3c574:	80c05215 	stw	r3,328(r16)
   3c578:	18006215 	stw	zero,392(r3)
   3c57c:	18006315 	stw	zero,396(r3)
   3c580:	0009883a 	mov	r4,zero
   3c584:	883fc826 	beq	r17,zero,3c4a8 <__register_exitproc+0x50>
   3c588:	003fd706 	br	3c4e8 <__register_exitproc+0x90>

0003c58c <register_fini>:
   3c58c:	f800283a 	ret

0003c590 <__call_exitprocs>:
   3c590:	00800074 	movhi	r2,1
   3c594:	10876e04 	addi	r2,r2,7608
   3c598:	10800017 	ldw	r2,0(r2)
   3c59c:	defff304 	addi	sp,sp,-52
   3c5a0:	df000b15 	stw	fp,44(sp)
   3c5a4:	d8800115 	stw	r2,4(sp)
   3c5a8:	00800034 	movhi	r2,0
   3c5ac:	10800004 	addi	r2,r2,0
   3c5b0:	1005003a 	cmpeq	r2,r2,zero
   3c5b4:	d8800215 	stw	r2,8(sp)
   3c5b8:	d8800117 	ldw	r2,4(sp)
   3c5bc:	dd400815 	stw	r21,32(sp)
   3c5c0:	dd000715 	stw	r20,28(sp)
   3c5c4:	10805204 	addi	r2,r2,328
   3c5c8:	dfc00c15 	stw	ra,48(sp)
   3c5cc:	ddc00a15 	stw	r23,40(sp)
   3c5d0:	dd800915 	stw	r22,36(sp)
   3c5d4:	dcc00615 	stw	r19,24(sp)
   3c5d8:	dc800515 	stw	r18,20(sp)
   3c5dc:	dc400415 	stw	r17,16(sp)
   3c5e0:	dc000315 	stw	r16,12(sp)
   3c5e4:	282b883a 	mov	r21,r5
   3c5e8:	2039883a 	mov	fp,r4
   3c5ec:	d8800015 	stw	r2,0(sp)
   3c5f0:	2829003a 	cmpeq	r20,r5,zero
   3c5f4:	d8800117 	ldw	r2,4(sp)
   3c5f8:	14405217 	ldw	r17,328(r2)
   3c5fc:	88001026 	beq	r17,zero,3c640 <__call_exitprocs+0xb0>
   3c600:	ddc00017 	ldw	r23,0(sp)
   3c604:	88800117 	ldw	r2,4(r17)
   3c608:	8c802204 	addi	r18,r17,136
   3c60c:	143fffc4 	addi	r16,r2,-1
   3c610:	80000916 	blt	r16,zero,3c638 <__call_exitprocs+0xa8>
   3c614:	05bfffc4 	movi	r22,-1
   3c618:	a000151e 	bne	r20,zero,3c670 <__call_exitprocs+0xe0>
   3c61c:	8409883a 	add	r4,r16,r16
   3c620:	2105883a 	add	r2,r4,r4
   3c624:	1485883a 	add	r2,r2,r18
   3c628:	10c02017 	ldw	r3,128(r2)
   3c62c:	a8c01126 	beq	r21,r3,3c674 <__call_exitprocs+0xe4>
   3c630:	843fffc4 	addi	r16,r16,-1
   3c634:	85bff81e 	bne	r16,r22,3c618 <__call_exitprocs+0x88>
   3c638:	d8800217 	ldw	r2,8(sp)
   3c63c:	10003126 	beq	r2,zero,3c704 <__call_exitprocs+0x174>
   3c640:	dfc00c17 	ldw	ra,48(sp)
   3c644:	df000b17 	ldw	fp,44(sp)
   3c648:	ddc00a17 	ldw	r23,40(sp)
   3c64c:	dd800917 	ldw	r22,36(sp)
   3c650:	dd400817 	ldw	r21,32(sp)
   3c654:	dd000717 	ldw	r20,28(sp)
   3c658:	dcc00617 	ldw	r19,24(sp)
   3c65c:	dc800517 	ldw	r18,20(sp)
   3c660:	dc400417 	ldw	r17,16(sp)
   3c664:	dc000317 	ldw	r16,12(sp)
   3c668:	dec00d04 	addi	sp,sp,52
   3c66c:	f800283a 	ret
   3c670:	8409883a 	add	r4,r16,r16
   3c674:	88c00117 	ldw	r3,4(r17)
   3c678:	2105883a 	add	r2,r4,r4
   3c67c:	1445883a 	add	r2,r2,r17
   3c680:	18ffffc4 	addi	r3,r3,-1
   3c684:	11800217 	ldw	r6,8(r2)
   3c688:	1c001526 	beq	r3,r16,3c6e0 <__call_exitprocs+0x150>
   3c68c:	10000215 	stw	zero,8(r2)
   3c690:	303fe726 	beq	r6,zero,3c630 <__call_exitprocs+0xa0>
   3c694:	00c00044 	movi	r3,1
   3c698:	1c06983a 	sll	r3,r3,r16
   3c69c:	90804017 	ldw	r2,256(r18)
   3c6a0:	8cc00117 	ldw	r19,4(r17)
   3c6a4:	1884703a 	and	r2,r3,r2
   3c6a8:	10001426 	beq	r2,zero,3c6fc <__call_exitprocs+0x16c>
   3c6ac:	90804117 	ldw	r2,260(r18)
   3c6b0:	1884703a 	and	r2,r3,r2
   3c6b4:	10000c1e 	bne	r2,zero,3c6e8 <__call_exitprocs+0x158>
   3c6b8:	2105883a 	add	r2,r4,r4
   3c6bc:	1485883a 	add	r2,r2,r18
   3c6c0:	11400017 	ldw	r5,0(r2)
   3c6c4:	e009883a 	mov	r4,fp
   3c6c8:	303ee83a 	callr	r6
   3c6cc:	88800117 	ldw	r2,4(r17)
   3c6d0:	98bfc81e 	bne	r19,r2,3c5f4 <__call_exitprocs+0x64>
   3c6d4:	b8800017 	ldw	r2,0(r23)
   3c6d8:	147fd526 	beq	r2,r17,3c630 <__call_exitprocs+0xa0>
   3c6dc:	003fc506 	br	3c5f4 <__call_exitprocs+0x64>
   3c6e0:	8c000115 	stw	r16,4(r17)
   3c6e4:	003fea06 	br	3c690 <__call_exitprocs+0x100>
   3c6e8:	2105883a 	add	r2,r4,r4
   3c6ec:	1485883a 	add	r2,r2,r18
   3c6f0:	11000017 	ldw	r4,0(r2)
   3c6f4:	303ee83a 	callr	r6
   3c6f8:	003ff406 	br	3c6cc <__call_exitprocs+0x13c>
   3c6fc:	303ee83a 	callr	r6
   3c700:	003ff206 	br	3c6cc <__call_exitprocs+0x13c>
   3c704:	88800117 	ldw	r2,4(r17)
   3c708:	1000081e 	bne	r2,zero,3c72c <__call_exitprocs+0x19c>
   3c70c:	89000017 	ldw	r4,0(r17)
   3c710:	20000726 	beq	r4,zero,3c730 <__call_exitprocs+0x1a0>
   3c714:	b9000015 	stw	r4,0(r23)
   3c718:	8809883a 	mov	r4,r17
   3c71c:	00000000 	call	0 <__alt_mem_shared_mem>
   3c720:	bc400017 	ldw	r17,0(r23)
   3c724:	883fb71e 	bne	r17,zero,3c604 <__call_exitprocs+0x74>
   3c728:	003fc506 	br	3c640 <__call_exitprocs+0xb0>
   3c72c:	89000017 	ldw	r4,0(r17)
   3c730:	882f883a 	mov	r23,r17
   3c734:	2023883a 	mov	r17,r4
   3c738:	883fb21e 	bne	r17,zero,3c604 <__call_exitprocs+0x74>
   3c73c:	003fc006 	br	3c640 <__call_exitprocs+0xb0>

0003c740 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   3c740:	defffd04 	addi	sp,sp,-12
   3c744:	df000215 	stw	fp,8(sp)
   3c748:	df000204 	addi	fp,sp,8
   3c74c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   3c750:	e0bfff17 	ldw	r2,-4(fp)
   3c754:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   3c758:	e0bffe17 	ldw	r2,-8(fp)
   3c75c:	1005003a 	cmpeq	r2,r2,zero
   3c760:	1000021e 	bne	r2,zero,3c76c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   3c764:	002af070 	cmpltui	zero,zero,43969
   3c768:	00000106 	br	3c770 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   3c76c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   3c770:	e037883a 	mov	sp,fp
   3c774:	df000017 	ldw	fp,0(sp)
   3c778:	dec00104 	addi	sp,sp,4
   3c77c:	f800283a 	ret

0003c780 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   3c780:	defffd04 	addi	sp,sp,-12
   3c784:	dfc00215 	stw	ra,8(sp)
   3c788:	df000115 	stw	fp,4(sp)
   3c78c:	df000104 	addi	fp,sp,4
   3c790:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   3c794:	e13fff17 	ldw	r4,-4(fp)
   3c798:	003c7400 	call	3c740 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   3c79c:	003fff06 	br	3c79c <_exit+0x1c>
   3c7a0:	0003c58c 	andi	zero,zero,3862
