
consumer.elf:     file format elf32-littlenios2
consumer.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x0000c980 memsz 0x0000c980 flags r-x
    LOAD off    0x0000e3b4 vaddr 0x000283b4 paddr 0x0001c9a0 align 2**12
         filesz 0x00001a5c memsz 0x00001d64 flags rw-
    LOAD off    0x00010000 vaddr 0x00028000 paddr 0x00028000 align 2**12
         filesz 0x000003b4 memsz 0x000003b4 flags r--

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c7ec  000101b4  000101b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003b4  00028000  00028000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  000283b4  0001c9a0  0000e3b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000308  00029e10  0001e3fc  0000fe10  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000103b4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cb8  00000000  00000000  000103d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001494  00000000  00000000  00011090  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023702  00000000  00000000  00012524  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007ab3  00000000  00000000  00035c26  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013ab4  00000000  00000000  0003d6d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001908  00000000  00000000  00051190  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002178  00000000  00000000  00052a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000be97  00000000  00000000  00054c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00060aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  00060ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00064572  2**0
                  CONTENTS, READONLY
 18 .cpu          00000004  00000000  00000000  00064575  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00064579  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006457a  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006457b  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006457f  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00064583  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00064587  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00064592  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0006459d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  000645a8  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000044  00000000  00000000  000645ab  2**0
                  CONTENTS, READONLY
 29 .jdi          00008508  00000000  00000000  000645ef  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006eaee  00000000  00000000  0006caf7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b4 l    d  .text	00000000 .text
00028000 l    d  .rodata	00000000 .rodata
000283b4 l    d  .rwdata	00000000 .rwdata
00029e10 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000101ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO_1.c
00000000 l    df *ABS*	00000000 consumer.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00010804 l     F .text	00000058 __sprint_r
000280e2 l     O .rodata	00000010 blanks.3452
000280d2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00012868 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00014264 l     F .text	00000058 std
00014370 l     F .text	00000008 __fp_lock
00014378 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000283b4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00029ddc l     O .rwdata	00000004 charset
00028118 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00028260 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00018504 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00019630 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00019ea4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00019f04 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0001a004 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0001a124 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001a204 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001a360 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0001a58c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00029e00 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0001a828 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00028d70 l     O .rwdata	00001060 jtag_uart_1
0001a940 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001ab80 l     F .text	00000228 altera_avalon_jtag_uart_irq
0001ada8 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001b424 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001b8b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001bcd4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001be10 l     F .text	000000dc alt_file_locked
0001c074 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0001c788 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0001c93c l     F .text	00000040 alt_sim_halt
00016020 g     F .text	00000094 _mprec_log10
0001610c g     F .text	00000088 __any_on
00017818 g     F .text	00000070 _isatty_r
00028238 g     O .rodata	00000028 __mprec_tinytens
0001a3c0 g     F .text	0000006c alt_main
00010000 g       *ABS*	00000000 __alt_mem_ins_mem1
000106dc g     F .text	000000a0 _puts_r
00029e10 g     O .bss	00000004 writep
00029e88 g     O .bss	00000100 alt_irq
00017888 g     F .text	00000078 _lseek_r
0001c9a0 g       *ABS*	00000000 __flash_rwdata_start
00019024 g     F .text	00000088 __eqdf2
00010510 g     F .text	00000048 FIFO_1_INIT
0002a118 g       *ABS*	00000000 __alt_heap_start
00010664 g     F .text	00000044 printf
000172e4 g     F .text	00000068 __sseek
000142cc g     F .text	000000a4 __sinit
00014fa4 g     F .text	00000084 _setlocale_r
000143cc g     F .text	00000068 __sfmoreglue
0001a44c g     F .text	00000020 __malloc_unlock
00029e14 g     O .bss	00000004 readp
00029e50 g     O .bss	00000004 altera_avalon_timer_ts_freq
00015a9c g     F .text	000000e0 memmove
000143bc g     F .text	00000010 _cleanup
00016194 g     F .text	000000bc _Balloc
00019134 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000177a4 g     F .text	00000074 _fstat_r
00029e3c g     O .bss	00000004 errno
00029e44 g     O .bss	00000004 alt_argv
00031dd0 g       *ABS*	00000000 _gp
00028bf0 g     O .rwdata	00000180 alt_fd_list
0001c298 g     F .text	00000094 alt_find_dev
000159fc g     F .text	000000a0 memcpy
000143b0 g     F .text	0000000c _cleanup_r
000192cc g     F .text	000000f8 __floatsidf
0001bd98 g     F .text	00000078 alt_io_redirect
00019244 g     F .text	00000088 __ltdf2
0001c9a0 g       *ABS*	00000000 __DTOR_END__
0001077c g     F .text	00000014 puts
00015f70 g     F .text	000000b0 __ratio
0001afc0 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000106a8 g     F .text	00000034 _printf_r
0001976c g     F .text	00000008 __udivsi3
0001a064 g     F .text	000000c0 isatty
00028148 g     O .rodata	000000c8 __mprec_tens
00014f80 g     F .text	00000008 __locale_charset
0001c504 g     F .text	00000090 alt_icache_flush
00029e30 g     O .bss	00000004 __malloc_top_pad
00029dd8 g     O .rwdata	00000004 __mb_cur_max
00014f88 g     F .text	0000000c _localeconv_r
0001688c g     F .text	0000003c __i2b
00014964 g     F .text	0000049c __sfvwrite_r
0001726c g     F .text	00000070 _sbrk_r
00010598 g     F .text	00000088 consumer
00029e18 g     O .bss	00000004 fullp
00017900 g     F .text	00000078 _read_r
000287b4 g     O .rwdata	0000000c __lc_ctype
00029df8 g     O .rwdata	00000004 alt_max_fd
00019ba8 g     F .text	00000138 __unpack_d
00017680 g     F .text	00000110 _fclose_r
00014230 g     F .text	00000034 fflush
00029e34 g     O .bss	00000004 __malloc_max_sbrked_mem
00018994 g     F .text	00000074 __adddf3
00015e50 g     F .text	00000120 __b2d
00017f54 g     F .text	000005b0 __umoddi3
0001a270 g     F .text	000000f0 lseek
00029dd4 g     O .rwdata	00000004 _global_impure_ptr
00016c08 g     F .text	000005f4 _realloc_r
0002a118 g       *ABS*	00000000 __bss_end
0001bbdc g     F .text	000000f8 alt_iic_isr_register
0001c16c g     F .text	0000010c alt_tick
00017978 g     F .text	000005dc __udivdi3
00028210 g     O .rodata	00000028 __mprec_bigtens
00016ae8 g     F .text	00000120 __s2b
0001949c g     F .text	00000194 __floatunsidf
00015d70 g     F .text	00000060 __mcmp
00014398 g     F .text	00000018 __fp_lock_all
0001bb94 g     F .text	00000048 alt_ic_irq_enabled
0001c0d4 g     F .text	00000098 alt_alarm_stop
00029e54 g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	000000c8 alt_irq_handler
00028bc8 g     O .rwdata	00000028 alt_dev_null
0001b7e0 g     F .text	0000001c alt_dcache_flush_all
00015c3c g     F .text	00000070 __hi0bits
000193c4 g     F .text	000000d8 __fixdfsi
00029e10 g       *ABS*	00000000 __ram_rwdata_end
00029df0 g     O .rwdata	00000008 alt_dev_list
0001a708 g     F .text	00000120 write
0001b664 g     F .text	00000028 alt_timestamp_freq
000283b4 g       *ABS*	00000000 __ram_rodata_end
00019f30 g     F .text	000000d4 fstat
000169c8 g     F .text	00000120 __pow5mult
00029e24 g     O .bss	00000004 __nlocale_changed
00019774 g     F .text	00000008 __umodsi3
0002a118 g       *ABS*	00000000 end
0001aac0 g     F .text	000000c0 altera_avalon_jtag_uart_init
0001c99c g       *ABS*	00000000 __CTOR_LIST__
00030000 g       *ABS*	00000000 __alt_stack_pointer
0001b494 g     F .text	00000090 alt_avalon_timer_sc_init
00019814 g     F .text	00000080 __clzsi2
0001b1e4 g     F .text	00000240 altera_avalon_jtag_uart_write
000142bc g     F .text	00000004 __sfp_lock_acquire
00015918 g     F .text	000000e4 memchr
0001085c g     F .text	00001eac ___vfprintf_internal_r
00014650 g     F .text	00000314 _free_r
0001c78c g     F .text	000001b0 __call_exitprocs
00029e28 g     O .bss	00000004 __mlocale_changed
00029de4 g     O .rwdata	00000004 __malloc_sbrk_base
000101b4 g     F .text	0000003c _start
00029e58 g     O .bss	00000004 _alt_tick_rate
00016558 g     F .text	0000014c __lshift
00029e5c g     O .bss	00000004 _alt_nticks
0001a46c g     F .text	00000120 read
0001a8bc g     F .text	00000084 alt_sys_init
0001c654 g     F .text	00000134 __register_exitproc
000166a4 g     F .text	000001e8 __multiply
0001ae58 g     F .text	00000074 altera_avalon_jtag_uart_close
000283b4 g       *ABS*	00000000 __ram_rwdata_start
00028000 g       *ABS*	00000000 __ram_rodata_start
00029e60 g     O .bss	00000028 __malloc_current_mallinfo
00016250 g     F .text	0000017c __d2b
0001a978 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0001c44c g     F .text	000000b8 alt_get_fd
00019ce0 g     F .text	000000c8 __fpcmp_parts_d
00017610 g     F .text	00000070 _close_r
0001c5e0 g     F .text	00000074 memcmp
0001aa28 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0002a118 g       *ABS*	00000000 __alt_stack_base
0001aa70 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0001272c g     F .text	0000013c __swsetup_r
00018dcc g     F .text	00000258 __divdf3
00014434 g     F .text	000000f0 __sfp
000160b4 g     F .text	00000058 __copybits
000287c0 g     O .rwdata	00000408 __malloc_av_
000142c8 g     F .text	00000004 __sinit_lock_release
00018a08 g     F .text	000003c4 __muldf3
000173c8 g     F .text	00000060 __sread
0001c32c g     F .text	00000120 alt_find_file
0001b7fc g     F .text	000000b4 alt_dev_llist_insert
0001a42c g     F .text	00000020 __malloc_lock
0001a64c g     F .text	000000bc sbrk
00014034 g     F .text	000001fc _fflush_r
0001755c g     F .text	000000b4 _calloc_r
00029e10 g       *ABS*	00000000 __bss_start
00015b7c g     F .text	00000098 memset
00010558 g     F .text	00000040 main
00029e48 g     O .bss	00000004 alt_envp
00029e38 g     O .bss	00000004 __malloc_max_total_mem
0001a9d0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000172dc g     F .text	00000008 __sclose
00030000 g       *ABS*	00000000 __alt_heap_limit
00017790 g     F .text	00000014 fclose
00028000 g       *ABS*	00000000 __alt_mem_data_mem1
0001b524 g     F .text	000000a4 alt_timestamp_start
00029f88 g     O .bss	00000190 _atexit0
00012a80 g     F .text	000015b4 _dtoa_r
000151d8 g     F .text	00000740 _malloc_r
00029dfc g     O .rwdata	00000004 alt_errno
00014ec8 g     F .text	000000b8 _fwalk
000101f0 g     F .text	000001b0 WRITE_FIFO_1
000196ac g     F .text	00000060 __divsi3
0002826c g     O .rodata	00000014 __thenan_df
00014524 g     F .text	0000012c _malloc_trim_r
0001c9a0 g       *ABS*	00000000 __CTOR_END__
00017428 g     F .text	000000bc strcmp
00028000 g       *ABS*	00000000 __flash_rodata_start
0001c9a0 g       *ABS*	00000000 __DTOR_LIST__
00010620 g     F .text	00000044 delay
000190ac g     F .text	00000088 __nedf2
0001a888 g     F .text	00000034 alt_irq_init
0001a5ec g     F .text	00000060 alt_release_fd
00028280 g     O .rodata	00000100 __clz_tab
00029e2c g     O .bss	00000004 _PathLocale
0001c594 g     F .text	00000014 atexit
000174e4 g     F .text	00000078 _write_r
00015028 g     F .text	0000001c setlocale
00029dd0 g     O .rwdata	00000004 _impure_ptr
00029e40 g     O .bss	00000004 alt_argc
00029e4c g     O .bss	00000004 altera_avalon_timer_ts_base
0001b974 g     F .text	00000064 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00015dd0 g     F .text	00000080 __ulp
000171fc g     F .text	00000040 __isinfd
00014380 g     F .text	00000018 __fp_unlock_all
00029de8 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00014f94 g     F .text	00000010 localeconv
0001b5c8 g     F .text	0000009c alt_timestamp
0001ba08 g     F .text	00000050 alt_ic_isr_register
00029e10 g       *ABS*	00000000 _edata
0002a118 g       *ABS*	00000000 _end
000101b4 g       *ABS*	00000000 __ram_exceptions_end
0001aecc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0001baf4 g     F .text	000000a0 alt_ic_irq_disable
0001734c g     F .text	0000007c __swrite
00029de0 g     O .rwdata	00000004 __malloc_trim_threshold
0001c278 g     F .text	00000020 altera_nios2_qsys_irq_init
0001c5a8 g     F .text	00000038 exit
00014e00 g     F .text	000000c8 _fwalk_reent
000163cc g     F .text	0000018c __mdiff
0001970c g     F .text	00000060 __modsi3
00030000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
000142c0 g     F .text	00000004 __sfp_lock_release
0001c97c g     F .text	00000020 _exit
0001723c g     F .text	00000030 __isnand
0001b68c g     F .text	00000154 alt_alarm_start
0001977c g     F .text	00000098 __muldi3
00015044 g     F .text	00000194 __smakebuf_r
00010790 g     F .text	00000074 strlen
0001beec g     F .text	00000188 open
000191bc g     F .text	00000088 __gedf2
000103a0 g     F .text	00000170 READ_FIFO_1
0001b9d8 g     F .text	00000030 alt_icache_flush_all
00029e04 g     O .rwdata	00000004 alt_priority_mask
00029e1c g     O .bss	00000004 emptyp
0001ba58 g     F .text	0000009c alt_ic_irq_enable
00012708 g     F .text	00000024 __vfprintf_internal
00018914 g     F .text	00000080 __subdf3
00015cac g     F .text	000000c4 __lo0bits
00029e08 g     O .rwdata	00000008 alt_alarm_list
0001b910 g     F .text	00000064 _do_ctors
00029e20 g     O .bss	00000004 countp
00019da8 g     F .text	000000fc close
0001a184 g     F .text	00000080 alt_load
00019894 g     F .text	00000314 __pack_d
00030000 g       *ABS*	00000000 __alt_mem_shared_mem
00000000  w      *UND*	00000000 free
000142c4 g     F .text	00000004 __sinit_lock_acquire
000168c8 g     F .text	00000100 __multadd
00015c14 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08406d14 	ori	at,at,436
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__alt_mem_ins_mem1-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   10044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   100fc:	0005313a 	rdctl	r2,ipending
   10100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   10108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   1010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10110:	00800044 	movi	r2,1
   10114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   10118:	e0ffff17 	ldw	r3,-4(fp)
   1011c:	e0bffe17 	ldw	r2,-8(fp)
   10120:	1884703a 	and	r2,r3,r2
   10124:	1005003a 	cmpeq	r2,r2,zero
   10128:	1000161e 	bne	r2,zero,10184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	e0bffd17 	ldw	r2,-12(fp)
   10130:	00c000f4 	movhi	r3,3
   10134:	18e7a204 	addi	r3,r3,-24952
   10138:	100490fa 	slli	r2,r2,3
   1013c:	10c5883a 	add	r2,r2,r3
   10140:	11400017 	ldw	r5,0(r2)
   10144:	e0bffd17 	ldw	r2,-12(fp)
   10148:	00c000f4 	movhi	r3,3
   1014c:	18e7a204 	addi	r3,r3,-24952
   10150:	100490fa 	slli	r2,r2,3
   10154:	10c5883a 	add	r2,r2,r3
   10158:	10800104 	addi	r2,r2,4
   1015c:	11000017 	ldw	r4,0(r2)
   10160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10164:	0005313a 	rdctl	r2,ipending
   10168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   1016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   10174:	e0bfff17 	ldw	r2,-4(fp)
   10178:	1004c03a 	cmpne	r2,r2,zero
   1017c:	103fe31e 	bne	r2,zero,1010c <alt_irq_handler+0x20>
   10180:	00000706 	br	101a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10184:	e0bffe17 	ldw	r2,-8(fp)
   10188:	1085883a 	add	r2,r2,r2
   1018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   10190:	e0bffd17 	ldw	r2,-12(fp)
   10194:	10800044 	addi	r2,r2,1
   10198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   1019c:	003fde06 	br	10118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a0:	e037883a 	mov	sp,fp
   101a4:	dfc00117 	ldw	ra,4(sp)
   101a8:	df000017 	ldw	fp,0(sp)
   101ac:	dec00204 	addi	sp,sp,8
   101b0:	f800283a 	ret

Disassembly of section .text:

000101b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101b4:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   101b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   101bc:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   101c0:	d6877414 	ori	gp,gp,7632
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101c4:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   101c8:	10a78414 	ori	r2,r2,40464

    movhi r3, %hi(__bss_end)
   101cc:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   101d0:	18e84614 	ori	r3,r3,41240

    beq r2, r3, 1f
   101d4:	10c00326 	beq	r2,r3,101e4 <_start+0x30>

0:
    stw zero, (r2)
   101d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101e0:	10fffd36 	bltu	r2,r3,101d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101e4:	001a1840 	call	1a184 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101e8:	001a3c00 	call	1a3c0 <alt_main>

000101ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101ec:	003fff06 	br	101ec <alt_after_alt_main>

000101f0 <WRITE_FIFO_1>:


#include "FIFO_1.h"

void WRITE_FIFO_1(int *buffer)
{
   101f0:	defffd04 	addi	sp,sp,-12
   101f4:	df000215 	stw	fp,8(sp)
   101f8:	df000204 	addi	fp,sp,8
   101fc:	e13ffe15 	stw	r4,-8(fp)
	// Wait if the fifo is full
	while(IORD_32DIRECT(MEM_BASE,fullp)==0x1){}
   10200:	d0a01217 	ldw	r2,-32696(gp)
   10204:	1007883a 	mov	r3,r2
   10208:	008000f4 	movhi	r2,3
   1020c:	10801204 	addi	r2,r2,72
   10210:	1885883a 	add	r2,r3,r2
   10214:	10800037 	ldwio	r2,0(r2)
   10218:	10800060 	cmpeqi	r2,r2,1
   1021c:	103ff81e 	bne	r2,zero,10200 <WRITE_FIFO_1+0x10>

	// Write the data to FIFO
	IOWR_32DIRECT(MEM_BASE,writep,*buffer);
   10220:	d0a01017 	ldw	r2,-32704(gp)
   10224:	1007883a 	mov	r3,r2
   10228:	008000f4 	movhi	r2,3
   1022c:	10801204 	addi	r2,r2,72
   10230:	1889883a 	add	r4,r3,r2
   10234:	e0bffe17 	ldw	r2,-8(fp)
   10238:	10c00017 	ldw	r3,0(r2)
   1023c:	2005883a 	mov	r2,r4
   10240:	10c00035 	stwio	r3,0(r2)
	//printf("Producer sent [%i]\t%x\t%i\n",*buffer,writep,IORD_32DIRECT(MEM_BASE,writep));
	// Update the write pointer
	writep += UNIT_SIZE;
   10244:	d0a01017 	ldw	r2,-32704(gp)
   10248:	10800104 	addi	r2,r2,4
   1024c:	d0a01015 	stw	r2,-32704(gp)

	writep = writep%(CAPACITY*UNIT_SIZE);
   10250:	d0e01017 	ldw	r3,-32704(gp)
   10254:	00a00034 	movhi	r2,32768
   10258:	10800fc4 	addi	r2,r2,63
   1025c:	1886703a 	and	r3,r3,r2
   10260:	e0ffff15 	stw	r3,-4(fp)
   10264:	e0ffff17 	ldw	r3,-4(fp)
   10268:	1804403a 	cmpge	r2,r3,zero
   1026c:	10000a1e 	bne	r2,zero,10298 <WRITE_FIFO_1+0xa8>
   10270:	e0bfff17 	ldw	r2,-4(fp)
   10274:	10bfffc4 	addi	r2,r2,-1
   10278:	e0bfff15 	stw	r2,-4(fp)
   1027c:	00bff004 	movi	r2,-64
   10280:	e0ffff17 	ldw	r3,-4(fp)
   10284:	1886b03a 	or	r3,r3,r2
   10288:	e0ffff15 	stw	r3,-4(fp)
   1028c:	e0bfff17 	ldw	r2,-4(fp)
   10290:	10800044 	addi	r2,r2,1
   10294:	e0bfff15 	stw	r2,-4(fp)
   10298:	e0bfff17 	ldw	r2,-4(fp)
   1029c:	d0a01015 	stw	r2,-32704(gp)

	// Update "count" in shared mem
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE,countp) + 0x1);
   102a0:	d0a01417 	ldw	r2,-32688(gp)
   102a4:	1007883a 	mov	r3,r2
   102a8:	008000f4 	movhi	r2,3
   102ac:	10801204 	addi	r2,r2,72
   102b0:	1889883a 	add	r4,r3,r2
   102b4:	d0a01417 	ldw	r2,-32688(gp)
   102b8:	1007883a 	mov	r3,r2
   102bc:	008000f4 	movhi	r2,3
   102c0:	10801204 	addi	r2,r2,72
   102c4:	1885883a 	add	r2,r3,r2
   102c8:	10800037 	ldwio	r2,0(r2)
   102cc:	10c00044 	addi	r3,r2,1
   102d0:	2005883a 	mov	r2,r4
   102d4:	10c00035 	stwio	r3,0(r2)

	// Update the "full?" and "empty?" flags accordingly
	// Set the full flag if FIFO is now full
	// Reset the empty flag if FIFO now has 1 entry
	if(IORD_32DIRECT(MEM_BASE,countp)==CAPACITY){
   102d8:	d0a01417 	ldw	r2,-32688(gp)
   102dc:	1007883a 	mov	r3,r2
   102e0:	008000f4 	movhi	r2,3
   102e4:	10801204 	addi	r2,r2,72
   102e8:	1885883a 	add	r2,r3,r2
   102ec:	10800037 	ldwio	r2,0(r2)
   102f0:	10800418 	cmpnei	r2,r2,16
   102f4:	1000091e 	bne	r2,zero,1031c <WRITE_FIFO_1+0x12c>
		IOWR_32DIRECT(MEM_BASE,fullp,0x1);
   102f8:	d0a01217 	ldw	r2,-32696(gp)
   102fc:	1007883a 	mov	r3,r2
   10300:	008000f4 	movhi	r2,3
   10304:	10801204 	addi	r2,r2,72
   10308:	1885883a 	add	r2,r3,r2
   1030c:	1007883a 	mov	r3,r2
   10310:	00800044 	movi	r2,1
   10314:	18800035 	stwio	r2,0(r3)
   10318:	00000606 	br	10334 <WRITE_FIFO_1+0x144>
	}else{
		IOWR_32DIRECT(MEM_BASE,fullp,0x0);
   1031c:	d0a01217 	ldw	r2,-32696(gp)
   10320:	1007883a 	mov	r3,r2
   10324:	008000f4 	movhi	r2,3
   10328:	10801204 	addi	r2,r2,72
   1032c:	1885883a 	add	r2,r3,r2
   10330:	10000035 	stwio	zero,0(r2)
	}
	if(IORD_32DIRECT(MEM_BASE,countp)==0x0){
   10334:	d0a01417 	ldw	r2,-32688(gp)
   10338:	1007883a 	mov	r3,r2
   1033c:	008000f4 	movhi	r2,3
   10340:	10801204 	addi	r2,r2,72
   10344:	1885883a 	add	r2,r3,r2
   10348:	10800037 	ldwio	r2,0(r2)
   1034c:	1004c03a 	cmpne	r2,r2,zero
   10350:	1000091e 	bne	r2,zero,10378 <WRITE_FIFO_1+0x188>
		IOWR_32DIRECT(MEM_BASE,emptyp,0x1);
   10354:	d0a01317 	ldw	r2,-32692(gp)
   10358:	1007883a 	mov	r3,r2
   1035c:	008000f4 	movhi	r2,3
   10360:	10801204 	addi	r2,r2,72
   10364:	1885883a 	add	r2,r3,r2
   10368:	1007883a 	mov	r3,r2
   1036c:	00800044 	movi	r2,1
   10370:	18800035 	stwio	r2,0(r3)
   10374:	00000606 	br	10390 <WRITE_FIFO_1+0x1a0>
	}else{
		IOWR_32DIRECT(MEM_BASE,emptyp,0x0);
   10378:	d0a01317 	ldw	r2,-32692(gp)
   1037c:	1007883a 	mov	r3,r2
   10380:	008000f4 	movhi	r2,3
   10384:	10801204 	addi	r2,r2,72
   10388:	1885883a 	add	r2,r3,r2
   1038c:	10000035 	stwio	zero,0(r2)
	}
}
   10390:	e037883a 	mov	sp,fp
   10394:	df000017 	ldw	fp,0(sp)
   10398:	dec00104 	addi	sp,sp,4
   1039c:	f800283a 	ret

000103a0 <READ_FIFO_1>:


void READ_FIFO_1(int *buffer)
{
   103a0:	defffe04 	addi	sp,sp,-8
   103a4:	df000115 	stw	fp,4(sp)
   103a8:	df000104 	addi	fp,sp,4
   103ac:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is empty
	while(IORD_32DIRECT(MEM_BASE,emptyp)==0x1){}
   103b0:	d0a01317 	ldw	r2,-32692(gp)
   103b4:	1007883a 	mov	r3,r2
   103b8:	008000f4 	movhi	r2,3
   103bc:	10801204 	addi	r2,r2,72
   103c0:	1885883a 	add	r2,r3,r2
   103c4:	10800037 	ldwio	r2,0(r2)
   103c8:	10800060 	cmpeqi	r2,r2,1
   103cc:	103ff81e 	bne	r2,zero,103b0 <READ_FIFO_1+0x10>

	// Read the data
	*buffer = IORD_32DIRECT(MEM_BASE,readp);
   103d0:	d0a01117 	ldw	r2,-32700(gp)
   103d4:	1007883a 	mov	r3,r2
   103d8:	008000f4 	movhi	r2,3
   103dc:	10801204 	addi	r2,r2,72
   103e0:	1885883a 	add	r2,r3,r2
   103e4:	10c00037 	ldwio	r3,0(r2)
   103e8:	e0bfff17 	ldw	r2,-4(fp)
   103ec:	10c00015 	stw	r3,0(r2)

	// Update the read pointer
	readp += UNIT_SIZE;
   103f0:	d0a01117 	ldw	r2,-32700(gp)
   103f4:	10800104 	addi	r2,r2,4
   103f8:	d0a01115 	stw	r2,-32700(gp)
	if(readp==(CAPACITY*UNIT_SIZE)+STARTP){
   103fc:	d0a01117 	ldw	r2,-32700(gp)
   10400:	10801318 	cmpnei	r2,r2,76
   10404:	1000021e 	bne	r2,zero,10410 <READ_FIFO_1+0x70>
		readp = STARTP;
   10408:	00800304 	movi	r2,12
   1040c:	d0a01115 	stw	r2,-32700(gp)
	}

	// Update "count" in shared mem
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE,countp) - 0x1);
   10410:	d0a01417 	ldw	r2,-32688(gp)
   10414:	1007883a 	mov	r3,r2
   10418:	008000f4 	movhi	r2,3
   1041c:	10801204 	addi	r2,r2,72
   10420:	1889883a 	add	r4,r3,r2
   10424:	d0a01417 	ldw	r2,-32688(gp)
   10428:	1007883a 	mov	r3,r2
   1042c:	008000f4 	movhi	r2,3
   10430:	10801204 	addi	r2,r2,72
   10434:	1885883a 	add	r2,r3,r2
   10438:	10800037 	ldwio	r2,0(r2)
   1043c:	10ffffc4 	addi	r3,r2,-1
   10440:	2005883a 	mov	r2,r4
   10444:	10c00035 	stwio	r3,0(r2)

	// Update the "full?" and "empty?" flags accordingly
	// Set the empty flag if FIFO is now empty
	// Reset the full flag if FIFO now has 1 entry less than capacity
	if(IORD_32DIRECT(MEM_BASE,countp)==CAPACITY){
   10448:	d0a01417 	ldw	r2,-32688(gp)
   1044c:	1007883a 	mov	r3,r2
   10450:	008000f4 	movhi	r2,3
   10454:	10801204 	addi	r2,r2,72
   10458:	1885883a 	add	r2,r3,r2
   1045c:	10800037 	ldwio	r2,0(r2)
   10460:	10800418 	cmpnei	r2,r2,16
   10464:	1000091e 	bne	r2,zero,1048c <READ_FIFO_1+0xec>
		IOWR_32DIRECT(MEM_BASE,fullp,0x1);
   10468:	d0a01217 	ldw	r2,-32696(gp)
   1046c:	1007883a 	mov	r3,r2
   10470:	008000f4 	movhi	r2,3
   10474:	10801204 	addi	r2,r2,72
   10478:	1885883a 	add	r2,r3,r2
   1047c:	1007883a 	mov	r3,r2
   10480:	00800044 	movi	r2,1
   10484:	18800035 	stwio	r2,0(r3)
   10488:	00000606 	br	104a4 <READ_FIFO_1+0x104>
	}else{
		IOWR_32DIRECT(MEM_BASE,fullp,0x0);
   1048c:	d0a01217 	ldw	r2,-32696(gp)
   10490:	1007883a 	mov	r3,r2
   10494:	008000f4 	movhi	r2,3
   10498:	10801204 	addi	r2,r2,72
   1049c:	1885883a 	add	r2,r3,r2
   104a0:	10000035 	stwio	zero,0(r2)
	}
	if(IORD_32DIRECT(MEM_BASE,countp)==0x0){
   104a4:	d0a01417 	ldw	r2,-32688(gp)
   104a8:	1007883a 	mov	r3,r2
   104ac:	008000f4 	movhi	r2,3
   104b0:	10801204 	addi	r2,r2,72
   104b4:	1885883a 	add	r2,r3,r2
   104b8:	10800037 	ldwio	r2,0(r2)
   104bc:	1004c03a 	cmpne	r2,r2,zero
   104c0:	1000091e 	bne	r2,zero,104e8 <READ_FIFO_1+0x148>
		IOWR_32DIRECT(MEM_BASE,emptyp,0x1);
   104c4:	d0a01317 	ldw	r2,-32692(gp)
   104c8:	1007883a 	mov	r3,r2
   104cc:	008000f4 	movhi	r2,3
   104d0:	10801204 	addi	r2,r2,72
   104d4:	1885883a 	add	r2,r3,r2
   104d8:	1007883a 	mov	r3,r2
   104dc:	00800044 	movi	r2,1
   104e0:	18800035 	stwio	r2,0(r3)
   104e4:	00000606 	br	10500 <READ_FIFO_1+0x160>
	}else{
		IOWR_32DIRECT(MEM_BASE,emptyp,0x0);
   104e8:	d0a01317 	ldw	r2,-32692(gp)
   104ec:	1007883a 	mov	r3,r2
   104f0:	008000f4 	movhi	r2,3
   104f4:	10801204 	addi	r2,r2,72
   104f8:	1885883a 	add	r2,r3,r2
   104fc:	10000035 	stwio	zero,0(r2)
	}
}
   10500:	e037883a 	mov	sp,fp
   10504:	df000017 	ldw	fp,0(sp)
   10508:	dec00104 	addi	sp,sp,4
   1050c:	f800283a 	ret

00010510 <FIFO_1_INIT>:

//Initialization
void FIFO_1_INIT()
{
   10510:	deffff04 	addi	sp,sp,-4
   10514:	df000015 	stw	fp,0(sp)
   10518:	d839883a 	mov	fp,sp
	writep = STARTP; // Initially the FIFO is empty, so start writing at the first slot
   1051c:	00800304 	movi	r2,12
   10520:	d0a01015 	stw	r2,-32704(gp)
	readp  = STARTP;
   10524:	00800304 	movi	r2,12
   10528:	d0a01115 	stw	r2,-32700(gp)
	fullp   = 0x0; // SET THIS OFFSET (If there are previous FIFOs in shared memory, use Prev Fifo's STARTP + Prev Fifo's size)
   1052c:	d0201215 	stw	zero,-32696(gp)
	emptyp   = fullp + UNIT_SIZE;
   10530:	d0a01217 	ldw	r2,-32696(gp)
   10534:	10800104 	addi	r2,r2,4
   10538:	d0a01315 	stw	r2,-32692(gp)
	countp  = emptyp + UNIT_SIZE;
   1053c:	d0a01317 	ldw	r2,-32692(gp)
   10540:	10800104 	addi	r2,r2,4
   10544:	d0a01415 	stw	r2,-32688(gp)
	// Assigning values for the flags.
	//IOWR_32DIRECT(MEM_BASE, fullp, 0x0);
	//IOWR_32DIRECT(MEM_BASE, emptyp, 0x1); // The fifo is empty at the start
	//IOWR_32DIRECT(MEM_BASE, countp, 0x0); // The fifo is empty at the start

}
   10548:	e037883a 	mov	sp,fp
   1054c:	df000017 	ldw	fp,0(sp)
   10550:	dec00104 	addi	sp,sp,4
   10554:	f800283a 	ret

00010558 <main>:
void delay(int n);
int consumer();


int main()
{
   10558:	defffc04 	addi	sp,sp,-16
   1055c:	dfc00315 	stw	ra,12(sp)
   10560:	df000215 	stw	fp,8(sp)
   10564:	df000204 	addi	fp,sp,8
	alt_u32 sw_fast_timeA, sw_fast_timeB;
	sw_fast_timeA = alt_timestamp();
   10568:	001b5c80 	call	1b5c8 <alt_timestamp>
   1056c:	e0bfff15 	stw	r2,-4(fp)
	consumer();
   10570:	00105980 	call	10598 <consumer>
	sw_fast_timeB = alt_timestamp();
   10574:	001b5c80 	call	1b5c8 <alt_timestamp>
   10578:	e0bffe15 	stw	r2,-8(fp)

	printf("Time for Read operation: %lu\n",(unsigned long)(sw_fast_timeB-sw_fast_timeA));
   1057c:	e0fffe17 	ldw	r3,-8(fp)
   10580:	e0bfff17 	ldw	r2,-4(fp)
   10584:	188bc83a 	sub	r5,r3,r2
   10588:	010000f4 	movhi	r4,3
   1058c:	21200004 	addi	r4,r4,-32768
   10590:	00106640 	call	10664 <printf>
	
	while(1) { }
   10594:	003fff06 	br	10594 <main+0x3c>

00010598 <consumer>:
	return 0;
}


int consumer()
{
   10598:	defffa04 	addi	sp,sp,-24
   1059c:	dfc00515 	stw	ra,20(sp)
   105a0:	df000415 	stw	fp,16(sp)
   105a4:	df000404 	addi	fp,sp,16
	alt_u32 hw_fast_timeA, hw_fast_timeB;
	printf("Consumer starting..\n");
   105a8:	010000f4 	movhi	r4,3
   105ac:	21200804 	addi	r4,r4,-32736
   105b0:	001077c0 	call	1077c <puts>

	FIFO_1_INIT(); // Initialize the producer-consumer fifo
   105b4:	00105100 	call	10510 <FIFO_1_INIT>

	int j = 0;
   105b8:	e03fff15 	stw	zero,-4(fp)
	int k = 5;
   105bc:	00800144 	movi	r2,5
   105c0:	e0bffc15 	stw	r2,-16(fp)
	while(k<500)
   105c4:	00000a06 	br	105f0 <consumer+0x58>
	{
		READ_FIFO_1(&j);  // Read from the producer-consumer fifo
   105c8:	e13fff04 	addi	r4,fp,-4
   105cc:	00103a00 	call	103a0 <READ_FIFO_1>
		/*if(j==k)*/
			printf("Consumer succefully received [%i]\t%x\n",j,readp);
   105d0:	e17fff17 	ldw	r5,-4(fp)
   105d4:	d1a01117 	ldw	r6,-32700(gp)
   105d8:	010000f4 	movhi	r4,3
   105dc:	21200d04 	addi	r4,r4,-32716
   105e0:	00106640 	call	10664 <printf>


		k+=10;
   105e4:	e0bffc17 	ldw	r2,-16(fp)
   105e8:	10800284 	addi	r2,r2,10
   105ec:	e0bffc15 	stw	r2,-16(fp)

	FIFO_1_INIT(); // Initialize the producer-consumer fifo

	int j = 0;
	int k = 5;
	while(k<500)
   105f0:	e0bffc17 	ldw	r2,-16(fp)
   105f4:	10807d10 	cmplti	r2,r2,500
   105f8:	103ff31e 	bne	r2,zero,105c8 <consumer+0x30>
			printf("Consumer succefully received [%i]\t%x\n",j,readp);


		k+=10;
	}
	printf("Consumer finished..\n");
   105fc:	010000f4 	movhi	r4,3
   10600:	21201704 	addi	r4,r4,-32676
   10604:	001077c0 	call	1077c <puts>
	return 0;
   10608:	0005883a 	mov	r2,zero
}
   1060c:	e037883a 	mov	sp,fp
   10610:	dfc00117 	ldw	ra,4(sp)
   10614:	df000017 	ldw	fp,0(sp)
   10618:	dec00204 	addi	sp,sp,8
   1061c:	f800283a 	ret

00010620 <delay>:


void delay(int n)
{
   10620:	defffd04 	addi	sp,sp,-12
   10624:	df000215 	stw	fp,8(sp)
   10628:	df000204 	addi	fp,sp,8
   1062c:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i=n; i>0; i--)
   10630:	e0bfff17 	ldw	r2,-4(fp)
   10634:	e0bffe15 	stw	r2,-8(fp)
   10638:	00000306 	br	10648 <delay+0x28>
   1063c:	e0bffe17 	ldw	r2,-8(fp)
   10640:	10bfffc4 	addi	r2,r2,-1
   10644:	e0bffe15 	stw	r2,-8(fp)
   10648:	e0bffe17 	ldw	r2,-8(fp)
   1064c:	10800048 	cmpgei	r2,r2,1
   10650:	103ffa1e 	bne	r2,zero,1063c <delay+0x1c>
	{
		continue;
	}
}
   10654:	e037883a 	mov	sp,fp
   10658:	df000017 	ldw	fp,0(sp)
   1065c:	dec00104 	addi	sp,sp,4
   10660:	f800283a 	ret

00010664 <printf>:
   10664:	defffb04 	addi	sp,sp,-20
   10668:	dfc00115 	stw	ra,4(sp)
   1066c:	d9400215 	stw	r5,8(sp)
   10670:	d9800315 	stw	r6,12(sp)
   10674:	d9c00415 	stw	r7,16(sp)
   10678:	008000f4 	movhi	r2,3
   1067c:	10a77404 	addi	r2,r2,-25136
   10680:	10c00017 	ldw	r3,0(r2)
   10684:	200b883a 	mov	r5,r4
   10688:	d8800204 	addi	r2,sp,8
   1068c:	19000217 	ldw	r4,8(r3)
   10690:	100d883a 	mov	r6,r2
   10694:	d8800015 	stw	r2,0(sp)
   10698:	00127080 	call	12708 <__vfprintf_internal>
   1069c:	dfc00117 	ldw	ra,4(sp)
   106a0:	dec00504 	addi	sp,sp,20
   106a4:	f800283a 	ret

000106a8 <_printf_r>:
   106a8:	defffc04 	addi	sp,sp,-16
   106ac:	dfc00115 	stw	ra,4(sp)
   106b0:	d9800215 	stw	r6,8(sp)
   106b4:	d9c00315 	stw	r7,12(sp)
   106b8:	280d883a 	mov	r6,r5
   106bc:	21400217 	ldw	r5,8(r4)
   106c0:	d8c00204 	addi	r3,sp,8
   106c4:	180f883a 	mov	r7,r3
   106c8:	d8c00015 	stw	r3,0(sp)
   106cc:	001085c0 	call	1085c <___vfprintf_internal_r>
   106d0:	dfc00117 	ldw	ra,4(sp)
   106d4:	dec00404 	addi	sp,sp,16
   106d8:	f800283a 	ret

000106dc <_puts_r>:
   106dc:	defff604 	addi	sp,sp,-40
   106e0:	dc400715 	stw	r17,28(sp)
   106e4:	2023883a 	mov	r17,r4
   106e8:	2809883a 	mov	r4,r5
   106ec:	dfc00915 	stw	ra,36(sp)
   106f0:	dcc00815 	stw	r19,32(sp)
   106f4:	2827883a 	mov	r19,r5
   106f8:	00107900 	call	10790 <strlen>
   106fc:	89400217 	ldw	r5,8(r17)
   10700:	00c000f4 	movhi	r3,3
   10704:	18e01c04 	addi	r3,r3,-32656
   10708:	01c00044 	movi	r7,1
   1070c:	12000044 	addi	r8,r2,1
   10710:	d8c00515 	stw	r3,20(sp)
   10714:	d9c00615 	stw	r7,24(sp)
   10718:	d8c00304 	addi	r3,sp,12
   1071c:	01c00084 	movi	r7,2
   10720:	8809883a 	mov	r4,r17
   10724:	d80d883a 	mov	r6,sp
   10728:	d8c00015 	stw	r3,0(sp)
   1072c:	dcc00315 	stw	r19,12(sp)
   10730:	da000215 	stw	r8,8(sp)
   10734:	d9c00115 	stw	r7,4(sp)
   10738:	d8800415 	stw	r2,16(sp)
   1073c:	00149640 	call	14964 <__sfvwrite_r>
   10740:	00ffffc4 	movi	r3,-1
   10744:	10000626 	beq	r2,zero,10760 <_puts_r+0x84>
   10748:	1805883a 	mov	r2,r3
   1074c:	dfc00917 	ldw	ra,36(sp)
   10750:	dcc00817 	ldw	r19,32(sp)
   10754:	dc400717 	ldw	r17,28(sp)
   10758:	dec00a04 	addi	sp,sp,40
   1075c:	f800283a 	ret
   10760:	00c00284 	movi	r3,10
   10764:	1805883a 	mov	r2,r3
   10768:	dfc00917 	ldw	ra,36(sp)
   1076c:	dcc00817 	ldw	r19,32(sp)
   10770:	dc400717 	ldw	r17,28(sp)
   10774:	dec00a04 	addi	sp,sp,40
   10778:	f800283a 	ret

0001077c <puts>:
   1077c:	008000f4 	movhi	r2,3
   10780:	10a77404 	addi	r2,r2,-25136
   10784:	200b883a 	mov	r5,r4
   10788:	11000017 	ldw	r4,0(r2)
   1078c:	00106dc1 	jmpi	106dc <_puts_r>

00010790 <strlen>:
   10790:	208000cc 	andi	r2,r4,3
   10794:	2011883a 	mov	r8,r4
   10798:	1000161e 	bne	r2,zero,107f4 <strlen+0x64>
   1079c:	20c00017 	ldw	r3,0(r4)
   107a0:	017fbff4 	movhi	r5,65279
   107a4:	297fbfc4 	addi	r5,r5,-257
   107a8:	01e02074 	movhi	r7,32897
   107ac:	39e02004 	addi	r7,r7,-32640
   107b0:	1945883a 	add	r2,r3,r5
   107b4:	11c4703a 	and	r2,r2,r7
   107b8:	00c6303a 	nor	r3,zero,r3
   107bc:	1886703a 	and	r3,r3,r2
   107c0:	18000c1e 	bne	r3,zero,107f4 <strlen+0x64>
   107c4:	280d883a 	mov	r6,r5
   107c8:	380b883a 	mov	r5,r7
   107cc:	21000104 	addi	r4,r4,4
   107d0:	20800017 	ldw	r2,0(r4)
   107d4:	1187883a 	add	r3,r2,r6
   107d8:	1946703a 	and	r3,r3,r5
   107dc:	0084303a 	nor	r2,zero,r2
   107e0:	10c4703a 	and	r2,r2,r3
   107e4:	103ff926 	beq	r2,zero,107cc <strlen+0x3c>
   107e8:	20800007 	ldb	r2,0(r4)
   107ec:	10000326 	beq	r2,zero,107fc <strlen+0x6c>
   107f0:	21000044 	addi	r4,r4,1
   107f4:	20800007 	ldb	r2,0(r4)
   107f8:	103ffd1e 	bne	r2,zero,107f0 <strlen+0x60>
   107fc:	2205c83a 	sub	r2,r4,r8
   10800:	f800283a 	ret

00010804 <__sprint_r>:
   10804:	30800217 	ldw	r2,8(r6)
   10808:	defffe04 	addi	sp,sp,-8
   1080c:	dc000015 	stw	r16,0(sp)
   10810:	dfc00115 	stw	ra,4(sp)
   10814:	3021883a 	mov	r16,r6
   10818:	0007883a 	mov	r3,zero
   1081c:	1000061e 	bne	r2,zero,10838 <__sprint_r+0x34>
   10820:	1805883a 	mov	r2,r3
   10824:	30000115 	stw	zero,4(r6)
   10828:	dfc00117 	ldw	ra,4(sp)
   1082c:	dc000017 	ldw	r16,0(sp)
   10830:	dec00204 	addi	sp,sp,8
   10834:	f800283a 	ret
   10838:	00149640 	call	14964 <__sfvwrite_r>
   1083c:	1007883a 	mov	r3,r2
   10840:	1805883a 	mov	r2,r3
   10844:	80000115 	stw	zero,4(r16)
   10848:	80000215 	stw	zero,8(r16)
   1084c:	dfc00117 	ldw	ra,4(sp)
   10850:	dc000017 	ldw	r16,0(sp)
   10854:	dec00204 	addi	sp,sp,8
   10858:	f800283a 	ret

0001085c <___vfprintf_internal_r>:
   1085c:	defea404 	addi	sp,sp,-1392
   10860:	dd815815 	stw	r22,1376(sp)
   10864:	dc015215 	stw	r16,1352(sp)
   10868:	d9c15115 	stw	r7,1348(sp)
   1086c:	dfc15b15 	stw	ra,1388(sp)
   10870:	df015a15 	stw	fp,1384(sp)
   10874:	ddc15915 	stw	r23,1380(sp)
   10878:	dd415715 	stw	r21,1372(sp)
   1087c:	dd015615 	stw	r20,1368(sp)
   10880:	dcc15515 	stw	r19,1364(sp)
   10884:	dc815415 	stw	r18,1360(sp)
   10888:	dc415315 	stw	r17,1356(sp)
   1088c:	282d883a 	mov	r22,r5
   10890:	3021883a 	mov	r16,r6
   10894:	d9014f15 	stw	r4,1340(sp)
   10898:	0014f880 	call	14f88 <_localeconv_r>
   1089c:	10800017 	ldw	r2,0(r2)
   108a0:	d9c15117 	ldw	r7,1348(sp)
   108a4:	d8814915 	stw	r2,1316(sp)
   108a8:	d8814f17 	ldw	r2,1340(sp)
   108ac:	10000226 	beq	r2,zero,108b8 <___vfprintf_internal_r+0x5c>
   108b0:	10800e17 	ldw	r2,56(r2)
   108b4:	10020d26 	beq	r2,zero,110ec <___vfprintf_internal_r+0x890>
   108b8:	b080030b 	ldhu	r2,12(r22)
   108bc:	1080020c 	andi	r2,r2,8
   108c0:	10020e26 	beq	r2,zero,110fc <___vfprintf_internal_r+0x8a0>
   108c4:	b0800417 	ldw	r2,16(r22)
   108c8:	10020c26 	beq	r2,zero,110fc <___vfprintf_internal_r+0x8a0>
   108cc:	b200030b 	ldhu	r8,12(r22)
   108d0:	00800284 	movi	r2,10
   108d4:	40c0068c 	andi	r3,r8,26
   108d8:	18802f1e 	bne	r3,r2,10998 <___vfprintf_internal_r+0x13c>
   108dc:	b080038f 	ldh	r2,14(r22)
   108e0:	10002d16 	blt	r2,zero,10998 <___vfprintf_internal_r+0x13c>
   108e4:	b240038b 	ldhu	r9,14(r22)
   108e8:	b2800717 	ldw	r10,28(r22)
   108ec:	b2c00917 	ldw	r11,36(r22)
   108f0:	d9014f17 	ldw	r4,1340(sp)
   108f4:	dc402904 	addi	r17,sp,164
   108f8:	d8804004 	addi	r2,sp,256
   108fc:	00c10004 	movi	r3,1024
   10900:	423fff4c 	andi	r8,r8,65533
   10904:	800d883a 	mov	r6,r16
   10908:	880b883a 	mov	r5,r17
   1090c:	da002c0d 	sth	r8,176(sp)
   10910:	da402c8d 	sth	r9,178(sp)
   10914:	da803015 	stw	r10,192(sp)
   10918:	dac03215 	stw	r11,200(sp)
   1091c:	d8802d15 	stw	r2,180(sp)
   10920:	d8c02e15 	stw	r3,184(sp)
   10924:	d8802915 	stw	r2,164(sp)
   10928:	d8c02b15 	stw	r3,172(sp)
   1092c:	d8002f15 	stw	zero,188(sp)
   10930:	001085c0 	call	1085c <___vfprintf_internal_r>
   10934:	d8814b15 	stw	r2,1324(sp)
   10938:	10000416 	blt	r2,zero,1094c <___vfprintf_internal_r+0xf0>
   1093c:	d9014f17 	ldw	r4,1340(sp)
   10940:	880b883a 	mov	r5,r17
   10944:	00140340 	call	14034 <_fflush_r>
   10948:	1002321e 	bne	r2,zero,11214 <___vfprintf_internal_r+0x9b8>
   1094c:	d8802c0b 	ldhu	r2,176(sp)
   10950:	1080100c 	andi	r2,r2,64
   10954:	10000326 	beq	r2,zero,10964 <___vfprintf_internal_r+0x108>
   10958:	b080030b 	ldhu	r2,12(r22)
   1095c:	10801014 	ori	r2,r2,64
   10960:	b080030d 	sth	r2,12(r22)
   10964:	d8814b17 	ldw	r2,1324(sp)
   10968:	dfc15b17 	ldw	ra,1388(sp)
   1096c:	df015a17 	ldw	fp,1384(sp)
   10970:	ddc15917 	ldw	r23,1380(sp)
   10974:	dd815817 	ldw	r22,1376(sp)
   10978:	dd415717 	ldw	r21,1372(sp)
   1097c:	dd015617 	ldw	r20,1368(sp)
   10980:	dcc15517 	ldw	r19,1364(sp)
   10984:	dc815417 	ldw	r18,1360(sp)
   10988:	dc415317 	ldw	r17,1356(sp)
   1098c:	dc015217 	ldw	r16,1352(sp)
   10990:	dec15c04 	addi	sp,sp,1392
   10994:	f800283a 	ret
   10998:	0005883a 	mov	r2,zero
   1099c:	0007883a 	mov	r3,zero
   109a0:	dd401904 	addi	r21,sp,100
   109a4:	d8814215 	stw	r2,1288(sp)
   109a8:	802f883a 	mov	r23,r16
   109ac:	d8c14315 	stw	r3,1292(sp)
   109b0:	d8014b15 	stw	zero,1324(sp)
   109b4:	d8014815 	stw	zero,1312(sp)
   109b8:	d8014415 	stw	zero,1296(sp)
   109bc:	d8014715 	stw	zero,1308(sp)
   109c0:	dd400c15 	stw	r21,48(sp)
   109c4:	d8000e15 	stw	zero,56(sp)
   109c8:	d8000d15 	stw	zero,52(sp)
   109cc:	b8800007 	ldb	r2,0(r23)
   109d0:	10001926 	beq	r2,zero,10a38 <___vfprintf_internal_r+0x1dc>
   109d4:	00c00944 	movi	r3,37
   109d8:	10c01726 	beq	r2,r3,10a38 <___vfprintf_internal_r+0x1dc>
   109dc:	b821883a 	mov	r16,r23
   109e0:	00000106 	br	109e8 <___vfprintf_internal_r+0x18c>
   109e4:	10c00326 	beq	r2,r3,109f4 <___vfprintf_internal_r+0x198>
   109e8:	84000044 	addi	r16,r16,1
   109ec:	80800007 	ldb	r2,0(r16)
   109f0:	103ffc1e 	bne	r2,zero,109e4 <___vfprintf_internal_r+0x188>
   109f4:	85e7c83a 	sub	r19,r16,r23
   109f8:	98000e26 	beq	r19,zero,10a34 <___vfprintf_internal_r+0x1d8>
   109fc:	dc800e17 	ldw	r18,56(sp)
   10a00:	dc400d17 	ldw	r17,52(sp)
   10a04:	008001c4 	movi	r2,7
   10a08:	94e5883a 	add	r18,r18,r19
   10a0c:	8c400044 	addi	r17,r17,1
   10a10:	adc00015 	stw	r23,0(r21)
   10a14:	dc800e15 	stw	r18,56(sp)
   10a18:	acc00115 	stw	r19,4(r21)
   10a1c:	dc400d15 	stw	r17,52(sp)
   10a20:	14428b16 	blt	r2,r17,11450 <___vfprintf_internal_r+0xbf4>
   10a24:	ad400204 	addi	r21,r21,8
   10a28:	d9014b17 	ldw	r4,1324(sp)
   10a2c:	24c9883a 	add	r4,r4,r19
   10a30:	d9014b15 	stw	r4,1324(sp)
   10a34:	802f883a 	mov	r23,r16
   10a38:	b8800007 	ldb	r2,0(r23)
   10a3c:	10013c26 	beq	r2,zero,10f30 <___vfprintf_internal_r+0x6d4>
   10a40:	bdc00044 	addi	r23,r23,1
   10a44:	d8000405 	stb	zero,16(sp)
   10a48:	b8c00007 	ldb	r3,0(r23)
   10a4c:	04ffffc4 	movi	r19,-1
   10a50:	d8014c15 	stw	zero,1328(sp)
   10a54:	d8014a15 	stw	zero,1320(sp)
   10a58:	d8c14d15 	stw	r3,1332(sp)
   10a5c:	bdc00044 	addi	r23,r23,1
   10a60:	d9414d17 	ldw	r5,1332(sp)
   10a64:	00801604 	movi	r2,88
   10a68:	28fff804 	addi	r3,r5,-32
   10a6c:	10c06036 	bltu	r2,r3,10bf0 <___vfprintf_internal_r+0x394>
   10a70:	18c5883a 	add	r2,r3,r3
   10a74:	1085883a 	add	r2,r2,r2
   10a78:	00c00074 	movhi	r3,1
   10a7c:	18c2a304 	addi	r3,r3,2700
   10a80:	10c5883a 	add	r2,r2,r3
   10a84:	11000017 	ldw	r4,0(r2)
   10a88:	2000683a 	jmp	r4
   10a8c:	00011a00 	call	11a0 <__alt_mem_ins_mem1-0xee60>
   10a90:	00010bf0 	cmpltui	zero,zero,1071
   10a94:	00010bf0 	cmpltui	zero,zero,1071
   10a98:	000119ec 	andhi	zero,zero,1127
   10a9c:	00010bf0 	cmpltui	zero,zero,1071
   10aa0:	00010bf0 	cmpltui	zero,zero,1071
   10aa4:	00010bf0 	cmpltui	zero,zero,1071
   10aa8:	00010bf0 	cmpltui	zero,zero,1071
   10aac:	00010bf0 	cmpltui	zero,zero,1071
   10ab0:	00010bf0 	cmpltui	zero,zero,1071
   10ab4:	000117cc 	andi	zero,zero,1119
   10ab8:	000119dc 	xori	zero,zero,1127
   10abc:	00010bf0 	cmpltui	zero,zero,1071
   10ac0:	000117e4 	muli	zero,zero,1119
   10ac4:	00011a78 	rdprs	zero,zero,1129
   10ac8:	00010bf0 	cmpltui	zero,zero,1071
   10acc:	00011a64 	muli	zero,zero,1129
   10ad0:	00011a2c 	andhi	zero,zero,1128
   10ad4:	00011a2c 	andhi	zero,zero,1128
   10ad8:	00011a2c 	andhi	zero,zero,1128
   10adc:	00011a2c 	andhi	zero,zero,1128
   10ae0:	00011a2c 	andhi	zero,zero,1128
   10ae4:	00011a2c 	andhi	zero,zero,1128
   10ae8:	00011a2c 	andhi	zero,zero,1128
   10aec:	00011a2c 	andhi	zero,zero,1128
   10af0:	00011a2c 	andhi	zero,zero,1128
   10af4:	00010bf0 	cmpltui	zero,zero,1071
   10af8:	00010bf0 	cmpltui	zero,zero,1071
   10afc:	00010bf0 	cmpltui	zero,zero,1071
   10b00:	00010bf0 	cmpltui	zero,zero,1071
   10b04:	00010bf0 	cmpltui	zero,zero,1071
   10b08:	00010bf0 	cmpltui	zero,zero,1071
   10b0c:	00010bf0 	cmpltui	zero,zero,1071
   10b10:	00010bf0 	cmpltui	zero,zero,1071
   10b14:	00010bf0 	cmpltui	zero,zero,1071
   10b18:	00010bf0 	cmpltui	zero,zero,1071
   10b1c:	00011248 	cmpgei	zero,zero,1097
   10b20:	000118b4 	movhi	zero,1122
   10b24:	00010bf0 	cmpltui	zero,zero,1071
   10b28:	000118b4 	movhi	zero,1122
   10b2c:	00010bf0 	cmpltui	zero,zero,1071
   10b30:	00010bf0 	cmpltui	zero,zero,1071
   10b34:	00010bf0 	cmpltui	zero,zero,1071
   10b38:	00010bf0 	cmpltui	zero,zero,1071
   10b3c:	00011a18 	cmpnei	zero,zero,1128
   10b40:	00010bf0 	cmpltui	zero,zero,1071
   10b44:	00010bf0 	cmpltui	zero,zero,1071
   10b48:	000112fc 	xorhi	zero,zero,1099
   10b4c:	00010bf0 	cmpltui	zero,zero,1071
   10b50:	00010bf0 	cmpltui	zero,zero,1071
   10b54:	00010bf0 	cmpltui	zero,zero,1071
   10b58:	00010bf0 	cmpltui	zero,zero,1071
   10b5c:	00010bf0 	cmpltui	zero,zero,1071
   10b60:	00011348 	cmpgei	zero,zero,1101
   10b64:	00010bf0 	cmpltui	zero,zero,1071
   10b68:	00010bf0 	cmpltui	zero,zero,1071
   10b6c:	00011968 	cmpgeui	zero,zero,1125
   10b70:	00010bf0 	cmpltui	zero,zero,1071
   10b74:	00010bf0 	cmpltui	zero,zero,1071
   10b78:	00010bf0 	cmpltui	zero,zero,1071
   10b7c:	00010bf0 	cmpltui	zero,zero,1071
   10b80:	00010bf0 	cmpltui	zero,zero,1071
   10b84:	00010bf0 	cmpltui	zero,zero,1071
   10b88:	00010bf0 	cmpltui	zero,zero,1071
   10b8c:	00010bf0 	cmpltui	zero,zero,1071
   10b90:	00010bf0 	cmpltui	zero,zero,1071
   10b94:	00010bf0 	cmpltui	zero,zero,1071
   10b98:	0001193c 	xorhi	zero,zero,1124
   10b9c:	00011254 	movui	zero,1097
   10ba0:	000118b4 	movhi	zero,1122
   10ba4:	000118b4 	movhi	zero,1122
   10ba8:	000118b4 	movhi	zero,1122
   10bac:	000118a0 	cmpeqi	zero,zero,1122
   10bb0:	00011254 	movui	zero,1097
   10bb4:	00010bf0 	cmpltui	zero,zero,1071
   10bb8:	00010bf0 	cmpltui	zero,zero,1071
   10bbc:	00011828 	cmpgeui	zero,zero,1120
   10bc0:	00010bf0 	cmpltui	zero,zero,1071
   10bc4:	000117f8 	rdprs	zero,zero,1119
   10bc8:	00011308 	cmpgei	zero,zero,1100
   10bcc:	00011858 	cmpnei	zero,zero,1121
   10bd0:	00011844 	movi	zero,1121
   10bd4:	00010bf0 	cmpltui	zero,zero,1071
   10bd8:	00011ad4 	movui	zero,1131
   10bdc:	00010bf0 	cmpltui	zero,zero,1071
   10be0:	00011354 	movui	zero,1101
   10be4:	00010bf0 	cmpltui	zero,zero,1071
   10be8:	00010bf0 	cmpltui	zero,zero,1071
   10bec:	000119cc 	andi	zero,zero,1127
   10bf0:	d9014d17 	ldw	r4,1332(sp)
   10bf4:	2000ce26 	beq	r4,zero,10f30 <___vfprintf_internal_r+0x6d4>
   10bf8:	01400044 	movi	r5,1
   10bfc:	d9800f04 	addi	r6,sp,60
   10c00:	d9c14015 	stw	r7,1280(sp)
   10c04:	d9414515 	stw	r5,1300(sp)
   10c08:	d9814115 	stw	r6,1284(sp)
   10c0c:	280f883a 	mov	r7,r5
   10c10:	d9000f05 	stb	r4,60(sp)
   10c14:	d8000405 	stb	zero,16(sp)
   10c18:	d8014615 	stw	zero,1304(sp)
   10c1c:	d8c14c17 	ldw	r3,1328(sp)
   10c20:	1880008c 	andi	r2,r3,2
   10c24:	1005003a 	cmpeq	r2,r2,zero
   10c28:	d8815015 	stw	r2,1344(sp)
   10c2c:	1000031e 	bne	r2,zero,10c3c <___vfprintf_internal_r+0x3e0>
   10c30:	d9014517 	ldw	r4,1300(sp)
   10c34:	21000084 	addi	r4,r4,2
   10c38:	d9014515 	stw	r4,1300(sp)
   10c3c:	d9414c17 	ldw	r5,1328(sp)
   10c40:	2940210c 	andi	r5,r5,132
   10c44:	d9414e15 	stw	r5,1336(sp)
   10c48:	28002d1e 	bne	r5,zero,10d00 <___vfprintf_internal_r+0x4a4>
   10c4c:	d9814a17 	ldw	r6,1320(sp)
   10c50:	d8814517 	ldw	r2,1300(sp)
   10c54:	30a1c83a 	sub	r16,r6,r2
   10c58:	0400290e 	bge	zero,r16,10d00 <___vfprintf_internal_r+0x4a4>
   10c5c:	00800404 	movi	r2,16
   10c60:	1404580e 	bge	r2,r16,11dc4 <___vfprintf_internal_r+0x1568>
   10c64:	dc800e17 	ldw	r18,56(sp)
   10c68:	dc400d17 	ldw	r17,52(sp)
   10c6c:	1027883a 	mov	r19,r2
   10c70:	070000f4 	movhi	fp,3
   10c74:	e7203884 	addi	fp,fp,-32542
   10c78:	050001c4 	movi	r20,7
   10c7c:	00000306 	br	10c8c <___vfprintf_internal_r+0x430>
   10c80:	843ffc04 	addi	r16,r16,-16
   10c84:	ad400204 	addi	r21,r21,8
   10c88:	9c00130e 	bge	r19,r16,10cd8 <___vfprintf_internal_r+0x47c>
   10c8c:	94800404 	addi	r18,r18,16
   10c90:	8c400044 	addi	r17,r17,1
   10c94:	af000015 	stw	fp,0(r21)
   10c98:	acc00115 	stw	r19,4(r21)
   10c9c:	dc800e15 	stw	r18,56(sp)
   10ca0:	dc400d15 	stw	r17,52(sp)
   10ca4:	a47ff60e 	bge	r20,r17,10c80 <___vfprintf_internal_r+0x424>
   10ca8:	d9014f17 	ldw	r4,1340(sp)
   10cac:	b00b883a 	mov	r5,r22
   10cb0:	d9800c04 	addi	r6,sp,48
   10cb4:	d9c15115 	stw	r7,1348(sp)
   10cb8:	00108040 	call	10804 <__sprint_r>
   10cbc:	d9c15117 	ldw	r7,1348(sp)
   10cc0:	10009e1e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   10cc4:	843ffc04 	addi	r16,r16,-16
   10cc8:	dc800e17 	ldw	r18,56(sp)
   10ccc:	dc400d17 	ldw	r17,52(sp)
   10cd0:	dd401904 	addi	r21,sp,100
   10cd4:	9c3fed16 	blt	r19,r16,10c8c <___vfprintf_internal_r+0x430>
   10cd8:	9425883a 	add	r18,r18,r16
   10cdc:	8c400044 	addi	r17,r17,1
   10ce0:	008001c4 	movi	r2,7
   10ce4:	af000015 	stw	fp,0(r21)
   10ce8:	ac000115 	stw	r16,4(r21)
   10cec:	dc800e15 	stw	r18,56(sp)
   10cf0:	dc400d15 	stw	r17,52(sp)
   10cf4:	1441f516 	blt	r2,r17,114cc <___vfprintf_internal_r+0xc70>
   10cf8:	ad400204 	addi	r21,r21,8
   10cfc:	00000206 	br	10d08 <___vfprintf_internal_r+0x4ac>
   10d00:	dc800e17 	ldw	r18,56(sp)
   10d04:	dc400d17 	ldw	r17,52(sp)
   10d08:	d8800407 	ldb	r2,16(sp)
   10d0c:	10000b26 	beq	r2,zero,10d3c <___vfprintf_internal_r+0x4e0>
   10d10:	00800044 	movi	r2,1
   10d14:	94800044 	addi	r18,r18,1
   10d18:	8c400044 	addi	r17,r17,1
   10d1c:	a8800115 	stw	r2,4(r21)
   10d20:	d8c00404 	addi	r3,sp,16
   10d24:	008001c4 	movi	r2,7
   10d28:	a8c00015 	stw	r3,0(r21)
   10d2c:	dc800e15 	stw	r18,56(sp)
   10d30:	dc400d15 	stw	r17,52(sp)
   10d34:	1441da16 	blt	r2,r17,114a0 <___vfprintf_internal_r+0xc44>
   10d38:	ad400204 	addi	r21,r21,8
   10d3c:	d9015017 	ldw	r4,1344(sp)
   10d40:	20000b1e 	bne	r4,zero,10d70 <___vfprintf_internal_r+0x514>
   10d44:	d8800444 	addi	r2,sp,17
   10d48:	94800084 	addi	r18,r18,2
   10d4c:	8c400044 	addi	r17,r17,1
   10d50:	a8800015 	stw	r2,0(r21)
   10d54:	00c00084 	movi	r3,2
   10d58:	008001c4 	movi	r2,7
   10d5c:	a8c00115 	stw	r3,4(r21)
   10d60:	dc800e15 	stw	r18,56(sp)
   10d64:	dc400d15 	stw	r17,52(sp)
   10d68:	1441c216 	blt	r2,r17,11474 <___vfprintf_internal_r+0xc18>
   10d6c:	ad400204 	addi	r21,r21,8
   10d70:	d9414e17 	ldw	r5,1336(sp)
   10d74:	00802004 	movi	r2,128
   10d78:	2880b126 	beq	r5,r2,11040 <___vfprintf_internal_r+0x7e4>
   10d7c:	d8c14617 	ldw	r3,1304(sp)
   10d80:	19e1c83a 	sub	r16,r3,r7
   10d84:	0400260e 	bge	zero,r16,10e20 <___vfprintf_internal_r+0x5c4>
   10d88:	00800404 	movi	r2,16
   10d8c:	1403c90e 	bge	r2,r16,11cb4 <___vfprintf_internal_r+0x1458>
   10d90:	1027883a 	mov	r19,r2
   10d94:	070000f4 	movhi	fp,3
   10d98:	e7203484 	addi	fp,fp,-32558
   10d9c:	050001c4 	movi	r20,7
   10da0:	00000306 	br	10db0 <___vfprintf_internal_r+0x554>
   10da4:	843ffc04 	addi	r16,r16,-16
   10da8:	ad400204 	addi	r21,r21,8
   10dac:	9c00130e 	bge	r19,r16,10dfc <___vfprintf_internal_r+0x5a0>
   10db0:	94800404 	addi	r18,r18,16
   10db4:	8c400044 	addi	r17,r17,1
   10db8:	af000015 	stw	fp,0(r21)
   10dbc:	acc00115 	stw	r19,4(r21)
   10dc0:	dc800e15 	stw	r18,56(sp)
   10dc4:	dc400d15 	stw	r17,52(sp)
   10dc8:	a47ff60e 	bge	r20,r17,10da4 <___vfprintf_internal_r+0x548>
   10dcc:	d9014f17 	ldw	r4,1340(sp)
   10dd0:	b00b883a 	mov	r5,r22
   10dd4:	d9800c04 	addi	r6,sp,48
   10dd8:	d9c15115 	stw	r7,1348(sp)
   10ddc:	00108040 	call	10804 <__sprint_r>
   10de0:	d9c15117 	ldw	r7,1348(sp)
   10de4:	1000551e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   10de8:	843ffc04 	addi	r16,r16,-16
   10dec:	dc800e17 	ldw	r18,56(sp)
   10df0:	dc400d17 	ldw	r17,52(sp)
   10df4:	dd401904 	addi	r21,sp,100
   10df8:	9c3fed16 	blt	r19,r16,10db0 <___vfprintf_internal_r+0x554>
   10dfc:	9425883a 	add	r18,r18,r16
   10e00:	8c400044 	addi	r17,r17,1
   10e04:	008001c4 	movi	r2,7
   10e08:	af000015 	stw	fp,0(r21)
   10e0c:	ac000115 	stw	r16,4(r21)
   10e10:	dc800e15 	stw	r18,56(sp)
   10e14:	dc400d15 	stw	r17,52(sp)
   10e18:	14418216 	blt	r2,r17,11424 <___vfprintf_internal_r+0xbc8>
   10e1c:	ad400204 	addi	r21,r21,8
   10e20:	d9014c17 	ldw	r4,1328(sp)
   10e24:	2080400c 	andi	r2,r4,256
   10e28:	10004a1e 	bne	r2,zero,10f54 <___vfprintf_internal_r+0x6f8>
   10e2c:	d9414117 	ldw	r5,1284(sp)
   10e30:	91e5883a 	add	r18,r18,r7
   10e34:	8c400044 	addi	r17,r17,1
   10e38:	008001c4 	movi	r2,7
   10e3c:	a9400015 	stw	r5,0(r21)
   10e40:	a9c00115 	stw	r7,4(r21)
   10e44:	dc800e15 	stw	r18,56(sp)
   10e48:	dc400d15 	stw	r17,52(sp)
   10e4c:	14416716 	blt	r2,r17,113ec <___vfprintf_internal_r+0xb90>
   10e50:	a8c00204 	addi	r3,r21,8
   10e54:	d9814c17 	ldw	r6,1328(sp)
   10e58:	3080010c 	andi	r2,r6,4
   10e5c:	10002826 	beq	r2,zero,10f00 <___vfprintf_internal_r+0x6a4>
   10e60:	d8814a17 	ldw	r2,1320(sp)
   10e64:	d9014517 	ldw	r4,1300(sp)
   10e68:	1121c83a 	sub	r16,r2,r4
   10e6c:	0400240e 	bge	zero,r16,10f00 <___vfprintf_internal_r+0x6a4>
   10e70:	00800404 	movi	r2,16
   10e74:	14044f0e 	bge	r2,r16,11fb4 <___vfprintf_internal_r+0x1758>
   10e78:	dc400d17 	ldw	r17,52(sp)
   10e7c:	1027883a 	mov	r19,r2
   10e80:	070000f4 	movhi	fp,3
   10e84:	e7203884 	addi	fp,fp,-32542
   10e88:	050001c4 	movi	r20,7
   10e8c:	00000306 	br	10e9c <___vfprintf_internal_r+0x640>
   10e90:	843ffc04 	addi	r16,r16,-16
   10e94:	18c00204 	addi	r3,r3,8
   10e98:	9c00110e 	bge	r19,r16,10ee0 <___vfprintf_internal_r+0x684>
   10e9c:	94800404 	addi	r18,r18,16
   10ea0:	8c400044 	addi	r17,r17,1
   10ea4:	1f000015 	stw	fp,0(r3)
   10ea8:	1cc00115 	stw	r19,4(r3)
   10eac:	dc800e15 	stw	r18,56(sp)
   10eb0:	dc400d15 	stw	r17,52(sp)
   10eb4:	a47ff60e 	bge	r20,r17,10e90 <___vfprintf_internal_r+0x634>
   10eb8:	d9014f17 	ldw	r4,1340(sp)
   10ebc:	b00b883a 	mov	r5,r22
   10ec0:	d9800c04 	addi	r6,sp,48
   10ec4:	00108040 	call	10804 <__sprint_r>
   10ec8:	10001c1e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   10ecc:	843ffc04 	addi	r16,r16,-16
   10ed0:	dc800e17 	ldw	r18,56(sp)
   10ed4:	dc400d17 	ldw	r17,52(sp)
   10ed8:	d8c01904 	addi	r3,sp,100
   10edc:	9c3fef16 	blt	r19,r16,10e9c <___vfprintf_internal_r+0x640>
   10ee0:	9425883a 	add	r18,r18,r16
   10ee4:	8c400044 	addi	r17,r17,1
   10ee8:	008001c4 	movi	r2,7
   10eec:	1f000015 	stw	fp,0(r3)
   10ef0:	1c000115 	stw	r16,4(r3)
   10ef4:	dc800e15 	stw	r18,56(sp)
   10ef8:	dc400d15 	stw	r17,52(sp)
   10efc:	1440cb16 	blt	r2,r17,1122c <___vfprintf_internal_r+0x9d0>
   10f00:	d8814a17 	ldw	r2,1320(sp)
   10f04:	d9414517 	ldw	r5,1300(sp)
   10f08:	1140010e 	bge	r2,r5,10f10 <___vfprintf_internal_r+0x6b4>
   10f0c:	2805883a 	mov	r2,r5
   10f10:	d9814b17 	ldw	r6,1324(sp)
   10f14:	308d883a 	add	r6,r6,r2
   10f18:	d9814b15 	stw	r6,1324(sp)
   10f1c:	90013b1e 	bne	r18,zero,1140c <___vfprintf_internal_r+0xbb0>
   10f20:	d9c14017 	ldw	r7,1280(sp)
   10f24:	dd401904 	addi	r21,sp,100
   10f28:	d8000d15 	stw	zero,52(sp)
   10f2c:	003ea706 	br	109cc <___vfprintf_internal_r+0x170>
   10f30:	d8800e17 	ldw	r2,56(sp)
   10f34:	10053f1e 	bne	r2,zero,12434 <___vfprintf_internal_r+0x1bd8>
   10f38:	d8000d15 	stw	zero,52(sp)
   10f3c:	b080030b 	ldhu	r2,12(r22)
   10f40:	1080100c 	andi	r2,r2,64
   10f44:	103e8726 	beq	r2,zero,10964 <___vfprintf_internal_r+0x108>
   10f48:	00bfffc4 	movi	r2,-1
   10f4c:	d8814b15 	stw	r2,1324(sp)
   10f50:	003e8406 	br	10964 <___vfprintf_internal_r+0x108>
   10f54:	d9814d17 	ldw	r6,1332(sp)
   10f58:	00801944 	movi	r2,101
   10f5c:	11806e16 	blt	r2,r6,11118 <___vfprintf_internal_r+0x8bc>
   10f60:	d9414717 	ldw	r5,1308(sp)
   10f64:	00c00044 	movi	r3,1
   10f68:	1943430e 	bge	r3,r5,11c78 <___vfprintf_internal_r+0x141c>
   10f6c:	d8814117 	ldw	r2,1284(sp)
   10f70:	94800044 	addi	r18,r18,1
   10f74:	8c400044 	addi	r17,r17,1
   10f78:	a8800015 	stw	r2,0(r21)
   10f7c:	008001c4 	movi	r2,7
   10f80:	a8c00115 	stw	r3,4(r21)
   10f84:	dc800e15 	stw	r18,56(sp)
   10f88:	dc400d15 	stw	r17,52(sp)
   10f8c:	1441ca16 	blt	r2,r17,116b8 <___vfprintf_internal_r+0xe5c>
   10f90:	a8c00204 	addi	r3,r21,8
   10f94:	d9014917 	ldw	r4,1316(sp)
   10f98:	00800044 	movi	r2,1
   10f9c:	94800044 	addi	r18,r18,1
   10fa0:	8c400044 	addi	r17,r17,1
   10fa4:	18800115 	stw	r2,4(r3)
   10fa8:	008001c4 	movi	r2,7
   10fac:	19000015 	stw	r4,0(r3)
   10fb0:	dc800e15 	stw	r18,56(sp)
   10fb4:	dc400d15 	stw	r17,52(sp)
   10fb8:	1441b616 	blt	r2,r17,11694 <___vfprintf_internal_r+0xe38>
   10fbc:	1cc00204 	addi	r19,r3,8
   10fc0:	d9014217 	ldw	r4,1288(sp)
   10fc4:	d9414317 	ldw	r5,1292(sp)
   10fc8:	000d883a 	mov	r6,zero
   10fcc:	000f883a 	mov	r7,zero
   10fd0:	00190ac0 	call	190ac <__nedf2>
   10fd4:	10017426 	beq	r2,zero,115a8 <___vfprintf_internal_r+0xd4c>
   10fd8:	d9414717 	ldw	r5,1308(sp)
   10fdc:	d9814117 	ldw	r6,1284(sp)
   10fe0:	8c400044 	addi	r17,r17,1
   10fe4:	2c85883a 	add	r2,r5,r18
   10fe8:	14bfffc4 	addi	r18,r2,-1
   10fec:	28bfffc4 	addi	r2,r5,-1
   10ff0:	30c00044 	addi	r3,r6,1
   10ff4:	98800115 	stw	r2,4(r19)
   10ff8:	008001c4 	movi	r2,7
   10ffc:	98c00015 	stw	r3,0(r19)
   11000:	dc800e15 	stw	r18,56(sp)
   11004:	dc400d15 	stw	r17,52(sp)
   11008:	14418e16 	blt	r2,r17,11644 <___vfprintf_internal_r+0xde8>
   1100c:	9cc00204 	addi	r19,r19,8
   11010:	d9414817 	ldw	r5,1312(sp)
   11014:	d8800804 	addi	r2,sp,32
   11018:	8c400044 	addi	r17,r17,1
   1101c:	9165883a 	add	r18,r18,r5
   11020:	98800015 	stw	r2,0(r19)
   11024:	008001c4 	movi	r2,7
   11028:	99400115 	stw	r5,4(r19)
   1102c:	dc800e15 	stw	r18,56(sp)
   11030:	dc400d15 	stw	r17,52(sp)
   11034:	1440ed16 	blt	r2,r17,113ec <___vfprintf_internal_r+0xb90>
   11038:	98c00204 	addi	r3,r19,8
   1103c:	003f8506 	br	10e54 <___vfprintf_internal_r+0x5f8>
   11040:	d9814a17 	ldw	r6,1320(sp)
   11044:	d8814517 	ldw	r2,1300(sp)
   11048:	30a1c83a 	sub	r16,r6,r2
   1104c:	043f4b0e 	bge	zero,r16,10d7c <___vfprintf_internal_r+0x520>
   11050:	00800404 	movi	r2,16
   11054:	1404340e 	bge	r2,r16,12128 <___vfprintf_internal_r+0x18cc>
   11058:	1027883a 	mov	r19,r2
   1105c:	070000f4 	movhi	fp,3
   11060:	e7203484 	addi	fp,fp,-32558
   11064:	050001c4 	movi	r20,7
   11068:	00000306 	br	11078 <___vfprintf_internal_r+0x81c>
   1106c:	843ffc04 	addi	r16,r16,-16
   11070:	ad400204 	addi	r21,r21,8
   11074:	9c00130e 	bge	r19,r16,110c4 <___vfprintf_internal_r+0x868>
   11078:	94800404 	addi	r18,r18,16
   1107c:	8c400044 	addi	r17,r17,1
   11080:	af000015 	stw	fp,0(r21)
   11084:	acc00115 	stw	r19,4(r21)
   11088:	dc800e15 	stw	r18,56(sp)
   1108c:	dc400d15 	stw	r17,52(sp)
   11090:	a47ff60e 	bge	r20,r17,1106c <___vfprintf_internal_r+0x810>
   11094:	d9014f17 	ldw	r4,1340(sp)
   11098:	b00b883a 	mov	r5,r22
   1109c:	d9800c04 	addi	r6,sp,48
   110a0:	d9c15115 	stw	r7,1348(sp)
   110a4:	00108040 	call	10804 <__sprint_r>
   110a8:	d9c15117 	ldw	r7,1348(sp)
   110ac:	103fa31e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   110b0:	843ffc04 	addi	r16,r16,-16
   110b4:	dc800e17 	ldw	r18,56(sp)
   110b8:	dc400d17 	ldw	r17,52(sp)
   110bc:	dd401904 	addi	r21,sp,100
   110c0:	9c3fed16 	blt	r19,r16,11078 <___vfprintf_internal_r+0x81c>
   110c4:	9425883a 	add	r18,r18,r16
   110c8:	8c400044 	addi	r17,r17,1
   110cc:	008001c4 	movi	r2,7
   110d0:	af000015 	stw	fp,0(r21)
   110d4:	ac000115 	stw	r16,4(r21)
   110d8:	dc800e15 	stw	r18,56(sp)
   110dc:	dc400d15 	stw	r17,52(sp)
   110e0:	14416116 	blt	r2,r17,11668 <___vfprintf_internal_r+0xe0c>
   110e4:	ad400204 	addi	r21,r21,8
   110e8:	003f2406 	br	10d7c <___vfprintf_internal_r+0x520>
   110ec:	d9014f17 	ldw	r4,1340(sp)
   110f0:	00142cc0 	call	142cc <__sinit>
   110f4:	d9c15117 	ldw	r7,1348(sp)
   110f8:	003def06 	br	108b8 <___vfprintf_internal_r+0x5c>
   110fc:	d9014f17 	ldw	r4,1340(sp)
   11100:	b00b883a 	mov	r5,r22
   11104:	d9c15115 	stw	r7,1348(sp)
   11108:	001272c0 	call	1272c <__swsetup_r>
   1110c:	d9c15117 	ldw	r7,1348(sp)
   11110:	103dee26 	beq	r2,zero,108cc <___vfprintf_internal_r+0x70>
   11114:	003f8c06 	br	10f48 <___vfprintf_internal_r+0x6ec>
   11118:	d9014217 	ldw	r4,1288(sp)
   1111c:	d9414317 	ldw	r5,1292(sp)
   11120:	000d883a 	mov	r6,zero
   11124:	000f883a 	mov	r7,zero
   11128:	00190240 	call	19024 <__eqdf2>
   1112c:	1000f21e 	bne	r2,zero,114f8 <___vfprintf_internal_r+0xc9c>
   11130:	008000f4 	movhi	r2,3
   11134:	10a03404 	addi	r2,r2,-32560
   11138:	94800044 	addi	r18,r18,1
   1113c:	8c400044 	addi	r17,r17,1
   11140:	a8800015 	stw	r2,0(r21)
   11144:	00c00044 	movi	r3,1
   11148:	008001c4 	movi	r2,7
   1114c:	a8c00115 	stw	r3,4(r21)
   11150:	dc800e15 	stw	r18,56(sp)
   11154:	dc400d15 	stw	r17,52(sp)
   11158:	1442fa16 	blt	r2,r17,11d44 <___vfprintf_internal_r+0x14e8>
   1115c:	a8c00204 	addi	r3,r21,8
   11160:	d8800517 	ldw	r2,20(sp)
   11164:	d9014717 	ldw	r4,1308(sp)
   11168:	11015c0e 	bge	r2,r4,116dc <___vfprintf_internal_r+0xe80>
   1116c:	dc400d17 	ldw	r17,52(sp)
   11170:	d9814917 	ldw	r6,1316(sp)
   11174:	00800044 	movi	r2,1
   11178:	94800044 	addi	r18,r18,1
   1117c:	8c400044 	addi	r17,r17,1
   11180:	18800115 	stw	r2,4(r3)
   11184:	008001c4 	movi	r2,7
   11188:	19800015 	stw	r6,0(r3)
   1118c:	dc800e15 	stw	r18,56(sp)
   11190:	dc400d15 	stw	r17,52(sp)
   11194:	14431016 	blt	r2,r17,11dd8 <___vfprintf_internal_r+0x157c>
   11198:	18c00204 	addi	r3,r3,8
   1119c:	d8814717 	ldw	r2,1308(sp)
   111a0:	143fffc4 	addi	r16,r2,-1
   111a4:	043f2b0e 	bge	zero,r16,10e54 <___vfprintf_internal_r+0x5f8>
   111a8:	00800404 	movi	r2,16
   111ac:	1402a20e 	bge	r2,r16,11c38 <___vfprintf_internal_r+0x13dc>
   111b0:	dc400d17 	ldw	r17,52(sp)
   111b4:	1027883a 	mov	r19,r2
   111b8:	070000f4 	movhi	fp,3
   111bc:	e7203484 	addi	fp,fp,-32558
   111c0:	050001c4 	movi	r20,7
   111c4:	00000306 	br	111d4 <___vfprintf_internal_r+0x978>
   111c8:	18c00204 	addi	r3,r3,8
   111cc:	843ffc04 	addi	r16,r16,-16
   111d0:	9c029c0e 	bge	r19,r16,11c44 <___vfprintf_internal_r+0x13e8>
   111d4:	94800404 	addi	r18,r18,16
   111d8:	8c400044 	addi	r17,r17,1
   111dc:	1f000015 	stw	fp,0(r3)
   111e0:	1cc00115 	stw	r19,4(r3)
   111e4:	dc800e15 	stw	r18,56(sp)
   111e8:	dc400d15 	stw	r17,52(sp)
   111ec:	a47ff60e 	bge	r20,r17,111c8 <___vfprintf_internal_r+0x96c>
   111f0:	d9014f17 	ldw	r4,1340(sp)
   111f4:	b00b883a 	mov	r5,r22
   111f8:	d9800c04 	addi	r6,sp,48
   111fc:	00108040 	call	10804 <__sprint_r>
   11200:	103f4e1e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   11204:	dc800e17 	ldw	r18,56(sp)
   11208:	dc400d17 	ldw	r17,52(sp)
   1120c:	d8c01904 	addi	r3,sp,100
   11210:	003fee06 	br	111cc <___vfprintf_internal_r+0x970>
   11214:	d8802c0b 	ldhu	r2,176(sp)
   11218:	00ffffc4 	movi	r3,-1
   1121c:	d8c14b15 	stw	r3,1324(sp)
   11220:	1080100c 	andi	r2,r2,64
   11224:	103dcc1e 	bne	r2,zero,10958 <___vfprintf_internal_r+0xfc>
   11228:	003dce06 	br	10964 <___vfprintf_internal_r+0x108>
   1122c:	d9014f17 	ldw	r4,1340(sp)
   11230:	b00b883a 	mov	r5,r22
   11234:	d9800c04 	addi	r6,sp,48
   11238:	00108040 	call	10804 <__sprint_r>
   1123c:	103f3f1e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   11240:	dc800e17 	ldw	r18,56(sp)
   11244:	003f2e06 	br	10f00 <___vfprintf_internal_r+0x6a4>
   11248:	d9414c17 	ldw	r5,1328(sp)
   1124c:	29400414 	ori	r5,r5,16
   11250:	d9414c15 	stw	r5,1328(sp)
   11254:	d9814c17 	ldw	r6,1328(sp)
   11258:	3080080c 	andi	r2,r6,32
   1125c:	10014f1e 	bne	r2,zero,1179c <___vfprintf_internal_r+0xf40>
   11260:	d8c14c17 	ldw	r3,1328(sp)
   11264:	1880040c 	andi	r2,r3,16
   11268:	1002ea1e 	bne	r2,zero,11e14 <___vfprintf_internal_r+0x15b8>
   1126c:	d9014c17 	ldw	r4,1328(sp)
   11270:	2080100c 	andi	r2,r4,64
   11274:	1002e726 	beq	r2,zero,11e14 <___vfprintf_internal_r+0x15b8>
   11278:	3880000f 	ldh	r2,0(r7)
   1127c:	39c00104 	addi	r7,r7,4
   11280:	d9c14015 	stw	r7,1280(sp)
   11284:	1023d7fa 	srai	r17,r2,31
   11288:	1021883a 	mov	r16,r2
   1128c:	88037216 	blt	r17,zero,12058 <___vfprintf_internal_r+0x17fc>
   11290:	01000044 	movi	r4,1
   11294:	98000416 	blt	r19,zero,112a8 <___vfprintf_internal_r+0xa4c>
   11298:	d8c14c17 	ldw	r3,1328(sp)
   1129c:	00bfdfc4 	movi	r2,-129
   112a0:	1886703a 	and	r3,r3,r2
   112a4:	d8c14c15 	stw	r3,1328(sp)
   112a8:	8444b03a 	or	r2,r16,r17
   112ac:	1002261e 	bne	r2,zero,11b48 <___vfprintf_internal_r+0x12ec>
   112b0:	9802251e 	bne	r19,zero,11b48 <___vfprintf_internal_r+0x12ec>
   112b4:	20803fcc 	andi	r2,r4,255
   112b8:	10029b26 	beq	r2,zero,11d28 <___vfprintf_internal_r+0x14cc>
   112bc:	d8c01904 	addi	r3,sp,100
   112c0:	dd000f04 	addi	r20,sp,60
   112c4:	d8c14115 	stw	r3,1284(sp)
   112c8:	d8c14117 	ldw	r3,1284(sp)
   112cc:	dcc14515 	stw	r19,1300(sp)
   112d0:	a0c5c83a 	sub	r2,r20,r3
   112d4:	11c00a04 	addi	r7,r2,40
   112d8:	99c0010e 	bge	r19,r7,112e0 <___vfprintf_internal_r+0xa84>
   112dc:	d9c14515 	stw	r7,1300(sp)
   112e0:	dcc14615 	stw	r19,1304(sp)
   112e4:	d8800407 	ldb	r2,16(sp)
   112e8:	103e4c26 	beq	r2,zero,10c1c <___vfprintf_internal_r+0x3c0>
   112ec:	d8814517 	ldw	r2,1300(sp)
   112f0:	10800044 	addi	r2,r2,1
   112f4:	d8814515 	stw	r2,1300(sp)
   112f8:	003e4806 	br	10c1c <___vfprintf_internal_r+0x3c0>
   112fc:	d9814c17 	ldw	r6,1328(sp)
   11300:	31800414 	ori	r6,r6,16
   11304:	d9814c15 	stw	r6,1328(sp)
   11308:	d8c14c17 	ldw	r3,1328(sp)
   1130c:	1880080c 	andi	r2,r3,32
   11310:	1001271e 	bne	r2,zero,117b0 <___vfprintf_internal_r+0xf54>
   11314:	d9414c17 	ldw	r5,1328(sp)
   11318:	2880040c 	andi	r2,r5,16
   1131c:	1002b61e 	bne	r2,zero,11df8 <___vfprintf_internal_r+0x159c>
   11320:	d9814c17 	ldw	r6,1328(sp)
   11324:	3080100c 	andi	r2,r6,64
   11328:	1002b326 	beq	r2,zero,11df8 <___vfprintf_internal_r+0x159c>
   1132c:	3c00000b 	ldhu	r16,0(r7)
   11330:	0009883a 	mov	r4,zero
   11334:	39c00104 	addi	r7,r7,4
   11338:	0023883a 	mov	r17,zero
   1133c:	d9c14015 	stw	r7,1280(sp)
   11340:	d8000405 	stb	zero,16(sp)
   11344:	003fd306 	br	11294 <___vfprintf_internal_r+0xa38>
   11348:	d9014c17 	ldw	r4,1328(sp)
   1134c:	21000414 	ori	r4,r4,16
   11350:	d9014c15 	stw	r4,1328(sp)
   11354:	d9414c17 	ldw	r5,1328(sp)
   11358:	2880080c 	andi	r2,r5,32
   1135c:	1001081e 	bne	r2,zero,11780 <___vfprintf_internal_r+0xf24>
   11360:	d8c14c17 	ldw	r3,1328(sp)
   11364:	1880040c 	andi	r2,r3,16
   11368:	1002b01e 	bne	r2,zero,11e2c <___vfprintf_internal_r+0x15d0>
   1136c:	d9014c17 	ldw	r4,1328(sp)
   11370:	2080100c 	andi	r2,r4,64
   11374:	1002ad26 	beq	r2,zero,11e2c <___vfprintf_internal_r+0x15d0>
   11378:	3c00000b 	ldhu	r16,0(r7)
   1137c:	01000044 	movi	r4,1
   11380:	39c00104 	addi	r7,r7,4
   11384:	0023883a 	mov	r17,zero
   11388:	d9c14015 	stw	r7,1280(sp)
   1138c:	d8000405 	stb	zero,16(sp)
   11390:	003fc006 	br	11294 <___vfprintf_internal_r+0xa38>
   11394:	d9014f17 	ldw	r4,1340(sp)
   11398:	b00b883a 	mov	r5,r22
   1139c:	d9800c04 	addi	r6,sp,48
   113a0:	00108040 	call	10804 <__sprint_r>
   113a4:	103ee51e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   113a8:	dc800e17 	ldw	r18,56(sp)
   113ac:	d8c01904 	addi	r3,sp,100
   113b0:	d9814c17 	ldw	r6,1328(sp)
   113b4:	3080004c 	andi	r2,r6,1
   113b8:	1005003a 	cmpeq	r2,r2,zero
   113bc:	103ea51e 	bne	r2,zero,10e54 <___vfprintf_internal_r+0x5f8>
   113c0:	00800044 	movi	r2,1
   113c4:	dc400d17 	ldw	r17,52(sp)
   113c8:	18800115 	stw	r2,4(r3)
   113cc:	d8814917 	ldw	r2,1316(sp)
   113d0:	94800044 	addi	r18,r18,1
   113d4:	8c400044 	addi	r17,r17,1
   113d8:	18800015 	stw	r2,0(r3)
   113dc:	008001c4 	movi	r2,7
   113e0:	dc800e15 	stw	r18,56(sp)
   113e4:	dc400d15 	stw	r17,52(sp)
   113e8:	14421e0e 	bge	r2,r17,11c64 <___vfprintf_internal_r+0x1408>
   113ec:	d9014f17 	ldw	r4,1340(sp)
   113f0:	b00b883a 	mov	r5,r22
   113f4:	d9800c04 	addi	r6,sp,48
   113f8:	00108040 	call	10804 <__sprint_r>
   113fc:	103ecf1e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   11400:	dc800e17 	ldw	r18,56(sp)
   11404:	d8c01904 	addi	r3,sp,100
   11408:	003e9206 	br	10e54 <___vfprintf_internal_r+0x5f8>
   1140c:	d9014f17 	ldw	r4,1340(sp)
   11410:	b00b883a 	mov	r5,r22
   11414:	d9800c04 	addi	r6,sp,48
   11418:	00108040 	call	10804 <__sprint_r>
   1141c:	103ec026 	beq	r2,zero,10f20 <___vfprintf_internal_r+0x6c4>
   11420:	003ec606 	br	10f3c <___vfprintf_internal_r+0x6e0>
   11424:	d9014f17 	ldw	r4,1340(sp)
   11428:	b00b883a 	mov	r5,r22
   1142c:	d9800c04 	addi	r6,sp,48
   11430:	d9c15115 	stw	r7,1348(sp)
   11434:	00108040 	call	10804 <__sprint_r>
   11438:	d9c15117 	ldw	r7,1348(sp)
   1143c:	103ebf1e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   11440:	dc800e17 	ldw	r18,56(sp)
   11444:	dc400d17 	ldw	r17,52(sp)
   11448:	dd401904 	addi	r21,sp,100
   1144c:	003e7406 	br	10e20 <___vfprintf_internal_r+0x5c4>
   11450:	d9014f17 	ldw	r4,1340(sp)
   11454:	b00b883a 	mov	r5,r22
   11458:	d9800c04 	addi	r6,sp,48
   1145c:	d9c15115 	stw	r7,1348(sp)
   11460:	00108040 	call	10804 <__sprint_r>
   11464:	d9c15117 	ldw	r7,1348(sp)
   11468:	103eb41e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   1146c:	dd401904 	addi	r21,sp,100
   11470:	003d6d06 	br	10a28 <___vfprintf_internal_r+0x1cc>
   11474:	d9014f17 	ldw	r4,1340(sp)
   11478:	b00b883a 	mov	r5,r22
   1147c:	d9800c04 	addi	r6,sp,48
   11480:	d9c15115 	stw	r7,1348(sp)
   11484:	00108040 	call	10804 <__sprint_r>
   11488:	d9c15117 	ldw	r7,1348(sp)
   1148c:	103eab1e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   11490:	dc800e17 	ldw	r18,56(sp)
   11494:	dc400d17 	ldw	r17,52(sp)
   11498:	dd401904 	addi	r21,sp,100
   1149c:	003e3406 	br	10d70 <___vfprintf_internal_r+0x514>
   114a0:	d9014f17 	ldw	r4,1340(sp)
   114a4:	b00b883a 	mov	r5,r22
   114a8:	d9800c04 	addi	r6,sp,48
   114ac:	d9c15115 	stw	r7,1348(sp)
   114b0:	00108040 	call	10804 <__sprint_r>
   114b4:	d9c15117 	ldw	r7,1348(sp)
   114b8:	103ea01e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   114bc:	dc800e17 	ldw	r18,56(sp)
   114c0:	dc400d17 	ldw	r17,52(sp)
   114c4:	dd401904 	addi	r21,sp,100
   114c8:	003e1c06 	br	10d3c <___vfprintf_internal_r+0x4e0>
   114cc:	d9014f17 	ldw	r4,1340(sp)
   114d0:	b00b883a 	mov	r5,r22
   114d4:	d9800c04 	addi	r6,sp,48
   114d8:	d9c15115 	stw	r7,1348(sp)
   114dc:	00108040 	call	10804 <__sprint_r>
   114e0:	d9c15117 	ldw	r7,1348(sp)
   114e4:	103e951e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   114e8:	dc800e17 	ldw	r18,56(sp)
   114ec:	dc400d17 	ldw	r17,52(sp)
   114f0:	dd401904 	addi	r21,sp,100
   114f4:	003e0406 	br	10d08 <___vfprintf_internal_r+0x4ac>
   114f8:	d9000517 	ldw	r4,20(sp)
   114fc:	0102520e 	bge	zero,r4,11e48 <___vfprintf_internal_r+0x15ec>
   11500:	d9814717 	ldw	r6,1308(sp)
   11504:	21807a16 	blt	r4,r6,116f0 <___vfprintf_internal_r+0xe94>
   11508:	d8814117 	ldw	r2,1284(sp)
   1150c:	91a5883a 	add	r18,r18,r6
   11510:	8c400044 	addi	r17,r17,1
   11514:	a8800015 	stw	r2,0(r21)
   11518:	008001c4 	movi	r2,7
   1151c:	a9800115 	stw	r6,4(r21)
   11520:	dc800e15 	stw	r18,56(sp)
   11524:	dc400d15 	stw	r17,52(sp)
   11528:	1442f616 	blt	r2,r17,12104 <___vfprintf_internal_r+0x18a8>
   1152c:	a8c00204 	addi	r3,r21,8
   11530:	d9414717 	ldw	r5,1308(sp)
   11534:	2161c83a 	sub	r16,r4,r5
   11538:	043f9d0e 	bge	zero,r16,113b0 <___vfprintf_internal_r+0xb54>
   1153c:	00800404 	movi	r2,16
   11540:	1402130e 	bge	r2,r16,11d90 <___vfprintf_internal_r+0x1534>
   11544:	dc400d17 	ldw	r17,52(sp)
   11548:	1027883a 	mov	r19,r2
   1154c:	070000f4 	movhi	fp,3
   11550:	e7203484 	addi	fp,fp,-32558
   11554:	050001c4 	movi	r20,7
   11558:	00000306 	br	11568 <___vfprintf_internal_r+0xd0c>
   1155c:	18c00204 	addi	r3,r3,8
   11560:	843ffc04 	addi	r16,r16,-16
   11564:	9c020d0e 	bge	r19,r16,11d9c <___vfprintf_internal_r+0x1540>
   11568:	94800404 	addi	r18,r18,16
   1156c:	8c400044 	addi	r17,r17,1
   11570:	1f000015 	stw	fp,0(r3)
   11574:	1cc00115 	stw	r19,4(r3)
   11578:	dc800e15 	stw	r18,56(sp)
   1157c:	dc400d15 	stw	r17,52(sp)
   11580:	a47ff60e 	bge	r20,r17,1155c <___vfprintf_internal_r+0xd00>
   11584:	d9014f17 	ldw	r4,1340(sp)
   11588:	b00b883a 	mov	r5,r22
   1158c:	d9800c04 	addi	r6,sp,48
   11590:	00108040 	call	10804 <__sprint_r>
   11594:	103e691e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   11598:	dc800e17 	ldw	r18,56(sp)
   1159c:	dc400d17 	ldw	r17,52(sp)
   115a0:	d8c01904 	addi	r3,sp,100
   115a4:	003fee06 	br	11560 <___vfprintf_internal_r+0xd04>
   115a8:	d8814717 	ldw	r2,1308(sp)
   115ac:	143fffc4 	addi	r16,r2,-1
   115b0:	043e970e 	bge	zero,r16,11010 <___vfprintf_internal_r+0x7b4>
   115b4:	00800404 	movi	r2,16
   115b8:	1400180e 	bge	r2,r16,1161c <___vfprintf_internal_r+0xdc0>
   115bc:	1029883a 	mov	r20,r2
   115c0:	070000f4 	movhi	fp,3
   115c4:	e7203484 	addi	fp,fp,-32558
   115c8:	054001c4 	movi	r21,7
   115cc:	00000306 	br	115dc <___vfprintf_internal_r+0xd80>
   115d0:	9cc00204 	addi	r19,r19,8
   115d4:	843ffc04 	addi	r16,r16,-16
   115d8:	a400120e 	bge	r20,r16,11624 <___vfprintf_internal_r+0xdc8>
   115dc:	94800404 	addi	r18,r18,16
   115e0:	8c400044 	addi	r17,r17,1
   115e4:	9f000015 	stw	fp,0(r19)
   115e8:	9d000115 	stw	r20,4(r19)
   115ec:	dc800e15 	stw	r18,56(sp)
   115f0:	dc400d15 	stw	r17,52(sp)
   115f4:	ac7ff60e 	bge	r21,r17,115d0 <___vfprintf_internal_r+0xd74>
   115f8:	d9014f17 	ldw	r4,1340(sp)
   115fc:	b00b883a 	mov	r5,r22
   11600:	d9800c04 	addi	r6,sp,48
   11604:	00108040 	call	10804 <__sprint_r>
   11608:	103e4c1e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   1160c:	dc800e17 	ldw	r18,56(sp)
   11610:	dc400d17 	ldw	r17,52(sp)
   11614:	dcc01904 	addi	r19,sp,100
   11618:	003fee06 	br	115d4 <___vfprintf_internal_r+0xd78>
   1161c:	070000f4 	movhi	fp,3
   11620:	e7203484 	addi	fp,fp,-32558
   11624:	9425883a 	add	r18,r18,r16
   11628:	8c400044 	addi	r17,r17,1
   1162c:	008001c4 	movi	r2,7
   11630:	9f000015 	stw	fp,0(r19)
   11634:	9c000115 	stw	r16,4(r19)
   11638:	dc800e15 	stw	r18,56(sp)
   1163c:	dc400d15 	stw	r17,52(sp)
   11640:	147e720e 	bge	r2,r17,1100c <___vfprintf_internal_r+0x7b0>
   11644:	d9014f17 	ldw	r4,1340(sp)
   11648:	b00b883a 	mov	r5,r22
   1164c:	d9800c04 	addi	r6,sp,48
   11650:	00108040 	call	10804 <__sprint_r>
   11654:	103e391e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   11658:	dc800e17 	ldw	r18,56(sp)
   1165c:	dc400d17 	ldw	r17,52(sp)
   11660:	dcc01904 	addi	r19,sp,100
   11664:	003e6a06 	br	11010 <___vfprintf_internal_r+0x7b4>
   11668:	d9014f17 	ldw	r4,1340(sp)
   1166c:	b00b883a 	mov	r5,r22
   11670:	d9800c04 	addi	r6,sp,48
   11674:	d9c15115 	stw	r7,1348(sp)
   11678:	00108040 	call	10804 <__sprint_r>
   1167c:	d9c15117 	ldw	r7,1348(sp)
   11680:	103e2e1e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   11684:	dc800e17 	ldw	r18,56(sp)
   11688:	dc400d17 	ldw	r17,52(sp)
   1168c:	dd401904 	addi	r21,sp,100
   11690:	003dba06 	br	10d7c <___vfprintf_internal_r+0x520>
   11694:	d9014f17 	ldw	r4,1340(sp)
   11698:	b00b883a 	mov	r5,r22
   1169c:	d9800c04 	addi	r6,sp,48
   116a0:	00108040 	call	10804 <__sprint_r>
   116a4:	103e251e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   116a8:	dc800e17 	ldw	r18,56(sp)
   116ac:	dc400d17 	ldw	r17,52(sp)
   116b0:	dcc01904 	addi	r19,sp,100
   116b4:	003e4206 	br	10fc0 <___vfprintf_internal_r+0x764>
   116b8:	d9014f17 	ldw	r4,1340(sp)
   116bc:	b00b883a 	mov	r5,r22
   116c0:	d9800c04 	addi	r6,sp,48
   116c4:	00108040 	call	10804 <__sprint_r>
   116c8:	103e1c1e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   116cc:	dc800e17 	ldw	r18,56(sp)
   116d0:	dc400d17 	ldw	r17,52(sp)
   116d4:	d8c01904 	addi	r3,sp,100
   116d8:	003e2e06 	br	10f94 <___vfprintf_internal_r+0x738>
   116dc:	d9414c17 	ldw	r5,1328(sp)
   116e0:	2880004c 	andi	r2,r5,1
   116e4:	1005003a 	cmpeq	r2,r2,zero
   116e8:	103dda1e 	bne	r2,zero,10e54 <___vfprintf_internal_r+0x5f8>
   116ec:	003e9f06 	br	1116c <___vfprintf_internal_r+0x910>
   116f0:	d8c14117 	ldw	r3,1284(sp)
   116f4:	9125883a 	add	r18,r18,r4
   116f8:	8c400044 	addi	r17,r17,1
   116fc:	008001c4 	movi	r2,7
   11700:	a8c00015 	stw	r3,0(r21)
   11704:	a9000115 	stw	r4,4(r21)
   11708:	dc800e15 	stw	r18,56(sp)
   1170c:	dc400d15 	stw	r17,52(sp)
   11710:	14426616 	blt	r2,r17,120ac <___vfprintf_internal_r+0x1850>
   11714:	a8c00204 	addi	r3,r21,8
   11718:	d9414917 	ldw	r5,1316(sp)
   1171c:	00800044 	movi	r2,1
   11720:	94800044 	addi	r18,r18,1
   11724:	8c400044 	addi	r17,r17,1
   11728:	18800115 	stw	r2,4(r3)
   1172c:	008001c4 	movi	r2,7
   11730:	19400015 	stw	r5,0(r3)
   11734:	dc800e15 	stw	r18,56(sp)
   11738:	dc400d15 	stw	r17,52(sp)
   1173c:	2021883a 	mov	r16,r4
   11740:	14425016 	blt	r2,r17,12084 <___vfprintf_internal_r+0x1828>
   11744:	19400204 	addi	r5,r3,8
   11748:	d9814717 	ldw	r6,1308(sp)
   1174c:	8c400044 	addi	r17,r17,1
   11750:	dc400d15 	stw	r17,52(sp)
   11754:	3107c83a 	sub	r3,r6,r4
   11758:	d9014117 	ldw	r4,1284(sp)
   1175c:	90e5883a 	add	r18,r18,r3
   11760:	28c00115 	stw	r3,4(r5)
   11764:	8105883a 	add	r2,r16,r4
   11768:	28800015 	stw	r2,0(r5)
   1176c:	008001c4 	movi	r2,7
   11770:	dc800e15 	stw	r18,56(sp)
   11774:	147f1d16 	blt	r2,r17,113ec <___vfprintf_internal_r+0xb90>
   11778:	28c00204 	addi	r3,r5,8
   1177c:	003db506 	br	10e54 <___vfprintf_internal_r+0x5f8>
   11780:	3c000017 	ldw	r16,0(r7)
   11784:	3c400117 	ldw	r17,4(r7)
   11788:	39800204 	addi	r6,r7,8
   1178c:	01000044 	movi	r4,1
   11790:	d9814015 	stw	r6,1280(sp)
   11794:	d8000405 	stb	zero,16(sp)
   11798:	003ebe06 	br	11294 <___vfprintf_internal_r+0xa38>
   1179c:	3c000017 	ldw	r16,0(r7)
   117a0:	3c400117 	ldw	r17,4(r7)
   117a4:	38800204 	addi	r2,r7,8
   117a8:	d8814015 	stw	r2,1280(sp)
   117ac:	003eb706 	br	1128c <___vfprintf_internal_r+0xa30>
   117b0:	3c000017 	ldw	r16,0(r7)
   117b4:	3c400117 	ldw	r17,4(r7)
   117b8:	39000204 	addi	r4,r7,8
   117bc:	d9014015 	stw	r4,1280(sp)
   117c0:	0009883a 	mov	r4,zero
   117c4:	d8000405 	stb	zero,16(sp)
   117c8:	003eb206 	br	11294 <___vfprintf_internal_r+0xa38>
   117cc:	38c00017 	ldw	r3,0(r7)
   117d0:	39c00104 	addi	r7,r7,4
   117d4:	d8c14a15 	stw	r3,1320(sp)
   117d8:	1800d10e 	bge	r3,zero,11b20 <___vfprintf_internal_r+0x12c4>
   117dc:	00c7c83a 	sub	r3,zero,r3
   117e0:	d8c14a15 	stw	r3,1320(sp)
   117e4:	d9014c17 	ldw	r4,1328(sp)
   117e8:	b8c00007 	ldb	r3,0(r23)
   117ec:	21000114 	ori	r4,r4,4
   117f0:	d9014c15 	stw	r4,1328(sp)
   117f4:	003c9806 	br	10a58 <___vfprintf_internal_r+0x1fc>
   117f8:	d9814c17 	ldw	r6,1328(sp)
   117fc:	3080080c 	andi	r2,r6,32
   11800:	1001f026 	beq	r2,zero,11fc4 <___vfprintf_internal_r+0x1768>
   11804:	d9014b17 	ldw	r4,1324(sp)
   11808:	38800017 	ldw	r2,0(r7)
   1180c:	39c00104 	addi	r7,r7,4
   11810:	d9c14015 	stw	r7,1280(sp)
   11814:	2007d7fa 	srai	r3,r4,31
   11818:	d9c14017 	ldw	r7,1280(sp)
   1181c:	11000015 	stw	r4,0(r2)
   11820:	10c00115 	stw	r3,4(r2)
   11824:	003c6906 	br	109cc <___vfprintf_internal_r+0x170>
   11828:	b8c00007 	ldb	r3,0(r23)
   1182c:	00801b04 	movi	r2,108
   11830:	18824f26 	beq	r3,r2,12170 <___vfprintf_internal_r+0x1914>
   11834:	d9414c17 	ldw	r5,1328(sp)
   11838:	29400414 	ori	r5,r5,16
   1183c:	d9414c15 	stw	r5,1328(sp)
   11840:	003c8506 	br	10a58 <___vfprintf_internal_r+0x1fc>
   11844:	d9814c17 	ldw	r6,1328(sp)
   11848:	b8c00007 	ldb	r3,0(r23)
   1184c:	31800814 	ori	r6,r6,32
   11850:	d9814c15 	stw	r6,1328(sp)
   11854:	003c8006 	br	10a58 <___vfprintf_internal_r+0x1fc>
   11858:	d8814c17 	ldw	r2,1328(sp)
   1185c:	3c000017 	ldw	r16,0(r7)
   11860:	00c01e04 	movi	r3,120
   11864:	10800094 	ori	r2,r2,2
   11868:	d8814c15 	stw	r2,1328(sp)
   1186c:	39c00104 	addi	r7,r7,4
   11870:	014000f4 	movhi	r5,3
   11874:	29601d04 	addi	r5,r5,-32652
   11878:	00800c04 	movi	r2,48
   1187c:	0023883a 	mov	r17,zero
   11880:	01000084 	movi	r4,2
   11884:	d9c14015 	stw	r7,1280(sp)
   11888:	d8c14d15 	stw	r3,1332(sp)
   1188c:	d9414415 	stw	r5,1296(sp)
   11890:	d8800445 	stb	r2,17(sp)
   11894:	d8c00485 	stb	r3,18(sp)
   11898:	d8000405 	stb	zero,16(sp)
   1189c:	003e7d06 	br	11294 <___vfprintf_internal_r+0xa38>
   118a0:	d8814c17 	ldw	r2,1328(sp)
   118a4:	b8c00007 	ldb	r3,0(r23)
   118a8:	10801014 	ori	r2,r2,64
   118ac:	d8814c15 	stw	r2,1328(sp)
   118b0:	003c6906 	br	10a58 <___vfprintf_internal_r+0x1fc>
   118b4:	d9414c17 	ldw	r5,1328(sp)
   118b8:	2880020c 	andi	r2,r5,8
   118bc:	1001df26 	beq	r2,zero,1203c <___vfprintf_internal_r+0x17e0>
   118c0:	39800017 	ldw	r6,0(r7)
   118c4:	38800204 	addi	r2,r7,8
   118c8:	d8814015 	stw	r2,1280(sp)
   118cc:	d9814215 	stw	r6,1288(sp)
   118d0:	39c00117 	ldw	r7,4(r7)
   118d4:	d9c14315 	stw	r7,1292(sp)
   118d8:	d9014217 	ldw	r4,1288(sp)
   118dc:	d9414317 	ldw	r5,1292(sp)
   118e0:	00171fc0 	call	171fc <__isinfd>
   118e4:	10021726 	beq	r2,zero,12144 <___vfprintf_internal_r+0x18e8>
   118e8:	d9014217 	ldw	r4,1288(sp)
   118ec:	d9414317 	ldw	r5,1292(sp)
   118f0:	000d883a 	mov	r6,zero
   118f4:	000f883a 	mov	r7,zero
   118f8:	00192440 	call	19244 <__ltdf2>
   118fc:	1002ca16 	blt	r2,zero,12428 <___vfprintf_internal_r+0x1bcc>
   11900:	d9414d17 	ldw	r5,1332(sp)
   11904:	008011c4 	movi	r2,71
   11908:	11420a16 	blt	r2,r5,12134 <___vfprintf_internal_r+0x18d8>
   1190c:	018000f4 	movhi	r6,3
   11910:	31a02204 	addi	r6,r6,-32632
   11914:	d9814115 	stw	r6,1284(sp)
   11918:	d9014c17 	ldw	r4,1328(sp)
   1191c:	00c000c4 	movi	r3,3
   11920:	00bfdfc4 	movi	r2,-129
   11924:	2088703a 	and	r4,r4,r2
   11928:	180f883a 	mov	r7,r3
   1192c:	d8c14515 	stw	r3,1300(sp)
   11930:	d9014c15 	stw	r4,1328(sp)
   11934:	d8014615 	stw	zero,1304(sp)
   11938:	003e6a06 	br	112e4 <___vfprintf_internal_r+0xa88>
   1193c:	38800017 	ldw	r2,0(r7)
   11940:	00c00044 	movi	r3,1
   11944:	39c00104 	addi	r7,r7,4
   11948:	d9c14015 	stw	r7,1280(sp)
   1194c:	d9000f04 	addi	r4,sp,60
   11950:	180f883a 	mov	r7,r3
   11954:	d8c14515 	stw	r3,1300(sp)
   11958:	d9014115 	stw	r4,1284(sp)
   1195c:	d8800f05 	stb	r2,60(sp)
   11960:	d8000405 	stb	zero,16(sp)
   11964:	003cac06 	br	10c18 <___vfprintf_internal_r+0x3bc>
   11968:	014000f4 	movhi	r5,3
   1196c:	29602804 	addi	r5,r5,-32608
   11970:	d9414415 	stw	r5,1296(sp)
   11974:	d9814c17 	ldw	r6,1328(sp)
   11978:	3080080c 	andi	r2,r6,32
   1197c:	1000f926 	beq	r2,zero,11d64 <___vfprintf_internal_r+0x1508>
   11980:	3c000017 	ldw	r16,0(r7)
   11984:	3c400117 	ldw	r17,4(r7)
   11988:	38800204 	addi	r2,r7,8
   1198c:	d8814015 	stw	r2,1280(sp)
   11990:	d9414c17 	ldw	r5,1328(sp)
   11994:	2880004c 	andi	r2,r5,1
   11998:	1005003a 	cmpeq	r2,r2,zero
   1199c:	1000b31e 	bne	r2,zero,11c6c <___vfprintf_internal_r+0x1410>
   119a0:	8444b03a 	or	r2,r16,r17
   119a4:	1000b126 	beq	r2,zero,11c6c <___vfprintf_internal_r+0x1410>
   119a8:	d9814d17 	ldw	r6,1332(sp)
   119ac:	29400094 	ori	r5,r5,2
   119b0:	00800c04 	movi	r2,48
   119b4:	01000084 	movi	r4,2
   119b8:	d9414c15 	stw	r5,1328(sp)
   119bc:	d8800445 	stb	r2,17(sp)
   119c0:	d9800485 	stb	r6,18(sp)
   119c4:	d8000405 	stb	zero,16(sp)
   119c8:	003e3206 	br	11294 <___vfprintf_internal_r+0xa38>
   119cc:	018000f4 	movhi	r6,3
   119d0:	31a01d04 	addi	r6,r6,-32652
   119d4:	d9814415 	stw	r6,1296(sp)
   119d8:	003fe606 	br	11974 <___vfprintf_internal_r+0x1118>
   119dc:	00800ac4 	movi	r2,43
   119e0:	d8800405 	stb	r2,16(sp)
   119e4:	b8c00007 	ldb	r3,0(r23)
   119e8:	003c1b06 	br	10a58 <___vfprintf_internal_r+0x1fc>
   119ec:	d8814c17 	ldw	r2,1328(sp)
   119f0:	b8c00007 	ldb	r3,0(r23)
   119f4:	10800054 	ori	r2,r2,1
   119f8:	d8814c15 	stw	r2,1328(sp)
   119fc:	003c1606 	br	10a58 <___vfprintf_internal_r+0x1fc>
   11a00:	d8800407 	ldb	r2,16(sp)
   11a04:	1000461e 	bne	r2,zero,11b20 <___vfprintf_internal_r+0x12c4>
   11a08:	00800804 	movi	r2,32
   11a0c:	d8800405 	stb	r2,16(sp)
   11a10:	b8c00007 	ldb	r3,0(r23)
   11a14:	003c1006 	br	10a58 <___vfprintf_internal_r+0x1fc>
   11a18:	d9814c17 	ldw	r6,1328(sp)
   11a1c:	b8c00007 	ldb	r3,0(r23)
   11a20:	31800214 	ori	r6,r6,8
   11a24:	d9814c15 	stw	r6,1328(sp)
   11a28:	003c0b06 	br	10a58 <___vfprintf_internal_r+0x1fc>
   11a2c:	0007883a 	mov	r3,zero
   11a30:	01000244 	movi	r4,9
   11a34:	188002a4 	muli	r2,r3,10
   11a38:	b8c00007 	ldb	r3,0(r23)
   11a3c:	d9814d17 	ldw	r6,1332(sp)
   11a40:	bdc00044 	addi	r23,r23,1
   11a44:	d8c14d15 	stw	r3,1332(sp)
   11a48:	d9414d17 	ldw	r5,1332(sp)
   11a4c:	3085883a 	add	r2,r6,r2
   11a50:	10fff404 	addi	r3,r2,-48
   11a54:	28bff404 	addi	r2,r5,-48
   11a58:	20bff62e 	bgeu	r4,r2,11a34 <___vfprintf_internal_r+0x11d8>
   11a5c:	d8c14a15 	stw	r3,1320(sp)
   11a60:	003bff06 	br	10a60 <___vfprintf_internal_r+0x204>
   11a64:	d9414c17 	ldw	r5,1328(sp)
   11a68:	b8c00007 	ldb	r3,0(r23)
   11a6c:	29402014 	ori	r5,r5,128
   11a70:	d9414c15 	stw	r5,1328(sp)
   11a74:	003bf806 	br	10a58 <___vfprintf_internal_r+0x1fc>
   11a78:	b8c00007 	ldb	r3,0(r23)
   11a7c:	00800a84 	movi	r2,42
   11a80:	bdc00044 	addi	r23,r23,1
   11a84:	18831526 	beq	r3,r2,126dc <___vfprintf_internal_r+0x1e80>
   11a88:	d8c14d15 	stw	r3,1332(sp)
   11a8c:	18bff404 	addi	r2,r3,-48
   11a90:	00c00244 	movi	r3,9
   11a94:	18827836 	bltu	r3,r2,12478 <___vfprintf_internal_r+0x1c1c>
   11a98:	000d883a 	mov	r6,zero
   11a9c:	308002a4 	muli	r2,r6,10
   11aa0:	b9800007 	ldb	r6,0(r23)
   11aa4:	d9414d17 	ldw	r5,1332(sp)
   11aa8:	bdc00044 	addi	r23,r23,1
   11aac:	d9814d15 	stw	r6,1332(sp)
   11ab0:	d9014d17 	ldw	r4,1332(sp)
   11ab4:	1145883a 	add	r2,r2,r5
   11ab8:	11bff404 	addi	r6,r2,-48
   11abc:	20bff404 	addi	r2,r4,-48
   11ac0:	18bff62e 	bgeu	r3,r2,11a9c <___vfprintf_internal_r+0x1240>
   11ac4:	3027883a 	mov	r19,r6
   11ac8:	303be50e 	bge	r6,zero,10a60 <___vfprintf_internal_r+0x204>
   11acc:	04ffffc4 	movi	r19,-1
   11ad0:	003be306 	br	10a60 <___vfprintf_internal_r+0x204>
   11ad4:	d8000405 	stb	zero,16(sp)
   11ad8:	39800017 	ldw	r6,0(r7)
   11adc:	39c00104 	addi	r7,r7,4
   11ae0:	d9c14015 	stw	r7,1280(sp)
   11ae4:	d9814115 	stw	r6,1284(sp)
   11ae8:	3001c926 	beq	r6,zero,12210 <___vfprintf_internal_r+0x19b4>
   11aec:	98000e16 	blt	r19,zero,11b28 <___vfprintf_internal_r+0x12cc>
   11af0:	d9014117 	ldw	r4,1284(sp)
   11af4:	000b883a 	mov	r5,zero
   11af8:	980d883a 	mov	r6,r19
   11afc:	00159180 	call	15918 <memchr>
   11b00:	10025926 	beq	r2,zero,12468 <___vfprintf_internal_r+0x1c0c>
   11b04:	d8c14117 	ldw	r3,1284(sp)
   11b08:	10cfc83a 	sub	r7,r2,r3
   11b0c:	99c19e16 	blt	r19,r7,12188 <___vfprintf_internal_r+0x192c>
   11b10:	d9c14515 	stw	r7,1300(sp)
   11b14:	38000916 	blt	r7,zero,11b3c <___vfprintf_internal_r+0x12e0>
   11b18:	d8014615 	stw	zero,1304(sp)
   11b1c:	003df106 	br	112e4 <___vfprintf_internal_r+0xa88>
   11b20:	b8c00007 	ldb	r3,0(r23)
   11b24:	003bcc06 	br	10a58 <___vfprintf_internal_r+0x1fc>
   11b28:	d9014117 	ldw	r4,1284(sp)
   11b2c:	00107900 	call	10790 <strlen>
   11b30:	d8814515 	stw	r2,1300(sp)
   11b34:	100f883a 	mov	r7,r2
   11b38:	103ff70e 	bge	r2,zero,11b18 <___vfprintf_internal_r+0x12bc>
   11b3c:	d8014515 	stw	zero,1300(sp)
   11b40:	d8014615 	stw	zero,1304(sp)
   11b44:	003de706 	br	112e4 <___vfprintf_internal_r+0xa88>
   11b48:	20c03fcc 	andi	r3,r4,255
   11b4c:	00800044 	movi	r2,1
   11b50:	18802d26 	beq	r3,r2,11c08 <___vfprintf_internal_r+0x13ac>
   11b54:	18800e36 	bltu	r3,r2,11b90 <___vfprintf_internal_r+0x1334>
   11b58:	00800084 	movi	r2,2
   11b5c:	1880fa26 	beq	r3,r2,11f48 <___vfprintf_internal_r+0x16ec>
   11b60:	010000f4 	movhi	r4,3
   11b64:	21202d04 	addi	r4,r4,-32588
   11b68:	00107900 	call	10790 <strlen>
   11b6c:	100f883a 	mov	r7,r2
   11b70:	dcc14515 	stw	r19,1300(sp)
   11b74:	9880010e 	bge	r19,r2,11b7c <___vfprintf_internal_r+0x1320>
   11b78:	d8814515 	stw	r2,1300(sp)
   11b7c:	008000f4 	movhi	r2,3
   11b80:	10a02d04 	addi	r2,r2,-32588
   11b84:	dcc14615 	stw	r19,1304(sp)
   11b88:	d8814115 	stw	r2,1284(sp)
   11b8c:	003dd506 	br	112e4 <___vfprintf_internal_r+0xa88>
   11b90:	d9401904 	addi	r5,sp,100
   11b94:	dd000f04 	addi	r20,sp,60
   11b98:	d9414115 	stw	r5,1284(sp)
   11b9c:	880a977a 	slli	r5,r17,29
   11ba0:	d9814117 	ldw	r6,1284(sp)
   11ba4:	8004d0fa 	srli	r2,r16,3
   11ba8:	8806d0fa 	srli	r3,r17,3
   11bac:	810001cc 	andi	r4,r16,7
   11bb0:	2884b03a 	or	r2,r5,r2
   11bb4:	31bfffc4 	addi	r6,r6,-1
   11bb8:	21000c04 	addi	r4,r4,48
   11bbc:	d9814115 	stw	r6,1284(sp)
   11bc0:	10cab03a 	or	r5,r2,r3
   11bc4:	31000005 	stb	r4,0(r6)
   11bc8:	1021883a 	mov	r16,r2
   11bcc:	1823883a 	mov	r17,r3
   11bd0:	283ff21e 	bne	r5,zero,11b9c <___vfprintf_internal_r+0x1340>
   11bd4:	d8c14c17 	ldw	r3,1328(sp)
   11bd8:	1880004c 	andi	r2,r3,1
   11bdc:	1005003a 	cmpeq	r2,r2,zero
   11be0:	103db91e 	bne	r2,zero,112c8 <___vfprintf_internal_r+0xa6c>
   11be4:	20803fcc 	andi	r2,r4,255
   11be8:	1080201c 	xori	r2,r2,128
   11bec:	10bfe004 	addi	r2,r2,-128
   11bf0:	00c00c04 	movi	r3,48
   11bf4:	10fdb426 	beq	r2,r3,112c8 <___vfprintf_internal_r+0xa6c>
   11bf8:	31bfffc4 	addi	r6,r6,-1
   11bfc:	d9814115 	stw	r6,1284(sp)
   11c00:	30c00005 	stb	r3,0(r6)
   11c04:	003db006 	br	112c8 <___vfprintf_internal_r+0xa6c>
   11c08:	88800068 	cmpgeui	r2,r17,1
   11c0c:	10002c1e 	bne	r2,zero,11cc0 <___vfprintf_internal_r+0x1464>
   11c10:	8800021e 	bne	r17,zero,11c1c <___vfprintf_internal_r+0x13c0>
   11c14:	00800244 	movi	r2,9
   11c18:	14002936 	bltu	r2,r16,11cc0 <___vfprintf_internal_r+0x1464>
   11c1c:	d90018c4 	addi	r4,sp,99
   11c20:	dd000f04 	addi	r20,sp,60
   11c24:	d9014115 	stw	r4,1284(sp)
   11c28:	d9014117 	ldw	r4,1284(sp)
   11c2c:	80800c04 	addi	r2,r16,48
   11c30:	20800005 	stb	r2,0(r4)
   11c34:	003da406 	br	112c8 <___vfprintf_internal_r+0xa6c>
   11c38:	dc400d17 	ldw	r17,52(sp)
   11c3c:	070000f4 	movhi	fp,3
   11c40:	e7203484 	addi	fp,fp,-32558
   11c44:	9425883a 	add	r18,r18,r16
   11c48:	8c400044 	addi	r17,r17,1
   11c4c:	008001c4 	movi	r2,7
   11c50:	1f000015 	stw	fp,0(r3)
   11c54:	1c000115 	stw	r16,4(r3)
   11c58:	dc800e15 	stw	r18,56(sp)
   11c5c:	dc400d15 	stw	r17,52(sp)
   11c60:	147de216 	blt	r2,r17,113ec <___vfprintf_internal_r+0xb90>
   11c64:	18c00204 	addi	r3,r3,8
   11c68:	003c7a06 	br	10e54 <___vfprintf_internal_r+0x5f8>
   11c6c:	01000084 	movi	r4,2
   11c70:	d8000405 	stb	zero,16(sp)
   11c74:	003d8706 	br	11294 <___vfprintf_internal_r+0xa38>
   11c78:	d9814c17 	ldw	r6,1328(sp)
   11c7c:	30c4703a 	and	r2,r6,r3
   11c80:	1005003a 	cmpeq	r2,r2,zero
   11c84:	103cb926 	beq	r2,zero,10f6c <___vfprintf_internal_r+0x710>
   11c88:	d9014117 	ldw	r4,1284(sp)
   11c8c:	94800044 	addi	r18,r18,1
   11c90:	8c400044 	addi	r17,r17,1
   11c94:	008001c4 	movi	r2,7
   11c98:	a9000015 	stw	r4,0(r21)
   11c9c:	a8c00115 	stw	r3,4(r21)
   11ca0:	dc800e15 	stw	r18,56(sp)
   11ca4:	dc400d15 	stw	r17,52(sp)
   11ca8:	147e6616 	blt	r2,r17,11644 <___vfprintf_internal_r+0xde8>
   11cac:	acc00204 	addi	r19,r21,8
   11cb0:	003cd706 	br	11010 <___vfprintf_internal_r+0x7b4>
   11cb4:	070000f4 	movhi	fp,3
   11cb8:	e7203484 	addi	fp,fp,-32558
   11cbc:	003c4f06 	br	10dfc <___vfprintf_internal_r+0x5a0>
   11cc0:	dd000f04 	addi	r20,sp,60
   11cc4:	dc801904 	addi	r18,sp,100
   11cc8:	8009883a 	mov	r4,r16
   11ccc:	880b883a 	mov	r5,r17
   11cd0:	01800284 	movi	r6,10
   11cd4:	000f883a 	mov	r7,zero
   11cd8:	0017f540 	call	17f54 <__umoddi3>
   11cdc:	12000c04 	addi	r8,r2,48
   11ce0:	94bfffc4 	addi	r18,r18,-1
   11ce4:	8009883a 	mov	r4,r16
   11ce8:	880b883a 	mov	r5,r17
   11cec:	01800284 	movi	r6,10
   11cf0:	000f883a 	mov	r7,zero
   11cf4:	92000005 	stb	r8,0(r18)
   11cf8:	00179780 	call	17978 <__udivdi3>
   11cfc:	1009883a 	mov	r4,r2
   11d00:	1021883a 	mov	r16,r2
   11d04:	18800068 	cmpgeui	r2,r3,1
   11d08:	1823883a 	mov	r17,r3
   11d0c:	103fee1e 	bne	r2,zero,11cc8 <___vfprintf_internal_r+0x146c>
   11d10:	1800021e 	bne	r3,zero,11d1c <___vfprintf_internal_r+0x14c0>
   11d14:	00800244 	movi	r2,9
   11d18:	113feb36 	bltu	r2,r4,11cc8 <___vfprintf_internal_r+0x146c>
   11d1c:	94bfffc4 	addi	r18,r18,-1
   11d20:	dc814115 	stw	r18,1284(sp)
   11d24:	003fc006 	br	11c28 <___vfprintf_internal_r+0x13cc>
   11d28:	d9014c17 	ldw	r4,1328(sp)
   11d2c:	2080004c 	andi	r2,r4,1
   11d30:	10009a1e 	bne	r2,zero,11f9c <___vfprintf_internal_r+0x1740>
   11d34:	d9401904 	addi	r5,sp,100
   11d38:	dd000f04 	addi	r20,sp,60
   11d3c:	d9414115 	stw	r5,1284(sp)
   11d40:	003d6106 	br	112c8 <___vfprintf_internal_r+0xa6c>
   11d44:	d9014f17 	ldw	r4,1340(sp)
   11d48:	b00b883a 	mov	r5,r22
   11d4c:	d9800c04 	addi	r6,sp,48
   11d50:	00108040 	call	10804 <__sprint_r>
   11d54:	103c791e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   11d58:	dc800e17 	ldw	r18,56(sp)
   11d5c:	d8c01904 	addi	r3,sp,100
   11d60:	003cff06 	br	11160 <___vfprintf_internal_r+0x904>
   11d64:	d8c14c17 	ldw	r3,1328(sp)
   11d68:	1880040c 	andi	r2,r3,16
   11d6c:	1000711e 	bne	r2,zero,11f34 <___vfprintf_internal_r+0x16d8>
   11d70:	d9014c17 	ldw	r4,1328(sp)
   11d74:	2080100c 	andi	r2,r4,64
   11d78:	10006e26 	beq	r2,zero,11f34 <___vfprintf_internal_r+0x16d8>
   11d7c:	3c00000b 	ldhu	r16,0(r7)
   11d80:	0023883a 	mov	r17,zero
   11d84:	39c00104 	addi	r7,r7,4
   11d88:	d9c14015 	stw	r7,1280(sp)
   11d8c:	003f0006 	br	11990 <___vfprintf_internal_r+0x1134>
   11d90:	dc400d17 	ldw	r17,52(sp)
   11d94:	070000f4 	movhi	fp,3
   11d98:	e7203484 	addi	fp,fp,-32558
   11d9c:	9425883a 	add	r18,r18,r16
   11da0:	8c400044 	addi	r17,r17,1
   11da4:	008001c4 	movi	r2,7
   11da8:	1f000015 	stw	fp,0(r3)
   11dac:	1c000115 	stw	r16,4(r3)
   11db0:	dc800e15 	stw	r18,56(sp)
   11db4:	dc400d15 	stw	r17,52(sp)
   11db8:	147d7616 	blt	r2,r17,11394 <___vfprintf_internal_r+0xb38>
   11dbc:	18c00204 	addi	r3,r3,8
   11dc0:	003d7b06 	br	113b0 <___vfprintf_internal_r+0xb54>
   11dc4:	dc800e17 	ldw	r18,56(sp)
   11dc8:	dc400d17 	ldw	r17,52(sp)
   11dcc:	070000f4 	movhi	fp,3
   11dd0:	e7203884 	addi	fp,fp,-32542
   11dd4:	003bc006 	br	10cd8 <___vfprintf_internal_r+0x47c>
   11dd8:	d9014f17 	ldw	r4,1340(sp)
   11ddc:	b00b883a 	mov	r5,r22
   11de0:	d9800c04 	addi	r6,sp,48
   11de4:	00108040 	call	10804 <__sprint_r>
   11de8:	103c541e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   11dec:	dc800e17 	ldw	r18,56(sp)
   11df0:	d8c01904 	addi	r3,sp,100
   11df4:	003ce906 	br	1119c <___vfprintf_internal_r+0x940>
   11df8:	3c000017 	ldw	r16,0(r7)
   11dfc:	0009883a 	mov	r4,zero
   11e00:	39c00104 	addi	r7,r7,4
   11e04:	0023883a 	mov	r17,zero
   11e08:	d9c14015 	stw	r7,1280(sp)
   11e0c:	d8000405 	stb	zero,16(sp)
   11e10:	003d2006 	br	11294 <___vfprintf_internal_r+0xa38>
   11e14:	38800017 	ldw	r2,0(r7)
   11e18:	39c00104 	addi	r7,r7,4
   11e1c:	d9c14015 	stw	r7,1280(sp)
   11e20:	1023d7fa 	srai	r17,r2,31
   11e24:	1021883a 	mov	r16,r2
   11e28:	003d1806 	br	1128c <___vfprintf_internal_r+0xa30>
   11e2c:	3c000017 	ldw	r16,0(r7)
   11e30:	01000044 	movi	r4,1
   11e34:	39c00104 	addi	r7,r7,4
   11e38:	0023883a 	mov	r17,zero
   11e3c:	d9c14015 	stw	r7,1280(sp)
   11e40:	d8000405 	stb	zero,16(sp)
   11e44:	003d1306 	br	11294 <___vfprintf_internal_r+0xa38>
   11e48:	008000f4 	movhi	r2,3
   11e4c:	10a03404 	addi	r2,r2,-32560
   11e50:	94800044 	addi	r18,r18,1
   11e54:	8c400044 	addi	r17,r17,1
   11e58:	a8800015 	stw	r2,0(r21)
   11e5c:	00c00044 	movi	r3,1
   11e60:	008001c4 	movi	r2,7
   11e64:	a8c00115 	stw	r3,4(r21)
   11e68:	dc800e15 	stw	r18,56(sp)
   11e6c:	dc400d15 	stw	r17,52(sp)
   11e70:	1440ca16 	blt	r2,r17,1219c <___vfprintf_internal_r+0x1940>
   11e74:	a8c00204 	addi	r3,r21,8
   11e78:	2000061e 	bne	r4,zero,11e94 <___vfprintf_internal_r+0x1638>
   11e7c:	d9414717 	ldw	r5,1308(sp)
   11e80:	2800041e 	bne	r5,zero,11e94 <___vfprintf_internal_r+0x1638>
   11e84:	d9814c17 	ldw	r6,1328(sp)
   11e88:	3080004c 	andi	r2,r6,1
   11e8c:	1005003a 	cmpeq	r2,r2,zero
   11e90:	103bf01e 	bne	r2,zero,10e54 <___vfprintf_internal_r+0x5f8>
   11e94:	00800044 	movi	r2,1
   11e98:	dc400d17 	ldw	r17,52(sp)
   11e9c:	18800115 	stw	r2,4(r3)
   11ea0:	d8814917 	ldw	r2,1316(sp)
   11ea4:	94800044 	addi	r18,r18,1
   11ea8:	8c400044 	addi	r17,r17,1
   11eac:	18800015 	stw	r2,0(r3)
   11eb0:	008001c4 	movi	r2,7
   11eb4:	dc800e15 	stw	r18,56(sp)
   11eb8:	dc400d15 	stw	r17,52(sp)
   11ebc:	1440ca16 	blt	r2,r17,121e8 <___vfprintf_internal_r+0x198c>
   11ec0:	18c00204 	addi	r3,r3,8
   11ec4:	0121c83a 	sub	r16,zero,r4
   11ec8:	0400500e 	bge	zero,r16,1200c <___vfprintf_internal_r+0x17b0>
   11ecc:	00800404 	movi	r2,16
   11ed0:	1400800e 	bge	r2,r16,120d4 <___vfprintf_internal_r+0x1878>
   11ed4:	1027883a 	mov	r19,r2
   11ed8:	070000f4 	movhi	fp,3
   11edc:	e7203484 	addi	fp,fp,-32558
   11ee0:	050001c4 	movi	r20,7
   11ee4:	00000306 	br	11ef4 <___vfprintf_internal_r+0x1698>
   11ee8:	18c00204 	addi	r3,r3,8
   11eec:	843ffc04 	addi	r16,r16,-16
   11ef0:	9c007a0e 	bge	r19,r16,120dc <___vfprintf_internal_r+0x1880>
   11ef4:	94800404 	addi	r18,r18,16
   11ef8:	8c400044 	addi	r17,r17,1
   11efc:	1f000015 	stw	fp,0(r3)
   11f00:	1cc00115 	stw	r19,4(r3)
   11f04:	dc800e15 	stw	r18,56(sp)
   11f08:	dc400d15 	stw	r17,52(sp)
   11f0c:	a47ff60e 	bge	r20,r17,11ee8 <___vfprintf_internal_r+0x168c>
   11f10:	d9014f17 	ldw	r4,1340(sp)
   11f14:	b00b883a 	mov	r5,r22
   11f18:	d9800c04 	addi	r6,sp,48
   11f1c:	00108040 	call	10804 <__sprint_r>
   11f20:	103c061e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   11f24:	dc800e17 	ldw	r18,56(sp)
   11f28:	dc400d17 	ldw	r17,52(sp)
   11f2c:	d8c01904 	addi	r3,sp,100
   11f30:	003fee06 	br	11eec <___vfprintf_internal_r+0x1690>
   11f34:	3c000017 	ldw	r16,0(r7)
   11f38:	0023883a 	mov	r17,zero
   11f3c:	39c00104 	addi	r7,r7,4
   11f40:	d9c14015 	stw	r7,1280(sp)
   11f44:	003e9206 	br	11990 <___vfprintf_internal_r+0x1134>
   11f48:	d9401904 	addi	r5,sp,100
   11f4c:	dd000f04 	addi	r20,sp,60
   11f50:	d9414115 	stw	r5,1284(sp)
   11f54:	d9814417 	ldw	r6,1296(sp)
   11f58:	880a973a 	slli	r5,r17,28
   11f5c:	8004d13a 	srli	r2,r16,4
   11f60:	810003cc 	andi	r4,r16,15
   11f64:	3109883a 	add	r4,r6,r4
   11f68:	2884b03a 	or	r2,r5,r2
   11f6c:	21400003 	ldbu	r5,0(r4)
   11f70:	d9014117 	ldw	r4,1284(sp)
   11f74:	8806d13a 	srli	r3,r17,4
   11f78:	1021883a 	mov	r16,r2
   11f7c:	213fffc4 	addi	r4,r4,-1
   11f80:	d9014115 	stw	r4,1284(sp)
   11f84:	d9814117 	ldw	r6,1284(sp)
   11f88:	10c8b03a 	or	r4,r2,r3
   11f8c:	1823883a 	mov	r17,r3
   11f90:	31400005 	stb	r5,0(r6)
   11f94:	203fef1e 	bne	r4,zero,11f54 <___vfprintf_internal_r+0x16f8>
   11f98:	003ccb06 	br	112c8 <___vfprintf_internal_r+0xa6c>
   11f9c:	00800c04 	movi	r2,48
   11fa0:	d98018c4 	addi	r6,sp,99
   11fa4:	dd000f04 	addi	r20,sp,60
   11fa8:	d88018c5 	stb	r2,99(sp)
   11fac:	d9814115 	stw	r6,1284(sp)
   11fb0:	003cc506 	br	112c8 <___vfprintf_internal_r+0xa6c>
   11fb4:	dc400d17 	ldw	r17,52(sp)
   11fb8:	070000f4 	movhi	fp,3
   11fbc:	e7203884 	addi	fp,fp,-32542
   11fc0:	003bc706 	br	10ee0 <___vfprintf_internal_r+0x684>
   11fc4:	d9414c17 	ldw	r5,1328(sp)
   11fc8:	2880040c 	andi	r2,r5,16
   11fcc:	10007c26 	beq	r2,zero,121c0 <___vfprintf_internal_r+0x1964>
   11fd0:	38800017 	ldw	r2,0(r7)
   11fd4:	39c00104 	addi	r7,r7,4
   11fd8:	d9c14015 	stw	r7,1280(sp)
   11fdc:	d9814b17 	ldw	r6,1324(sp)
   11fe0:	d9c14017 	ldw	r7,1280(sp)
   11fe4:	11800015 	stw	r6,0(r2)
   11fe8:	003a7806 	br	109cc <___vfprintf_internal_r+0x170>
   11fec:	d9014f17 	ldw	r4,1340(sp)
   11ff0:	b00b883a 	mov	r5,r22
   11ff4:	d9800c04 	addi	r6,sp,48
   11ff8:	00108040 	call	10804 <__sprint_r>
   11ffc:	103bcf1e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   12000:	dc800e17 	ldw	r18,56(sp)
   12004:	dc400d17 	ldw	r17,52(sp)
   12008:	d8c01904 	addi	r3,sp,100
   1200c:	d9014717 	ldw	r4,1308(sp)
   12010:	d9414117 	ldw	r5,1284(sp)
   12014:	8c400044 	addi	r17,r17,1
   12018:	9125883a 	add	r18,r18,r4
   1201c:	008001c4 	movi	r2,7
   12020:	19400015 	stw	r5,0(r3)
   12024:	19000115 	stw	r4,4(r3)
   12028:	dc800e15 	stw	r18,56(sp)
   1202c:	dc400d15 	stw	r17,52(sp)
   12030:	147cee16 	blt	r2,r17,113ec <___vfprintf_internal_r+0xb90>
   12034:	18c00204 	addi	r3,r3,8
   12038:	003b8606 	br	10e54 <___vfprintf_internal_r+0x5f8>
   1203c:	38c00017 	ldw	r3,0(r7)
   12040:	39000204 	addi	r4,r7,8
   12044:	d9014015 	stw	r4,1280(sp)
   12048:	d8c14215 	stw	r3,1288(sp)
   1204c:	39c00117 	ldw	r7,4(r7)
   12050:	d9c14315 	stw	r7,1292(sp)
   12054:	003e2006 	br	118d8 <___vfprintf_internal_r+0x107c>
   12058:	0005883a 	mov	r2,zero
   1205c:	1409c83a 	sub	r4,r2,r16
   12060:	1105803a 	cmpltu	r2,r2,r4
   12064:	044bc83a 	sub	r5,zero,r17
   12068:	2885c83a 	sub	r2,r5,r2
   1206c:	2021883a 	mov	r16,r4
   12070:	1023883a 	mov	r17,r2
   12074:	01000044 	movi	r4,1
   12078:	00800b44 	movi	r2,45
   1207c:	d8800405 	stb	r2,16(sp)
   12080:	003c8406 	br	11294 <___vfprintf_internal_r+0xa38>
   12084:	d9014f17 	ldw	r4,1340(sp)
   12088:	b00b883a 	mov	r5,r22
   1208c:	d9800c04 	addi	r6,sp,48
   12090:	00108040 	call	10804 <__sprint_r>
   12094:	103ba91e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   12098:	dc800e17 	ldw	r18,56(sp)
   1209c:	dc400d17 	ldw	r17,52(sp)
   120a0:	d9000517 	ldw	r4,20(sp)
   120a4:	d9401904 	addi	r5,sp,100
   120a8:	003da706 	br	11748 <___vfprintf_internal_r+0xeec>
   120ac:	d9014f17 	ldw	r4,1340(sp)
   120b0:	b00b883a 	mov	r5,r22
   120b4:	d9800c04 	addi	r6,sp,48
   120b8:	00108040 	call	10804 <__sprint_r>
   120bc:	103b9f1e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   120c0:	dc800e17 	ldw	r18,56(sp)
   120c4:	dc400d17 	ldw	r17,52(sp)
   120c8:	d9000517 	ldw	r4,20(sp)
   120cc:	d8c01904 	addi	r3,sp,100
   120d0:	003d9106 	br	11718 <___vfprintf_internal_r+0xebc>
   120d4:	070000f4 	movhi	fp,3
   120d8:	e7203484 	addi	fp,fp,-32558
   120dc:	9425883a 	add	r18,r18,r16
   120e0:	8c400044 	addi	r17,r17,1
   120e4:	008001c4 	movi	r2,7
   120e8:	1f000015 	stw	fp,0(r3)
   120ec:	1c000115 	stw	r16,4(r3)
   120f0:	dc800e15 	stw	r18,56(sp)
   120f4:	dc400d15 	stw	r17,52(sp)
   120f8:	147fbc16 	blt	r2,r17,11fec <___vfprintf_internal_r+0x1790>
   120fc:	18c00204 	addi	r3,r3,8
   12100:	003fc206 	br	1200c <___vfprintf_internal_r+0x17b0>
   12104:	d9014f17 	ldw	r4,1340(sp)
   12108:	b00b883a 	mov	r5,r22
   1210c:	d9800c04 	addi	r6,sp,48
   12110:	00108040 	call	10804 <__sprint_r>
   12114:	103b891e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   12118:	dc800e17 	ldw	r18,56(sp)
   1211c:	d9000517 	ldw	r4,20(sp)
   12120:	d8c01904 	addi	r3,sp,100
   12124:	003d0206 	br	11530 <___vfprintf_internal_r+0xcd4>
   12128:	070000f4 	movhi	fp,3
   1212c:	e7203484 	addi	fp,fp,-32558
   12130:	003be406 	br	110c4 <___vfprintf_internal_r+0x868>
   12134:	008000f4 	movhi	r2,3
   12138:	10a02304 	addi	r2,r2,-32628
   1213c:	d8814115 	stw	r2,1284(sp)
   12140:	003df506 	br	11918 <___vfprintf_internal_r+0x10bc>
   12144:	d9014217 	ldw	r4,1288(sp)
   12148:	d9414317 	ldw	r5,1292(sp)
   1214c:	001723c0 	call	1723c <__isnand>
   12150:	10003926 	beq	r2,zero,12238 <___vfprintf_internal_r+0x19dc>
   12154:	d9414d17 	ldw	r5,1332(sp)
   12158:	008011c4 	movi	r2,71
   1215c:	1140ce16 	blt	r2,r5,12498 <___vfprintf_internal_r+0x1c3c>
   12160:	018000f4 	movhi	r6,3
   12164:	31a02404 	addi	r6,r6,-32624
   12168:	d9814115 	stw	r6,1284(sp)
   1216c:	003dea06 	br	11918 <___vfprintf_internal_r+0x10bc>
   12170:	d9014c17 	ldw	r4,1328(sp)
   12174:	bdc00044 	addi	r23,r23,1
   12178:	b8c00007 	ldb	r3,0(r23)
   1217c:	21000814 	ori	r4,r4,32
   12180:	d9014c15 	stw	r4,1328(sp)
   12184:	003a3406 	br	10a58 <___vfprintf_internal_r+0x1fc>
   12188:	dcc14515 	stw	r19,1300(sp)
   1218c:	98011016 	blt	r19,zero,125d0 <___vfprintf_internal_r+0x1d74>
   12190:	980f883a 	mov	r7,r19
   12194:	d8014615 	stw	zero,1304(sp)
   12198:	003c5206 	br	112e4 <___vfprintf_internal_r+0xa88>
   1219c:	d9014f17 	ldw	r4,1340(sp)
   121a0:	b00b883a 	mov	r5,r22
   121a4:	d9800c04 	addi	r6,sp,48
   121a8:	00108040 	call	10804 <__sprint_r>
   121ac:	103b631e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   121b0:	dc800e17 	ldw	r18,56(sp)
   121b4:	d9000517 	ldw	r4,20(sp)
   121b8:	d8c01904 	addi	r3,sp,100
   121bc:	003f2e06 	br	11e78 <___vfprintf_internal_r+0x161c>
   121c0:	d8c14c17 	ldw	r3,1328(sp)
   121c4:	1880100c 	andi	r2,r3,64
   121c8:	1000a026 	beq	r2,zero,1244c <___vfprintf_internal_r+0x1bf0>
   121cc:	38800017 	ldw	r2,0(r7)
   121d0:	39c00104 	addi	r7,r7,4
   121d4:	d9c14015 	stw	r7,1280(sp)
   121d8:	d9014b17 	ldw	r4,1324(sp)
   121dc:	d9c14017 	ldw	r7,1280(sp)
   121e0:	1100000d 	sth	r4,0(r2)
   121e4:	0039f906 	br	109cc <___vfprintf_internal_r+0x170>
   121e8:	d9014f17 	ldw	r4,1340(sp)
   121ec:	b00b883a 	mov	r5,r22
   121f0:	d9800c04 	addi	r6,sp,48
   121f4:	00108040 	call	10804 <__sprint_r>
   121f8:	103b501e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   121fc:	dc800e17 	ldw	r18,56(sp)
   12200:	dc400d17 	ldw	r17,52(sp)
   12204:	d9000517 	ldw	r4,20(sp)
   12208:	d8c01904 	addi	r3,sp,100
   1220c:	003f2d06 	br	11ec4 <___vfprintf_internal_r+0x1668>
   12210:	00800184 	movi	r2,6
   12214:	14c09a36 	bltu	r2,r19,12480 <___vfprintf_internal_r+0x1c24>
   12218:	dcc14515 	stw	r19,1300(sp)
   1221c:	9800010e 	bge	r19,zero,12224 <___vfprintf_internal_r+0x19c8>
   12220:	d8014515 	stw	zero,1300(sp)
   12224:	008000f4 	movhi	r2,3
   12228:	10a02604 	addi	r2,r2,-32616
   1222c:	980f883a 	mov	r7,r19
   12230:	d8814115 	stw	r2,1284(sp)
   12234:	003a7806 	br	10c18 <___vfprintf_internal_r+0x3bc>
   12238:	00bfffc4 	movi	r2,-1
   1223c:	9880e226 	beq	r19,r2,125c8 <___vfprintf_internal_r+0x1d6c>
   12240:	d9414d17 	ldw	r5,1332(sp)
   12244:	008019c4 	movi	r2,103
   12248:	2880dc26 	beq	r5,r2,125bc <___vfprintf_internal_r+0x1d60>
   1224c:	008011c4 	movi	r2,71
   12250:	2880da26 	beq	r5,r2,125bc <___vfprintf_internal_r+0x1d60>
   12254:	d9414c17 	ldw	r5,1328(sp)
   12258:	d9014317 	ldw	r4,1292(sp)
   1225c:	d9814217 	ldw	r6,1288(sp)
   12260:	29404014 	ori	r5,r5,256
   12264:	d9414c15 	stw	r5,1328(sp)
   12268:	2000cc16 	blt	r4,zero,1259c <___vfprintf_internal_r+0x1d40>
   1226c:	3021883a 	mov	r16,r6
   12270:	2023883a 	mov	r17,r4
   12274:	0039883a 	mov	fp,zero
   12278:	d9414d17 	ldw	r5,1332(sp)
   1227c:	00801984 	movi	r2,102
   12280:	2880b726 	beq	r5,r2,12560 <___vfprintf_internal_r+0x1d04>
   12284:	00801184 	movi	r2,70
   12288:	2880b526 	beq	r5,r2,12560 <___vfprintf_internal_r+0x1d04>
   1228c:	00801944 	movi	r2,101
   12290:	2880c826 	beq	r5,r2,125b4 <___vfprintf_internal_r+0x1d58>
   12294:	00801144 	movi	r2,69
   12298:	2880c626 	beq	r5,r2,125b4 <___vfprintf_internal_r+0x1d58>
   1229c:	9829883a 	mov	r20,r19
   122a0:	d9014f17 	ldw	r4,1340(sp)
   122a4:	d8800504 	addi	r2,sp,20
   122a8:	880d883a 	mov	r6,r17
   122ac:	d8800115 	stw	r2,4(sp)
   122b0:	d8c00604 	addi	r3,sp,24
   122b4:	d8800704 	addi	r2,sp,28
   122b8:	800b883a 	mov	r5,r16
   122bc:	01c00084 	movi	r7,2
   122c0:	d8c00215 	stw	r3,8(sp)
   122c4:	d8800315 	stw	r2,12(sp)
   122c8:	dd000015 	stw	r20,0(sp)
   122cc:	0012a800 	call	12a80 <_dtoa_r>
   122d0:	d9814d17 	ldw	r6,1332(sp)
   122d4:	d8814115 	stw	r2,1284(sp)
   122d8:	008019c4 	movi	r2,103
   122dc:	30809526 	beq	r6,r2,12534 <___vfprintf_internal_r+0x1cd8>
   122e0:	d8c14d17 	ldw	r3,1332(sp)
   122e4:	008011c4 	movi	r2,71
   122e8:	18809226 	beq	r3,r2,12534 <___vfprintf_internal_r+0x1cd8>
   122ec:	d9414117 	ldw	r5,1284(sp)
   122f0:	d9814d17 	ldw	r6,1332(sp)
   122f4:	00801984 	movi	r2,102
   122f8:	2d25883a 	add	r18,r5,r20
   122fc:	30808626 	beq	r6,r2,12518 <___vfprintf_internal_r+0x1cbc>
   12300:	00801184 	movi	r2,70
   12304:	30808426 	beq	r6,r2,12518 <___vfprintf_internal_r+0x1cbc>
   12308:	000d883a 	mov	r6,zero
   1230c:	000f883a 	mov	r7,zero
   12310:	880b883a 	mov	r5,r17
   12314:	8009883a 	mov	r4,r16
   12318:	00190240 	call	19024 <__eqdf2>
   1231c:	1000751e 	bne	r2,zero,124f4 <___vfprintf_internal_r+0x1c98>
   12320:	9005883a 	mov	r2,r18
   12324:	dc800715 	stw	r18,28(sp)
   12328:	d9014117 	ldw	r4,1284(sp)
   1232c:	d9414d17 	ldw	r5,1332(sp)
   12330:	00c019c4 	movi	r3,103
   12334:	1125c83a 	sub	r18,r2,r4
   12338:	28c06826 	beq	r5,r3,124dc <___vfprintf_internal_r+0x1c80>
   1233c:	008011c4 	movi	r2,71
   12340:	28806626 	beq	r5,r2,124dc <___vfprintf_internal_r+0x1c80>
   12344:	d9000517 	ldw	r4,20(sp)
   12348:	d8c14d17 	ldw	r3,1332(sp)
   1234c:	00801944 	movi	r2,101
   12350:	10c05516 	blt	r2,r3,124a8 <___vfprintf_internal_r+0x1c4c>
   12354:	213fffc4 	addi	r4,r4,-1
   12358:	d9000515 	stw	r4,20(sp)
   1235c:	d8c00805 	stb	r3,32(sp)
   12360:	2021883a 	mov	r16,r4
   12364:	2000c116 	blt	r4,zero,1266c <___vfprintf_internal_r+0x1e10>
   12368:	00800ac4 	movi	r2,43
   1236c:	d8800845 	stb	r2,33(sp)
   12370:	00800244 	movi	r2,9
   12374:	1400af0e 	bge	r2,r16,12634 <___vfprintf_internal_r+0x1dd8>
   12378:	1027883a 	mov	r19,r2
   1237c:	dc400b84 	addi	r17,sp,46
   12380:	8009883a 	mov	r4,r16
   12384:	01400284 	movi	r5,10
   12388:	001970c0 	call	1970c <__modsi3>
   1238c:	10800c04 	addi	r2,r2,48
   12390:	8c7fffc4 	addi	r17,r17,-1
   12394:	8009883a 	mov	r4,r16
   12398:	01400284 	movi	r5,10
   1239c:	88800005 	stb	r2,0(r17)
   123a0:	00196ac0 	call	196ac <__divsi3>
   123a4:	1021883a 	mov	r16,r2
   123a8:	98bff516 	blt	r19,r2,12380 <___vfprintf_internal_r+0x1b24>
   123ac:	10c00c04 	addi	r3,r2,48
   123b0:	d88009c4 	addi	r2,sp,39
   123b4:	108001c4 	addi	r2,r2,7
   123b8:	897fffc4 	addi	r5,r17,-1
   123bc:	88ffffc5 	stb	r3,-1(r17)
   123c0:	2880a72e 	bgeu	r5,r2,12660 <___vfprintf_internal_r+0x1e04>
   123c4:	1009883a 	mov	r4,r2
   123c8:	d9800804 	addi	r6,sp,32
   123cc:	d8c00884 	addi	r3,sp,34
   123d0:	28800003 	ldbu	r2,0(r5)
   123d4:	29400044 	addi	r5,r5,1
   123d8:	18800005 	stb	r2,0(r3)
   123dc:	18c00044 	addi	r3,r3,1
   123e0:	293ffb36 	bltu	r5,r4,123d0 <___vfprintf_internal_r+0x1b74>
   123e4:	1987c83a 	sub	r3,r3,r6
   123e8:	00800044 	movi	r2,1
   123ec:	d8c14815 	stw	r3,1312(sp)
   123f0:	90cf883a 	add	r7,r18,r3
   123f4:	1480960e 	bge	r2,r18,12650 <___vfprintf_internal_r+0x1df4>
   123f8:	39c00044 	addi	r7,r7,1
   123fc:	d9c14515 	stw	r7,1300(sp)
   12400:	38003416 	blt	r7,zero,124d4 <___vfprintf_internal_r+0x1c78>
   12404:	e0803fcc 	andi	r2,fp,255
   12408:	1080201c 	xori	r2,r2,128
   1240c:	10bfe004 	addi	r2,r2,-128
   12410:	10004e26 	beq	r2,zero,1254c <___vfprintf_internal_r+0x1cf0>
   12414:	00800b44 	movi	r2,45
   12418:	dc814715 	stw	r18,1308(sp)
   1241c:	d8014615 	stw	zero,1304(sp)
   12420:	d8800405 	stb	r2,16(sp)
   12424:	003bb106 	br	112ec <___vfprintf_internal_r+0xa90>
   12428:	00800b44 	movi	r2,45
   1242c:	d8800405 	stb	r2,16(sp)
   12430:	003d3306 	br	11900 <___vfprintf_internal_r+0x10a4>
   12434:	d9014f17 	ldw	r4,1340(sp)
   12438:	b00b883a 	mov	r5,r22
   1243c:	d9800c04 	addi	r6,sp,48
   12440:	00108040 	call	10804 <__sprint_r>
   12444:	103abd1e 	bne	r2,zero,10f3c <___vfprintf_internal_r+0x6e0>
   12448:	003abb06 	br	10f38 <___vfprintf_internal_r+0x6dc>
   1244c:	38800017 	ldw	r2,0(r7)
   12450:	39c00104 	addi	r7,r7,4
   12454:	d9c14015 	stw	r7,1280(sp)
   12458:	d9414b17 	ldw	r5,1324(sp)
   1245c:	d9c14017 	ldw	r7,1280(sp)
   12460:	11400015 	stw	r5,0(r2)
   12464:	00395906 	br	109cc <___vfprintf_internal_r+0x170>
   12468:	980f883a 	mov	r7,r19
   1246c:	dcc14515 	stw	r19,1300(sp)
   12470:	d8014615 	stw	zero,1304(sp)
   12474:	003b9b06 	br	112e4 <___vfprintf_internal_r+0xa88>
   12478:	0027883a 	mov	r19,zero
   1247c:	00397806 	br	10a60 <___vfprintf_internal_r+0x204>
   12480:	00c000f4 	movhi	r3,3
   12484:	18e02604 	addi	r3,r3,-32616
   12488:	100f883a 	mov	r7,r2
   1248c:	d8814515 	stw	r2,1300(sp)
   12490:	d8c14115 	stw	r3,1284(sp)
   12494:	0039e006 	br	10c18 <___vfprintf_internal_r+0x3bc>
   12498:	008000f4 	movhi	r2,3
   1249c:	10a02504 	addi	r2,r2,-32620
   124a0:	d8814115 	stw	r2,1284(sp)
   124a4:	003d1c06 	br	11918 <___vfprintf_internal_r+0x10bc>
   124a8:	d9414d17 	ldw	r5,1332(sp)
   124ac:	00801984 	movi	r2,102
   124b0:	28804926 	beq	r5,r2,125d8 <___vfprintf_internal_r+0x1d7c>
   124b4:	200f883a 	mov	r7,r4
   124b8:	24805716 	blt	r4,r18,12618 <___vfprintf_internal_r+0x1dbc>
   124bc:	d9414c17 	ldw	r5,1328(sp)
   124c0:	2880004c 	andi	r2,r5,1
   124c4:	10000126 	beq	r2,zero,124cc <___vfprintf_internal_r+0x1c70>
   124c8:	21c00044 	addi	r7,r4,1
   124cc:	d9c14515 	stw	r7,1300(sp)
   124d0:	383fcc0e 	bge	r7,zero,12404 <___vfprintf_internal_r+0x1ba8>
   124d4:	d8014515 	stw	zero,1300(sp)
   124d8:	003fca06 	br	12404 <___vfprintf_internal_r+0x1ba8>
   124dc:	d9000517 	ldw	r4,20(sp)
   124e0:	00bfff04 	movi	r2,-4
   124e4:	1100480e 	bge	r2,r4,12608 <___vfprintf_internal_r+0x1dac>
   124e8:	99004716 	blt	r19,r4,12608 <___vfprintf_internal_r+0x1dac>
   124ec:	d8c14d15 	stw	r3,1332(sp)
   124f0:	003ff006 	br	124b4 <___vfprintf_internal_r+0x1c58>
   124f4:	d8800717 	ldw	r2,28(sp)
   124f8:	14bf8b2e 	bgeu	r2,r18,12328 <___vfprintf_internal_r+0x1acc>
   124fc:	9007883a 	mov	r3,r18
   12500:	01000c04 	movi	r4,48
   12504:	11000005 	stb	r4,0(r2)
   12508:	10800044 	addi	r2,r2,1
   1250c:	d8800715 	stw	r2,28(sp)
   12510:	18bffc1e 	bne	r3,r2,12504 <___vfprintf_internal_r+0x1ca8>
   12514:	003f8406 	br	12328 <___vfprintf_internal_r+0x1acc>
   12518:	d8814117 	ldw	r2,1284(sp)
   1251c:	10c00007 	ldb	r3,0(r2)
   12520:	00800c04 	movi	r2,48
   12524:	18805b26 	beq	r3,r2,12694 <___vfprintf_internal_r+0x1e38>
   12528:	d9000517 	ldw	r4,20(sp)
   1252c:	9125883a 	add	r18,r18,r4
   12530:	003f7506 	br	12308 <___vfprintf_internal_r+0x1aac>
   12534:	d9014c17 	ldw	r4,1328(sp)
   12538:	2080004c 	andi	r2,r4,1
   1253c:	1005003a 	cmpeq	r2,r2,zero
   12540:	103f6a26 	beq	r2,zero,122ec <___vfprintf_internal_r+0x1a90>
   12544:	d8800717 	ldw	r2,28(sp)
   12548:	003f7706 	br	12328 <___vfprintf_internal_r+0x1acc>
   1254c:	d9c14515 	stw	r7,1300(sp)
   12550:	38004d16 	blt	r7,zero,12688 <___vfprintf_internal_r+0x1e2c>
   12554:	dc814715 	stw	r18,1308(sp)
   12558:	d8014615 	stw	zero,1304(sp)
   1255c:	003b6106 	br	112e4 <___vfprintf_internal_r+0xa88>
   12560:	d9014f17 	ldw	r4,1340(sp)
   12564:	d8800504 	addi	r2,sp,20
   12568:	d8800115 	stw	r2,4(sp)
   1256c:	d8c00604 	addi	r3,sp,24
   12570:	d8800704 	addi	r2,sp,28
   12574:	800b883a 	mov	r5,r16
   12578:	880d883a 	mov	r6,r17
   1257c:	01c000c4 	movi	r7,3
   12580:	d8c00215 	stw	r3,8(sp)
   12584:	d8800315 	stw	r2,12(sp)
   12588:	dcc00015 	stw	r19,0(sp)
   1258c:	9829883a 	mov	r20,r19
   12590:	0012a800 	call	12a80 <_dtoa_r>
   12594:	d8814115 	stw	r2,1284(sp)
   12598:	003f5106 	br	122e0 <___vfprintf_internal_r+0x1a84>
   1259c:	d8c14217 	ldw	r3,1288(sp)
   125a0:	d9014317 	ldw	r4,1292(sp)
   125a4:	07000b44 	movi	fp,45
   125a8:	1821883a 	mov	r16,r3
   125ac:	2460003c 	xorhi	r17,r4,32768
   125b0:	003f3106 	br	12278 <___vfprintf_internal_r+0x1a1c>
   125b4:	9d000044 	addi	r20,r19,1
   125b8:	003f3906 	br	122a0 <___vfprintf_internal_r+0x1a44>
   125bc:	983f251e 	bne	r19,zero,12254 <___vfprintf_internal_r+0x19f8>
   125c0:	04c00044 	movi	r19,1
   125c4:	003f2306 	br	12254 <___vfprintf_internal_r+0x19f8>
   125c8:	04c00184 	movi	r19,6
   125cc:	003f2106 	br	12254 <___vfprintf_internal_r+0x19f8>
   125d0:	d8014515 	stw	zero,1300(sp)
   125d4:	003eee06 	br	12190 <___vfprintf_internal_r+0x1934>
   125d8:	200f883a 	mov	r7,r4
   125dc:	0100370e 	bge	zero,r4,126bc <___vfprintf_internal_r+0x1e60>
   125e0:	9800031e 	bne	r19,zero,125f0 <___vfprintf_internal_r+0x1d94>
   125e4:	d9814c17 	ldw	r6,1328(sp)
   125e8:	3080004c 	andi	r2,r6,1
   125ec:	103fb726 	beq	r2,zero,124cc <___vfprintf_internal_r+0x1c70>
   125f0:	20800044 	addi	r2,r4,1
   125f4:	98a7883a 	add	r19,r19,r2
   125f8:	dcc14515 	stw	r19,1300(sp)
   125fc:	980f883a 	mov	r7,r19
   12600:	983f800e 	bge	r19,zero,12404 <___vfprintf_internal_r+0x1ba8>
   12604:	003fb306 	br	124d4 <___vfprintf_internal_r+0x1c78>
   12608:	d9814d17 	ldw	r6,1332(sp)
   1260c:	31bfff84 	addi	r6,r6,-2
   12610:	d9814d15 	stw	r6,1332(sp)
   12614:	003f4c06 	br	12348 <___vfprintf_internal_r+0x1aec>
   12618:	0100180e 	bge	zero,r4,1267c <___vfprintf_internal_r+0x1e20>
   1261c:	00800044 	movi	r2,1
   12620:	1485883a 	add	r2,r2,r18
   12624:	d8814515 	stw	r2,1300(sp)
   12628:	100f883a 	mov	r7,r2
   1262c:	103f750e 	bge	r2,zero,12404 <___vfprintf_internal_r+0x1ba8>
   12630:	003fa806 	br	124d4 <___vfprintf_internal_r+0x1c78>
   12634:	80c00c04 	addi	r3,r16,48
   12638:	00800c04 	movi	r2,48
   1263c:	d8c008c5 	stb	r3,35(sp)
   12640:	d9800804 	addi	r6,sp,32
   12644:	d8c00904 	addi	r3,sp,36
   12648:	d8800885 	stb	r2,34(sp)
   1264c:	003f6506 	br	123e4 <___vfprintf_internal_r+0x1b88>
   12650:	d9014c17 	ldw	r4,1328(sp)
   12654:	2084703a 	and	r2,r4,r2
   12658:	103f9c26 	beq	r2,zero,124cc <___vfprintf_internal_r+0x1c70>
   1265c:	003f6606 	br	123f8 <___vfprintf_internal_r+0x1b9c>
   12660:	d9800804 	addi	r6,sp,32
   12664:	d8c00884 	addi	r3,sp,34
   12668:	003f5e06 	br	123e4 <___vfprintf_internal_r+0x1b88>
   1266c:	00800b44 	movi	r2,45
   12670:	0121c83a 	sub	r16,zero,r4
   12674:	d8800845 	stb	r2,33(sp)
   12678:	003f3d06 	br	12370 <___vfprintf_internal_r+0x1b14>
   1267c:	00800084 	movi	r2,2
   12680:	1105c83a 	sub	r2,r2,r4
   12684:	003fe606 	br	12620 <___vfprintf_internal_r+0x1dc4>
   12688:	d8014515 	stw	zero,1300(sp)
   1268c:	dc814715 	stw	r18,1308(sp)
   12690:	003fb106 	br	12558 <___vfprintf_internal_r+0x1cfc>
   12694:	000d883a 	mov	r6,zero
   12698:	000f883a 	mov	r7,zero
   1269c:	8009883a 	mov	r4,r16
   126a0:	880b883a 	mov	r5,r17
   126a4:	00190ac0 	call	190ac <__nedf2>
   126a8:	103f9f26 	beq	r2,zero,12528 <___vfprintf_internal_r+0x1ccc>
   126ac:	00800044 	movi	r2,1
   126b0:	1509c83a 	sub	r4,r2,r20
   126b4:	d9000515 	stw	r4,20(sp)
   126b8:	003f9b06 	br	12528 <___vfprintf_internal_r+0x1ccc>
   126bc:	98000d1e 	bne	r19,zero,126f4 <___vfprintf_internal_r+0x1e98>
   126c0:	d8c14c17 	ldw	r3,1328(sp)
   126c4:	1880004c 	andi	r2,r3,1
   126c8:	10000a1e 	bne	r2,zero,126f4 <___vfprintf_internal_r+0x1e98>
   126cc:	01000044 	movi	r4,1
   126d0:	200f883a 	mov	r7,r4
   126d4:	d9014515 	stw	r4,1300(sp)
   126d8:	003f4a06 	br	12404 <___vfprintf_internal_r+0x1ba8>
   126dc:	3cc00017 	ldw	r19,0(r7)
   126e0:	39c00104 	addi	r7,r7,4
   126e4:	983d0e0e 	bge	r19,zero,11b20 <___vfprintf_internal_r+0x12c4>
   126e8:	b8c00007 	ldb	r3,0(r23)
   126ec:	04ffffc4 	movi	r19,-1
   126f0:	0038d906 	br	10a58 <___vfprintf_internal_r+0x1fc>
   126f4:	9cc00084 	addi	r19,r19,2
   126f8:	dcc14515 	stw	r19,1300(sp)
   126fc:	980f883a 	mov	r7,r19
   12700:	983f400e 	bge	r19,zero,12404 <___vfprintf_internal_r+0x1ba8>
   12704:	003f7306 	br	124d4 <___vfprintf_internal_r+0x1c78>

00012708 <__vfprintf_internal>:
   12708:	008000f4 	movhi	r2,3
   1270c:	10a77404 	addi	r2,r2,-25136
   12710:	2013883a 	mov	r9,r4
   12714:	11000017 	ldw	r4,0(r2)
   12718:	2805883a 	mov	r2,r5
   1271c:	300f883a 	mov	r7,r6
   12720:	480b883a 	mov	r5,r9
   12724:	100d883a 	mov	r6,r2
   12728:	001085c1 	jmpi	1085c <___vfprintf_internal_r>

0001272c <__swsetup_r>:
   1272c:	008000f4 	movhi	r2,3
   12730:	10a77404 	addi	r2,r2,-25136
   12734:	10c00017 	ldw	r3,0(r2)
   12738:	defffd04 	addi	sp,sp,-12
   1273c:	dc400115 	stw	r17,4(sp)
   12740:	dc000015 	stw	r16,0(sp)
   12744:	dfc00215 	stw	ra,8(sp)
   12748:	2023883a 	mov	r17,r4
   1274c:	2821883a 	mov	r16,r5
   12750:	18000226 	beq	r3,zero,1275c <__swsetup_r+0x30>
   12754:	18800e17 	ldw	r2,56(r3)
   12758:	10001f26 	beq	r2,zero,127d8 <__swsetup_r+0xac>
   1275c:	8100030b 	ldhu	r4,12(r16)
   12760:	2080020c 	andi	r2,r4,8
   12764:	10002826 	beq	r2,zero,12808 <__swsetup_r+0xdc>
   12768:	81400417 	ldw	r5,16(r16)
   1276c:	28001d26 	beq	r5,zero,127e4 <__swsetup_r+0xb8>
   12770:	2080004c 	andi	r2,r4,1
   12774:	1005003a 	cmpeq	r2,r2,zero
   12778:	10000b26 	beq	r2,zero,127a8 <__swsetup_r+0x7c>
   1277c:	2080008c 	andi	r2,r4,2
   12780:	10001226 	beq	r2,zero,127cc <__swsetup_r+0xa0>
   12784:	0005883a 	mov	r2,zero
   12788:	80800215 	stw	r2,8(r16)
   1278c:	28000b26 	beq	r5,zero,127bc <__swsetup_r+0x90>
   12790:	0005883a 	mov	r2,zero
   12794:	dfc00217 	ldw	ra,8(sp)
   12798:	dc400117 	ldw	r17,4(sp)
   1279c:	dc000017 	ldw	r16,0(sp)
   127a0:	dec00304 	addi	sp,sp,12
   127a4:	f800283a 	ret
   127a8:	80800517 	ldw	r2,20(r16)
   127ac:	80000215 	stw	zero,8(r16)
   127b0:	0085c83a 	sub	r2,zero,r2
   127b4:	80800615 	stw	r2,24(r16)
   127b8:	283ff51e 	bne	r5,zero,12790 <__swsetup_r+0x64>
   127bc:	2080200c 	andi	r2,r4,128
   127c0:	103ff326 	beq	r2,zero,12790 <__swsetup_r+0x64>
   127c4:	00bfffc4 	movi	r2,-1
   127c8:	003ff206 	br	12794 <__swsetup_r+0x68>
   127cc:	80800517 	ldw	r2,20(r16)
   127d0:	80800215 	stw	r2,8(r16)
   127d4:	003fed06 	br	1278c <__swsetup_r+0x60>
   127d8:	1809883a 	mov	r4,r3
   127dc:	00142cc0 	call	142cc <__sinit>
   127e0:	003fde06 	br	1275c <__swsetup_r+0x30>
   127e4:	20c0a00c 	andi	r3,r4,640
   127e8:	00808004 	movi	r2,512
   127ec:	18bfe026 	beq	r3,r2,12770 <__swsetup_r+0x44>
   127f0:	8809883a 	mov	r4,r17
   127f4:	800b883a 	mov	r5,r16
   127f8:	00150440 	call	15044 <__smakebuf_r>
   127fc:	8100030b 	ldhu	r4,12(r16)
   12800:	81400417 	ldw	r5,16(r16)
   12804:	003fda06 	br	12770 <__swsetup_r+0x44>
   12808:	2080040c 	andi	r2,r4,16
   1280c:	103fed26 	beq	r2,zero,127c4 <__swsetup_r+0x98>
   12810:	2080010c 	andi	r2,r4,4
   12814:	10001226 	beq	r2,zero,12860 <__swsetup_r+0x134>
   12818:	81400c17 	ldw	r5,48(r16)
   1281c:	28000526 	beq	r5,zero,12834 <__swsetup_r+0x108>
   12820:	80801004 	addi	r2,r16,64
   12824:	28800226 	beq	r5,r2,12830 <__swsetup_r+0x104>
   12828:	8809883a 	mov	r4,r17
   1282c:	00146500 	call	14650 <_free_r>
   12830:	80000c15 	stw	zero,48(r16)
   12834:	8080030b 	ldhu	r2,12(r16)
   12838:	81400417 	ldw	r5,16(r16)
   1283c:	80000115 	stw	zero,4(r16)
   12840:	10bff6cc 	andi	r2,r2,65499
   12844:	8080030d 	sth	r2,12(r16)
   12848:	81400015 	stw	r5,0(r16)
   1284c:	8080030b 	ldhu	r2,12(r16)
   12850:	10800214 	ori	r2,r2,8
   12854:	113fffcc 	andi	r4,r2,65535
   12858:	8080030d 	sth	r2,12(r16)
   1285c:	003fc306 	br	1276c <__swsetup_r+0x40>
   12860:	81400417 	ldw	r5,16(r16)
   12864:	003ff906 	br	1284c <__swsetup_r+0x120>

00012868 <quorem>:
   12868:	28c00417 	ldw	r3,16(r5)
   1286c:	20800417 	ldw	r2,16(r4)
   12870:	defff604 	addi	sp,sp,-40
   12874:	ddc00715 	stw	r23,28(sp)
   12878:	dd400515 	stw	r21,20(sp)
   1287c:	dfc00915 	stw	ra,36(sp)
   12880:	df000815 	stw	fp,32(sp)
   12884:	dd800615 	stw	r22,24(sp)
   12888:	dd000415 	stw	r20,16(sp)
   1288c:	dcc00315 	stw	r19,12(sp)
   12890:	dc800215 	stw	r18,8(sp)
   12894:	dc400115 	stw	r17,4(sp)
   12898:	dc000015 	stw	r16,0(sp)
   1289c:	202f883a 	mov	r23,r4
   128a0:	282b883a 	mov	r21,r5
   128a4:	10c07416 	blt	r2,r3,12a78 <quorem+0x210>
   128a8:	1c7fffc4 	addi	r17,r3,-1
   128ac:	8c45883a 	add	r2,r17,r17
   128b0:	1085883a 	add	r2,r2,r2
   128b4:	2c000504 	addi	r16,r5,20
   128b8:	24c00504 	addi	r19,r4,20
   128bc:	14ed883a 	add	r22,r2,r19
   128c0:	80a5883a 	add	r18,r16,r2
   128c4:	b7000017 	ldw	fp,0(r22)
   128c8:	91400017 	ldw	r5,0(r18)
   128cc:	e009883a 	mov	r4,fp
   128d0:	29400044 	addi	r5,r5,1
   128d4:	001976c0 	call	1976c <__udivsi3>
   128d8:	1029883a 	mov	r20,r2
   128dc:	10003c1e 	bne	r2,zero,129d0 <quorem+0x168>
   128e0:	a80b883a 	mov	r5,r21
   128e4:	b809883a 	mov	r4,r23
   128e8:	0015d700 	call	15d70 <__mcmp>
   128ec:	10002b16 	blt	r2,zero,1299c <quorem+0x134>
   128f0:	a5000044 	addi	r20,r20,1
   128f4:	980f883a 	mov	r7,r19
   128f8:	0011883a 	mov	r8,zero
   128fc:	0009883a 	mov	r4,zero
   12900:	81400017 	ldw	r5,0(r16)
   12904:	38c00017 	ldw	r3,0(r7)
   12908:	84000104 	addi	r16,r16,4
   1290c:	28bfffcc 	andi	r2,r5,65535
   12910:	2085883a 	add	r2,r4,r2
   12914:	11bfffcc 	andi	r6,r2,65535
   12918:	193fffcc 	andi	r4,r3,65535
   1291c:	1004d43a 	srli	r2,r2,16
   12920:	280ad43a 	srli	r5,r5,16
   12924:	2189c83a 	sub	r4,r4,r6
   12928:	2209883a 	add	r4,r4,r8
   1292c:	1806d43a 	srli	r3,r3,16
   12930:	288b883a 	add	r5,r5,r2
   12934:	200dd43a 	srai	r6,r4,16
   12938:	28bfffcc 	andi	r2,r5,65535
   1293c:	1887c83a 	sub	r3,r3,r2
   12940:	1987883a 	add	r3,r3,r6
   12944:	3900000d 	sth	r4,0(r7)
   12948:	38c0008d 	sth	r3,2(r7)
   1294c:	2808d43a 	srli	r4,r5,16
   12950:	39c00104 	addi	r7,r7,4
   12954:	1811d43a 	srai	r8,r3,16
   12958:	943fe92e 	bgeu	r18,r16,12900 <quorem+0x98>
   1295c:	8c45883a 	add	r2,r17,r17
   12960:	1085883a 	add	r2,r2,r2
   12964:	9885883a 	add	r2,r19,r2
   12968:	10c00017 	ldw	r3,0(r2)
   1296c:	18000b1e 	bne	r3,zero,1299c <quorem+0x134>
   12970:	113fff04 	addi	r4,r2,-4
   12974:	9900082e 	bgeu	r19,r4,12998 <quorem+0x130>
   12978:	10bfff17 	ldw	r2,-4(r2)
   1297c:	10000326 	beq	r2,zero,1298c <quorem+0x124>
   12980:	00000506 	br	12998 <quorem+0x130>
   12984:	20800017 	ldw	r2,0(r4)
   12988:	1000031e 	bne	r2,zero,12998 <quorem+0x130>
   1298c:	213fff04 	addi	r4,r4,-4
   12990:	8c7fffc4 	addi	r17,r17,-1
   12994:	993ffb36 	bltu	r19,r4,12984 <quorem+0x11c>
   12998:	bc400415 	stw	r17,16(r23)
   1299c:	a005883a 	mov	r2,r20
   129a0:	dfc00917 	ldw	ra,36(sp)
   129a4:	df000817 	ldw	fp,32(sp)
   129a8:	ddc00717 	ldw	r23,28(sp)
   129ac:	dd800617 	ldw	r22,24(sp)
   129b0:	dd400517 	ldw	r21,20(sp)
   129b4:	dd000417 	ldw	r20,16(sp)
   129b8:	dcc00317 	ldw	r19,12(sp)
   129bc:	dc800217 	ldw	r18,8(sp)
   129c0:	dc400117 	ldw	r17,4(sp)
   129c4:	dc000017 	ldw	r16,0(sp)
   129c8:	dec00a04 	addi	sp,sp,40
   129cc:	f800283a 	ret
   129d0:	980f883a 	mov	r7,r19
   129d4:	8011883a 	mov	r8,r16
   129d8:	0013883a 	mov	r9,zero
   129dc:	000d883a 	mov	r6,zero
   129e0:	40c00017 	ldw	r3,0(r8)
   129e4:	39000017 	ldw	r4,0(r7)
   129e8:	42000104 	addi	r8,r8,4
   129ec:	18bfffcc 	andi	r2,r3,65535
   129f0:	a085383a 	mul	r2,r20,r2
   129f4:	1806d43a 	srli	r3,r3,16
   129f8:	217fffcc 	andi	r5,r4,65535
   129fc:	3085883a 	add	r2,r6,r2
   12a00:	11bfffcc 	andi	r6,r2,65535
   12a04:	a0c7383a 	mul	r3,r20,r3
   12a08:	1004d43a 	srli	r2,r2,16
   12a0c:	298bc83a 	sub	r5,r5,r6
   12a10:	2a4b883a 	add	r5,r5,r9
   12a14:	2008d43a 	srli	r4,r4,16
   12a18:	1887883a 	add	r3,r3,r2
   12a1c:	280dd43a 	srai	r6,r5,16
   12a20:	18bfffcc 	andi	r2,r3,65535
   12a24:	2089c83a 	sub	r4,r4,r2
   12a28:	2189883a 	add	r4,r4,r6
   12a2c:	3900008d 	sth	r4,2(r7)
   12a30:	3940000d 	sth	r5,0(r7)
   12a34:	180cd43a 	srli	r6,r3,16
   12a38:	39c00104 	addi	r7,r7,4
   12a3c:	2013d43a 	srai	r9,r4,16
   12a40:	923fe72e 	bgeu	r18,r8,129e0 <quorem+0x178>
   12a44:	e03fa61e 	bne	fp,zero,128e0 <quorem+0x78>
   12a48:	b0ffff04 	addi	r3,r22,-4
   12a4c:	98c0082e 	bgeu	r19,r3,12a70 <quorem+0x208>
   12a50:	b0bfff17 	ldw	r2,-4(r22)
   12a54:	10000326 	beq	r2,zero,12a64 <quorem+0x1fc>
   12a58:	00000506 	br	12a70 <quorem+0x208>
   12a5c:	18800017 	ldw	r2,0(r3)
   12a60:	1000031e 	bne	r2,zero,12a70 <quorem+0x208>
   12a64:	18ffff04 	addi	r3,r3,-4
   12a68:	8c7fffc4 	addi	r17,r17,-1
   12a6c:	98fffb36 	bltu	r19,r3,12a5c <quorem+0x1f4>
   12a70:	bc400415 	stw	r17,16(r23)
   12a74:	003f9a06 	br	128e0 <quorem+0x78>
   12a78:	0005883a 	mov	r2,zero
   12a7c:	003fc806 	br	129a0 <quorem+0x138>

00012a80 <_dtoa_r>:
   12a80:	22001017 	ldw	r8,64(r4)
   12a84:	deffda04 	addi	sp,sp,-152
   12a88:	dd402115 	stw	r21,132(sp)
   12a8c:	dd002015 	stw	r20,128(sp)
   12a90:	dc801e15 	stw	r18,120(sp)
   12a94:	dc401d15 	stw	r17,116(sp)
   12a98:	dfc02515 	stw	ra,148(sp)
   12a9c:	df002415 	stw	fp,144(sp)
   12aa0:	ddc02315 	stw	r23,140(sp)
   12aa4:	dd802215 	stw	r22,136(sp)
   12aa8:	dcc01f15 	stw	r19,124(sp)
   12aac:	dc001c15 	stw	r16,112(sp)
   12ab0:	d9001615 	stw	r4,88(sp)
   12ab4:	3023883a 	mov	r17,r6
   12ab8:	2829883a 	mov	r20,r5
   12abc:	d9c01715 	stw	r7,92(sp)
   12ac0:	dc802817 	ldw	r18,160(sp)
   12ac4:	302b883a 	mov	r21,r6
   12ac8:	40000a26 	beq	r8,zero,12af4 <_dtoa_r+0x74>
   12acc:	20801117 	ldw	r2,68(r4)
   12ad0:	400b883a 	mov	r5,r8
   12ad4:	40800115 	stw	r2,4(r8)
   12ad8:	20c01117 	ldw	r3,68(r4)
   12adc:	00800044 	movi	r2,1
   12ae0:	10c4983a 	sll	r2,r2,r3
   12ae4:	40800215 	stw	r2,8(r8)
   12ae8:	0015c140 	call	15c14 <_Bfree>
   12aec:	d8c01617 	ldw	r3,88(sp)
   12af0:	18001015 	stw	zero,64(r3)
   12af4:	8800a316 	blt	r17,zero,12d84 <_dtoa_r+0x304>
   12af8:	90000015 	stw	zero,0(r18)
   12afc:	a8dffc2c 	andhi	r3,r21,32752
   12b00:	009ffc34 	movhi	r2,32752
   12b04:	18809126 	beq	r3,r2,12d4c <_dtoa_r+0x2cc>
   12b08:	000d883a 	mov	r6,zero
   12b0c:	000f883a 	mov	r7,zero
   12b10:	a009883a 	mov	r4,r20
   12b14:	a80b883a 	mov	r5,r21
   12b18:	dd001215 	stw	r20,72(sp)
   12b1c:	dd401315 	stw	r21,76(sp)
   12b20:	00190ac0 	call	190ac <__nedf2>
   12b24:	1000171e 	bne	r2,zero,12b84 <_dtoa_r+0x104>
   12b28:	d9802717 	ldw	r6,156(sp)
   12b2c:	00800044 	movi	r2,1
   12b30:	30800015 	stw	r2,0(r6)
   12b34:	d8802917 	ldw	r2,164(sp)
   12b38:	10029b26 	beq	r2,zero,135a8 <_dtoa_r+0xb28>
   12b3c:	d9002917 	ldw	r4,164(sp)
   12b40:	008000f4 	movhi	r2,3
   12b44:	10a03444 	addi	r2,r2,-32559
   12b48:	10ffffc4 	addi	r3,r2,-1
   12b4c:	20800015 	stw	r2,0(r4)
   12b50:	1805883a 	mov	r2,r3
   12b54:	dfc02517 	ldw	ra,148(sp)
   12b58:	df002417 	ldw	fp,144(sp)
   12b5c:	ddc02317 	ldw	r23,140(sp)
   12b60:	dd802217 	ldw	r22,136(sp)
   12b64:	dd402117 	ldw	r21,132(sp)
   12b68:	dd002017 	ldw	r20,128(sp)
   12b6c:	dcc01f17 	ldw	r19,124(sp)
   12b70:	dc801e17 	ldw	r18,120(sp)
   12b74:	dc401d17 	ldw	r17,116(sp)
   12b78:	dc001c17 	ldw	r16,112(sp)
   12b7c:	dec02604 	addi	sp,sp,152
   12b80:	f800283a 	ret
   12b84:	d9001617 	ldw	r4,88(sp)
   12b88:	d9401217 	ldw	r5,72(sp)
   12b8c:	d8800104 	addi	r2,sp,4
   12b90:	a80d883a 	mov	r6,r21
   12b94:	d9c00204 	addi	r7,sp,8
   12b98:	d8800015 	stw	r2,0(sp)
   12b9c:	00162500 	call	16250 <__d2b>
   12ba0:	d8800715 	stw	r2,28(sp)
   12ba4:	a804d53a 	srli	r2,r21,20
   12ba8:	1101ffcc 	andi	r4,r2,2047
   12bac:	20008626 	beq	r4,zero,12dc8 <_dtoa_r+0x348>
   12bb0:	d8c01217 	ldw	r3,72(sp)
   12bb4:	00800434 	movhi	r2,16
   12bb8:	10bfffc4 	addi	r2,r2,-1
   12bbc:	ddc00117 	ldw	r23,4(sp)
   12bc0:	a884703a 	and	r2,r21,r2
   12bc4:	1811883a 	mov	r8,r3
   12bc8:	124ffc34 	orhi	r9,r2,16368
   12bcc:	25bf0044 	addi	r22,r4,-1023
   12bd0:	d8000815 	stw	zero,32(sp)
   12bd4:	0005883a 	mov	r2,zero
   12bd8:	00cffe34 	movhi	r3,16376
   12bdc:	480b883a 	mov	r5,r9
   12be0:	4009883a 	mov	r4,r8
   12be4:	180f883a 	mov	r7,r3
   12be8:	100d883a 	mov	r6,r2
   12bec:	00189140 	call	18914 <__subdf3>
   12bf0:	0218dbf4 	movhi	r8,25455
   12bf4:	4210d844 	addi	r8,r8,17249
   12bf8:	024ff4f4 	movhi	r9,16339
   12bfc:	4a61e9c4 	addi	r9,r9,-30809
   12c00:	480f883a 	mov	r7,r9
   12c04:	400d883a 	mov	r6,r8
   12c08:	180b883a 	mov	r5,r3
   12c0c:	1009883a 	mov	r4,r2
   12c10:	0018a080 	call	18a08 <__muldf3>
   12c14:	0222d874 	movhi	r8,35681
   12c18:	42322cc4 	addi	r8,r8,-14157
   12c1c:	024ff1f4 	movhi	r9,16327
   12c20:	4a628a04 	addi	r9,r9,-30168
   12c24:	480f883a 	mov	r7,r9
   12c28:	400d883a 	mov	r6,r8
   12c2c:	180b883a 	mov	r5,r3
   12c30:	1009883a 	mov	r4,r2
   12c34:	00189940 	call	18994 <__adddf3>
   12c38:	b009883a 	mov	r4,r22
   12c3c:	1021883a 	mov	r16,r2
   12c40:	1823883a 	mov	r17,r3
   12c44:	00192cc0 	call	192cc <__floatsidf>
   12c48:	021427f4 	movhi	r8,20639
   12c4c:	421e7ec4 	addi	r8,r8,31227
   12c50:	024ff4f4 	movhi	r9,16339
   12c54:	4a5104c4 	addi	r9,r9,17427
   12c58:	480f883a 	mov	r7,r9
   12c5c:	400d883a 	mov	r6,r8
   12c60:	180b883a 	mov	r5,r3
   12c64:	1009883a 	mov	r4,r2
   12c68:	0018a080 	call	18a08 <__muldf3>
   12c6c:	180f883a 	mov	r7,r3
   12c70:	880b883a 	mov	r5,r17
   12c74:	100d883a 	mov	r6,r2
   12c78:	8009883a 	mov	r4,r16
   12c7c:	00189940 	call	18994 <__adddf3>
   12c80:	1009883a 	mov	r4,r2
   12c84:	180b883a 	mov	r5,r3
   12c88:	1021883a 	mov	r16,r2
   12c8c:	1823883a 	mov	r17,r3
   12c90:	00193c40 	call	193c4 <__fixdfsi>
   12c94:	000d883a 	mov	r6,zero
   12c98:	000f883a 	mov	r7,zero
   12c9c:	8009883a 	mov	r4,r16
   12ca0:	880b883a 	mov	r5,r17
   12ca4:	d8800d15 	stw	r2,52(sp)
   12ca8:	00192440 	call	19244 <__ltdf2>
   12cac:	10031716 	blt	r2,zero,1390c <_dtoa_r+0xe8c>
   12cb0:	d8c00d17 	ldw	r3,52(sp)
   12cb4:	00800584 	movi	r2,22
   12cb8:	10c1482e 	bgeu	r2,r3,131dc <_dtoa_r+0x75c>
   12cbc:	01000044 	movi	r4,1
   12cc0:	d9000c15 	stw	r4,48(sp)
   12cc4:	bd85c83a 	sub	r2,r23,r22
   12cc8:	11bfffc4 	addi	r6,r2,-1
   12ccc:	30030b16 	blt	r6,zero,138fc <_dtoa_r+0xe7c>
   12cd0:	d9800a15 	stw	r6,40(sp)
   12cd4:	d8001115 	stw	zero,68(sp)
   12cd8:	d8c00d17 	ldw	r3,52(sp)
   12cdc:	1802ff16 	blt	r3,zero,138dc <_dtoa_r+0xe5c>
   12ce0:	d9000a17 	ldw	r4,40(sp)
   12ce4:	d8c00915 	stw	r3,36(sp)
   12ce8:	d8001015 	stw	zero,64(sp)
   12cec:	20c9883a 	add	r4,r4,r3
   12cf0:	d9000a15 	stw	r4,40(sp)
   12cf4:	d9001717 	ldw	r4,92(sp)
   12cf8:	00800244 	movi	r2,9
   12cfc:	11004636 	bltu	r2,r4,12e18 <_dtoa_r+0x398>
   12d00:	00800144 	movi	r2,5
   12d04:	11020416 	blt	r2,r4,13518 <_dtoa_r+0xa98>
   12d08:	04400044 	movi	r17,1
   12d0c:	d8c01717 	ldw	r3,92(sp)
   12d10:	00800144 	movi	r2,5
   12d14:	10c1ed36 	bltu	r2,r3,134cc <_dtoa_r+0xa4c>
   12d18:	18c5883a 	add	r2,r3,r3
   12d1c:	1085883a 	add	r2,r2,r2
   12d20:	00c00074 	movhi	r3,1
   12d24:	18cb4d04 	addi	r3,r3,11572
   12d28:	10c5883a 	add	r2,r2,r3
   12d2c:	11000017 	ldw	r4,0(r2)
   12d30:	2000683a 	jmp	r4
   12d34:	00012e20 	cmpeqi	zero,zero,1208
   12d38:	00012e20 	cmpeqi	zero,zero,1208
   12d3c:	00013820 	cmpeqi	zero,zero,1248
   12d40:	000137f8 	rdprs	zero,zero,1247
   12d44:	0001383c 	xorhi	zero,zero,1248
   12d48:	00013848 	cmpgei	zero,zero,1249
   12d4c:	d9002717 	ldw	r4,156(sp)
   12d50:	0089c3c4 	movi	r2,9999
   12d54:	20800015 	stw	r2,0(r4)
   12d58:	a0001026 	beq	r20,zero,12d9c <_dtoa_r+0x31c>
   12d5c:	00c000f4 	movhi	r3,3
   12d60:	18e04004 	addi	r3,r3,-32512
   12d64:	d9802917 	ldw	r6,164(sp)
   12d68:	303f7926 	beq	r6,zero,12b50 <_dtoa_r+0xd0>
   12d6c:	188000c7 	ldb	r2,3(r3)
   12d70:	190000c4 	addi	r4,r3,3
   12d74:	1000101e 	bne	r2,zero,12db8 <_dtoa_r+0x338>
   12d78:	d8802917 	ldw	r2,164(sp)
   12d7c:	11000015 	stw	r4,0(r2)
   12d80:	003f7306 	br	12b50 <_dtoa_r+0xd0>
   12d84:	00a00034 	movhi	r2,32768
   12d88:	10bfffc4 	addi	r2,r2,-1
   12d8c:	00c00044 	movi	r3,1
   12d90:	88aa703a 	and	r21,r17,r2
   12d94:	90c00015 	stw	r3,0(r18)
   12d98:	003f5806 	br	12afc <_dtoa_r+0x7c>
   12d9c:	00800434 	movhi	r2,16
   12da0:	10bfffc4 	addi	r2,r2,-1
   12da4:	a884703a 	and	r2,r21,r2
   12da8:	103fec1e 	bne	r2,zero,12d5c <_dtoa_r+0x2dc>
   12dac:	00c000f4 	movhi	r3,3
   12db0:	18e03d04 	addi	r3,r3,-32524
   12db4:	003feb06 	br	12d64 <_dtoa_r+0x2e4>
   12db8:	d8802917 	ldw	r2,164(sp)
   12dbc:	19000204 	addi	r4,r3,8
   12dc0:	11000015 	stw	r4,0(r2)
   12dc4:	003f6206 	br	12b50 <_dtoa_r+0xd0>
   12dc8:	ddc00117 	ldw	r23,4(sp)
   12dcc:	d8800217 	ldw	r2,8(sp)
   12dd0:	01000804 	movi	r4,32
   12dd4:	b8c10c84 	addi	r3,r23,1074
   12dd8:	18a3883a 	add	r17,r3,r2
   12ddc:	2441b80e 	bge	r4,r17,134c0 <_dtoa_r+0xa40>
   12de0:	00c01004 	movi	r3,64
   12de4:	1c47c83a 	sub	r3,r3,r17
   12de8:	88bff804 	addi	r2,r17,-32
   12dec:	a8c6983a 	sll	r3,r21,r3
   12df0:	a084d83a 	srl	r2,r20,r2
   12df4:	1888b03a 	or	r4,r3,r2
   12df8:	001949c0 	call	1949c <__floatunsidf>
   12dfc:	1011883a 	mov	r8,r2
   12e00:	00bf8434 	movhi	r2,65040
   12e04:	01000044 	movi	r4,1
   12e08:	10d3883a 	add	r9,r2,r3
   12e0c:	8dbef344 	addi	r22,r17,-1075
   12e10:	d9000815 	stw	r4,32(sp)
   12e14:	003f6f06 	br	12bd4 <_dtoa_r+0x154>
   12e18:	d8001715 	stw	zero,92(sp)
   12e1c:	04400044 	movi	r17,1
   12e20:	00bfffc4 	movi	r2,-1
   12e24:	00c00044 	movi	r3,1
   12e28:	d8800e15 	stw	r2,56(sp)
   12e2c:	d8002615 	stw	zero,152(sp)
   12e30:	d8800f15 	stw	r2,60(sp)
   12e34:	d8c00b15 	stw	r3,44(sp)
   12e38:	1021883a 	mov	r16,r2
   12e3c:	d8801617 	ldw	r2,88(sp)
   12e40:	10001115 	stw	zero,68(r2)
   12e44:	d8801617 	ldw	r2,88(sp)
   12e48:	11401117 	ldw	r5,68(r2)
   12e4c:	1009883a 	mov	r4,r2
   12e50:	00161940 	call	16194 <_Balloc>
   12e54:	d8c01617 	ldw	r3,88(sp)
   12e58:	d8800515 	stw	r2,20(sp)
   12e5c:	18801015 	stw	r2,64(r3)
   12e60:	00800384 	movi	r2,14
   12e64:	14006836 	bltu	r2,r16,13008 <_dtoa_r+0x588>
   12e68:	8805003a 	cmpeq	r2,r17,zero
   12e6c:	1000661e 	bne	r2,zero,13008 <_dtoa_r+0x588>
   12e70:	d9000d17 	ldw	r4,52(sp)
   12e74:	0102300e 	bge	zero,r4,13738 <_dtoa_r+0xcb8>
   12e78:	208003cc 	andi	r2,r4,15
   12e7c:	100490fa 	slli	r2,r2,3
   12e80:	2025d13a 	srai	r18,r4,4
   12e84:	00c000f4 	movhi	r3,3
   12e88:	18e05204 	addi	r3,r3,-32440
   12e8c:	10c5883a 	add	r2,r2,r3
   12e90:	90c0040c 	andi	r3,r18,16
   12e94:	14000017 	ldw	r16,0(r2)
   12e98:	14400117 	ldw	r17,4(r2)
   12e9c:	18036a1e 	bne	r3,zero,13c48 <_dtoa_r+0x11c8>
   12ea0:	05800084 	movi	r22,2
   12ea4:	90001026 	beq	r18,zero,12ee8 <_dtoa_r+0x468>
   12ea8:	04c000f4 	movhi	r19,3
   12eac:	9ce08404 	addi	r19,r19,-32240
   12eb0:	9080004c 	andi	r2,r18,1
   12eb4:	1005003a 	cmpeq	r2,r2,zero
   12eb8:	1000081e 	bne	r2,zero,12edc <_dtoa_r+0x45c>
   12ebc:	99800017 	ldw	r6,0(r19)
   12ec0:	99c00117 	ldw	r7,4(r19)
   12ec4:	880b883a 	mov	r5,r17
   12ec8:	8009883a 	mov	r4,r16
   12ecc:	0018a080 	call	18a08 <__muldf3>
   12ed0:	1021883a 	mov	r16,r2
   12ed4:	b5800044 	addi	r22,r22,1
   12ed8:	1823883a 	mov	r17,r3
   12edc:	9025d07a 	srai	r18,r18,1
   12ee0:	9cc00204 	addi	r19,r19,8
   12ee4:	903ff21e 	bne	r18,zero,12eb0 <_dtoa_r+0x430>
   12ee8:	a80b883a 	mov	r5,r21
   12eec:	a009883a 	mov	r4,r20
   12ef0:	880f883a 	mov	r7,r17
   12ef4:	800d883a 	mov	r6,r16
   12ef8:	0018dcc0 	call	18dcc <__divdf3>
   12efc:	1029883a 	mov	r20,r2
   12f00:	182b883a 	mov	r21,r3
   12f04:	d8c00c17 	ldw	r3,48(sp)
   12f08:	1805003a 	cmpeq	r2,r3,zero
   12f0c:	1000081e 	bne	r2,zero,12f30 <_dtoa_r+0x4b0>
   12f10:	0005883a 	mov	r2,zero
   12f14:	00cffc34 	movhi	r3,16368
   12f18:	180f883a 	mov	r7,r3
   12f1c:	a009883a 	mov	r4,r20
   12f20:	a80b883a 	mov	r5,r21
   12f24:	100d883a 	mov	r6,r2
   12f28:	00192440 	call	19244 <__ltdf2>
   12f2c:	1003fe16 	blt	r2,zero,13f28 <_dtoa_r+0x14a8>
   12f30:	b009883a 	mov	r4,r22
   12f34:	00192cc0 	call	192cc <__floatsidf>
   12f38:	180b883a 	mov	r5,r3
   12f3c:	1009883a 	mov	r4,r2
   12f40:	a00d883a 	mov	r6,r20
   12f44:	a80f883a 	mov	r7,r21
   12f48:	0018a080 	call	18a08 <__muldf3>
   12f4c:	0011883a 	mov	r8,zero
   12f50:	02500734 	movhi	r9,16412
   12f54:	1009883a 	mov	r4,r2
   12f58:	180b883a 	mov	r5,r3
   12f5c:	480f883a 	mov	r7,r9
   12f60:	400d883a 	mov	r6,r8
   12f64:	00189940 	call	18994 <__adddf3>
   12f68:	d9000f17 	ldw	r4,60(sp)
   12f6c:	102d883a 	mov	r22,r2
   12f70:	00bf3034 	movhi	r2,64704
   12f74:	18b9883a 	add	fp,r3,r2
   12f78:	e02f883a 	mov	r23,fp
   12f7c:	20028f1e 	bne	r4,zero,139bc <_dtoa_r+0xf3c>
   12f80:	0005883a 	mov	r2,zero
   12f84:	00d00534 	movhi	r3,16404
   12f88:	a009883a 	mov	r4,r20
   12f8c:	a80b883a 	mov	r5,r21
   12f90:	180f883a 	mov	r7,r3
   12f94:	100d883a 	mov	r6,r2
   12f98:	00189140 	call	18914 <__subdf3>
   12f9c:	1009883a 	mov	r4,r2
   12fa0:	e00f883a 	mov	r7,fp
   12fa4:	180b883a 	mov	r5,r3
   12fa8:	b00d883a 	mov	r6,r22
   12fac:	1025883a 	mov	r18,r2
   12fb0:	1827883a 	mov	r19,r3
   12fb4:	00191340 	call	19134 <__gtdf2>
   12fb8:	00834f16 	blt	zero,r2,13cf8 <_dtoa_r+0x1278>
   12fbc:	e0e0003c 	xorhi	r3,fp,32768
   12fc0:	9009883a 	mov	r4,r18
   12fc4:	980b883a 	mov	r5,r19
   12fc8:	180f883a 	mov	r7,r3
   12fcc:	b00d883a 	mov	r6,r22
   12fd0:	00192440 	call	19244 <__ltdf2>
   12fd4:	1000080e 	bge	r2,zero,12ff8 <_dtoa_r+0x578>
   12fd8:	0027883a 	mov	r19,zero
   12fdc:	0025883a 	mov	r18,zero
   12fe0:	d8802617 	ldw	r2,152(sp)
   12fe4:	df000517 	ldw	fp,20(sp)
   12fe8:	d8000615 	stw	zero,24(sp)
   12fec:	0084303a 	nor	r2,zero,r2
   12ff0:	d8800d15 	stw	r2,52(sp)
   12ff4:	00019b06 	br	13664 <_dtoa_r+0xbe4>
   12ff8:	d9801217 	ldw	r6,72(sp)
   12ffc:	d8801317 	ldw	r2,76(sp)
   13000:	3029883a 	mov	r20,r6
   13004:	102b883a 	mov	r21,r2
   13008:	d8c00217 	ldw	r3,8(sp)
   1300c:	18008516 	blt	r3,zero,13224 <_dtoa_r+0x7a4>
   13010:	d9000d17 	ldw	r4,52(sp)
   13014:	00800384 	movi	r2,14
   13018:	11008216 	blt	r2,r4,13224 <_dtoa_r+0x7a4>
   1301c:	200490fa 	slli	r2,r4,3
   13020:	d9802617 	ldw	r6,152(sp)
   13024:	00c000f4 	movhi	r3,3
   13028:	18e05204 	addi	r3,r3,-32440
   1302c:	10c5883a 	add	r2,r2,r3
   13030:	14800017 	ldw	r18,0(r2)
   13034:	14c00117 	ldw	r19,4(r2)
   13038:	30031e16 	blt	r6,zero,13cb4 <_dtoa_r+0x1234>
   1303c:	d9000517 	ldw	r4,20(sp)
   13040:	d8c00f17 	ldw	r3,60(sp)
   13044:	a823883a 	mov	r17,r21
   13048:	a021883a 	mov	r16,r20
   1304c:	192b883a 	add	r21,r3,r4
   13050:	2039883a 	mov	fp,r4
   13054:	00000f06 	br	13094 <_dtoa_r+0x614>
   13058:	0005883a 	mov	r2,zero
   1305c:	00d00934 	movhi	r3,16420
   13060:	5009883a 	mov	r4,r10
   13064:	580b883a 	mov	r5,r11
   13068:	180f883a 	mov	r7,r3
   1306c:	100d883a 	mov	r6,r2
   13070:	0018a080 	call	18a08 <__muldf3>
   13074:	180b883a 	mov	r5,r3
   13078:	000d883a 	mov	r6,zero
   1307c:	000f883a 	mov	r7,zero
   13080:	1009883a 	mov	r4,r2
   13084:	1021883a 	mov	r16,r2
   13088:	1823883a 	mov	r17,r3
   1308c:	00190ac0 	call	190ac <__nedf2>
   13090:	10004526 	beq	r2,zero,131a8 <_dtoa_r+0x728>
   13094:	900d883a 	mov	r6,r18
   13098:	980f883a 	mov	r7,r19
   1309c:	8009883a 	mov	r4,r16
   130a0:	880b883a 	mov	r5,r17
   130a4:	0018dcc0 	call	18dcc <__divdf3>
   130a8:	180b883a 	mov	r5,r3
   130ac:	1009883a 	mov	r4,r2
   130b0:	00193c40 	call	193c4 <__fixdfsi>
   130b4:	1009883a 	mov	r4,r2
   130b8:	1029883a 	mov	r20,r2
   130bc:	00192cc0 	call	192cc <__floatsidf>
   130c0:	180f883a 	mov	r7,r3
   130c4:	9009883a 	mov	r4,r18
   130c8:	980b883a 	mov	r5,r19
   130cc:	100d883a 	mov	r6,r2
   130d0:	0018a080 	call	18a08 <__muldf3>
   130d4:	180f883a 	mov	r7,r3
   130d8:	880b883a 	mov	r5,r17
   130dc:	8009883a 	mov	r4,r16
   130e0:	100d883a 	mov	r6,r2
   130e4:	00189140 	call	18914 <__subdf3>
   130e8:	1015883a 	mov	r10,r2
   130ec:	a0800c04 	addi	r2,r20,48
   130f0:	e0800005 	stb	r2,0(fp)
   130f4:	e7000044 	addi	fp,fp,1
   130f8:	1817883a 	mov	r11,r3
   130fc:	e57fd61e 	bne	fp,r21,13058 <_dtoa_r+0x5d8>
   13100:	500d883a 	mov	r6,r10
   13104:	180f883a 	mov	r7,r3
   13108:	5009883a 	mov	r4,r10
   1310c:	180b883a 	mov	r5,r3
   13110:	00189940 	call	18994 <__adddf3>
   13114:	100d883a 	mov	r6,r2
   13118:	9009883a 	mov	r4,r18
   1311c:	980b883a 	mov	r5,r19
   13120:	180f883a 	mov	r7,r3
   13124:	1021883a 	mov	r16,r2
   13128:	1823883a 	mov	r17,r3
   1312c:	00192440 	call	19244 <__ltdf2>
   13130:	10000816 	blt	r2,zero,13154 <_dtoa_r+0x6d4>
   13134:	980b883a 	mov	r5,r19
   13138:	800d883a 	mov	r6,r16
   1313c:	880f883a 	mov	r7,r17
   13140:	9009883a 	mov	r4,r18
   13144:	00190240 	call	19024 <__eqdf2>
   13148:	1000171e 	bne	r2,zero,131a8 <_dtoa_r+0x728>
   1314c:	a080004c 	andi	r2,r20,1
   13150:	10001526 	beq	r2,zero,131a8 <_dtoa_r+0x728>
   13154:	d8800d17 	ldw	r2,52(sp)
   13158:	d8800415 	stw	r2,16(sp)
   1315c:	e009883a 	mov	r4,fp
   13160:	213fffc4 	addi	r4,r4,-1
   13164:	20c00007 	ldb	r3,0(r4)
   13168:	00800e44 	movi	r2,57
   1316c:	1880081e 	bne	r3,r2,13190 <_dtoa_r+0x710>
   13170:	d8800517 	ldw	r2,20(sp)
   13174:	113ffa1e 	bne	r2,r4,13160 <_dtoa_r+0x6e0>
   13178:	d8c00417 	ldw	r3,16(sp)
   1317c:	d9800517 	ldw	r6,20(sp)
   13180:	00800c04 	movi	r2,48
   13184:	18c00044 	addi	r3,r3,1
   13188:	d8c00415 	stw	r3,16(sp)
   1318c:	30800005 	stb	r2,0(r6)
   13190:	20800003 	ldbu	r2,0(r4)
   13194:	d8c00417 	ldw	r3,16(sp)
   13198:	27000044 	addi	fp,r4,1
   1319c:	10800044 	addi	r2,r2,1
   131a0:	d8c00d15 	stw	r3,52(sp)
   131a4:	20800005 	stb	r2,0(r4)
   131a8:	d9001617 	ldw	r4,88(sp)
   131ac:	d9400717 	ldw	r5,28(sp)
   131b0:	0015c140 	call	15c14 <_Bfree>
   131b4:	e0000005 	stb	zero,0(fp)
   131b8:	d9800d17 	ldw	r6,52(sp)
   131bc:	d8c02717 	ldw	r3,156(sp)
   131c0:	d9002917 	ldw	r4,164(sp)
   131c4:	30800044 	addi	r2,r6,1
   131c8:	18800015 	stw	r2,0(r3)
   131cc:	20029c26 	beq	r4,zero,13c40 <_dtoa_r+0x11c0>
   131d0:	d8c00517 	ldw	r3,20(sp)
   131d4:	27000015 	stw	fp,0(r4)
   131d8:	003e5d06 	br	12b50 <_dtoa_r+0xd0>
   131dc:	d9800d17 	ldw	r6,52(sp)
   131e0:	00c000f4 	movhi	r3,3
   131e4:	18e05204 	addi	r3,r3,-32440
   131e8:	d9001217 	ldw	r4,72(sp)
   131ec:	300490fa 	slli	r2,r6,3
   131f0:	d9401317 	ldw	r5,76(sp)
   131f4:	10c5883a 	add	r2,r2,r3
   131f8:	12000017 	ldw	r8,0(r2)
   131fc:	12400117 	ldw	r9,4(r2)
   13200:	400d883a 	mov	r6,r8
   13204:	480f883a 	mov	r7,r9
   13208:	00192440 	call	19244 <__ltdf2>
   1320c:	1000030e 	bge	r2,zero,1321c <_dtoa_r+0x79c>
   13210:	d8800d17 	ldw	r2,52(sp)
   13214:	10bfffc4 	addi	r2,r2,-1
   13218:	d8800d15 	stw	r2,52(sp)
   1321c:	d8000c15 	stw	zero,48(sp)
   13220:	003ea806 	br	12cc4 <_dtoa_r+0x244>
   13224:	d9000b17 	ldw	r4,44(sp)
   13228:	202cc03a 	cmpne	r22,r4,zero
   1322c:	b000c71e 	bne	r22,zero,1354c <_dtoa_r+0xacc>
   13230:	dc001117 	ldw	r16,68(sp)
   13234:	dc801017 	ldw	r18,64(sp)
   13238:	0027883a 	mov	r19,zero
   1323c:	04000b0e 	bge	zero,r16,1326c <_dtoa_r+0x7ec>
   13240:	d8c00a17 	ldw	r3,40(sp)
   13244:	00c0090e 	bge	zero,r3,1326c <_dtoa_r+0x7ec>
   13248:	8005883a 	mov	r2,r16
   1324c:	1c011316 	blt	r3,r16,1369c <_dtoa_r+0xc1c>
   13250:	d9000a17 	ldw	r4,40(sp)
   13254:	d9801117 	ldw	r6,68(sp)
   13258:	80a1c83a 	sub	r16,r16,r2
   1325c:	2089c83a 	sub	r4,r4,r2
   13260:	308dc83a 	sub	r6,r6,r2
   13264:	d9000a15 	stw	r4,40(sp)
   13268:	d9801115 	stw	r6,68(sp)
   1326c:	d8801017 	ldw	r2,64(sp)
   13270:	0080150e 	bge	zero,r2,132c8 <_dtoa_r+0x848>
   13274:	d8c00b17 	ldw	r3,44(sp)
   13278:	1805003a 	cmpeq	r2,r3,zero
   1327c:	1001c91e 	bne	r2,zero,139a4 <_dtoa_r+0xf24>
   13280:	04800e0e 	bge	zero,r18,132bc <_dtoa_r+0x83c>
   13284:	d9001617 	ldw	r4,88(sp)
   13288:	980b883a 	mov	r5,r19
   1328c:	900d883a 	mov	r6,r18
   13290:	00169c80 	call	169c8 <__pow5mult>
   13294:	d9001617 	ldw	r4,88(sp)
   13298:	d9800717 	ldw	r6,28(sp)
   1329c:	100b883a 	mov	r5,r2
   132a0:	1027883a 	mov	r19,r2
   132a4:	00166a40 	call	166a4 <__multiply>
   132a8:	d9001617 	ldw	r4,88(sp)
   132ac:	d9400717 	ldw	r5,28(sp)
   132b0:	1023883a 	mov	r17,r2
   132b4:	0015c140 	call	15c14 <_Bfree>
   132b8:	dc400715 	stw	r17,28(sp)
   132bc:	d9001017 	ldw	r4,64(sp)
   132c0:	248dc83a 	sub	r6,r4,r18
   132c4:	30010e1e 	bne	r6,zero,13700 <_dtoa_r+0xc80>
   132c8:	d9001617 	ldw	r4,88(sp)
   132cc:	04400044 	movi	r17,1
   132d0:	880b883a 	mov	r5,r17
   132d4:	001688c0 	call	1688c <__i2b>
   132d8:	d9800917 	ldw	r6,36(sp)
   132dc:	1025883a 	mov	r18,r2
   132e0:	0180040e 	bge	zero,r6,132f4 <_dtoa_r+0x874>
   132e4:	d9001617 	ldw	r4,88(sp)
   132e8:	100b883a 	mov	r5,r2
   132ec:	00169c80 	call	169c8 <__pow5mult>
   132f0:	1025883a 	mov	r18,r2
   132f4:	d8801717 	ldw	r2,92(sp)
   132f8:	8880f30e 	bge	r17,r2,136c8 <_dtoa_r+0xc48>
   132fc:	0023883a 	mov	r17,zero
   13300:	d9800917 	ldw	r6,36(sp)
   13304:	30019e1e 	bne	r6,zero,13980 <_dtoa_r+0xf00>
   13308:	00c00044 	movi	r3,1
   1330c:	d9000a17 	ldw	r4,40(sp)
   13310:	20c5883a 	add	r2,r4,r3
   13314:	10c007cc 	andi	r3,r2,31
   13318:	1800841e 	bne	r3,zero,1352c <_dtoa_r+0xaac>
   1331c:	00800704 	movi	r2,28
   13320:	d9000a17 	ldw	r4,40(sp)
   13324:	d9801117 	ldw	r6,68(sp)
   13328:	80a1883a 	add	r16,r16,r2
   1332c:	2089883a 	add	r4,r4,r2
   13330:	308d883a 	add	r6,r6,r2
   13334:	d9000a15 	stw	r4,40(sp)
   13338:	d9801115 	stw	r6,68(sp)
   1333c:	d8801117 	ldw	r2,68(sp)
   13340:	0080050e 	bge	zero,r2,13358 <_dtoa_r+0x8d8>
   13344:	d9400717 	ldw	r5,28(sp)
   13348:	d9001617 	ldw	r4,88(sp)
   1334c:	100d883a 	mov	r6,r2
   13350:	00165580 	call	16558 <__lshift>
   13354:	d8800715 	stw	r2,28(sp)
   13358:	d8c00a17 	ldw	r3,40(sp)
   1335c:	00c0050e 	bge	zero,r3,13374 <_dtoa_r+0x8f4>
   13360:	d9001617 	ldw	r4,88(sp)
   13364:	900b883a 	mov	r5,r18
   13368:	180d883a 	mov	r6,r3
   1336c:	00165580 	call	16558 <__lshift>
   13370:	1025883a 	mov	r18,r2
   13374:	d9000c17 	ldw	r4,48(sp)
   13378:	2005003a 	cmpeq	r2,r4,zero
   1337c:	10016f26 	beq	r2,zero,1393c <_dtoa_r+0xebc>
   13380:	d9000f17 	ldw	r4,60(sp)
   13384:	0102170e 	bge	zero,r4,13be4 <_dtoa_r+0x1164>
   13388:	d9800b17 	ldw	r6,44(sp)
   1338c:	3005003a 	cmpeq	r2,r6,zero
   13390:	1000881e 	bne	r2,zero,135b4 <_dtoa_r+0xb34>
   13394:	0400050e 	bge	zero,r16,133ac <_dtoa_r+0x92c>
   13398:	d9001617 	ldw	r4,88(sp)
   1339c:	980b883a 	mov	r5,r19
   133a0:	800d883a 	mov	r6,r16
   133a4:	00165580 	call	16558 <__lshift>
   133a8:	1027883a 	mov	r19,r2
   133ac:	8804c03a 	cmpne	r2,r17,zero
   133b0:	1002541e 	bne	r2,zero,13d04 <_dtoa_r+0x1284>
   133b4:	980b883a 	mov	r5,r19
   133b8:	dd800517 	ldw	r22,20(sp)
   133bc:	dcc00615 	stw	r19,24(sp)
   133c0:	a700004c 	andi	fp,r20,1
   133c4:	2827883a 	mov	r19,r5
   133c8:	d9000717 	ldw	r4,28(sp)
   133cc:	900b883a 	mov	r5,r18
   133d0:	00128680 	call	12868 <quorem>
   133d4:	d9000717 	ldw	r4,28(sp)
   133d8:	d9400617 	ldw	r5,24(sp)
   133dc:	1023883a 	mov	r17,r2
   133e0:	8dc00c04 	addi	r23,r17,48
   133e4:	0015d700 	call	15d70 <__mcmp>
   133e8:	d9001617 	ldw	r4,88(sp)
   133ec:	900b883a 	mov	r5,r18
   133f0:	980d883a 	mov	r6,r19
   133f4:	1029883a 	mov	r20,r2
   133f8:	00163cc0 	call	163cc <__mdiff>
   133fc:	102b883a 	mov	r21,r2
   13400:	10800317 	ldw	r2,12(r2)
   13404:	1001281e 	bne	r2,zero,138a8 <_dtoa_r+0xe28>
   13408:	d9000717 	ldw	r4,28(sp)
   1340c:	a80b883a 	mov	r5,r21
   13410:	0015d700 	call	15d70 <__mcmp>
   13414:	d9001617 	ldw	r4,88(sp)
   13418:	1021883a 	mov	r16,r2
   1341c:	a80b883a 	mov	r5,r21
   13420:	0015c140 	call	15c14 <_Bfree>
   13424:	8000041e 	bne	r16,zero,13438 <_dtoa_r+0x9b8>
   13428:	d8801717 	ldw	r2,92(sp)
   1342c:	1000021e 	bne	r2,zero,13438 <_dtoa_r+0x9b8>
   13430:	e004c03a 	cmpne	r2,fp,zero
   13434:	10011726 	beq	r2,zero,13894 <_dtoa_r+0xe14>
   13438:	a0010616 	blt	r20,zero,13854 <_dtoa_r+0xdd4>
   1343c:	a000041e 	bne	r20,zero,13450 <_dtoa_r+0x9d0>
   13440:	d8c01717 	ldw	r3,92(sp)
   13444:	1800021e 	bne	r3,zero,13450 <_dtoa_r+0x9d0>
   13448:	e004c03a 	cmpne	r2,fp,zero
   1344c:	10010126 	beq	r2,zero,13854 <_dtoa_r+0xdd4>
   13450:	04023d16 	blt	zero,r16,13d48 <_dtoa_r+0x12c8>
   13454:	b5c00005 	stb	r23,0(r22)
   13458:	d9800517 	ldw	r6,20(sp)
   1345c:	d9000f17 	ldw	r4,60(sp)
   13460:	b5800044 	addi	r22,r22,1
   13464:	3105883a 	add	r2,r6,r4
   13468:	b0806526 	beq	r22,r2,13600 <_dtoa_r+0xb80>
   1346c:	d9400717 	ldw	r5,28(sp)
   13470:	d9001617 	ldw	r4,88(sp)
   13474:	01800284 	movi	r6,10
   13478:	000f883a 	mov	r7,zero
   1347c:	00168c80 	call	168c8 <__multadd>
   13480:	d8800715 	stw	r2,28(sp)
   13484:	d8800617 	ldw	r2,24(sp)
   13488:	14c10c26 	beq	r2,r19,138bc <_dtoa_r+0xe3c>
   1348c:	d9400617 	ldw	r5,24(sp)
   13490:	d9001617 	ldw	r4,88(sp)
   13494:	01800284 	movi	r6,10
   13498:	000f883a 	mov	r7,zero
   1349c:	00168c80 	call	168c8 <__multadd>
   134a0:	d9001617 	ldw	r4,88(sp)
   134a4:	980b883a 	mov	r5,r19
   134a8:	01800284 	movi	r6,10
   134ac:	000f883a 	mov	r7,zero
   134b0:	d8800615 	stw	r2,24(sp)
   134b4:	00168c80 	call	168c8 <__multadd>
   134b8:	1027883a 	mov	r19,r2
   134bc:	003fc206 	br	133c8 <_dtoa_r+0x948>
   134c0:	2445c83a 	sub	r2,r4,r17
   134c4:	a088983a 	sll	r4,r20,r2
   134c8:	003e4b06 	br	12df8 <_dtoa_r+0x378>
   134cc:	01bfffc4 	movi	r6,-1
   134d0:	00800044 	movi	r2,1
   134d4:	d9800e15 	stw	r6,56(sp)
   134d8:	d9800f15 	stw	r6,60(sp)
   134dc:	d8800b15 	stw	r2,44(sp)
   134e0:	d8c01617 	ldw	r3,88(sp)
   134e4:	008005c4 	movi	r2,23
   134e8:	18001115 	stw	zero,68(r3)
   134ec:	1580082e 	bgeu	r2,r22,13510 <_dtoa_r+0xa90>
   134f0:	00c00104 	movi	r3,4
   134f4:	0009883a 	mov	r4,zero
   134f8:	18c7883a 	add	r3,r3,r3
   134fc:	18800504 	addi	r2,r3,20
   13500:	21000044 	addi	r4,r4,1
   13504:	b0bffc2e 	bgeu	r22,r2,134f8 <_dtoa_r+0xa78>
   13508:	d9801617 	ldw	r6,88(sp)
   1350c:	31001115 	stw	r4,68(r6)
   13510:	dc000f17 	ldw	r16,60(sp)
   13514:	003e4b06 	br	12e44 <_dtoa_r+0x3c4>
   13518:	d9801717 	ldw	r6,92(sp)
   1351c:	0023883a 	mov	r17,zero
   13520:	31bfff04 	addi	r6,r6,-4
   13524:	d9801715 	stw	r6,92(sp)
   13528:	003df806 	br	12d0c <_dtoa_r+0x28c>
   1352c:	00800804 	movi	r2,32
   13530:	10c9c83a 	sub	r4,r2,r3
   13534:	00c00104 	movi	r3,4
   13538:	19005a16 	blt	r3,r4,136a4 <_dtoa_r+0xc24>
   1353c:	008000c4 	movi	r2,3
   13540:	113f7e16 	blt	r2,r4,1333c <_dtoa_r+0x8bc>
   13544:	20800704 	addi	r2,r4,28
   13548:	003f7506 	br	13320 <_dtoa_r+0x8a0>
   1354c:	d9801717 	ldw	r6,92(sp)
   13550:	00800044 	movi	r2,1
   13554:	1180a10e 	bge	r2,r6,137dc <_dtoa_r+0xd5c>
   13558:	d9800f17 	ldw	r6,60(sp)
   1355c:	d8c01017 	ldw	r3,64(sp)
   13560:	30bfffc4 	addi	r2,r6,-1
   13564:	1881c616 	blt	r3,r2,13c80 <_dtoa_r+0x1200>
   13568:	18a5c83a 	sub	r18,r3,r2
   1356c:	d8800f17 	ldw	r2,60(sp)
   13570:	10026216 	blt	r2,zero,13efc <_dtoa_r+0x147c>
   13574:	dc001117 	ldw	r16,68(sp)
   13578:	1007883a 	mov	r3,r2
   1357c:	d9800a17 	ldw	r6,40(sp)
   13580:	d8801117 	ldw	r2,68(sp)
   13584:	d9001617 	ldw	r4,88(sp)
   13588:	30cd883a 	add	r6,r6,r3
   1358c:	10c5883a 	add	r2,r2,r3
   13590:	01400044 	movi	r5,1
   13594:	d9800a15 	stw	r6,40(sp)
   13598:	d8801115 	stw	r2,68(sp)
   1359c:	001688c0 	call	1688c <__i2b>
   135a0:	1027883a 	mov	r19,r2
   135a4:	003f2506 	br	1323c <_dtoa_r+0x7bc>
   135a8:	00c000f4 	movhi	r3,3
   135ac:	18e03404 	addi	r3,r3,-32560
   135b0:	003d6706 	br	12b50 <_dtoa_r+0xd0>
   135b4:	dd800517 	ldw	r22,20(sp)
   135b8:	04000044 	movi	r16,1
   135bc:	00000706 	br	135dc <_dtoa_r+0xb5c>
   135c0:	d9400717 	ldw	r5,28(sp)
   135c4:	d9001617 	ldw	r4,88(sp)
   135c8:	01800284 	movi	r6,10
   135cc:	000f883a 	mov	r7,zero
   135d0:	00168c80 	call	168c8 <__multadd>
   135d4:	d8800715 	stw	r2,28(sp)
   135d8:	84000044 	addi	r16,r16,1
   135dc:	d9000717 	ldw	r4,28(sp)
   135e0:	900b883a 	mov	r5,r18
   135e4:	00128680 	call	12868 <quorem>
   135e8:	15c00c04 	addi	r23,r2,48
   135ec:	b5c00005 	stb	r23,0(r22)
   135f0:	d8c00f17 	ldw	r3,60(sp)
   135f4:	b5800044 	addi	r22,r22,1
   135f8:	80fff116 	blt	r16,r3,135c0 <_dtoa_r+0xb40>
   135fc:	d8000615 	stw	zero,24(sp)
   13600:	d9400717 	ldw	r5,28(sp)
   13604:	d9001617 	ldw	r4,88(sp)
   13608:	01800044 	movi	r6,1
   1360c:	00165580 	call	16558 <__lshift>
   13610:	1009883a 	mov	r4,r2
   13614:	900b883a 	mov	r5,r18
   13618:	d8800715 	stw	r2,28(sp)
   1361c:	0015d700 	call	15d70 <__mcmp>
   13620:	00803c0e 	bge	zero,r2,13714 <_dtoa_r+0xc94>
   13624:	b009883a 	mov	r4,r22
   13628:	213fffc4 	addi	r4,r4,-1
   1362c:	21400003 	ldbu	r5,0(r4)
   13630:	00800e44 	movi	r2,57
   13634:	28c03fcc 	andi	r3,r5,255
   13638:	18c0201c 	xori	r3,r3,128
   1363c:	18ffe004 	addi	r3,r3,-128
   13640:	1881981e 	bne	r3,r2,13ca4 <_dtoa_r+0x1224>
   13644:	d9800517 	ldw	r6,20(sp)
   13648:	21bff71e 	bne	r4,r6,13628 <_dtoa_r+0xba8>
   1364c:	d8800d17 	ldw	r2,52(sp)
   13650:	37000044 	addi	fp,r6,1
   13654:	10800044 	addi	r2,r2,1
   13658:	d8800d15 	stw	r2,52(sp)
   1365c:	00800c44 	movi	r2,49
   13660:	30800005 	stb	r2,0(r6)
   13664:	d9001617 	ldw	r4,88(sp)
   13668:	900b883a 	mov	r5,r18
   1366c:	0015c140 	call	15c14 <_Bfree>
   13670:	983ecd26 	beq	r19,zero,131a8 <_dtoa_r+0x728>
   13674:	d8c00617 	ldw	r3,24(sp)
   13678:	18000426 	beq	r3,zero,1368c <_dtoa_r+0xc0c>
   1367c:	1cc00326 	beq	r3,r19,1368c <_dtoa_r+0xc0c>
   13680:	d9001617 	ldw	r4,88(sp)
   13684:	180b883a 	mov	r5,r3
   13688:	0015c140 	call	15c14 <_Bfree>
   1368c:	d9001617 	ldw	r4,88(sp)
   13690:	980b883a 	mov	r5,r19
   13694:	0015c140 	call	15c14 <_Bfree>
   13698:	003ec306 	br	131a8 <_dtoa_r+0x728>
   1369c:	1805883a 	mov	r2,r3
   136a0:	003eeb06 	br	13250 <_dtoa_r+0x7d0>
   136a4:	d9800a17 	ldw	r6,40(sp)
   136a8:	d8c01117 	ldw	r3,68(sp)
   136ac:	20bfff04 	addi	r2,r4,-4
   136b0:	308d883a 	add	r6,r6,r2
   136b4:	1887883a 	add	r3,r3,r2
   136b8:	80a1883a 	add	r16,r16,r2
   136bc:	d9800a15 	stw	r6,40(sp)
   136c0:	d8c01115 	stw	r3,68(sp)
   136c4:	003f1d06 	br	1333c <_dtoa_r+0x8bc>
   136c8:	a03f0c1e 	bne	r20,zero,132fc <_dtoa_r+0x87c>
   136cc:	00800434 	movhi	r2,16
   136d0:	10bfffc4 	addi	r2,r2,-1
   136d4:	a884703a 	and	r2,r21,r2
   136d8:	103f081e 	bne	r2,zero,132fc <_dtoa_r+0x87c>
   136dc:	a89ffc2c 	andhi	r2,r21,32752
   136e0:	103f0626 	beq	r2,zero,132fc <_dtoa_r+0x87c>
   136e4:	d8c01117 	ldw	r3,68(sp)
   136e8:	d9000a17 	ldw	r4,40(sp)
   136ec:	18c00044 	addi	r3,r3,1
   136f0:	21000044 	addi	r4,r4,1
   136f4:	d8c01115 	stw	r3,68(sp)
   136f8:	d9000a15 	stw	r4,40(sp)
   136fc:	003f0006 	br	13300 <_dtoa_r+0x880>
   13700:	d9400717 	ldw	r5,28(sp)
   13704:	d9001617 	ldw	r4,88(sp)
   13708:	00169c80 	call	169c8 <__pow5mult>
   1370c:	d8800715 	stw	r2,28(sp)
   13710:	003eed06 	br	132c8 <_dtoa_r+0x848>
   13714:	1000021e 	bne	r2,zero,13720 <_dtoa_r+0xca0>
   13718:	b880004c 	andi	r2,r23,1
   1371c:	103fc11e 	bne	r2,zero,13624 <_dtoa_r+0xba4>
   13720:	b5bfffc4 	addi	r22,r22,-1
   13724:	b0c00007 	ldb	r3,0(r22)
   13728:	00800c04 	movi	r2,48
   1372c:	18bffc26 	beq	r3,r2,13720 <_dtoa_r+0xca0>
   13730:	b7000044 	addi	fp,r22,1
   13734:	003fcb06 	br	13664 <_dtoa_r+0xbe4>
   13738:	d9800d17 	ldw	r6,52(sp)
   1373c:	018fc83a 	sub	r7,zero,r6
   13740:	3801f726 	beq	r7,zero,13f20 <_dtoa_r+0x14a0>
   13744:	398003cc 	andi	r6,r7,15
   13748:	300c90fa 	slli	r6,r6,3
   1374c:	014000f4 	movhi	r5,3
   13750:	29605204 	addi	r5,r5,-32440
   13754:	d9001217 	ldw	r4,72(sp)
   13758:	314d883a 	add	r6,r6,r5
   1375c:	30c00117 	ldw	r3,4(r6)
   13760:	30800017 	ldw	r2,0(r6)
   13764:	d9401317 	ldw	r5,76(sp)
   13768:	3821d13a 	srai	r16,r7,4
   1376c:	100d883a 	mov	r6,r2
   13770:	180f883a 	mov	r7,r3
   13774:	0018a080 	call	18a08 <__muldf3>
   13778:	1011883a 	mov	r8,r2
   1377c:	1813883a 	mov	r9,r3
   13780:	1029883a 	mov	r20,r2
   13784:	182b883a 	mov	r21,r3
   13788:	8001e526 	beq	r16,zero,13f20 <_dtoa_r+0x14a0>
   1378c:	05800084 	movi	r22,2
   13790:	044000f4 	movhi	r17,3
   13794:	8c608404 	addi	r17,r17,-32240
   13798:	8080004c 	andi	r2,r16,1
   1379c:	1005003a 	cmpeq	r2,r2,zero
   137a0:	1000081e 	bne	r2,zero,137c4 <_dtoa_r+0xd44>
   137a4:	89800017 	ldw	r6,0(r17)
   137a8:	89c00117 	ldw	r7,4(r17)
   137ac:	480b883a 	mov	r5,r9
   137b0:	4009883a 	mov	r4,r8
   137b4:	0018a080 	call	18a08 <__muldf3>
   137b8:	1011883a 	mov	r8,r2
   137bc:	b5800044 	addi	r22,r22,1
   137c0:	1813883a 	mov	r9,r3
   137c4:	8021d07a 	srai	r16,r16,1
   137c8:	8c400204 	addi	r17,r17,8
   137cc:	803ff21e 	bne	r16,zero,13798 <_dtoa_r+0xd18>
   137d0:	4029883a 	mov	r20,r8
   137d4:	482b883a 	mov	r21,r9
   137d8:	003dca06 	br	12f04 <_dtoa_r+0x484>
   137dc:	d9000817 	ldw	r4,32(sp)
   137e0:	2005003a 	cmpeq	r2,r4,zero
   137e4:	1001f61e 	bne	r2,zero,13fc0 <_dtoa_r+0x1540>
   137e8:	dc001117 	ldw	r16,68(sp)
   137ec:	dc801017 	ldw	r18,64(sp)
   137f0:	18c10cc4 	addi	r3,r3,1075
   137f4:	003f6106 	br	1357c <_dtoa_r+0xafc>
   137f8:	d8000b15 	stw	zero,44(sp)
   137fc:	d9802617 	ldw	r6,152(sp)
   13800:	d8c00d17 	ldw	r3,52(sp)
   13804:	30800044 	addi	r2,r6,1
   13808:	18ad883a 	add	r22,r3,r2
   1380c:	b13fffc4 	addi	r4,r22,-1
   13810:	d9000e15 	stw	r4,56(sp)
   13814:	0581f60e 	bge	zero,r22,13ff0 <_dtoa_r+0x1570>
   13818:	dd800f15 	stw	r22,60(sp)
   1381c:	003f3006 	br	134e0 <_dtoa_r+0xa60>
   13820:	d8000b15 	stw	zero,44(sp)
   13824:	d9002617 	ldw	r4,152(sp)
   13828:	0101eb0e 	bge	zero,r4,13fd8 <_dtoa_r+0x1558>
   1382c:	202d883a 	mov	r22,r4
   13830:	d9000e15 	stw	r4,56(sp)
   13834:	d9000f15 	stw	r4,60(sp)
   13838:	003f2906 	br	134e0 <_dtoa_r+0xa60>
   1383c:	01800044 	movi	r6,1
   13840:	d9800b15 	stw	r6,44(sp)
   13844:	003ff706 	br	13824 <_dtoa_r+0xda4>
   13848:	01000044 	movi	r4,1
   1384c:	d9000b15 	stw	r4,44(sp)
   13850:	003fea06 	br	137fc <_dtoa_r+0xd7c>
   13854:	04000c0e 	bge	zero,r16,13888 <_dtoa_r+0xe08>
   13858:	d9400717 	ldw	r5,28(sp)
   1385c:	d9001617 	ldw	r4,88(sp)
   13860:	01800044 	movi	r6,1
   13864:	00165580 	call	16558 <__lshift>
   13868:	1009883a 	mov	r4,r2
   1386c:	900b883a 	mov	r5,r18
   13870:	d8800715 	stw	r2,28(sp)
   13874:	0015d700 	call	15d70 <__mcmp>
   13878:	0081e00e 	bge	zero,r2,13ffc <_dtoa_r+0x157c>
   1387c:	bdc00044 	addi	r23,r23,1
   13880:	00800e84 	movi	r2,58
   13884:	b881a226 	beq	r23,r2,13f10 <_dtoa_r+0x1490>
   13888:	b7000044 	addi	fp,r22,1
   1388c:	b5c00005 	stb	r23,0(r22)
   13890:	003f7406 	br	13664 <_dtoa_r+0xbe4>
   13894:	00800e44 	movi	r2,57
   13898:	b8819d26 	beq	r23,r2,13f10 <_dtoa_r+0x1490>
   1389c:	053ffa0e 	bge	zero,r20,13888 <_dtoa_r+0xe08>
   138a0:	8dc00c44 	addi	r23,r17,49
   138a4:	003ff806 	br	13888 <_dtoa_r+0xe08>
   138a8:	d9001617 	ldw	r4,88(sp)
   138ac:	a80b883a 	mov	r5,r21
   138b0:	04000044 	movi	r16,1
   138b4:	0015c140 	call	15c14 <_Bfree>
   138b8:	003edf06 	br	13438 <_dtoa_r+0x9b8>
   138bc:	d9001617 	ldw	r4,88(sp)
   138c0:	980b883a 	mov	r5,r19
   138c4:	01800284 	movi	r6,10
   138c8:	000f883a 	mov	r7,zero
   138cc:	00168c80 	call	168c8 <__multadd>
   138d0:	1027883a 	mov	r19,r2
   138d4:	d8800615 	stw	r2,24(sp)
   138d8:	003ebb06 	br	133c8 <_dtoa_r+0x948>
   138dc:	d9801117 	ldw	r6,68(sp)
   138e0:	d8800d17 	ldw	r2,52(sp)
   138e4:	d8000915 	stw	zero,36(sp)
   138e8:	308dc83a 	sub	r6,r6,r2
   138ec:	0087c83a 	sub	r3,zero,r2
   138f0:	d9801115 	stw	r6,68(sp)
   138f4:	d8c01015 	stw	r3,64(sp)
   138f8:	003cfe06 	br	12cf4 <_dtoa_r+0x274>
   138fc:	018dc83a 	sub	r6,zero,r6
   13900:	d9801115 	stw	r6,68(sp)
   13904:	d8000a15 	stw	zero,40(sp)
   13908:	003cf306 	br	12cd8 <_dtoa_r+0x258>
   1390c:	d9000d17 	ldw	r4,52(sp)
   13910:	00192cc0 	call	192cc <__floatsidf>
   13914:	880b883a 	mov	r5,r17
   13918:	8009883a 	mov	r4,r16
   1391c:	180f883a 	mov	r7,r3
   13920:	100d883a 	mov	r6,r2
   13924:	00190ac0 	call	190ac <__nedf2>
   13928:	103ce126 	beq	r2,zero,12cb0 <_dtoa_r+0x230>
   1392c:	d9800d17 	ldw	r6,52(sp)
   13930:	31bfffc4 	addi	r6,r6,-1
   13934:	d9800d15 	stw	r6,52(sp)
   13938:	003cdd06 	br	12cb0 <_dtoa_r+0x230>
   1393c:	d9000717 	ldw	r4,28(sp)
   13940:	900b883a 	mov	r5,r18
   13944:	0015d700 	call	15d70 <__mcmp>
   13948:	103e8d0e 	bge	r2,zero,13380 <_dtoa_r+0x900>
   1394c:	d9400717 	ldw	r5,28(sp)
   13950:	d9001617 	ldw	r4,88(sp)
   13954:	01800284 	movi	r6,10
   13958:	000f883a 	mov	r7,zero
   1395c:	00168c80 	call	168c8 <__multadd>
   13960:	d9800d17 	ldw	r6,52(sp)
   13964:	d8800715 	stw	r2,28(sp)
   13968:	31bfffc4 	addi	r6,r6,-1
   1396c:	d9800d15 	stw	r6,52(sp)
   13970:	b001a71e 	bne	r22,zero,14010 <_dtoa_r+0x1590>
   13974:	d8800e17 	ldw	r2,56(sp)
   13978:	d8800f15 	stw	r2,60(sp)
   1397c:	003e8006 	br	13380 <_dtoa_r+0x900>
   13980:	90800417 	ldw	r2,16(r18)
   13984:	1085883a 	add	r2,r2,r2
   13988:	1085883a 	add	r2,r2,r2
   1398c:	1485883a 	add	r2,r2,r18
   13990:	11000417 	ldw	r4,16(r2)
   13994:	0015c3c0 	call	15c3c <__hi0bits>
   13998:	00c00804 	movi	r3,32
   1399c:	1887c83a 	sub	r3,r3,r2
   139a0:	003e5a06 	br	1330c <_dtoa_r+0x88c>
   139a4:	d9400717 	ldw	r5,28(sp)
   139a8:	d9801017 	ldw	r6,64(sp)
   139ac:	d9001617 	ldw	r4,88(sp)
   139b0:	00169c80 	call	169c8 <__pow5mult>
   139b4:	d8800715 	stw	r2,28(sp)
   139b8:	003e4306 	br	132c8 <_dtoa_r+0x848>
   139bc:	d9800f17 	ldw	r6,60(sp)
   139c0:	d8800d17 	ldw	r2,52(sp)
   139c4:	d9800315 	stw	r6,12(sp)
   139c8:	d8800415 	stw	r2,16(sp)
   139cc:	d8c00b17 	ldw	r3,44(sp)
   139d0:	1805003a 	cmpeq	r2,r3,zero
   139d4:	1000e21e 	bne	r2,zero,13d60 <_dtoa_r+0x12e0>
   139d8:	d9000317 	ldw	r4,12(sp)
   139dc:	0005883a 	mov	r2,zero
   139e0:	00cff834 	movhi	r3,16352
   139e4:	200c90fa 	slli	r6,r4,3
   139e8:	010000f4 	movhi	r4,3
   139ec:	21205204 	addi	r4,r4,-32440
   139f0:	180b883a 	mov	r5,r3
   139f4:	310d883a 	add	r6,r6,r4
   139f8:	327fff17 	ldw	r9,-4(r6)
   139fc:	323ffe17 	ldw	r8,-8(r6)
   13a00:	1009883a 	mov	r4,r2
   13a04:	480f883a 	mov	r7,r9
   13a08:	400d883a 	mov	r6,r8
   13a0c:	0018dcc0 	call	18dcc <__divdf3>
   13a10:	180b883a 	mov	r5,r3
   13a14:	b00d883a 	mov	r6,r22
   13a18:	b80f883a 	mov	r7,r23
   13a1c:	1009883a 	mov	r4,r2
   13a20:	00189140 	call	18914 <__subdf3>
   13a24:	a80b883a 	mov	r5,r21
   13a28:	a009883a 	mov	r4,r20
   13a2c:	d8c01915 	stw	r3,100(sp)
   13a30:	d8801815 	stw	r2,96(sp)
   13a34:	00193c40 	call	193c4 <__fixdfsi>
   13a38:	1009883a 	mov	r4,r2
   13a3c:	1027883a 	mov	r19,r2
   13a40:	00192cc0 	call	192cc <__floatsidf>
   13a44:	a80b883a 	mov	r5,r21
   13a48:	a009883a 	mov	r4,r20
   13a4c:	180f883a 	mov	r7,r3
   13a50:	100d883a 	mov	r6,r2
   13a54:	00189140 	call	18914 <__subdf3>
   13a58:	d9801817 	ldw	r6,96(sp)
   13a5c:	1823883a 	mov	r17,r3
   13a60:	d8801415 	stw	r2,80(sp)
   13a64:	302d883a 	mov	r22,r6
   13a68:	d9800517 	ldw	r6,20(sp)
   13a6c:	9cc00c04 	addi	r19,r19,48
   13a70:	dc401515 	stw	r17,84(sp)
   13a74:	d8c01917 	ldw	r3,100(sp)
   13a78:	34c00005 	stb	r19,0(r6)
   13a7c:	d8800517 	ldw	r2,20(sp)
   13a80:	d9401917 	ldw	r5,100(sp)
   13a84:	d9801417 	ldw	r6,80(sp)
   13a88:	b009883a 	mov	r4,r22
   13a8c:	880f883a 	mov	r7,r17
   13a90:	182f883a 	mov	r23,r3
   13a94:	17000044 	addi	fp,r2,1
   13a98:	00191340 	call	19134 <__gtdf2>
   13a9c:	00804e16 	blt	zero,r2,13bd8 <_dtoa_r+0x1158>
   13aa0:	d9801417 	ldw	r6,80(sp)
   13aa4:	0005883a 	mov	r2,zero
   13aa8:	00cffc34 	movhi	r3,16368
   13aac:	180b883a 	mov	r5,r3
   13ab0:	880f883a 	mov	r7,r17
   13ab4:	1009883a 	mov	r4,r2
   13ab8:	00189140 	call	18914 <__subdf3>
   13abc:	d9401917 	ldw	r5,100(sp)
   13ac0:	180f883a 	mov	r7,r3
   13ac4:	b009883a 	mov	r4,r22
   13ac8:	100d883a 	mov	r6,r2
   13acc:	00191340 	call	19134 <__gtdf2>
   13ad0:	00bda216 	blt	zero,r2,1315c <_dtoa_r+0x6dc>
   13ad4:	d8c00317 	ldw	r3,12(sp)
   13ad8:	00800044 	movi	r2,1
   13adc:	10c01216 	blt	r2,r3,13b28 <_dtoa_r+0x10a8>
   13ae0:	003d4506 	br	12ff8 <_dtoa_r+0x578>
   13ae4:	d9801417 	ldw	r6,80(sp)
   13ae8:	0005883a 	mov	r2,zero
   13aec:	00cffc34 	movhi	r3,16368
   13af0:	180b883a 	mov	r5,r3
   13af4:	880f883a 	mov	r7,r17
   13af8:	1009883a 	mov	r4,r2
   13afc:	00189140 	call	18914 <__subdf3>
   13b00:	d9c01b17 	ldw	r7,108(sp)
   13b04:	180b883a 	mov	r5,r3
   13b08:	1009883a 	mov	r4,r2
   13b0c:	b00d883a 	mov	r6,r22
   13b10:	00192440 	call	19244 <__ltdf2>
   13b14:	103d9116 	blt	r2,zero,1315c <_dtoa_r+0x6dc>
   13b18:	d9800517 	ldw	r6,20(sp)
   13b1c:	d9000317 	ldw	r4,12(sp)
   13b20:	3105883a 	add	r2,r6,r4
   13b24:	e0bd3426 	beq	fp,r2,12ff8 <_dtoa_r+0x578>
   13b28:	04500934 	movhi	r17,16420
   13b2c:	0021883a 	mov	r16,zero
   13b30:	b80b883a 	mov	r5,r23
   13b34:	b009883a 	mov	r4,r22
   13b38:	800d883a 	mov	r6,r16
   13b3c:	880f883a 	mov	r7,r17
   13b40:	0018a080 	call	18a08 <__muldf3>
   13b44:	d9401517 	ldw	r5,84(sp)
   13b48:	d9001417 	ldw	r4,80(sp)
   13b4c:	880f883a 	mov	r7,r17
   13b50:	000d883a 	mov	r6,zero
   13b54:	d8801a15 	stw	r2,104(sp)
   13b58:	d8c01b15 	stw	r3,108(sp)
   13b5c:	0018a080 	call	18a08 <__muldf3>
   13b60:	180b883a 	mov	r5,r3
   13b64:	1009883a 	mov	r4,r2
   13b68:	1823883a 	mov	r17,r3
   13b6c:	1021883a 	mov	r16,r2
   13b70:	00193c40 	call	193c4 <__fixdfsi>
   13b74:	1009883a 	mov	r4,r2
   13b78:	102b883a 	mov	r21,r2
   13b7c:	00192cc0 	call	192cc <__floatsidf>
   13b80:	880b883a 	mov	r5,r17
   13b84:	8009883a 	mov	r4,r16
   13b88:	180f883a 	mov	r7,r3
   13b8c:	100d883a 	mov	r6,r2
   13b90:	00189140 	call	18914 <__subdf3>
   13b94:	1021883a 	mov	r16,r2
   13b98:	d9001b17 	ldw	r4,108(sp)
   13b9c:	1823883a 	mov	r17,r3
   13ba0:	dc001415 	stw	r16,80(sp)
   13ba4:	ad400c04 	addi	r21,r21,48
   13ba8:	dc401515 	stw	r17,84(sp)
   13bac:	d8801a17 	ldw	r2,104(sp)
   13bb0:	e5400005 	stb	r21,0(fp)
   13bb4:	202f883a 	mov	r23,r4
   13bb8:	d9c01b17 	ldw	r7,108(sp)
   13bbc:	d9001417 	ldw	r4,80(sp)
   13bc0:	880b883a 	mov	r5,r17
   13bc4:	100d883a 	mov	r6,r2
   13bc8:	102d883a 	mov	r22,r2
   13bcc:	e7000044 	addi	fp,fp,1
   13bd0:	00192440 	call	19244 <__ltdf2>
   13bd4:	103fc30e 	bge	r2,zero,13ae4 <_dtoa_r+0x1064>
   13bd8:	d9000417 	ldw	r4,16(sp)
   13bdc:	d9000d15 	stw	r4,52(sp)
   13be0:	003d7106 	br	131a8 <_dtoa_r+0x728>
   13be4:	d9801717 	ldw	r6,92(sp)
   13be8:	00800084 	movi	r2,2
   13bec:	11bde60e 	bge	r2,r6,13388 <_dtoa_r+0x908>
   13bf0:	203cfb1e 	bne	r4,zero,12fe0 <_dtoa_r+0x560>
   13bf4:	d9001617 	ldw	r4,88(sp)
   13bf8:	900b883a 	mov	r5,r18
   13bfc:	01800144 	movi	r6,5
   13c00:	000f883a 	mov	r7,zero
   13c04:	00168c80 	call	168c8 <__multadd>
   13c08:	d9000717 	ldw	r4,28(sp)
   13c0c:	100b883a 	mov	r5,r2
   13c10:	1025883a 	mov	r18,r2
   13c14:	0015d700 	call	15d70 <__mcmp>
   13c18:	00bcf10e 	bge	zero,r2,12fe0 <_dtoa_r+0x560>
   13c1c:	d8c00d17 	ldw	r3,52(sp)
   13c20:	d9000517 	ldw	r4,20(sp)
   13c24:	d8000615 	stw	zero,24(sp)
   13c28:	18c00044 	addi	r3,r3,1
   13c2c:	d8c00d15 	stw	r3,52(sp)
   13c30:	00800c44 	movi	r2,49
   13c34:	27000044 	addi	fp,r4,1
   13c38:	20800005 	stb	r2,0(r4)
   13c3c:	003e8906 	br	13664 <_dtoa_r+0xbe4>
   13c40:	d8c00517 	ldw	r3,20(sp)
   13c44:	003bc206 	br	12b50 <_dtoa_r+0xd0>
   13c48:	018000f4 	movhi	r6,3
   13c4c:	31a08404 	addi	r6,r6,-32240
   13c50:	30c00917 	ldw	r3,36(r6)
   13c54:	30800817 	ldw	r2,32(r6)
   13c58:	d9001217 	ldw	r4,72(sp)
   13c5c:	d9401317 	ldw	r5,76(sp)
   13c60:	180f883a 	mov	r7,r3
   13c64:	100d883a 	mov	r6,r2
   13c68:	0018dcc0 	call	18dcc <__divdf3>
   13c6c:	948003cc 	andi	r18,r18,15
   13c70:	058000c4 	movi	r22,3
   13c74:	1029883a 	mov	r20,r2
   13c78:	182b883a 	mov	r21,r3
   13c7c:	003c8906 	br	12ea4 <_dtoa_r+0x424>
   13c80:	d9001017 	ldw	r4,64(sp)
   13c84:	d9800917 	ldw	r6,36(sp)
   13c88:	0025883a 	mov	r18,zero
   13c8c:	1105c83a 	sub	r2,r2,r4
   13c90:	2089883a 	add	r4,r4,r2
   13c94:	308d883a 	add	r6,r6,r2
   13c98:	d9001015 	stw	r4,64(sp)
   13c9c:	d9800915 	stw	r6,36(sp)
   13ca0:	003e3206 	br	1356c <_dtoa_r+0xaec>
   13ca4:	28800044 	addi	r2,r5,1
   13ca8:	27000044 	addi	fp,r4,1
   13cac:	20800005 	stb	r2,0(r4)
   13cb0:	003e6c06 	br	13664 <_dtoa_r+0xbe4>
   13cb4:	d8800f17 	ldw	r2,60(sp)
   13cb8:	00bce016 	blt	zero,r2,1303c <_dtoa_r+0x5bc>
   13cbc:	d9800f17 	ldw	r6,60(sp)
   13cc0:	303cc51e 	bne	r6,zero,12fd8 <_dtoa_r+0x558>
   13cc4:	0005883a 	mov	r2,zero
   13cc8:	00d00534 	movhi	r3,16404
   13ccc:	980b883a 	mov	r5,r19
   13cd0:	180f883a 	mov	r7,r3
   13cd4:	9009883a 	mov	r4,r18
   13cd8:	100d883a 	mov	r6,r2
   13cdc:	0018a080 	call	18a08 <__muldf3>
   13ce0:	180b883a 	mov	r5,r3
   13ce4:	a80f883a 	mov	r7,r21
   13ce8:	1009883a 	mov	r4,r2
   13cec:	a00d883a 	mov	r6,r20
   13cf0:	00191bc0 	call	191bc <__gedf2>
   13cf4:	103cb80e 	bge	r2,zero,12fd8 <_dtoa_r+0x558>
   13cf8:	0027883a 	mov	r19,zero
   13cfc:	0025883a 	mov	r18,zero
   13d00:	003fc606 	br	13c1c <_dtoa_r+0x119c>
   13d04:	99400117 	ldw	r5,4(r19)
   13d08:	d9001617 	ldw	r4,88(sp)
   13d0c:	00161940 	call	16194 <_Balloc>
   13d10:	99800417 	ldw	r6,16(r19)
   13d14:	11000304 	addi	r4,r2,12
   13d18:	99400304 	addi	r5,r19,12
   13d1c:	318d883a 	add	r6,r6,r6
   13d20:	318d883a 	add	r6,r6,r6
   13d24:	31800204 	addi	r6,r6,8
   13d28:	1023883a 	mov	r17,r2
   13d2c:	00159fc0 	call	159fc <memcpy>
   13d30:	d9001617 	ldw	r4,88(sp)
   13d34:	880b883a 	mov	r5,r17
   13d38:	01800044 	movi	r6,1
   13d3c:	00165580 	call	16558 <__lshift>
   13d40:	100b883a 	mov	r5,r2
   13d44:	003d9c06 	br	133b8 <_dtoa_r+0x938>
   13d48:	00800e44 	movi	r2,57
   13d4c:	b8807026 	beq	r23,r2,13f10 <_dtoa_r+0x1490>
   13d50:	b8800044 	addi	r2,r23,1
   13d54:	b7000044 	addi	fp,r22,1
   13d58:	b0800005 	stb	r2,0(r22)
   13d5c:	003e4106 	br	13664 <_dtoa_r+0xbe4>
   13d60:	d8800317 	ldw	r2,12(sp)
   13d64:	018000f4 	movhi	r6,3
   13d68:	31a05204 	addi	r6,r6,-32440
   13d6c:	b009883a 	mov	r4,r22
   13d70:	100e90fa 	slli	r7,r2,3
   13d74:	b80b883a 	mov	r5,r23
   13d78:	398f883a 	add	r7,r7,r6
   13d7c:	38bffe17 	ldw	r2,-8(r7)
   13d80:	d9800517 	ldw	r6,20(sp)
   13d84:	38ffff17 	ldw	r3,-4(r7)
   13d88:	37000044 	addi	fp,r6,1
   13d8c:	180f883a 	mov	r7,r3
   13d90:	100d883a 	mov	r6,r2
   13d94:	0018a080 	call	18a08 <__muldf3>
   13d98:	a80b883a 	mov	r5,r21
   13d9c:	a009883a 	mov	r4,r20
   13da0:	182f883a 	mov	r23,r3
   13da4:	102d883a 	mov	r22,r2
   13da8:	00193c40 	call	193c4 <__fixdfsi>
   13dac:	1009883a 	mov	r4,r2
   13db0:	1027883a 	mov	r19,r2
   13db4:	00192cc0 	call	192cc <__floatsidf>
   13db8:	a80b883a 	mov	r5,r21
   13dbc:	a009883a 	mov	r4,r20
   13dc0:	180f883a 	mov	r7,r3
   13dc4:	100d883a 	mov	r6,r2
   13dc8:	00189140 	call	18914 <__subdf3>
   13dcc:	180b883a 	mov	r5,r3
   13dd0:	d8c00517 	ldw	r3,20(sp)
   13dd4:	9cc00c04 	addi	r19,r19,48
   13dd8:	1009883a 	mov	r4,r2
   13ddc:	1cc00005 	stb	r19,0(r3)
   13de0:	2021883a 	mov	r16,r4
   13de4:	d9000317 	ldw	r4,12(sp)
   13de8:	00800044 	movi	r2,1
   13dec:	2823883a 	mov	r17,r5
   13df0:	20802226 	beq	r4,r2,13e7c <_dtoa_r+0x13fc>
   13df4:	1029883a 	mov	r20,r2
   13df8:	0005883a 	mov	r2,zero
   13dfc:	00d00934 	movhi	r3,16420
   13e00:	180f883a 	mov	r7,r3
   13e04:	100d883a 	mov	r6,r2
   13e08:	880b883a 	mov	r5,r17
   13e0c:	8009883a 	mov	r4,r16
   13e10:	0018a080 	call	18a08 <__muldf3>
   13e14:	180b883a 	mov	r5,r3
   13e18:	1009883a 	mov	r4,r2
   13e1c:	1823883a 	mov	r17,r3
   13e20:	1021883a 	mov	r16,r2
   13e24:	00193c40 	call	193c4 <__fixdfsi>
   13e28:	1009883a 	mov	r4,r2
   13e2c:	102b883a 	mov	r21,r2
   13e30:	00192cc0 	call	192cc <__floatsidf>
   13e34:	880b883a 	mov	r5,r17
   13e38:	8009883a 	mov	r4,r16
   13e3c:	180f883a 	mov	r7,r3
   13e40:	100d883a 	mov	r6,r2
   13e44:	00189140 	call	18914 <__subdf3>
   13e48:	180b883a 	mov	r5,r3
   13e4c:	d8c00517 	ldw	r3,20(sp)
   13e50:	1009883a 	mov	r4,r2
   13e54:	ad400c04 	addi	r21,r21,48
   13e58:	1d05883a 	add	r2,r3,r20
   13e5c:	15400005 	stb	r21,0(r2)
   13e60:	2021883a 	mov	r16,r4
   13e64:	d9000317 	ldw	r4,12(sp)
   13e68:	a5000044 	addi	r20,r20,1
   13e6c:	2823883a 	mov	r17,r5
   13e70:	a13fe11e 	bne	r20,r4,13df8 <_dtoa_r+0x1378>
   13e74:	e505883a 	add	r2,fp,r20
   13e78:	173fffc4 	addi	fp,r2,-1
   13e7c:	0025883a 	mov	r18,zero
   13e80:	04cff834 	movhi	r19,16352
   13e84:	b009883a 	mov	r4,r22
   13e88:	b80b883a 	mov	r5,r23
   13e8c:	900d883a 	mov	r6,r18
   13e90:	980f883a 	mov	r7,r19
   13e94:	00189940 	call	18994 <__adddf3>
   13e98:	180b883a 	mov	r5,r3
   13e9c:	1009883a 	mov	r4,r2
   13ea0:	800d883a 	mov	r6,r16
   13ea4:	880f883a 	mov	r7,r17
   13ea8:	00192440 	call	19244 <__ltdf2>
   13eac:	103cab16 	blt	r2,zero,1315c <_dtoa_r+0x6dc>
   13eb0:	0009883a 	mov	r4,zero
   13eb4:	980b883a 	mov	r5,r19
   13eb8:	b80f883a 	mov	r7,r23
   13ebc:	b00d883a 	mov	r6,r22
   13ec0:	00189140 	call	18914 <__subdf3>
   13ec4:	180b883a 	mov	r5,r3
   13ec8:	880f883a 	mov	r7,r17
   13ecc:	1009883a 	mov	r4,r2
   13ed0:	800d883a 	mov	r6,r16
   13ed4:	00191340 	call	19134 <__gtdf2>
   13ed8:	00bc470e 	bge	zero,r2,12ff8 <_dtoa_r+0x578>
   13edc:	00c00c04 	movi	r3,48
   13ee0:	e73fffc4 	addi	fp,fp,-1
   13ee4:	e0800007 	ldb	r2,0(fp)
   13ee8:	10fffd26 	beq	r2,r3,13ee0 <_dtoa_r+0x1460>
   13eec:	d9800417 	ldw	r6,16(sp)
   13ef0:	e7000044 	addi	fp,fp,1
   13ef4:	d9800d15 	stw	r6,52(sp)
   13ef8:	003cab06 	br	131a8 <_dtoa_r+0x728>
   13efc:	d8c00f17 	ldw	r3,60(sp)
   13f00:	d9001117 	ldw	r4,68(sp)
   13f04:	20e1c83a 	sub	r16,r4,r3
   13f08:	0007883a 	mov	r3,zero
   13f0c:	003d9b06 	br	1357c <_dtoa_r+0xafc>
   13f10:	00800e44 	movi	r2,57
   13f14:	b0800005 	stb	r2,0(r22)
   13f18:	b5800044 	addi	r22,r22,1
   13f1c:	003dc106 	br	13624 <_dtoa_r+0xba4>
   13f20:	05800084 	movi	r22,2
   13f24:	003bf706 	br	12f04 <_dtoa_r+0x484>
   13f28:	d9000f17 	ldw	r4,60(sp)
   13f2c:	013c000e 	bge	zero,r4,12f30 <_dtoa_r+0x4b0>
   13f30:	d9800e17 	ldw	r6,56(sp)
   13f34:	01bc300e 	bge	zero,r6,12ff8 <_dtoa_r+0x578>
   13f38:	0005883a 	mov	r2,zero
   13f3c:	00d00934 	movhi	r3,16420
   13f40:	a80b883a 	mov	r5,r21
   13f44:	180f883a 	mov	r7,r3
   13f48:	a009883a 	mov	r4,r20
   13f4c:	100d883a 	mov	r6,r2
   13f50:	0018a080 	call	18a08 <__muldf3>
   13f54:	b1000044 	addi	r4,r22,1
   13f58:	1021883a 	mov	r16,r2
   13f5c:	1823883a 	mov	r17,r3
   13f60:	00192cc0 	call	192cc <__floatsidf>
   13f64:	880b883a 	mov	r5,r17
   13f68:	8009883a 	mov	r4,r16
   13f6c:	180f883a 	mov	r7,r3
   13f70:	100d883a 	mov	r6,r2
   13f74:	0018a080 	call	18a08 <__muldf3>
   13f78:	0011883a 	mov	r8,zero
   13f7c:	02500734 	movhi	r9,16412
   13f80:	180b883a 	mov	r5,r3
   13f84:	480f883a 	mov	r7,r9
   13f88:	1009883a 	mov	r4,r2
   13f8c:	400d883a 	mov	r6,r8
   13f90:	00189940 	call	18994 <__adddf3>
   13f94:	102d883a 	mov	r22,r2
   13f98:	00bf3034 	movhi	r2,64704
   13f9c:	10ef883a 	add	r23,r2,r3
   13fa0:	d8800d17 	ldw	r2,52(sp)
   13fa4:	d8c00e17 	ldw	r3,56(sp)
   13fa8:	8029883a 	mov	r20,r16
   13fac:	10bfffc4 	addi	r2,r2,-1
   13fb0:	882b883a 	mov	r21,r17
   13fb4:	d8800415 	stw	r2,16(sp)
   13fb8:	d8c00315 	stw	r3,12(sp)
   13fbc:	003e8306 	br	139cc <_dtoa_r+0xf4c>
   13fc0:	d8800117 	ldw	r2,4(sp)
   13fc4:	dc001117 	ldw	r16,68(sp)
   13fc8:	dc801017 	ldw	r18,64(sp)
   13fcc:	00c00d84 	movi	r3,54
   13fd0:	1887c83a 	sub	r3,r3,r2
   13fd4:	003d6906 	br	1357c <_dtoa_r+0xafc>
   13fd8:	01800044 	movi	r6,1
   13fdc:	3021883a 	mov	r16,r6
   13fe0:	d9800f15 	stw	r6,60(sp)
   13fe4:	d9802615 	stw	r6,152(sp)
   13fe8:	d9800e15 	stw	r6,56(sp)
   13fec:	003b9306 	br	12e3c <_dtoa_r+0x3bc>
   13ff0:	b021883a 	mov	r16,r22
   13ff4:	dd800f15 	stw	r22,60(sp)
   13ff8:	003b9006 	br	12e3c <_dtoa_r+0x3bc>
   13ffc:	103e221e 	bne	r2,zero,13888 <_dtoa_r+0xe08>
   14000:	b880004c 	andi	r2,r23,1
   14004:	1005003a 	cmpeq	r2,r2,zero
   14008:	103e1f1e 	bne	r2,zero,13888 <_dtoa_r+0xe08>
   1400c:	003e1b06 	br	1387c <_dtoa_r+0xdfc>
   14010:	d9001617 	ldw	r4,88(sp)
   14014:	980b883a 	mov	r5,r19
   14018:	01800284 	movi	r6,10
   1401c:	000f883a 	mov	r7,zero
   14020:	00168c80 	call	168c8 <__multadd>
   14024:	d8c00e17 	ldw	r3,56(sp)
   14028:	1027883a 	mov	r19,r2
   1402c:	d8c00f15 	stw	r3,60(sp)
   14030:	003cd306 	br	13380 <_dtoa_r+0x900>

00014034 <_fflush_r>:
   14034:	defffb04 	addi	sp,sp,-20
   14038:	dcc00315 	stw	r19,12(sp)
   1403c:	dc800215 	stw	r18,8(sp)
   14040:	dfc00415 	stw	ra,16(sp)
   14044:	dc400115 	stw	r17,4(sp)
   14048:	dc000015 	stw	r16,0(sp)
   1404c:	2027883a 	mov	r19,r4
   14050:	2825883a 	mov	r18,r5
   14054:	20000226 	beq	r4,zero,14060 <_fflush_r+0x2c>
   14058:	20800e17 	ldw	r2,56(r4)
   1405c:	10005626 	beq	r2,zero,141b8 <_fflush_r+0x184>
   14060:	9100030b 	ldhu	r4,12(r18)
   14064:	20ffffcc 	andi	r3,r4,65535
   14068:	18e0001c 	xori	r3,r3,32768
   1406c:	18e00004 	addi	r3,r3,-32768
   14070:	1880020c 	andi	r2,r3,8
   14074:	1000261e 	bne	r2,zero,14110 <_fflush_r+0xdc>
   14078:	90c00117 	ldw	r3,4(r18)
   1407c:	20820014 	ori	r2,r4,2048
   14080:	9080030d 	sth	r2,12(r18)
   14084:	1009883a 	mov	r4,r2
   14088:	00c0400e 	bge	zero,r3,1418c <_fflush_r+0x158>
   1408c:	92000a17 	ldw	r8,40(r18)
   14090:	40004026 	beq	r8,zero,14194 <_fflush_r+0x160>
   14094:	2084000c 	andi	r2,r4,4096
   14098:	10005326 	beq	r2,zero,141e8 <_fflush_r+0x1b4>
   1409c:	94001417 	ldw	r16,80(r18)
   140a0:	9080030b 	ldhu	r2,12(r18)
   140a4:	1080010c 	andi	r2,r2,4
   140a8:	1000481e 	bne	r2,zero,141cc <_fflush_r+0x198>
   140ac:	91400717 	ldw	r5,28(r18)
   140b0:	9809883a 	mov	r4,r19
   140b4:	800d883a 	mov	r6,r16
   140b8:	000f883a 	mov	r7,zero
   140bc:	403ee83a 	callr	r8
   140c0:	8080261e 	bne	r16,r2,1415c <_fflush_r+0x128>
   140c4:	9080030b 	ldhu	r2,12(r18)
   140c8:	91000417 	ldw	r4,16(r18)
   140cc:	90000115 	stw	zero,4(r18)
   140d0:	10bdffcc 	andi	r2,r2,63487
   140d4:	10ffffcc 	andi	r3,r2,65535
   140d8:	18c4000c 	andi	r3,r3,4096
   140dc:	9080030d 	sth	r2,12(r18)
   140e0:	91000015 	stw	r4,0(r18)
   140e4:	18002b26 	beq	r3,zero,14194 <_fflush_r+0x160>
   140e8:	0007883a 	mov	r3,zero
   140ec:	1805883a 	mov	r2,r3
   140f0:	94001415 	stw	r16,80(r18)
   140f4:	dfc00417 	ldw	ra,16(sp)
   140f8:	dcc00317 	ldw	r19,12(sp)
   140fc:	dc800217 	ldw	r18,8(sp)
   14100:	dc400117 	ldw	r17,4(sp)
   14104:	dc000017 	ldw	r16,0(sp)
   14108:	dec00504 	addi	sp,sp,20
   1410c:	f800283a 	ret
   14110:	94400417 	ldw	r17,16(r18)
   14114:	88001f26 	beq	r17,zero,14194 <_fflush_r+0x160>
   14118:	90800017 	ldw	r2,0(r18)
   1411c:	18c000cc 	andi	r3,r3,3
   14120:	94400015 	stw	r17,0(r18)
   14124:	1461c83a 	sub	r16,r2,r17
   14128:	18002526 	beq	r3,zero,141c0 <_fflush_r+0x18c>
   1412c:	0005883a 	mov	r2,zero
   14130:	90800215 	stw	r2,8(r18)
   14134:	0400170e 	bge	zero,r16,14194 <_fflush_r+0x160>
   14138:	90c00917 	ldw	r3,36(r18)
   1413c:	91400717 	ldw	r5,28(r18)
   14140:	880d883a 	mov	r6,r17
   14144:	800f883a 	mov	r7,r16
   14148:	9809883a 	mov	r4,r19
   1414c:	183ee83a 	callr	r3
   14150:	88a3883a 	add	r17,r17,r2
   14154:	80a1c83a 	sub	r16,r16,r2
   14158:	00bff616 	blt	zero,r2,14134 <_fflush_r+0x100>
   1415c:	9080030b 	ldhu	r2,12(r18)
   14160:	00ffffc4 	movi	r3,-1
   14164:	10801014 	ori	r2,r2,64
   14168:	9080030d 	sth	r2,12(r18)
   1416c:	1805883a 	mov	r2,r3
   14170:	dfc00417 	ldw	ra,16(sp)
   14174:	dcc00317 	ldw	r19,12(sp)
   14178:	dc800217 	ldw	r18,8(sp)
   1417c:	dc400117 	ldw	r17,4(sp)
   14180:	dc000017 	ldw	r16,0(sp)
   14184:	dec00504 	addi	sp,sp,20
   14188:	f800283a 	ret
   1418c:	90800f17 	ldw	r2,60(r18)
   14190:	00bfbe16 	blt	zero,r2,1408c <_fflush_r+0x58>
   14194:	0007883a 	mov	r3,zero
   14198:	1805883a 	mov	r2,r3
   1419c:	dfc00417 	ldw	ra,16(sp)
   141a0:	dcc00317 	ldw	r19,12(sp)
   141a4:	dc800217 	ldw	r18,8(sp)
   141a8:	dc400117 	ldw	r17,4(sp)
   141ac:	dc000017 	ldw	r16,0(sp)
   141b0:	dec00504 	addi	sp,sp,20
   141b4:	f800283a 	ret
   141b8:	00142cc0 	call	142cc <__sinit>
   141bc:	003fa806 	br	14060 <_fflush_r+0x2c>
   141c0:	90800517 	ldw	r2,20(r18)
   141c4:	90800215 	stw	r2,8(r18)
   141c8:	003fda06 	br	14134 <_fflush_r+0x100>
   141cc:	90800117 	ldw	r2,4(r18)
   141d0:	90c00c17 	ldw	r3,48(r18)
   141d4:	80a1c83a 	sub	r16,r16,r2
   141d8:	183fb426 	beq	r3,zero,140ac <_fflush_r+0x78>
   141dc:	90800f17 	ldw	r2,60(r18)
   141e0:	80a1c83a 	sub	r16,r16,r2
   141e4:	003fb106 	br	140ac <_fflush_r+0x78>
   141e8:	91400717 	ldw	r5,28(r18)
   141ec:	9809883a 	mov	r4,r19
   141f0:	000d883a 	mov	r6,zero
   141f4:	01c00044 	movi	r7,1
   141f8:	403ee83a 	callr	r8
   141fc:	1021883a 	mov	r16,r2
   14200:	00bfffc4 	movi	r2,-1
   14204:	80800226 	beq	r16,r2,14210 <_fflush_r+0x1dc>
   14208:	92000a17 	ldw	r8,40(r18)
   1420c:	003fa406 	br	140a0 <_fflush_r+0x6c>
   14210:	98c00017 	ldw	r3,0(r19)
   14214:	00800744 	movi	r2,29
   14218:	18bfde26 	beq	r3,r2,14194 <_fflush_r+0x160>
   1421c:	9080030b 	ldhu	r2,12(r18)
   14220:	8007883a 	mov	r3,r16
   14224:	10801014 	ori	r2,r2,64
   14228:	9080030d 	sth	r2,12(r18)
   1422c:	003fcf06 	br	1416c <_fflush_r+0x138>

00014230 <fflush>:
   14230:	01400074 	movhi	r5,1
   14234:	29500d04 	addi	r5,r5,16436
   14238:	2007883a 	mov	r3,r4
   1423c:	20000526 	beq	r4,zero,14254 <fflush+0x24>
   14240:	008000f4 	movhi	r2,3
   14244:	10a77404 	addi	r2,r2,-25136
   14248:	11000017 	ldw	r4,0(r2)
   1424c:	180b883a 	mov	r5,r3
   14250:	00140341 	jmpi	14034 <_fflush_r>
   14254:	008000f4 	movhi	r2,3
   14258:	10a77504 	addi	r2,r2,-25132
   1425c:	11000017 	ldw	r4,0(r2)
   14260:	0014e001 	jmpi	14e00 <_fwalk_reent>

00014264 <std>:
   14264:	00800074 	movhi	r2,1
   14268:	109cb704 	addi	r2,r2,29404
   1426c:	20800b15 	stw	r2,44(r4)
   14270:	00800074 	movhi	r2,1
   14274:	109cf204 	addi	r2,r2,29640
   14278:	20800815 	stw	r2,32(r4)
   1427c:	00c00074 	movhi	r3,1
   14280:	18dcd304 	addi	r3,r3,29516
   14284:	00800074 	movhi	r2,1
   14288:	109cb904 	addi	r2,r2,29412
   1428c:	2140030d 	sth	r5,12(r4)
   14290:	2180038d 	sth	r6,14(r4)
   14294:	20c00915 	stw	r3,36(r4)
   14298:	20800a15 	stw	r2,40(r4)
   1429c:	20000015 	stw	zero,0(r4)
   142a0:	20000115 	stw	zero,4(r4)
   142a4:	20000215 	stw	zero,8(r4)
   142a8:	20000415 	stw	zero,16(r4)
   142ac:	20000515 	stw	zero,20(r4)
   142b0:	20000615 	stw	zero,24(r4)
   142b4:	21000715 	stw	r4,28(r4)
   142b8:	f800283a 	ret

000142bc <__sfp_lock_acquire>:
   142bc:	f800283a 	ret

000142c0 <__sfp_lock_release>:
   142c0:	f800283a 	ret

000142c4 <__sinit_lock_acquire>:
   142c4:	f800283a 	ret

000142c8 <__sinit_lock_release>:
   142c8:	f800283a 	ret

000142cc <__sinit>:
   142cc:	20800e17 	ldw	r2,56(r4)
   142d0:	defffd04 	addi	sp,sp,-12
   142d4:	dc400115 	stw	r17,4(sp)
   142d8:	dc000015 	stw	r16,0(sp)
   142dc:	dfc00215 	stw	ra,8(sp)
   142e0:	04400044 	movi	r17,1
   142e4:	01400104 	movi	r5,4
   142e8:	000d883a 	mov	r6,zero
   142ec:	2021883a 	mov	r16,r4
   142f0:	2200bb04 	addi	r8,r4,748
   142f4:	200f883a 	mov	r7,r4
   142f8:	10000526 	beq	r2,zero,14310 <__sinit+0x44>
   142fc:	dfc00217 	ldw	ra,8(sp)
   14300:	dc400117 	ldw	r17,4(sp)
   14304:	dc000017 	ldw	r16,0(sp)
   14308:	dec00304 	addi	sp,sp,12
   1430c:	f800283a 	ret
   14310:	21000117 	ldw	r4,4(r4)
   14314:	00800074 	movhi	r2,1
   14318:	1090ec04 	addi	r2,r2,17328
   1431c:	00c000c4 	movi	r3,3
   14320:	80800f15 	stw	r2,60(r16)
   14324:	80c0b915 	stw	r3,740(r16)
   14328:	8200ba15 	stw	r8,744(r16)
   1432c:	84400e15 	stw	r17,56(r16)
   14330:	8000b815 	stw	zero,736(r16)
   14334:	00142640 	call	14264 <std>
   14338:	81000217 	ldw	r4,8(r16)
   1433c:	880d883a 	mov	r6,r17
   14340:	800f883a 	mov	r7,r16
   14344:	01400284 	movi	r5,10
   14348:	00142640 	call	14264 <std>
   1434c:	81000317 	ldw	r4,12(r16)
   14350:	800f883a 	mov	r7,r16
   14354:	01400484 	movi	r5,18
   14358:	01800084 	movi	r6,2
   1435c:	dfc00217 	ldw	ra,8(sp)
   14360:	dc400117 	ldw	r17,4(sp)
   14364:	dc000017 	ldw	r16,0(sp)
   14368:	dec00304 	addi	sp,sp,12
   1436c:	00142641 	jmpi	14264 <std>

00014370 <__fp_lock>:
   14370:	0005883a 	mov	r2,zero
   14374:	f800283a 	ret

00014378 <__fp_unlock>:
   14378:	0005883a 	mov	r2,zero
   1437c:	f800283a 	ret

00014380 <__fp_unlock_all>:
   14380:	008000f4 	movhi	r2,3
   14384:	10a77404 	addi	r2,r2,-25136
   14388:	11000017 	ldw	r4,0(r2)
   1438c:	01400074 	movhi	r5,1
   14390:	2950de04 	addi	r5,r5,17272
   14394:	0014ec81 	jmpi	14ec8 <_fwalk>

00014398 <__fp_lock_all>:
   14398:	008000f4 	movhi	r2,3
   1439c:	10a77404 	addi	r2,r2,-25136
   143a0:	11000017 	ldw	r4,0(r2)
   143a4:	01400074 	movhi	r5,1
   143a8:	2950dc04 	addi	r5,r5,17264
   143ac:	0014ec81 	jmpi	14ec8 <_fwalk>

000143b0 <_cleanup_r>:
   143b0:	01400074 	movhi	r5,1
   143b4:	295de404 	addi	r5,r5,30608
   143b8:	0014ec81 	jmpi	14ec8 <_fwalk>

000143bc <_cleanup>:
   143bc:	008000f4 	movhi	r2,3
   143c0:	10a77504 	addi	r2,r2,-25132
   143c4:	11000017 	ldw	r4,0(r2)
   143c8:	00143b01 	jmpi	143b0 <_cleanup_r>

000143cc <__sfmoreglue>:
   143cc:	defffc04 	addi	sp,sp,-16
   143d0:	dc400115 	stw	r17,4(sp)
   143d4:	2c401724 	muli	r17,r5,92
   143d8:	dc800215 	stw	r18,8(sp)
   143dc:	2825883a 	mov	r18,r5
   143e0:	89400304 	addi	r5,r17,12
   143e4:	dc000015 	stw	r16,0(sp)
   143e8:	dfc00315 	stw	ra,12(sp)
   143ec:	00151d80 	call	151d8 <_malloc_r>
   143f0:	0021883a 	mov	r16,zero
   143f4:	880d883a 	mov	r6,r17
   143f8:	000b883a 	mov	r5,zero
   143fc:	10000626 	beq	r2,zero,14418 <__sfmoreglue+0x4c>
   14400:	11000304 	addi	r4,r2,12
   14404:	14800115 	stw	r18,4(r2)
   14408:	10000015 	stw	zero,0(r2)
   1440c:	11000215 	stw	r4,8(r2)
   14410:	1021883a 	mov	r16,r2
   14414:	0015b7c0 	call	15b7c <memset>
   14418:	8005883a 	mov	r2,r16
   1441c:	dfc00317 	ldw	ra,12(sp)
   14420:	dc800217 	ldw	r18,8(sp)
   14424:	dc400117 	ldw	r17,4(sp)
   14428:	dc000017 	ldw	r16,0(sp)
   1442c:	dec00404 	addi	sp,sp,16
   14430:	f800283a 	ret

00014434 <__sfp>:
   14434:	defffd04 	addi	sp,sp,-12
   14438:	008000f4 	movhi	r2,3
   1443c:	10a77504 	addi	r2,r2,-25132
   14440:	dc000015 	stw	r16,0(sp)
   14444:	14000017 	ldw	r16,0(r2)
   14448:	dc400115 	stw	r17,4(sp)
   1444c:	dfc00215 	stw	ra,8(sp)
   14450:	80800e17 	ldw	r2,56(r16)
   14454:	2023883a 	mov	r17,r4
   14458:	10002626 	beq	r2,zero,144f4 <__sfp+0xc0>
   1445c:	8400b804 	addi	r16,r16,736
   14460:	80800117 	ldw	r2,4(r16)
   14464:	81000217 	ldw	r4,8(r16)
   14468:	10ffffc4 	addi	r3,r2,-1
   1446c:	18000916 	blt	r3,zero,14494 <__sfp+0x60>
   14470:	2080030f 	ldh	r2,12(r4)
   14474:	10000b26 	beq	r2,zero,144a4 <__sfp+0x70>
   14478:	017fffc4 	movi	r5,-1
   1447c:	00000206 	br	14488 <__sfp+0x54>
   14480:	2080030f 	ldh	r2,12(r4)
   14484:	10000726 	beq	r2,zero,144a4 <__sfp+0x70>
   14488:	18ffffc4 	addi	r3,r3,-1
   1448c:	21001704 	addi	r4,r4,92
   14490:	197ffb1e 	bne	r3,r5,14480 <__sfp+0x4c>
   14494:	80800017 	ldw	r2,0(r16)
   14498:	10001926 	beq	r2,zero,14500 <__sfp+0xcc>
   1449c:	1021883a 	mov	r16,r2
   144a0:	003fef06 	br	14460 <__sfp+0x2c>
   144a4:	00bfffc4 	movi	r2,-1
   144a8:	00c00044 	movi	r3,1
   144ac:	2080038d 	sth	r2,14(r4)
   144b0:	20c0030d 	sth	r3,12(r4)
   144b4:	20000015 	stw	zero,0(r4)
   144b8:	20000215 	stw	zero,8(r4)
   144bc:	20000115 	stw	zero,4(r4)
   144c0:	20000415 	stw	zero,16(r4)
   144c4:	20000515 	stw	zero,20(r4)
   144c8:	20000615 	stw	zero,24(r4)
   144cc:	20000c15 	stw	zero,48(r4)
   144d0:	20000d15 	stw	zero,52(r4)
   144d4:	20001115 	stw	zero,68(r4)
   144d8:	20001215 	stw	zero,72(r4)
   144dc:	2005883a 	mov	r2,r4
   144e0:	dfc00217 	ldw	ra,8(sp)
   144e4:	dc400117 	ldw	r17,4(sp)
   144e8:	dc000017 	ldw	r16,0(sp)
   144ec:	dec00304 	addi	sp,sp,12
   144f0:	f800283a 	ret
   144f4:	8009883a 	mov	r4,r16
   144f8:	00142cc0 	call	142cc <__sinit>
   144fc:	003fd706 	br	1445c <__sfp+0x28>
   14500:	8809883a 	mov	r4,r17
   14504:	01400104 	movi	r5,4
   14508:	00143cc0 	call	143cc <__sfmoreglue>
   1450c:	80800015 	stw	r2,0(r16)
   14510:	103fe21e 	bne	r2,zero,1449c <__sfp+0x68>
   14514:	00800304 	movi	r2,12
   14518:	0009883a 	mov	r4,zero
   1451c:	88800015 	stw	r2,0(r17)
   14520:	003fee06 	br	144dc <__sfp+0xa8>

00014524 <_malloc_trim_r>:
   14524:	defffb04 	addi	sp,sp,-20
   14528:	dcc00315 	stw	r19,12(sp)
   1452c:	04c000f4 	movhi	r19,3
   14530:	9ce1f004 	addi	r19,r19,-30784
   14534:	dc800215 	stw	r18,8(sp)
   14538:	dc400115 	stw	r17,4(sp)
   1453c:	dc000015 	stw	r16,0(sp)
   14540:	2823883a 	mov	r17,r5
   14544:	2025883a 	mov	r18,r4
   14548:	dfc00415 	stw	ra,16(sp)
   1454c:	001a42c0 	call	1a42c <__malloc_lock>
   14550:	98800217 	ldw	r2,8(r19)
   14554:	9009883a 	mov	r4,r18
   14558:	000b883a 	mov	r5,zero
   1455c:	10c00117 	ldw	r3,4(r2)
   14560:	00bfff04 	movi	r2,-4
   14564:	18a0703a 	and	r16,r3,r2
   14568:	8463c83a 	sub	r17,r16,r17
   1456c:	8c43fbc4 	addi	r17,r17,4079
   14570:	8822d33a 	srli	r17,r17,12
   14574:	0083ffc4 	movi	r2,4095
   14578:	8c7fffc4 	addi	r17,r17,-1
   1457c:	8822933a 	slli	r17,r17,12
   14580:	1440060e 	bge	r2,r17,1459c <_malloc_trim_r+0x78>
   14584:	001726c0 	call	1726c <_sbrk_r>
   14588:	98c00217 	ldw	r3,8(r19)
   1458c:	9009883a 	mov	r4,r18
   14590:	044bc83a 	sub	r5,zero,r17
   14594:	80c7883a 	add	r3,r16,r3
   14598:	10c00926 	beq	r2,r3,145c0 <_malloc_trim_r+0x9c>
   1459c:	001a44c0 	call	1a44c <__malloc_unlock>
   145a0:	0005883a 	mov	r2,zero
   145a4:	dfc00417 	ldw	ra,16(sp)
   145a8:	dcc00317 	ldw	r19,12(sp)
   145ac:	dc800217 	ldw	r18,8(sp)
   145b0:	dc400117 	ldw	r17,4(sp)
   145b4:	dc000017 	ldw	r16,0(sp)
   145b8:	dec00504 	addi	sp,sp,20
   145bc:	f800283a 	ret
   145c0:	9009883a 	mov	r4,r18
   145c4:	001726c0 	call	1726c <_sbrk_r>
   145c8:	844dc83a 	sub	r6,r16,r17
   145cc:	00ffffc4 	movi	r3,-1
   145d0:	9009883a 	mov	r4,r18
   145d4:	000b883a 	mov	r5,zero
   145d8:	01c000f4 	movhi	r7,3
   145dc:	39e79804 	addi	r7,r7,-24992
   145e0:	31800054 	ori	r6,r6,1
   145e4:	10c00926 	beq	r2,r3,1460c <_malloc_trim_r+0xe8>
   145e8:	38800017 	ldw	r2,0(r7)
   145ec:	98c00217 	ldw	r3,8(r19)
   145f0:	9009883a 	mov	r4,r18
   145f4:	1445c83a 	sub	r2,r2,r17
   145f8:	38800015 	stw	r2,0(r7)
   145fc:	19800115 	stw	r6,4(r3)
   14600:	001a44c0 	call	1a44c <__malloc_unlock>
   14604:	00800044 	movi	r2,1
   14608:	003fe606 	br	145a4 <_malloc_trim_r+0x80>
   1460c:	001726c0 	call	1726c <_sbrk_r>
   14610:	99800217 	ldw	r6,8(r19)
   14614:	100f883a 	mov	r7,r2
   14618:	9009883a 	mov	r4,r18
   1461c:	1187c83a 	sub	r3,r2,r6
   14620:	008003c4 	movi	r2,15
   14624:	19400054 	ori	r5,r3,1
   14628:	10ffdc0e 	bge	r2,r3,1459c <_malloc_trim_r+0x78>
   1462c:	008000f4 	movhi	r2,3
   14630:	10a77904 	addi	r2,r2,-25116
   14634:	10c00017 	ldw	r3,0(r2)
   14638:	008000f4 	movhi	r2,3
   1463c:	10a79804 	addi	r2,r2,-24992
   14640:	31400115 	stw	r5,4(r6)
   14644:	38c7c83a 	sub	r3,r7,r3
   14648:	10c00015 	stw	r3,0(r2)
   1464c:	003fd306 	br	1459c <_malloc_trim_r+0x78>

00014650 <_free_r>:
   14650:	defffd04 	addi	sp,sp,-12
   14654:	dc400115 	stw	r17,4(sp)
   14658:	dc000015 	stw	r16,0(sp)
   1465c:	dfc00215 	stw	ra,8(sp)
   14660:	2821883a 	mov	r16,r5
   14664:	2023883a 	mov	r17,r4
   14668:	28005a26 	beq	r5,zero,147d4 <_free_r+0x184>
   1466c:	001a42c0 	call	1a42c <__malloc_lock>
   14670:	823ffe04 	addi	r8,r16,-8
   14674:	41400117 	ldw	r5,4(r8)
   14678:	00bfff84 	movi	r2,-2
   1467c:	028000f4 	movhi	r10,3
   14680:	52a1f004 	addi	r10,r10,-30784
   14684:	288e703a 	and	r7,r5,r2
   14688:	41cd883a 	add	r6,r8,r7
   1468c:	30c00117 	ldw	r3,4(r6)
   14690:	51000217 	ldw	r4,8(r10)
   14694:	00bfff04 	movi	r2,-4
   14698:	1892703a 	and	r9,r3,r2
   1469c:	5017883a 	mov	r11,r10
   146a0:	31006726 	beq	r6,r4,14840 <_free_r+0x1f0>
   146a4:	2880004c 	andi	r2,r5,1
   146a8:	1005003a 	cmpeq	r2,r2,zero
   146ac:	32400115 	stw	r9,4(r6)
   146b0:	10001a1e 	bne	r2,zero,1471c <_free_r+0xcc>
   146b4:	000b883a 	mov	r5,zero
   146b8:	3247883a 	add	r3,r6,r9
   146bc:	18800117 	ldw	r2,4(r3)
   146c0:	1080004c 	andi	r2,r2,1
   146c4:	1000231e 	bne	r2,zero,14754 <_free_r+0x104>
   146c8:	280ac03a 	cmpne	r5,r5,zero
   146cc:	3a4f883a 	add	r7,r7,r9
   146d0:	2800451e 	bne	r5,zero,147e8 <_free_r+0x198>
   146d4:	31000217 	ldw	r4,8(r6)
   146d8:	008000f4 	movhi	r2,3
   146dc:	10a1f204 	addi	r2,r2,-30776
   146e0:	20807b26 	beq	r4,r2,148d0 <_free_r+0x280>
   146e4:	30800317 	ldw	r2,12(r6)
   146e8:	3a07883a 	add	r3,r7,r8
   146ec:	19c00015 	stw	r7,0(r3)
   146f0:	11000215 	stw	r4,8(r2)
   146f4:	20800315 	stw	r2,12(r4)
   146f8:	38800054 	ori	r2,r7,1
   146fc:	40800115 	stw	r2,4(r8)
   14700:	28001a26 	beq	r5,zero,1476c <_free_r+0x11c>
   14704:	8809883a 	mov	r4,r17
   14708:	dfc00217 	ldw	ra,8(sp)
   1470c:	dc400117 	ldw	r17,4(sp)
   14710:	dc000017 	ldw	r16,0(sp)
   14714:	dec00304 	addi	sp,sp,12
   14718:	001a44c1 	jmpi	1a44c <__malloc_unlock>
   1471c:	80bffe17 	ldw	r2,-8(r16)
   14720:	50c00204 	addi	r3,r10,8
   14724:	4091c83a 	sub	r8,r8,r2
   14728:	41000217 	ldw	r4,8(r8)
   1472c:	388f883a 	add	r7,r7,r2
   14730:	20c06126 	beq	r4,r3,148b8 <_free_r+0x268>
   14734:	40800317 	ldw	r2,12(r8)
   14738:	3247883a 	add	r3,r6,r9
   1473c:	000b883a 	mov	r5,zero
   14740:	11000215 	stw	r4,8(r2)
   14744:	20800315 	stw	r2,12(r4)
   14748:	18800117 	ldw	r2,4(r3)
   1474c:	1080004c 	andi	r2,r2,1
   14750:	103fdd26 	beq	r2,zero,146c8 <_free_r+0x78>
   14754:	38800054 	ori	r2,r7,1
   14758:	3a07883a 	add	r3,r7,r8
   1475c:	280ac03a 	cmpne	r5,r5,zero
   14760:	40800115 	stw	r2,4(r8)
   14764:	19c00015 	stw	r7,0(r3)
   14768:	283fe61e 	bne	r5,zero,14704 <_free_r+0xb4>
   1476c:	00807fc4 	movi	r2,511
   14770:	11c01f2e 	bgeu	r2,r7,147f0 <_free_r+0x1a0>
   14774:	3806d27a 	srli	r3,r7,9
   14778:	1800481e 	bne	r3,zero,1489c <_free_r+0x24c>
   1477c:	3804d0fa 	srli	r2,r7,3
   14780:	100690fa 	slli	r3,r2,3
   14784:	1acd883a 	add	r6,r3,r11
   14788:	31400217 	ldw	r5,8(r6)
   1478c:	31405926 	beq	r6,r5,148f4 <_free_r+0x2a4>
   14790:	28800117 	ldw	r2,4(r5)
   14794:	00ffff04 	movi	r3,-4
   14798:	10c4703a 	and	r2,r2,r3
   1479c:	3880022e 	bgeu	r7,r2,147a8 <_free_r+0x158>
   147a0:	29400217 	ldw	r5,8(r5)
   147a4:	317ffa1e 	bne	r6,r5,14790 <_free_r+0x140>
   147a8:	29800317 	ldw	r6,12(r5)
   147ac:	41800315 	stw	r6,12(r8)
   147b0:	41400215 	stw	r5,8(r8)
   147b4:	8809883a 	mov	r4,r17
   147b8:	2a000315 	stw	r8,12(r5)
   147bc:	32000215 	stw	r8,8(r6)
   147c0:	dfc00217 	ldw	ra,8(sp)
   147c4:	dc400117 	ldw	r17,4(sp)
   147c8:	dc000017 	ldw	r16,0(sp)
   147cc:	dec00304 	addi	sp,sp,12
   147d0:	001a44c1 	jmpi	1a44c <__malloc_unlock>
   147d4:	dfc00217 	ldw	ra,8(sp)
   147d8:	dc400117 	ldw	r17,4(sp)
   147dc:	dc000017 	ldw	r16,0(sp)
   147e0:	dec00304 	addi	sp,sp,12
   147e4:	f800283a 	ret
   147e8:	31000217 	ldw	r4,8(r6)
   147ec:	003fbd06 	br	146e4 <_free_r+0x94>
   147f0:	3806d0fa 	srli	r3,r7,3
   147f4:	00800044 	movi	r2,1
   147f8:	51400117 	ldw	r5,4(r10)
   147fc:	180890fa 	slli	r4,r3,3
   14800:	1807d0ba 	srai	r3,r3,2
   14804:	22c9883a 	add	r4,r4,r11
   14808:	21800217 	ldw	r6,8(r4)
   1480c:	10c4983a 	sll	r2,r2,r3
   14810:	41000315 	stw	r4,12(r8)
   14814:	41800215 	stw	r6,8(r8)
   14818:	288ab03a 	or	r5,r5,r2
   1481c:	22000215 	stw	r8,8(r4)
   14820:	8809883a 	mov	r4,r17
   14824:	51400115 	stw	r5,4(r10)
   14828:	32000315 	stw	r8,12(r6)
   1482c:	dfc00217 	ldw	ra,8(sp)
   14830:	dc400117 	ldw	r17,4(sp)
   14834:	dc000017 	ldw	r16,0(sp)
   14838:	dec00304 	addi	sp,sp,12
   1483c:	001a44c1 	jmpi	1a44c <__malloc_unlock>
   14840:	2880004c 	andi	r2,r5,1
   14844:	3a4d883a 	add	r6,r7,r9
   14848:	1000071e 	bne	r2,zero,14868 <_free_r+0x218>
   1484c:	80bffe17 	ldw	r2,-8(r16)
   14850:	4091c83a 	sub	r8,r8,r2
   14854:	41000317 	ldw	r4,12(r8)
   14858:	40c00217 	ldw	r3,8(r8)
   1485c:	308d883a 	add	r6,r6,r2
   14860:	20c00215 	stw	r3,8(r4)
   14864:	19000315 	stw	r4,12(r3)
   14868:	008000f4 	movhi	r2,3
   1486c:	10a77804 	addi	r2,r2,-25120
   14870:	11000017 	ldw	r4,0(r2)
   14874:	30c00054 	ori	r3,r6,1
   14878:	52000215 	stw	r8,8(r10)
   1487c:	40c00115 	stw	r3,4(r8)
   14880:	313fa036 	bltu	r6,r4,14704 <_free_r+0xb4>
   14884:	008000f4 	movhi	r2,3
   14888:	10a78c04 	addi	r2,r2,-25040
   1488c:	11400017 	ldw	r5,0(r2)
   14890:	8809883a 	mov	r4,r17
   14894:	00145240 	call	14524 <_malloc_trim_r>
   14898:	003f9a06 	br	14704 <_free_r+0xb4>
   1489c:	00800104 	movi	r2,4
   148a0:	10c0072e 	bgeu	r2,r3,148c0 <_free_r+0x270>
   148a4:	00800504 	movi	r2,20
   148a8:	10c01936 	bltu	r2,r3,14910 <_free_r+0x2c0>
   148ac:	188016c4 	addi	r2,r3,91
   148b0:	100690fa 	slli	r3,r2,3
   148b4:	003fb306 	br	14784 <_free_r+0x134>
   148b8:	01400044 	movi	r5,1
   148bc:	003f7e06 	br	146b8 <_free_r+0x68>
   148c0:	3804d1ba 	srli	r2,r7,6
   148c4:	10800e04 	addi	r2,r2,56
   148c8:	100690fa 	slli	r3,r2,3
   148cc:	003fad06 	br	14784 <_free_r+0x134>
   148d0:	22000315 	stw	r8,12(r4)
   148d4:	22000215 	stw	r8,8(r4)
   148d8:	3a05883a 	add	r2,r7,r8
   148dc:	38c00054 	ori	r3,r7,1
   148e0:	11c00015 	stw	r7,0(r2)
   148e4:	41000215 	stw	r4,8(r8)
   148e8:	40c00115 	stw	r3,4(r8)
   148ec:	41000315 	stw	r4,12(r8)
   148f0:	003f8406 	br	14704 <_free_r+0xb4>
   148f4:	1005d0ba 	srai	r2,r2,2
   148f8:	00c00044 	movi	r3,1
   148fc:	51000117 	ldw	r4,4(r10)
   14900:	1886983a 	sll	r3,r3,r2
   14904:	20c8b03a 	or	r4,r4,r3
   14908:	51000115 	stw	r4,4(r10)
   1490c:	003fa706 	br	147ac <_free_r+0x15c>
   14910:	00801504 	movi	r2,84
   14914:	10c00436 	bltu	r2,r3,14928 <_free_r+0x2d8>
   14918:	3804d33a 	srli	r2,r7,12
   1491c:	10801b84 	addi	r2,r2,110
   14920:	100690fa 	slli	r3,r2,3
   14924:	003f9706 	br	14784 <_free_r+0x134>
   14928:	00805504 	movi	r2,340
   1492c:	10c00436 	bltu	r2,r3,14940 <_free_r+0x2f0>
   14930:	3804d3fa 	srli	r2,r7,15
   14934:	10801dc4 	addi	r2,r2,119
   14938:	100690fa 	slli	r3,r2,3
   1493c:	003f9106 	br	14784 <_free_r+0x134>
   14940:	00815504 	movi	r2,1364
   14944:	10c0032e 	bgeu	r2,r3,14954 <_free_r+0x304>
   14948:	00801f84 	movi	r2,126
   1494c:	00c0fc04 	movi	r3,1008
   14950:	003f8c06 	br	14784 <_free_r+0x134>
   14954:	3804d4ba 	srli	r2,r7,18
   14958:	10801f04 	addi	r2,r2,124
   1495c:	100690fa 	slli	r3,r2,3
   14960:	003f8806 	br	14784 <_free_r+0x134>

00014964 <__sfvwrite_r>:
   14964:	30800217 	ldw	r2,8(r6)
   14968:	defff504 	addi	sp,sp,-44
   1496c:	df000915 	stw	fp,36(sp)
   14970:	dd800715 	stw	r22,28(sp)
   14974:	dc800315 	stw	r18,12(sp)
   14978:	dfc00a15 	stw	ra,40(sp)
   1497c:	ddc00815 	stw	r23,32(sp)
   14980:	dd400615 	stw	r21,24(sp)
   14984:	dd000515 	stw	r20,20(sp)
   14988:	dcc00415 	stw	r19,16(sp)
   1498c:	dc400215 	stw	r17,8(sp)
   14990:	dc000115 	stw	r16,4(sp)
   14994:	302d883a 	mov	r22,r6
   14998:	2039883a 	mov	fp,r4
   1499c:	2825883a 	mov	r18,r5
   149a0:	10001c26 	beq	r2,zero,14a14 <__sfvwrite_r+0xb0>
   149a4:	29c0030b 	ldhu	r7,12(r5)
   149a8:	3880020c 	andi	r2,r7,8
   149ac:	10002726 	beq	r2,zero,14a4c <__sfvwrite_r+0xe8>
   149b0:	28800417 	ldw	r2,16(r5)
   149b4:	10002526 	beq	r2,zero,14a4c <__sfvwrite_r+0xe8>
   149b8:	3880008c 	andi	r2,r7,2
   149bc:	b5400017 	ldw	r21,0(r22)
   149c0:	10002826 	beq	r2,zero,14a64 <__sfvwrite_r+0x100>
   149c4:	0021883a 	mov	r16,zero
   149c8:	0023883a 	mov	r17,zero
   149cc:	880d883a 	mov	r6,r17
   149d0:	e009883a 	mov	r4,fp
   149d4:	00810004 	movi	r2,1024
   149d8:	80006e26 	beq	r16,zero,14b94 <__sfvwrite_r+0x230>
   149dc:	800f883a 	mov	r7,r16
   149e0:	91400717 	ldw	r5,28(r18)
   149e4:	1400012e 	bgeu	r2,r16,149ec <__sfvwrite_r+0x88>
   149e8:	100f883a 	mov	r7,r2
   149ec:	90c00917 	ldw	r3,36(r18)
   149f0:	183ee83a 	callr	r3
   149f4:	1007883a 	mov	r3,r2
   149f8:	80a1c83a 	sub	r16,r16,r2
   149fc:	88a3883a 	add	r17,r17,r2
   14a00:	00806d0e 	bge	zero,r2,14bb8 <__sfvwrite_r+0x254>
   14a04:	b0800217 	ldw	r2,8(r22)
   14a08:	10c5c83a 	sub	r2,r2,r3
   14a0c:	b0800215 	stw	r2,8(r22)
   14a10:	103fee1e 	bne	r2,zero,149cc <__sfvwrite_r+0x68>
   14a14:	0009883a 	mov	r4,zero
   14a18:	2005883a 	mov	r2,r4
   14a1c:	dfc00a17 	ldw	ra,40(sp)
   14a20:	df000917 	ldw	fp,36(sp)
   14a24:	ddc00817 	ldw	r23,32(sp)
   14a28:	dd800717 	ldw	r22,28(sp)
   14a2c:	dd400617 	ldw	r21,24(sp)
   14a30:	dd000517 	ldw	r20,20(sp)
   14a34:	dcc00417 	ldw	r19,16(sp)
   14a38:	dc800317 	ldw	r18,12(sp)
   14a3c:	dc400217 	ldw	r17,8(sp)
   14a40:	dc000117 	ldw	r16,4(sp)
   14a44:	dec00b04 	addi	sp,sp,44
   14a48:	f800283a 	ret
   14a4c:	001272c0 	call	1272c <__swsetup_r>
   14a50:	1000e41e 	bne	r2,zero,14de4 <__sfvwrite_r+0x480>
   14a54:	91c0030b 	ldhu	r7,12(r18)
   14a58:	b5400017 	ldw	r21,0(r22)
   14a5c:	3880008c 	andi	r2,r7,2
   14a60:	103fd81e 	bne	r2,zero,149c4 <__sfvwrite_r+0x60>
   14a64:	3880004c 	andi	r2,r7,1
   14a68:	1005003a 	cmpeq	r2,r2,zero
   14a6c:	10005726 	beq	r2,zero,14bcc <__sfvwrite_r+0x268>
   14a70:	0029883a 	mov	r20,zero
   14a74:	002f883a 	mov	r23,zero
   14a78:	a0004226 	beq	r20,zero,14b84 <__sfvwrite_r+0x220>
   14a7c:	3880800c 	andi	r2,r7,512
   14a80:	94000217 	ldw	r16,8(r18)
   14a84:	10008b26 	beq	r2,zero,14cb4 <__sfvwrite_r+0x350>
   14a88:	800d883a 	mov	r6,r16
   14a8c:	a400a536 	bltu	r20,r16,14d24 <__sfvwrite_r+0x3c0>
   14a90:	3881200c 	andi	r2,r7,1152
   14a94:	10002726 	beq	r2,zero,14b34 <__sfvwrite_r+0x1d0>
   14a98:	90800517 	ldw	r2,20(r18)
   14a9c:	92000417 	ldw	r8,16(r18)
   14aa0:	91400017 	ldw	r5,0(r18)
   14aa4:	1087883a 	add	r3,r2,r2
   14aa8:	1887883a 	add	r3,r3,r2
   14aac:	1808d7fa 	srli	r4,r3,31
   14ab0:	2a21c83a 	sub	r16,r5,r8
   14ab4:	80800044 	addi	r2,r16,1
   14ab8:	20c9883a 	add	r4,r4,r3
   14abc:	2027d07a 	srai	r19,r4,1
   14ac0:	a085883a 	add	r2,r20,r2
   14ac4:	980d883a 	mov	r6,r19
   14ac8:	9880022e 	bgeu	r19,r2,14ad4 <__sfvwrite_r+0x170>
   14acc:	1027883a 	mov	r19,r2
   14ad0:	100d883a 	mov	r6,r2
   14ad4:	3881000c 	andi	r2,r7,1024
   14ad8:	1000b826 	beq	r2,zero,14dbc <__sfvwrite_r+0x458>
   14adc:	300b883a 	mov	r5,r6
   14ae0:	e009883a 	mov	r4,fp
   14ae4:	00151d80 	call	151d8 <_malloc_r>
   14ae8:	10003126 	beq	r2,zero,14bb0 <__sfvwrite_r+0x24c>
   14aec:	91400417 	ldw	r5,16(r18)
   14af0:	1009883a 	mov	r4,r2
   14af4:	800d883a 	mov	r6,r16
   14af8:	1023883a 	mov	r17,r2
   14afc:	00159fc0 	call	159fc <memcpy>
   14b00:	90c0030b 	ldhu	r3,12(r18)
   14b04:	00beffc4 	movi	r2,-1025
   14b08:	1886703a 	and	r3,r3,r2
   14b0c:	18c02014 	ori	r3,r3,128
   14b10:	90c0030d 	sth	r3,12(r18)
   14b14:	9c07c83a 	sub	r3,r19,r16
   14b18:	8c05883a 	add	r2,r17,r16
   14b1c:	a00d883a 	mov	r6,r20
   14b20:	a021883a 	mov	r16,r20
   14b24:	90800015 	stw	r2,0(r18)
   14b28:	90c00215 	stw	r3,8(r18)
   14b2c:	94400415 	stw	r17,16(r18)
   14b30:	94c00515 	stw	r19,20(r18)
   14b34:	91000017 	ldw	r4,0(r18)
   14b38:	b80b883a 	mov	r5,r23
   14b3c:	a023883a 	mov	r17,r20
   14b40:	0015a9c0 	call	15a9c <memmove>
   14b44:	90c00217 	ldw	r3,8(r18)
   14b48:	90800017 	ldw	r2,0(r18)
   14b4c:	a027883a 	mov	r19,r20
   14b50:	1c07c83a 	sub	r3,r3,r16
   14b54:	1405883a 	add	r2,r2,r16
   14b58:	90c00215 	stw	r3,8(r18)
   14b5c:	a021883a 	mov	r16,r20
   14b60:	90800015 	stw	r2,0(r18)
   14b64:	b0800217 	ldw	r2,8(r22)
   14b68:	1405c83a 	sub	r2,r2,r16
   14b6c:	b0800215 	stw	r2,8(r22)
   14b70:	103fa826 	beq	r2,zero,14a14 <__sfvwrite_r+0xb0>
   14b74:	a469c83a 	sub	r20,r20,r17
   14b78:	91c0030b 	ldhu	r7,12(r18)
   14b7c:	bcef883a 	add	r23,r23,r19
   14b80:	a03fbe1e 	bne	r20,zero,14a7c <__sfvwrite_r+0x118>
   14b84:	adc00017 	ldw	r23,0(r21)
   14b88:	ad000117 	ldw	r20,4(r21)
   14b8c:	ad400204 	addi	r21,r21,8
   14b90:	003fb906 	br	14a78 <__sfvwrite_r+0x114>
   14b94:	ac400017 	ldw	r17,0(r21)
   14b98:	ac000117 	ldw	r16,4(r21)
   14b9c:	ad400204 	addi	r21,r21,8
   14ba0:	003f8a06 	br	149cc <__sfvwrite_r+0x68>
   14ba4:	91400417 	ldw	r5,16(r18)
   14ba8:	e009883a 	mov	r4,fp
   14bac:	00146500 	call	14650 <_free_r>
   14bb0:	00800304 	movi	r2,12
   14bb4:	e0800015 	stw	r2,0(fp)
   14bb8:	9080030b 	ldhu	r2,12(r18)
   14bbc:	013fffc4 	movi	r4,-1
   14bc0:	10801014 	ori	r2,r2,64
   14bc4:	9080030d 	sth	r2,12(r18)
   14bc8:	003f9306 	br	14a18 <__sfvwrite_r+0xb4>
   14bcc:	0027883a 	mov	r19,zero
   14bd0:	002f883a 	mov	r23,zero
   14bd4:	d8000015 	stw	zero,0(sp)
   14bd8:	0029883a 	mov	r20,zero
   14bdc:	98001e26 	beq	r19,zero,14c58 <__sfvwrite_r+0x2f4>
   14be0:	d8c00017 	ldw	r3,0(sp)
   14be4:	1804c03a 	cmpne	r2,r3,zero
   14be8:	10005e26 	beq	r2,zero,14d64 <__sfvwrite_r+0x400>
   14bec:	9821883a 	mov	r16,r19
   14bf0:	a4c0012e 	bgeu	r20,r19,14bf8 <__sfvwrite_r+0x294>
   14bf4:	a021883a 	mov	r16,r20
   14bf8:	91000017 	ldw	r4,0(r18)
   14bfc:	90800417 	ldw	r2,16(r18)
   14c00:	91800217 	ldw	r6,8(r18)
   14c04:	91c00517 	ldw	r7,20(r18)
   14c08:	1100022e 	bgeu	r2,r4,14c14 <__sfvwrite_r+0x2b0>
   14c0c:	31e3883a 	add	r17,r6,r7
   14c10:	8c001616 	blt	r17,r16,14c6c <__sfvwrite_r+0x308>
   14c14:	81c03816 	blt	r16,r7,14cf8 <__sfvwrite_r+0x394>
   14c18:	90c00917 	ldw	r3,36(r18)
   14c1c:	91400717 	ldw	r5,28(r18)
   14c20:	e009883a 	mov	r4,fp
   14c24:	b80d883a 	mov	r6,r23
   14c28:	183ee83a 	callr	r3
   14c2c:	1023883a 	mov	r17,r2
   14c30:	00bfe10e 	bge	zero,r2,14bb8 <__sfvwrite_r+0x254>
   14c34:	a469c83a 	sub	r20,r20,r17
   14c38:	a0001826 	beq	r20,zero,14c9c <__sfvwrite_r+0x338>
   14c3c:	b0800217 	ldw	r2,8(r22)
   14c40:	1445c83a 	sub	r2,r2,r17
   14c44:	b0800215 	stw	r2,8(r22)
   14c48:	103f7226 	beq	r2,zero,14a14 <__sfvwrite_r+0xb0>
   14c4c:	9c67c83a 	sub	r19,r19,r17
   14c50:	bc6f883a 	add	r23,r23,r17
   14c54:	983fe21e 	bne	r19,zero,14be0 <__sfvwrite_r+0x27c>
   14c58:	adc00017 	ldw	r23,0(r21)
   14c5c:	acc00117 	ldw	r19,4(r21)
   14c60:	ad400204 	addi	r21,r21,8
   14c64:	d8000015 	stw	zero,0(sp)
   14c68:	003fdc06 	br	14bdc <__sfvwrite_r+0x278>
   14c6c:	b80b883a 	mov	r5,r23
   14c70:	880d883a 	mov	r6,r17
   14c74:	0015a9c0 	call	15a9c <memmove>
   14c78:	90c00017 	ldw	r3,0(r18)
   14c7c:	e009883a 	mov	r4,fp
   14c80:	900b883a 	mov	r5,r18
   14c84:	1c47883a 	add	r3,r3,r17
   14c88:	90c00015 	stw	r3,0(r18)
   14c8c:	00140340 	call	14034 <_fflush_r>
   14c90:	103fc91e 	bne	r2,zero,14bb8 <__sfvwrite_r+0x254>
   14c94:	a469c83a 	sub	r20,r20,r17
   14c98:	a03fe81e 	bne	r20,zero,14c3c <__sfvwrite_r+0x2d8>
   14c9c:	e009883a 	mov	r4,fp
   14ca0:	900b883a 	mov	r5,r18
   14ca4:	00140340 	call	14034 <_fflush_r>
   14ca8:	103fc31e 	bne	r2,zero,14bb8 <__sfvwrite_r+0x254>
   14cac:	d8000015 	stw	zero,0(sp)
   14cb0:	003fe206 	br	14c3c <__sfvwrite_r+0x2d8>
   14cb4:	91000017 	ldw	r4,0(r18)
   14cb8:	90800417 	ldw	r2,16(r18)
   14cbc:	1100022e 	bgeu	r2,r4,14cc8 <__sfvwrite_r+0x364>
   14cc0:	8023883a 	mov	r17,r16
   14cc4:	85003136 	bltu	r16,r20,14d8c <__sfvwrite_r+0x428>
   14cc8:	91c00517 	ldw	r7,20(r18)
   14ccc:	a1c01836 	bltu	r20,r7,14d30 <__sfvwrite_r+0x3cc>
   14cd0:	90c00917 	ldw	r3,36(r18)
   14cd4:	91400717 	ldw	r5,28(r18)
   14cd8:	e009883a 	mov	r4,fp
   14cdc:	b80d883a 	mov	r6,r23
   14ce0:	183ee83a 	callr	r3
   14ce4:	1021883a 	mov	r16,r2
   14ce8:	00bfb30e 	bge	zero,r2,14bb8 <__sfvwrite_r+0x254>
   14cec:	1023883a 	mov	r17,r2
   14cf0:	1027883a 	mov	r19,r2
   14cf4:	003f9b06 	br	14b64 <__sfvwrite_r+0x200>
   14cf8:	b80b883a 	mov	r5,r23
   14cfc:	800d883a 	mov	r6,r16
   14d00:	0015a9c0 	call	15a9c <memmove>
   14d04:	90c00217 	ldw	r3,8(r18)
   14d08:	90800017 	ldw	r2,0(r18)
   14d0c:	8023883a 	mov	r17,r16
   14d10:	1c07c83a 	sub	r3,r3,r16
   14d14:	1405883a 	add	r2,r2,r16
   14d18:	90c00215 	stw	r3,8(r18)
   14d1c:	90800015 	stw	r2,0(r18)
   14d20:	003fc406 	br	14c34 <__sfvwrite_r+0x2d0>
   14d24:	a00d883a 	mov	r6,r20
   14d28:	a021883a 	mov	r16,r20
   14d2c:	003f8106 	br	14b34 <__sfvwrite_r+0x1d0>
   14d30:	b80b883a 	mov	r5,r23
   14d34:	a00d883a 	mov	r6,r20
   14d38:	0015a9c0 	call	15a9c <memmove>
   14d3c:	90c00217 	ldw	r3,8(r18)
   14d40:	90800017 	ldw	r2,0(r18)
   14d44:	a021883a 	mov	r16,r20
   14d48:	1d07c83a 	sub	r3,r3,r20
   14d4c:	1505883a 	add	r2,r2,r20
   14d50:	a023883a 	mov	r17,r20
   14d54:	a027883a 	mov	r19,r20
   14d58:	90c00215 	stw	r3,8(r18)
   14d5c:	90800015 	stw	r2,0(r18)
   14d60:	003f8006 	br	14b64 <__sfvwrite_r+0x200>
   14d64:	b809883a 	mov	r4,r23
   14d68:	01400284 	movi	r5,10
   14d6c:	980d883a 	mov	r6,r19
   14d70:	00159180 	call	15918 <memchr>
   14d74:	10001726 	beq	r2,zero,14dd4 <__sfvwrite_r+0x470>
   14d78:	15c5c83a 	sub	r2,r2,r23
   14d7c:	15000044 	addi	r20,r2,1
   14d80:	00800044 	movi	r2,1
   14d84:	d8800015 	stw	r2,0(sp)
   14d88:	003f9806 	br	14bec <__sfvwrite_r+0x288>
   14d8c:	b80b883a 	mov	r5,r23
   14d90:	800d883a 	mov	r6,r16
   14d94:	0015a9c0 	call	15a9c <memmove>
   14d98:	90c00017 	ldw	r3,0(r18)
   14d9c:	e009883a 	mov	r4,fp
   14da0:	900b883a 	mov	r5,r18
   14da4:	1c07883a 	add	r3,r3,r16
   14da8:	90c00015 	stw	r3,0(r18)
   14dac:	8027883a 	mov	r19,r16
   14db0:	00140340 	call	14034 <_fflush_r>
   14db4:	103f6b26 	beq	r2,zero,14b64 <__sfvwrite_r+0x200>
   14db8:	003f7f06 	br	14bb8 <__sfvwrite_r+0x254>
   14dbc:	400b883a 	mov	r5,r8
   14dc0:	e009883a 	mov	r4,fp
   14dc4:	0016c080 	call	16c08 <_realloc_r>
   14dc8:	103f7626 	beq	r2,zero,14ba4 <__sfvwrite_r+0x240>
   14dcc:	1023883a 	mov	r17,r2
   14dd0:	003f5006 	br	14b14 <__sfvwrite_r+0x1b0>
   14dd4:	00c00044 	movi	r3,1
   14dd8:	9d000044 	addi	r20,r19,1
   14ddc:	d8c00015 	stw	r3,0(sp)
   14de0:	003f8206 	br	14bec <__sfvwrite_r+0x288>
   14de4:	9080030b 	ldhu	r2,12(r18)
   14de8:	00c00244 	movi	r3,9
   14dec:	013fffc4 	movi	r4,-1
   14df0:	10801014 	ori	r2,r2,64
   14df4:	9080030d 	sth	r2,12(r18)
   14df8:	e0c00015 	stw	r3,0(fp)
   14dfc:	003f0606 	br	14a18 <__sfvwrite_r+0xb4>

00014e00 <_fwalk_reent>:
   14e00:	defff704 	addi	sp,sp,-36
   14e04:	dcc00315 	stw	r19,12(sp)
   14e08:	24c0b804 	addi	r19,r4,736
   14e0c:	dd800615 	stw	r22,24(sp)
   14e10:	dd400515 	stw	r21,20(sp)
   14e14:	dfc00815 	stw	ra,32(sp)
   14e18:	ddc00715 	stw	r23,28(sp)
   14e1c:	dd000415 	stw	r20,16(sp)
   14e20:	dc800215 	stw	r18,8(sp)
   14e24:	dc400115 	stw	r17,4(sp)
   14e28:	dc000015 	stw	r16,0(sp)
   14e2c:	202b883a 	mov	r21,r4
   14e30:	282d883a 	mov	r22,r5
   14e34:	00142bc0 	call	142bc <__sfp_lock_acquire>
   14e38:	98002126 	beq	r19,zero,14ec0 <_fwalk_reent+0xc0>
   14e3c:	002f883a 	mov	r23,zero
   14e40:	9c800117 	ldw	r18,4(r19)
   14e44:	9c000217 	ldw	r16,8(r19)
   14e48:	90bfffc4 	addi	r2,r18,-1
   14e4c:	10000d16 	blt	r2,zero,14e84 <_fwalk_reent+0x84>
   14e50:	0023883a 	mov	r17,zero
   14e54:	053fffc4 	movi	r20,-1
   14e58:	8080030f 	ldh	r2,12(r16)
   14e5c:	8c400044 	addi	r17,r17,1
   14e60:	10000626 	beq	r2,zero,14e7c <_fwalk_reent+0x7c>
   14e64:	8080038f 	ldh	r2,14(r16)
   14e68:	800b883a 	mov	r5,r16
   14e6c:	a809883a 	mov	r4,r21
   14e70:	15000226 	beq	r2,r20,14e7c <_fwalk_reent+0x7c>
   14e74:	b03ee83a 	callr	r22
   14e78:	b8aeb03a 	or	r23,r23,r2
   14e7c:	84001704 	addi	r16,r16,92
   14e80:	947ff51e 	bne	r18,r17,14e58 <_fwalk_reent+0x58>
   14e84:	9cc00017 	ldw	r19,0(r19)
   14e88:	983fed1e 	bne	r19,zero,14e40 <_fwalk_reent+0x40>
   14e8c:	00142c00 	call	142c0 <__sfp_lock_release>
   14e90:	b805883a 	mov	r2,r23
   14e94:	dfc00817 	ldw	ra,32(sp)
   14e98:	ddc00717 	ldw	r23,28(sp)
   14e9c:	dd800617 	ldw	r22,24(sp)
   14ea0:	dd400517 	ldw	r21,20(sp)
   14ea4:	dd000417 	ldw	r20,16(sp)
   14ea8:	dcc00317 	ldw	r19,12(sp)
   14eac:	dc800217 	ldw	r18,8(sp)
   14eb0:	dc400117 	ldw	r17,4(sp)
   14eb4:	dc000017 	ldw	r16,0(sp)
   14eb8:	dec00904 	addi	sp,sp,36
   14ebc:	f800283a 	ret
   14ec0:	002f883a 	mov	r23,zero
   14ec4:	003ff106 	br	14e8c <_fwalk_reent+0x8c>

00014ec8 <_fwalk>:
   14ec8:	defff804 	addi	sp,sp,-32
   14ecc:	dcc00315 	stw	r19,12(sp)
   14ed0:	24c0b804 	addi	r19,r4,736
   14ed4:	dd400515 	stw	r21,20(sp)
   14ed8:	dfc00715 	stw	ra,28(sp)
   14edc:	dd800615 	stw	r22,24(sp)
   14ee0:	dd000415 	stw	r20,16(sp)
   14ee4:	dc800215 	stw	r18,8(sp)
   14ee8:	dc400115 	stw	r17,4(sp)
   14eec:	dc000015 	stw	r16,0(sp)
   14ef0:	282b883a 	mov	r21,r5
   14ef4:	00142bc0 	call	142bc <__sfp_lock_acquire>
   14ef8:	98001f26 	beq	r19,zero,14f78 <_fwalk+0xb0>
   14efc:	002d883a 	mov	r22,zero
   14f00:	9c800117 	ldw	r18,4(r19)
   14f04:	9c000217 	ldw	r16,8(r19)
   14f08:	90bfffc4 	addi	r2,r18,-1
   14f0c:	10000c16 	blt	r2,zero,14f40 <_fwalk+0x78>
   14f10:	0023883a 	mov	r17,zero
   14f14:	053fffc4 	movi	r20,-1
   14f18:	8080030f 	ldh	r2,12(r16)
   14f1c:	8c400044 	addi	r17,r17,1
   14f20:	10000526 	beq	r2,zero,14f38 <_fwalk+0x70>
   14f24:	8080038f 	ldh	r2,14(r16)
   14f28:	8009883a 	mov	r4,r16
   14f2c:	15000226 	beq	r2,r20,14f38 <_fwalk+0x70>
   14f30:	a83ee83a 	callr	r21
   14f34:	b0acb03a 	or	r22,r22,r2
   14f38:	84001704 	addi	r16,r16,92
   14f3c:	947ff61e 	bne	r18,r17,14f18 <_fwalk+0x50>
   14f40:	9cc00017 	ldw	r19,0(r19)
   14f44:	983fee1e 	bne	r19,zero,14f00 <_fwalk+0x38>
   14f48:	00142c00 	call	142c0 <__sfp_lock_release>
   14f4c:	b005883a 	mov	r2,r22
   14f50:	dfc00717 	ldw	ra,28(sp)
   14f54:	dd800617 	ldw	r22,24(sp)
   14f58:	dd400517 	ldw	r21,20(sp)
   14f5c:	dd000417 	ldw	r20,16(sp)
   14f60:	dcc00317 	ldw	r19,12(sp)
   14f64:	dc800217 	ldw	r18,8(sp)
   14f68:	dc400117 	ldw	r17,4(sp)
   14f6c:	dc000017 	ldw	r16,0(sp)
   14f70:	dec00804 	addi	sp,sp,32
   14f74:	f800283a 	ret
   14f78:	002d883a 	mov	r22,zero
   14f7c:	003ff206 	br	14f48 <_fwalk+0x80>

00014f80 <__locale_charset>:
   14f80:	d0a00317 	ldw	r2,-32756(gp)
   14f84:	f800283a 	ret

00014f88 <_localeconv_r>:
   14f88:	008000f4 	movhi	r2,3
   14f8c:	10a04604 	addi	r2,r2,-32488
   14f90:	f800283a 	ret

00014f94 <localeconv>:
   14f94:	008000f4 	movhi	r2,3
   14f98:	10a77404 	addi	r2,r2,-25136
   14f9c:	11000017 	ldw	r4,0(r2)
   14fa0:	0014f881 	jmpi	14f88 <_localeconv_r>

00014fa4 <_setlocale_r>:
   14fa4:	defffc04 	addi	sp,sp,-16
   14fa8:	00c000f4 	movhi	r3,3
   14fac:	18e04104 	addi	r3,r3,-32508
   14fb0:	dc800215 	stw	r18,8(sp)
   14fb4:	dc400115 	stw	r17,4(sp)
   14fb8:	dc000015 	stw	r16,0(sp)
   14fbc:	2023883a 	mov	r17,r4
   14fc0:	2825883a 	mov	r18,r5
   14fc4:	dfc00315 	stw	ra,12(sp)
   14fc8:	3021883a 	mov	r16,r6
   14fcc:	3009883a 	mov	r4,r6
   14fd0:	180b883a 	mov	r5,r3
   14fd4:	30000926 	beq	r6,zero,14ffc <_setlocale_r+0x58>
   14fd8:	00174280 	call	17428 <strcmp>
   14fdc:	8009883a 	mov	r4,r16
   14fe0:	014000f4 	movhi	r5,3
   14fe4:	29602c04 	addi	r5,r5,-32592
   14fe8:	10000b1e 	bne	r2,zero,15018 <_setlocale_r+0x74>
   14fec:	8c000d15 	stw	r16,52(r17)
   14ff0:	8c800c15 	stw	r18,48(r17)
   14ff4:	00c000f4 	movhi	r3,3
   14ff8:	18e04104 	addi	r3,r3,-32508
   14ffc:	1805883a 	mov	r2,r3
   15000:	dfc00317 	ldw	ra,12(sp)
   15004:	dc800217 	ldw	r18,8(sp)
   15008:	dc400117 	ldw	r17,4(sp)
   1500c:	dc000017 	ldw	r16,0(sp)
   15010:	dec00404 	addi	sp,sp,16
   15014:	f800283a 	ret
   15018:	00174280 	call	17428 <strcmp>
   1501c:	0007883a 	mov	r3,zero
   15020:	103ff226 	beq	r2,zero,14fec <_setlocale_r+0x48>
   15024:	003ff506 	br	14ffc <_setlocale_r+0x58>

00015028 <setlocale>:
   15028:	018000f4 	movhi	r6,3
   1502c:	31a77404 	addi	r6,r6,-25136
   15030:	2007883a 	mov	r3,r4
   15034:	31000017 	ldw	r4,0(r6)
   15038:	280d883a 	mov	r6,r5
   1503c:	180b883a 	mov	r5,r3
   15040:	0014fa41 	jmpi	14fa4 <_setlocale_r>

00015044 <__smakebuf_r>:
   15044:	2880030b 	ldhu	r2,12(r5)
   15048:	deffed04 	addi	sp,sp,-76
   1504c:	dc401015 	stw	r17,64(sp)
   15050:	1080008c 	andi	r2,r2,2
   15054:	dc000f15 	stw	r16,60(sp)
   15058:	dfc01215 	stw	ra,72(sp)
   1505c:	dc801115 	stw	r18,68(sp)
   15060:	2821883a 	mov	r16,r5
   15064:	2023883a 	mov	r17,r4
   15068:	10000b26 	beq	r2,zero,15098 <__smakebuf_r+0x54>
   1506c:	28c010c4 	addi	r3,r5,67
   15070:	00800044 	movi	r2,1
   15074:	28800515 	stw	r2,20(r5)
   15078:	28c00415 	stw	r3,16(r5)
   1507c:	28c00015 	stw	r3,0(r5)
   15080:	dfc01217 	ldw	ra,72(sp)
   15084:	dc801117 	ldw	r18,68(sp)
   15088:	dc401017 	ldw	r17,64(sp)
   1508c:	dc000f17 	ldw	r16,60(sp)
   15090:	dec01304 	addi	sp,sp,76
   15094:	f800283a 	ret
   15098:	2940038f 	ldh	r5,14(r5)
   1509c:	28002116 	blt	r5,zero,15124 <__smakebuf_r+0xe0>
   150a0:	d80d883a 	mov	r6,sp
   150a4:	00177a40 	call	177a4 <_fstat_r>
   150a8:	10001e16 	blt	r2,zero,15124 <__smakebuf_r+0xe0>
   150ac:	d8800117 	ldw	r2,4(sp)
   150b0:	00e00014 	movui	r3,32768
   150b4:	113c000c 	andi	r4,r2,61440
   150b8:	20c03126 	beq	r4,r3,15180 <__smakebuf_r+0x13c>
   150bc:	8080030b 	ldhu	r2,12(r16)
   150c0:	00c80004 	movi	r3,8192
   150c4:	10820014 	ori	r2,r2,2048
   150c8:	8080030d 	sth	r2,12(r16)
   150cc:	20c01e26 	beq	r4,r3,15148 <__smakebuf_r+0x104>
   150d0:	04810004 	movi	r18,1024
   150d4:	8809883a 	mov	r4,r17
   150d8:	900b883a 	mov	r5,r18
   150dc:	00151d80 	call	151d8 <_malloc_r>
   150e0:	1009883a 	mov	r4,r2
   150e4:	10003126 	beq	r2,zero,151ac <__smakebuf_r+0x168>
   150e8:	80c0030b 	ldhu	r3,12(r16)
   150ec:	00800074 	movhi	r2,1
   150f0:	1090ec04 	addi	r2,r2,17328
   150f4:	88800f15 	stw	r2,60(r17)
   150f8:	18c02014 	ori	r3,r3,128
   150fc:	84800515 	stw	r18,20(r16)
   15100:	80c0030d 	sth	r3,12(r16)
   15104:	81000415 	stw	r4,16(r16)
   15108:	81000015 	stw	r4,0(r16)
   1510c:	dfc01217 	ldw	ra,72(sp)
   15110:	dc801117 	ldw	r18,68(sp)
   15114:	dc401017 	ldw	r17,64(sp)
   15118:	dc000f17 	ldw	r16,60(sp)
   1511c:	dec01304 	addi	sp,sp,76
   15120:	f800283a 	ret
   15124:	80c0030b 	ldhu	r3,12(r16)
   15128:	1880200c 	andi	r2,r3,128
   1512c:	10000426 	beq	r2,zero,15140 <__smakebuf_r+0xfc>
   15130:	04801004 	movi	r18,64
   15134:	18820014 	ori	r2,r3,2048
   15138:	8080030d 	sth	r2,12(r16)
   1513c:	003fe506 	br	150d4 <__smakebuf_r+0x90>
   15140:	04810004 	movi	r18,1024
   15144:	003ffb06 	br	15134 <__smakebuf_r+0xf0>
   15148:	8140038f 	ldh	r5,14(r16)
   1514c:	8809883a 	mov	r4,r17
   15150:	00178180 	call	17818 <_isatty_r>
   15154:	103fde26 	beq	r2,zero,150d0 <__smakebuf_r+0x8c>
   15158:	8080030b 	ldhu	r2,12(r16)
   1515c:	80c010c4 	addi	r3,r16,67
   15160:	04810004 	movi	r18,1024
   15164:	10800054 	ori	r2,r2,1
   15168:	8080030d 	sth	r2,12(r16)
   1516c:	00800044 	movi	r2,1
   15170:	80c00415 	stw	r3,16(r16)
   15174:	80800515 	stw	r2,20(r16)
   15178:	80c00015 	stw	r3,0(r16)
   1517c:	003fd506 	br	150d4 <__smakebuf_r+0x90>
   15180:	80c00a17 	ldw	r3,40(r16)
   15184:	00800074 	movhi	r2,1
   15188:	109cb904 	addi	r2,r2,29412
   1518c:	18bfcb1e 	bne	r3,r2,150bc <__smakebuf_r+0x78>
   15190:	8080030b 	ldhu	r2,12(r16)
   15194:	00c10004 	movi	r3,1024
   15198:	1825883a 	mov	r18,r3
   1519c:	10c4b03a 	or	r2,r2,r3
   151a0:	8080030d 	sth	r2,12(r16)
   151a4:	80c01315 	stw	r3,76(r16)
   151a8:	003fca06 	br	150d4 <__smakebuf_r+0x90>
   151ac:	8100030b 	ldhu	r4,12(r16)
   151b0:	2080800c 	andi	r2,r4,512
   151b4:	103fb21e 	bne	r2,zero,15080 <__smakebuf_r+0x3c>
   151b8:	80c010c4 	addi	r3,r16,67
   151bc:	21000094 	ori	r4,r4,2
   151c0:	00800044 	movi	r2,1
   151c4:	80800515 	stw	r2,20(r16)
   151c8:	8100030d 	sth	r4,12(r16)
   151cc:	80c00415 	stw	r3,16(r16)
   151d0:	80c00015 	stw	r3,0(r16)
   151d4:	003faa06 	br	15080 <__smakebuf_r+0x3c>

000151d8 <_malloc_r>:
   151d8:	defff604 	addi	sp,sp,-40
   151dc:	28c002c4 	addi	r3,r5,11
   151e0:	00800584 	movi	r2,22
   151e4:	dc800215 	stw	r18,8(sp)
   151e8:	dfc00915 	stw	ra,36(sp)
   151ec:	df000815 	stw	fp,32(sp)
   151f0:	ddc00715 	stw	r23,28(sp)
   151f4:	dd800615 	stw	r22,24(sp)
   151f8:	dd400515 	stw	r21,20(sp)
   151fc:	dd000415 	stw	r20,16(sp)
   15200:	dcc00315 	stw	r19,12(sp)
   15204:	dc400115 	stw	r17,4(sp)
   15208:	dc000015 	stw	r16,0(sp)
   1520c:	2025883a 	mov	r18,r4
   15210:	10c01236 	bltu	r2,r3,1525c <_malloc_r+0x84>
   15214:	04400404 	movi	r17,16
   15218:	8940142e 	bgeu	r17,r5,1526c <_malloc_r+0x94>
   1521c:	00800304 	movi	r2,12
   15220:	0007883a 	mov	r3,zero
   15224:	90800015 	stw	r2,0(r18)
   15228:	1805883a 	mov	r2,r3
   1522c:	dfc00917 	ldw	ra,36(sp)
   15230:	df000817 	ldw	fp,32(sp)
   15234:	ddc00717 	ldw	r23,28(sp)
   15238:	dd800617 	ldw	r22,24(sp)
   1523c:	dd400517 	ldw	r21,20(sp)
   15240:	dd000417 	ldw	r20,16(sp)
   15244:	dcc00317 	ldw	r19,12(sp)
   15248:	dc800217 	ldw	r18,8(sp)
   1524c:	dc400117 	ldw	r17,4(sp)
   15250:	dc000017 	ldw	r16,0(sp)
   15254:	dec00a04 	addi	sp,sp,40
   15258:	f800283a 	ret
   1525c:	00bffe04 	movi	r2,-8
   15260:	18a2703a 	and	r17,r3,r2
   15264:	883fed16 	blt	r17,zero,1521c <_malloc_r+0x44>
   15268:	897fec36 	bltu	r17,r5,1521c <_malloc_r+0x44>
   1526c:	9009883a 	mov	r4,r18
   15270:	001a42c0 	call	1a42c <__malloc_lock>
   15274:	00807dc4 	movi	r2,503
   15278:	14402b2e 	bgeu	r2,r17,15328 <_malloc_r+0x150>
   1527c:	8806d27a 	srli	r3,r17,9
   15280:	18003f1e 	bne	r3,zero,15380 <_malloc_r+0x1a8>
   15284:	880cd0fa 	srli	r6,r17,3
   15288:	300490fa 	slli	r2,r6,3
   1528c:	02c000f4 	movhi	r11,3
   15290:	5ae1f004 	addi	r11,r11,-30784
   15294:	12cb883a 	add	r5,r2,r11
   15298:	2c000317 	ldw	r16,12(r5)
   1529c:	580f883a 	mov	r7,r11
   152a0:	2c00041e 	bne	r5,r16,152b4 <_malloc_r+0xdc>
   152a4:	00000a06 	br	152d0 <_malloc_r+0xf8>
   152a8:	1800860e 	bge	r3,zero,154c4 <_malloc_r+0x2ec>
   152ac:	84000317 	ldw	r16,12(r16)
   152b0:	2c000726 	beq	r5,r16,152d0 <_malloc_r+0xf8>
   152b4:	80800117 	ldw	r2,4(r16)
   152b8:	00ffff04 	movi	r3,-4
   152bc:	10c8703a 	and	r4,r2,r3
   152c0:	2447c83a 	sub	r3,r4,r17
   152c4:	008003c4 	movi	r2,15
   152c8:	10fff70e 	bge	r2,r3,152a8 <_malloc_r+0xd0>
   152cc:	31bfffc4 	addi	r6,r6,-1
   152d0:	32400044 	addi	r9,r6,1
   152d4:	028000f4 	movhi	r10,3
   152d8:	52a1f204 	addi	r10,r10,-30776
   152dc:	54000217 	ldw	r16,8(r10)
   152e0:	8280a026 	beq	r16,r10,15564 <_malloc_r+0x38c>
   152e4:	80800117 	ldw	r2,4(r16)
   152e8:	00ffff04 	movi	r3,-4
   152ec:	10ca703a 	and	r5,r2,r3
   152f0:	2c4dc83a 	sub	r6,r5,r17
   152f4:	008003c4 	movi	r2,15
   152f8:	11808316 	blt	r2,r6,15508 <_malloc_r+0x330>
   152fc:	52800315 	stw	r10,12(r10)
   15300:	52800215 	stw	r10,8(r10)
   15304:	30002916 	blt	r6,zero,153ac <_malloc_r+0x1d4>
   15308:	8147883a 	add	r3,r16,r5
   1530c:	18800117 	ldw	r2,4(r3)
   15310:	9009883a 	mov	r4,r18
   15314:	10800054 	ori	r2,r2,1
   15318:	18800115 	stw	r2,4(r3)
   1531c:	001a44c0 	call	1a44c <__malloc_unlock>
   15320:	80c00204 	addi	r3,r16,8
   15324:	003fc006 	br	15228 <_malloc_r+0x50>
   15328:	02c000f4 	movhi	r11,3
   1532c:	5ae1f004 	addi	r11,r11,-30784
   15330:	8ac5883a 	add	r2,r17,r11
   15334:	14000317 	ldw	r16,12(r2)
   15338:	580f883a 	mov	r7,r11
   1533c:	8806d0fa 	srli	r3,r17,3
   15340:	14006c26 	beq	r2,r16,154f4 <_malloc_r+0x31c>
   15344:	80c00117 	ldw	r3,4(r16)
   15348:	00bfff04 	movi	r2,-4
   1534c:	81800317 	ldw	r6,12(r16)
   15350:	1886703a 	and	r3,r3,r2
   15354:	80c7883a 	add	r3,r16,r3
   15358:	18800117 	ldw	r2,4(r3)
   1535c:	81400217 	ldw	r5,8(r16)
   15360:	9009883a 	mov	r4,r18
   15364:	10800054 	ori	r2,r2,1
   15368:	18800115 	stw	r2,4(r3)
   1536c:	31400215 	stw	r5,8(r6)
   15370:	29800315 	stw	r6,12(r5)
   15374:	001a44c0 	call	1a44c <__malloc_unlock>
   15378:	80c00204 	addi	r3,r16,8
   1537c:	003faa06 	br	15228 <_malloc_r+0x50>
   15380:	00800104 	movi	r2,4
   15384:	10c0052e 	bgeu	r2,r3,1539c <_malloc_r+0x1c4>
   15388:	00800504 	movi	r2,20
   1538c:	10c07836 	bltu	r2,r3,15570 <_malloc_r+0x398>
   15390:	198016c4 	addi	r6,r3,91
   15394:	300490fa 	slli	r2,r6,3
   15398:	003fbc06 	br	1528c <_malloc_r+0xb4>
   1539c:	8804d1ba 	srli	r2,r17,6
   153a0:	11800e04 	addi	r6,r2,56
   153a4:	300490fa 	slli	r2,r6,3
   153a8:	003fb806 	br	1528c <_malloc_r+0xb4>
   153ac:	00807fc4 	movi	r2,511
   153b0:	1140bb36 	bltu	r2,r5,156a0 <_malloc_r+0x4c8>
   153b4:	2806d0fa 	srli	r3,r5,3
   153b8:	573ffe04 	addi	fp,r10,-8
   153bc:	00800044 	movi	r2,1
   153c0:	180890fa 	slli	r4,r3,3
   153c4:	1807d0ba 	srai	r3,r3,2
   153c8:	e1c00117 	ldw	r7,4(fp)
   153cc:	5909883a 	add	r4,r11,r4
   153d0:	21400217 	ldw	r5,8(r4)
   153d4:	10c4983a 	sll	r2,r2,r3
   153d8:	81000315 	stw	r4,12(r16)
   153dc:	81400215 	stw	r5,8(r16)
   153e0:	388eb03a 	or	r7,r7,r2
   153e4:	2c000315 	stw	r16,12(r5)
   153e8:	24000215 	stw	r16,8(r4)
   153ec:	e1c00115 	stw	r7,4(fp)
   153f0:	4807883a 	mov	r3,r9
   153f4:	4800cd16 	blt	r9,zero,1572c <_malloc_r+0x554>
   153f8:	1807d0ba 	srai	r3,r3,2
   153fc:	00800044 	movi	r2,1
   15400:	10c8983a 	sll	r4,r2,r3
   15404:	39004436 	bltu	r7,r4,15518 <_malloc_r+0x340>
   15408:	21c4703a 	and	r2,r4,r7
   1540c:	10000a1e 	bne	r2,zero,15438 <_malloc_r+0x260>
   15410:	2109883a 	add	r4,r4,r4
   15414:	00bfff04 	movi	r2,-4
   15418:	4884703a 	and	r2,r9,r2
   1541c:	3906703a 	and	r3,r7,r4
   15420:	12400104 	addi	r9,r2,4
   15424:	1800041e 	bne	r3,zero,15438 <_malloc_r+0x260>
   15428:	2109883a 	add	r4,r4,r4
   1542c:	3904703a 	and	r2,r7,r4
   15430:	4a400104 	addi	r9,r9,4
   15434:	103ffc26 	beq	r2,zero,15428 <_malloc_r+0x250>
   15438:	480490fa 	slli	r2,r9,3
   1543c:	4819883a 	mov	r12,r9
   15440:	023fff04 	movi	r8,-4
   15444:	589b883a 	add	r13,r11,r2
   15448:	6807883a 	mov	r3,r13
   1544c:	014003c4 	movi	r5,15
   15450:	1c000317 	ldw	r16,12(r3)
   15454:	1c00041e 	bne	r3,r16,15468 <_malloc_r+0x290>
   15458:	0000a706 	br	156f8 <_malloc_r+0x520>
   1545c:	3000ab0e 	bge	r6,zero,1570c <_malloc_r+0x534>
   15460:	84000317 	ldw	r16,12(r16)
   15464:	1c00a426 	beq	r3,r16,156f8 <_malloc_r+0x520>
   15468:	80800117 	ldw	r2,4(r16)
   1546c:	1204703a 	and	r2,r2,r8
   15470:	144dc83a 	sub	r6,r2,r17
   15474:	29bff90e 	bge	r5,r6,1545c <_malloc_r+0x284>
   15478:	81000317 	ldw	r4,12(r16)
   1547c:	80c00217 	ldw	r3,8(r16)
   15480:	89400054 	ori	r5,r17,1
   15484:	8445883a 	add	r2,r16,r17
   15488:	20c00215 	stw	r3,8(r4)
   1548c:	19000315 	stw	r4,12(r3)
   15490:	81400115 	stw	r5,4(r16)
   15494:	1187883a 	add	r3,r2,r6
   15498:	31000054 	ori	r4,r6,1
   1549c:	50800315 	stw	r2,12(r10)
   154a0:	50800215 	stw	r2,8(r10)
   154a4:	19800015 	stw	r6,0(r3)
   154a8:	11000115 	stw	r4,4(r2)
   154ac:	12800215 	stw	r10,8(r2)
   154b0:	12800315 	stw	r10,12(r2)
   154b4:	9009883a 	mov	r4,r18
   154b8:	001a44c0 	call	1a44c <__malloc_unlock>
   154bc:	80c00204 	addi	r3,r16,8
   154c0:	003f5906 	br	15228 <_malloc_r+0x50>
   154c4:	8109883a 	add	r4,r16,r4
   154c8:	20800117 	ldw	r2,4(r4)
   154cc:	80c00217 	ldw	r3,8(r16)
   154d0:	81400317 	ldw	r5,12(r16)
   154d4:	10800054 	ori	r2,r2,1
   154d8:	20800115 	stw	r2,4(r4)
   154dc:	28c00215 	stw	r3,8(r5)
   154e0:	19400315 	stw	r5,12(r3)
   154e4:	9009883a 	mov	r4,r18
   154e8:	001a44c0 	call	1a44c <__malloc_unlock>
   154ec:	80c00204 	addi	r3,r16,8
   154f0:	003f4d06 	br	15228 <_malloc_r+0x50>
   154f4:	80800204 	addi	r2,r16,8
   154f8:	14000317 	ldw	r16,12(r2)
   154fc:	143f911e 	bne	r2,r16,15344 <_malloc_r+0x16c>
   15500:	1a400084 	addi	r9,r3,2
   15504:	003f7306 	br	152d4 <_malloc_r+0xfc>
   15508:	88c00054 	ori	r3,r17,1
   1550c:	8445883a 	add	r2,r16,r17
   15510:	80c00115 	stw	r3,4(r16)
   15514:	003fdf06 	br	15494 <_malloc_r+0x2bc>
   15518:	e4000217 	ldw	r16,8(fp)
   1551c:	00bfff04 	movi	r2,-4
   15520:	80c00117 	ldw	r3,4(r16)
   15524:	802d883a 	mov	r22,r16
   15528:	18aa703a 	and	r21,r3,r2
   1552c:	ac401636 	bltu	r21,r17,15588 <_malloc_r+0x3b0>
   15530:	ac49c83a 	sub	r4,r21,r17
   15534:	008003c4 	movi	r2,15
   15538:	1100130e 	bge	r2,r4,15588 <_malloc_r+0x3b0>
   1553c:	88800054 	ori	r2,r17,1
   15540:	8447883a 	add	r3,r16,r17
   15544:	80800115 	stw	r2,4(r16)
   15548:	20800054 	ori	r2,r4,1
   1554c:	18800115 	stw	r2,4(r3)
   15550:	e0c00215 	stw	r3,8(fp)
   15554:	9009883a 	mov	r4,r18
   15558:	001a44c0 	call	1a44c <__malloc_unlock>
   1555c:	80c00204 	addi	r3,r16,8
   15560:	003f3106 	br	15228 <_malloc_r+0x50>
   15564:	39c00117 	ldw	r7,4(r7)
   15568:	573ffe04 	addi	fp,r10,-8
   1556c:	003fa006 	br	153f0 <_malloc_r+0x218>
   15570:	00801504 	movi	r2,84
   15574:	10c06736 	bltu	r2,r3,15714 <_malloc_r+0x53c>
   15578:	8804d33a 	srli	r2,r17,12
   1557c:	11801b84 	addi	r6,r2,110
   15580:	300490fa 	slli	r2,r6,3
   15584:	003f4106 	br	1528c <_malloc_r+0xb4>
   15588:	d0a01817 	ldw	r2,-32672(gp)
   1558c:	d0e00517 	ldw	r3,-32748(gp)
   15590:	053fffc4 	movi	r20,-1
   15594:	10800404 	addi	r2,r2,16
   15598:	88a7883a 	add	r19,r17,r2
   1559c:	1d000326 	beq	r3,r20,155ac <_malloc_r+0x3d4>
   155a0:	98c3ffc4 	addi	r3,r19,4095
   155a4:	00bc0004 	movi	r2,-4096
   155a8:	18a6703a 	and	r19,r3,r2
   155ac:	9009883a 	mov	r4,r18
   155b0:	980b883a 	mov	r5,r19
   155b4:	001726c0 	call	1726c <_sbrk_r>
   155b8:	1009883a 	mov	r4,r2
   155bc:	15000426 	beq	r2,r20,155d0 <_malloc_r+0x3f8>
   155c0:	854b883a 	add	r5,r16,r21
   155c4:	1029883a 	mov	r20,r2
   155c8:	11405a2e 	bgeu	r2,r5,15734 <_malloc_r+0x55c>
   155cc:	87000c26 	beq	r16,fp,15600 <_malloc_r+0x428>
   155d0:	e4000217 	ldw	r16,8(fp)
   155d4:	80c00117 	ldw	r3,4(r16)
   155d8:	00bfff04 	movi	r2,-4
   155dc:	1884703a 	and	r2,r3,r2
   155e0:	14400336 	bltu	r2,r17,155f0 <_malloc_r+0x418>
   155e4:	1449c83a 	sub	r4,r2,r17
   155e8:	008003c4 	movi	r2,15
   155ec:	113fd316 	blt	r2,r4,1553c <_malloc_r+0x364>
   155f0:	9009883a 	mov	r4,r18
   155f4:	001a44c0 	call	1a44c <__malloc_unlock>
   155f8:	0007883a 	mov	r3,zero
   155fc:	003f0a06 	br	15228 <_malloc_r+0x50>
   15600:	05c000f4 	movhi	r23,3
   15604:	bde79804 	addi	r23,r23,-24992
   15608:	b8800017 	ldw	r2,0(r23)
   1560c:	988d883a 	add	r6,r19,r2
   15610:	b9800015 	stw	r6,0(r23)
   15614:	d0e00517 	ldw	r3,-32748(gp)
   15618:	00bfffc4 	movi	r2,-1
   1561c:	18808e26 	beq	r3,r2,15858 <_malloc_r+0x680>
   15620:	2145c83a 	sub	r2,r4,r5
   15624:	3085883a 	add	r2,r6,r2
   15628:	b8800015 	stw	r2,0(r23)
   1562c:	20c001cc 	andi	r3,r4,7
   15630:	18005f1e 	bne	r3,zero,157b0 <_malloc_r+0x5d8>
   15634:	000b883a 	mov	r5,zero
   15638:	a4c5883a 	add	r2,r20,r19
   1563c:	1083ffcc 	andi	r2,r2,4095
   15640:	00c40004 	movi	r3,4096
   15644:	1887c83a 	sub	r3,r3,r2
   15648:	28e7883a 	add	r19,r5,r3
   1564c:	9009883a 	mov	r4,r18
   15650:	980b883a 	mov	r5,r19
   15654:	001726c0 	call	1726c <_sbrk_r>
   15658:	1007883a 	mov	r3,r2
   1565c:	00bfffc4 	movi	r2,-1
   15660:	18807a26 	beq	r3,r2,1584c <_malloc_r+0x674>
   15664:	1d05c83a 	sub	r2,r3,r20
   15668:	9885883a 	add	r2,r19,r2
   1566c:	10c00054 	ori	r3,r2,1
   15670:	b8800017 	ldw	r2,0(r23)
   15674:	a021883a 	mov	r16,r20
   15678:	a0c00115 	stw	r3,4(r20)
   1567c:	9885883a 	add	r2,r19,r2
   15680:	b8800015 	stw	r2,0(r23)
   15684:	e5000215 	stw	r20,8(fp)
   15688:	b7003626 	beq	r22,fp,15764 <_malloc_r+0x58c>
   1568c:	018003c4 	movi	r6,15
   15690:	35404b36 	bltu	r6,r21,157c0 <_malloc_r+0x5e8>
   15694:	00800044 	movi	r2,1
   15698:	a0800115 	stw	r2,4(r20)
   1569c:	003fcd06 	br	155d4 <_malloc_r+0x3fc>
   156a0:	2808d27a 	srli	r4,r5,9
   156a4:	2000371e 	bne	r4,zero,15784 <_malloc_r+0x5ac>
   156a8:	2808d0fa 	srli	r4,r5,3
   156ac:	200690fa 	slli	r3,r4,3
   156b0:	1ad1883a 	add	r8,r3,r11
   156b4:	41800217 	ldw	r6,8(r8)
   156b8:	41805b26 	beq	r8,r6,15828 <_malloc_r+0x650>
   156bc:	30800117 	ldw	r2,4(r6)
   156c0:	00ffff04 	movi	r3,-4
   156c4:	10c4703a 	and	r2,r2,r3
   156c8:	2880022e 	bgeu	r5,r2,156d4 <_malloc_r+0x4fc>
   156cc:	31800217 	ldw	r6,8(r6)
   156d0:	41bffa1e 	bne	r8,r6,156bc <_malloc_r+0x4e4>
   156d4:	32000317 	ldw	r8,12(r6)
   156d8:	39c00117 	ldw	r7,4(r7)
   156dc:	82000315 	stw	r8,12(r16)
   156e0:	81800215 	stw	r6,8(r16)
   156e4:	070000f4 	movhi	fp,3
   156e8:	e721f004 	addi	fp,fp,-30784
   156ec:	34000315 	stw	r16,12(r6)
   156f0:	44000215 	stw	r16,8(r8)
   156f4:	003f3e06 	br	153f0 <_malloc_r+0x218>
   156f8:	63000044 	addi	r12,r12,1
   156fc:	608000cc 	andi	r2,r12,3
   15700:	10005d26 	beq	r2,zero,15878 <_malloc_r+0x6a0>
   15704:	18c00204 	addi	r3,r3,8
   15708:	003f5106 	br	15450 <_malloc_r+0x278>
   1570c:	8089883a 	add	r4,r16,r2
   15710:	003f6d06 	br	154c8 <_malloc_r+0x2f0>
   15714:	00805504 	movi	r2,340
   15718:	10c02036 	bltu	r2,r3,1579c <_malloc_r+0x5c4>
   1571c:	8804d3fa 	srli	r2,r17,15
   15720:	11801dc4 	addi	r6,r2,119
   15724:	300490fa 	slli	r2,r6,3
   15728:	003ed806 	br	1528c <_malloc_r+0xb4>
   1572c:	48c000c4 	addi	r3,r9,3
   15730:	003f3106 	br	153f8 <_malloc_r+0x220>
   15734:	05c000f4 	movhi	r23,3
   15738:	bde79804 	addi	r23,r23,-24992
   1573c:	b8800017 	ldw	r2,0(r23)
   15740:	988d883a 	add	r6,r19,r2
   15744:	b9800015 	stw	r6,0(r23)
   15748:	293fb21e 	bne	r5,r4,15614 <_malloc_r+0x43c>
   1574c:	2083ffcc 	andi	r2,r4,4095
   15750:	103fb01e 	bne	r2,zero,15614 <_malloc_r+0x43c>
   15754:	e4000217 	ldw	r16,8(fp)
   15758:	9d45883a 	add	r2,r19,r21
   1575c:	10800054 	ori	r2,r2,1
   15760:	80800115 	stw	r2,4(r16)
   15764:	b8c00017 	ldw	r3,0(r23)
   15768:	d0a01917 	ldw	r2,-32668(gp)
   1576c:	10c0012e 	bgeu	r2,r3,15774 <_malloc_r+0x59c>
   15770:	d0e01915 	stw	r3,-32668(gp)
   15774:	d0a01a17 	ldw	r2,-32664(gp)
   15778:	10ff962e 	bgeu	r2,r3,155d4 <_malloc_r+0x3fc>
   1577c:	d0e01a15 	stw	r3,-32664(gp)
   15780:	003f9406 	br	155d4 <_malloc_r+0x3fc>
   15784:	00800104 	movi	r2,4
   15788:	11001e36 	bltu	r2,r4,15804 <_malloc_r+0x62c>
   1578c:	2804d1ba 	srli	r2,r5,6
   15790:	11000e04 	addi	r4,r2,56
   15794:	200690fa 	slli	r3,r4,3
   15798:	003fc506 	br	156b0 <_malloc_r+0x4d8>
   1579c:	00815504 	movi	r2,1364
   157a0:	10c01d2e 	bgeu	r2,r3,15818 <_malloc_r+0x640>
   157a4:	01801f84 	movi	r6,126
   157a8:	0080fc04 	movi	r2,1008
   157ac:	003eb706 	br	1528c <_malloc_r+0xb4>
   157b0:	00800204 	movi	r2,8
   157b4:	10cbc83a 	sub	r5,r2,r3
   157b8:	2169883a 	add	r20,r4,r5
   157bc:	003f9e06 	br	15638 <_malloc_r+0x460>
   157c0:	00bffe04 	movi	r2,-8
   157c4:	a93ffd04 	addi	r4,r21,-12
   157c8:	2088703a 	and	r4,r4,r2
   157cc:	b10b883a 	add	r5,r22,r4
   157d0:	00c00144 	movi	r3,5
   157d4:	28c00215 	stw	r3,8(r5)
   157d8:	28c00115 	stw	r3,4(r5)
   157dc:	b0800117 	ldw	r2,4(r22)
   157e0:	1080004c 	andi	r2,r2,1
   157e4:	2084b03a 	or	r2,r4,r2
   157e8:	b0800115 	stw	r2,4(r22)
   157ec:	313fdd2e 	bgeu	r6,r4,15764 <_malloc_r+0x58c>
   157f0:	b1400204 	addi	r5,r22,8
   157f4:	9009883a 	mov	r4,r18
   157f8:	00146500 	call	14650 <_free_r>
   157fc:	e4000217 	ldw	r16,8(fp)
   15800:	003fd806 	br	15764 <_malloc_r+0x58c>
   15804:	00800504 	movi	r2,20
   15808:	11001536 	bltu	r2,r4,15860 <_malloc_r+0x688>
   1580c:	210016c4 	addi	r4,r4,91
   15810:	200690fa 	slli	r3,r4,3
   15814:	003fa606 	br	156b0 <_malloc_r+0x4d8>
   15818:	8804d4ba 	srli	r2,r17,18
   1581c:	11801f04 	addi	r6,r2,124
   15820:	300490fa 	slli	r2,r6,3
   15824:	003e9906 	br	1528c <_malloc_r+0xb4>
   15828:	2009d0ba 	srai	r4,r4,2
   1582c:	014000f4 	movhi	r5,3
   15830:	2961f004 	addi	r5,r5,-30784
   15834:	00c00044 	movi	r3,1
   15838:	28800117 	ldw	r2,4(r5)
   1583c:	1906983a 	sll	r3,r3,r4
   15840:	10c4b03a 	or	r2,r2,r3
   15844:	28800115 	stw	r2,4(r5)
   15848:	003fa306 	br	156d8 <_malloc_r+0x500>
   1584c:	0027883a 	mov	r19,zero
   15850:	00c00044 	movi	r3,1
   15854:	003f8606 	br	15670 <_malloc_r+0x498>
   15858:	d1200515 	stw	r4,-32748(gp)
   1585c:	003f7306 	br	1562c <_malloc_r+0x454>
   15860:	00801504 	movi	r2,84
   15864:	11001936 	bltu	r2,r4,158cc <_malloc_r+0x6f4>
   15868:	2804d33a 	srli	r2,r5,12
   1586c:	11001b84 	addi	r4,r2,110
   15870:	200690fa 	slli	r3,r4,3
   15874:	003f8e06 	br	156b0 <_malloc_r+0x4d8>
   15878:	480b883a 	mov	r5,r9
   1587c:	6807883a 	mov	r3,r13
   15880:	288000cc 	andi	r2,r5,3
   15884:	18fffe04 	addi	r3,r3,-8
   15888:	297fffc4 	addi	r5,r5,-1
   1588c:	10001526 	beq	r2,zero,158e4 <_malloc_r+0x70c>
   15890:	18800217 	ldw	r2,8(r3)
   15894:	10fffa26 	beq	r2,r3,15880 <_malloc_r+0x6a8>
   15898:	2109883a 	add	r4,r4,r4
   1589c:	393f1e36 	bltu	r7,r4,15518 <_malloc_r+0x340>
   158a0:	203f1d26 	beq	r4,zero,15518 <_malloc_r+0x340>
   158a4:	21c4703a 	and	r2,r4,r7
   158a8:	10000226 	beq	r2,zero,158b4 <_malloc_r+0x6dc>
   158ac:	6013883a 	mov	r9,r12
   158b0:	003ee106 	br	15438 <_malloc_r+0x260>
   158b4:	2109883a 	add	r4,r4,r4
   158b8:	3904703a 	and	r2,r7,r4
   158bc:	63000104 	addi	r12,r12,4
   158c0:	103ffc26 	beq	r2,zero,158b4 <_malloc_r+0x6dc>
   158c4:	6013883a 	mov	r9,r12
   158c8:	003edb06 	br	15438 <_malloc_r+0x260>
   158cc:	00805504 	movi	r2,340
   158d0:	11000836 	bltu	r2,r4,158f4 <_malloc_r+0x71c>
   158d4:	2804d3fa 	srli	r2,r5,15
   158d8:	11001dc4 	addi	r4,r2,119
   158dc:	200690fa 	slli	r3,r4,3
   158e0:	003f7306 	br	156b0 <_malloc_r+0x4d8>
   158e4:	0104303a 	nor	r2,zero,r4
   158e8:	388e703a 	and	r7,r7,r2
   158ec:	e1c00115 	stw	r7,4(fp)
   158f0:	003fe906 	br	15898 <_malloc_r+0x6c0>
   158f4:	00815504 	movi	r2,1364
   158f8:	1100032e 	bgeu	r2,r4,15908 <_malloc_r+0x730>
   158fc:	01001f84 	movi	r4,126
   15900:	00c0fc04 	movi	r3,1008
   15904:	003f6a06 	br	156b0 <_malloc_r+0x4d8>
   15908:	2804d4ba 	srli	r2,r5,18
   1590c:	11001f04 	addi	r4,r2,124
   15910:	200690fa 	slli	r3,r4,3
   15914:	003f6606 	br	156b0 <_malloc_r+0x4d8>

00015918 <memchr>:
   15918:	008000c4 	movi	r2,3
   1591c:	29403fcc 	andi	r5,r5,255
   15920:	2007883a 	mov	r3,r4
   15924:	1180022e 	bgeu	r2,r6,15930 <memchr+0x18>
   15928:	2084703a 	and	r2,r4,r2
   1592c:	10000b26 	beq	r2,zero,1595c <memchr+0x44>
   15930:	313fffc4 	addi	r4,r6,-1
   15934:	3000051e 	bne	r6,zero,1594c <memchr+0x34>
   15938:	00002c06 	br	159ec <memchr+0xd4>
   1593c:	213fffc4 	addi	r4,r4,-1
   15940:	00bfffc4 	movi	r2,-1
   15944:	18c00044 	addi	r3,r3,1
   15948:	20802826 	beq	r4,r2,159ec <memchr+0xd4>
   1594c:	18800003 	ldbu	r2,0(r3)
   15950:	28bffa1e 	bne	r5,r2,1593c <memchr+0x24>
   15954:	1805883a 	mov	r2,r3
   15958:	f800283a 	ret
   1595c:	0011883a 	mov	r8,zero
   15960:	0007883a 	mov	r3,zero
   15964:	01c00104 	movi	r7,4
   15968:	4004923a 	slli	r2,r8,8
   1596c:	18c00044 	addi	r3,r3,1
   15970:	1151883a 	add	r8,r2,r5
   15974:	19fffc1e 	bne	r3,r7,15968 <memchr+0x50>
   15978:	02bfbff4 	movhi	r10,65279
   1597c:	52bfbfc4 	addi	r10,r10,-257
   15980:	02602074 	movhi	r9,32897
   15984:	4a602004 	addi	r9,r9,-32640
   15988:	02c000c4 	movi	r11,3
   1598c:	20800017 	ldw	r2,0(r4)
   15990:	31bfff04 	addi	r6,r6,-4
   15994:	200f883a 	mov	r7,r4
   15998:	1204f03a 	xor	r2,r2,r8
   1599c:	1287883a 	add	r3,r2,r10
   159a0:	1a46703a 	and	r3,r3,r9
   159a4:	0084303a 	nor	r2,zero,r2
   159a8:	10c4703a 	and	r2,r2,r3
   159ac:	10000b26 	beq	r2,zero,159dc <memchr+0xc4>
   159b0:	20800003 	ldbu	r2,0(r4)
   159b4:	28800f26 	beq	r5,r2,159f4 <memchr+0xdc>
   159b8:	20800043 	ldbu	r2,1(r4)
   159bc:	21c00044 	addi	r7,r4,1
   159c0:	28800c26 	beq	r5,r2,159f4 <memchr+0xdc>
   159c4:	20800083 	ldbu	r2,2(r4)
   159c8:	21c00084 	addi	r7,r4,2
   159cc:	28800926 	beq	r5,r2,159f4 <memchr+0xdc>
   159d0:	208000c3 	ldbu	r2,3(r4)
   159d4:	21c000c4 	addi	r7,r4,3
   159d8:	28800626 	beq	r5,r2,159f4 <memchr+0xdc>
   159dc:	21000104 	addi	r4,r4,4
   159e0:	59bfea36 	bltu	r11,r6,1598c <memchr+0x74>
   159e4:	2007883a 	mov	r3,r4
   159e8:	003fd106 	br	15930 <memchr+0x18>
   159ec:	0005883a 	mov	r2,zero
   159f0:	f800283a 	ret
   159f4:	3805883a 	mov	r2,r7
   159f8:	f800283a 	ret

000159fc <memcpy>:
   159fc:	01c003c4 	movi	r7,15
   15a00:	2007883a 	mov	r3,r4
   15a04:	3980032e 	bgeu	r7,r6,15a14 <memcpy+0x18>
   15a08:	2904b03a 	or	r2,r5,r4
   15a0c:	108000cc 	andi	r2,r2,3
   15a10:	10000926 	beq	r2,zero,15a38 <memcpy+0x3c>
   15a14:	30000626 	beq	r6,zero,15a30 <memcpy+0x34>
   15a18:	30cd883a 	add	r6,r6,r3
   15a1c:	28800003 	ldbu	r2,0(r5)
   15a20:	29400044 	addi	r5,r5,1
   15a24:	18800005 	stb	r2,0(r3)
   15a28:	18c00044 	addi	r3,r3,1
   15a2c:	30fffb1e 	bne	r6,r3,15a1c <memcpy+0x20>
   15a30:	2005883a 	mov	r2,r4
   15a34:	f800283a 	ret
   15a38:	3811883a 	mov	r8,r7
   15a3c:	200f883a 	mov	r7,r4
   15a40:	28c00017 	ldw	r3,0(r5)
   15a44:	31bffc04 	addi	r6,r6,-16
   15a48:	38c00015 	stw	r3,0(r7)
   15a4c:	28800117 	ldw	r2,4(r5)
   15a50:	38800115 	stw	r2,4(r7)
   15a54:	28c00217 	ldw	r3,8(r5)
   15a58:	38c00215 	stw	r3,8(r7)
   15a5c:	28800317 	ldw	r2,12(r5)
   15a60:	29400404 	addi	r5,r5,16
   15a64:	38800315 	stw	r2,12(r7)
   15a68:	39c00404 	addi	r7,r7,16
   15a6c:	41bff436 	bltu	r8,r6,15a40 <memcpy+0x44>
   15a70:	008000c4 	movi	r2,3
   15a74:	1180072e 	bgeu	r2,r6,15a94 <memcpy+0x98>
   15a78:	1007883a 	mov	r3,r2
   15a7c:	28800017 	ldw	r2,0(r5)
   15a80:	31bfff04 	addi	r6,r6,-4
   15a84:	29400104 	addi	r5,r5,4
   15a88:	38800015 	stw	r2,0(r7)
   15a8c:	39c00104 	addi	r7,r7,4
   15a90:	19bffa36 	bltu	r3,r6,15a7c <memcpy+0x80>
   15a94:	3807883a 	mov	r3,r7
   15a98:	003fde06 	br	15a14 <memcpy+0x18>

00015a9c <memmove>:
   15a9c:	2807883a 	mov	r3,r5
   15aa0:	2011883a 	mov	r8,r4
   15aa4:	29000c2e 	bgeu	r5,r4,15ad8 <memmove+0x3c>
   15aa8:	298f883a 	add	r7,r5,r6
   15aac:	21c00a2e 	bgeu	r4,r7,15ad8 <memmove+0x3c>
   15ab0:	30000726 	beq	r6,zero,15ad0 <memmove+0x34>
   15ab4:	2187883a 	add	r3,r4,r6
   15ab8:	198dc83a 	sub	r6,r3,r6
   15abc:	39ffffc4 	addi	r7,r7,-1
   15ac0:	38800003 	ldbu	r2,0(r7)
   15ac4:	18ffffc4 	addi	r3,r3,-1
   15ac8:	18800005 	stb	r2,0(r3)
   15acc:	19bffb1e 	bne	r3,r6,15abc <memmove+0x20>
   15ad0:	2005883a 	mov	r2,r4
   15ad4:	f800283a 	ret
   15ad8:	01c003c4 	movi	r7,15
   15adc:	39800a36 	bltu	r7,r6,15b08 <memmove+0x6c>
   15ae0:	303ffb26 	beq	r6,zero,15ad0 <memmove+0x34>
   15ae4:	400f883a 	mov	r7,r8
   15ae8:	320d883a 	add	r6,r6,r8
   15aec:	28800003 	ldbu	r2,0(r5)
   15af0:	29400044 	addi	r5,r5,1
   15af4:	38800005 	stb	r2,0(r7)
   15af8:	39c00044 	addi	r7,r7,1
   15afc:	39bffb1e 	bne	r7,r6,15aec <memmove+0x50>
   15b00:	2005883a 	mov	r2,r4
   15b04:	f800283a 	ret
   15b08:	1904b03a 	or	r2,r3,r4
   15b0c:	108000cc 	andi	r2,r2,3
   15b10:	103ff31e 	bne	r2,zero,15ae0 <memmove+0x44>
   15b14:	3811883a 	mov	r8,r7
   15b18:	180b883a 	mov	r5,r3
   15b1c:	200f883a 	mov	r7,r4
   15b20:	28c00017 	ldw	r3,0(r5)
   15b24:	31bffc04 	addi	r6,r6,-16
   15b28:	38c00015 	stw	r3,0(r7)
   15b2c:	28800117 	ldw	r2,4(r5)
   15b30:	38800115 	stw	r2,4(r7)
   15b34:	28c00217 	ldw	r3,8(r5)
   15b38:	38c00215 	stw	r3,8(r7)
   15b3c:	28800317 	ldw	r2,12(r5)
   15b40:	29400404 	addi	r5,r5,16
   15b44:	38800315 	stw	r2,12(r7)
   15b48:	39c00404 	addi	r7,r7,16
   15b4c:	41bff436 	bltu	r8,r6,15b20 <memmove+0x84>
   15b50:	008000c4 	movi	r2,3
   15b54:	1180072e 	bgeu	r2,r6,15b74 <memmove+0xd8>
   15b58:	1007883a 	mov	r3,r2
   15b5c:	28800017 	ldw	r2,0(r5)
   15b60:	31bfff04 	addi	r6,r6,-4
   15b64:	29400104 	addi	r5,r5,4
   15b68:	38800015 	stw	r2,0(r7)
   15b6c:	39c00104 	addi	r7,r7,4
   15b70:	19bffa36 	bltu	r3,r6,15b5c <memmove+0xc0>
   15b74:	3811883a 	mov	r8,r7
   15b78:	003fd906 	br	15ae0 <memmove+0x44>

00015b7c <memset>:
   15b7c:	008000c4 	movi	r2,3
   15b80:	29403fcc 	andi	r5,r5,255
   15b84:	2007883a 	mov	r3,r4
   15b88:	1180022e 	bgeu	r2,r6,15b94 <memset+0x18>
   15b8c:	2084703a 	and	r2,r4,r2
   15b90:	10000826 	beq	r2,zero,15bb4 <memset+0x38>
   15b94:	30000526 	beq	r6,zero,15bac <memset+0x30>
   15b98:	2805883a 	mov	r2,r5
   15b9c:	30cd883a 	add	r6,r6,r3
   15ba0:	18800005 	stb	r2,0(r3)
   15ba4:	18c00044 	addi	r3,r3,1
   15ba8:	19bffd1e 	bne	r3,r6,15ba0 <memset+0x24>
   15bac:	2005883a 	mov	r2,r4
   15bb0:	f800283a 	ret
   15bb4:	2804923a 	slli	r2,r5,8
   15bb8:	020003c4 	movi	r8,15
   15bbc:	200f883a 	mov	r7,r4
   15bc0:	2884b03a 	or	r2,r5,r2
   15bc4:	1006943a 	slli	r3,r2,16
   15bc8:	10c6b03a 	or	r3,r2,r3
   15bcc:	41800a2e 	bgeu	r8,r6,15bf8 <memset+0x7c>
   15bd0:	4005883a 	mov	r2,r8
   15bd4:	31bffc04 	addi	r6,r6,-16
   15bd8:	38c00015 	stw	r3,0(r7)
   15bdc:	38c00115 	stw	r3,4(r7)
   15be0:	38c00215 	stw	r3,8(r7)
   15be4:	38c00315 	stw	r3,12(r7)
   15be8:	39c00404 	addi	r7,r7,16
   15bec:	11bff936 	bltu	r2,r6,15bd4 <memset+0x58>
   15bf0:	008000c4 	movi	r2,3
   15bf4:	1180052e 	bgeu	r2,r6,15c0c <memset+0x90>
   15bf8:	31bfff04 	addi	r6,r6,-4
   15bfc:	008000c4 	movi	r2,3
   15c00:	38c00015 	stw	r3,0(r7)
   15c04:	39c00104 	addi	r7,r7,4
   15c08:	11bffb36 	bltu	r2,r6,15bf8 <memset+0x7c>
   15c0c:	3807883a 	mov	r3,r7
   15c10:	003fe006 	br	15b94 <memset+0x18>

00015c14 <_Bfree>:
   15c14:	28000826 	beq	r5,zero,15c38 <_Bfree+0x24>
   15c18:	28800117 	ldw	r2,4(r5)
   15c1c:	21001317 	ldw	r4,76(r4)
   15c20:	1085883a 	add	r2,r2,r2
   15c24:	1085883a 	add	r2,r2,r2
   15c28:	1105883a 	add	r2,r2,r4
   15c2c:	10c00017 	ldw	r3,0(r2)
   15c30:	28c00015 	stw	r3,0(r5)
   15c34:	11400015 	stw	r5,0(r2)
   15c38:	f800283a 	ret

00015c3c <__hi0bits>:
   15c3c:	20bfffec 	andhi	r2,r4,65535
   15c40:	10001426 	beq	r2,zero,15c94 <__hi0bits+0x58>
   15c44:	0007883a 	mov	r3,zero
   15c48:	20bfc02c 	andhi	r2,r4,65280
   15c4c:	1000021e 	bne	r2,zero,15c58 <__hi0bits+0x1c>
   15c50:	2008923a 	slli	r4,r4,8
   15c54:	18c00204 	addi	r3,r3,8
   15c58:	20bc002c 	andhi	r2,r4,61440
   15c5c:	1000021e 	bne	r2,zero,15c68 <__hi0bits+0x2c>
   15c60:	2008913a 	slli	r4,r4,4
   15c64:	18c00104 	addi	r3,r3,4
   15c68:	20b0002c 	andhi	r2,r4,49152
   15c6c:	1000031e 	bne	r2,zero,15c7c <__hi0bits+0x40>
   15c70:	2105883a 	add	r2,r4,r4
   15c74:	18c00084 	addi	r3,r3,2
   15c78:	1089883a 	add	r4,r2,r2
   15c7c:	20000316 	blt	r4,zero,15c8c <__hi0bits+0x50>
   15c80:	2090002c 	andhi	r2,r4,16384
   15c84:	10000626 	beq	r2,zero,15ca0 <__hi0bits+0x64>
   15c88:	18c00044 	addi	r3,r3,1
   15c8c:	1805883a 	mov	r2,r3
   15c90:	f800283a 	ret
   15c94:	2008943a 	slli	r4,r4,16
   15c98:	00c00404 	movi	r3,16
   15c9c:	003fea06 	br	15c48 <__hi0bits+0xc>
   15ca0:	00c00804 	movi	r3,32
   15ca4:	1805883a 	mov	r2,r3
   15ca8:	f800283a 	ret

00015cac <__lo0bits>:
   15cac:	20c00017 	ldw	r3,0(r4)
   15cb0:	188001cc 	andi	r2,r3,7
   15cb4:	10000a26 	beq	r2,zero,15ce0 <__lo0bits+0x34>
   15cb8:	1880004c 	andi	r2,r3,1
   15cbc:	1005003a 	cmpeq	r2,r2,zero
   15cc0:	10002126 	beq	r2,zero,15d48 <__lo0bits+0x9c>
   15cc4:	1880008c 	andi	r2,r3,2
   15cc8:	1000251e 	bne	r2,zero,15d60 <__lo0bits+0xb4>
   15ccc:	1804d0ba 	srli	r2,r3,2
   15cd0:	01400084 	movi	r5,2
   15cd4:	20800015 	stw	r2,0(r4)
   15cd8:	2805883a 	mov	r2,r5
   15cdc:	f800283a 	ret
   15ce0:	18bfffcc 	andi	r2,r3,65535
   15ce4:	10001526 	beq	r2,zero,15d3c <__lo0bits+0x90>
   15ce8:	000b883a 	mov	r5,zero
   15cec:	18803fcc 	andi	r2,r3,255
   15cf0:	1000021e 	bne	r2,zero,15cfc <__lo0bits+0x50>
   15cf4:	1806d23a 	srli	r3,r3,8
   15cf8:	29400204 	addi	r5,r5,8
   15cfc:	188003cc 	andi	r2,r3,15
   15d00:	1000021e 	bne	r2,zero,15d0c <__lo0bits+0x60>
   15d04:	1806d13a 	srli	r3,r3,4
   15d08:	29400104 	addi	r5,r5,4
   15d0c:	188000cc 	andi	r2,r3,3
   15d10:	1000021e 	bne	r2,zero,15d1c <__lo0bits+0x70>
   15d14:	1806d0ba 	srli	r3,r3,2
   15d18:	29400084 	addi	r5,r5,2
   15d1c:	1880004c 	andi	r2,r3,1
   15d20:	1000031e 	bne	r2,zero,15d30 <__lo0bits+0x84>
   15d24:	1806d07a 	srli	r3,r3,1
   15d28:	18000a26 	beq	r3,zero,15d54 <__lo0bits+0xa8>
   15d2c:	29400044 	addi	r5,r5,1
   15d30:	2805883a 	mov	r2,r5
   15d34:	20c00015 	stw	r3,0(r4)
   15d38:	f800283a 	ret
   15d3c:	1806d43a 	srli	r3,r3,16
   15d40:	01400404 	movi	r5,16
   15d44:	003fe906 	br	15cec <__lo0bits+0x40>
   15d48:	000b883a 	mov	r5,zero
   15d4c:	2805883a 	mov	r2,r5
   15d50:	f800283a 	ret
   15d54:	01400804 	movi	r5,32
   15d58:	2805883a 	mov	r2,r5
   15d5c:	f800283a 	ret
   15d60:	1804d07a 	srli	r2,r3,1
   15d64:	01400044 	movi	r5,1
   15d68:	20800015 	stw	r2,0(r4)
   15d6c:	003fda06 	br	15cd8 <__lo0bits+0x2c>

00015d70 <__mcmp>:
   15d70:	20800417 	ldw	r2,16(r4)
   15d74:	28c00417 	ldw	r3,16(r5)
   15d78:	10cfc83a 	sub	r7,r2,r3
   15d7c:	38000c1e 	bne	r7,zero,15db0 <__mcmp+0x40>
   15d80:	18c5883a 	add	r2,r3,r3
   15d84:	1085883a 	add	r2,r2,r2
   15d88:	10c00504 	addi	r3,r2,20
   15d8c:	21000504 	addi	r4,r4,20
   15d90:	28cb883a 	add	r5,r5,r3
   15d94:	2085883a 	add	r2,r4,r2
   15d98:	10bfff04 	addi	r2,r2,-4
   15d9c:	297fff04 	addi	r5,r5,-4
   15da0:	11800017 	ldw	r6,0(r2)
   15da4:	28c00017 	ldw	r3,0(r5)
   15da8:	30c0031e 	bne	r6,r3,15db8 <__mcmp+0x48>
   15dac:	20bffa36 	bltu	r4,r2,15d98 <__mcmp+0x28>
   15db0:	3805883a 	mov	r2,r7
   15db4:	f800283a 	ret
   15db8:	30c00336 	bltu	r6,r3,15dc8 <__mcmp+0x58>
   15dbc:	01c00044 	movi	r7,1
   15dc0:	3805883a 	mov	r2,r7
   15dc4:	f800283a 	ret
   15dc8:	01ffffc4 	movi	r7,-1
   15dcc:	003ff806 	br	15db0 <__mcmp+0x40>

00015dd0 <__ulp>:
   15dd0:	295ffc2c 	andhi	r5,r5,32752
   15dd4:	013f3034 	movhi	r4,64704
   15dd8:	290b883a 	add	r5,r5,r4
   15ddc:	0145c83a 	sub	r2,zero,r5
   15de0:	1007d53a 	srai	r3,r2,20
   15de4:	000d883a 	mov	r6,zero
   15de8:	0140040e 	bge	zero,r5,15dfc <__ulp+0x2c>
   15dec:	280f883a 	mov	r7,r5
   15df0:	3807883a 	mov	r3,r7
   15df4:	3005883a 	mov	r2,r6
   15df8:	f800283a 	ret
   15dfc:	008004c4 	movi	r2,19
   15e00:	193ffb04 	addi	r4,r3,-20
   15e04:	10c00c0e 	bge	r2,r3,15e38 <__ulp+0x68>
   15e08:	008007c4 	movi	r2,31
   15e0c:	1107c83a 	sub	r3,r2,r4
   15e10:	00800784 	movi	r2,30
   15e14:	01400044 	movi	r5,1
   15e18:	11000216 	blt	r2,r4,15e24 <__ulp+0x54>
   15e1c:	00800044 	movi	r2,1
   15e20:	10ca983a 	sll	r5,r2,r3
   15e24:	000f883a 	mov	r7,zero
   15e28:	280d883a 	mov	r6,r5
   15e2c:	3807883a 	mov	r3,r7
   15e30:	3005883a 	mov	r2,r6
   15e34:	f800283a 	ret
   15e38:	00800234 	movhi	r2,8
   15e3c:	10cfd83a 	sra	r7,r2,r3
   15e40:	000d883a 	mov	r6,zero
   15e44:	3005883a 	mov	r2,r6
   15e48:	3807883a 	mov	r3,r7
   15e4c:	f800283a 	ret

00015e50 <__b2d>:
   15e50:	20800417 	ldw	r2,16(r4)
   15e54:	defff904 	addi	sp,sp,-28
   15e58:	dd000415 	stw	r20,16(sp)
   15e5c:	1085883a 	add	r2,r2,r2
   15e60:	25000504 	addi	r20,r4,20
   15e64:	1085883a 	add	r2,r2,r2
   15e68:	dc000015 	stw	r16,0(sp)
   15e6c:	a0a1883a 	add	r16,r20,r2
   15e70:	dd400515 	stw	r21,20(sp)
   15e74:	857fff17 	ldw	r21,-4(r16)
   15e78:	dc400115 	stw	r17,4(sp)
   15e7c:	dfc00615 	stw	ra,24(sp)
   15e80:	a809883a 	mov	r4,r21
   15e84:	2823883a 	mov	r17,r5
   15e88:	dcc00315 	stw	r19,12(sp)
   15e8c:	dc800215 	stw	r18,8(sp)
   15e90:	0015c3c0 	call	15c3c <__hi0bits>
   15e94:	100b883a 	mov	r5,r2
   15e98:	00800804 	movi	r2,32
   15e9c:	1145c83a 	sub	r2,r2,r5
   15ea0:	88800015 	stw	r2,0(r17)
   15ea4:	00800284 	movi	r2,10
   15ea8:	80ffff04 	addi	r3,r16,-4
   15eac:	11401416 	blt	r2,r5,15f00 <__b2d+0xb0>
   15eb0:	008002c4 	movi	r2,11
   15eb4:	1149c83a 	sub	r4,r2,r5
   15eb8:	a0c02736 	bltu	r20,r3,15f58 <__b2d+0x108>
   15ebc:	000d883a 	mov	r6,zero
   15ec0:	28800544 	addi	r2,r5,21
   15ec4:	a906d83a 	srl	r3,r21,r4
   15ec8:	a884983a 	sll	r2,r21,r2
   15ecc:	1ccffc34 	orhi	r19,r3,16368
   15ed0:	11a4b03a 	or	r18,r2,r6
   15ed4:	9005883a 	mov	r2,r18
   15ed8:	9807883a 	mov	r3,r19
   15edc:	dfc00617 	ldw	ra,24(sp)
   15ee0:	dd400517 	ldw	r21,20(sp)
   15ee4:	dd000417 	ldw	r20,16(sp)
   15ee8:	dcc00317 	ldw	r19,12(sp)
   15eec:	dc800217 	ldw	r18,8(sp)
   15ef0:	dc400117 	ldw	r17,4(sp)
   15ef4:	dc000017 	ldw	r16,0(sp)
   15ef8:	dec00704 	addi	sp,sp,28
   15efc:	f800283a 	ret
   15f00:	a0c00e36 	bltu	r20,r3,15f3c <__b2d+0xec>
   15f04:	293ffd44 	addi	r4,r5,-11
   15f08:	000d883a 	mov	r6,zero
   15f0c:	20000f26 	beq	r4,zero,15f4c <__b2d+0xfc>
   15f10:	00800804 	movi	r2,32
   15f14:	110bc83a 	sub	r5,r2,r4
   15f18:	a0c01236 	bltu	r20,r3,15f64 <__b2d+0x114>
   15f1c:	000f883a 	mov	r7,zero
   15f20:	a904983a 	sll	r2,r21,r4
   15f24:	3146d83a 	srl	r3,r6,r5
   15f28:	3108983a 	sll	r4,r6,r4
   15f2c:	108ffc34 	orhi	r2,r2,16368
   15f30:	18a6b03a 	or	r19,r3,r2
   15f34:	3924b03a 	or	r18,r7,r4
   15f38:	003fe606 	br	15ed4 <__b2d+0x84>
   15f3c:	293ffd44 	addi	r4,r5,-11
   15f40:	81bffe17 	ldw	r6,-8(r16)
   15f44:	80fffe04 	addi	r3,r16,-8
   15f48:	203ff11e 	bne	r4,zero,15f10 <__b2d+0xc0>
   15f4c:	accffc34 	orhi	r19,r21,16368
   15f50:	3025883a 	mov	r18,r6
   15f54:	003fdf06 	br	15ed4 <__b2d+0x84>
   15f58:	18bfff17 	ldw	r2,-4(r3)
   15f5c:	110cd83a 	srl	r6,r2,r4
   15f60:	003fd706 	br	15ec0 <__b2d+0x70>
   15f64:	18bfff17 	ldw	r2,-4(r3)
   15f68:	114ed83a 	srl	r7,r2,r5
   15f6c:	003fec06 	br	15f20 <__b2d+0xd0>

00015f70 <__ratio>:
   15f70:	defff904 	addi	sp,sp,-28
   15f74:	dc400215 	stw	r17,8(sp)
   15f78:	2823883a 	mov	r17,r5
   15f7c:	d80b883a 	mov	r5,sp
   15f80:	dfc00615 	stw	ra,24(sp)
   15f84:	dd000515 	stw	r20,20(sp)
   15f88:	dcc00415 	stw	r19,16(sp)
   15f8c:	dc800315 	stw	r18,12(sp)
   15f90:	2025883a 	mov	r18,r4
   15f94:	0015e500 	call	15e50 <__b2d>
   15f98:	8809883a 	mov	r4,r17
   15f9c:	d9400104 	addi	r5,sp,4
   15fa0:	1027883a 	mov	r19,r2
   15fa4:	1829883a 	mov	r20,r3
   15fa8:	0015e500 	call	15e50 <__b2d>
   15fac:	89000417 	ldw	r4,16(r17)
   15fb0:	91c00417 	ldw	r7,16(r18)
   15fb4:	d9800117 	ldw	r6,4(sp)
   15fb8:	180b883a 	mov	r5,r3
   15fbc:	390fc83a 	sub	r7,r7,r4
   15fc0:	1009883a 	mov	r4,r2
   15fc4:	d8800017 	ldw	r2,0(sp)
   15fc8:	380e917a 	slli	r7,r7,5
   15fcc:	2011883a 	mov	r8,r4
   15fd0:	1185c83a 	sub	r2,r2,r6
   15fd4:	11c5883a 	add	r2,r2,r7
   15fd8:	1006953a 	slli	r3,r2,20
   15fdc:	2813883a 	mov	r9,r5
   15fe0:	00800d0e 	bge	zero,r2,16018 <__ratio+0xa8>
   15fe4:	1d29883a 	add	r20,r3,r20
   15fe8:	a00b883a 	mov	r5,r20
   15fec:	480f883a 	mov	r7,r9
   15ff0:	9809883a 	mov	r4,r19
   15ff4:	400d883a 	mov	r6,r8
   15ff8:	0018dcc0 	call	18dcc <__divdf3>
   15ffc:	dfc00617 	ldw	ra,24(sp)
   16000:	dd000517 	ldw	r20,20(sp)
   16004:	dcc00417 	ldw	r19,16(sp)
   16008:	dc800317 	ldw	r18,12(sp)
   1600c:	dc400217 	ldw	r17,8(sp)
   16010:	dec00704 	addi	sp,sp,28
   16014:	f800283a 	ret
   16018:	28d3c83a 	sub	r9,r5,r3
   1601c:	003ff206 	br	15fe8 <__ratio+0x78>

00016020 <_mprec_log10>:
   16020:	defffe04 	addi	sp,sp,-8
   16024:	008005c4 	movi	r2,23
   16028:	dc000015 	stw	r16,0(sp)
   1602c:	dfc00115 	stw	ra,4(sp)
   16030:	2021883a 	mov	r16,r4
   16034:	11000c16 	blt	r2,r4,16068 <_mprec_log10+0x48>
   16038:	200490fa 	slli	r2,r4,3
   1603c:	00c000f4 	movhi	r3,3
   16040:	18e05204 	addi	r3,r3,-32440
   16044:	10c5883a 	add	r2,r2,r3
   16048:	12400117 	ldw	r9,4(r2)
   1604c:	12000017 	ldw	r8,0(r2)
   16050:	4807883a 	mov	r3,r9
   16054:	4005883a 	mov	r2,r8
   16058:	dfc00117 	ldw	ra,4(sp)
   1605c:	dc000017 	ldw	r16,0(sp)
   16060:	dec00204 	addi	sp,sp,8
   16064:	f800283a 	ret
   16068:	0011883a 	mov	r8,zero
   1606c:	024ffc34 	movhi	r9,16368
   16070:	0005883a 	mov	r2,zero
   16074:	00d00934 	movhi	r3,16420
   16078:	480b883a 	mov	r5,r9
   1607c:	4009883a 	mov	r4,r8
   16080:	180f883a 	mov	r7,r3
   16084:	100d883a 	mov	r6,r2
   16088:	0018a080 	call	18a08 <__muldf3>
   1608c:	843fffc4 	addi	r16,r16,-1
   16090:	1011883a 	mov	r8,r2
   16094:	1813883a 	mov	r9,r3
   16098:	803ff51e 	bne	r16,zero,16070 <_mprec_log10+0x50>
   1609c:	4005883a 	mov	r2,r8
   160a0:	4807883a 	mov	r3,r9
   160a4:	dfc00117 	ldw	ra,4(sp)
   160a8:	dc000017 	ldw	r16,0(sp)
   160ac:	dec00204 	addi	sp,sp,8
   160b0:	f800283a 	ret

000160b4 <__copybits>:
   160b4:	297fffc4 	addi	r5,r5,-1
   160b8:	30800417 	ldw	r2,16(r6)
   160bc:	280bd17a 	srai	r5,r5,5
   160c0:	31800504 	addi	r6,r6,20
   160c4:	1085883a 	add	r2,r2,r2
   160c8:	294b883a 	add	r5,r5,r5
   160cc:	294b883a 	add	r5,r5,r5
   160d0:	1085883a 	add	r2,r2,r2
   160d4:	290b883a 	add	r5,r5,r4
   160d8:	3087883a 	add	r3,r6,r2
   160dc:	29400104 	addi	r5,r5,4
   160e0:	30c0052e 	bgeu	r6,r3,160f8 <__copybits+0x44>
   160e4:	30800017 	ldw	r2,0(r6)
   160e8:	31800104 	addi	r6,r6,4
   160ec:	20800015 	stw	r2,0(r4)
   160f0:	21000104 	addi	r4,r4,4
   160f4:	30fffb36 	bltu	r6,r3,160e4 <__copybits+0x30>
   160f8:	2140032e 	bgeu	r4,r5,16108 <__copybits+0x54>
   160fc:	20000015 	stw	zero,0(r4)
   16100:	21000104 	addi	r4,r4,4
   16104:	217ffd36 	bltu	r4,r5,160fc <__copybits+0x48>
   16108:	f800283a 	ret

0001610c <__any_on>:
   1610c:	20800417 	ldw	r2,16(r4)
   16110:	2807d17a 	srai	r3,r5,5
   16114:	21000504 	addi	r4,r4,20
   16118:	10c00d0e 	bge	r2,r3,16150 <__any_on+0x44>
   1611c:	1085883a 	add	r2,r2,r2
   16120:	1085883a 	add	r2,r2,r2
   16124:	208d883a 	add	r6,r4,r2
   16128:	2180182e 	bgeu	r4,r6,1618c <__any_on+0x80>
   1612c:	30bfff17 	ldw	r2,-4(r6)
   16130:	30ffff04 	addi	r3,r6,-4
   16134:	1000041e 	bne	r2,zero,16148 <__any_on+0x3c>
   16138:	20c0142e 	bgeu	r4,r3,1618c <__any_on+0x80>
   1613c:	18ffff04 	addi	r3,r3,-4
   16140:	18800017 	ldw	r2,0(r3)
   16144:	103ffc26 	beq	r2,zero,16138 <__any_on+0x2c>
   16148:	00800044 	movi	r2,1
   1614c:	f800283a 	ret
   16150:	18800a0e 	bge	r3,r2,1617c <__any_on+0x70>
   16154:	294007cc 	andi	r5,r5,31
   16158:	28000826 	beq	r5,zero,1617c <__any_on+0x70>
   1615c:	18c5883a 	add	r2,r3,r3
   16160:	1085883a 	add	r2,r2,r2
   16164:	208d883a 	add	r6,r4,r2
   16168:	30c00017 	ldw	r3,0(r6)
   1616c:	1944d83a 	srl	r2,r3,r5
   16170:	1144983a 	sll	r2,r2,r5
   16174:	18bff41e 	bne	r3,r2,16148 <__any_on+0x3c>
   16178:	003feb06 	br	16128 <__any_on+0x1c>
   1617c:	18c5883a 	add	r2,r3,r3
   16180:	1085883a 	add	r2,r2,r2
   16184:	208d883a 	add	r6,r4,r2
   16188:	003fe706 	br	16128 <__any_on+0x1c>
   1618c:	0005883a 	mov	r2,zero
   16190:	f800283a 	ret

00016194 <_Balloc>:
   16194:	20c01317 	ldw	r3,76(r4)
   16198:	defffb04 	addi	sp,sp,-20
   1619c:	dcc00315 	stw	r19,12(sp)
   161a0:	dc800215 	stw	r18,8(sp)
   161a4:	dfc00415 	stw	ra,16(sp)
   161a8:	2825883a 	mov	r18,r5
   161ac:	dc400115 	stw	r17,4(sp)
   161b0:	dc000015 	stw	r16,0(sp)
   161b4:	2027883a 	mov	r19,r4
   161b8:	01800404 	movi	r6,16
   161bc:	01400104 	movi	r5,4
   161c0:	18001726 	beq	r3,zero,16220 <_Balloc+0x8c>
   161c4:	01400044 	movi	r5,1
   161c8:	9485883a 	add	r2,r18,r18
   161cc:	2ca2983a 	sll	r17,r5,r18
   161d0:	1085883a 	add	r2,r2,r2
   161d4:	10c7883a 	add	r3,r2,r3
   161d8:	1c000017 	ldw	r16,0(r3)
   161dc:	8c4d883a 	add	r6,r17,r17
   161e0:	318d883a 	add	r6,r6,r6
   161e4:	9809883a 	mov	r4,r19
   161e8:	31800504 	addi	r6,r6,20
   161ec:	80001226 	beq	r16,zero,16238 <_Balloc+0xa4>
   161f0:	80800017 	ldw	r2,0(r16)
   161f4:	18800015 	stw	r2,0(r3)
   161f8:	80000415 	stw	zero,16(r16)
   161fc:	80000315 	stw	zero,12(r16)
   16200:	8005883a 	mov	r2,r16
   16204:	dfc00417 	ldw	ra,16(sp)
   16208:	dcc00317 	ldw	r19,12(sp)
   1620c:	dc800217 	ldw	r18,8(sp)
   16210:	dc400117 	ldw	r17,4(sp)
   16214:	dc000017 	ldw	r16,0(sp)
   16218:	dec00504 	addi	sp,sp,20
   1621c:	f800283a 	ret
   16220:	001755c0 	call	1755c <_calloc_r>
   16224:	1007883a 	mov	r3,r2
   16228:	0021883a 	mov	r16,zero
   1622c:	98801315 	stw	r2,76(r19)
   16230:	103fe41e 	bne	r2,zero,161c4 <_Balloc+0x30>
   16234:	003ff206 	br	16200 <_Balloc+0x6c>
   16238:	001755c0 	call	1755c <_calloc_r>
   1623c:	103ff026 	beq	r2,zero,16200 <_Balloc+0x6c>
   16240:	1021883a 	mov	r16,r2
   16244:	14800115 	stw	r18,4(r2)
   16248:	14400215 	stw	r17,8(r2)
   1624c:	003fea06 	br	161f8 <_Balloc+0x64>

00016250 <__d2b>:
   16250:	defff504 	addi	sp,sp,-44
   16254:	dcc00515 	stw	r19,20(sp)
   16258:	04c00044 	movi	r19,1
   1625c:	dc000215 	stw	r16,8(sp)
   16260:	2821883a 	mov	r16,r5
   16264:	980b883a 	mov	r5,r19
   16268:	ddc00915 	stw	r23,36(sp)
   1626c:	dd800815 	stw	r22,32(sp)
   16270:	dd400715 	stw	r21,28(sp)
   16274:	dd000615 	stw	r20,24(sp)
   16278:	dc800415 	stw	r18,16(sp)
   1627c:	dc400315 	stw	r17,12(sp)
   16280:	dfc00a15 	stw	ra,40(sp)
   16284:	3023883a 	mov	r17,r6
   16288:	382d883a 	mov	r22,r7
   1628c:	ddc00b17 	ldw	r23,44(sp)
   16290:	00161940 	call	16194 <_Balloc>
   16294:	1025883a 	mov	r18,r2
   16298:	00a00034 	movhi	r2,32768
   1629c:	10bfffc4 	addi	r2,r2,-1
   162a0:	8888703a 	and	r4,r17,r2
   162a4:	202ad53a 	srli	r21,r4,20
   162a8:	00800434 	movhi	r2,16
   162ac:	10bfffc4 	addi	r2,r2,-1
   162b0:	8886703a 	and	r3,r17,r2
   162b4:	a829003a 	cmpeq	r20,r21,zero
   162b8:	800b883a 	mov	r5,r16
   162bc:	d8c00115 	stw	r3,4(sp)
   162c0:	94000504 	addi	r16,r18,20
   162c4:	a000021e 	bne	r20,zero,162d0 <__d2b+0x80>
   162c8:	18c00434 	orhi	r3,r3,16
   162cc:	d8c00115 	stw	r3,4(sp)
   162d0:	28002726 	beq	r5,zero,16370 <__d2b+0x120>
   162d4:	d809883a 	mov	r4,sp
   162d8:	d9400015 	stw	r5,0(sp)
   162dc:	0015cac0 	call	15cac <__lo0bits>
   162e0:	100d883a 	mov	r6,r2
   162e4:	10003526 	beq	r2,zero,163bc <__d2b+0x16c>
   162e8:	d8c00117 	ldw	r3,4(sp)
   162ec:	00800804 	movi	r2,32
   162f0:	1185c83a 	sub	r2,r2,r6
   162f4:	d9000017 	ldw	r4,0(sp)
   162f8:	1886983a 	sll	r3,r3,r2
   162fc:	1906b03a 	or	r3,r3,r4
   16300:	90c00515 	stw	r3,20(r18)
   16304:	d8c00117 	ldw	r3,4(sp)
   16308:	1986d83a 	srl	r3,r3,r6
   1630c:	d8c00115 	stw	r3,4(sp)
   16310:	180b003a 	cmpeq	r5,r3,zero
   16314:	00800084 	movi	r2,2
   16318:	114bc83a 	sub	r5,r2,r5
   1631c:	80c00115 	stw	r3,4(r16)
   16320:	91400415 	stw	r5,16(r18)
   16324:	a0001a1e 	bne	r20,zero,16390 <__d2b+0x140>
   16328:	3545883a 	add	r2,r6,r21
   1632c:	10bef344 	addi	r2,r2,-1075
   16330:	00c00d44 	movi	r3,53
   16334:	b0800015 	stw	r2,0(r22)
   16338:	1987c83a 	sub	r3,r3,r6
   1633c:	b8c00015 	stw	r3,0(r23)
   16340:	9005883a 	mov	r2,r18
   16344:	dfc00a17 	ldw	ra,40(sp)
   16348:	ddc00917 	ldw	r23,36(sp)
   1634c:	dd800817 	ldw	r22,32(sp)
   16350:	dd400717 	ldw	r21,28(sp)
   16354:	dd000617 	ldw	r20,24(sp)
   16358:	dcc00517 	ldw	r19,20(sp)
   1635c:	dc800417 	ldw	r18,16(sp)
   16360:	dc400317 	ldw	r17,12(sp)
   16364:	dc000217 	ldw	r16,8(sp)
   16368:	dec00b04 	addi	sp,sp,44
   1636c:	f800283a 	ret
   16370:	d9000104 	addi	r4,sp,4
   16374:	0015cac0 	call	15cac <__lo0bits>
   16378:	11800804 	addi	r6,r2,32
   1637c:	d8800117 	ldw	r2,4(sp)
   16380:	94c00415 	stw	r19,16(r18)
   16384:	980b883a 	mov	r5,r19
   16388:	90800515 	stw	r2,20(r18)
   1638c:	a03fe626 	beq	r20,zero,16328 <__d2b+0xd8>
   16390:	2945883a 	add	r2,r5,r5
   16394:	1085883a 	add	r2,r2,r2
   16398:	1405883a 	add	r2,r2,r16
   1639c:	113fff17 	ldw	r4,-4(r2)
   163a0:	30fef384 	addi	r3,r6,-1074
   163a4:	2820917a 	slli	r16,r5,5
   163a8:	b0c00015 	stw	r3,0(r22)
   163ac:	0015c3c0 	call	15c3c <__hi0bits>
   163b0:	80a1c83a 	sub	r16,r16,r2
   163b4:	bc000015 	stw	r16,0(r23)
   163b8:	003fe106 	br	16340 <__d2b+0xf0>
   163bc:	d8800017 	ldw	r2,0(sp)
   163c0:	90800515 	stw	r2,20(r18)
   163c4:	d8c00117 	ldw	r3,4(sp)
   163c8:	003fd106 	br	16310 <__d2b+0xc0>

000163cc <__mdiff>:
   163cc:	defffb04 	addi	sp,sp,-20
   163d0:	dc000015 	stw	r16,0(sp)
   163d4:	2821883a 	mov	r16,r5
   163d8:	dc800215 	stw	r18,8(sp)
   163dc:	300b883a 	mov	r5,r6
   163e0:	2025883a 	mov	r18,r4
   163e4:	8009883a 	mov	r4,r16
   163e8:	dc400115 	stw	r17,4(sp)
   163ec:	dfc00415 	stw	ra,16(sp)
   163f0:	dcc00315 	stw	r19,12(sp)
   163f4:	3023883a 	mov	r17,r6
   163f8:	0015d700 	call	15d70 <__mcmp>
   163fc:	10004226 	beq	r2,zero,16508 <__mdiff+0x13c>
   16400:	10005016 	blt	r2,zero,16544 <__mdiff+0x178>
   16404:	0027883a 	mov	r19,zero
   16408:	81400117 	ldw	r5,4(r16)
   1640c:	9009883a 	mov	r4,r18
   16410:	00161940 	call	16194 <_Balloc>
   16414:	1019883a 	mov	r12,r2
   16418:	82800417 	ldw	r10,16(r16)
   1641c:	88800417 	ldw	r2,16(r17)
   16420:	81800504 	addi	r6,r16,20
   16424:	5287883a 	add	r3,r10,r10
   16428:	1085883a 	add	r2,r2,r2
   1642c:	18c7883a 	add	r3,r3,r3
   16430:	1085883a 	add	r2,r2,r2
   16434:	8a000504 	addi	r8,r17,20
   16438:	64c00315 	stw	r19,12(r12)
   1643c:	30db883a 	add	r13,r6,r3
   16440:	4097883a 	add	r11,r8,r2
   16444:	61c00504 	addi	r7,r12,20
   16448:	0013883a 	mov	r9,zero
   1644c:	31000017 	ldw	r4,0(r6)
   16450:	41400017 	ldw	r5,0(r8)
   16454:	42000104 	addi	r8,r8,4
   16458:	20bfffcc 	andi	r2,r4,65535
   1645c:	28ffffcc 	andi	r3,r5,65535
   16460:	10c5c83a 	sub	r2,r2,r3
   16464:	1245883a 	add	r2,r2,r9
   16468:	2008d43a 	srli	r4,r4,16
   1646c:	280ad43a 	srli	r5,r5,16
   16470:	1007d43a 	srai	r3,r2,16
   16474:	3880000d 	sth	r2,0(r7)
   16478:	2149c83a 	sub	r4,r4,r5
   1647c:	20c9883a 	add	r4,r4,r3
   16480:	3900008d 	sth	r4,2(r7)
   16484:	31800104 	addi	r6,r6,4
   16488:	39c00104 	addi	r7,r7,4
   1648c:	2013d43a 	srai	r9,r4,16
   16490:	42ffee36 	bltu	r8,r11,1644c <__mdiff+0x80>
   16494:	33400c2e 	bgeu	r6,r13,164c8 <__mdiff+0xfc>
   16498:	30800017 	ldw	r2,0(r6)
   1649c:	31800104 	addi	r6,r6,4
   164a0:	10ffffcc 	andi	r3,r2,65535
   164a4:	1a47883a 	add	r3,r3,r9
   164a8:	1004d43a 	srli	r2,r2,16
   164ac:	1809d43a 	srai	r4,r3,16
   164b0:	38c0000d 	sth	r3,0(r7)
   164b4:	1105883a 	add	r2,r2,r4
   164b8:	3880008d 	sth	r2,2(r7)
   164bc:	1013d43a 	srai	r9,r2,16
   164c0:	39c00104 	addi	r7,r7,4
   164c4:	337ff436 	bltu	r6,r13,16498 <__mdiff+0xcc>
   164c8:	38bfff17 	ldw	r2,-4(r7)
   164cc:	38ffff04 	addi	r3,r7,-4
   164d0:	1000041e 	bne	r2,zero,164e4 <__mdiff+0x118>
   164d4:	18ffff04 	addi	r3,r3,-4
   164d8:	18800017 	ldw	r2,0(r3)
   164dc:	52bfffc4 	addi	r10,r10,-1
   164e0:	103ffc26 	beq	r2,zero,164d4 <__mdiff+0x108>
   164e4:	6005883a 	mov	r2,r12
   164e8:	62800415 	stw	r10,16(r12)
   164ec:	dfc00417 	ldw	ra,16(sp)
   164f0:	dcc00317 	ldw	r19,12(sp)
   164f4:	dc800217 	ldw	r18,8(sp)
   164f8:	dc400117 	ldw	r17,4(sp)
   164fc:	dc000017 	ldw	r16,0(sp)
   16500:	dec00504 	addi	sp,sp,20
   16504:	f800283a 	ret
   16508:	9009883a 	mov	r4,r18
   1650c:	000b883a 	mov	r5,zero
   16510:	00161940 	call	16194 <_Balloc>
   16514:	1019883a 	mov	r12,r2
   16518:	00800044 	movi	r2,1
   1651c:	60800415 	stw	r2,16(r12)
   16520:	6005883a 	mov	r2,r12
   16524:	60000515 	stw	zero,20(r12)
   16528:	dfc00417 	ldw	ra,16(sp)
   1652c:	dcc00317 	ldw	r19,12(sp)
   16530:	dc800217 	ldw	r18,8(sp)
   16534:	dc400117 	ldw	r17,4(sp)
   16538:	dc000017 	ldw	r16,0(sp)
   1653c:	dec00504 	addi	sp,sp,20
   16540:	f800283a 	ret
   16544:	880d883a 	mov	r6,r17
   16548:	04c00044 	movi	r19,1
   1654c:	8023883a 	mov	r17,r16
   16550:	3021883a 	mov	r16,r6
   16554:	003fac06 	br	16408 <__mdiff+0x3c>

00016558 <__lshift>:
   16558:	defff904 	addi	sp,sp,-28
   1655c:	28800417 	ldw	r2,16(r5)
   16560:	dc000015 	stw	r16,0(sp)
   16564:	3021d17a 	srai	r16,r6,5
   16568:	28c00217 	ldw	r3,8(r5)
   1656c:	10800044 	addi	r2,r2,1
   16570:	dc400115 	stw	r17,4(sp)
   16574:	80a3883a 	add	r17,r16,r2
   16578:	dd400515 	stw	r21,20(sp)
   1657c:	dd000415 	stw	r20,16(sp)
   16580:	dc800215 	stw	r18,8(sp)
   16584:	dfc00615 	stw	ra,24(sp)
   16588:	2825883a 	mov	r18,r5
   1658c:	dcc00315 	stw	r19,12(sp)
   16590:	3029883a 	mov	r20,r6
   16594:	202b883a 	mov	r21,r4
   16598:	29400117 	ldw	r5,4(r5)
   1659c:	1c40030e 	bge	r3,r17,165ac <__lshift+0x54>
   165a0:	18c7883a 	add	r3,r3,r3
   165a4:	29400044 	addi	r5,r5,1
   165a8:	1c7ffd16 	blt	r3,r17,165a0 <__lshift+0x48>
   165ac:	a809883a 	mov	r4,r21
   165b0:	00161940 	call	16194 <_Balloc>
   165b4:	1027883a 	mov	r19,r2
   165b8:	11400504 	addi	r5,r2,20
   165bc:	0400090e 	bge	zero,r16,165e4 <__lshift+0x8c>
   165c0:	2805883a 	mov	r2,r5
   165c4:	0007883a 	mov	r3,zero
   165c8:	18c00044 	addi	r3,r3,1
   165cc:	10000015 	stw	zero,0(r2)
   165d0:	10800104 	addi	r2,r2,4
   165d4:	80fffc1e 	bne	r16,r3,165c8 <__lshift+0x70>
   165d8:	8405883a 	add	r2,r16,r16
   165dc:	1085883a 	add	r2,r2,r2
   165e0:	288b883a 	add	r5,r5,r2
   165e4:	90800417 	ldw	r2,16(r18)
   165e8:	91000504 	addi	r4,r18,20
   165ec:	a18007cc 	andi	r6,r20,31
   165f0:	1085883a 	add	r2,r2,r2
   165f4:	1085883a 	add	r2,r2,r2
   165f8:	208f883a 	add	r7,r4,r2
   165fc:	30001e26 	beq	r6,zero,16678 <__lshift+0x120>
   16600:	00800804 	movi	r2,32
   16604:	1191c83a 	sub	r8,r2,r6
   16608:	0007883a 	mov	r3,zero
   1660c:	20800017 	ldw	r2,0(r4)
   16610:	1184983a 	sll	r2,r2,r6
   16614:	1884b03a 	or	r2,r3,r2
   16618:	28800015 	stw	r2,0(r5)
   1661c:	20c00017 	ldw	r3,0(r4)
   16620:	21000104 	addi	r4,r4,4
   16624:	29400104 	addi	r5,r5,4
   16628:	1a06d83a 	srl	r3,r3,r8
   1662c:	21fff736 	bltu	r4,r7,1660c <__lshift+0xb4>
   16630:	28c00015 	stw	r3,0(r5)
   16634:	18000126 	beq	r3,zero,1663c <__lshift+0xe4>
   16638:	8c400044 	addi	r17,r17,1
   1663c:	88bfffc4 	addi	r2,r17,-1
   16640:	98800415 	stw	r2,16(r19)
   16644:	a809883a 	mov	r4,r21
   16648:	900b883a 	mov	r5,r18
   1664c:	0015c140 	call	15c14 <_Bfree>
   16650:	9805883a 	mov	r2,r19
   16654:	dfc00617 	ldw	ra,24(sp)
   16658:	dd400517 	ldw	r21,20(sp)
   1665c:	dd000417 	ldw	r20,16(sp)
   16660:	dcc00317 	ldw	r19,12(sp)
   16664:	dc800217 	ldw	r18,8(sp)
   16668:	dc400117 	ldw	r17,4(sp)
   1666c:	dc000017 	ldw	r16,0(sp)
   16670:	dec00704 	addi	sp,sp,28
   16674:	f800283a 	ret
   16678:	20800017 	ldw	r2,0(r4)
   1667c:	21000104 	addi	r4,r4,4
   16680:	28800015 	stw	r2,0(r5)
   16684:	29400104 	addi	r5,r5,4
   16688:	21ffec2e 	bgeu	r4,r7,1663c <__lshift+0xe4>
   1668c:	20800017 	ldw	r2,0(r4)
   16690:	21000104 	addi	r4,r4,4
   16694:	28800015 	stw	r2,0(r5)
   16698:	29400104 	addi	r5,r5,4
   1669c:	21fff636 	bltu	r4,r7,16678 <__lshift+0x120>
   166a0:	003fe606 	br	1663c <__lshift+0xe4>

000166a4 <__multiply>:
   166a4:	defff904 	addi	sp,sp,-28
   166a8:	dcc00315 	stw	r19,12(sp)
   166ac:	dc800215 	stw	r18,8(sp)
   166b0:	2cc00417 	ldw	r19,16(r5)
   166b4:	34800417 	ldw	r18,16(r6)
   166b8:	dd000415 	stw	r20,16(sp)
   166bc:	dc400115 	stw	r17,4(sp)
   166c0:	dfc00615 	stw	ra,24(sp)
   166c4:	dd400515 	stw	r21,20(sp)
   166c8:	dc000015 	stw	r16,0(sp)
   166cc:	2823883a 	mov	r17,r5
   166d0:	3029883a 	mov	r20,r6
   166d4:	9c80040e 	bge	r19,r18,166e8 <__multiply+0x44>
   166d8:	9027883a 	mov	r19,r18
   166dc:	2c800417 	ldw	r18,16(r5)
   166e0:	2829883a 	mov	r20,r5
   166e4:	3023883a 	mov	r17,r6
   166e8:	88800217 	ldw	r2,8(r17)
   166ec:	9ca1883a 	add	r16,r19,r18
   166f0:	89400117 	ldw	r5,4(r17)
   166f4:	1400010e 	bge	r2,r16,166fc <__multiply+0x58>
   166f8:	29400044 	addi	r5,r5,1
   166fc:	00161940 	call	16194 <_Balloc>
   16700:	102b883a 	mov	r21,r2
   16704:	8405883a 	add	r2,r16,r16
   16708:	1085883a 	add	r2,r2,r2
   1670c:	a9000504 	addi	r4,r21,20
   16710:	209d883a 	add	r14,r4,r2
   16714:	2380042e 	bgeu	r4,r14,16728 <__multiply+0x84>
   16718:	2005883a 	mov	r2,r4
   1671c:	10000015 	stw	zero,0(r2)
   16720:	10800104 	addi	r2,r2,4
   16724:	13bffd36 	bltu	r2,r14,1671c <__multiply+0x78>
   16728:	9485883a 	add	r2,r18,r18
   1672c:	9cc7883a 	add	r3,r19,r19
   16730:	a1800504 	addi	r6,r20,20
   16734:	1085883a 	add	r2,r2,r2
   16738:	8b400504 	addi	r13,r17,20
   1673c:	18c7883a 	add	r3,r3,r3
   16740:	309f883a 	add	r15,r6,r2
   16744:	68d7883a 	add	r11,r13,r3
   16748:	33c03b2e 	bgeu	r6,r15,16838 <__multiply+0x194>
   1674c:	2019883a 	mov	r12,r4
   16750:	30800017 	ldw	r2,0(r6)
   16754:	127fffcc 	andi	r9,r2,65535
   16758:	48001826 	beq	r9,zero,167bc <__multiply+0x118>
   1675c:	6811883a 	mov	r8,r13
   16760:	600f883a 	mov	r7,r12
   16764:	0015883a 	mov	r10,zero
   16768:	40c00017 	ldw	r3,0(r8)
   1676c:	39400017 	ldw	r5,0(r7)
   16770:	42000104 	addi	r8,r8,4
   16774:	193fffcc 	andi	r4,r3,65535
   16778:	4909383a 	mul	r4,r9,r4
   1677c:	1806d43a 	srli	r3,r3,16
   16780:	28bfffcc 	andi	r2,r5,65535
   16784:	5085883a 	add	r2,r10,r2
   16788:	2089883a 	add	r4,r4,r2
   1678c:	48c7383a 	mul	r3,r9,r3
   16790:	280ad43a 	srli	r5,r5,16
   16794:	2004d43a 	srli	r2,r4,16
   16798:	3900000d 	sth	r4,0(r7)
   1679c:	1947883a 	add	r3,r3,r5
   167a0:	10c5883a 	add	r2,r2,r3
   167a4:	3880008d 	sth	r2,2(r7)
   167a8:	1014d43a 	srli	r10,r2,16
   167ac:	39c00104 	addi	r7,r7,4
   167b0:	42ffed36 	bltu	r8,r11,16768 <__multiply+0xc4>
   167b4:	3a800015 	stw	r10,0(r7)
   167b8:	30800017 	ldw	r2,0(r6)
   167bc:	1012d43a 	srli	r9,r2,16
   167c0:	48001926 	beq	r9,zero,16828 <__multiply+0x184>
   167c4:	60800017 	ldw	r2,0(r12)
   167c8:	6811883a 	mov	r8,r13
   167cc:	600f883a 	mov	r7,r12
   167d0:	0015883a 	mov	r10,zero
   167d4:	100b883a 	mov	r5,r2
   167d8:	41000017 	ldw	r4,0(r8)
   167dc:	2806d43a 	srli	r3,r5,16
   167e0:	3880000d 	sth	r2,0(r7)
   167e4:	20bfffcc 	andi	r2,r4,65535
   167e8:	4885383a 	mul	r2,r9,r2
   167ec:	50c7883a 	add	r3,r10,r3
   167f0:	2008d43a 	srli	r4,r4,16
   167f4:	10c5883a 	add	r2,r2,r3
   167f8:	3880008d 	sth	r2,2(r7)
   167fc:	39c00104 	addi	r7,r7,4
   16800:	39400017 	ldw	r5,0(r7)
   16804:	4909383a 	mul	r4,r9,r4
   16808:	1004d43a 	srli	r2,r2,16
   1680c:	28ffffcc 	andi	r3,r5,65535
   16810:	20c9883a 	add	r4,r4,r3
   16814:	1105883a 	add	r2,r2,r4
   16818:	42000104 	addi	r8,r8,4
   1681c:	1014d43a 	srli	r10,r2,16
   16820:	42ffed36 	bltu	r8,r11,167d8 <__multiply+0x134>
   16824:	38800015 	stw	r2,0(r7)
   16828:	31800104 	addi	r6,r6,4
   1682c:	33c0022e 	bgeu	r6,r15,16838 <__multiply+0x194>
   16830:	63000104 	addi	r12,r12,4
   16834:	003fc606 	br	16750 <__multiply+0xac>
   16838:	0400090e 	bge	zero,r16,16860 <__multiply+0x1bc>
   1683c:	70bfff17 	ldw	r2,-4(r14)
   16840:	70ffff04 	addi	r3,r14,-4
   16844:	10000326 	beq	r2,zero,16854 <__multiply+0x1b0>
   16848:	00000506 	br	16860 <__multiply+0x1bc>
   1684c:	18800017 	ldw	r2,0(r3)
   16850:	1000031e 	bne	r2,zero,16860 <__multiply+0x1bc>
   16854:	843fffc4 	addi	r16,r16,-1
   16858:	18ffff04 	addi	r3,r3,-4
   1685c:	803ffb1e 	bne	r16,zero,1684c <__multiply+0x1a8>
   16860:	a805883a 	mov	r2,r21
   16864:	ac000415 	stw	r16,16(r21)
   16868:	dfc00617 	ldw	ra,24(sp)
   1686c:	dd400517 	ldw	r21,20(sp)
   16870:	dd000417 	ldw	r20,16(sp)
   16874:	dcc00317 	ldw	r19,12(sp)
   16878:	dc800217 	ldw	r18,8(sp)
   1687c:	dc400117 	ldw	r17,4(sp)
   16880:	dc000017 	ldw	r16,0(sp)
   16884:	dec00704 	addi	sp,sp,28
   16888:	f800283a 	ret

0001688c <__i2b>:
   1688c:	defffd04 	addi	sp,sp,-12
   16890:	dc000015 	stw	r16,0(sp)
   16894:	04000044 	movi	r16,1
   16898:	dc800115 	stw	r18,4(sp)
   1689c:	2825883a 	mov	r18,r5
   168a0:	800b883a 	mov	r5,r16
   168a4:	dfc00215 	stw	ra,8(sp)
   168a8:	00161940 	call	16194 <_Balloc>
   168ac:	14000415 	stw	r16,16(r2)
   168b0:	14800515 	stw	r18,20(r2)
   168b4:	dfc00217 	ldw	ra,8(sp)
   168b8:	dc800117 	ldw	r18,4(sp)
   168bc:	dc000017 	ldw	r16,0(sp)
   168c0:	dec00304 	addi	sp,sp,12
   168c4:	f800283a 	ret

000168c8 <__multadd>:
   168c8:	defffa04 	addi	sp,sp,-24
   168cc:	dc800215 	stw	r18,8(sp)
   168d0:	2c800417 	ldw	r18,16(r5)
   168d4:	dd000415 	stw	r20,16(sp)
   168d8:	dcc00315 	stw	r19,12(sp)
   168dc:	dc000015 	stw	r16,0(sp)
   168e0:	dfc00515 	stw	ra,20(sp)
   168e4:	3821883a 	mov	r16,r7
   168e8:	dc400115 	stw	r17,4(sp)
   168ec:	2827883a 	mov	r19,r5
   168f0:	2029883a 	mov	r20,r4
   168f4:	2a000504 	addi	r8,r5,20
   168f8:	000f883a 	mov	r7,zero
   168fc:	40800017 	ldw	r2,0(r8)
   16900:	39c00044 	addi	r7,r7,1
   16904:	10ffffcc 	andi	r3,r2,65535
   16908:	1987383a 	mul	r3,r3,r6
   1690c:	1004d43a 	srli	r2,r2,16
   16910:	1c07883a 	add	r3,r3,r16
   16914:	180ad43a 	srli	r5,r3,16
   16918:	1185383a 	mul	r2,r2,r6
   1691c:	18ffffcc 	andi	r3,r3,65535
   16920:	1145883a 	add	r2,r2,r5
   16924:	1008943a 	slli	r4,r2,16
   16928:	1020d43a 	srli	r16,r2,16
   1692c:	20c9883a 	add	r4,r4,r3
   16930:	41000015 	stw	r4,0(r8)
   16934:	42000104 	addi	r8,r8,4
   16938:	3cbff016 	blt	r7,r18,168fc <__multadd+0x34>
   1693c:	80000826 	beq	r16,zero,16960 <__multadd+0x98>
   16940:	98800217 	ldw	r2,8(r19)
   16944:	90800f0e 	bge	r18,r2,16984 <__multadd+0xbc>
   16948:	9485883a 	add	r2,r18,r18
   1694c:	1085883a 	add	r2,r2,r2
   16950:	14c5883a 	add	r2,r2,r19
   16954:	90c00044 	addi	r3,r18,1
   16958:	14000515 	stw	r16,20(r2)
   1695c:	98c00415 	stw	r3,16(r19)
   16960:	9805883a 	mov	r2,r19
   16964:	dfc00517 	ldw	ra,20(sp)
   16968:	dd000417 	ldw	r20,16(sp)
   1696c:	dcc00317 	ldw	r19,12(sp)
   16970:	dc800217 	ldw	r18,8(sp)
   16974:	dc400117 	ldw	r17,4(sp)
   16978:	dc000017 	ldw	r16,0(sp)
   1697c:	dec00604 	addi	sp,sp,24
   16980:	f800283a 	ret
   16984:	99400117 	ldw	r5,4(r19)
   16988:	a009883a 	mov	r4,r20
   1698c:	29400044 	addi	r5,r5,1
   16990:	00161940 	call	16194 <_Balloc>
   16994:	99800417 	ldw	r6,16(r19)
   16998:	99400304 	addi	r5,r19,12
   1699c:	11000304 	addi	r4,r2,12
   169a0:	318d883a 	add	r6,r6,r6
   169a4:	318d883a 	add	r6,r6,r6
   169a8:	31800204 	addi	r6,r6,8
   169ac:	1023883a 	mov	r17,r2
   169b0:	00159fc0 	call	159fc <memcpy>
   169b4:	980b883a 	mov	r5,r19
   169b8:	a009883a 	mov	r4,r20
   169bc:	0015c140 	call	15c14 <_Bfree>
   169c0:	8827883a 	mov	r19,r17
   169c4:	003fe006 	br	16948 <__multadd+0x80>

000169c8 <__pow5mult>:
   169c8:	defffa04 	addi	sp,sp,-24
   169cc:	308000cc 	andi	r2,r6,3
   169d0:	dd000415 	stw	r20,16(sp)
   169d4:	dcc00315 	stw	r19,12(sp)
   169d8:	dc000015 	stw	r16,0(sp)
   169dc:	dfc00515 	stw	ra,20(sp)
   169e0:	dc800215 	stw	r18,8(sp)
   169e4:	dc400115 	stw	r17,4(sp)
   169e8:	3021883a 	mov	r16,r6
   169ec:	2027883a 	mov	r19,r4
   169f0:	2829883a 	mov	r20,r5
   169f4:	10002b1e 	bne	r2,zero,16aa4 <__pow5mult+0xdc>
   169f8:	8025d0ba 	srai	r18,r16,2
   169fc:	90001b26 	beq	r18,zero,16a6c <__pow5mult+0xa4>
   16a00:	9c001217 	ldw	r16,72(r19)
   16a04:	8000081e 	bne	r16,zero,16a28 <__pow5mult+0x60>
   16a08:	00003006 	br	16acc <__pow5mult+0x104>
   16a0c:	800b883a 	mov	r5,r16
   16a10:	800d883a 	mov	r6,r16
   16a14:	9809883a 	mov	r4,r19
   16a18:	90001426 	beq	r18,zero,16a6c <__pow5mult+0xa4>
   16a1c:	80800017 	ldw	r2,0(r16)
   16a20:	10001b26 	beq	r2,zero,16a90 <__pow5mult+0xc8>
   16a24:	1021883a 	mov	r16,r2
   16a28:	9080004c 	andi	r2,r18,1
   16a2c:	1005003a 	cmpeq	r2,r2,zero
   16a30:	9025d07a 	srai	r18,r18,1
   16a34:	800d883a 	mov	r6,r16
   16a38:	9809883a 	mov	r4,r19
   16a3c:	a00b883a 	mov	r5,r20
   16a40:	103ff21e 	bne	r2,zero,16a0c <__pow5mult+0x44>
   16a44:	00166a40 	call	166a4 <__multiply>
   16a48:	a00b883a 	mov	r5,r20
   16a4c:	9809883a 	mov	r4,r19
   16a50:	1023883a 	mov	r17,r2
   16a54:	0015c140 	call	15c14 <_Bfree>
   16a58:	8829883a 	mov	r20,r17
   16a5c:	800b883a 	mov	r5,r16
   16a60:	800d883a 	mov	r6,r16
   16a64:	9809883a 	mov	r4,r19
   16a68:	903fec1e 	bne	r18,zero,16a1c <__pow5mult+0x54>
   16a6c:	a005883a 	mov	r2,r20
   16a70:	dfc00517 	ldw	ra,20(sp)
   16a74:	dd000417 	ldw	r20,16(sp)
   16a78:	dcc00317 	ldw	r19,12(sp)
   16a7c:	dc800217 	ldw	r18,8(sp)
   16a80:	dc400117 	ldw	r17,4(sp)
   16a84:	dc000017 	ldw	r16,0(sp)
   16a88:	dec00604 	addi	sp,sp,24
   16a8c:	f800283a 	ret
   16a90:	00166a40 	call	166a4 <__multiply>
   16a94:	80800015 	stw	r2,0(r16)
   16a98:	1021883a 	mov	r16,r2
   16a9c:	10000015 	stw	zero,0(r2)
   16aa0:	003fe106 	br	16a28 <__pow5mult+0x60>
   16aa4:	1085883a 	add	r2,r2,r2
   16aa8:	00c000f4 	movhi	r3,3
   16aac:	18e09804 	addi	r3,r3,-32160
   16ab0:	1085883a 	add	r2,r2,r2
   16ab4:	10c5883a 	add	r2,r2,r3
   16ab8:	11bfff17 	ldw	r6,-4(r2)
   16abc:	000f883a 	mov	r7,zero
   16ac0:	00168c80 	call	168c8 <__multadd>
   16ac4:	1029883a 	mov	r20,r2
   16ac8:	003fcb06 	br	169f8 <__pow5mult+0x30>
   16acc:	9809883a 	mov	r4,r19
   16ad0:	01409c44 	movi	r5,625
   16ad4:	001688c0 	call	1688c <__i2b>
   16ad8:	98801215 	stw	r2,72(r19)
   16adc:	1021883a 	mov	r16,r2
   16ae0:	10000015 	stw	zero,0(r2)
   16ae4:	003fd006 	br	16a28 <__pow5mult+0x60>

00016ae8 <__s2b>:
   16ae8:	defff904 	addi	sp,sp,-28
   16aec:	dcc00315 	stw	r19,12(sp)
   16af0:	dc800215 	stw	r18,8(sp)
   16af4:	2827883a 	mov	r19,r5
   16af8:	2025883a 	mov	r18,r4
   16afc:	01400244 	movi	r5,9
   16b00:	39000204 	addi	r4,r7,8
   16b04:	dd000415 	stw	r20,16(sp)
   16b08:	dc400115 	stw	r17,4(sp)
   16b0c:	dfc00615 	stw	ra,24(sp)
   16b10:	dd400515 	stw	r21,20(sp)
   16b14:	dc000015 	stw	r16,0(sp)
   16b18:	3829883a 	mov	r20,r7
   16b1c:	3023883a 	mov	r17,r6
   16b20:	00196ac0 	call	196ac <__divsi3>
   16b24:	00c00044 	movi	r3,1
   16b28:	1880350e 	bge	r3,r2,16c00 <__s2b+0x118>
   16b2c:	000b883a 	mov	r5,zero
   16b30:	18c7883a 	add	r3,r3,r3
   16b34:	29400044 	addi	r5,r5,1
   16b38:	18bffd16 	blt	r3,r2,16b30 <__s2b+0x48>
   16b3c:	9009883a 	mov	r4,r18
   16b40:	00161940 	call	16194 <_Balloc>
   16b44:	1011883a 	mov	r8,r2
   16b48:	d8800717 	ldw	r2,28(sp)
   16b4c:	00c00044 	movi	r3,1
   16b50:	01800244 	movi	r6,9
   16b54:	40800515 	stw	r2,20(r8)
   16b58:	40c00415 	stw	r3,16(r8)
   16b5c:	3440260e 	bge	r6,r17,16bf8 <__s2b+0x110>
   16b60:	3021883a 	mov	r16,r6
   16b64:	99ab883a 	add	r21,r19,r6
   16b68:	9c05883a 	add	r2,r19,r16
   16b6c:	11c00007 	ldb	r7,0(r2)
   16b70:	400b883a 	mov	r5,r8
   16b74:	9009883a 	mov	r4,r18
   16b78:	39fff404 	addi	r7,r7,-48
   16b7c:	01800284 	movi	r6,10
   16b80:	00168c80 	call	168c8 <__multadd>
   16b84:	84000044 	addi	r16,r16,1
   16b88:	1011883a 	mov	r8,r2
   16b8c:	8c3ff61e 	bne	r17,r16,16b68 <__s2b+0x80>
   16b90:	ac45883a 	add	r2,r21,r17
   16b94:	117ffe04 	addi	r5,r2,-8
   16b98:	880d883a 	mov	r6,r17
   16b9c:	35000c0e 	bge	r6,r20,16bd0 <__s2b+0xe8>
   16ba0:	a185c83a 	sub	r2,r20,r6
   16ba4:	2821883a 	mov	r16,r5
   16ba8:	28a3883a 	add	r17,r5,r2
   16bac:	81c00007 	ldb	r7,0(r16)
   16bb0:	400b883a 	mov	r5,r8
   16bb4:	9009883a 	mov	r4,r18
   16bb8:	39fff404 	addi	r7,r7,-48
   16bbc:	01800284 	movi	r6,10
   16bc0:	00168c80 	call	168c8 <__multadd>
   16bc4:	84000044 	addi	r16,r16,1
   16bc8:	1011883a 	mov	r8,r2
   16bcc:	847ff71e 	bne	r16,r17,16bac <__s2b+0xc4>
   16bd0:	4005883a 	mov	r2,r8
   16bd4:	dfc00617 	ldw	ra,24(sp)
   16bd8:	dd400517 	ldw	r21,20(sp)
   16bdc:	dd000417 	ldw	r20,16(sp)
   16be0:	dcc00317 	ldw	r19,12(sp)
   16be4:	dc800217 	ldw	r18,8(sp)
   16be8:	dc400117 	ldw	r17,4(sp)
   16bec:	dc000017 	ldw	r16,0(sp)
   16bf0:	dec00704 	addi	sp,sp,28
   16bf4:	f800283a 	ret
   16bf8:	99400284 	addi	r5,r19,10
   16bfc:	003fe706 	br	16b9c <__s2b+0xb4>
   16c00:	000b883a 	mov	r5,zero
   16c04:	003fcd06 	br	16b3c <__s2b+0x54>

00016c08 <_realloc_r>:
   16c08:	defff404 	addi	sp,sp,-48
   16c0c:	dd800815 	stw	r22,32(sp)
   16c10:	dc800415 	stw	r18,16(sp)
   16c14:	dc400315 	stw	r17,12(sp)
   16c18:	dfc00b15 	stw	ra,44(sp)
   16c1c:	df000a15 	stw	fp,40(sp)
   16c20:	ddc00915 	stw	r23,36(sp)
   16c24:	dd400715 	stw	r21,28(sp)
   16c28:	dd000615 	stw	r20,24(sp)
   16c2c:	dcc00515 	stw	r19,20(sp)
   16c30:	dc000215 	stw	r16,8(sp)
   16c34:	2825883a 	mov	r18,r5
   16c38:	3023883a 	mov	r17,r6
   16c3c:	202d883a 	mov	r22,r4
   16c40:	2800c926 	beq	r5,zero,16f68 <_realloc_r+0x360>
   16c44:	001a42c0 	call	1a42c <__malloc_lock>
   16c48:	943ffe04 	addi	r16,r18,-8
   16c4c:	88c002c4 	addi	r3,r17,11
   16c50:	00800584 	movi	r2,22
   16c54:	82000117 	ldw	r8,4(r16)
   16c58:	10c01b2e 	bgeu	r2,r3,16cc8 <_realloc_r+0xc0>
   16c5c:	00bffe04 	movi	r2,-8
   16c60:	188e703a 	and	r7,r3,r2
   16c64:	3839883a 	mov	fp,r7
   16c68:	38001a16 	blt	r7,zero,16cd4 <_realloc_r+0xcc>
   16c6c:	e4401936 	bltu	fp,r17,16cd4 <_realloc_r+0xcc>
   16c70:	013fff04 	movi	r4,-4
   16c74:	4126703a 	and	r19,r8,r4
   16c78:	99c02616 	blt	r19,r7,16d14 <_realloc_r+0x10c>
   16c7c:	802b883a 	mov	r21,r16
   16c80:	9829883a 	mov	r20,r19
   16c84:	84000204 	addi	r16,r16,8
   16c88:	a80f883a 	mov	r7,r21
   16c8c:	a70dc83a 	sub	r6,r20,fp
   16c90:	008003c4 	movi	r2,15
   16c94:	1180c136 	bltu	r2,r6,16f9c <_realloc_r+0x394>
   16c98:	38800117 	ldw	r2,4(r7)
   16c9c:	a549883a 	add	r4,r20,r21
   16ca0:	1080004c 	andi	r2,r2,1
   16ca4:	a084b03a 	or	r2,r20,r2
   16ca8:	38800115 	stw	r2,4(r7)
   16cac:	20c00117 	ldw	r3,4(r4)
   16cb0:	18c00054 	ori	r3,r3,1
   16cb4:	20c00115 	stw	r3,4(r4)
   16cb8:	b009883a 	mov	r4,r22
   16cbc:	001a44c0 	call	1a44c <__malloc_unlock>
   16cc0:	8023883a 	mov	r17,r16
   16cc4:	00000606 	br	16ce0 <_realloc_r+0xd8>
   16cc8:	01c00404 	movi	r7,16
   16ccc:	3839883a 	mov	fp,r7
   16cd0:	e47fe72e 	bgeu	fp,r17,16c70 <_realloc_r+0x68>
   16cd4:	00800304 	movi	r2,12
   16cd8:	0023883a 	mov	r17,zero
   16cdc:	b0800015 	stw	r2,0(r22)
   16ce0:	8805883a 	mov	r2,r17
   16ce4:	dfc00b17 	ldw	ra,44(sp)
   16ce8:	df000a17 	ldw	fp,40(sp)
   16cec:	ddc00917 	ldw	r23,36(sp)
   16cf0:	dd800817 	ldw	r22,32(sp)
   16cf4:	dd400717 	ldw	r21,28(sp)
   16cf8:	dd000617 	ldw	r20,24(sp)
   16cfc:	dcc00517 	ldw	r19,20(sp)
   16d00:	dc800417 	ldw	r18,16(sp)
   16d04:	dc400317 	ldw	r17,12(sp)
   16d08:	dc000217 	ldw	r16,8(sp)
   16d0c:	dec00c04 	addi	sp,sp,48
   16d10:	f800283a 	ret
   16d14:	008000f4 	movhi	r2,3
   16d18:	10a1f004 	addi	r2,r2,-30784
   16d1c:	12400217 	ldw	r9,8(r2)
   16d20:	84cd883a 	add	r6,r16,r19
   16d24:	802b883a 	mov	r21,r16
   16d28:	3240b926 	beq	r6,r9,17010 <_realloc_r+0x408>
   16d2c:	31400117 	ldw	r5,4(r6)
   16d30:	00bfff84 	movi	r2,-2
   16d34:	2884703a 	and	r2,r5,r2
   16d38:	1185883a 	add	r2,r2,r6
   16d3c:	10c00117 	ldw	r3,4(r2)
   16d40:	18c0004c 	andi	r3,r3,1
   16d44:	1807003a 	cmpeq	r3,r3,zero
   16d48:	1800a326 	beq	r3,zero,16fd8 <_realloc_r+0x3d0>
   16d4c:	2908703a 	and	r4,r5,r4
   16d50:	9929883a 	add	r20,r19,r4
   16d54:	a1c0a30e 	bge	r20,r7,16fe4 <_realloc_r+0x3dc>
   16d58:	4080004c 	andi	r2,r8,1
   16d5c:	1000551e 	bne	r2,zero,16eb4 <_realloc_r+0x2ac>
   16d60:	80800017 	ldw	r2,0(r16)
   16d64:	80afc83a 	sub	r23,r16,r2
   16d68:	b8c00117 	ldw	r3,4(r23)
   16d6c:	00bfff04 	movi	r2,-4
   16d70:	1884703a 	and	r2,r3,r2
   16d74:	30002e26 	beq	r6,zero,16e30 <_realloc_r+0x228>
   16d78:	3240b926 	beq	r6,r9,17060 <_realloc_r+0x458>
   16d7c:	98a9883a 	add	r20,r19,r2
   16d80:	2509883a 	add	r4,r4,r20
   16d84:	d9000015 	stw	r4,0(sp)
   16d88:	21c02a16 	blt	r4,r7,16e34 <_realloc_r+0x22c>
   16d8c:	30800317 	ldw	r2,12(r6)
   16d90:	30c00217 	ldw	r3,8(r6)
   16d94:	01400904 	movi	r5,36
   16d98:	99bfff04 	addi	r6,r19,-4
   16d9c:	18800315 	stw	r2,12(r3)
   16da0:	10c00215 	stw	r3,8(r2)
   16da4:	b9000317 	ldw	r4,12(r23)
   16da8:	b8800217 	ldw	r2,8(r23)
   16dac:	b82b883a 	mov	r21,r23
   16db0:	bc000204 	addi	r16,r23,8
   16db4:	20800215 	stw	r2,8(r4)
   16db8:	11000315 	stw	r4,12(r2)
   16dbc:	2980e436 	bltu	r5,r6,17150 <_realloc_r+0x548>
   16dc0:	008004c4 	movi	r2,19
   16dc4:	9009883a 	mov	r4,r18
   16dc8:	8011883a 	mov	r8,r16
   16dcc:	11800f2e 	bgeu	r2,r6,16e0c <_realloc_r+0x204>
   16dd0:	90800017 	ldw	r2,0(r18)
   16dd4:	ba000404 	addi	r8,r23,16
   16dd8:	91000204 	addi	r4,r18,8
   16ddc:	b8800215 	stw	r2,8(r23)
   16de0:	90c00117 	ldw	r3,4(r18)
   16de4:	008006c4 	movi	r2,27
   16de8:	b8c00315 	stw	r3,12(r23)
   16dec:	1180072e 	bgeu	r2,r6,16e0c <_realloc_r+0x204>
   16df0:	90c00217 	ldw	r3,8(r18)
   16df4:	ba000604 	addi	r8,r23,24
   16df8:	91000404 	addi	r4,r18,16
   16dfc:	b8c00415 	stw	r3,16(r23)
   16e00:	90800317 	ldw	r2,12(r18)
   16e04:	b8800515 	stw	r2,20(r23)
   16e08:	3140e726 	beq	r6,r5,171a8 <_realloc_r+0x5a0>
   16e0c:	20800017 	ldw	r2,0(r4)
   16e10:	dd000017 	ldw	r20,0(sp)
   16e14:	b80f883a 	mov	r7,r23
   16e18:	40800015 	stw	r2,0(r8)
   16e1c:	20c00117 	ldw	r3,4(r4)
   16e20:	40c00115 	stw	r3,4(r8)
   16e24:	20800217 	ldw	r2,8(r4)
   16e28:	40800215 	stw	r2,8(r8)
   16e2c:	003f9706 	br	16c8c <_realloc_r+0x84>
   16e30:	98a9883a 	add	r20,r19,r2
   16e34:	a1c01f16 	blt	r20,r7,16eb4 <_realloc_r+0x2ac>
   16e38:	b8c00317 	ldw	r3,12(r23)
   16e3c:	b8800217 	ldw	r2,8(r23)
   16e40:	99bfff04 	addi	r6,r19,-4
   16e44:	01400904 	movi	r5,36
   16e48:	b82b883a 	mov	r21,r23
   16e4c:	18800215 	stw	r2,8(r3)
   16e50:	10c00315 	stw	r3,12(r2)
   16e54:	bc000204 	addi	r16,r23,8
   16e58:	2980c336 	bltu	r5,r6,17168 <_realloc_r+0x560>
   16e5c:	008004c4 	movi	r2,19
   16e60:	9009883a 	mov	r4,r18
   16e64:	8011883a 	mov	r8,r16
   16e68:	11800f2e 	bgeu	r2,r6,16ea8 <_realloc_r+0x2a0>
   16e6c:	90800017 	ldw	r2,0(r18)
   16e70:	ba000404 	addi	r8,r23,16
   16e74:	91000204 	addi	r4,r18,8
   16e78:	b8800215 	stw	r2,8(r23)
   16e7c:	90c00117 	ldw	r3,4(r18)
   16e80:	008006c4 	movi	r2,27
   16e84:	b8c00315 	stw	r3,12(r23)
   16e88:	1180072e 	bgeu	r2,r6,16ea8 <_realloc_r+0x2a0>
   16e8c:	90c00217 	ldw	r3,8(r18)
   16e90:	ba000604 	addi	r8,r23,24
   16e94:	91000404 	addi	r4,r18,16
   16e98:	b8c00415 	stw	r3,16(r23)
   16e9c:	90800317 	ldw	r2,12(r18)
   16ea0:	b8800515 	stw	r2,20(r23)
   16ea4:	3140c726 	beq	r6,r5,171c4 <_realloc_r+0x5bc>
   16ea8:	20800017 	ldw	r2,0(r4)
   16eac:	b80f883a 	mov	r7,r23
   16eb0:	003fd906 	br	16e18 <_realloc_r+0x210>
   16eb4:	880b883a 	mov	r5,r17
   16eb8:	b009883a 	mov	r4,r22
   16ebc:	00151d80 	call	151d8 <_malloc_r>
   16ec0:	1023883a 	mov	r17,r2
   16ec4:	10002526 	beq	r2,zero,16f5c <_realloc_r+0x354>
   16ec8:	80800117 	ldw	r2,4(r16)
   16ecc:	00ffff84 	movi	r3,-2
   16ed0:	893ffe04 	addi	r4,r17,-8
   16ed4:	10c4703a 	and	r2,r2,r3
   16ed8:	8085883a 	add	r2,r16,r2
   16edc:	20809526 	beq	r4,r2,17134 <_realloc_r+0x52c>
   16ee0:	99bfff04 	addi	r6,r19,-4
   16ee4:	01c00904 	movi	r7,36
   16ee8:	39804536 	bltu	r7,r6,17000 <_realloc_r+0x3f8>
   16eec:	008004c4 	movi	r2,19
   16ef0:	9009883a 	mov	r4,r18
   16ef4:	880b883a 	mov	r5,r17
   16ef8:	11800f2e 	bgeu	r2,r6,16f38 <_realloc_r+0x330>
   16efc:	90800017 	ldw	r2,0(r18)
   16f00:	89400204 	addi	r5,r17,8
   16f04:	91000204 	addi	r4,r18,8
   16f08:	88800015 	stw	r2,0(r17)
   16f0c:	90c00117 	ldw	r3,4(r18)
   16f10:	008006c4 	movi	r2,27
   16f14:	88c00115 	stw	r3,4(r17)
   16f18:	1180072e 	bgeu	r2,r6,16f38 <_realloc_r+0x330>
   16f1c:	90c00217 	ldw	r3,8(r18)
   16f20:	89400404 	addi	r5,r17,16
   16f24:	91000404 	addi	r4,r18,16
   16f28:	88c00215 	stw	r3,8(r17)
   16f2c:	90800317 	ldw	r2,12(r18)
   16f30:	88800315 	stw	r2,12(r17)
   16f34:	31c09126 	beq	r6,r7,1717c <_realloc_r+0x574>
   16f38:	20800017 	ldw	r2,0(r4)
   16f3c:	28800015 	stw	r2,0(r5)
   16f40:	20c00117 	ldw	r3,4(r4)
   16f44:	28c00115 	stw	r3,4(r5)
   16f48:	20800217 	ldw	r2,8(r4)
   16f4c:	28800215 	stw	r2,8(r5)
   16f50:	900b883a 	mov	r5,r18
   16f54:	b009883a 	mov	r4,r22
   16f58:	00146500 	call	14650 <_free_r>
   16f5c:	b009883a 	mov	r4,r22
   16f60:	001a44c0 	call	1a44c <__malloc_unlock>
   16f64:	003f5e06 	br	16ce0 <_realloc_r+0xd8>
   16f68:	300b883a 	mov	r5,r6
   16f6c:	dfc00b17 	ldw	ra,44(sp)
   16f70:	df000a17 	ldw	fp,40(sp)
   16f74:	ddc00917 	ldw	r23,36(sp)
   16f78:	dd800817 	ldw	r22,32(sp)
   16f7c:	dd400717 	ldw	r21,28(sp)
   16f80:	dd000617 	ldw	r20,24(sp)
   16f84:	dcc00517 	ldw	r19,20(sp)
   16f88:	dc800417 	ldw	r18,16(sp)
   16f8c:	dc400317 	ldw	r17,12(sp)
   16f90:	dc000217 	ldw	r16,8(sp)
   16f94:	dec00c04 	addi	sp,sp,48
   16f98:	00151d81 	jmpi	151d8 <_malloc_r>
   16f9c:	38800117 	ldw	r2,4(r7)
   16fa0:	e54b883a 	add	r5,fp,r21
   16fa4:	31000054 	ori	r4,r6,1
   16fa8:	1080004c 	andi	r2,r2,1
   16fac:	1704b03a 	or	r2,r2,fp
   16fb0:	38800115 	stw	r2,4(r7)
   16fb4:	29000115 	stw	r4,4(r5)
   16fb8:	2987883a 	add	r3,r5,r6
   16fbc:	18800117 	ldw	r2,4(r3)
   16fc0:	29400204 	addi	r5,r5,8
   16fc4:	b009883a 	mov	r4,r22
   16fc8:	10800054 	ori	r2,r2,1
   16fcc:	18800115 	stw	r2,4(r3)
   16fd0:	00146500 	call	14650 <_free_r>
   16fd4:	003f3806 	br	16cb8 <_realloc_r+0xb0>
   16fd8:	000d883a 	mov	r6,zero
   16fdc:	0009883a 	mov	r4,zero
   16fe0:	003f5d06 	br	16d58 <_realloc_r+0x150>
   16fe4:	30c00217 	ldw	r3,8(r6)
   16fe8:	30800317 	ldw	r2,12(r6)
   16fec:	800f883a 	mov	r7,r16
   16ff0:	84000204 	addi	r16,r16,8
   16ff4:	10c00215 	stw	r3,8(r2)
   16ff8:	18800315 	stw	r2,12(r3)
   16ffc:	003f2306 	br	16c8c <_realloc_r+0x84>
   17000:	8809883a 	mov	r4,r17
   17004:	900b883a 	mov	r5,r18
   17008:	0015a9c0 	call	15a9c <memmove>
   1700c:	003fd006 	br	16f50 <_realloc_r+0x348>
   17010:	30800117 	ldw	r2,4(r6)
   17014:	e0c00404 	addi	r3,fp,16
   17018:	1108703a 	and	r4,r2,r4
   1701c:	9905883a 	add	r2,r19,r4
   17020:	10ff4d16 	blt	r2,r3,16d58 <_realloc_r+0x150>
   17024:	1705c83a 	sub	r2,r2,fp
   17028:	870b883a 	add	r5,r16,fp
   1702c:	10800054 	ori	r2,r2,1
   17030:	28800115 	stw	r2,4(r5)
   17034:	80c00117 	ldw	r3,4(r16)
   17038:	008000f4 	movhi	r2,3
   1703c:	10a1f004 	addi	r2,r2,-30784
   17040:	b009883a 	mov	r4,r22
   17044:	18c0004c 	andi	r3,r3,1
   17048:	e0c6b03a 	or	r3,fp,r3
   1704c:	11400215 	stw	r5,8(r2)
   17050:	80c00115 	stw	r3,4(r16)
   17054:	001a44c0 	call	1a44c <__malloc_unlock>
   17058:	84400204 	addi	r17,r16,8
   1705c:	003f2006 	br	16ce0 <_realloc_r+0xd8>
   17060:	98a9883a 	add	r20,r19,r2
   17064:	2509883a 	add	r4,r4,r20
   17068:	e0800404 	addi	r2,fp,16
   1706c:	d9000115 	stw	r4,4(sp)
   17070:	20bf7016 	blt	r4,r2,16e34 <_realloc_r+0x22c>
   17074:	b8c00317 	ldw	r3,12(r23)
   17078:	b8800217 	ldw	r2,8(r23)
   1707c:	99bfff04 	addi	r6,r19,-4
   17080:	01400904 	movi	r5,36
   17084:	18800215 	stw	r2,8(r3)
   17088:	10c00315 	stw	r3,12(r2)
   1708c:	bc400204 	addi	r17,r23,8
   17090:	29804136 	bltu	r5,r6,17198 <_realloc_r+0x590>
   17094:	008004c4 	movi	r2,19
   17098:	9009883a 	mov	r4,r18
   1709c:	880f883a 	mov	r7,r17
   170a0:	11800f2e 	bgeu	r2,r6,170e0 <_realloc_r+0x4d8>
   170a4:	90800017 	ldw	r2,0(r18)
   170a8:	b9c00404 	addi	r7,r23,16
   170ac:	91000204 	addi	r4,r18,8
   170b0:	b8800215 	stw	r2,8(r23)
   170b4:	90c00117 	ldw	r3,4(r18)
   170b8:	008006c4 	movi	r2,27
   170bc:	b8c00315 	stw	r3,12(r23)
   170c0:	1180072e 	bgeu	r2,r6,170e0 <_realloc_r+0x4d8>
   170c4:	90c00217 	ldw	r3,8(r18)
   170c8:	b9c00604 	addi	r7,r23,24
   170cc:	91000404 	addi	r4,r18,16
   170d0:	b8c00415 	stw	r3,16(r23)
   170d4:	90800317 	ldw	r2,12(r18)
   170d8:	b8800515 	stw	r2,20(r23)
   170dc:	31404026 	beq	r6,r5,171e0 <_realloc_r+0x5d8>
   170e0:	20800017 	ldw	r2,0(r4)
   170e4:	38800015 	stw	r2,0(r7)
   170e8:	20c00117 	ldw	r3,4(r4)
   170ec:	38c00115 	stw	r3,4(r7)
   170f0:	20800217 	ldw	r2,8(r4)
   170f4:	38800215 	stw	r2,8(r7)
   170f8:	d8c00117 	ldw	r3,4(sp)
   170fc:	bf0b883a 	add	r5,r23,fp
   17100:	b009883a 	mov	r4,r22
   17104:	1f05c83a 	sub	r2,r3,fp
   17108:	10800054 	ori	r2,r2,1
   1710c:	28800115 	stw	r2,4(r5)
   17110:	b8c00117 	ldw	r3,4(r23)
   17114:	008000f4 	movhi	r2,3
   17118:	10a1f004 	addi	r2,r2,-30784
   1711c:	11400215 	stw	r5,8(r2)
   17120:	18c0004c 	andi	r3,r3,1
   17124:	e0c6b03a 	or	r3,fp,r3
   17128:	b8c00115 	stw	r3,4(r23)
   1712c:	001a44c0 	call	1a44c <__malloc_unlock>
   17130:	003eeb06 	br	16ce0 <_realloc_r+0xd8>
   17134:	20800117 	ldw	r2,4(r4)
   17138:	00ffff04 	movi	r3,-4
   1713c:	800f883a 	mov	r7,r16
   17140:	10c4703a 	and	r2,r2,r3
   17144:	98a9883a 	add	r20,r19,r2
   17148:	84000204 	addi	r16,r16,8
   1714c:	003ecf06 	br	16c8c <_realloc_r+0x84>
   17150:	900b883a 	mov	r5,r18
   17154:	8009883a 	mov	r4,r16
   17158:	0015a9c0 	call	15a9c <memmove>
   1715c:	dd000017 	ldw	r20,0(sp)
   17160:	b80f883a 	mov	r7,r23
   17164:	003ec906 	br	16c8c <_realloc_r+0x84>
   17168:	900b883a 	mov	r5,r18
   1716c:	8009883a 	mov	r4,r16
   17170:	0015a9c0 	call	15a9c <memmove>
   17174:	b80f883a 	mov	r7,r23
   17178:	003ec406 	br	16c8c <_realloc_r+0x84>
   1717c:	90c00417 	ldw	r3,16(r18)
   17180:	89400604 	addi	r5,r17,24
   17184:	91000604 	addi	r4,r18,24
   17188:	88c00415 	stw	r3,16(r17)
   1718c:	90800517 	ldw	r2,20(r18)
   17190:	88800515 	stw	r2,20(r17)
   17194:	003f6806 	br	16f38 <_realloc_r+0x330>
   17198:	900b883a 	mov	r5,r18
   1719c:	8809883a 	mov	r4,r17
   171a0:	0015a9c0 	call	15a9c <memmove>
   171a4:	003fd406 	br	170f8 <_realloc_r+0x4f0>
   171a8:	90c00417 	ldw	r3,16(r18)
   171ac:	91000604 	addi	r4,r18,24
   171b0:	ba000804 	addi	r8,r23,32
   171b4:	b8c00615 	stw	r3,24(r23)
   171b8:	90800517 	ldw	r2,20(r18)
   171bc:	b8800715 	stw	r2,28(r23)
   171c0:	003f1206 	br	16e0c <_realloc_r+0x204>
   171c4:	90c00417 	ldw	r3,16(r18)
   171c8:	91000604 	addi	r4,r18,24
   171cc:	ba000804 	addi	r8,r23,32
   171d0:	b8c00615 	stw	r3,24(r23)
   171d4:	90800517 	ldw	r2,20(r18)
   171d8:	b8800715 	stw	r2,28(r23)
   171dc:	003f3206 	br	16ea8 <_realloc_r+0x2a0>
   171e0:	90c00417 	ldw	r3,16(r18)
   171e4:	91000604 	addi	r4,r18,24
   171e8:	b9c00804 	addi	r7,r23,32
   171ec:	b8c00615 	stw	r3,24(r23)
   171f0:	90800517 	ldw	r2,20(r18)
   171f4:	b8800715 	stw	r2,28(r23)
   171f8:	003fb906 	br	170e0 <_realloc_r+0x4d8>

000171fc <__isinfd>:
   171fc:	200d883a 	mov	r6,r4
   17200:	0109c83a 	sub	r4,zero,r4
   17204:	2188b03a 	or	r4,r4,r6
   17208:	2008d7fa 	srli	r4,r4,31
   1720c:	00a00034 	movhi	r2,32768
   17210:	10bfffc4 	addi	r2,r2,-1
   17214:	1144703a 	and	r2,r2,r5
   17218:	2088b03a 	or	r4,r4,r2
   1721c:	009ffc34 	movhi	r2,32752
   17220:	1105c83a 	sub	r2,r2,r4
   17224:	0087c83a 	sub	r3,zero,r2
   17228:	10c4b03a 	or	r2,r2,r3
   1722c:	1004d7fa 	srli	r2,r2,31
   17230:	00c00044 	movi	r3,1
   17234:	1885c83a 	sub	r2,r3,r2
   17238:	f800283a 	ret

0001723c <__isnand>:
   1723c:	200d883a 	mov	r6,r4
   17240:	0109c83a 	sub	r4,zero,r4
   17244:	2188b03a 	or	r4,r4,r6
   17248:	2008d7fa 	srli	r4,r4,31
   1724c:	00a00034 	movhi	r2,32768
   17250:	10bfffc4 	addi	r2,r2,-1
   17254:	1144703a 	and	r2,r2,r5
   17258:	2088b03a 	or	r4,r4,r2
   1725c:	009ffc34 	movhi	r2,32752
   17260:	1105c83a 	sub	r2,r2,r4
   17264:	1004d7fa 	srli	r2,r2,31
   17268:	f800283a 	ret

0001726c <_sbrk_r>:
   1726c:	defffd04 	addi	sp,sp,-12
   17270:	dc000015 	stw	r16,0(sp)
   17274:	040000f4 	movhi	r16,3
   17278:	84278f04 	addi	r16,r16,-25028
   1727c:	dc400115 	stw	r17,4(sp)
   17280:	80000015 	stw	zero,0(r16)
   17284:	2023883a 	mov	r17,r4
   17288:	2809883a 	mov	r4,r5
   1728c:	dfc00215 	stw	ra,8(sp)
   17290:	001a64c0 	call	1a64c <sbrk>
   17294:	1007883a 	mov	r3,r2
   17298:	00bfffc4 	movi	r2,-1
   1729c:	18800626 	beq	r3,r2,172b8 <_sbrk_r+0x4c>
   172a0:	1805883a 	mov	r2,r3
   172a4:	dfc00217 	ldw	ra,8(sp)
   172a8:	dc400117 	ldw	r17,4(sp)
   172ac:	dc000017 	ldw	r16,0(sp)
   172b0:	dec00304 	addi	sp,sp,12
   172b4:	f800283a 	ret
   172b8:	80800017 	ldw	r2,0(r16)
   172bc:	103ff826 	beq	r2,zero,172a0 <_sbrk_r+0x34>
   172c0:	88800015 	stw	r2,0(r17)
   172c4:	1805883a 	mov	r2,r3
   172c8:	dfc00217 	ldw	ra,8(sp)
   172cc:	dc400117 	ldw	r17,4(sp)
   172d0:	dc000017 	ldw	r16,0(sp)
   172d4:	dec00304 	addi	sp,sp,12
   172d8:	f800283a 	ret

000172dc <__sclose>:
   172dc:	2940038f 	ldh	r5,14(r5)
   172e0:	00176101 	jmpi	17610 <_close_r>

000172e4 <__sseek>:
   172e4:	defffe04 	addi	sp,sp,-8
   172e8:	dc000015 	stw	r16,0(sp)
   172ec:	2821883a 	mov	r16,r5
   172f0:	2940038f 	ldh	r5,14(r5)
   172f4:	dfc00115 	stw	ra,4(sp)
   172f8:	00178880 	call	17888 <_lseek_r>
   172fc:	1007883a 	mov	r3,r2
   17300:	00bfffc4 	movi	r2,-1
   17304:	18800926 	beq	r3,r2,1732c <__sseek+0x48>
   17308:	8080030b 	ldhu	r2,12(r16)
   1730c:	80c01415 	stw	r3,80(r16)
   17310:	10840014 	ori	r2,r2,4096
   17314:	8080030d 	sth	r2,12(r16)
   17318:	1805883a 	mov	r2,r3
   1731c:	dfc00117 	ldw	ra,4(sp)
   17320:	dc000017 	ldw	r16,0(sp)
   17324:	dec00204 	addi	sp,sp,8
   17328:	f800283a 	ret
   1732c:	8080030b 	ldhu	r2,12(r16)
   17330:	10bbffcc 	andi	r2,r2,61439
   17334:	8080030d 	sth	r2,12(r16)
   17338:	1805883a 	mov	r2,r3
   1733c:	dfc00117 	ldw	ra,4(sp)
   17340:	dc000017 	ldw	r16,0(sp)
   17344:	dec00204 	addi	sp,sp,8
   17348:	f800283a 	ret

0001734c <__swrite>:
   1734c:	2880030b 	ldhu	r2,12(r5)
   17350:	defffb04 	addi	sp,sp,-20
   17354:	dcc00315 	stw	r19,12(sp)
   17358:	1080400c 	andi	r2,r2,256
   1735c:	dc800215 	stw	r18,8(sp)
   17360:	dc400115 	stw	r17,4(sp)
   17364:	dc000015 	stw	r16,0(sp)
   17368:	3027883a 	mov	r19,r6
   1736c:	3825883a 	mov	r18,r7
   17370:	dfc00415 	stw	ra,16(sp)
   17374:	2821883a 	mov	r16,r5
   17378:	000d883a 	mov	r6,zero
   1737c:	01c00084 	movi	r7,2
   17380:	2023883a 	mov	r17,r4
   17384:	10000226 	beq	r2,zero,17390 <__swrite+0x44>
   17388:	2940038f 	ldh	r5,14(r5)
   1738c:	00178880 	call	17888 <_lseek_r>
   17390:	8080030b 	ldhu	r2,12(r16)
   17394:	8140038f 	ldh	r5,14(r16)
   17398:	8809883a 	mov	r4,r17
   1739c:	10bbffcc 	andi	r2,r2,61439
   173a0:	980d883a 	mov	r6,r19
   173a4:	900f883a 	mov	r7,r18
   173a8:	8080030d 	sth	r2,12(r16)
   173ac:	dfc00417 	ldw	ra,16(sp)
   173b0:	dcc00317 	ldw	r19,12(sp)
   173b4:	dc800217 	ldw	r18,8(sp)
   173b8:	dc400117 	ldw	r17,4(sp)
   173bc:	dc000017 	ldw	r16,0(sp)
   173c0:	dec00504 	addi	sp,sp,20
   173c4:	00174e41 	jmpi	174e4 <_write_r>

000173c8 <__sread>:
   173c8:	defffe04 	addi	sp,sp,-8
   173cc:	dc000015 	stw	r16,0(sp)
   173d0:	2821883a 	mov	r16,r5
   173d4:	2940038f 	ldh	r5,14(r5)
   173d8:	dfc00115 	stw	ra,4(sp)
   173dc:	00179000 	call	17900 <_read_r>
   173e0:	1007883a 	mov	r3,r2
   173e4:	10000816 	blt	r2,zero,17408 <__sread+0x40>
   173e8:	80801417 	ldw	r2,80(r16)
   173ec:	10c5883a 	add	r2,r2,r3
   173f0:	80801415 	stw	r2,80(r16)
   173f4:	1805883a 	mov	r2,r3
   173f8:	dfc00117 	ldw	ra,4(sp)
   173fc:	dc000017 	ldw	r16,0(sp)
   17400:	dec00204 	addi	sp,sp,8
   17404:	f800283a 	ret
   17408:	8080030b 	ldhu	r2,12(r16)
   1740c:	10bbffcc 	andi	r2,r2,61439
   17410:	8080030d 	sth	r2,12(r16)
   17414:	1805883a 	mov	r2,r3
   17418:	dfc00117 	ldw	ra,4(sp)
   1741c:	dc000017 	ldw	r16,0(sp)
   17420:	dec00204 	addi	sp,sp,8
   17424:	f800283a 	ret

00017428 <strcmp>:
   17428:	2144b03a 	or	r2,r4,r5
   1742c:	108000cc 	andi	r2,r2,3
   17430:	10001d1e 	bne	r2,zero,174a8 <strcmp+0x80>
   17434:	200f883a 	mov	r7,r4
   17438:	28800017 	ldw	r2,0(r5)
   1743c:	21000017 	ldw	r4,0(r4)
   17440:	280d883a 	mov	r6,r5
   17444:	2080161e 	bne	r4,r2,174a0 <strcmp+0x78>
   17448:	023fbff4 	movhi	r8,65279
   1744c:	423fbfc4 	addi	r8,r8,-257
   17450:	2207883a 	add	r3,r4,r8
   17454:	01602074 	movhi	r5,32897
   17458:	29602004 	addi	r5,r5,-32640
   1745c:	1946703a 	and	r3,r3,r5
   17460:	0104303a 	nor	r2,zero,r4
   17464:	10c4703a 	and	r2,r2,r3
   17468:	10001c1e 	bne	r2,zero,174dc <strcmp+0xb4>
   1746c:	4013883a 	mov	r9,r8
   17470:	2811883a 	mov	r8,r5
   17474:	00000106 	br	1747c <strcmp+0x54>
   17478:	1800181e 	bne	r3,zero,174dc <strcmp+0xb4>
   1747c:	39c00104 	addi	r7,r7,4
   17480:	39000017 	ldw	r4,0(r7)
   17484:	31800104 	addi	r6,r6,4
   17488:	31400017 	ldw	r5,0(r6)
   1748c:	2245883a 	add	r2,r4,r9
   17490:	1204703a 	and	r2,r2,r8
   17494:	0106303a 	nor	r3,zero,r4
   17498:	1886703a 	and	r3,r3,r2
   1749c:	217ff626 	beq	r4,r5,17478 <strcmp+0x50>
   174a0:	3809883a 	mov	r4,r7
   174a4:	300b883a 	mov	r5,r6
   174a8:	20c00007 	ldb	r3,0(r4)
   174ac:	1800051e 	bne	r3,zero,174c4 <strcmp+0x9c>
   174b0:	00000606 	br	174cc <strcmp+0xa4>
   174b4:	21000044 	addi	r4,r4,1
   174b8:	20c00007 	ldb	r3,0(r4)
   174bc:	29400044 	addi	r5,r5,1
   174c0:	18000226 	beq	r3,zero,174cc <strcmp+0xa4>
   174c4:	28800007 	ldb	r2,0(r5)
   174c8:	18bffa26 	beq	r3,r2,174b4 <strcmp+0x8c>
   174cc:	20c00003 	ldbu	r3,0(r4)
   174d0:	28800003 	ldbu	r2,0(r5)
   174d4:	1885c83a 	sub	r2,r3,r2
   174d8:	f800283a 	ret
   174dc:	0005883a 	mov	r2,zero
   174e0:	f800283a 	ret

000174e4 <_write_r>:
   174e4:	defffd04 	addi	sp,sp,-12
   174e8:	dc000015 	stw	r16,0(sp)
   174ec:	040000f4 	movhi	r16,3
   174f0:	84278f04 	addi	r16,r16,-25028
   174f4:	dc400115 	stw	r17,4(sp)
   174f8:	80000015 	stw	zero,0(r16)
   174fc:	2023883a 	mov	r17,r4
   17500:	2809883a 	mov	r4,r5
   17504:	300b883a 	mov	r5,r6
   17508:	380d883a 	mov	r6,r7
   1750c:	dfc00215 	stw	ra,8(sp)
   17510:	001a7080 	call	1a708 <write>
   17514:	1007883a 	mov	r3,r2
   17518:	00bfffc4 	movi	r2,-1
   1751c:	18800626 	beq	r3,r2,17538 <_write_r+0x54>
   17520:	1805883a 	mov	r2,r3
   17524:	dfc00217 	ldw	ra,8(sp)
   17528:	dc400117 	ldw	r17,4(sp)
   1752c:	dc000017 	ldw	r16,0(sp)
   17530:	dec00304 	addi	sp,sp,12
   17534:	f800283a 	ret
   17538:	80800017 	ldw	r2,0(r16)
   1753c:	103ff826 	beq	r2,zero,17520 <_write_r+0x3c>
   17540:	88800015 	stw	r2,0(r17)
   17544:	1805883a 	mov	r2,r3
   17548:	dfc00217 	ldw	ra,8(sp)
   1754c:	dc400117 	ldw	r17,4(sp)
   17550:	dc000017 	ldw	r16,0(sp)
   17554:	dec00304 	addi	sp,sp,12
   17558:	f800283a 	ret

0001755c <_calloc_r>:
   1755c:	298b383a 	mul	r5,r5,r6
   17560:	defffe04 	addi	sp,sp,-8
   17564:	dc000015 	stw	r16,0(sp)
   17568:	dfc00115 	stw	ra,4(sp)
   1756c:	00151d80 	call	151d8 <_malloc_r>
   17570:	1021883a 	mov	r16,r2
   17574:	01c00904 	movi	r7,36
   17578:	10000d26 	beq	r2,zero,175b0 <_calloc_r+0x54>
   1757c:	10ffff17 	ldw	r3,-4(r2)
   17580:	1009883a 	mov	r4,r2
   17584:	00bfff04 	movi	r2,-4
   17588:	1886703a 	and	r3,r3,r2
   1758c:	1887883a 	add	r3,r3,r2
   17590:	180d883a 	mov	r6,r3
   17594:	000b883a 	mov	r5,zero
   17598:	38c01736 	bltu	r7,r3,175f8 <_calloc_r+0x9c>
   1759c:	008004c4 	movi	r2,19
   175a0:	10c00836 	bltu	r2,r3,175c4 <_calloc_r+0x68>
   175a4:	20000215 	stw	zero,8(r4)
   175a8:	20000015 	stw	zero,0(r4)
   175ac:	20000115 	stw	zero,4(r4)
   175b0:	8005883a 	mov	r2,r16
   175b4:	dfc00117 	ldw	ra,4(sp)
   175b8:	dc000017 	ldw	r16,0(sp)
   175bc:	dec00204 	addi	sp,sp,8
   175c0:	f800283a 	ret
   175c4:	008006c4 	movi	r2,27
   175c8:	80000015 	stw	zero,0(r16)
   175cc:	80000115 	stw	zero,4(r16)
   175d0:	81000204 	addi	r4,r16,8
   175d4:	10fff32e 	bgeu	r2,r3,175a4 <_calloc_r+0x48>
   175d8:	80000215 	stw	zero,8(r16)
   175dc:	80000315 	stw	zero,12(r16)
   175e0:	81000404 	addi	r4,r16,16
   175e4:	19ffef1e 	bne	r3,r7,175a4 <_calloc_r+0x48>
   175e8:	81000604 	addi	r4,r16,24
   175ec:	80000415 	stw	zero,16(r16)
   175f0:	80000515 	stw	zero,20(r16)
   175f4:	003feb06 	br	175a4 <_calloc_r+0x48>
   175f8:	0015b7c0 	call	15b7c <memset>
   175fc:	8005883a 	mov	r2,r16
   17600:	dfc00117 	ldw	ra,4(sp)
   17604:	dc000017 	ldw	r16,0(sp)
   17608:	dec00204 	addi	sp,sp,8
   1760c:	f800283a 	ret

00017610 <_close_r>:
   17610:	defffd04 	addi	sp,sp,-12
   17614:	dc000015 	stw	r16,0(sp)
   17618:	040000f4 	movhi	r16,3
   1761c:	84278f04 	addi	r16,r16,-25028
   17620:	dc400115 	stw	r17,4(sp)
   17624:	80000015 	stw	zero,0(r16)
   17628:	2023883a 	mov	r17,r4
   1762c:	2809883a 	mov	r4,r5
   17630:	dfc00215 	stw	ra,8(sp)
   17634:	0019da80 	call	19da8 <close>
   17638:	1007883a 	mov	r3,r2
   1763c:	00bfffc4 	movi	r2,-1
   17640:	18800626 	beq	r3,r2,1765c <_close_r+0x4c>
   17644:	1805883a 	mov	r2,r3
   17648:	dfc00217 	ldw	ra,8(sp)
   1764c:	dc400117 	ldw	r17,4(sp)
   17650:	dc000017 	ldw	r16,0(sp)
   17654:	dec00304 	addi	sp,sp,12
   17658:	f800283a 	ret
   1765c:	80800017 	ldw	r2,0(r16)
   17660:	103ff826 	beq	r2,zero,17644 <_close_r+0x34>
   17664:	88800015 	stw	r2,0(r17)
   17668:	1805883a 	mov	r2,r3
   1766c:	dfc00217 	ldw	ra,8(sp)
   17670:	dc400117 	ldw	r17,4(sp)
   17674:	dc000017 	ldw	r16,0(sp)
   17678:	dec00304 	addi	sp,sp,12
   1767c:	f800283a 	ret

00017680 <_fclose_r>:
   17680:	defffc04 	addi	sp,sp,-16
   17684:	dc400115 	stw	r17,4(sp)
   17688:	dc000015 	stw	r16,0(sp)
   1768c:	dfc00315 	stw	ra,12(sp)
   17690:	dc800215 	stw	r18,8(sp)
   17694:	2821883a 	mov	r16,r5
   17698:	2023883a 	mov	r17,r4
   1769c:	28002926 	beq	r5,zero,17744 <_fclose_r+0xc4>
   176a0:	00142bc0 	call	142bc <__sfp_lock_acquire>
   176a4:	88000226 	beq	r17,zero,176b0 <_fclose_r+0x30>
   176a8:	88800e17 	ldw	r2,56(r17)
   176ac:	10002d26 	beq	r2,zero,17764 <_fclose_r+0xe4>
   176b0:	8080030f 	ldh	r2,12(r16)
   176b4:	10002226 	beq	r2,zero,17740 <_fclose_r+0xc0>
   176b8:	8809883a 	mov	r4,r17
   176bc:	800b883a 	mov	r5,r16
   176c0:	00140340 	call	14034 <_fflush_r>
   176c4:	1025883a 	mov	r18,r2
   176c8:	80800b17 	ldw	r2,44(r16)
   176cc:	10000426 	beq	r2,zero,176e0 <_fclose_r+0x60>
   176d0:	81400717 	ldw	r5,28(r16)
   176d4:	8809883a 	mov	r4,r17
   176d8:	103ee83a 	callr	r2
   176dc:	10002a16 	blt	r2,zero,17788 <_fclose_r+0x108>
   176e0:	8080030b 	ldhu	r2,12(r16)
   176e4:	1080200c 	andi	r2,r2,128
   176e8:	1000231e 	bne	r2,zero,17778 <_fclose_r+0xf8>
   176ec:	81400c17 	ldw	r5,48(r16)
   176f0:	28000526 	beq	r5,zero,17708 <_fclose_r+0x88>
   176f4:	80801004 	addi	r2,r16,64
   176f8:	28800226 	beq	r5,r2,17704 <_fclose_r+0x84>
   176fc:	8809883a 	mov	r4,r17
   17700:	00146500 	call	14650 <_free_r>
   17704:	80000c15 	stw	zero,48(r16)
   17708:	81401117 	ldw	r5,68(r16)
   1770c:	28000326 	beq	r5,zero,1771c <_fclose_r+0x9c>
   17710:	8809883a 	mov	r4,r17
   17714:	00146500 	call	14650 <_free_r>
   17718:	80001115 	stw	zero,68(r16)
   1771c:	8000030d 	sth	zero,12(r16)
   17720:	00142c00 	call	142c0 <__sfp_lock_release>
   17724:	9005883a 	mov	r2,r18
   17728:	dfc00317 	ldw	ra,12(sp)
   1772c:	dc800217 	ldw	r18,8(sp)
   17730:	dc400117 	ldw	r17,4(sp)
   17734:	dc000017 	ldw	r16,0(sp)
   17738:	dec00404 	addi	sp,sp,16
   1773c:	f800283a 	ret
   17740:	00142c00 	call	142c0 <__sfp_lock_release>
   17744:	0025883a 	mov	r18,zero
   17748:	9005883a 	mov	r2,r18
   1774c:	dfc00317 	ldw	ra,12(sp)
   17750:	dc800217 	ldw	r18,8(sp)
   17754:	dc400117 	ldw	r17,4(sp)
   17758:	dc000017 	ldw	r16,0(sp)
   1775c:	dec00404 	addi	sp,sp,16
   17760:	f800283a 	ret
   17764:	8809883a 	mov	r4,r17
   17768:	00142cc0 	call	142cc <__sinit>
   1776c:	8080030f 	ldh	r2,12(r16)
   17770:	103fd11e 	bne	r2,zero,176b8 <_fclose_r+0x38>
   17774:	003ff206 	br	17740 <_fclose_r+0xc0>
   17778:	81400417 	ldw	r5,16(r16)
   1777c:	8809883a 	mov	r4,r17
   17780:	00146500 	call	14650 <_free_r>
   17784:	003fd906 	br	176ec <_fclose_r+0x6c>
   17788:	04bfffc4 	movi	r18,-1
   1778c:	003fd406 	br	176e0 <_fclose_r+0x60>

00017790 <fclose>:
   17790:	008000f4 	movhi	r2,3
   17794:	10a77404 	addi	r2,r2,-25136
   17798:	200b883a 	mov	r5,r4
   1779c:	11000017 	ldw	r4,0(r2)
   177a0:	00176801 	jmpi	17680 <_fclose_r>

000177a4 <_fstat_r>:
   177a4:	defffd04 	addi	sp,sp,-12
   177a8:	dc000015 	stw	r16,0(sp)
   177ac:	040000f4 	movhi	r16,3
   177b0:	84278f04 	addi	r16,r16,-25028
   177b4:	dc400115 	stw	r17,4(sp)
   177b8:	80000015 	stw	zero,0(r16)
   177bc:	2023883a 	mov	r17,r4
   177c0:	2809883a 	mov	r4,r5
   177c4:	300b883a 	mov	r5,r6
   177c8:	dfc00215 	stw	ra,8(sp)
   177cc:	0019f300 	call	19f30 <fstat>
   177d0:	1007883a 	mov	r3,r2
   177d4:	00bfffc4 	movi	r2,-1
   177d8:	18800626 	beq	r3,r2,177f4 <_fstat_r+0x50>
   177dc:	1805883a 	mov	r2,r3
   177e0:	dfc00217 	ldw	ra,8(sp)
   177e4:	dc400117 	ldw	r17,4(sp)
   177e8:	dc000017 	ldw	r16,0(sp)
   177ec:	dec00304 	addi	sp,sp,12
   177f0:	f800283a 	ret
   177f4:	80800017 	ldw	r2,0(r16)
   177f8:	103ff826 	beq	r2,zero,177dc <_fstat_r+0x38>
   177fc:	88800015 	stw	r2,0(r17)
   17800:	1805883a 	mov	r2,r3
   17804:	dfc00217 	ldw	ra,8(sp)
   17808:	dc400117 	ldw	r17,4(sp)
   1780c:	dc000017 	ldw	r16,0(sp)
   17810:	dec00304 	addi	sp,sp,12
   17814:	f800283a 	ret

00017818 <_isatty_r>:
   17818:	defffd04 	addi	sp,sp,-12
   1781c:	dc000015 	stw	r16,0(sp)
   17820:	040000f4 	movhi	r16,3
   17824:	84278f04 	addi	r16,r16,-25028
   17828:	dc400115 	stw	r17,4(sp)
   1782c:	80000015 	stw	zero,0(r16)
   17830:	2023883a 	mov	r17,r4
   17834:	2809883a 	mov	r4,r5
   17838:	dfc00215 	stw	ra,8(sp)
   1783c:	001a0640 	call	1a064 <isatty>
   17840:	1007883a 	mov	r3,r2
   17844:	00bfffc4 	movi	r2,-1
   17848:	18800626 	beq	r3,r2,17864 <_isatty_r+0x4c>
   1784c:	1805883a 	mov	r2,r3
   17850:	dfc00217 	ldw	ra,8(sp)
   17854:	dc400117 	ldw	r17,4(sp)
   17858:	dc000017 	ldw	r16,0(sp)
   1785c:	dec00304 	addi	sp,sp,12
   17860:	f800283a 	ret
   17864:	80800017 	ldw	r2,0(r16)
   17868:	103ff826 	beq	r2,zero,1784c <_isatty_r+0x34>
   1786c:	88800015 	stw	r2,0(r17)
   17870:	1805883a 	mov	r2,r3
   17874:	dfc00217 	ldw	ra,8(sp)
   17878:	dc400117 	ldw	r17,4(sp)
   1787c:	dc000017 	ldw	r16,0(sp)
   17880:	dec00304 	addi	sp,sp,12
   17884:	f800283a 	ret

00017888 <_lseek_r>:
   17888:	defffd04 	addi	sp,sp,-12
   1788c:	dc000015 	stw	r16,0(sp)
   17890:	040000f4 	movhi	r16,3
   17894:	84278f04 	addi	r16,r16,-25028
   17898:	dc400115 	stw	r17,4(sp)
   1789c:	80000015 	stw	zero,0(r16)
   178a0:	2023883a 	mov	r17,r4
   178a4:	2809883a 	mov	r4,r5
   178a8:	300b883a 	mov	r5,r6
   178ac:	380d883a 	mov	r6,r7
   178b0:	dfc00215 	stw	ra,8(sp)
   178b4:	001a2700 	call	1a270 <lseek>
   178b8:	1007883a 	mov	r3,r2
   178bc:	00bfffc4 	movi	r2,-1
   178c0:	18800626 	beq	r3,r2,178dc <_lseek_r+0x54>
   178c4:	1805883a 	mov	r2,r3
   178c8:	dfc00217 	ldw	ra,8(sp)
   178cc:	dc400117 	ldw	r17,4(sp)
   178d0:	dc000017 	ldw	r16,0(sp)
   178d4:	dec00304 	addi	sp,sp,12
   178d8:	f800283a 	ret
   178dc:	80800017 	ldw	r2,0(r16)
   178e0:	103ff826 	beq	r2,zero,178c4 <_lseek_r+0x3c>
   178e4:	88800015 	stw	r2,0(r17)
   178e8:	1805883a 	mov	r2,r3
   178ec:	dfc00217 	ldw	ra,8(sp)
   178f0:	dc400117 	ldw	r17,4(sp)
   178f4:	dc000017 	ldw	r16,0(sp)
   178f8:	dec00304 	addi	sp,sp,12
   178fc:	f800283a 	ret

00017900 <_read_r>:
   17900:	defffd04 	addi	sp,sp,-12
   17904:	dc000015 	stw	r16,0(sp)
   17908:	040000f4 	movhi	r16,3
   1790c:	84278f04 	addi	r16,r16,-25028
   17910:	dc400115 	stw	r17,4(sp)
   17914:	80000015 	stw	zero,0(r16)
   17918:	2023883a 	mov	r17,r4
   1791c:	2809883a 	mov	r4,r5
   17920:	300b883a 	mov	r5,r6
   17924:	380d883a 	mov	r6,r7
   17928:	dfc00215 	stw	ra,8(sp)
   1792c:	001a46c0 	call	1a46c <read>
   17930:	1007883a 	mov	r3,r2
   17934:	00bfffc4 	movi	r2,-1
   17938:	18800626 	beq	r3,r2,17954 <_read_r+0x54>
   1793c:	1805883a 	mov	r2,r3
   17940:	dfc00217 	ldw	ra,8(sp)
   17944:	dc400117 	ldw	r17,4(sp)
   17948:	dc000017 	ldw	r16,0(sp)
   1794c:	dec00304 	addi	sp,sp,12
   17950:	f800283a 	ret
   17954:	80800017 	ldw	r2,0(r16)
   17958:	103ff826 	beq	r2,zero,1793c <_read_r+0x3c>
   1795c:	88800015 	stw	r2,0(r17)
   17960:	1805883a 	mov	r2,r3
   17964:	dfc00217 	ldw	ra,8(sp)
   17968:	dc400117 	ldw	r17,4(sp)
   1796c:	dc000017 	ldw	r16,0(sp)
   17970:	dec00304 	addi	sp,sp,12
   17974:	f800283a 	ret

00017978 <__udivdi3>:
   17978:	defff004 	addi	sp,sp,-64
   1797c:	2005883a 	mov	r2,r4
   17980:	3011883a 	mov	r8,r6
   17984:	df000e15 	stw	fp,56(sp)
   17988:	dd000a15 	stw	r20,40(sp)
   1798c:	dc000615 	stw	r16,24(sp)
   17990:	dfc00f15 	stw	ra,60(sp)
   17994:	ddc00d15 	stw	r23,52(sp)
   17998:	dd800c15 	stw	r22,48(sp)
   1799c:	dd400b15 	stw	r21,44(sp)
   179a0:	dcc00915 	stw	r19,36(sp)
   179a4:	dc800815 	stw	r18,32(sp)
   179a8:	dc400715 	stw	r17,28(sp)
   179ac:	4021883a 	mov	r16,r8
   179b0:	1039883a 	mov	fp,r2
   179b4:	2829883a 	mov	r20,r5
   179b8:	38003b1e 	bne	r7,zero,17aa8 <__udivdi3+0x130>
   179bc:	2a005c36 	bltu	r5,r8,17b30 <__udivdi3+0x1b8>
   179c0:	4000a626 	beq	r8,zero,17c5c <__udivdi3+0x2e4>
   179c4:	00bfffd4 	movui	r2,65535
   179c8:	14009e36 	bltu	r2,r16,17c44 <__udivdi3+0x2cc>
   179cc:	00803fc4 	movi	r2,255
   179d0:	14013d36 	bltu	r2,r16,17ec8 <__udivdi3+0x550>
   179d4:	000b883a 	mov	r5,zero
   179d8:	0005883a 	mov	r2,zero
   179dc:	8084d83a 	srl	r2,r16,r2
   179e0:	010000f4 	movhi	r4,3
   179e4:	2120a004 	addi	r4,r4,-32128
   179e8:	01800804 	movi	r6,32
   179ec:	1105883a 	add	r2,r2,r4
   179f0:	10c00003 	ldbu	r3,0(r2)
   179f4:	28c7883a 	add	r3,r5,r3
   179f8:	30edc83a 	sub	r22,r6,r3
   179fc:	b000ee1e 	bne	r22,zero,17db8 <__udivdi3+0x440>
   17a00:	802ad43a 	srli	r21,r16,16
   17a04:	00800044 	movi	r2,1
   17a08:	a423c83a 	sub	r17,r20,r16
   17a0c:	85ffffcc 	andi	r23,r16,65535
   17a10:	d8800315 	stw	r2,12(sp)
   17a14:	8809883a 	mov	r4,r17
   17a18:	a80b883a 	mov	r5,r21
   17a1c:	001976c0 	call	1976c <__udivsi3>
   17a20:	8809883a 	mov	r4,r17
   17a24:	a80b883a 	mov	r5,r21
   17a28:	102d883a 	mov	r22,r2
   17a2c:	00197740 	call	19774 <__umodsi3>
   17a30:	1004943a 	slli	r2,r2,16
   17a34:	e006d43a 	srli	r3,fp,16
   17a38:	bda3383a 	mul	r17,r23,r22
   17a3c:	10c4b03a 	or	r2,r2,r3
   17a40:	1440042e 	bgeu	r2,r17,17a54 <__udivdi3+0xdc>
   17a44:	1405883a 	add	r2,r2,r16
   17a48:	b5bfffc4 	addi	r22,r22,-1
   17a4c:	14000136 	bltu	r2,r16,17a54 <__udivdi3+0xdc>
   17a50:	14413d36 	bltu	r2,r17,17f48 <__udivdi3+0x5d0>
   17a54:	1463c83a 	sub	r17,r2,r17
   17a58:	8809883a 	mov	r4,r17
   17a5c:	a80b883a 	mov	r5,r21
   17a60:	001976c0 	call	1976c <__udivsi3>
   17a64:	8809883a 	mov	r4,r17
   17a68:	a80b883a 	mov	r5,r21
   17a6c:	1029883a 	mov	r20,r2
   17a70:	00197740 	call	19774 <__umodsi3>
   17a74:	1004943a 	slli	r2,r2,16
   17a78:	bd09383a 	mul	r4,r23,r20
   17a7c:	e0ffffcc 	andi	r3,fp,65535
   17a80:	10c4b03a 	or	r2,r2,r3
   17a84:	1100042e 	bgeu	r2,r4,17a98 <__udivdi3+0x120>
   17a88:	8085883a 	add	r2,r16,r2
   17a8c:	a53fffc4 	addi	r20,r20,-1
   17a90:	14000136 	bltu	r2,r16,17a98 <__udivdi3+0x120>
   17a94:	11012036 	bltu	r2,r4,17f18 <__udivdi3+0x5a0>
   17a98:	b004943a 	slli	r2,r22,16
   17a9c:	d9000317 	ldw	r4,12(sp)
   17aa0:	a084b03a 	or	r2,r20,r2
   17aa4:	00001506 	br	17afc <__udivdi3+0x184>
   17aa8:	380d883a 	mov	r6,r7
   17aac:	29c06236 	bltu	r5,r7,17c38 <__udivdi3+0x2c0>
   17ab0:	00bfffd4 	movui	r2,65535
   17ab4:	11c05a36 	bltu	r2,r7,17c20 <__udivdi3+0x2a8>
   17ab8:	00803fc4 	movi	r2,255
   17abc:	11c0fc36 	bltu	r2,r7,17eb0 <__udivdi3+0x538>
   17ac0:	000b883a 	mov	r5,zero
   17ac4:	0005883a 	mov	r2,zero
   17ac8:	3084d83a 	srl	r2,r6,r2
   17acc:	010000f4 	movhi	r4,3
   17ad0:	2120a004 	addi	r4,r4,-32128
   17ad4:	01c00804 	movi	r7,32
   17ad8:	1105883a 	add	r2,r2,r4
   17adc:	10c00003 	ldbu	r3,0(r2)
   17ae0:	28c7883a 	add	r3,r5,r3
   17ae4:	38efc83a 	sub	r23,r7,r3
   17ae8:	b800691e 	bne	r23,zero,17c90 <__udivdi3+0x318>
   17aec:	35000136 	bltu	r6,r20,17af4 <__udivdi3+0x17c>
   17af0:	e4005136 	bltu	fp,r16,17c38 <__udivdi3+0x2c0>
   17af4:	00800044 	movi	r2,1
   17af8:	0009883a 	mov	r4,zero
   17afc:	2007883a 	mov	r3,r4
   17b00:	dfc00f17 	ldw	ra,60(sp)
   17b04:	df000e17 	ldw	fp,56(sp)
   17b08:	ddc00d17 	ldw	r23,52(sp)
   17b0c:	dd800c17 	ldw	r22,48(sp)
   17b10:	dd400b17 	ldw	r21,44(sp)
   17b14:	dd000a17 	ldw	r20,40(sp)
   17b18:	dcc00917 	ldw	r19,36(sp)
   17b1c:	dc800817 	ldw	r18,32(sp)
   17b20:	dc400717 	ldw	r17,28(sp)
   17b24:	dc000617 	ldw	r16,24(sp)
   17b28:	dec01004 	addi	sp,sp,64
   17b2c:	f800283a 	ret
   17b30:	00bfffd4 	movui	r2,65535
   17b34:	12005036 	bltu	r2,r8,17c78 <__udivdi3+0x300>
   17b38:	00803fc4 	movi	r2,255
   17b3c:	1200e836 	bltu	r2,r8,17ee0 <__udivdi3+0x568>
   17b40:	000b883a 	mov	r5,zero
   17b44:	0005883a 	mov	r2,zero
   17b48:	8084d83a 	srl	r2,r16,r2
   17b4c:	010000f4 	movhi	r4,3
   17b50:	2120a004 	addi	r4,r4,-32128
   17b54:	01800804 	movi	r6,32
   17b58:	1105883a 	add	r2,r2,r4
   17b5c:	10c00003 	ldbu	r3,0(r2)
   17b60:	28c7883a 	add	r3,r5,r3
   17b64:	30cbc83a 	sub	r5,r6,r3
   17b68:	28000626 	beq	r5,zero,17b84 <__udivdi3+0x20c>
   17b6c:	3145c83a 	sub	r2,r6,r5
   17b70:	e084d83a 	srl	r2,fp,r2
   17b74:	a146983a 	sll	r3,r20,r5
   17b78:	e178983a 	sll	fp,fp,r5
   17b7c:	8160983a 	sll	r16,r16,r5
   17b80:	18a8b03a 	or	r20,r3,r2
   17b84:	802ad43a 	srli	r21,r16,16
   17b88:	a009883a 	mov	r4,r20
   17b8c:	85ffffcc 	andi	r23,r16,65535
   17b90:	a80b883a 	mov	r5,r21
   17b94:	001976c0 	call	1976c <__udivsi3>
   17b98:	a009883a 	mov	r4,r20
   17b9c:	a80b883a 	mov	r5,r21
   17ba0:	102d883a 	mov	r22,r2
   17ba4:	00197740 	call	19774 <__umodsi3>
   17ba8:	1004943a 	slli	r2,r2,16
   17bac:	e006d43a 	srli	r3,fp,16
   17bb0:	bda3383a 	mul	r17,r23,r22
   17bb4:	10c4b03a 	or	r2,r2,r3
   17bb8:	1440042e 	bgeu	r2,r17,17bcc <__udivdi3+0x254>
   17bbc:	1405883a 	add	r2,r2,r16
   17bc0:	b5bfffc4 	addi	r22,r22,-1
   17bc4:	14000136 	bltu	r2,r16,17bcc <__udivdi3+0x254>
   17bc8:	1440d536 	bltu	r2,r17,17f20 <__udivdi3+0x5a8>
   17bcc:	1463c83a 	sub	r17,r2,r17
   17bd0:	8809883a 	mov	r4,r17
   17bd4:	a80b883a 	mov	r5,r21
   17bd8:	001976c0 	call	1976c <__udivsi3>
   17bdc:	8809883a 	mov	r4,r17
   17be0:	a80b883a 	mov	r5,r21
   17be4:	1029883a 	mov	r20,r2
   17be8:	00197740 	call	19774 <__umodsi3>
   17bec:	1004943a 	slli	r2,r2,16
   17bf0:	bd09383a 	mul	r4,r23,r20
   17bf4:	e0ffffcc 	andi	r3,fp,65535
   17bf8:	10c4b03a 	or	r2,r2,r3
   17bfc:	1100042e 	bgeu	r2,r4,17c10 <__udivdi3+0x298>
   17c00:	8085883a 	add	r2,r16,r2
   17c04:	a53fffc4 	addi	r20,r20,-1
   17c08:	14000136 	bltu	r2,r16,17c10 <__udivdi3+0x298>
   17c0c:	1100c736 	bltu	r2,r4,17f2c <__udivdi3+0x5b4>
   17c10:	b004943a 	slli	r2,r22,16
   17c14:	0009883a 	mov	r4,zero
   17c18:	a084b03a 	or	r2,r20,r2
   17c1c:	003fb706 	br	17afc <__udivdi3+0x184>
   17c20:	00804034 	movhi	r2,256
   17c24:	10bfffc4 	addi	r2,r2,-1
   17c28:	11c0a436 	bltu	r2,r7,17ebc <__udivdi3+0x544>
   17c2c:	01400404 	movi	r5,16
   17c30:	2805883a 	mov	r2,r5
   17c34:	003fa406 	br	17ac8 <__udivdi3+0x150>
   17c38:	0005883a 	mov	r2,zero
   17c3c:	0009883a 	mov	r4,zero
   17c40:	003fae06 	br	17afc <__udivdi3+0x184>
   17c44:	00804034 	movhi	r2,256
   17c48:	10bfffc4 	addi	r2,r2,-1
   17c4c:	1400a136 	bltu	r2,r16,17ed4 <__udivdi3+0x55c>
   17c50:	01400404 	movi	r5,16
   17c54:	2805883a 	mov	r2,r5
   17c58:	003f6006 	br	179dc <__udivdi3+0x64>
   17c5c:	01000044 	movi	r4,1
   17c60:	000b883a 	mov	r5,zero
   17c64:	001976c0 	call	1976c <__udivsi3>
   17c68:	1021883a 	mov	r16,r2
   17c6c:	00bfffd4 	movui	r2,65535
   17c70:	143ff436 	bltu	r2,r16,17c44 <__udivdi3+0x2cc>
   17c74:	003f5506 	br	179cc <__udivdi3+0x54>
   17c78:	00804034 	movhi	r2,256
   17c7c:	10bfffc4 	addi	r2,r2,-1
   17c80:	12009a36 	bltu	r2,r8,17eec <__udivdi3+0x574>
   17c84:	01400404 	movi	r5,16
   17c88:	2805883a 	mov	r2,r5
   17c8c:	003fae06 	br	17b48 <__udivdi3+0x1d0>
   17c90:	3dc5c83a 	sub	r2,r7,r23
   17c94:	35c8983a 	sll	r4,r6,r23
   17c98:	8086d83a 	srl	r3,r16,r2
   17c9c:	a0a2d83a 	srl	r17,r20,r2
   17ca0:	e084d83a 	srl	r2,fp,r2
   17ca4:	20eab03a 	or	r21,r4,r3
   17ca8:	a82cd43a 	srli	r22,r21,16
   17cac:	a5c6983a 	sll	r3,r20,r23
   17cb0:	8809883a 	mov	r4,r17
   17cb4:	b00b883a 	mov	r5,r22
   17cb8:	1886b03a 	or	r3,r3,r2
   17cbc:	d8c00215 	stw	r3,8(sp)
   17cc0:	001976c0 	call	1976c <__udivsi3>
   17cc4:	8809883a 	mov	r4,r17
   17cc8:	b00b883a 	mov	r5,r22
   17ccc:	1029883a 	mov	r20,r2
   17cd0:	00197740 	call	19774 <__umodsi3>
   17cd4:	a8ffffcc 	andi	r3,r21,65535
   17cd8:	d8c00515 	stw	r3,20(sp)
   17cdc:	d9000217 	ldw	r4,8(sp)
   17ce0:	d9400517 	ldw	r5,20(sp)
   17ce4:	1004943a 	slli	r2,r2,16
   17ce8:	2006d43a 	srli	r3,r4,16
   17cec:	85e0983a 	sll	r16,r16,r23
   17cf0:	2d23383a 	mul	r17,r5,r20
   17cf4:	10c4b03a 	or	r2,r2,r3
   17cf8:	dc000015 	stw	r16,0(sp)
   17cfc:	1440032e 	bgeu	r2,r17,17d0c <__udivdi3+0x394>
   17d00:	1545883a 	add	r2,r2,r21
   17d04:	a53fffc4 	addi	r20,r20,-1
   17d08:	15407f2e 	bgeu	r2,r21,17f08 <__udivdi3+0x590>
   17d0c:	1463c83a 	sub	r17,r2,r17
   17d10:	8809883a 	mov	r4,r17
   17d14:	b00b883a 	mov	r5,r22
   17d18:	001976c0 	call	1976c <__udivsi3>
   17d1c:	8809883a 	mov	r4,r17
   17d20:	b00b883a 	mov	r5,r22
   17d24:	1021883a 	mov	r16,r2
   17d28:	00197740 	call	19774 <__umodsi3>
   17d2c:	d8c00517 	ldw	r3,20(sp)
   17d30:	d9000217 	ldw	r4,8(sp)
   17d34:	1004943a 	slli	r2,r2,16
   17d38:	1c0f383a 	mul	r7,r3,r16
   17d3c:	20ffffcc 	andi	r3,r4,65535
   17d40:	10e2b03a 	or	r17,r2,r3
   17d44:	89c0032e 	bgeu	r17,r7,17d54 <__udivdi3+0x3dc>
   17d48:	8d63883a 	add	r17,r17,r21
   17d4c:	843fffc4 	addi	r16,r16,-1
   17d50:	8d40692e 	bgeu	r17,r21,17ef8 <__udivdi3+0x580>
   17d54:	a008943a 	slli	r4,r20,16
   17d58:	d9400017 	ldw	r5,0(sp)
   17d5c:	89e3c83a 	sub	r17,r17,r7
   17d60:	8110b03a 	or	r8,r16,r4
   17d64:	280cd43a 	srli	r6,r5,16
   17d68:	28ffffcc 	andi	r3,r5,65535
   17d6c:	40bfffcc 	andi	r2,r8,65535
   17d70:	400ad43a 	srli	r5,r8,16
   17d74:	10d3383a 	mul	r9,r2,r3
   17d78:	1185383a 	mul	r2,r2,r6
   17d7c:	28c7383a 	mul	r3,r5,r3
   17d80:	4808d43a 	srli	r4,r9,16
   17d84:	298b383a 	mul	r5,r5,r6
   17d88:	10c5883a 	add	r2,r2,r3
   17d8c:	2089883a 	add	r4,r4,r2
   17d90:	20c0022e 	bgeu	r4,r3,17d9c <__udivdi3+0x424>
   17d94:	00800074 	movhi	r2,1
   17d98:	288b883a 	add	r5,r5,r2
   17d9c:	2004d43a 	srli	r2,r4,16
   17da0:	288b883a 	add	r5,r5,r2
   17da4:	89403f36 	bltu	r17,r5,17ea4 <__udivdi3+0x52c>
   17da8:	89403926 	beq	r17,r5,17e90 <__udivdi3+0x518>
   17dac:	4005883a 	mov	r2,r8
   17db0:	0009883a 	mov	r4,zero
   17db4:	003f5106 	br	17afc <__udivdi3+0x184>
   17db8:	85a0983a 	sll	r16,r16,r22
   17dbc:	3585c83a 	sub	r2,r6,r22
   17dc0:	a0a2d83a 	srl	r17,r20,r2
   17dc4:	802ad43a 	srli	r21,r16,16
   17dc8:	e084d83a 	srl	r2,fp,r2
   17dcc:	a586983a 	sll	r3,r20,r22
   17dd0:	8809883a 	mov	r4,r17
   17dd4:	a80b883a 	mov	r5,r21
   17dd8:	1886b03a 	or	r3,r3,r2
   17ddc:	d8c00115 	stw	r3,4(sp)
   17de0:	001976c0 	call	1976c <__udivsi3>
   17de4:	8809883a 	mov	r4,r17
   17de8:	a80b883a 	mov	r5,r21
   17dec:	d8800415 	stw	r2,16(sp)
   17df0:	00197740 	call	19774 <__umodsi3>
   17df4:	d9000117 	ldw	r4,4(sp)
   17df8:	d9400417 	ldw	r5,16(sp)
   17dfc:	1004943a 	slli	r2,r2,16
   17e00:	85ffffcc 	andi	r23,r16,65535
   17e04:	2006d43a 	srli	r3,r4,16
   17e08:	b963383a 	mul	r17,r23,r5
   17e0c:	10c4b03a 	or	r2,r2,r3
   17e10:	1440042e 	bgeu	r2,r17,17e24 <__udivdi3+0x4ac>
   17e14:	297fffc4 	addi	r5,r5,-1
   17e18:	1405883a 	add	r2,r2,r16
   17e1c:	d9400415 	stw	r5,16(sp)
   17e20:	1400442e 	bgeu	r2,r16,17f34 <__udivdi3+0x5bc>
   17e24:	1463c83a 	sub	r17,r2,r17
   17e28:	8809883a 	mov	r4,r17
   17e2c:	a80b883a 	mov	r5,r21
   17e30:	001976c0 	call	1976c <__udivsi3>
   17e34:	8809883a 	mov	r4,r17
   17e38:	a80b883a 	mov	r5,r21
   17e3c:	1029883a 	mov	r20,r2
   17e40:	00197740 	call	19774 <__umodsi3>
   17e44:	d9400117 	ldw	r5,4(sp)
   17e48:	1004943a 	slli	r2,r2,16
   17e4c:	bd09383a 	mul	r4,r23,r20
   17e50:	28ffffcc 	andi	r3,r5,65535
   17e54:	10c6b03a 	or	r3,r2,r3
   17e58:	1900062e 	bgeu	r3,r4,17e74 <__udivdi3+0x4fc>
   17e5c:	1c07883a 	add	r3,r3,r16
   17e60:	a53fffc4 	addi	r20,r20,-1
   17e64:	1c000336 	bltu	r3,r16,17e74 <__udivdi3+0x4fc>
   17e68:	1900022e 	bgeu	r3,r4,17e74 <__udivdi3+0x4fc>
   17e6c:	a53fffc4 	addi	r20,r20,-1
   17e70:	1c07883a 	add	r3,r3,r16
   17e74:	d9400417 	ldw	r5,16(sp)
   17e78:	e5b8983a 	sll	fp,fp,r22
   17e7c:	1923c83a 	sub	r17,r3,r4
   17e80:	2804943a 	slli	r2,r5,16
   17e84:	a0a8b03a 	or	r20,r20,r2
   17e88:	dd000315 	stw	r20,12(sp)
   17e8c:	003ee106 	br	17a14 <__udivdi3+0x9c>
   17e90:	2004943a 	slli	r2,r4,16
   17e94:	e5c8983a 	sll	r4,fp,r23
   17e98:	48ffffcc 	andi	r3,r9,65535
   17e9c:	10c5883a 	add	r2,r2,r3
   17ea0:	20bfc22e 	bgeu	r4,r2,17dac <__udivdi3+0x434>
   17ea4:	40bfffc4 	addi	r2,r8,-1
   17ea8:	0009883a 	mov	r4,zero
   17eac:	003f1306 	br	17afc <__udivdi3+0x184>
   17eb0:	01400204 	movi	r5,8
   17eb4:	2805883a 	mov	r2,r5
   17eb8:	003f0306 	br	17ac8 <__udivdi3+0x150>
   17ebc:	01400604 	movi	r5,24
   17ec0:	2805883a 	mov	r2,r5
   17ec4:	003f0006 	br	17ac8 <__udivdi3+0x150>
   17ec8:	01400204 	movi	r5,8
   17ecc:	2805883a 	mov	r2,r5
   17ed0:	003ec206 	br	179dc <__udivdi3+0x64>
   17ed4:	01400604 	movi	r5,24
   17ed8:	2805883a 	mov	r2,r5
   17edc:	003ebf06 	br	179dc <__udivdi3+0x64>
   17ee0:	01400204 	movi	r5,8
   17ee4:	2805883a 	mov	r2,r5
   17ee8:	003f1706 	br	17b48 <__udivdi3+0x1d0>
   17eec:	01400604 	movi	r5,24
   17ef0:	2805883a 	mov	r2,r5
   17ef4:	003f1406 	br	17b48 <__udivdi3+0x1d0>
   17ef8:	89ff962e 	bgeu	r17,r7,17d54 <__udivdi3+0x3dc>
   17efc:	8d63883a 	add	r17,r17,r21
   17f00:	843fffc4 	addi	r16,r16,-1
   17f04:	003f9306 	br	17d54 <__udivdi3+0x3dc>
   17f08:	147f802e 	bgeu	r2,r17,17d0c <__udivdi3+0x394>
   17f0c:	a53fffc4 	addi	r20,r20,-1
   17f10:	1545883a 	add	r2,r2,r21
   17f14:	003f7d06 	br	17d0c <__udivdi3+0x394>
   17f18:	a53fffc4 	addi	r20,r20,-1
   17f1c:	003ede06 	br	17a98 <__udivdi3+0x120>
   17f20:	b5bfffc4 	addi	r22,r22,-1
   17f24:	1405883a 	add	r2,r2,r16
   17f28:	003f2806 	br	17bcc <__udivdi3+0x254>
   17f2c:	a53fffc4 	addi	r20,r20,-1
   17f30:	003f3706 	br	17c10 <__udivdi3+0x298>
   17f34:	147fbb2e 	bgeu	r2,r17,17e24 <__udivdi3+0x4ac>
   17f38:	297fffc4 	addi	r5,r5,-1
   17f3c:	1405883a 	add	r2,r2,r16
   17f40:	d9400415 	stw	r5,16(sp)
   17f44:	003fb706 	br	17e24 <__udivdi3+0x4ac>
   17f48:	b5bfffc4 	addi	r22,r22,-1
   17f4c:	1405883a 	add	r2,r2,r16
   17f50:	003ec006 	br	17a54 <__udivdi3+0xdc>

00017f54 <__umoddi3>:
   17f54:	defff104 	addi	sp,sp,-60
   17f58:	dd800b15 	stw	r22,44(sp)
   17f5c:	dd000915 	stw	r20,36(sp)
   17f60:	dc000515 	stw	r16,20(sp)
   17f64:	dfc00e15 	stw	ra,56(sp)
   17f68:	df000d15 	stw	fp,52(sp)
   17f6c:	ddc00c15 	stw	r23,48(sp)
   17f70:	dd400a15 	stw	r21,40(sp)
   17f74:	dcc00815 	stw	r19,32(sp)
   17f78:	dc800715 	stw	r18,28(sp)
   17f7c:	dc400615 	stw	r17,24(sp)
   17f80:	3021883a 	mov	r16,r6
   17f84:	202d883a 	mov	r22,r4
   17f88:	2829883a 	mov	r20,r5
   17f8c:	38002b1e 	bne	r7,zero,1803c <__umoddi3+0xe8>
   17f90:	29805036 	bltu	r5,r6,180d4 <__umoddi3+0x180>
   17f94:	30008a26 	beq	r6,zero,181c0 <__umoddi3+0x26c>
   17f98:	00bfffd4 	movui	r2,65535
   17f9c:	14008236 	bltu	r2,r16,181a8 <__umoddi3+0x254>
   17fa0:	00803fc4 	movi	r2,255
   17fa4:	14013636 	bltu	r2,r16,18480 <__umoddi3+0x52c>
   17fa8:	000b883a 	mov	r5,zero
   17fac:	0005883a 	mov	r2,zero
   17fb0:	8084d83a 	srl	r2,r16,r2
   17fb4:	010000f4 	movhi	r4,3
   17fb8:	2120a004 	addi	r4,r4,-32128
   17fbc:	01800804 	movi	r6,32
   17fc0:	1105883a 	add	r2,r2,r4
   17fc4:	10c00003 	ldbu	r3,0(r2)
   17fc8:	28c7883a 	add	r3,r5,r3
   17fcc:	30efc83a 	sub	r23,r6,r3
   17fd0:	b800941e 	bne	r23,zero,18224 <__umoddi3+0x2d0>
   17fd4:	802ad43a 	srli	r21,r16,16
   17fd8:	a423c83a 	sub	r17,r20,r16
   17fdc:	0039883a 	mov	fp,zero
   17fe0:	853fffcc 	andi	r20,r16,65535
   17fe4:	8809883a 	mov	r4,r17
   17fe8:	a80b883a 	mov	r5,r21
   17fec:	001976c0 	call	1976c <__udivsi3>
   17ff0:	8809883a 	mov	r4,r17
   17ff4:	a80b883a 	mov	r5,r21
   17ff8:	a0a3383a 	mul	r17,r20,r2
   17ffc:	00197740 	call	19774 <__umodsi3>
   18000:	1004943a 	slli	r2,r2,16
   18004:	b006d43a 	srli	r3,r22,16
   18008:	10c4b03a 	or	r2,r2,r3
   1800c:	1440032e 	bgeu	r2,r17,1801c <__umoddi3+0xc8>
   18010:	1405883a 	add	r2,r2,r16
   18014:	14000136 	bltu	r2,r16,1801c <__umoddi3+0xc8>
   18018:	14413536 	bltu	r2,r17,184f0 <__umoddi3+0x59c>
   1801c:	1463c83a 	sub	r17,r2,r17
   18020:	8809883a 	mov	r4,r17
   18024:	a80b883a 	mov	r5,r21
   18028:	001976c0 	call	1976c <__udivsi3>
   1802c:	8809883a 	mov	r4,r17
   18030:	a0a3383a 	mul	r17,r20,r2
   18034:	a80b883a 	mov	r5,r21
   18038:	00004d06 	br	18170 <__umoddi3+0x21c>
   1803c:	380d883a 	mov	r6,r7
   18040:	29c0102e 	bgeu	r5,r7,18084 <__umoddi3+0x130>
   18044:	2011883a 	mov	r8,r4
   18048:	2813883a 	mov	r9,r5
   1804c:	4005883a 	mov	r2,r8
   18050:	4807883a 	mov	r3,r9
   18054:	dfc00e17 	ldw	ra,56(sp)
   18058:	df000d17 	ldw	fp,52(sp)
   1805c:	ddc00c17 	ldw	r23,48(sp)
   18060:	dd800b17 	ldw	r22,44(sp)
   18064:	dd400a17 	ldw	r21,40(sp)
   18068:	dd000917 	ldw	r20,36(sp)
   1806c:	dcc00817 	ldw	r19,32(sp)
   18070:	dc800717 	ldw	r18,28(sp)
   18074:	dc400617 	ldw	r17,24(sp)
   18078:	dc000517 	ldw	r16,20(sp)
   1807c:	dec00f04 	addi	sp,sp,60
   18080:	f800283a 	ret
   18084:	00bfffd4 	movui	r2,65535
   18088:	11c05a36 	bltu	r2,r7,181f4 <__umoddi3+0x2a0>
   1808c:	00803fc4 	movi	r2,255
   18090:	11c0fe36 	bltu	r2,r7,1848c <__umoddi3+0x538>
   18094:	000b883a 	mov	r5,zero
   18098:	0005883a 	mov	r2,zero
   1809c:	3084d83a 	srl	r2,r6,r2
   180a0:	010000f4 	movhi	r4,3
   180a4:	2120a004 	addi	r4,r4,-32128
   180a8:	01c00804 	movi	r7,32
   180ac:	1105883a 	add	r2,r2,r4
   180b0:	10c00003 	ldbu	r3,0(r2)
   180b4:	28c7883a 	add	r3,r5,r3
   180b8:	38ebc83a 	sub	r21,r7,r3
   180bc:	a800851e 	bne	r21,zero,182d4 <__umoddi3+0x380>
   180c0:	35005236 	bltu	r6,r20,1820c <__umoddi3+0x2b8>
   180c4:	b400512e 	bgeu	r22,r16,1820c <__umoddi3+0x2b8>
   180c8:	b011883a 	mov	r8,r22
   180cc:	a013883a 	mov	r9,r20
   180d0:	003fde06 	br	1804c <__umoddi3+0xf8>
   180d4:	00bfffd4 	movui	r2,65535
   180d8:	11804036 	bltu	r2,r6,181dc <__umoddi3+0x288>
   180dc:	00803fc4 	movi	r2,255
   180e0:	1180ed36 	bltu	r2,r6,18498 <__umoddi3+0x544>
   180e4:	000b883a 	mov	r5,zero
   180e8:	0005883a 	mov	r2,zero
   180ec:	8084d83a 	srl	r2,r16,r2
   180f0:	010000f4 	movhi	r4,3
   180f4:	2120a004 	addi	r4,r4,-32128
   180f8:	01800804 	movi	r6,32
   180fc:	1105883a 	add	r2,r2,r4
   18100:	10c00003 	ldbu	r3,0(r2)
   18104:	28c7883a 	add	r3,r5,r3
   18108:	30c7c83a 	sub	r3,r6,r3
   1810c:	1800bf1e 	bne	r3,zero,1840c <__umoddi3+0x4b8>
   18110:	0039883a 	mov	fp,zero
   18114:	802ad43a 	srli	r21,r16,16
   18118:	a009883a 	mov	r4,r20
   1811c:	85ffffcc 	andi	r23,r16,65535
   18120:	a80b883a 	mov	r5,r21
   18124:	001976c0 	call	1976c <__udivsi3>
   18128:	a009883a 	mov	r4,r20
   1812c:	a80b883a 	mov	r5,r21
   18130:	b8a3383a 	mul	r17,r23,r2
   18134:	00197740 	call	19774 <__umodsi3>
   18138:	1004943a 	slli	r2,r2,16
   1813c:	b006d43a 	srli	r3,r22,16
   18140:	10c4b03a 	or	r2,r2,r3
   18144:	1440032e 	bgeu	r2,r17,18154 <__umoddi3+0x200>
   18148:	1405883a 	add	r2,r2,r16
   1814c:	14000136 	bltu	r2,r16,18154 <__umoddi3+0x200>
   18150:	1440e536 	bltu	r2,r17,184e8 <__umoddi3+0x594>
   18154:	1463c83a 	sub	r17,r2,r17
   18158:	8809883a 	mov	r4,r17
   1815c:	a80b883a 	mov	r5,r21
   18160:	001976c0 	call	1976c <__udivsi3>
   18164:	8809883a 	mov	r4,r17
   18168:	b8a3383a 	mul	r17,r23,r2
   1816c:	a80b883a 	mov	r5,r21
   18170:	00197740 	call	19774 <__umodsi3>
   18174:	1004943a 	slli	r2,r2,16
   18178:	b0ffffcc 	andi	r3,r22,65535
   1817c:	10c4b03a 	or	r2,r2,r3
   18180:	1440042e 	bgeu	r2,r17,18194 <__umoddi3+0x240>
   18184:	1405883a 	add	r2,r2,r16
   18188:	14000236 	bltu	r2,r16,18194 <__umoddi3+0x240>
   1818c:	1440012e 	bgeu	r2,r17,18194 <__umoddi3+0x240>
   18190:	1405883a 	add	r2,r2,r16
   18194:	1445c83a 	sub	r2,r2,r17
   18198:	1724d83a 	srl	r18,r2,fp
   1819c:	0013883a 	mov	r9,zero
   181a0:	9011883a 	mov	r8,r18
   181a4:	003fa906 	br	1804c <__umoddi3+0xf8>
   181a8:	00804034 	movhi	r2,256
   181ac:	10bfffc4 	addi	r2,r2,-1
   181b0:	1400b036 	bltu	r2,r16,18474 <__umoddi3+0x520>
   181b4:	01400404 	movi	r5,16
   181b8:	2805883a 	mov	r2,r5
   181bc:	003f7c06 	br	17fb0 <__umoddi3+0x5c>
   181c0:	01000044 	movi	r4,1
   181c4:	000b883a 	mov	r5,zero
   181c8:	001976c0 	call	1976c <__udivsi3>
   181cc:	1021883a 	mov	r16,r2
   181d0:	00bfffd4 	movui	r2,65535
   181d4:	143ff436 	bltu	r2,r16,181a8 <__umoddi3+0x254>
   181d8:	003f7106 	br	17fa0 <__umoddi3+0x4c>
   181dc:	00804034 	movhi	r2,256
   181e0:	10bfffc4 	addi	r2,r2,-1
   181e4:	1180af36 	bltu	r2,r6,184a4 <__umoddi3+0x550>
   181e8:	01400404 	movi	r5,16
   181ec:	2805883a 	mov	r2,r5
   181f0:	003fbe06 	br	180ec <__umoddi3+0x198>
   181f4:	00804034 	movhi	r2,256
   181f8:	10bfffc4 	addi	r2,r2,-1
   181fc:	11c0ac36 	bltu	r2,r7,184b0 <__umoddi3+0x55c>
   18200:	01400404 	movi	r5,16
   18204:	2805883a 	mov	r2,r5
   18208:	003fa406 	br	1809c <__umoddi3+0x148>
   1820c:	b409c83a 	sub	r4,r22,r16
   18210:	b105803a 	cmpltu	r2,r22,r4
   18214:	a187c83a 	sub	r3,r20,r6
   18218:	18a9c83a 	sub	r20,r3,r2
   1821c:	202d883a 	mov	r22,r4
   18220:	003fa906 	br	180c8 <__umoddi3+0x174>
   18224:	85e0983a 	sll	r16,r16,r23
   18228:	35c5c83a 	sub	r2,r6,r23
   1822c:	a0a2d83a 	srl	r17,r20,r2
   18230:	802ad43a 	srli	r21,r16,16
   18234:	b084d83a 	srl	r2,r22,r2
   18238:	a5c6983a 	sll	r3,r20,r23
   1823c:	8809883a 	mov	r4,r17
   18240:	a80b883a 	mov	r5,r21
   18244:	1886b03a 	or	r3,r3,r2
   18248:	d8c00115 	stw	r3,4(sp)
   1824c:	853fffcc 	andi	r20,r16,65535
   18250:	001976c0 	call	1976c <__udivsi3>
   18254:	8809883a 	mov	r4,r17
   18258:	a80b883a 	mov	r5,r21
   1825c:	a0a3383a 	mul	r17,r20,r2
   18260:	00197740 	call	19774 <__umodsi3>
   18264:	d9000117 	ldw	r4,4(sp)
   18268:	1004943a 	slli	r2,r2,16
   1826c:	b839883a 	mov	fp,r23
   18270:	2006d43a 	srli	r3,r4,16
   18274:	10c4b03a 	or	r2,r2,r3
   18278:	1440022e 	bgeu	r2,r17,18284 <__umoddi3+0x330>
   1827c:	1405883a 	add	r2,r2,r16
   18280:	1400962e 	bgeu	r2,r16,184dc <__umoddi3+0x588>
   18284:	1463c83a 	sub	r17,r2,r17
   18288:	8809883a 	mov	r4,r17
   1828c:	a80b883a 	mov	r5,r21
   18290:	001976c0 	call	1976c <__udivsi3>
   18294:	8809883a 	mov	r4,r17
   18298:	a80b883a 	mov	r5,r21
   1829c:	a0a3383a 	mul	r17,r20,r2
   182a0:	00197740 	call	19774 <__umodsi3>
   182a4:	d9400117 	ldw	r5,4(sp)
   182a8:	1004943a 	slli	r2,r2,16
   182ac:	28ffffcc 	andi	r3,r5,65535
   182b0:	10c4b03a 	or	r2,r2,r3
   182b4:	1440042e 	bgeu	r2,r17,182c8 <__umoddi3+0x374>
   182b8:	1405883a 	add	r2,r2,r16
   182bc:	14000236 	bltu	r2,r16,182c8 <__umoddi3+0x374>
   182c0:	1440012e 	bgeu	r2,r17,182c8 <__umoddi3+0x374>
   182c4:	1405883a 	add	r2,r2,r16
   182c8:	b5ec983a 	sll	r22,r22,r23
   182cc:	1463c83a 	sub	r17,r2,r17
   182d0:	003f4406 	br	17fe4 <__umoddi3+0x90>
   182d4:	3d4fc83a 	sub	r7,r7,r21
   182d8:	3546983a 	sll	r3,r6,r21
   182dc:	81c4d83a 	srl	r2,r16,r7
   182e0:	a1e2d83a 	srl	r17,r20,r7
   182e4:	a54c983a 	sll	r6,r20,r21
   182e8:	18aeb03a 	or	r23,r3,r2
   182ec:	b828d43a 	srli	r20,r23,16
   182f0:	b1c4d83a 	srl	r2,r22,r7
   182f4:	8809883a 	mov	r4,r17
   182f8:	a00b883a 	mov	r5,r20
   182fc:	308cb03a 	or	r6,r6,r2
   18300:	d9c00315 	stw	r7,12(sp)
   18304:	d9800215 	stw	r6,8(sp)
   18308:	001976c0 	call	1976c <__udivsi3>
   1830c:	8809883a 	mov	r4,r17
   18310:	a00b883a 	mov	r5,r20
   18314:	1039883a 	mov	fp,r2
   18318:	00197740 	call	19774 <__umodsi3>
   1831c:	b8ffffcc 	andi	r3,r23,65535
   18320:	d8c00415 	stw	r3,16(sp)
   18324:	d9000217 	ldw	r4,8(sp)
   18328:	d9400417 	ldw	r5,16(sp)
   1832c:	1004943a 	slli	r2,r2,16
   18330:	2006d43a 	srli	r3,r4,16
   18334:	8560983a 	sll	r16,r16,r21
   18338:	2f23383a 	mul	r17,r5,fp
   1833c:	10c4b03a 	or	r2,r2,r3
   18340:	dc000015 	stw	r16,0(sp)
   18344:	b56c983a 	sll	r22,r22,r21
   18348:	1440032e 	bgeu	r2,r17,18358 <__umoddi3+0x404>
   1834c:	15c5883a 	add	r2,r2,r23
   18350:	e73fffc4 	addi	fp,fp,-1
   18354:	15c05d2e 	bgeu	r2,r23,184cc <__umoddi3+0x578>
   18358:	1463c83a 	sub	r17,r2,r17
   1835c:	8809883a 	mov	r4,r17
   18360:	a00b883a 	mov	r5,r20
   18364:	001976c0 	call	1976c <__udivsi3>
   18368:	8809883a 	mov	r4,r17
   1836c:	a00b883a 	mov	r5,r20
   18370:	1021883a 	mov	r16,r2
   18374:	00197740 	call	19774 <__umodsi3>
   18378:	d8c00417 	ldw	r3,16(sp)
   1837c:	d9000217 	ldw	r4,8(sp)
   18380:	1004943a 	slli	r2,r2,16
   18384:	1c23383a 	mul	r17,r3,r16
   18388:	20ffffcc 	andi	r3,r4,65535
   1838c:	10ceb03a 	or	r7,r2,r3
   18390:	3c40032e 	bgeu	r7,r17,183a0 <__umoddi3+0x44c>
   18394:	3dcf883a 	add	r7,r7,r23
   18398:	843fffc4 	addi	r16,r16,-1
   1839c:	3dc0472e 	bgeu	r7,r23,184bc <__umoddi3+0x568>
   183a0:	e004943a 	slli	r2,fp,16
   183a4:	d9400017 	ldw	r5,0(sp)
   183a8:	3c4fc83a 	sub	r7,r7,r17
   183ac:	8084b03a 	or	r2,r16,r2
   183b0:	28ffffcc 	andi	r3,r5,65535
   183b4:	280cd43a 	srli	r6,r5,16
   183b8:	100ad43a 	srli	r5,r2,16
   183bc:	10bfffcc 	andi	r2,r2,65535
   183c0:	10d1383a 	mul	r8,r2,r3
   183c4:	28c7383a 	mul	r3,r5,r3
   183c8:	1185383a 	mul	r2,r2,r6
   183cc:	4008d43a 	srli	r4,r8,16
   183d0:	298b383a 	mul	r5,r5,r6
   183d4:	10c5883a 	add	r2,r2,r3
   183d8:	2089883a 	add	r4,r4,r2
   183dc:	20c0022e 	bgeu	r4,r3,183e8 <__umoddi3+0x494>
   183e0:	00800074 	movhi	r2,1
   183e4:	288b883a 	add	r5,r5,r2
   183e8:	2004d43a 	srli	r2,r4,16
   183ec:	2008943a 	slli	r4,r4,16
   183f0:	40ffffcc 	andi	r3,r8,65535
   183f4:	288b883a 	add	r5,r5,r2
   183f8:	20c9883a 	add	r4,r4,r3
   183fc:	39400b36 	bltu	r7,r5,1842c <__umoddi3+0x4d8>
   18400:	39403d26 	beq	r7,r5,184f8 <__umoddi3+0x5a4>
   18404:	394bc83a 	sub	r5,r7,r5
   18408:	00000f06 	br	18448 <__umoddi3+0x4f4>
   1840c:	30c5c83a 	sub	r2,r6,r3
   18410:	1839883a 	mov	fp,r3
   18414:	b084d83a 	srl	r2,r22,r2
   18418:	a0c6983a 	sll	r3,r20,r3
   1841c:	8720983a 	sll	r16,r16,fp
   18420:	b72c983a 	sll	r22,r22,fp
   18424:	18a8b03a 	or	r20,r3,r2
   18428:	003f3a06 	br	18114 <__umoddi3+0x1c0>
   1842c:	d8c00017 	ldw	r3,0(sp)
   18430:	20c5c83a 	sub	r2,r4,r3
   18434:	2089803a 	cmpltu	r4,r4,r2
   18438:	2dc7c83a 	sub	r3,r5,r23
   1843c:	1907c83a 	sub	r3,r3,r4
   18440:	38cbc83a 	sub	r5,r7,r3
   18444:	1009883a 	mov	r4,r2
   18448:	b105c83a 	sub	r2,r22,r4
   1844c:	b087803a 	cmpltu	r3,r22,r2
   18450:	28c7c83a 	sub	r3,r5,r3
   18454:	d9400317 	ldw	r5,12(sp)
   18458:	1544d83a 	srl	r2,r2,r21
   1845c:	1948983a 	sll	r4,r3,r5
   18460:	1d46d83a 	srl	r3,r3,r21
   18464:	20a4b03a 	or	r18,r4,r2
   18468:	9011883a 	mov	r8,r18
   1846c:	1813883a 	mov	r9,r3
   18470:	003ef606 	br	1804c <__umoddi3+0xf8>
   18474:	01400604 	movi	r5,24
   18478:	2805883a 	mov	r2,r5
   1847c:	003ecc06 	br	17fb0 <__umoddi3+0x5c>
   18480:	01400204 	movi	r5,8
   18484:	2805883a 	mov	r2,r5
   18488:	003ec906 	br	17fb0 <__umoddi3+0x5c>
   1848c:	01400204 	movi	r5,8
   18490:	2805883a 	mov	r2,r5
   18494:	003f0106 	br	1809c <__umoddi3+0x148>
   18498:	01400204 	movi	r5,8
   1849c:	2805883a 	mov	r2,r5
   184a0:	003f1206 	br	180ec <__umoddi3+0x198>
   184a4:	01400604 	movi	r5,24
   184a8:	2805883a 	mov	r2,r5
   184ac:	003f0f06 	br	180ec <__umoddi3+0x198>
   184b0:	01400604 	movi	r5,24
   184b4:	2805883a 	mov	r2,r5
   184b8:	003ef806 	br	1809c <__umoddi3+0x148>
   184bc:	3c7fb82e 	bgeu	r7,r17,183a0 <__umoddi3+0x44c>
   184c0:	843fffc4 	addi	r16,r16,-1
   184c4:	3dcf883a 	add	r7,r7,r23
   184c8:	003fb506 	br	183a0 <__umoddi3+0x44c>
   184cc:	147fa22e 	bgeu	r2,r17,18358 <__umoddi3+0x404>
   184d0:	e73fffc4 	addi	fp,fp,-1
   184d4:	15c5883a 	add	r2,r2,r23
   184d8:	003f9f06 	br	18358 <__umoddi3+0x404>
   184dc:	147f692e 	bgeu	r2,r17,18284 <__umoddi3+0x330>
   184e0:	1405883a 	add	r2,r2,r16
   184e4:	003f6706 	br	18284 <__umoddi3+0x330>
   184e8:	1405883a 	add	r2,r2,r16
   184ec:	003f1906 	br	18154 <__umoddi3+0x200>
   184f0:	1405883a 	add	r2,r2,r16
   184f4:	003ec906 	br	1801c <__umoddi3+0xc8>
   184f8:	b13fcc36 	bltu	r22,r4,1842c <__umoddi3+0x4d8>
   184fc:	000b883a 	mov	r5,zero
   18500:	003fd106 	br	18448 <__umoddi3+0x4f4>

00018504 <_fpadd_parts>:
   18504:	defff804 	addi	sp,sp,-32
   18508:	dcc00315 	stw	r19,12(sp)
   1850c:	2027883a 	mov	r19,r4
   18510:	21000017 	ldw	r4,0(r4)
   18514:	00c00044 	movi	r3,1
   18518:	dd400515 	stw	r21,20(sp)
   1851c:	dd000415 	stw	r20,16(sp)
   18520:	ddc00715 	stw	r23,28(sp)
   18524:	dd800615 	stw	r22,24(sp)
   18528:	dc800215 	stw	r18,8(sp)
   1852c:	dc400115 	stw	r17,4(sp)
   18530:	dc000015 	stw	r16,0(sp)
   18534:	282b883a 	mov	r21,r5
   18538:	3029883a 	mov	r20,r6
   1853c:	1900632e 	bgeu	r3,r4,186cc <_fpadd_parts+0x1c8>
   18540:	28800017 	ldw	r2,0(r5)
   18544:	1880812e 	bgeu	r3,r2,1874c <_fpadd_parts+0x248>
   18548:	00c00104 	movi	r3,4
   1854c:	20c0dc26 	beq	r4,r3,188c0 <_fpadd_parts+0x3bc>
   18550:	10c07e26 	beq	r2,r3,1874c <_fpadd_parts+0x248>
   18554:	00c00084 	movi	r3,2
   18558:	10c06726 	beq	r2,r3,186f8 <_fpadd_parts+0x1f4>
   1855c:	20c07b26 	beq	r4,r3,1874c <_fpadd_parts+0x248>
   18560:	9dc00217 	ldw	r23,8(r19)
   18564:	28c00217 	ldw	r3,8(r5)
   18568:	9c400317 	ldw	r17,12(r19)
   1856c:	2bc00317 	ldw	r15,12(r5)
   18570:	b8cdc83a 	sub	r6,r23,r3
   18574:	9c800417 	ldw	r18,16(r19)
   18578:	2c000417 	ldw	r16,16(r5)
   1857c:	3009883a 	mov	r4,r6
   18580:	30009716 	blt	r6,zero,187e0 <_fpadd_parts+0x2dc>
   18584:	00800fc4 	movi	r2,63
   18588:	11806b16 	blt	r2,r6,18738 <_fpadd_parts+0x234>
   1858c:	0100a40e 	bge	zero,r4,18820 <_fpadd_parts+0x31c>
   18590:	35bff804 	addi	r22,r6,-32
   18594:	b000bc16 	blt	r22,zero,18888 <_fpadd_parts+0x384>
   18598:	8596d83a 	srl	r11,r16,r22
   1859c:	0019883a 	mov	r12,zero
   185a0:	0013883a 	mov	r9,zero
   185a4:	01000044 	movi	r4,1
   185a8:	0015883a 	mov	r10,zero
   185ac:	b000be16 	blt	r22,zero,188a8 <_fpadd_parts+0x3a4>
   185b0:	2590983a 	sll	r8,r4,r22
   185b4:	000f883a 	mov	r7,zero
   185b8:	00bfffc4 	movi	r2,-1
   185bc:	3889883a 	add	r4,r7,r2
   185c0:	408b883a 	add	r5,r8,r2
   185c4:	21cd803a 	cmpltu	r6,r4,r7
   185c8:	314b883a 	add	r5,r6,r5
   185cc:	7904703a 	and	r2,r15,r4
   185d0:	8146703a 	and	r3,r16,r5
   185d4:	10c4b03a 	or	r2,r2,r3
   185d8:	10000226 	beq	r2,zero,185e4 <_fpadd_parts+0xe0>
   185dc:	02400044 	movi	r9,1
   185e0:	0015883a 	mov	r10,zero
   185e4:	5a5eb03a 	or	r15,r11,r9
   185e8:	62a0b03a 	or	r16,r12,r10
   185ec:	99400117 	ldw	r5,4(r19)
   185f0:	a8800117 	ldw	r2,4(r21)
   185f4:	28806e26 	beq	r5,r2,187b0 <_fpadd_parts+0x2ac>
   185f8:	28006626 	beq	r5,zero,18794 <_fpadd_parts+0x290>
   185fc:	7c45c83a 	sub	r2,r15,r17
   18600:	7889803a 	cmpltu	r4,r15,r2
   18604:	8487c83a 	sub	r3,r16,r18
   18608:	1909c83a 	sub	r4,r3,r4
   1860c:	100d883a 	mov	r6,r2
   18610:	200f883a 	mov	r7,r4
   18614:	38007716 	blt	r7,zero,187f4 <_fpadd_parts+0x2f0>
   18618:	a5c00215 	stw	r23,8(r20)
   1861c:	a1c00415 	stw	r7,16(r20)
   18620:	a0000115 	stw	zero,4(r20)
   18624:	a1800315 	stw	r6,12(r20)
   18628:	a2000317 	ldw	r8,12(r20)
   1862c:	a2400417 	ldw	r9,16(r20)
   18630:	00bfffc4 	movi	r2,-1
   18634:	408b883a 	add	r5,r8,r2
   18638:	2a09803a 	cmpltu	r4,r5,r8
   1863c:	488d883a 	add	r6,r9,r2
   18640:	01c40034 	movhi	r7,4096
   18644:	39ffffc4 	addi	r7,r7,-1
   18648:	218d883a 	add	r6,r4,r6
   1864c:	39801736 	bltu	r7,r6,186ac <_fpadd_parts+0x1a8>
   18650:	31c06526 	beq	r6,r7,187e8 <_fpadd_parts+0x2e4>
   18654:	a3000217 	ldw	r12,8(r20)
   18658:	4209883a 	add	r4,r8,r8
   1865c:	00bfffc4 	movi	r2,-1
   18660:	220f803a 	cmpltu	r7,r4,r8
   18664:	4a4b883a 	add	r5,r9,r9
   18668:	394f883a 	add	r7,r7,r5
   1866c:	2095883a 	add	r10,r4,r2
   18670:	3897883a 	add	r11,r7,r2
   18674:	510d803a 	cmpltu	r6,r10,r4
   18678:	6099883a 	add	r12,r12,r2
   1867c:	32d7883a 	add	r11,r6,r11
   18680:	00840034 	movhi	r2,4096
   18684:	10bfffc4 	addi	r2,r2,-1
   18688:	2011883a 	mov	r8,r4
   1868c:	3813883a 	mov	r9,r7
   18690:	a1000315 	stw	r4,12(r20)
   18694:	a1c00415 	stw	r7,16(r20)
   18698:	a3000215 	stw	r12,8(r20)
   1869c:	12c00336 	bltu	r2,r11,186ac <_fpadd_parts+0x1a8>
   186a0:	58bfed1e 	bne	r11,r2,18658 <_fpadd_parts+0x154>
   186a4:	00bfff84 	movi	r2,-2
   186a8:	12bfeb2e 	bgeu	r2,r10,18658 <_fpadd_parts+0x154>
   186ac:	a2800417 	ldw	r10,16(r20)
   186b0:	008000c4 	movi	r2,3
   186b4:	00c80034 	movhi	r3,8192
   186b8:	18ffffc4 	addi	r3,r3,-1
   186bc:	a2400317 	ldw	r9,12(r20)
   186c0:	a0800015 	stw	r2,0(r20)
   186c4:	1a802336 	bltu	r3,r10,18754 <_fpadd_parts+0x250>
   186c8:	a027883a 	mov	r19,r20
   186cc:	9805883a 	mov	r2,r19
   186d0:	ddc00717 	ldw	r23,28(sp)
   186d4:	dd800617 	ldw	r22,24(sp)
   186d8:	dd400517 	ldw	r21,20(sp)
   186dc:	dd000417 	ldw	r20,16(sp)
   186e0:	dcc00317 	ldw	r19,12(sp)
   186e4:	dc800217 	ldw	r18,8(sp)
   186e8:	dc400117 	ldw	r17,4(sp)
   186ec:	dc000017 	ldw	r16,0(sp)
   186f0:	dec00804 	addi	sp,sp,32
   186f4:	f800283a 	ret
   186f8:	20fff41e 	bne	r4,r3,186cc <_fpadd_parts+0x1c8>
   186fc:	31000015 	stw	r4,0(r6)
   18700:	98800117 	ldw	r2,4(r19)
   18704:	30800115 	stw	r2,4(r6)
   18708:	98c00217 	ldw	r3,8(r19)
   1870c:	30c00215 	stw	r3,8(r6)
   18710:	98800317 	ldw	r2,12(r19)
   18714:	30800315 	stw	r2,12(r6)
   18718:	98c00417 	ldw	r3,16(r19)
   1871c:	30c00415 	stw	r3,16(r6)
   18720:	98800117 	ldw	r2,4(r19)
   18724:	28c00117 	ldw	r3,4(r5)
   18728:	3027883a 	mov	r19,r6
   1872c:	10c4703a 	and	r2,r2,r3
   18730:	30800115 	stw	r2,4(r6)
   18734:	003fe506 	br	186cc <_fpadd_parts+0x1c8>
   18738:	1dc02616 	blt	r3,r23,187d4 <_fpadd_parts+0x2d0>
   1873c:	0023883a 	mov	r17,zero
   18740:	182f883a 	mov	r23,r3
   18744:	0025883a 	mov	r18,zero
   18748:	003fa806 	br	185ec <_fpadd_parts+0xe8>
   1874c:	a827883a 	mov	r19,r21
   18750:	003fde06 	br	186cc <_fpadd_parts+0x1c8>
   18754:	01800044 	movi	r6,1
   18758:	500497fa 	slli	r2,r10,31
   1875c:	4808d07a 	srli	r4,r9,1
   18760:	518ad83a 	srl	r5,r10,r6
   18764:	a2000217 	ldw	r8,8(r20)
   18768:	1108b03a 	or	r4,r2,r4
   1876c:	0007883a 	mov	r3,zero
   18770:	4984703a 	and	r2,r9,r6
   18774:	208cb03a 	or	r6,r4,r2
   18778:	28ceb03a 	or	r7,r5,r3
   1877c:	42000044 	addi	r8,r8,1
   18780:	a027883a 	mov	r19,r20
   18784:	a1c00415 	stw	r7,16(r20)
   18788:	a2000215 	stw	r8,8(r20)
   1878c:	a1800315 	stw	r6,12(r20)
   18790:	003fce06 	br	186cc <_fpadd_parts+0x1c8>
   18794:	8bc5c83a 	sub	r2,r17,r15
   18798:	8889803a 	cmpltu	r4,r17,r2
   1879c:	9407c83a 	sub	r3,r18,r16
   187a0:	1909c83a 	sub	r4,r3,r4
   187a4:	100d883a 	mov	r6,r2
   187a8:	200f883a 	mov	r7,r4
   187ac:	003f9906 	br	18614 <_fpadd_parts+0x110>
   187b0:	7c45883a 	add	r2,r15,r17
   187b4:	13c9803a 	cmpltu	r4,r2,r15
   187b8:	8487883a 	add	r3,r16,r18
   187bc:	20c9883a 	add	r4,r4,r3
   187c0:	a1400115 	stw	r5,4(r20)
   187c4:	a5c00215 	stw	r23,8(r20)
   187c8:	a0800315 	stw	r2,12(r20)
   187cc:	a1000415 	stw	r4,16(r20)
   187d0:	003fb606 	br	186ac <_fpadd_parts+0x1a8>
   187d4:	001f883a 	mov	r15,zero
   187d8:	0021883a 	mov	r16,zero
   187dc:	003f8306 	br	185ec <_fpadd_parts+0xe8>
   187e0:	018dc83a 	sub	r6,zero,r6
   187e4:	003f6706 	br	18584 <_fpadd_parts+0x80>
   187e8:	00bfff84 	movi	r2,-2
   187ec:	117faf36 	bltu	r2,r5,186ac <_fpadd_parts+0x1a8>
   187f0:	003f9806 	br	18654 <_fpadd_parts+0x150>
   187f4:	0005883a 	mov	r2,zero
   187f8:	1189c83a 	sub	r4,r2,r6
   187fc:	1105803a 	cmpltu	r2,r2,r4
   18800:	01cbc83a 	sub	r5,zero,r7
   18804:	2885c83a 	sub	r2,r5,r2
   18808:	01800044 	movi	r6,1
   1880c:	a1800115 	stw	r6,4(r20)
   18810:	a5c00215 	stw	r23,8(r20)
   18814:	a1000315 	stw	r4,12(r20)
   18818:	a0800415 	stw	r2,16(r20)
   1881c:	003f8206 	br	18628 <_fpadd_parts+0x124>
   18820:	203f7226 	beq	r4,zero,185ec <_fpadd_parts+0xe8>
   18824:	35bff804 	addi	r22,r6,-32
   18828:	b9af883a 	add	r23,r23,r6
   1882c:	b0003116 	blt	r22,zero,188f4 <_fpadd_parts+0x3f0>
   18830:	959ad83a 	srl	r13,r18,r22
   18834:	001d883a 	mov	r14,zero
   18838:	000f883a 	mov	r7,zero
   1883c:	01000044 	movi	r4,1
   18840:	0011883a 	mov	r8,zero
   18844:	b0002516 	blt	r22,zero,188dc <_fpadd_parts+0x3d8>
   18848:	2594983a 	sll	r10,r4,r22
   1884c:	0013883a 	mov	r9,zero
   18850:	00bfffc4 	movi	r2,-1
   18854:	4889883a 	add	r4,r9,r2
   18858:	508b883a 	add	r5,r10,r2
   1885c:	224d803a 	cmpltu	r6,r4,r9
   18860:	314b883a 	add	r5,r6,r5
   18864:	8904703a 	and	r2,r17,r4
   18868:	9146703a 	and	r3,r18,r5
   1886c:	10c4b03a 	or	r2,r2,r3
   18870:	10000226 	beq	r2,zero,1887c <_fpadd_parts+0x378>
   18874:	01c00044 	movi	r7,1
   18878:	0011883a 	mov	r8,zero
   1887c:	69e2b03a 	or	r17,r13,r7
   18880:	7224b03a 	or	r18,r14,r8
   18884:	003f5906 	br	185ec <_fpadd_parts+0xe8>
   18888:	8407883a 	add	r3,r16,r16
   1888c:	008007c4 	movi	r2,31
   18890:	1185c83a 	sub	r2,r2,r6
   18894:	1886983a 	sll	r3,r3,r2
   18898:	7996d83a 	srl	r11,r15,r6
   1889c:	8198d83a 	srl	r12,r16,r6
   188a0:	1ad6b03a 	or	r11,r3,r11
   188a4:	003f3e06 	br	185a0 <_fpadd_parts+0x9c>
   188a8:	2006d07a 	srli	r3,r4,1
   188ac:	008007c4 	movi	r2,31
   188b0:	1185c83a 	sub	r2,r2,r6
   188b4:	1890d83a 	srl	r8,r3,r2
   188b8:	218e983a 	sll	r7,r4,r6
   188bc:	003f3e06 	br	185b8 <_fpadd_parts+0xb4>
   188c0:	113f821e 	bne	r2,r4,186cc <_fpadd_parts+0x1c8>
   188c4:	28c00117 	ldw	r3,4(r5)
   188c8:	98800117 	ldw	r2,4(r19)
   188cc:	10ff7f26 	beq	r2,r3,186cc <_fpadd_parts+0x1c8>
   188d0:	04c000f4 	movhi	r19,3
   188d4:	9ce09b04 	addi	r19,r19,-32148
   188d8:	003f7c06 	br	186cc <_fpadd_parts+0x1c8>
   188dc:	2006d07a 	srli	r3,r4,1
   188e0:	008007c4 	movi	r2,31
   188e4:	1185c83a 	sub	r2,r2,r6
   188e8:	1894d83a 	srl	r10,r3,r2
   188ec:	2192983a 	sll	r9,r4,r6
   188f0:	003fd706 	br	18850 <_fpadd_parts+0x34c>
   188f4:	9487883a 	add	r3,r18,r18
   188f8:	008007c4 	movi	r2,31
   188fc:	1185c83a 	sub	r2,r2,r6
   18900:	1886983a 	sll	r3,r3,r2
   18904:	899ad83a 	srl	r13,r17,r6
   18908:	919cd83a 	srl	r14,r18,r6
   1890c:	1b5ab03a 	or	r13,r3,r13
   18910:	003fc906 	br	18838 <_fpadd_parts+0x334>

00018914 <__subdf3>:
   18914:	deffea04 	addi	sp,sp,-88
   18918:	dcc01415 	stw	r19,80(sp)
   1891c:	dcc00404 	addi	r19,sp,16
   18920:	2011883a 	mov	r8,r4
   18924:	2813883a 	mov	r9,r5
   18928:	dc401315 	stw	r17,76(sp)
   1892c:	d809883a 	mov	r4,sp
   18930:	980b883a 	mov	r5,r19
   18934:	dc400904 	addi	r17,sp,36
   18938:	dfc01515 	stw	ra,84(sp)
   1893c:	da400115 	stw	r9,4(sp)
   18940:	d9c00315 	stw	r7,12(sp)
   18944:	da000015 	stw	r8,0(sp)
   18948:	d9800215 	stw	r6,8(sp)
   1894c:	0019ba80 	call	19ba8 <__unpack_d>
   18950:	d9000204 	addi	r4,sp,8
   18954:	880b883a 	mov	r5,r17
   18958:	0019ba80 	call	19ba8 <__unpack_d>
   1895c:	d8800a17 	ldw	r2,40(sp)
   18960:	880b883a 	mov	r5,r17
   18964:	9809883a 	mov	r4,r19
   18968:	d9800e04 	addi	r6,sp,56
   1896c:	1080005c 	xori	r2,r2,1
   18970:	d8800a15 	stw	r2,40(sp)
   18974:	00185040 	call	18504 <_fpadd_parts>
   18978:	1009883a 	mov	r4,r2
   1897c:	00198940 	call	19894 <__pack_d>
   18980:	dfc01517 	ldw	ra,84(sp)
   18984:	dcc01417 	ldw	r19,80(sp)
   18988:	dc401317 	ldw	r17,76(sp)
   1898c:	dec01604 	addi	sp,sp,88
   18990:	f800283a 	ret

00018994 <__adddf3>:
   18994:	deffea04 	addi	sp,sp,-88
   18998:	dcc01415 	stw	r19,80(sp)
   1899c:	dcc00404 	addi	r19,sp,16
   189a0:	2011883a 	mov	r8,r4
   189a4:	2813883a 	mov	r9,r5
   189a8:	dc401315 	stw	r17,76(sp)
   189ac:	d809883a 	mov	r4,sp
   189b0:	980b883a 	mov	r5,r19
   189b4:	dc400904 	addi	r17,sp,36
   189b8:	dfc01515 	stw	ra,84(sp)
   189bc:	da400115 	stw	r9,4(sp)
   189c0:	d9c00315 	stw	r7,12(sp)
   189c4:	da000015 	stw	r8,0(sp)
   189c8:	d9800215 	stw	r6,8(sp)
   189cc:	0019ba80 	call	19ba8 <__unpack_d>
   189d0:	d9000204 	addi	r4,sp,8
   189d4:	880b883a 	mov	r5,r17
   189d8:	0019ba80 	call	19ba8 <__unpack_d>
   189dc:	d9800e04 	addi	r6,sp,56
   189e0:	9809883a 	mov	r4,r19
   189e4:	880b883a 	mov	r5,r17
   189e8:	00185040 	call	18504 <_fpadd_parts>
   189ec:	1009883a 	mov	r4,r2
   189f0:	00198940 	call	19894 <__pack_d>
   189f4:	dfc01517 	ldw	ra,84(sp)
   189f8:	dcc01417 	ldw	r19,80(sp)
   189fc:	dc401317 	ldw	r17,76(sp)
   18a00:	dec01604 	addi	sp,sp,88
   18a04:	f800283a 	ret

00018a08 <__muldf3>:
   18a08:	deffe004 	addi	sp,sp,-128
   18a0c:	dc401815 	stw	r17,96(sp)
   18a10:	dc400404 	addi	r17,sp,16
   18a14:	2011883a 	mov	r8,r4
   18a18:	2813883a 	mov	r9,r5
   18a1c:	dc001715 	stw	r16,92(sp)
   18a20:	d809883a 	mov	r4,sp
   18a24:	880b883a 	mov	r5,r17
   18a28:	dc000904 	addi	r16,sp,36
   18a2c:	dfc01f15 	stw	ra,124(sp)
   18a30:	da400115 	stw	r9,4(sp)
   18a34:	d9c00315 	stw	r7,12(sp)
   18a38:	da000015 	stw	r8,0(sp)
   18a3c:	d9800215 	stw	r6,8(sp)
   18a40:	ddc01e15 	stw	r23,120(sp)
   18a44:	dd801d15 	stw	r22,116(sp)
   18a48:	dd401c15 	stw	r21,112(sp)
   18a4c:	dd001b15 	stw	r20,108(sp)
   18a50:	dcc01a15 	stw	r19,104(sp)
   18a54:	dc801915 	stw	r18,100(sp)
   18a58:	0019ba80 	call	19ba8 <__unpack_d>
   18a5c:	d9000204 	addi	r4,sp,8
   18a60:	800b883a 	mov	r5,r16
   18a64:	0019ba80 	call	19ba8 <__unpack_d>
   18a68:	d9000417 	ldw	r4,16(sp)
   18a6c:	00800044 	movi	r2,1
   18a70:	1100102e 	bgeu	r2,r4,18ab4 <__muldf3+0xac>
   18a74:	d8c00917 	ldw	r3,36(sp)
   18a78:	10c0062e 	bgeu	r2,r3,18a94 <__muldf3+0x8c>
   18a7c:	00800104 	movi	r2,4
   18a80:	20800a26 	beq	r4,r2,18aac <__muldf3+0xa4>
   18a84:	1880cc26 	beq	r3,r2,18db8 <__muldf3+0x3b0>
   18a88:	00800084 	movi	r2,2
   18a8c:	20800926 	beq	r4,r2,18ab4 <__muldf3+0xac>
   18a90:	1880191e 	bne	r3,r2,18af8 <__muldf3+0xf0>
   18a94:	d8c00a17 	ldw	r3,40(sp)
   18a98:	d8800517 	ldw	r2,20(sp)
   18a9c:	8009883a 	mov	r4,r16
   18aa0:	10c4c03a 	cmpne	r2,r2,r3
   18aa4:	d8800a15 	stw	r2,40(sp)
   18aa8:	00000706 	br	18ac8 <__muldf3+0xc0>
   18aac:	00800084 	movi	r2,2
   18ab0:	1880c326 	beq	r3,r2,18dc0 <__muldf3+0x3b8>
   18ab4:	d8800517 	ldw	r2,20(sp)
   18ab8:	d8c00a17 	ldw	r3,40(sp)
   18abc:	8809883a 	mov	r4,r17
   18ac0:	10c4c03a 	cmpne	r2,r2,r3
   18ac4:	d8800515 	stw	r2,20(sp)
   18ac8:	00198940 	call	19894 <__pack_d>
   18acc:	dfc01f17 	ldw	ra,124(sp)
   18ad0:	ddc01e17 	ldw	r23,120(sp)
   18ad4:	dd801d17 	ldw	r22,116(sp)
   18ad8:	dd401c17 	ldw	r21,112(sp)
   18adc:	dd001b17 	ldw	r20,108(sp)
   18ae0:	dcc01a17 	ldw	r19,104(sp)
   18ae4:	dc801917 	ldw	r18,100(sp)
   18ae8:	dc401817 	ldw	r17,96(sp)
   18aec:	dc001717 	ldw	r16,92(sp)
   18af0:	dec02004 	addi	sp,sp,128
   18af4:	f800283a 	ret
   18af8:	dd800717 	ldw	r22,28(sp)
   18afc:	dc800c17 	ldw	r18,48(sp)
   18b00:	002b883a 	mov	r21,zero
   18b04:	0023883a 	mov	r17,zero
   18b08:	a80b883a 	mov	r5,r21
   18b0c:	b00d883a 	mov	r6,r22
   18b10:	880f883a 	mov	r7,r17
   18b14:	ddc00817 	ldw	r23,32(sp)
   18b18:	dcc00d17 	ldw	r19,52(sp)
   18b1c:	9009883a 	mov	r4,r18
   18b20:	001977c0 	call	1977c <__muldi3>
   18b24:	001b883a 	mov	r13,zero
   18b28:	680f883a 	mov	r7,r13
   18b2c:	b009883a 	mov	r4,r22
   18b30:	000b883a 	mov	r5,zero
   18b34:	980d883a 	mov	r6,r19
   18b38:	b82d883a 	mov	r22,r23
   18b3c:	002f883a 	mov	r23,zero
   18b40:	db401615 	stw	r13,88(sp)
   18b44:	d8801315 	stw	r2,76(sp)
   18b48:	d8c01415 	stw	r3,80(sp)
   18b4c:	dcc01515 	stw	r19,84(sp)
   18b50:	001977c0 	call	1977c <__muldi3>
   18b54:	b00d883a 	mov	r6,r22
   18b58:	000b883a 	mov	r5,zero
   18b5c:	9009883a 	mov	r4,r18
   18b60:	b80f883a 	mov	r7,r23
   18b64:	1021883a 	mov	r16,r2
   18b68:	1823883a 	mov	r17,r3
   18b6c:	001977c0 	call	1977c <__muldi3>
   18b70:	8085883a 	add	r2,r16,r2
   18b74:	140d803a 	cmpltu	r6,r2,r16
   18b78:	88c7883a 	add	r3,r17,r3
   18b7c:	30cd883a 	add	r6,r6,r3
   18b80:	1029883a 	mov	r20,r2
   18b84:	302b883a 	mov	r21,r6
   18b88:	da801317 	ldw	r10,76(sp)
   18b8c:	dac01417 	ldw	r11,80(sp)
   18b90:	db001517 	ldw	r12,84(sp)
   18b94:	db401617 	ldw	r13,88(sp)
   18b98:	3440612e 	bgeu	r6,r17,18d20 <__muldf3+0x318>
   18b9c:	0009883a 	mov	r4,zero
   18ba0:	5105883a 	add	r2,r10,r4
   18ba4:	128d803a 	cmpltu	r6,r2,r10
   18ba8:	5d07883a 	add	r3,r11,r20
   18bac:	30cd883a 	add	r6,r6,r3
   18bb0:	0021883a 	mov	r16,zero
   18bb4:	04400044 	movi	r17,1
   18bb8:	1025883a 	mov	r18,r2
   18bbc:	3027883a 	mov	r19,r6
   18bc0:	32c06236 	bltu	r6,r11,18d4c <__muldf3+0x344>
   18bc4:	59807a26 	beq	r11,r6,18db0 <__muldf3+0x3a8>
   18bc8:	680b883a 	mov	r5,r13
   18bcc:	b80f883a 	mov	r7,r23
   18bd0:	6009883a 	mov	r4,r12
   18bd4:	b00d883a 	mov	r6,r22
   18bd8:	001977c0 	call	1977c <__muldi3>
   18bdc:	1009883a 	mov	r4,r2
   18be0:	000f883a 	mov	r7,zero
   18be4:	1545883a 	add	r2,r2,r21
   18be8:	1111803a 	cmpltu	r8,r2,r4
   18bec:	19c7883a 	add	r3,r3,r7
   18bf0:	40c7883a 	add	r3,r8,r3
   18bf4:	88cb883a 	add	r5,r17,r3
   18bf8:	d8c00617 	ldw	r3,24(sp)
   18bfc:	8089883a 	add	r4,r16,r2
   18c00:	d8800b17 	ldw	r2,44(sp)
   18c04:	18c00104 	addi	r3,r3,4
   18c08:	240d803a 	cmpltu	r6,r4,r16
   18c0c:	10c7883a 	add	r3,r2,r3
   18c10:	2013883a 	mov	r9,r4
   18c14:	d8800a17 	ldw	r2,40(sp)
   18c18:	d9000517 	ldw	r4,20(sp)
   18c1c:	314d883a 	add	r6,r6,r5
   18c20:	3015883a 	mov	r10,r6
   18c24:	2088c03a 	cmpne	r4,r4,r2
   18c28:	00880034 	movhi	r2,8192
   18c2c:	10bfffc4 	addi	r2,r2,-1
   18c30:	d9000f15 	stw	r4,60(sp)
   18c34:	d8c01015 	stw	r3,64(sp)
   18c38:	1180162e 	bgeu	r2,r6,18c94 <__muldf3+0x28c>
   18c3c:	1811883a 	mov	r8,r3
   18c40:	101f883a 	mov	r15,r2
   18c44:	980497fa 	slli	r2,r19,31
   18c48:	9016d07a 	srli	r11,r18,1
   18c4c:	500697fa 	slli	r3,r10,31
   18c50:	480cd07a 	srli	r6,r9,1
   18c54:	500ed07a 	srli	r7,r10,1
   18c58:	12d6b03a 	or	r11,r2,r11
   18c5c:	00800044 	movi	r2,1
   18c60:	198cb03a 	or	r6,r3,r6
   18c64:	4888703a 	and	r4,r9,r2
   18c68:	9818d07a 	srli	r12,r19,1
   18c6c:	001b883a 	mov	r13,zero
   18c70:	03a00034 	movhi	r14,32768
   18c74:	3013883a 	mov	r9,r6
   18c78:	3815883a 	mov	r10,r7
   18c7c:	4091883a 	add	r8,r8,r2
   18c80:	20000226 	beq	r4,zero,18c8c <__muldf3+0x284>
   18c84:	5b64b03a 	or	r18,r11,r13
   18c88:	63a6b03a 	or	r19,r12,r14
   18c8c:	7abfed36 	bltu	r15,r10,18c44 <__muldf3+0x23c>
   18c90:	da001015 	stw	r8,64(sp)
   18c94:	00840034 	movhi	r2,4096
   18c98:	10bfffc4 	addi	r2,r2,-1
   18c9c:	12801436 	bltu	r2,r10,18cf0 <__muldf3+0x2e8>
   18ca0:	da001017 	ldw	r8,64(sp)
   18ca4:	101f883a 	mov	r15,r2
   18ca8:	4a45883a 	add	r2,r9,r9
   18cac:	124d803a 	cmpltu	r6,r2,r9
   18cb0:	5287883a 	add	r3,r10,r10
   18cb4:	9497883a 	add	r11,r18,r18
   18cb8:	5c8f803a 	cmpltu	r7,r11,r18
   18cbc:	9cd9883a 	add	r12,r19,r19
   18cc0:	01000044 	movi	r4,1
   18cc4:	30cd883a 	add	r6,r6,r3
   18cc8:	3b0f883a 	add	r7,r7,r12
   18ccc:	423fffc4 	addi	r8,r8,-1
   18cd0:	1013883a 	mov	r9,r2
   18cd4:	3015883a 	mov	r10,r6
   18cd8:	111ab03a 	or	r13,r2,r4
   18cdc:	98003016 	blt	r19,zero,18da0 <__muldf3+0x398>
   18ce0:	5825883a 	mov	r18,r11
   18ce4:	3827883a 	mov	r19,r7
   18ce8:	7abfef2e 	bgeu	r15,r10,18ca8 <__muldf3+0x2a0>
   18cec:	da001015 	stw	r8,64(sp)
   18cf0:	00803fc4 	movi	r2,255
   18cf4:	488e703a 	and	r7,r9,r2
   18cf8:	00802004 	movi	r2,128
   18cfc:	0007883a 	mov	r3,zero
   18d00:	0011883a 	mov	r8,zero
   18d04:	38801826 	beq	r7,r2,18d68 <__muldf3+0x360>
   18d08:	008000c4 	movi	r2,3
   18d0c:	d9000e04 	addi	r4,sp,56
   18d10:	da801215 	stw	r10,72(sp)
   18d14:	d8800e15 	stw	r2,56(sp)
   18d18:	da401115 	stw	r9,68(sp)
   18d1c:	003f6a06 	br	18ac8 <__muldf3+0xc0>
   18d20:	89802126 	beq	r17,r6,18da8 <__muldf3+0x3a0>
   18d24:	0009883a 	mov	r4,zero
   18d28:	5105883a 	add	r2,r10,r4
   18d2c:	128d803a 	cmpltu	r6,r2,r10
   18d30:	5d07883a 	add	r3,r11,r20
   18d34:	30cd883a 	add	r6,r6,r3
   18d38:	0021883a 	mov	r16,zero
   18d3c:	0023883a 	mov	r17,zero
   18d40:	1025883a 	mov	r18,r2
   18d44:	3027883a 	mov	r19,r6
   18d48:	32ff9e2e 	bgeu	r6,r11,18bc4 <__muldf3+0x1bc>
   18d4c:	00800044 	movi	r2,1
   18d50:	8089883a 	add	r4,r16,r2
   18d54:	240d803a 	cmpltu	r6,r4,r16
   18d58:	344d883a 	add	r6,r6,r17
   18d5c:	2021883a 	mov	r16,r4
   18d60:	3023883a 	mov	r17,r6
   18d64:	003f9806 	br	18bc8 <__muldf3+0x1c0>
   18d68:	403fe71e 	bne	r8,zero,18d08 <__muldf3+0x300>
   18d6c:	01004004 	movi	r4,256
   18d70:	4904703a 	and	r2,r9,r4
   18d74:	10c4b03a 	or	r2,r2,r3
   18d78:	103fe31e 	bne	r2,zero,18d08 <__muldf3+0x300>
   18d7c:	94c4b03a 	or	r2,r18,r19
   18d80:	103fe126 	beq	r2,zero,18d08 <__muldf3+0x300>
   18d84:	49c5883a 	add	r2,r9,r7
   18d88:	1251803a 	cmpltu	r8,r2,r9
   18d8c:	4291883a 	add	r8,r8,r10
   18d90:	013fc004 	movi	r4,-256
   18d94:	1112703a 	and	r9,r2,r4
   18d98:	4015883a 	mov	r10,r8
   18d9c:	003fda06 	br	18d08 <__muldf3+0x300>
   18da0:	6813883a 	mov	r9,r13
   18da4:	003fce06 	br	18ce0 <__muldf3+0x2d8>
   18da8:	143f7c36 	bltu	r2,r16,18b9c <__muldf3+0x194>
   18dac:	003fdd06 	br	18d24 <__muldf3+0x31c>
   18db0:	12bf852e 	bgeu	r2,r10,18bc8 <__muldf3+0x1c0>
   18db4:	003fe506 	br	18d4c <__muldf3+0x344>
   18db8:	00800084 	movi	r2,2
   18dbc:	20bf351e 	bne	r4,r2,18a94 <__muldf3+0x8c>
   18dc0:	010000f4 	movhi	r4,3
   18dc4:	21209b04 	addi	r4,r4,-32148
   18dc8:	003f3f06 	br	18ac8 <__muldf3+0xc0>

00018dcc <__divdf3>:
   18dcc:	deffed04 	addi	sp,sp,-76
   18dd0:	dcc01115 	stw	r19,68(sp)
   18dd4:	dcc00404 	addi	r19,sp,16
   18dd8:	2011883a 	mov	r8,r4
   18ddc:	2813883a 	mov	r9,r5
   18de0:	dc000e15 	stw	r16,56(sp)
   18de4:	d809883a 	mov	r4,sp
   18de8:	980b883a 	mov	r5,r19
   18dec:	dc000904 	addi	r16,sp,36
   18df0:	dfc01215 	stw	ra,72(sp)
   18df4:	da400115 	stw	r9,4(sp)
   18df8:	d9c00315 	stw	r7,12(sp)
   18dfc:	da000015 	stw	r8,0(sp)
   18e00:	d9800215 	stw	r6,8(sp)
   18e04:	dc801015 	stw	r18,64(sp)
   18e08:	dc400f15 	stw	r17,60(sp)
   18e0c:	0019ba80 	call	19ba8 <__unpack_d>
   18e10:	d9000204 	addi	r4,sp,8
   18e14:	800b883a 	mov	r5,r16
   18e18:	0019ba80 	call	19ba8 <__unpack_d>
   18e1c:	d9000417 	ldw	r4,16(sp)
   18e20:	00800044 	movi	r2,1
   18e24:	11000b2e 	bgeu	r2,r4,18e54 <__divdf3+0x88>
   18e28:	d9400917 	ldw	r5,36(sp)
   18e2c:	1140762e 	bgeu	r2,r5,19008 <__divdf3+0x23c>
   18e30:	d8800517 	ldw	r2,20(sp)
   18e34:	d8c00a17 	ldw	r3,40(sp)
   18e38:	01800104 	movi	r6,4
   18e3c:	10c4f03a 	xor	r2,r2,r3
   18e40:	d8800515 	stw	r2,20(sp)
   18e44:	21800226 	beq	r4,r6,18e50 <__divdf3+0x84>
   18e48:	00800084 	movi	r2,2
   18e4c:	2080141e 	bne	r4,r2,18ea0 <__divdf3+0xd4>
   18e50:	29000926 	beq	r5,r4,18e78 <__divdf3+0xac>
   18e54:	9809883a 	mov	r4,r19
   18e58:	00198940 	call	19894 <__pack_d>
   18e5c:	dfc01217 	ldw	ra,72(sp)
   18e60:	dcc01117 	ldw	r19,68(sp)
   18e64:	dc801017 	ldw	r18,64(sp)
   18e68:	dc400f17 	ldw	r17,60(sp)
   18e6c:	dc000e17 	ldw	r16,56(sp)
   18e70:	dec01304 	addi	sp,sp,76
   18e74:	f800283a 	ret
   18e78:	010000f4 	movhi	r4,3
   18e7c:	21209b04 	addi	r4,r4,-32148
   18e80:	00198940 	call	19894 <__pack_d>
   18e84:	dfc01217 	ldw	ra,72(sp)
   18e88:	dcc01117 	ldw	r19,68(sp)
   18e8c:	dc801017 	ldw	r18,64(sp)
   18e90:	dc400f17 	ldw	r17,60(sp)
   18e94:	dc000e17 	ldw	r16,56(sp)
   18e98:	dec01304 	addi	sp,sp,76
   18e9c:	f800283a 	ret
   18ea0:	29805b26 	beq	r5,r6,19010 <__divdf3+0x244>
   18ea4:	28802d26 	beq	r5,r2,18f5c <__divdf3+0x190>
   18ea8:	d8c00617 	ldw	r3,24(sp)
   18eac:	d8800b17 	ldw	r2,44(sp)
   18eb0:	d9c00817 	ldw	r7,32(sp)
   18eb4:	dc400d17 	ldw	r17,52(sp)
   18eb8:	188bc83a 	sub	r5,r3,r2
   18ebc:	d9800717 	ldw	r6,28(sp)
   18ec0:	dc000c17 	ldw	r16,48(sp)
   18ec4:	d9400615 	stw	r5,24(sp)
   18ec8:	3c403836 	bltu	r7,r17,18fac <__divdf3+0x1e0>
   18ecc:	89c03626 	beq	r17,r7,18fa8 <__divdf3+0x1dc>
   18ed0:	0015883a 	mov	r10,zero
   18ed4:	001d883a 	mov	r14,zero
   18ed8:	02c40034 	movhi	r11,4096
   18edc:	001f883a 	mov	r15,zero
   18ee0:	003f883a 	mov	ra,zero
   18ee4:	04800f44 	movi	r18,61
   18ee8:	00000f06 	br	18f28 <__divdf3+0x15c>
   18eec:	601d883a 	mov	r14,r12
   18ef0:	681f883a 	mov	r15,r13
   18ef4:	400d883a 	mov	r6,r8
   18ef8:	100f883a 	mov	r7,r2
   18efc:	3191883a 	add	r8,r6,r6
   18f00:	5808d07a 	srli	r4,r11,1
   18f04:	4185803a 	cmpltu	r2,r8,r6
   18f08:	39d3883a 	add	r9,r7,r7
   18f0c:	28c6b03a 	or	r3,r5,r3
   18f10:	1245883a 	add	r2,r2,r9
   18f14:	1815883a 	mov	r10,r3
   18f18:	2017883a 	mov	r11,r4
   18f1c:	400d883a 	mov	r6,r8
   18f20:	100f883a 	mov	r7,r2
   18f24:	fc801726 	beq	ra,r18,18f84 <__divdf3+0x1b8>
   18f28:	580a97fa 	slli	r5,r11,31
   18f2c:	5006d07a 	srli	r3,r10,1
   18f30:	ffc00044 	addi	ra,ra,1
   18f34:	3c7ff136 	bltu	r7,r17,18efc <__divdf3+0x130>
   18f38:	3411c83a 	sub	r8,r6,r16
   18f3c:	3205803a 	cmpltu	r2,r6,r8
   18f40:	3c53c83a 	sub	r9,r7,r17
   18f44:	7298b03a 	or	r12,r14,r10
   18f48:	7adab03a 	or	r13,r15,r11
   18f4c:	4885c83a 	sub	r2,r9,r2
   18f50:	89ffe61e 	bne	r17,r7,18eec <__divdf3+0x120>
   18f54:	343fe936 	bltu	r6,r16,18efc <__divdf3+0x130>
   18f58:	003fe406 	br	18eec <__divdf3+0x120>
   18f5c:	9809883a 	mov	r4,r19
   18f60:	d9800415 	stw	r6,16(sp)
   18f64:	00198940 	call	19894 <__pack_d>
   18f68:	dfc01217 	ldw	ra,72(sp)
   18f6c:	dcc01117 	ldw	r19,68(sp)
   18f70:	dc801017 	ldw	r18,64(sp)
   18f74:	dc400f17 	ldw	r17,60(sp)
   18f78:	dc000e17 	ldw	r16,56(sp)
   18f7c:	dec01304 	addi	sp,sp,76
   18f80:	f800283a 	ret
   18f84:	00803fc4 	movi	r2,255
   18f88:	7090703a 	and	r8,r14,r2
   18f8c:	00802004 	movi	r2,128
   18f90:	0007883a 	mov	r3,zero
   18f94:	0013883a 	mov	r9,zero
   18f98:	40800d26 	beq	r8,r2,18fd0 <__divdf3+0x204>
   18f9c:	dbc00815 	stw	r15,32(sp)
   18fa0:	db800715 	stw	r14,28(sp)
   18fa4:	003fab06 	br	18e54 <__divdf3+0x88>
   18fa8:	343fc92e 	bgeu	r6,r16,18ed0 <__divdf3+0x104>
   18fac:	3185883a 	add	r2,r6,r6
   18fb0:	1189803a 	cmpltu	r4,r2,r6
   18fb4:	39c7883a 	add	r3,r7,r7
   18fb8:	20c9883a 	add	r4,r4,r3
   18fbc:	297fffc4 	addi	r5,r5,-1
   18fc0:	100d883a 	mov	r6,r2
   18fc4:	200f883a 	mov	r7,r4
   18fc8:	d9400615 	stw	r5,24(sp)
   18fcc:	003fc006 	br	18ed0 <__divdf3+0x104>
   18fd0:	483ff21e 	bne	r9,zero,18f9c <__divdf3+0x1d0>
   18fd4:	01004004 	movi	r4,256
   18fd8:	7104703a 	and	r2,r14,r4
   18fdc:	10c4b03a 	or	r2,r2,r3
   18fe0:	103fee1e 	bne	r2,zero,18f9c <__divdf3+0x1d0>
   18fe4:	31c4b03a 	or	r2,r6,r7
   18fe8:	103fec26 	beq	r2,zero,18f9c <__divdf3+0x1d0>
   18fec:	7205883a 	add	r2,r14,r8
   18ff0:	1391803a 	cmpltu	r8,r2,r14
   18ff4:	43d1883a 	add	r8,r8,r15
   18ff8:	013fc004 	movi	r4,-256
   18ffc:	111c703a 	and	r14,r2,r4
   19000:	401f883a 	mov	r15,r8
   19004:	003fe506 	br	18f9c <__divdf3+0x1d0>
   19008:	8009883a 	mov	r4,r16
   1900c:	003f9206 	br	18e58 <__divdf3+0x8c>
   19010:	9809883a 	mov	r4,r19
   19014:	d8000715 	stw	zero,28(sp)
   19018:	d8000815 	stw	zero,32(sp)
   1901c:	d8000615 	stw	zero,24(sp)
   19020:	003f8d06 	br	18e58 <__divdf3+0x8c>

00019024 <__eqdf2>:
   19024:	deffef04 	addi	sp,sp,-68
   19028:	dc400f15 	stw	r17,60(sp)
   1902c:	dc400404 	addi	r17,sp,16
   19030:	2005883a 	mov	r2,r4
   19034:	2807883a 	mov	r3,r5
   19038:	dc000e15 	stw	r16,56(sp)
   1903c:	d809883a 	mov	r4,sp
   19040:	880b883a 	mov	r5,r17
   19044:	dc000904 	addi	r16,sp,36
   19048:	d8c00115 	stw	r3,4(sp)
   1904c:	d8800015 	stw	r2,0(sp)
   19050:	d9800215 	stw	r6,8(sp)
   19054:	dfc01015 	stw	ra,64(sp)
   19058:	d9c00315 	stw	r7,12(sp)
   1905c:	0019ba80 	call	19ba8 <__unpack_d>
   19060:	d9000204 	addi	r4,sp,8
   19064:	800b883a 	mov	r5,r16
   19068:	0019ba80 	call	19ba8 <__unpack_d>
   1906c:	d8800417 	ldw	r2,16(sp)
   19070:	00c00044 	movi	r3,1
   19074:	180d883a 	mov	r6,r3
   19078:	1880062e 	bgeu	r3,r2,19094 <__eqdf2+0x70>
   1907c:	d8800917 	ldw	r2,36(sp)
   19080:	8809883a 	mov	r4,r17
   19084:	800b883a 	mov	r5,r16
   19088:	1880022e 	bgeu	r3,r2,19094 <__eqdf2+0x70>
   1908c:	0019ce00 	call	19ce0 <__fpcmp_parts_d>
   19090:	100d883a 	mov	r6,r2
   19094:	3005883a 	mov	r2,r6
   19098:	dfc01017 	ldw	ra,64(sp)
   1909c:	dc400f17 	ldw	r17,60(sp)
   190a0:	dc000e17 	ldw	r16,56(sp)
   190a4:	dec01104 	addi	sp,sp,68
   190a8:	f800283a 	ret

000190ac <__nedf2>:
   190ac:	deffef04 	addi	sp,sp,-68
   190b0:	dc400f15 	stw	r17,60(sp)
   190b4:	dc400404 	addi	r17,sp,16
   190b8:	2005883a 	mov	r2,r4
   190bc:	2807883a 	mov	r3,r5
   190c0:	dc000e15 	stw	r16,56(sp)
   190c4:	d809883a 	mov	r4,sp
   190c8:	880b883a 	mov	r5,r17
   190cc:	dc000904 	addi	r16,sp,36
   190d0:	d8c00115 	stw	r3,4(sp)
   190d4:	d8800015 	stw	r2,0(sp)
   190d8:	d9800215 	stw	r6,8(sp)
   190dc:	dfc01015 	stw	ra,64(sp)
   190e0:	d9c00315 	stw	r7,12(sp)
   190e4:	0019ba80 	call	19ba8 <__unpack_d>
   190e8:	d9000204 	addi	r4,sp,8
   190ec:	800b883a 	mov	r5,r16
   190f0:	0019ba80 	call	19ba8 <__unpack_d>
   190f4:	d8800417 	ldw	r2,16(sp)
   190f8:	00c00044 	movi	r3,1
   190fc:	180d883a 	mov	r6,r3
   19100:	1880062e 	bgeu	r3,r2,1911c <__nedf2+0x70>
   19104:	d8800917 	ldw	r2,36(sp)
   19108:	8809883a 	mov	r4,r17
   1910c:	800b883a 	mov	r5,r16
   19110:	1880022e 	bgeu	r3,r2,1911c <__nedf2+0x70>
   19114:	0019ce00 	call	19ce0 <__fpcmp_parts_d>
   19118:	100d883a 	mov	r6,r2
   1911c:	3005883a 	mov	r2,r6
   19120:	dfc01017 	ldw	ra,64(sp)
   19124:	dc400f17 	ldw	r17,60(sp)
   19128:	dc000e17 	ldw	r16,56(sp)
   1912c:	dec01104 	addi	sp,sp,68
   19130:	f800283a 	ret

00019134 <__gtdf2>:
   19134:	deffef04 	addi	sp,sp,-68
   19138:	dc400f15 	stw	r17,60(sp)
   1913c:	dc400404 	addi	r17,sp,16
   19140:	2005883a 	mov	r2,r4
   19144:	2807883a 	mov	r3,r5
   19148:	dc000e15 	stw	r16,56(sp)
   1914c:	d809883a 	mov	r4,sp
   19150:	880b883a 	mov	r5,r17
   19154:	dc000904 	addi	r16,sp,36
   19158:	d8c00115 	stw	r3,4(sp)
   1915c:	d8800015 	stw	r2,0(sp)
   19160:	d9800215 	stw	r6,8(sp)
   19164:	dfc01015 	stw	ra,64(sp)
   19168:	d9c00315 	stw	r7,12(sp)
   1916c:	0019ba80 	call	19ba8 <__unpack_d>
   19170:	d9000204 	addi	r4,sp,8
   19174:	800b883a 	mov	r5,r16
   19178:	0019ba80 	call	19ba8 <__unpack_d>
   1917c:	d8800417 	ldw	r2,16(sp)
   19180:	00c00044 	movi	r3,1
   19184:	01bfffc4 	movi	r6,-1
   19188:	1880062e 	bgeu	r3,r2,191a4 <__gtdf2+0x70>
   1918c:	d8800917 	ldw	r2,36(sp)
   19190:	8809883a 	mov	r4,r17
   19194:	800b883a 	mov	r5,r16
   19198:	1880022e 	bgeu	r3,r2,191a4 <__gtdf2+0x70>
   1919c:	0019ce00 	call	19ce0 <__fpcmp_parts_d>
   191a0:	100d883a 	mov	r6,r2
   191a4:	3005883a 	mov	r2,r6
   191a8:	dfc01017 	ldw	ra,64(sp)
   191ac:	dc400f17 	ldw	r17,60(sp)
   191b0:	dc000e17 	ldw	r16,56(sp)
   191b4:	dec01104 	addi	sp,sp,68
   191b8:	f800283a 	ret

000191bc <__gedf2>:
   191bc:	deffef04 	addi	sp,sp,-68
   191c0:	dc400f15 	stw	r17,60(sp)
   191c4:	dc400404 	addi	r17,sp,16
   191c8:	2005883a 	mov	r2,r4
   191cc:	2807883a 	mov	r3,r5
   191d0:	dc000e15 	stw	r16,56(sp)
   191d4:	d809883a 	mov	r4,sp
   191d8:	880b883a 	mov	r5,r17
   191dc:	dc000904 	addi	r16,sp,36
   191e0:	d8c00115 	stw	r3,4(sp)
   191e4:	d8800015 	stw	r2,0(sp)
   191e8:	d9800215 	stw	r6,8(sp)
   191ec:	dfc01015 	stw	ra,64(sp)
   191f0:	d9c00315 	stw	r7,12(sp)
   191f4:	0019ba80 	call	19ba8 <__unpack_d>
   191f8:	d9000204 	addi	r4,sp,8
   191fc:	800b883a 	mov	r5,r16
   19200:	0019ba80 	call	19ba8 <__unpack_d>
   19204:	d8800417 	ldw	r2,16(sp)
   19208:	00c00044 	movi	r3,1
   1920c:	01bfffc4 	movi	r6,-1
   19210:	1880062e 	bgeu	r3,r2,1922c <__gedf2+0x70>
   19214:	d8800917 	ldw	r2,36(sp)
   19218:	8809883a 	mov	r4,r17
   1921c:	800b883a 	mov	r5,r16
   19220:	1880022e 	bgeu	r3,r2,1922c <__gedf2+0x70>
   19224:	0019ce00 	call	19ce0 <__fpcmp_parts_d>
   19228:	100d883a 	mov	r6,r2
   1922c:	3005883a 	mov	r2,r6
   19230:	dfc01017 	ldw	ra,64(sp)
   19234:	dc400f17 	ldw	r17,60(sp)
   19238:	dc000e17 	ldw	r16,56(sp)
   1923c:	dec01104 	addi	sp,sp,68
   19240:	f800283a 	ret

00019244 <__ltdf2>:
   19244:	deffef04 	addi	sp,sp,-68
   19248:	dc400f15 	stw	r17,60(sp)
   1924c:	dc400404 	addi	r17,sp,16
   19250:	2005883a 	mov	r2,r4
   19254:	2807883a 	mov	r3,r5
   19258:	dc000e15 	stw	r16,56(sp)
   1925c:	d809883a 	mov	r4,sp
   19260:	880b883a 	mov	r5,r17
   19264:	dc000904 	addi	r16,sp,36
   19268:	d8c00115 	stw	r3,4(sp)
   1926c:	d8800015 	stw	r2,0(sp)
   19270:	d9800215 	stw	r6,8(sp)
   19274:	dfc01015 	stw	ra,64(sp)
   19278:	d9c00315 	stw	r7,12(sp)
   1927c:	0019ba80 	call	19ba8 <__unpack_d>
   19280:	d9000204 	addi	r4,sp,8
   19284:	800b883a 	mov	r5,r16
   19288:	0019ba80 	call	19ba8 <__unpack_d>
   1928c:	d8800417 	ldw	r2,16(sp)
   19290:	00c00044 	movi	r3,1
   19294:	180d883a 	mov	r6,r3
   19298:	1880062e 	bgeu	r3,r2,192b4 <__ltdf2+0x70>
   1929c:	d8800917 	ldw	r2,36(sp)
   192a0:	8809883a 	mov	r4,r17
   192a4:	800b883a 	mov	r5,r16
   192a8:	1880022e 	bgeu	r3,r2,192b4 <__ltdf2+0x70>
   192ac:	0019ce00 	call	19ce0 <__fpcmp_parts_d>
   192b0:	100d883a 	mov	r6,r2
   192b4:	3005883a 	mov	r2,r6
   192b8:	dfc01017 	ldw	ra,64(sp)
   192bc:	dc400f17 	ldw	r17,60(sp)
   192c0:	dc000e17 	ldw	r16,56(sp)
   192c4:	dec01104 	addi	sp,sp,68
   192c8:	f800283a 	ret

000192cc <__floatsidf>:
   192cc:	2006d7fa 	srli	r3,r4,31
   192d0:	defff604 	addi	sp,sp,-40
   192d4:	008000c4 	movi	r2,3
   192d8:	dfc00915 	stw	ra,36(sp)
   192dc:	dcc00815 	stw	r19,32(sp)
   192e0:	dc800715 	stw	r18,28(sp)
   192e4:	dc400615 	stw	r17,24(sp)
   192e8:	dc000515 	stw	r16,20(sp)
   192ec:	d8800015 	stw	r2,0(sp)
   192f0:	d8c00115 	stw	r3,4(sp)
   192f4:	20000f1e 	bne	r4,zero,19334 <__floatsidf+0x68>
   192f8:	00800084 	movi	r2,2
   192fc:	d8800015 	stw	r2,0(sp)
   19300:	d809883a 	mov	r4,sp
   19304:	00198940 	call	19894 <__pack_d>
   19308:	1009883a 	mov	r4,r2
   1930c:	180b883a 	mov	r5,r3
   19310:	2005883a 	mov	r2,r4
   19314:	2807883a 	mov	r3,r5
   19318:	dfc00917 	ldw	ra,36(sp)
   1931c:	dcc00817 	ldw	r19,32(sp)
   19320:	dc800717 	ldw	r18,28(sp)
   19324:	dc400617 	ldw	r17,24(sp)
   19328:	dc000517 	ldw	r16,20(sp)
   1932c:	dec00a04 	addi	sp,sp,40
   19330:	f800283a 	ret
   19334:	00800f04 	movi	r2,60
   19338:	1807003a 	cmpeq	r3,r3,zero
   1933c:	d8800215 	stw	r2,8(sp)
   19340:	18001126 	beq	r3,zero,19388 <__floatsidf+0xbc>
   19344:	0027883a 	mov	r19,zero
   19348:	2025883a 	mov	r18,r4
   1934c:	d9000315 	stw	r4,12(sp)
   19350:	dcc00415 	stw	r19,16(sp)
   19354:	00198140 	call	19814 <__clzsi2>
   19358:	11000744 	addi	r4,r2,29
   1935c:	013fe80e 	bge	zero,r4,19300 <__floatsidf+0x34>
   19360:	10bfff44 	addi	r2,r2,-3
   19364:	10000c16 	blt	r2,zero,19398 <__floatsidf+0xcc>
   19368:	90a2983a 	sll	r17,r18,r2
   1936c:	0021883a 	mov	r16,zero
   19370:	d8800217 	ldw	r2,8(sp)
   19374:	dc400415 	stw	r17,16(sp)
   19378:	dc000315 	stw	r16,12(sp)
   1937c:	1105c83a 	sub	r2,r2,r4
   19380:	d8800215 	stw	r2,8(sp)
   19384:	003fde06 	br	19300 <__floatsidf+0x34>
   19388:	00a00034 	movhi	r2,32768
   1938c:	20800a26 	beq	r4,r2,193b8 <__floatsidf+0xec>
   19390:	0109c83a 	sub	r4,zero,r4
   19394:	003feb06 	br	19344 <__floatsidf+0x78>
   19398:	9006d07a 	srli	r3,r18,1
   1939c:	008007c4 	movi	r2,31
   193a0:	1105c83a 	sub	r2,r2,r4
   193a4:	1886d83a 	srl	r3,r3,r2
   193a8:	9922983a 	sll	r17,r19,r4
   193ac:	9120983a 	sll	r16,r18,r4
   193b0:	1c62b03a 	or	r17,r3,r17
   193b4:	003fee06 	br	19370 <__floatsidf+0xa4>
   193b8:	0009883a 	mov	r4,zero
   193bc:	01707834 	movhi	r5,49632
   193c0:	003fd306 	br	19310 <__floatsidf+0x44>

000193c4 <__fixdfsi>:
   193c4:	defff804 	addi	sp,sp,-32
   193c8:	2005883a 	mov	r2,r4
   193cc:	2807883a 	mov	r3,r5
   193d0:	d809883a 	mov	r4,sp
   193d4:	d9400204 	addi	r5,sp,8
   193d8:	d8c00115 	stw	r3,4(sp)
   193dc:	d8800015 	stw	r2,0(sp)
   193e0:	dfc00715 	stw	ra,28(sp)
   193e4:	0019ba80 	call	19ba8 <__unpack_d>
   193e8:	d8c00217 	ldw	r3,8(sp)
   193ec:	00800084 	movi	r2,2
   193f0:	1880051e 	bne	r3,r2,19408 <__fixdfsi+0x44>
   193f4:	0007883a 	mov	r3,zero
   193f8:	1805883a 	mov	r2,r3
   193fc:	dfc00717 	ldw	ra,28(sp)
   19400:	dec00804 	addi	sp,sp,32
   19404:	f800283a 	ret
   19408:	00800044 	movi	r2,1
   1940c:	10fff92e 	bgeu	r2,r3,193f4 <__fixdfsi+0x30>
   19410:	00800104 	movi	r2,4
   19414:	18800426 	beq	r3,r2,19428 <__fixdfsi+0x64>
   19418:	d8c00417 	ldw	r3,16(sp)
   1941c:	183ff516 	blt	r3,zero,193f4 <__fixdfsi+0x30>
   19420:	00800784 	movi	r2,30
   19424:	10c0080e 	bge	r2,r3,19448 <__fixdfsi+0x84>
   19428:	d8800317 	ldw	r2,12(sp)
   1942c:	1000121e 	bne	r2,zero,19478 <__fixdfsi+0xb4>
   19430:	00e00034 	movhi	r3,32768
   19434:	18ffffc4 	addi	r3,r3,-1
   19438:	1805883a 	mov	r2,r3
   1943c:	dfc00717 	ldw	ra,28(sp)
   19440:	dec00804 	addi	sp,sp,32
   19444:	f800283a 	ret
   19448:	00800f04 	movi	r2,60
   1944c:	10d1c83a 	sub	r8,r2,r3
   19450:	40bff804 	addi	r2,r8,-32
   19454:	d9800517 	ldw	r6,20(sp)
   19458:	d9c00617 	ldw	r7,24(sp)
   1945c:	10000816 	blt	r2,zero,19480 <__fixdfsi+0xbc>
   19460:	3888d83a 	srl	r4,r7,r2
   19464:	d8800317 	ldw	r2,12(sp)
   19468:	2007883a 	mov	r3,r4
   1946c:	103fe226 	beq	r2,zero,193f8 <__fixdfsi+0x34>
   19470:	0107c83a 	sub	r3,zero,r4
   19474:	003fe006 	br	193f8 <__fixdfsi+0x34>
   19478:	00e00034 	movhi	r3,32768
   1947c:	003fde06 	br	193f8 <__fixdfsi+0x34>
   19480:	39c7883a 	add	r3,r7,r7
   19484:	008007c4 	movi	r2,31
   19488:	1205c83a 	sub	r2,r2,r8
   1948c:	1886983a 	sll	r3,r3,r2
   19490:	3208d83a 	srl	r4,r6,r8
   19494:	1908b03a 	or	r4,r3,r4
   19498:	003ff206 	br	19464 <__fixdfsi+0xa0>

0001949c <__floatunsidf>:
   1949c:	defff204 	addi	sp,sp,-56
   194a0:	dfc00d15 	stw	ra,52(sp)
   194a4:	ddc00c15 	stw	r23,48(sp)
   194a8:	dd800b15 	stw	r22,44(sp)
   194ac:	dd400a15 	stw	r21,40(sp)
   194b0:	dd000915 	stw	r20,36(sp)
   194b4:	dcc00815 	stw	r19,32(sp)
   194b8:	dc800715 	stw	r18,28(sp)
   194bc:	dc400615 	stw	r17,24(sp)
   194c0:	dc000515 	stw	r16,20(sp)
   194c4:	d8000115 	stw	zero,4(sp)
   194c8:	20000f1e 	bne	r4,zero,19508 <__floatunsidf+0x6c>
   194cc:	00800084 	movi	r2,2
   194d0:	d8800015 	stw	r2,0(sp)
   194d4:	d809883a 	mov	r4,sp
   194d8:	00198940 	call	19894 <__pack_d>
   194dc:	dfc00d17 	ldw	ra,52(sp)
   194e0:	ddc00c17 	ldw	r23,48(sp)
   194e4:	dd800b17 	ldw	r22,44(sp)
   194e8:	dd400a17 	ldw	r21,40(sp)
   194ec:	dd000917 	ldw	r20,36(sp)
   194f0:	dcc00817 	ldw	r19,32(sp)
   194f4:	dc800717 	ldw	r18,28(sp)
   194f8:	dc400617 	ldw	r17,24(sp)
   194fc:	dc000517 	ldw	r16,20(sp)
   19500:	dec00e04 	addi	sp,sp,56
   19504:	f800283a 	ret
   19508:	008000c4 	movi	r2,3
   1950c:	00c00f04 	movi	r3,60
   19510:	002f883a 	mov	r23,zero
   19514:	202d883a 	mov	r22,r4
   19518:	d8800015 	stw	r2,0(sp)
   1951c:	d8c00215 	stw	r3,8(sp)
   19520:	d9000315 	stw	r4,12(sp)
   19524:	ddc00415 	stw	r23,16(sp)
   19528:	00198140 	call	19814 <__clzsi2>
   1952c:	12400744 	addi	r9,r2,29
   19530:	48000b16 	blt	r9,zero,19560 <__floatunsidf+0xc4>
   19534:	483fe726 	beq	r9,zero,194d4 <__floatunsidf+0x38>
   19538:	10bfff44 	addi	r2,r2,-3
   1953c:	10002e16 	blt	r2,zero,195f8 <__floatunsidf+0x15c>
   19540:	b0a2983a 	sll	r17,r22,r2
   19544:	0021883a 	mov	r16,zero
   19548:	d8800217 	ldw	r2,8(sp)
   1954c:	dc400415 	stw	r17,16(sp)
   19550:	dc000315 	stw	r16,12(sp)
   19554:	1245c83a 	sub	r2,r2,r9
   19558:	d8800215 	stw	r2,8(sp)
   1955c:	003fdd06 	br	194d4 <__floatunsidf+0x38>
   19560:	0255c83a 	sub	r10,zero,r9
   19564:	51bff804 	addi	r6,r10,-32
   19568:	30001b16 	blt	r6,zero,195d8 <__floatunsidf+0x13c>
   1956c:	b9a8d83a 	srl	r20,r23,r6
   19570:	002b883a 	mov	r21,zero
   19574:	000f883a 	mov	r7,zero
   19578:	01000044 	movi	r4,1
   1957c:	0011883a 	mov	r8,zero
   19580:	30002516 	blt	r6,zero,19618 <__floatunsidf+0x17c>
   19584:	21a6983a 	sll	r19,r4,r6
   19588:	0025883a 	mov	r18,zero
   1958c:	00bfffc4 	movi	r2,-1
   19590:	9089883a 	add	r4,r18,r2
   19594:	988b883a 	add	r5,r19,r2
   19598:	248d803a 	cmpltu	r6,r4,r18
   1959c:	314b883a 	add	r5,r6,r5
   195a0:	b104703a 	and	r2,r22,r4
   195a4:	b946703a 	and	r3,r23,r5
   195a8:	10c4b03a 	or	r2,r2,r3
   195ac:	10000226 	beq	r2,zero,195b8 <__floatunsidf+0x11c>
   195b0:	01c00044 	movi	r7,1
   195b4:	0011883a 	mov	r8,zero
   195b8:	d9000217 	ldw	r4,8(sp)
   195bc:	a1c4b03a 	or	r2,r20,r7
   195c0:	aa06b03a 	or	r3,r21,r8
   195c4:	2249c83a 	sub	r4,r4,r9
   195c8:	d8c00415 	stw	r3,16(sp)
   195cc:	d9000215 	stw	r4,8(sp)
   195d0:	d8800315 	stw	r2,12(sp)
   195d4:	003fbf06 	br	194d4 <__floatunsidf+0x38>
   195d8:	bdc7883a 	add	r3,r23,r23
   195dc:	008007c4 	movi	r2,31
   195e0:	1285c83a 	sub	r2,r2,r10
   195e4:	1886983a 	sll	r3,r3,r2
   195e8:	b2a8d83a 	srl	r20,r22,r10
   195ec:	baaad83a 	srl	r21,r23,r10
   195f0:	1d28b03a 	or	r20,r3,r20
   195f4:	003fdf06 	br	19574 <__floatunsidf+0xd8>
   195f8:	b006d07a 	srli	r3,r22,1
   195fc:	008007c4 	movi	r2,31
   19600:	1245c83a 	sub	r2,r2,r9
   19604:	1886d83a 	srl	r3,r3,r2
   19608:	ba62983a 	sll	r17,r23,r9
   1960c:	b260983a 	sll	r16,r22,r9
   19610:	1c62b03a 	or	r17,r3,r17
   19614:	003fcc06 	br	19548 <__floatunsidf+0xac>
   19618:	2006d07a 	srli	r3,r4,1
   1961c:	008007c4 	movi	r2,31
   19620:	1285c83a 	sub	r2,r2,r10
   19624:	18a6d83a 	srl	r19,r3,r2
   19628:	22a4983a 	sll	r18,r4,r10
   1962c:	003fd706 	br	1958c <__floatunsidf+0xf0>

00019630 <udivmodsi4>:
   19630:	29001b2e 	bgeu	r5,r4,196a0 <udivmodsi4+0x70>
   19634:	28001a16 	blt	r5,zero,196a0 <udivmodsi4+0x70>
   19638:	00800044 	movi	r2,1
   1963c:	0007883a 	mov	r3,zero
   19640:	01c007c4 	movi	r7,31
   19644:	00000306 	br	19654 <udivmodsi4+0x24>
   19648:	19c01326 	beq	r3,r7,19698 <udivmodsi4+0x68>
   1964c:	18c00044 	addi	r3,r3,1
   19650:	28000416 	blt	r5,zero,19664 <udivmodsi4+0x34>
   19654:	294b883a 	add	r5,r5,r5
   19658:	1085883a 	add	r2,r2,r2
   1965c:	293ffa36 	bltu	r5,r4,19648 <udivmodsi4+0x18>
   19660:	10000d26 	beq	r2,zero,19698 <udivmodsi4+0x68>
   19664:	0007883a 	mov	r3,zero
   19668:	21400236 	bltu	r4,r5,19674 <udivmodsi4+0x44>
   1966c:	2149c83a 	sub	r4,r4,r5
   19670:	1886b03a 	or	r3,r3,r2
   19674:	1004d07a 	srli	r2,r2,1
   19678:	280ad07a 	srli	r5,r5,1
   1967c:	103ffa1e 	bne	r2,zero,19668 <udivmodsi4+0x38>
   19680:	30000226 	beq	r6,zero,1968c <udivmodsi4+0x5c>
   19684:	2005883a 	mov	r2,r4
   19688:	f800283a 	ret
   1968c:	1809883a 	mov	r4,r3
   19690:	2005883a 	mov	r2,r4
   19694:	f800283a 	ret
   19698:	0007883a 	mov	r3,zero
   1969c:	003ff806 	br	19680 <udivmodsi4+0x50>
   196a0:	00800044 	movi	r2,1
   196a4:	0007883a 	mov	r3,zero
   196a8:	003fef06 	br	19668 <udivmodsi4+0x38>

000196ac <__divsi3>:
   196ac:	defffe04 	addi	sp,sp,-8
   196b0:	dc000015 	stw	r16,0(sp)
   196b4:	dfc00115 	stw	ra,4(sp)
   196b8:	0021883a 	mov	r16,zero
   196bc:	20000c16 	blt	r4,zero,196f0 <__divsi3+0x44>
   196c0:	000d883a 	mov	r6,zero
   196c4:	28000e16 	blt	r5,zero,19700 <__divsi3+0x54>
   196c8:	00196300 	call	19630 <udivmodsi4>
   196cc:	1007883a 	mov	r3,r2
   196d0:	8005003a 	cmpeq	r2,r16,zero
   196d4:	1000011e 	bne	r2,zero,196dc <__divsi3+0x30>
   196d8:	00c7c83a 	sub	r3,zero,r3
   196dc:	1805883a 	mov	r2,r3
   196e0:	dfc00117 	ldw	ra,4(sp)
   196e4:	dc000017 	ldw	r16,0(sp)
   196e8:	dec00204 	addi	sp,sp,8
   196ec:	f800283a 	ret
   196f0:	0109c83a 	sub	r4,zero,r4
   196f4:	04000044 	movi	r16,1
   196f8:	000d883a 	mov	r6,zero
   196fc:	283ff20e 	bge	r5,zero,196c8 <__divsi3+0x1c>
   19700:	014bc83a 	sub	r5,zero,r5
   19704:	8021003a 	cmpeq	r16,r16,zero
   19708:	003fef06 	br	196c8 <__divsi3+0x1c>

0001970c <__modsi3>:
   1970c:	deffff04 	addi	sp,sp,-4
   19710:	dfc00015 	stw	ra,0(sp)
   19714:	01800044 	movi	r6,1
   19718:	2807883a 	mov	r3,r5
   1971c:	20000416 	blt	r4,zero,19730 <__modsi3+0x24>
   19720:	28000c16 	blt	r5,zero,19754 <__modsi3+0x48>
   19724:	dfc00017 	ldw	ra,0(sp)
   19728:	dec00104 	addi	sp,sp,4
   1972c:	00196301 	jmpi	19630 <udivmodsi4>
   19730:	0109c83a 	sub	r4,zero,r4
   19734:	28000b16 	blt	r5,zero,19764 <__modsi3+0x58>
   19738:	180b883a 	mov	r5,r3
   1973c:	01800044 	movi	r6,1
   19740:	00196300 	call	19630 <udivmodsi4>
   19744:	0085c83a 	sub	r2,zero,r2
   19748:	dfc00017 	ldw	ra,0(sp)
   1974c:	dec00104 	addi	sp,sp,4
   19750:	f800283a 	ret
   19754:	014bc83a 	sub	r5,zero,r5
   19758:	dfc00017 	ldw	ra,0(sp)
   1975c:	dec00104 	addi	sp,sp,4
   19760:	00196301 	jmpi	19630 <udivmodsi4>
   19764:	0147c83a 	sub	r3,zero,r5
   19768:	003ff306 	br	19738 <__modsi3+0x2c>

0001976c <__udivsi3>:
   1976c:	000d883a 	mov	r6,zero
   19770:	00196301 	jmpi	19630 <udivmodsi4>

00019774 <__umodsi3>:
   19774:	01800044 	movi	r6,1
   19778:	00196301 	jmpi	19630 <udivmodsi4>

0001977c <__muldi3>:
   1977c:	2011883a 	mov	r8,r4
   19780:	427fffcc 	andi	r9,r8,65535
   19784:	4018d43a 	srli	r12,r8,16
   19788:	32bfffcc 	andi	r10,r6,65535
   1978c:	3016d43a 	srli	r11,r6,16
   19790:	4a85383a 	mul	r2,r9,r10
   19794:	6295383a 	mul	r10,r12,r10
   19798:	4ad3383a 	mul	r9,r9,r11
   1979c:	113fffcc 	andi	r4,r2,65535
   197a0:	1004d43a 	srli	r2,r2,16
   197a4:	4a93883a 	add	r9,r9,r10
   197a8:	3807883a 	mov	r3,r7
   197ac:	1245883a 	add	r2,r2,r9
   197b0:	280f883a 	mov	r7,r5
   197b4:	180b883a 	mov	r5,r3
   197b8:	1006943a 	slli	r3,r2,16
   197bc:	defffd04 	addi	sp,sp,-12
   197c0:	dc800215 	stw	r18,8(sp)
   197c4:	1907883a 	add	r3,r3,r4
   197c8:	dc400115 	stw	r17,4(sp)
   197cc:	dc000015 	stw	r16,0(sp)
   197d0:	4165383a 	mul	r18,r8,r5
   197d4:	31e3383a 	mul	r17,r6,r7
   197d8:	1012d43a 	srli	r9,r2,16
   197dc:	62d9383a 	mul	r12,r12,r11
   197e0:	181f883a 	mov	r15,r3
   197e4:	1280022e 	bgeu	r2,r10,197f0 <__muldi3+0x74>
   197e8:	00800074 	movhi	r2,1
   197ec:	6099883a 	add	r12,r12,r2
   197f0:	624d883a 	add	r6,r12,r9
   197f4:	9187883a 	add	r3,r18,r6
   197f8:	88c7883a 	add	r3,r17,r3
   197fc:	7805883a 	mov	r2,r15
   19800:	dc800217 	ldw	r18,8(sp)
   19804:	dc400117 	ldw	r17,4(sp)
   19808:	dc000017 	ldw	r16,0(sp)
   1980c:	dec00304 	addi	sp,sp,12
   19810:	f800283a 	ret

00019814 <__clzsi2>:
   19814:	00bfffd4 	movui	r2,65535
   19818:	11000e36 	bltu	r2,r4,19854 <__clzsi2+0x40>
   1981c:	00803fc4 	movi	r2,255
   19820:	01400204 	movi	r5,8
   19824:	0007883a 	mov	r3,zero
   19828:	11001036 	bltu	r2,r4,1986c <__clzsi2+0x58>
   1982c:	000b883a 	mov	r5,zero
   19830:	20c6d83a 	srl	r3,r4,r3
   19834:	008000f4 	movhi	r2,3
   19838:	10a0a004 	addi	r2,r2,-32128
   1983c:	1887883a 	add	r3,r3,r2
   19840:	18800003 	ldbu	r2,0(r3)
   19844:	00c00804 	movi	r3,32
   19848:	2885883a 	add	r2,r5,r2
   1984c:	1885c83a 	sub	r2,r3,r2
   19850:	f800283a 	ret
   19854:	01400404 	movi	r5,16
   19858:	00804034 	movhi	r2,256
   1985c:	10bfffc4 	addi	r2,r2,-1
   19860:	2807883a 	mov	r3,r5
   19864:	113ff22e 	bgeu	r2,r4,19830 <__clzsi2+0x1c>
   19868:	01400604 	movi	r5,24
   1986c:	2807883a 	mov	r3,r5
   19870:	20c6d83a 	srl	r3,r4,r3
   19874:	008000f4 	movhi	r2,3
   19878:	10a0a004 	addi	r2,r2,-32128
   1987c:	1887883a 	add	r3,r3,r2
   19880:	18800003 	ldbu	r2,0(r3)
   19884:	00c00804 	movi	r3,32
   19888:	2885883a 	add	r2,r5,r2
   1988c:	1885c83a 	sub	r2,r3,r2
   19890:	f800283a 	ret

00019894 <__pack_d>:
   19894:	20c00017 	ldw	r3,0(r4)
   19898:	defffd04 	addi	sp,sp,-12
   1989c:	dc000015 	stw	r16,0(sp)
   198a0:	dc800215 	stw	r18,8(sp)
   198a4:	dc400115 	stw	r17,4(sp)
   198a8:	00800044 	movi	r2,1
   198ac:	22000317 	ldw	r8,12(r4)
   198b0:	001f883a 	mov	r15,zero
   198b4:	22400417 	ldw	r9,16(r4)
   198b8:	24000117 	ldw	r16,4(r4)
   198bc:	10c0552e 	bgeu	r2,r3,19a14 <__pack_d+0x180>
   198c0:	00800104 	movi	r2,4
   198c4:	18804f26 	beq	r3,r2,19a04 <__pack_d+0x170>
   198c8:	00800084 	movi	r2,2
   198cc:	18800226 	beq	r3,r2,198d8 <__pack_d+0x44>
   198d0:	4244b03a 	or	r2,r8,r9
   198d4:	10001a1e 	bne	r2,zero,19940 <__pack_d+0xac>
   198d8:	000d883a 	mov	r6,zero
   198dc:	000f883a 	mov	r7,zero
   198e0:	0011883a 	mov	r8,zero
   198e4:	00800434 	movhi	r2,16
   198e8:	10bfffc4 	addi	r2,r2,-1
   198ec:	301d883a 	mov	r14,r6
   198f0:	3884703a 	and	r2,r7,r2
   198f4:	400a953a 	slli	r5,r8,20
   198f8:	79bffc2c 	andhi	r6,r15,65520
   198fc:	308cb03a 	or	r6,r6,r2
   19900:	00e00434 	movhi	r3,32784
   19904:	18ffffc4 	addi	r3,r3,-1
   19908:	800497fa 	slli	r2,r16,31
   1990c:	30c6703a 	and	r3,r6,r3
   19910:	1946b03a 	or	r3,r3,r5
   19914:	01600034 	movhi	r5,32768
   19918:	297fffc4 	addi	r5,r5,-1
   1991c:	194a703a 	and	r5,r3,r5
   19920:	288ab03a 	or	r5,r5,r2
   19924:	2807883a 	mov	r3,r5
   19928:	7005883a 	mov	r2,r14
   1992c:	dc800217 	ldw	r18,8(sp)
   19930:	dc400117 	ldw	r17,4(sp)
   19934:	dc000017 	ldw	r16,0(sp)
   19938:	dec00304 	addi	sp,sp,12
   1993c:	f800283a 	ret
   19940:	21000217 	ldw	r4,8(r4)
   19944:	00bf0084 	movi	r2,-1022
   19948:	20803f16 	blt	r4,r2,19a48 <__pack_d+0x1b4>
   1994c:	0080ffc4 	movi	r2,1023
   19950:	11002c16 	blt	r2,r4,19a04 <__pack_d+0x170>
   19954:	00803fc4 	movi	r2,255
   19958:	408c703a 	and	r6,r8,r2
   1995c:	00802004 	movi	r2,128
   19960:	0007883a 	mov	r3,zero
   19964:	000f883a 	mov	r7,zero
   19968:	2280ffc4 	addi	r10,r4,1023
   1996c:	30801e26 	beq	r6,r2,199e8 <__pack_d+0x154>
   19970:	00801fc4 	movi	r2,127
   19974:	4089883a 	add	r4,r8,r2
   19978:	220d803a 	cmpltu	r6,r4,r8
   1997c:	324d883a 	add	r6,r6,r9
   19980:	2011883a 	mov	r8,r4
   19984:	3013883a 	mov	r9,r6
   19988:	00880034 	movhi	r2,8192
   1998c:	10bfffc4 	addi	r2,r2,-1
   19990:	12400d36 	bltu	r2,r9,199c8 <__pack_d+0x134>
   19994:	4804963a 	slli	r2,r9,24
   19998:	400cd23a 	srli	r6,r8,8
   1999c:	480ed23a 	srli	r7,r9,8
   199a0:	013fffc4 	movi	r4,-1
   199a4:	118cb03a 	or	r6,r2,r6
   199a8:	01400434 	movhi	r5,16
   199ac:	297fffc4 	addi	r5,r5,-1
   199b0:	3104703a 	and	r2,r6,r4
   199b4:	3946703a 	and	r3,r7,r5
   199b8:	5201ffcc 	andi	r8,r10,2047
   199bc:	100d883a 	mov	r6,r2
   199c0:	180f883a 	mov	r7,r3
   199c4:	003fc706 	br	198e4 <__pack_d+0x50>
   199c8:	480897fa 	slli	r4,r9,31
   199cc:	4004d07a 	srli	r2,r8,1
   199d0:	4806d07a 	srli	r3,r9,1
   199d4:	52800044 	addi	r10,r10,1
   199d8:	2084b03a 	or	r2,r4,r2
   199dc:	1011883a 	mov	r8,r2
   199e0:	1813883a 	mov	r9,r3
   199e4:	003feb06 	br	19994 <__pack_d+0x100>
   199e8:	383fe11e 	bne	r7,zero,19970 <__pack_d+0xdc>
   199ec:	01004004 	movi	r4,256
   199f0:	4104703a 	and	r2,r8,r4
   199f4:	10c4b03a 	or	r2,r2,r3
   199f8:	103fe326 	beq	r2,zero,19988 <__pack_d+0xf4>
   199fc:	3005883a 	mov	r2,r6
   19a00:	003fdc06 	br	19974 <__pack_d+0xe0>
   19a04:	000d883a 	mov	r6,zero
   19a08:	000f883a 	mov	r7,zero
   19a0c:	0201ffc4 	movi	r8,2047
   19a10:	003fb406 	br	198e4 <__pack_d+0x50>
   19a14:	0005883a 	mov	r2,zero
   19a18:	00c00234 	movhi	r3,8
   19a1c:	408cb03a 	or	r6,r8,r2
   19a20:	48ceb03a 	or	r7,r9,r3
   19a24:	013fffc4 	movi	r4,-1
   19a28:	01400434 	movhi	r5,16
   19a2c:	297fffc4 	addi	r5,r5,-1
   19a30:	3104703a 	and	r2,r6,r4
   19a34:	3946703a 	and	r3,r7,r5
   19a38:	100d883a 	mov	r6,r2
   19a3c:	180f883a 	mov	r7,r3
   19a40:	0201ffc4 	movi	r8,2047
   19a44:	003fa706 	br	198e4 <__pack_d+0x50>
   19a48:	1109c83a 	sub	r4,r2,r4
   19a4c:	00800e04 	movi	r2,56
   19a50:	11004316 	blt	r2,r4,19b60 <__pack_d+0x2cc>
   19a54:	21fff804 	addi	r7,r4,-32
   19a58:	38004516 	blt	r7,zero,19b70 <__pack_d+0x2dc>
   19a5c:	49d8d83a 	srl	r12,r9,r7
   19a60:	001b883a 	mov	r13,zero
   19a64:	0023883a 	mov	r17,zero
   19a68:	01400044 	movi	r5,1
   19a6c:	0025883a 	mov	r18,zero
   19a70:	38004716 	blt	r7,zero,19b90 <__pack_d+0x2fc>
   19a74:	29d6983a 	sll	r11,r5,r7
   19a78:	0015883a 	mov	r10,zero
   19a7c:	00bfffc4 	movi	r2,-1
   19a80:	5089883a 	add	r4,r10,r2
   19a84:	588b883a 	add	r5,r11,r2
   19a88:	228d803a 	cmpltu	r6,r4,r10
   19a8c:	314b883a 	add	r5,r6,r5
   19a90:	4104703a 	and	r2,r8,r4
   19a94:	4946703a 	and	r3,r9,r5
   19a98:	10c4b03a 	or	r2,r2,r3
   19a9c:	10000226 	beq	r2,zero,19aa8 <__pack_d+0x214>
   19aa0:	04400044 	movi	r17,1
   19aa4:	0025883a 	mov	r18,zero
   19aa8:	00803fc4 	movi	r2,255
   19aac:	644eb03a 	or	r7,r12,r17
   19ab0:	3892703a 	and	r9,r7,r2
   19ab4:	00802004 	movi	r2,128
   19ab8:	6c90b03a 	or	r8,r13,r18
   19abc:	0015883a 	mov	r10,zero
   19ac0:	48801626 	beq	r9,r2,19b1c <__pack_d+0x288>
   19ac4:	01001fc4 	movi	r4,127
   19ac8:	3905883a 	add	r2,r7,r4
   19acc:	11cd803a 	cmpltu	r6,r2,r7
   19ad0:	320d883a 	add	r6,r6,r8
   19ad4:	100f883a 	mov	r7,r2
   19ad8:	00840034 	movhi	r2,4096
   19adc:	10bfffc4 	addi	r2,r2,-1
   19ae0:	3011883a 	mov	r8,r6
   19ae4:	0007883a 	mov	r3,zero
   19ae8:	11801b36 	bltu	r2,r6,19b58 <__pack_d+0x2c4>
   19aec:	4004963a 	slli	r2,r8,24
   19af0:	3808d23a 	srli	r4,r7,8
   19af4:	400ad23a 	srli	r5,r8,8
   19af8:	1813883a 	mov	r9,r3
   19afc:	1108b03a 	or	r4,r2,r4
   19b00:	00bfffc4 	movi	r2,-1
   19b04:	00c00434 	movhi	r3,16
   19b08:	18ffffc4 	addi	r3,r3,-1
   19b0c:	208c703a 	and	r6,r4,r2
   19b10:	28ce703a 	and	r7,r5,r3
   19b14:	4a01ffcc 	andi	r8,r9,2047
   19b18:	003f7206 	br	198e4 <__pack_d+0x50>
   19b1c:	503fe91e 	bne	r10,zero,19ac4 <__pack_d+0x230>
   19b20:	01004004 	movi	r4,256
   19b24:	3904703a 	and	r2,r7,r4
   19b28:	0007883a 	mov	r3,zero
   19b2c:	10c4b03a 	or	r2,r2,r3
   19b30:	10000626 	beq	r2,zero,19b4c <__pack_d+0x2b8>
   19b34:	3a45883a 	add	r2,r7,r9
   19b38:	11cd803a 	cmpltu	r6,r2,r7
   19b3c:	320d883a 	add	r6,r6,r8
   19b40:	100f883a 	mov	r7,r2
   19b44:	3011883a 	mov	r8,r6
   19b48:	0007883a 	mov	r3,zero
   19b4c:	00840034 	movhi	r2,4096
   19b50:	10bfffc4 	addi	r2,r2,-1
   19b54:	123fe52e 	bgeu	r2,r8,19aec <__pack_d+0x258>
   19b58:	00c00044 	movi	r3,1
   19b5c:	003fe306 	br	19aec <__pack_d+0x258>
   19b60:	0009883a 	mov	r4,zero
   19b64:	0013883a 	mov	r9,zero
   19b68:	000b883a 	mov	r5,zero
   19b6c:	003fe406 	br	19b00 <__pack_d+0x26c>
   19b70:	4a47883a 	add	r3,r9,r9
   19b74:	008007c4 	movi	r2,31
   19b78:	1105c83a 	sub	r2,r2,r4
   19b7c:	1886983a 	sll	r3,r3,r2
   19b80:	4118d83a 	srl	r12,r8,r4
   19b84:	491ad83a 	srl	r13,r9,r4
   19b88:	1b18b03a 	or	r12,r3,r12
   19b8c:	003fb506 	br	19a64 <__pack_d+0x1d0>
   19b90:	2806d07a 	srli	r3,r5,1
   19b94:	008007c4 	movi	r2,31
   19b98:	1105c83a 	sub	r2,r2,r4
   19b9c:	1896d83a 	srl	r11,r3,r2
   19ba0:	2914983a 	sll	r10,r5,r4
   19ba4:	003fb506 	br	19a7c <__pack_d+0x1e8>

00019ba8 <__unpack_d>:
   19ba8:	20c00117 	ldw	r3,4(r4)
   19bac:	22400017 	ldw	r9,0(r4)
   19bb0:	00800434 	movhi	r2,16
   19bb4:	10bfffc4 	addi	r2,r2,-1
   19bb8:	1808d53a 	srli	r4,r3,20
   19bbc:	180cd7fa 	srli	r6,r3,31
   19bc0:	1894703a 	and	r10,r3,r2
   19bc4:	2201ffcc 	andi	r8,r4,2047
   19bc8:	281b883a 	mov	r13,r5
   19bcc:	4817883a 	mov	r11,r9
   19bd0:	29800115 	stw	r6,4(r5)
   19bd4:	5019883a 	mov	r12,r10
   19bd8:	40001e1e 	bne	r8,zero,19c54 <__unpack_d+0xac>
   19bdc:	4a84b03a 	or	r2,r9,r10
   19be0:	10001926 	beq	r2,zero,19c48 <__unpack_d+0xa0>
   19be4:	4804d63a 	srli	r2,r9,24
   19be8:	500c923a 	slli	r6,r10,8
   19bec:	013f0084 	movi	r4,-1022
   19bf0:	00c40034 	movhi	r3,4096
   19bf4:	18ffffc4 	addi	r3,r3,-1
   19bf8:	118cb03a 	or	r6,r2,r6
   19bfc:	008000c4 	movi	r2,3
   19c00:	480a923a 	slli	r5,r9,8
   19c04:	68800015 	stw	r2,0(r13)
   19c08:	69000215 	stw	r4,8(r13)
   19c0c:	19800b36 	bltu	r3,r6,19c3c <__unpack_d+0x94>
   19c10:	200f883a 	mov	r7,r4
   19c14:	1811883a 	mov	r8,r3
   19c18:	2945883a 	add	r2,r5,r5
   19c1c:	1149803a 	cmpltu	r4,r2,r5
   19c20:	3187883a 	add	r3,r6,r6
   19c24:	20c9883a 	add	r4,r4,r3
   19c28:	100b883a 	mov	r5,r2
   19c2c:	200d883a 	mov	r6,r4
   19c30:	39ffffc4 	addi	r7,r7,-1
   19c34:	413ff82e 	bgeu	r8,r4,19c18 <__unpack_d+0x70>
   19c38:	69c00215 	stw	r7,8(r13)
   19c3c:	69800415 	stw	r6,16(r13)
   19c40:	69400315 	stw	r5,12(r13)
   19c44:	f800283a 	ret
   19c48:	00800084 	movi	r2,2
   19c4c:	28800015 	stw	r2,0(r5)
   19c50:	f800283a 	ret
   19c54:	0081ffc4 	movi	r2,2047
   19c58:	40800f26 	beq	r8,r2,19c98 <__unpack_d+0xf0>
   19c5c:	480cd63a 	srli	r6,r9,24
   19c60:	5006923a 	slli	r3,r10,8
   19c64:	4804923a 	slli	r2,r9,8
   19c68:	0009883a 	mov	r4,zero
   19c6c:	30c6b03a 	or	r3,r6,r3
   19c70:	01440034 	movhi	r5,4096
   19c74:	110cb03a 	or	r6,r2,r4
   19c78:	423f0044 	addi	r8,r8,-1023
   19c7c:	194eb03a 	or	r7,r3,r5
   19c80:	008000c4 	movi	r2,3
   19c84:	69c00415 	stw	r7,16(r13)
   19c88:	6a000215 	stw	r8,8(r13)
   19c8c:	68800015 	stw	r2,0(r13)
   19c90:	69800315 	stw	r6,12(r13)
   19c94:	f800283a 	ret
   19c98:	4a84b03a 	or	r2,r9,r10
   19c9c:	1000031e 	bne	r2,zero,19cac <__unpack_d+0x104>
   19ca0:	00800104 	movi	r2,4
   19ca4:	28800015 	stw	r2,0(r5)
   19ca8:	f800283a 	ret
   19cac:	0009883a 	mov	r4,zero
   19cb0:	01400234 	movhi	r5,8
   19cb4:	4904703a 	and	r2,r9,r4
   19cb8:	5146703a 	and	r3,r10,r5
   19cbc:	10c4b03a 	or	r2,r2,r3
   19cc0:	10000526 	beq	r2,zero,19cd8 <__unpack_d+0x130>
   19cc4:	00800044 	movi	r2,1
   19cc8:	68800015 	stw	r2,0(r13)
   19ccc:	6b000415 	stw	r12,16(r13)
   19cd0:	6ac00315 	stw	r11,12(r13)
   19cd4:	f800283a 	ret
   19cd8:	68000015 	stw	zero,0(r13)
   19cdc:	003ffb06 	br	19ccc <__unpack_d+0x124>

00019ce0 <__fpcmp_parts_d>:
   19ce0:	21800017 	ldw	r6,0(r4)
   19ce4:	00c00044 	movi	r3,1
   19ce8:	19800a2e 	bgeu	r3,r6,19d14 <__fpcmp_parts_d+0x34>
   19cec:	28800017 	ldw	r2,0(r5)
   19cf0:	1880082e 	bgeu	r3,r2,19d14 <__fpcmp_parts_d+0x34>
   19cf4:	00c00104 	movi	r3,4
   19cf8:	30c02626 	beq	r6,r3,19d94 <__fpcmp_parts_d+0xb4>
   19cfc:	10c02226 	beq	r2,r3,19d88 <__fpcmp_parts_d+0xa8>
   19d00:	00c00084 	movi	r3,2
   19d04:	30c00526 	beq	r6,r3,19d1c <__fpcmp_parts_d+0x3c>
   19d08:	10c0071e 	bne	r2,r3,19d28 <__fpcmp_parts_d+0x48>
   19d0c:	20800117 	ldw	r2,4(r4)
   19d10:	1000091e 	bne	r2,zero,19d38 <__fpcmp_parts_d+0x58>
   19d14:	00800044 	movi	r2,1
   19d18:	f800283a 	ret
   19d1c:	10c01a1e 	bne	r2,r3,19d88 <__fpcmp_parts_d+0xa8>
   19d20:	0005883a 	mov	r2,zero
   19d24:	f800283a 	ret
   19d28:	22000117 	ldw	r8,4(r4)
   19d2c:	28800117 	ldw	r2,4(r5)
   19d30:	40800326 	beq	r8,r2,19d40 <__fpcmp_parts_d+0x60>
   19d34:	403ff726 	beq	r8,zero,19d14 <__fpcmp_parts_d+0x34>
   19d38:	00bfffc4 	movi	r2,-1
   19d3c:	f800283a 	ret
   19d40:	20c00217 	ldw	r3,8(r4)
   19d44:	28800217 	ldw	r2,8(r5)
   19d48:	10fffa16 	blt	r2,r3,19d34 <__fpcmp_parts_d+0x54>
   19d4c:	18800916 	blt	r3,r2,19d74 <__fpcmp_parts_d+0x94>
   19d50:	21c00417 	ldw	r7,16(r4)
   19d54:	28c00417 	ldw	r3,16(r5)
   19d58:	21800317 	ldw	r6,12(r4)
   19d5c:	28800317 	ldw	r2,12(r5)
   19d60:	19fff436 	bltu	r3,r7,19d34 <__fpcmp_parts_d+0x54>
   19d64:	38c00526 	beq	r7,r3,19d7c <__fpcmp_parts_d+0x9c>
   19d68:	38c00236 	bltu	r7,r3,19d74 <__fpcmp_parts_d+0x94>
   19d6c:	19ffec1e 	bne	r3,r7,19d20 <__fpcmp_parts_d+0x40>
   19d70:	30bfeb2e 	bgeu	r6,r2,19d20 <__fpcmp_parts_d+0x40>
   19d74:	403fe71e 	bne	r8,zero,19d14 <__fpcmp_parts_d+0x34>
   19d78:	003fef06 	br	19d38 <__fpcmp_parts_d+0x58>
   19d7c:	11bffa2e 	bgeu	r2,r6,19d68 <__fpcmp_parts_d+0x88>
   19d80:	403fe426 	beq	r8,zero,19d14 <__fpcmp_parts_d+0x34>
   19d84:	003fec06 	br	19d38 <__fpcmp_parts_d+0x58>
   19d88:	28800117 	ldw	r2,4(r5)
   19d8c:	103fe11e 	bne	r2,zero,19d14 <__fpcmp_parts_d+0x34>
   19d90:	003fe906 	br	19d38 <__fpcmp_parts_d+0x58>
   19d94:	11bfdd1e 	bne	r2,r6,19d0c <__fpcmp_parts_d+0x2c>
   19d98:	28c00117 	ldw	r3,4(r5)
   19d9c:	20800117 	ldw	r2,4(r4)
   19da0:	1885c83a 	sub	r2,r3,r2
   19da4:	f800283a 	ret

00019da8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   19da8:	defff804 	addi	sp,sp,-32
   19dac:	dfc00715 	stw	ra,28(sp)
   19db0:	df000615 	stw	fp,24(sp)
   19db4:	df000604 	addi	fp,sp,24
   19db8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   19dbc:	e0bffc17 	ldw	r2,-16(fp)
   19dc0:	1004803a 	cmplt	r2,r2,zero
   19dc4:	1000081e 	bne	r2,zero,19de8 <close+0x40>
   19dc8:	e0bffc17 	ldw	r2,-16(fp)
   19dcc:	10800324 	muli	r2,r2,12
   19dd0:	1007883a 	mov	r3,r2
   19dd4:	008000f4 	movhi	r2,3
   19dd8:	10a2fc04 	addi	r2,r2,-29712
   19ddc:	1887883a 	add	r3,r3,r2
   19de0:	e0ffff15 	stw	r3,-4(fp)
   19de4:	00000106 	br	19dec <close+0x44>
   19de8:	e03fff15 	stw	zero,-4(fp)
   19dec:	e0bfff17 	ldw	r2,-4(fp)
   19df0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   19df4:	e0bffb17 	ldw	r2,-20(fp)
   19df8:	1005003a 	cmpeq	r2,r2,zero
   19dfc:	10001d1e 	bne	r2,zero,19e74 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   19e00:	e0bffb17 	ldw	r2,-20(fp)
   19e04:	10800017 	ldw	r2,0(r2)
   19e08:	10800417 	ldw	r2,16(r2)
   19e0c:	1005003a 	cmpeq	r2,r2,zero
   19e10:	1000071e 	bne	r2,zero,19e30 <close+0x88>
   19e14:	e0bffb17 	ldw	r2,-20(fp)
   19e18:	10800017 	ldw	r2,0(r2)
   19e1c:	10800417 	ldw	r2,16(r2)
   19e20:	e13ffb17 	ldw	r4,-20(fp)
   19e24:	103ee83a 	callr	r2
   19e28:	e0bffe15 	stw	r2,-8(fp)
   19e2c:	00000106 	br	19e34 <close+0x8c>
   19e30:	e03ffe15 	stw	zero,-8(fp)
   19e34:	e0bffe17 	ldw	r2,-8(fp)
   19e38:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   19e3c:	e13ffc17 	ldw	r4,-16(fp)
   19e40:	001a5ec0 	call	1a5ec <alt_release_fd>
    if (rval < 0)
   19e44:	e0bffa17 	ldw	r2,-24(fp)
   19e48:	1004403a 	cmpge	r2,r2,zero
   19e4c:	1000071e 	bne	r2,zero,19e6c <close+0xc4>
    {
      ALT_ERRNO = -rval;
   19e50:	0019ea40 	call	19ea4 <alt_get_errno>
   19e54:	e0fffa17 	ldw	r3,-24(fp)
   19e58:	00c7c83a 	sub	r3,zero,r3
   19e5c:	10c00015 	stw	r3,0(r2)
      return -1;
   19e60:	00bfffc4 	movi	r2,-1
   19e64:	e0bffd15 	stw	r2,-12(fp)
   19e68:	00000806 	br	19e8c <close+0xe4>
    }
    return 0;
   19e6c:	e03ffd15 	stw	zero,-12(fp)
   19e70:	00000606 	br	19e8c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19e74:	0019ea40 	call	19ea4 <alt_get_errno>
   19e78:	1007883a 	mov	r3,r2
   19e7c:	00801444 	movi	r2,81
   19e80:	18800015 	stw	r2,0(r3)
    return -1;
   19e84:	00bfffc4 	movi	r2,-1
   19e88:	e0bffd15 	stw	r2,-12(fp)
   19e8c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   19e90:	e037883a 	mov	sp,fp
   19e94:	dfc00117 	ldw	ra,4(sp)
   19e98:	df000017 	ldw	fp,0(sp)
   19e9c:	dec00204 	addi	sp,sp,8
   19ea0:	f800283a 	ret

00019ea4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19ea4:	defffd04 	addi	sp,sp,-12
   19ea8:	dfc00215 	stw	ra,8(sp)
   19eac:	df000115 	stw	fp,4(sp)
   19eb0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   19eb4:	008000f4 	movhi	r2,3
   19eb8:	10a77f04 	addi	r2,r2,-25092
   19ebc:	10800017 	ldw	r2,0(r2)
   19ec0:	1005003a 	cmpeq	r2,r2,zero
   19ec4:	1000061e 	bne	r2,zero,19ee0 <alt_get_errno+0x3c>
   19ec8:	008000f4 	movhi	r2,3
   19ecc:	10a77f04 	addi	r2,r2,-25092
   19ed0:	10800017 	ldw	r2,0(r2)
   19ed4:	103ee83a 	callr	r2
   19ed8:	e0bfff15 	stw	r2,-4(fp)
   19edc:	00000306 	br	19eec <alt_get_errno+0x48>
   19ee0:	008000f4 	movhi	r2,3
   19ee4:	10a78f04 	addi	r2,r2,-25028
   19ee8:	e0bfff15 	stw	r2,-4(fp)
   19eec:	e0bfff17 	ldw	r2,-4(fp)
}
   19ef0:	e037883a 	mov	sp,fp
   19ef4:	dfc00117 	ldw	ra,4(sp)
   19ef8:	df000017 	ldw	fp,0(sp)
   19efc:	dec00204 	addi	sp,sp,8
   19f00:	f800283a 	ret

00019f04 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   19f04:	defffc04 	addi	sp,sp,-16
   19f08:	df000315 	stw	fp,12(sp)
   19f0c:	df000304 	addi	fp,sp,12
   19f10:	e13ffd15 	stw	r4,-12(fp)
   19f14:	e17ffe15 	stw	r5,-8(fp)
   19f18:	e1bfff15 	stw	r6,-4(fp)
  return len;
   19f1c:	e0bfff17 	ldw	r2,-4(fp)
}
   19f20:	e037883a 	mov	sp,fp
   19f24:	df000017 	ldw	fp,0(sp)
   19f28:	dec00104 	addi	sp,sp,4
   19f2c:	f800283a 	ret

00019f30 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   19f30:	defff904 	addi	sp,sp,-28
   19f34:	dfc00615 	stw	ra,24(sp)
   19f38:	df000515 	stw	fp,20(sp)
   19f3c:	df000504 	addi	fp,sp,20
   19f40:	e13ffc15 	stw	r4,-16(fp)
   19f44:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   19f48:	e0bffc17 	ldw	r2,-16(fp)
   19f4c:	1004803a 	cmplt	r2,r2,zero
   19f50:	1000081e 	bne	r2,zero,19f74 <fstat+0x44>
   19f54:	e0bffc17 	ldw	r2,-16(fp)
   19f58:	10800324 	muli	r2,r2,12
   19f5c:	1007883a 	mov	r3,r2
   19f60:	008000f4 	movhi	r2,3
   19f64:	10a2fc04 	addi	r2,r2,-29712
   19f68:	1887883a 	add	r3,r3,r2
   19f6c:	e0ffff15 	stw	r3,-4(fp)
   19f70:	00000106 	br	19f78 <fstat+0x48>
   19f74:	e03fff15 	stw	zero,-4(fp)
   19f78:	e0bfff17 	ldw	r2,-4(fp)
   19f7c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   19f80:	e0bffb17 	ldw	r2,-20(fp)
   19f84:	1005003a 	cmpeq	r2,r2,zero
   19f88:	1000121e 	bne	r2,zero,19fd4 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   19f8c:	e0bffb17 	ldw	r2,-20(fp)
   19f90:	10800017 	ldw	r2,0(r2)
   19f94:	10800817 	ldw	r2,32(r2)
   19f98:	1005003a 	cmpeq	r2,r2,zero
   19f9c:	1000081e 	bne	r2,zero,19fc0 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   19fa0:	e0bffb17 	ldw	r2,-20(fp)
   19fa4:	10800017 	ldw	r2,0(r2)
   19fa8:	10800817 	ldw	r2,32(r2)
   19fac:	e13ffb17 	ldw	r4,-20(fp)
   19fb0:	e17ffd17 	ldw	r5,-12(fp)
   19fb4:	103ee83a 	callr	r2
   19fb8:	e0bffe15 	stw	r2,-8(fp)
   19fbc:	00000b06 	br	19fec <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   19fc0:	e0fffd17 	ldw	r3,-12(fp)
   19fc4:	00880004 	movi	r2,8192
   19fc8:	18800115 	stw	r2,4(r3)
      return 0;
   19fcc:	e03ffe15 	stw	zero,-8(fp)
   19fd0:	00000606 	br	19fec <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19fd4:	001a0040 	call	1a004 <alt_get_errno>
   19fd8:	1007883a 	mov	r3,r2
   19fdc:	00801444 	movi	r2,81
   19fe0:	18800015 	stw	r2,0(r3)
    return -1;
   19fe4:	00bfffc4 	movi	r2,-1
   19fe8:	e0bffe15 	stw	r2,-8(fp)
   19fec:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   19ff0:	e037883a 	mov	sp,fp
   19ff4:	dfc00117 	ldw	ra,4(sp)
   19ff8:	df000017 	ldw	fp,0(sp)
   19ffc:	dec00204 	addi	sp,sp,8
   1a000:	f800283a 	ret

0001a004 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a004:	defffd04 	addi	sp,sp,-12
   1a008:	dfc00215 	stw	ra,8(sp)
   1a00c:	df000115 	stw	fp,4(sp)
   1a010:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1a014:	008000f4 	movhi	r2,3
   1a018:	10a77f04 	addi	r2,r2,-25092
   1a01c:	10800017 	ldw	r2,0(r2)
   1a020:	1005003a 	cmpeq	r2,r2,zero
   1a024:	1000061e 	bne	r2,zero,1a040 <alt_get_errno+0x3c>
   1a028:	008000f4 	movhi	r2,3
   1a02c:	10a77f04 	addi	r2,r2,-25092
   1a030:	10800017 	ldw	r2,0(r2)
   1a034:	103ee83a 	callr	r2
   1a038:	e0bfff15 	stw	r2,-4(fp)
   1a03c:	00000306 	br	1a04c <alt_get_errno+0x48>
   1a040:	008000f4 	movhi	r2,3
   1a044:	10a78f04 	addi	r2,r2,-25028
   1a048:	e0bfff15 	stw	r2,-4(fp)
   1a04c:	e0bfff17 	ldw	r2,-4(fp)
}
   1a050:	e037883a 	mov	sp,fp
   1a054:	dfc00117 	ldw	ra,4(sp)
   1a058:	df000017 	ldw	fp,0(sp)
   1a05c:	dec00204 	addi	sp,sp,8
   1a060:	f800283a 	ret

0001a064 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   1a064:	deffeb04 	addi	sp,sp,-84
   1a068:	dfc01415 	stw	ra,80(sp)
   1a06c:	df001315 	stw	fp,76(sp)
   1a070:	df001304 	addi	fp,sp,76
   1a074:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a078:	e0bffd17 	ldw	r2,-12(fp)
   1a07c:	1004803a 	cmplt	r2,r2,zero
   1a080:	1000081e 	bne	r2,zero,1a0a4 <isatty+0x40>
   1a084:	e0bffd17 	ldw	r2,-12(fp)
   1a088:	10800324 	muli	r2,r2,12
   1a08c:	1007883a 	mov	r3,r2
   1a090:	008000f4 	movhi	r2,3
   1a094:	10a2fc04 	addi	r2,r2,-29712
   1a098:	1887883a 	add	r3,r3,r2
   1a09c:	e0ffff15 	stw	r3,-4(fp)
   1a0a0:	00000106 	br	1a0a8 <isatty+0x44>
   1a0a4:	e03fff15 	stw	zero,-4(fp)
   1a0a8:	e0bfff17 	ldw	r2,-4(fp)
   1a0ac:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   1a0b0:	e0bfed17 	ldw	r2,-76(fp)
   1a0b4:	1005003a 	cmpeq	r2,r2,zero
   1a0b8:	10000f1e 	bne	r2,zero,1a0f8 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1a0bc:	e0bfed17 	ldw	r2,-76(fp)
   1a0c0:	10800017 	ldw	r2,0(r2)
   1a0c4:	10800817 	ldw	r2,32(r2)
   1a0c8:	1004c03a 	cmpne	r2,r2,zero
   1a0cc:	1000031e 	bne	r2,zero,1a0dc <isatty+0x78>
    {
      return 1;
   1a0d0:	00800044 	movi	r2,1
   1a0d4:	e0bffe15 	stw	r2,-8(fp)
   1a0d8:	00000c06 	br	1a10c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1a0dc:	e17fee04 	addi	r5,fp,-72
   1a0e0:	e13ffd17 	ldw	r4,-12(fp)
   1a0e4:	0019f300 	call	19f30 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1a0e8:	e0bfef17 	ldw	r2,-68(fp)
   1a0ec:	10880020 	cmpeqi	r2,r2,8192
   1a0f0:	e0bffe15 	stw	r2,-8(fp)
   1a0f4:	00000506 	br	1a10c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1a0f8:	001a1240 	call	1a124 <alt_get_errno>
   1a0fc:	1007883a 	mov	r3,r2
   1a100:	00801444 	movi	r2,81
   1a104:	18800015 	stw	r2,0(r3)
    return 0;
   1a108:	e03ffe15 	stw	zero,-8(fp)
   1a10c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   1a110:	e037883a 	mov	sp,fp
   1a114:	dfc00117 	ldw	ra,4(sp)
   1a118:	df000017 	ldw	fp,0(sp)
   1a11c:	dec00204 	addi	sp,sp,8
   1a120:	f800283a 	ret

0001a124 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a124:	defffd04 	addi	sp,sp,-12
   1a128:	dfc00215 	stw	ra,8(sp)
   1a12c:	df000115 	stw	fp,4(sp)
   1a130:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1a134:	008000f4 	movhi	r2,3
   1a138:	10a77f04 	addi	r2,r2,-25092
   1a13c:	10800017 	ldw	r2,0(r2)
   1a140:	1005003a 	cmpeq	r2,r2,zero
   1a144:	1000061e 	bne	r2,zero,1a160 <alt_get_errno+0x3c>
   1a148:	008000f4 	movhi	r2,3
   1a14c:	10a77f04 	addi	r2,r2,-25092
   1a150:	10800017 	ldw	r2,0(r2)
   1a154:	103ee83a 	callr	r2
   1a158:	e0bfff15 	stw	r2,-4(fp)
   1a15c:	00000306 	br	1a16c <alt_get_errno+0x48>
   1a160:	008000f4 	movhi	r2,3
   1a164:	10a78f04 	addi	r2,r2,-25028
   1a168:	e0bfff15 	stw	r2,-4(fp)
   1a16c:	e0bfff17 	ldw	r2,-4(fp)
}
   1a170:	e037883a 	mov	sp,fp
   1a174:	dfc00117 	ldw	ra,4(sp)
   1a178:	df000017 	ldw	fp,0(sp)
   1a17c:	dec00204 	addi	sp,sp,8
   1a180:	f800283a 	ret

0001a184 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1a184:	defffe04 	addi	sp,sp,-8
   1a188:	dfc00115 	stw	ra,4(sp)
   1a18c:	df000015 	stw	fp,0(sp)
   1a190:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1a194:	010000b4 	movhi	r4,2
   1a198:	21326804 	addi	r4,r4,-13920
   1a19c:	014000f4 	movhi	r5,3
   1a1a0:	2960ed04 	addi	r5,r5,-31820
   1a1a4:	018000f4 	movhi	r6,3
   1a1a8:	31a78404 	addi	r6,r6,-25072
   1a1ac:	001a2040 	call	1a204 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1a1b0:	01000074 	movhi	r4,1
   1a1b4:	21000804 	addi	r4,r4,32
   1a1b8:	01400074 	movhi	r5,1
   1a1bc:	29400804 	addi	r5,r5,32
   1a1c0:	01800074 	movhi	r6,1
   1a1c4:	31806d04 	addi	r6,r6,436
   1a1c8:	001a2040 	call	1a204 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1a1cc:	010000f4 	movhi	r4,3
   1a1d0:	21200004 	addi	r4,r4,-32768
   1a1d4:	014000f4 	movhi	r5,3
   1a1d8:	29600004 	addi	r5,r5,-32768
   1a1dc:	018000f4 	movhi	r6,3
   1a1e0:	31a0ed04 	addi	r6,r6,-31820
   1a1e4:	001a2040 	call	1a204 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1a1e8:	001b7e00 	call	1b7e0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1a1ec:	001b9d80 	call	1b9d8 <alt_icache_flush_all>
}
   1a1f0:	e037883a 	mov	sp,fp
   1a1f4:	dfc00117 	ldw	ra,4(sp)
   1a1f8:	df000017 	ldw	fp,0(sp)
   1a1fc:	dec00204 	addi	sp,sp,8
   1a200:	f800283a 	ret

0001a204 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1a204:	defffc04 	addi	sp,sp,-16
   1a208:	df000315 	stw	fp,12(sp)
   1a20c:	df000304 	addi	fp,sp,12
   1a210:	e13ffd15 	stw	r4,-12(fp)
   1a214:	e17ffe15 	stw	r5,-8(fp)
   1a218:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1a21c:	e0fffe17 	ldw	r3,-8(fp)
   1a220:	e0bffd17 	ldw	r2,-12(fp)
   1a224:	18800e26 	beq	r3,r2,1a260 <alt_load_section+0x5c>
  {
    while( to != end )
   1a228:	00000a06 	br	1a254 <alt_load_section+0x50>
    {
      *to++ = *from++;
   1a22c:	e0bffd17 	ldw	r2,-12(fp)
   1a230:	10c00017 	ldw	r3,0(r2)
   1a234:	e0bffe17 	ldw	r2,-8(fp)
   1a238:	10c00015 	stw	r3,0(r2)
   1a23c:	e0bffe17 	ldw	r2,-8(fp)
   1a240:	10800104 	addi	r2,r2,4
   1a244:	e0bffe15 	stw	r2,-8(fp)
   1a248:	e0bffd17 	ldw	r2,-12(fp)
   1a24c:	10800104 	addi	r2,r2,4
   1a250:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1a254:	e0fffe17 	ldw	r3,-8(fp)
   1a258:	e0bfff17 	ldw	r2,-4(fp)
   1a25c:	18bff31e 	bne	r3,r2,1a22c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   1a260:	e037883a 	mov	sp,fp
   1a264:	df000017 	ldw	fp,0(sp)
   1a268:	dec00104 	addi	sp,sp,4
   1a26c:	f800283a 	ret

0001a270 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1a270:	defff804 	addi	sp,sp,-32
   1a274:	dfc00715 	stw	ra,28(sp)
   1a278:	df000615 	stw	fp,24(sp)
   1a27c:	df000604 	addi	fp,sp,24
   1a280:	e13ffc15 	stw	r4,-16(fp)
   1a284:	e17ffd15 	stw	r5,-12(fp)
   1a288:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1a28c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a290:	e0bffc17 	ldw	r2,-16(fp)
   1a294:	1004803a 	cmplt	r2,r2,zero
   1a298:	1000081e 	bne	r2,zero,1a2bc <lseek+0x4c>
   1a29c:	e0bffc17 	ldw	r2,-16(fp)
   1a2a0:	10800324 	muli	r2,r2,12
   1a2a4:	1007883a 	mov	r3,r2
   1a2a8:	008000f4 	movhi	r2,3
   1a2ac:	10a2fc04 	addi	r2,r2,-29712
   1a2b0:	1887883a 	add	r3,r3,r2
   1a2b4:	e0ffff15 	stw	r3,-4(fp)
   1a2b8:	00000106 	br	1a2c0 <lseek+0x50>
   1a2bc:	e03fff15 	stw	zero,-4(fp)
   1a2c0:	e0bfff17 	ldw	r2,-4(fp)
   1a2c4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   1a2c8:	e0bffb17 	ldw	r2,-20(fp)
   1a2cc:	1005003a 	cmpeq	r2,r2,zero
   1a2d0:	1000111e 	bne	r2,zero,1a318 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1a2d4:	e0bffb17 	ldw	r2,-20(fp)
   1a2d8:	10800017 	ldw	r2,0(r2)
   1a2dc:	10800717 	ldw	r2,28(r2)
   1a2e0:	1005003a 	cmpeq	r2,r2,zero
   1a2e4:	1000091e 	bne	r2,zero,1a30c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1a2e8:	e0bffb17 	ldw	r2,-20(fp)
   1a2ec:	10800017 	ldw	r2,0(r2)
   1a2f0:	10800717 	ldw	r2,28(r2)
   1a2f4:	e13ffb17 	ldw	r4,-20(fp)
   1a2f8:	e17ffd17 	ldw	r5,-12(fp)
   1a2fc:	e1bffe17 	ldw	r6,-8(fp)
   1a300:	103ee83a 	callr	r2
   1a304:	e0bffa15 	stw	r2,-24(fp)
   1a308:	00000506 	br	1a320 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1a30c:	00bfde84 	movi	r2,-134
   1a310:	e0bffa15 	stw	r2,-24(fp)
   1a314:	00000206 	br	1a320 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   1a318:	00bfebc4 	movi	r2,-81
   1a31c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   1a320:	e0bffa17 	ldw	r2,-24(fp)
   1a324:	1004403a 	cmpge	r2,r2,zero
   1a328:	1000071e 	bne	r2,zero,1a348 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   1a32c:	001a3600 	call	1a360 <alt_get_errno>
   1a330:	1007883a 	mov	r3,r2
   1a334:	e0bffa17 	ldw	r2,-24(fp)
   1a338:	0085c83a 	sub	r2,zero,r2
   1a33c:	18800015 	stw	r2,0(r3)
    rc = -1;
   1a340:	00bfffc4 	movi	r2,-1
   1a344:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   1a348:	e0bffa17 	ldw	r2,-24(fp)
}
   1a34c:	e037883a 	mov	sp,fp
   1a350:	dfc00117 	ldw	ra,4(sp)
   1a354:	df000017 	ldw	fp,0(sp)
   1a358:	dec00204 	addi	sp,sp,8
   1a35c:	f800283a 	ret

0001a360 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a360:	defffd04 	addi	sp,sp,-12
   1a364:	dfc00215 	stw	ra,8(sp)
   1a368:	df000115 	stw	fp,4(sp)
   1a36c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1a370:	008000f4 	movhi	r2,3
   1a374:	10a77f04 	addi	r2,r2,-25092
   1a378:	10800017 	ldw	r2,0(r2)
   1a37c:	1005003a 	cmpeq	r2,r2,zero
   1a380:	1000061e 	bne	r2,zero,1a39c <alt_get_errno+0x3c>
   1a384:	008000f4 	movhi	r2,3
   1a388:	10a77f04 	addi	r2,r2,-25092
   1a38c:	10800017 	ldw	r2,0(r2)
   1a390:	103ee83a 	callr	r2
   1a394:	e0bfff15 	stw	r2,-4(fp)
   1a398:	00000306 	br	1a3a8 <alt_get_errno+0x48>
   1a39c:	008000f4 	movhi	r2,3
   1a3a0:	10a78f04 	addi	r2,r2,-25028
   1a3a4:	e0bfff15 	stw	r2,-4(fp)
   1a3a8:	e0bfff17 	ldw	r2,-4(fp)
}
   1a3ac:	e037883a 	mov	sp,fp
   1a3b0:	dfc00117 	ldw	ra,4(sp)
   1a3b4:	df000017 	ldw	fp,0(sp)
   1a3b8:	dec00204 	addi	sp,sp,8
   1a3bc:	f800283a 	ret

0001a3c0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1a3c0:	defffd04 	addi	sp,sp,-12
   1a3c4:	dfc00215 	stw	ra,8(sp)
   1a3c8:	df000115 	stw	fp,4(sp)
   1a3cc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1a3d0:	0009883a 	mov	r4,zero
   1a3d4:	001a8880 	call	1a888 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1a3d8:	001a8bc0 	call	1a8bc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1a3dc:	010000f4 	movhi	r4,3
   1a3e0:	2120e304 	addi	r4,r4,-31860
   1a3e4:	014000f4 	movhi	r5,3
   1a3e8:	2960e304 	addi	r5,r5,-31860
   1a3ec:	018000f4 	movhi	r6,3
   1a3f0:	31a0e304 	addi	r6,r6,-31860
   1a3f4:	001bd980 	call	1bd98 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1a3f8:	001b9100 	call	1b910 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1a3fc:	010000b4 	movhi	r4,2
   1a400:	212e5d04 	addi	r4,r4,-18060
   1a404:	001c5940 	call	1c594 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1a408:	d1201c17 	ldw	r4,-32656(gp)
   1a40c:	d1601d17 	ldw	r5,-32652(gp)
   1a410:	d1a01e17 	ldw	r6,-32648(gp)
   1a414:	00105580 	call	10558 <main>
   1a418:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1a41c:	01000044 	movi	r4,1
   1a420:	0019da80 	call	19da8 <close>
  exit (result);
   1a424:	e13fff17 	ldw	r4,-4(fp)
   1a428:	001c5a80 	call	1c5a8 <exit>

0001a42c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1a42c:	defffe04 	addi	sp,sp,-8
   1a430:	df000115 	stw	fp,4(sp)
   1a434:	df000104 	addi	fp,sp,4
   1a438:	e13fff15 	stw	r4,-4(fp)
}
   1a43c:	e037883a 	mov	sp,fp
   1a440:	df000017 	ldw	fp,0(sp)
   1a444:	dec00104 	addi	sp,sp,4
   1a448:	f800283a 	ret

0001a44c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1a44c:	defffe04 	addi	sp,sp,-8
   1a450:	df000115 	stw	fp,4(sp)
   1a454:	df000104 	addi	fp,sp,4
   1a458:	e13fff15 	stw	r4,-4(fp)
}
   1a45c:	e037883a 	mov	sp,fp
   1a460:	df000017 	ldw	fp,0(sp)
   1a464:	dec00104 	addi	sp,sp,4
   1a468:	f800283a 	ret

0001a46c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1a46c:	defff704 	addi	sp,sp,-36
   1a470:	dfc00815 	stw	ra,32(sp)
   1a474:	df000715 	stw	fp,28(sp)
   1a478:	df000704 	addi	fp,sp,28
   1a47c:	e13ffb15 	stw	r4,-20(fp)
   1a480:	e17ffc15 	stw	r5,-16(fp)
   1a484:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a488:	e0bffb17 	ldw	r2,-20(fp)
   1a48c:	1004803a 	cmplt	r2,r2,zero
   1a490:	1000081e 	bne	r2,zero,1a4b4 <read+0x48>
   1a494:	e0bffb17 	ldw	r2,-20(fp)
   1a498:	10800324 	muli	r2,r2,12
   1a49c:	1007883a 	mov	r3,r2
   1a4a0:	008000f4 	movhi	r2,3
   1a4a4:	10a2fc04 	addi	r2,r2,-29712
   1a4a8:	1887883a 	add	r3,r3,r2
   1a4ac:	e0ffff15 	stw	r3,-4(fp)
   1a4b0:	00000106 	br	1a4b8 <read+0x4c>
   1a4b4:	e03fff15 	stw	zero,-4(fp)
   1a4b8:	e0bfff17 	ldw	r2,-4(fp)
   1a4bc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   1a4c0:	e0bffa17 	ldw	r2,-24(fp)
   1a4c4:	1005003a 	cmpeq	r2,r2,zero
   1a4c8:	1000241e 	bne	r2,zero,1a55c <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1a4cc:	e0bffa17 	ldw	r2,-24(fp)
   1a4d0:	10800217 	ldw	r2,8(r2)
   1a4d4:	108000cc 	andi	r2,r2,3
   1a4d8:	10800060 	cmpeqi	r2,r2,1
   1a4dc:	10001a1e 	bne	r2,zero,1a548 <read+0xdc>
   1a4e0:	e0bffa17 	ldw	r2,-24(fp)
   1a4e4:	10800017 	ldw	r2,0(r2)
   1a4e8:	10800517 	ldw	r2,20(r2)
   1a4ec:	1005003a 	cmpeq	r2,r2,zero
   1a4f0:	1000151e 	bne	r2,zero,1a548 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1a4f4:	e0bffa17 	ldw	r2,-24(fp)
   1a4f8:	10800017 	ldw	r2,0(r2)
   1a4fc:	10800517 	ldw	r2,20(r2)
   1a500:	e17ffc17 	ldw	r5,-16(fp)
   1a504:	e1bffd17 	ldw	r6,-12(fp)
   1a508:	e13ffa17 	ldw	r4,-24(fp)
   1a50c:	103ee83a 	callr	r2
   1a510:	e0bff915 	stw	r2,-28(fp)
   1a514:	e0bff917 	ldw	r2,-28(fp)
   1a518:	1004403a 	cmpge	r2,r2,zero
   1a51c:	1000071e 	bne	r2,zero,1a53c <read+0xd0>
        {
          ALT_ERRNO = -rval;
   1a520:	001a58c0 	call	1a58c <alt_get_errno>
   1a524:	e0fff917 	ldw	r3,-28(fp)
   1a528:	00c7c83a 	sub	r3,zero,r3
   1a52c:	10c00015 	stw	r3,0(r2)
          return -1;
   1a530:	00bfffc4 	movi	r2,-1
   1a534:	e0bffe15 	stw	r2,-8(fp)
   1a538:	00000e06 	br	1a574 <read+0x108>
        }
        return rval;
   1a53c:	e0bff917 	ldw	r2,-28(fp)
   1a540:	e0bffe15 	stw	r2,-8(fp)
   1a544:	00000b06 	br	1a574 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1a548:	001a58c0 	call	1a58c <alt_get_errno>
   1a54c:	1007883a 	mov	r3,r2
   1a550:	00800344 	movi	r2,13
   1a554:	18800015 	stw	r2,0(r3)
   1a558:	00000406 	br	1a56c <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1a55c:	001a58c0 	call	1a58c <alt_get_errno>
   1a560:	1007883a 	mov	r3,r2
   1a564:	00801444 	movi	r2,81
   1a568:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1a56c:	00bfffc4 	movi	r2,-1
   1a570:	e0bffe15 	stw	r2,-8(fp)
   1a574:	e0bffe17 	ldw	r2,-8(fp)
}
   1a578:	e037883a 	mov	sp,fp
   1a57c:	dfc00117 	ldw	ra,4(sp)
   1a580:	df000017 	ldw	fp,0(sp)
   1a584:	dec00204 	addi	sp,sp,8
   1a588:	f800283a 	ret

0001a58c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a58c:	defffd04 	addi	sp,sp,-12
   1a590:	dfc00215 	stw	ra,8(sp)
   1a594:	df000115 	stw	fp,4(sp)
   1a598:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1a59c:	008000f4 	movhi	r2,3
   1a5a0:	10a77f04 	addi	r2,r2,-25092
   1a5a4:	10800017 	ldw	r2,0(r2)
   1a5a8:	1005003a 	cmpeq	r2,r2,zero
   1a5ac:	1000061e 	bne	r2,zero,1a5c8 <alt_get_errno+0x3c>
   1a5b0:	008000f4 	movhi	r2,3
   1a5b4:	10a77f04 	addi	r2,r2,-25092
   1a5b8:	10800017 	ldw	r2,0(r2)
   1a5bc:	103ee83a 	callr	r2
   1a5c0:	e0bfff15 	stw	r2,-4(fp)
   1a5c4:	00000306 	br	1a5d4 <alt_get_errno+0x48>
   1a5c8:	008000f4 	movhi	r2,3
   1a5cc:	10a78f04 	addi	r2,r2,-25028
   1a5d0:	e0bfff15 	stw	r2,-4(fp)
   1a5d4:	e0bfff17 	ldw	r2,-4(fp)
}
   1a5d8:	e037883a 	mov	sp,fp
   1a5dc:	dfc00117 	ldw	ra,4(sp)
   1a5e0:	df000017 	ldw	fp,0(sp)
   1a5e4:	dec00204 	addi	sp,sp,8
   1a5e8:	f800283a 	ret

0001a5ec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1a5ec:	defffe04 	addi	sp,sp,-8
   1a5f0:	df000115 	stw	fp,4(sp)
   1a5f4:	df000104 	addi	fp,sp,4
   1a5f8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   1a5fc:	e0bfff17 	ldw	r2,-4(fp)
   1a600:	108000d0 	cmplti	r2,r2,3
   1a604:	10000d1e 	bne	r2,zero,1a63c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   1a608:	e0bfff17 	ldw	r2,-4(fp)
   1a60c:	00c000f4 	movhi	r3,3
   1a610:	18e2fc04 	addi	r3,r3,-29712
   1a614:	10800324 	muli	r2,r2,12
   1a618:	10c5883a 	add	r2,r2,r3
   1a61c:	10800204 	addi	r2,r2,8
   1a620:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1a624:	e0bfff17 	ldw	r2,-4(fp)
   1a628:	00c000f4 	movhi	r3,3
   1a62c:	18e2fc04 	addi	r3,r3,-29712
   1a630:	10800324 	muli	r2,r2,12
   1a634:	10c5883a 	add	r2,r2,r3
   1a638:	10000015 	stw	zero,0(r2)
  }
}
   1a63c:	e037883a 	mov	sp,fp
   1a640:	df000017 	ldw	fp,0(sp)
   1a644:	dec00104 	addi	sp,sp,4
   1a648:	f800283a 	ret

0001a64c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1a64c:	defff804 	addi	sp,sp,-32
   1a650:	df000715 	stw	fp,28(sp)
   1a654:	df000704 	addi	fp,sp,28
   1a658:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a65c:	0005303a 	rdctl	r2,status
   1a660:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a664:	e0fffb17 	ldw	r3,-20(fp)
   1a668:	00bfff84 	movi	r2,-2
   1a66c:	1884703a 	and	r2,r3,r2
   1a670:	1001703a 	wrctl	status,r2
  
  return context;
   1a674:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1a678:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1a67c:	d0a00c17 	ldw	r2,-32720(gp)
   1a680:	10c000c4 	addi	r3,r2,3
   1a684:	00bfff04 	movi	r2,-4
   1a688:	1884703a 	and	r2,r3,r2
   1a68c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1a690:	d0e00c17 	ldw	r3,-32720(gp)
   1a694:	e0bffe17 	ldw	r2,-8(fp)
   1a698:	1887883a 	add	r3,r3,r2
   1a69c:	008000f4 	movhi	r2,3
   1a6a0:	10800004 	addi	r2,r2,0
   1a6a4:	10c0072e 	bgeu	r2,r3,1a6c4 <sbrk+0x78>
   1a6a8:	e0bffd17 	ldw	r2,-12(fp)
   1a6ac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a6b0:	e0bffa17 	ldw	r2,-24(fp)
   1a6b4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1a6b8:	00bfffc4 	movi	r2,-1
   1a6bc:	e0bfff15 	stw	r2,-4(fp)
   1a6c0:	00000c06 	br	1a6f4 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   1a6c4:	d0a00c17 	ldw	r2,-32720(gp)
   1a6c8:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   1a6cc:	d0e00c17 	ldw	r3,-32720(gp)
   1a6d0:	e0bffe17 	ldw	r2,-8(fp)
   1a6d4:	1885883a 	add	r2,r3,r2
   1a6d8:	d0a00c15 	stw	r2,-32720(gp)
   1a6dc:	e0bffd17 	ldw	r2,-12(fp)
   1a6e0:	e0bff915 	stw	r2,-28(fp)
   1a6e4:	e0bff917 	ldw	r2,-28(fp)
   1a6e8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1a6ec:	e0bffc17 	ldw	r2,-16(fp)
   1a6f0:	e0bfff15 	stw	r2,-4(fp)
   1a6f4:	e0bfff17 	ldw	r2,-4(fp)
} 
   1a6f8:	e037883a 	mov	sp,fp
   1a6fc:	df000017 	ldw	fp,0(sp)
   1a700:	dec00104 	addi	sp,sp,4
   1a704:	f800283a 	ret

0001a708 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1a708:	defff704 	addi	sp,sp,-36
   1a70c:	dfc00815 	stw	ra,32(sp)
   1a710:	df000715 	stw	fp,28(sp)
   1a714:	df000704 	addi	fp,sp,28
   1a718:	e13ffb15 	stw	r4,-20(fp)
   1a71c:	e17ffc15 	stw	r5,-16(fp)
   1a720:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a724:	e0bffb17 	ldw	r2,-20(fp)
   1a728:	1004803a 	cmplt	r2,r2,zero
   1a72c:	1000081e 	bne	r2,zero,1a750 <write+0x48>
   1a730:	e0bffb17 	ldw	r2,-20(fp)
   1a734:	10800324 	muli	r2,r2,12
   1a738:	1007883a 	mov	r3,r2
   1a73c:	008000f4 	movhi	r2,3
   1a740:	10a2fc04 	addi	r2,r2,-29712
   1a744:	1887883a 	add	r3,r3,r2
   1a748:	e0ffff15 	stw	r3,-4(fp)
   1a74c:	00000106 	br	1a754 <write+0x4c>
   1a750:	e03fff15 	stw	zero,-4(fp)
   1a754:	e0bfff17 	ldw	r2,-4(fp)
   1a758:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   1a75c:	e0bffa17 	ldw	r2,-24(fp)
   1a760:	1005003a 	cmpeq	r2,r2,zero
   1a764:	1000241e 	bne	r2,zero,1a7f8 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1a768:	e0bffa17 	ldw	r2,-24(fp)
   1a76c:	10800217 	ldw	r2,8(r2)
   1a770:	108000cc 	andi	r2,r2,3
   1a774:	1005003a 	cmpeq	r2,r2,zero
   1a778:	10001a1e 	bne	r2,zero,1a7e4 <write+0xdc>
   1a77c:	e0bffa17 	ldw	r2,-24(fp)
   1a780:	10800017 	ldw	r2,0(r2)
   1a784:	10800617 	ldw	r2,24(r2)
   1a788:	1005003a 	cmpeq	r2,r2,zero
   1a78c:	1000151e 	bne	r2,zero,1a7e4 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1a790:	e0bffa17 	ldw	r2,-24(fp)
   1a794:	10800017 	ldw	r2,0(r2)
   1a798:	10800617 	ldw	r2,24(r2)
   1a79c:	e17ffc17 	ldw	r5,-16(fp)
   1a7a0:	e1bffd17 	ldw	r6,-12(fp)
   1a7a4:	e13ffa17 	ldw	r4,-24(fp)
   1a7a8:	103ee83a 	callr	r2
   1a7ac:	e0bff915 	stw	r2,-28(fp)
   1a7b0:	e0bff917 	ldw	r2,-28(fp)
   1a7b4:	1004403a 	cmpge	r2,r2,zero
   1a7b8:	1000071e 	bne	r2,zero,1a7d8 <write+0xd0>
      {
        ALT_ERRNO = -rval;
   1a7bc:	001a8280 	call	1a828 <alt_get_errno>
   1a7c0:	e0fff917 	ldw	r3,-28(fp)
   1a7c4:	00c7c83a 	sub	r3,zero,r3
   1a7c8:	10c00015 	stw	r3,0(r2)
        return -1;
   1a7cc:	00bfffc4 	movi	r2,-1
   1a7d0:	e0bffe15 	stw	r2,-8(fp)
   1a7d4:	00000e06 	br	1a810 <write+0x108>
      }
      return rval;
   1a7d8:	e0bff917 	ldw	r2,-28(fp)
   1a7dc:	e0bffe15 	stw	r2,-8(fp)
   1a7e0:	00000b06 	br	1a810 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1a7e4:	001a8280 	call	1a828 <alt_get_errno>
   1a7e8:	1007883a 	mov	r3,r2
   1a7ec:	00800344 	movi	r2,13
   1a7f0:	18800015 	stw	r2,0(r3)
   1a7f4:	00000406 	br	1a808 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1a7f8:	001a8280 	call	1a828 <alt_get_errno>
   1a7fc:	1007883a 	mov	r3,r2
   1a800:	00801444 	movi	r2,81
   1a804:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1a808:	00bfffc4 	movi	r2,-1
   1a80c:	e0bffe15 	stw	r2,-8(fp)
   1a810:	e0bffe17 	ldw	r2,-8(fp)
}
   1a814:	e037883a 	mov	sp,fp
   1a818:	dfc00117 	ldw	ra,4(sp)
   1a81c:	df000017 	ldw	fp,0(sp)
   1a820:	dec00204 	addi	sp,sp,8
   1a824:	f800283a 	ret

0001a828 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a828:	defffd04 	addi	sp,sp,-12
   1a82c:	dfc00215 	stw	ra,8(sp)
   1a830:	df000115 	stw	fp,4(sp)
   1a834:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1a838:	008000f4 	movhi	r2,3
   1a83c:	10a77f04 	addi	r2,r2,-25092
   1a840:	10800017 	ldw	r2,0(r2)
   1a844:	1005003a 	cmpeq	r2,r2,zero
   1a848:	1000061e 	bne	r2,zero,1a864 <alt_get_errno+0x3c>
   1a84c:	008000f4 	movhi	r2,3
   1a850:	10a77f04 	addi	r2,r2,-25092
   1a854:	10800017 	ldw	r2,0(r2)
   1a858:	103ee83a 	callr	r2
   1a85c:	e0bfff15 	stw	r2,-4(fp)
   1a860:	00000306 	br	1a870 <alt_get_errno+0x48>
   1a864:	008000f4 	movhi	r2,3
   1a868:	10a78f04 	addi	r2,r2,-25028
   1a86c:	e0bfff15 	stw	r2,-4(fp)
   1a870:	e0bfff17 	ldw	r2,-4(fp)
}
   1a874:	e037883a 	mov	sp,fp
   1a878:	dfc00117 	ldw	ra,4(sp)
   1a87c:	df000017 	ldw	fp,0(sp)
   1a880:	dec00204 	addi	sp,sp,8
   1a884:	f800283a 	ret

0001a888 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1a888:	defffd04 	addi	sp,sp,-12
   1a88c:	dfc00215 	stw	ra,8(sp)
   1a890:	df000115 	stw	fp,4(sp)
   1a894:	df000104 	addi	fp,sp,4
   1a898:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU1, cpu1);
   1a89c:	001c2780 	call	1c278 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1a8a0:	00800044 	movi	r2,1
   1a8a4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1a8a8:	e037883a 	mov	sp,fp
   1a8ac:	dfc00117 	ldw	ra,4(sp)
   1a8b0:	df000017 	ldw	fp,0(sp)
   1a8b4:	dec00204 	addi	sp,sp,8
   1a8b8:	f800283a 	ret

0001a8bc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1a8bc:	defffe04 	addi	sp,sp,-8
   1a8c0:	dfc00115 	stw	ra,4(sp)
   1a8c4:	df000015 	stw	fp,0(sp)
   1a8c8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIGH_SCALE_TIMER_1, high_scale_timer_1);
   1a8cc:	00c000f4 	movhi	r3,3
   1a8d0:	18e79304 	addi	r3,r3,-25012
   1a8d4:	00800134 	movhi	r2,4
   1a8d8:	10840004 	addi	r2,r2,4096
   1a8dc:	18800015 	stw	r2,0(r3)
   1a8e0:	00c000f4 	movhi	r3,3
   1a8e4:	18e79404 	addi	r3,r3,-25008
   1a8e8:	0080bef4 	movhi	r2,763
   1a8ec:	10bc2004 	addi	r2,r2,-3968
   1a8f0:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
   1a8f4:	01000134 	movhi	r4,4
   1a8f8:	21040804 	addi	r4,r4,4128
   1a8fc:	000b883a 	mov	r5,zero
   1a900:	01800044 	movi	r6,1
   1a904:	01c0fa04 	movi	r7,1000
   1a908:	001b4940 	call	1b494 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1, jtag_uart_1);
   1a90c:	010000f4 	movhi	r4,3
   1a910:	21236604 	addi	r4,r4,-29288
   1a914:	000b883a 	mov	r5,zero
   1a918:	01800404 	movi	r6,16
   1a91c:	001aac00 	call	1aac0 <altera_avalon_jtag_uart_init>
   1a920:	010000f4 	movhi	r4,3
   1a924:	21235c04 	addi	r4,r4,-29328
   1a928:	001a9400 	call	1a940 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
   1a92c:	e037883a 	mov	sp,fp
   1a930:	dfc00117 	ldw	ra,4(sp)
   1a934:	df000017 	ldw	fp,0(sp)
   1a938:	dec00204 	addi	sp,sp,8
   1a93c:	f800283a 	ret

0001a940 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1a940:	defffd04 	addi	sp,sp,-12
   1a944:	dfc00215 	stw	ra,8(sp)
   1a948:	df000115 	stw	fp,4(sp)
   1a94c:	df000104 	addi	fp,sp,4
   1a950:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1a954:	e13fff17 	ldw	r4,-4(fp)
   1a958:	014000f4 	movhi	r5,3
   1a95c:	29677c04 	addi	r5,r5,-25104
   1a960:	001b7fc0 	call	1b7fc <alt_dev_llist_insert>
}
   1a964:	e037883a 	mov	sp,fp
   1a968:	dfc00117 	ldw	ra,4(sp)
   1a96c:	df000017 	ldw	fp,0(sp)
   1a970:	dec00204 	addi	sp,sp,8
   1a974:	f800283a 	ret

0001a978 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1a978:	defffa04 	addi	sp,sp,-24
   1a97c:	dfc00515 	stw	ra,20(sp)
   1a980:	df000415 	stw	fp,16(sp)
   1a984:	df000404 	addi	fp,sp,16
   1a988:	e13ffd15 	stw	r4,-12(fp)
   1a98c:	e17ffe15 	stw	r5,-8(fp)
   1a990:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1a994:	e0bffd17 	ldw	r2,-12(fp)
   1a998:	10800017 	ldw	r2,0(r2)
   1a99c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1a9a0:	e0bffc17 	ldw	r2,-16(fp)
   1a9a4:	11000a04 	addi	r4,r2,40
   1a9a8:	e0bffd17 	ldw	r2,-12(fp)
   1a9ac:	11c00217 	ldw	r7,8(r2)
   1a9b0:	e17ffe17 	ldw	r5,-8(fp)
   1a9b4:	e1bfff17 	ldw	r6,-4(fp)
   1a9b8:	001afc00 	call	1afc0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1a9bc:	e037883a 	mov	sp,fp
   1a9c0:	dfc00117 	ldw	ra,4(sp)
   1a9c4:	df000017 	ldw	fp,0(sp)
   1a9c8:	dec00204 	addi	sp,sp,8
   1a9cc:	f800283a 	ret

0001a9d0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1a9d0:	defffa04 	addi	sp,sp,-24
   1a9d4:	dfc00515 	stw	ra,20(sp)
   1a9d8:	df000415 	stw	fp,16(sp)
   1a9dc:	df000404 	addi	fp,sp,16
   1a9e0:	e13ffd15 	stw	r4,-12(fp)
   1a9e4:	e17ffe15 	stw	r5,-8(fp)
   1a9e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1a9ec:	e0bffd17 	ldw	r2,-12(fp)
   1a9f0:	10800017 	ldw	r2,0(r2)
   1a9f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1a9f8:	e0bffc17 	ldw	r2,-16(fp)
   1a9fc:	11000a04 	addi	r4,r2,40
   1aa00:	e0bffd17 	ldw	r2,-12(fp)
   1aa04:	11c00217 	ldw	r7,8(r2)
   1aa08:	e17ffe17 	ldw	r5,-8(fp)
   1aa0c:	e1bfff17 	ldw	r6,-4(fp)
   1aa10:	001b1e40 	call	1b1e4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1aa14:	e037883a 	mov	sp,fp
   1aa18:	dfc00117 	ldw	ra,4(sp)
   1aa1c:	df000017 	ldw	fp,0(sp)
   1aa20:	dec00204 	addi	sp,sp,8
   1aa24:	f800283a 	ret

0001aa28 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1aa28:	defffc04 	addi	sp,sp,-16
   1aa2c:	dfc00315 	stw	ra,12(sp)
   1aa30:	df000215 	stw	fp,8(sp)
   1aa34:	df000204 	addi	fp,sp,8
   1aa38:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1aa3c:	e0bfff17 	ldw	r2,-4(fp)
   1aa40:	10800017 	ldw	r2,0(r2)
   1aa44:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1aa48:	e0bffe17 	ldw	r2,-8(fp)
   1aa4c:	11000a04 	addi	r4,r2,40
   1aa50:	e0bfff17 	ldw	r2,-4(fp)
   1aa54:	11400217 	ldw	r5,8(r2)
   1aa58:	001ae580 	call	1ae58 <altera_avalon_jtag_uart_close>
}
   1aa5c:	e037883a 	mov	sp,fp
   1aa60:	dfc00117 	ldw	ra,4(sp)
   1aa64:	df000017 	ldw	fp,0(sp)
   1aa68:	dec00204 	addi	sp,sp,8
   1aa6c:	f800283a 	ret

0001aa70 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1aa70:	defffa04 	addi	sp,sp,-24
   1aa74:	dfc00515 	stw	ra,20(sp)
   1aa78:	df000415 	stw	fp,16(sp)
   1aa7c:	df000404 	addi	fp,sp,16
   1aa80:	e13ffd15 	stw	r4,-12(fp)
   1aa84:	e17ffe15 	stw	r5,-8(fp)
   1aa88:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1aa8c:	e0bffd17 	ldw	r2,-12(fp)
   1aa90:	10800017 	ldw	r2,0(r2)
   1aa94:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1aa98:	e0bffc17 	ldw	r2,-16(fp)
   1aa9c:	11000a04 	addi	r4,r2,40
   1aaa0:	e17ffe17 	ldw	r5,-8(fp)
   1aaa4:	e1bfff17 	ldw	r6,-4(fp)
   1aaa8:	001aecc0 	call	1aecc <altera_avalon_jtag_uart_ioctl>
}
   1aaac:	e037883a 	mov	sp,fp
   1aab0:	dfc00117 	ldw	ra,4(sp)
   1aab4:	df000017 	ldw	fp,0(sp)
   1aab8:	dec00204 	addi	sp,sp,8
   1aabc:	f800283a 	ret

0001aac0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1aac0:	defffa04 	addi	sp,sp,-24
   1aac4:	dfc00515 	stw	ra,20(sp)
   1aac8:	df000415 	stw	fp,16(sp)
   1aacc:	df000404 	addi	fp,sp,16
   1aad0:	e13ffd15 	stw	r4,-12(fp)
   1aad4:	e17ffe15 	stw	r5,-8(fp)
   1aad8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1aadc:	e0fffd17 	ldw	r3,-12(fp)
   1aae0:	00800044 	movi	r2,1
   1aae4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1aae8:	e0bffd17 	ldw	r2,-12(fp)
   1aaec:	10800017 	ldw	r2,0(r2)
   1aaf0:	11000104 	addi	r4,r2,4
   1aaf4:	e0bffd17 	ldw	r2,-12(fp)
   1aaf8:	10800817 	ldw	r2,32(r2)
   1aafc:	1007883a 	mov	r3,r2
   1ab00:	2005883a 	mov	r2,r4
   1ab04:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   1ab08:	e13ffe17 	ldw	r4,-8(fp)
   1ab0c:	e17fff17 	ldw	r5,-4(fp)
   1ab10:	d8000015 	stw	zero,0(sp)
   1ab14:	018000b4 	movhi	r6,2
   1ab18:	31aae004 	addi	r6,r6,-21632
   1ab1c:	e1fffd17 	ldw	r7,-12(fp)
   1ab20:	001ba080 	call	1ba08 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1ab24:	e0bffd17 	ldw	r2,-12(fp)
   1ab28:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1ab2c:	e0bffd17 	ldw	r2,-12(fp)
   1ab30:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1ab34:	008000f4 	movhi	r2,3
   1ab38:	10a79604 	addi	r2,r2,-25000
   1ab3c:	10800017 	ldw	r2,0(r2)
   1ab40:	100b883a 	mov	r5,r2
   1ab44:	018000b4 	movhi	r6,2
   1ab48:	31ab6a04 	addi	r6,r6,-21080
   1ab4c:	e1fffd17 	ldw	r7,-12(fp)
   1ab50:	001b68c0 	call	1b68c <alt_alarm_start>
   1ab54:	1004403a 	cmpge	r2,r2,zero
   1ab58:	1000041e 	bne	r2,zero,1ab6c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1ab5c:	e0fffd17 	ldw	r3,-12(fp)
   1ab60:	00a00034 	movhi	r2,32768
   1ab64:	10bfffc4 	addi	r2,r2,-1
   1ab68:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1ab6c:	e037883a 	mov	sp,fp
   1ab70:	dfc00117 	ldw	ra,4(sp)
   1ab74:	df000017 	ldw	fp,0(sp)
   1ab78:	dec00204 	addi	sp,sp,8
   1ab7c:	f800283a 	ret

0001ab80 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1ab80:	defff804 	addi	sp,sp,-32
   1ab84:	df000715 	stw	fp,28(sp)
   1ab88:	df000704 	addi	fp,sp,28
   1ab8c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1ab90:	e0bfff17 	ldw	r2,-4(fp)
   1ab94:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   1ab98:	e0bffe17 	ldw	r2,-8(fp)
   1ab9c:	10800017 	ldw	r2,0(r2)
   1aba0:	e0bffd15 	stw	r2,-12(fp)
   1aba4:	00000006 	br	1aba8 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1aba8:	e0bffd17 	ldw	r2,-12(fp)
   1abac:	10800104 	addi	r2,r2,4
   1abb0:	10800037 	ldwio	r2,0(r2)
   1abb4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1abb8:	e0bffc17 	ldw	r2,-16(fp)
   1abbc:	1080c00c 	andi	r2,r2,768
   1abc0:	1005003a 	cmpeq	r2,r2,zero
   1abc4:	1000741e 	bne	r2,zero,1ad98 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1abc8:	e0bffc17 	ldw	r2,-16(fp)
   1abcc:	1080400c 	andi	r2,r2,256
   1abd0:	1005003a 	cmpeq	r2,r2,zero
   1abd4:	1000351e 	bne	r2,zero,1acac <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1abd8:	00800074 	movhi	r2,1
   1abdc:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1abe0:	e0bffe17 	ldw	r2,-8(fp)
   1abe4:	10800a17 	ldw	r2,40(r2)
   1abe8:	10800044 	addi	r2,r2,1
   1abec:	1081ffcc 	andi	r2,r2,2047
   1abf0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   1abf4:	e0bffe17 	ldw	r2,-8(fp)
   1abf8:	10c00b17 	ldw	r3,44(r2)
   1abfc:	e0bffa17 	ldw	r2,-24(fp)
   1ac00:	18801626 	beq	r3,r2,1ac5c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1ac04:	e0bffd17 	ldw	r2,-12(fp)
   1ac08:	10800037 	ldwio	r2,0(r2)
   1ac0c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1ac10:	e0bffb17 	ldw	r2,-20(fp)
   1ac14:	10a0000c 	andi	r2,r2,32768
   1ac18:	1005003a 	cmpeq	r2,r2,zero
   1ac1c:	10000f1e 	bne	r2,zero,1ac5c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1ac20:	e0bffe17 	ldw	r2,-8(fp)
   1ac24:	10c00a17 	ldw	r3,40(r2)
   1ac28:	e0bffb17 	ldw	r2,-20(fp)
   1ac2c:	1009883a 	mov	r4,r2
   1ac30:	e0bffe17 	ldw	r2,-8(fp)
   1ac34:	1885883a 	add	r2,r3,r2
   1ac38:	10800e04 	addi	r2,r2,56
   1ac3c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1ac40:	e0bffe17 	ldw	r2,-8(fp)
   1ac44:	10800a17 	ldw	r2,40(r2)
   1ac48:	10800044 	addi	r2,r2,1
   1ac4c:	10c1ffcc 	andi	r3,r2,2047
   1ac50:	e0bffe17 	ldw	r2,-8(fp)
   1ac54:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   1ac58:	003fe106 	br	1abe0 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1ac5c:	e0bffb17 	ldw	r2,-20(fp)
   1ac60:	10bfffec 	andhi	r2,r2,65535
   1ac64:	1005003a 	cmpeq	r2,r2,zero
   1ac68:	1000101e 	bne	r2,zero,1acac <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1ac6c:	e0bffe17 	ldw	r2,-8(fp)
   1ac70:	10c00817 	ldw	r3,32(r2)
   1ac74:	00bfff84 	movi	r2,-2
   1ac78:	1886703a 	and	r3,r3,r2
   1ac7c:	e0bffe17 	ldw	r2,-8(fp)
   1ac80:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1ac84:	e0bffd17 	ldw	r2,-12(fp)
   1ac88:	11000104 	addi	r4,r2,4
   1ac8c:	e0bffe17 	ldw	r2,-8(fp)
   1ac90:	10800817 	ldw	r2,32(r2)
   1ac94:	1007883a 	mov	r3,r2
   1ac98:	2005883a 	mov	r2,r4
   1ac9c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1aca0:	e0bffd17 	ldw	r2,-12(fp)
   1aca4:	10800104 	addi	r2,r2,4
   1aca8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1acac:	e0bffc17 	ldw	r2,-16(fp)
   1acb0:	1080800c 	andi	r2,r2,512
   1acb4:	1005003a 	cmpeq	r2,r2,zero
   1acb8:	103fbb1e 	bne	r2,zero,1aba8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1acbc:	e0bffc17 	ldw	r2,-16(fp)
   1acc0:	10bfffec 	andhi	r2,r2,65535
   1acc4:	1004d43a 	srli	r2,r2,16
   1acc8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1accc:	00001506 	br	1ad24 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1acd0:	e13ffd17 	ldw	r4,-12(fp)
   1acd4:	e0bffe17 	ldw	r2,-8(fp)
   1acd8:	10c00d17 	ldw	r3,52(r2)
   1acdc:	e0bffe17 	ldw	r2,-8(fp)
   1ace0:	1885883a 	add	r2,r3,r2
   1ace4:	10820e04 	addi	r2,r2,2104
   1ace8:	10800003 	ldbu	r2,0(r2)
   1acec:	10c03fcc 	andi	r3,r2,255
   1acf0:	18c0201c 	xori	r3,r3,128
   1acf4:	18ffe004 	addi	r3,r3,-128
   1acf8:	2005883a 	mov	r2,r4
   1acfc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1ad00:	e0bffe17 	ldw	r2,-8(fp)
   1ad04:	10800d17 	ldw	r2,52(r2)
   1ad08:	10800044 	addi	r2,r2,1
   1ad0c:	10c1ffcc 	andi	r3,r2,2047
   1ad10:	e0bffe17 	ldw	r2,-8(fp)
   1ad14:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   1ad18:	e0bff917 	ldw	r2,-28(fp)
   1ad1c:	10bfffc4 	addi	r2,r2,-1
   1ad20:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1ad24:	e0bff917 	ldw	r2,-28(fp)
   1ad28:	1005003a 	cmpeq	r2,r2,zero
   1ad2c:	1000051e 	bne	r2,zero,1ad44 <altera_avalon_jtag_uart_irq+0x1c4>
   1ad30:	e0bffe17 	ldw	r2,-8(fp)
   1ad34:	10c00d17 	ldw	r3,52(r2)
   1ad38:	e0bffe17 	ldw	r2,-8(fp)
   1ad3c:	10800c17 	ldw	r2,48(r2)
   1ad40:	18bfe31e 	bne	r3,r2,1acd0 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1ad44:	e0bff917 	ldw	r2,-28(fp)
   1ad48:	1005003a 	cmpeq	r2,r2,zero
   1ad4c:	103f961e 	bne	r2,zero,1aba8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1ad50:	e0bffe17 	ldw	r2,-8(fp)
   1ad54:	10c00817 	ldw	r3,32(r2)
   1ad58:	00bfff44 	movi	r2,-3
   1ad5c:	1886703a 	and	r3,r3,r2
   1ad60:	e0bffe17 	ldw	r2,-8(fp)
   1ad64:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1ad68:	e0bffe17 	ldw	r2,-8(fp)
   1ad6c:	10800017 	ldw	r2,0(r2)
   1ad70:	11000104 	addi	r4,r2,4
   1ad74:	e0bffe17 	ldw	r2,-8(fp)
   1ad78:	10800817 	ldw	r2,32(r2)
   1ad7c:	1007883a 	mov	r3,r2
   1ad80:	2005883a 	mov	r2,r4
   1ad84:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1ad88:	e0bffd17 	ldw	r2,-12(fp)
   1ad8c:	10800104 	addi	r2,r2,4
   1ad90:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1ad94:	003f8406 	br	1aba8 <altera_avalon_jtag_uart_irq+0x28>
}
   1ad98:	e037883a 	mov	sp,fp
   1ad9c:	df000017 	ldw	fp,0(sp)
   1ada0:	dec00104 	addi	sp,sp,4
   1ada4:	f800283a 	ret

0001ada8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1ada8:	defffc04 	addi	sp,sp,-16
   1adac:	df000315 	stw	fp,12(sp)
   1adb0:	df000304 	addi	fp,sp,12
   1adb4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1adb8:	e0bfff17 	ldw	r2,-4(fp)
   1adbc:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1adc0:	e0bffe17 	ldw	r2,-8(fp)
   1adc4:	10800017 	ldw	r2,0(r2)
   1adc8:	10800104 	addi	r2,r2,4
   1adcc:	10800037 	ldwio	r2,0(r2)
   1add0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1add4:	e0bffd17 	ldw	r2,-12(fp)
   1add8:	1081000c 	andi	r2,r2,1024
   1addc:	1005003a 	cmpeq	r2,r2,zero
   1ade0:	10000c1e 	bne	r2,zero,1ae14 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1ade4:	e0bffe17 	ldw	r2,-8(fp)
   1ade8:	10800017 	ldw	r2,0(r2)
   1adec:	11000104 	addi	r4,r2,4
   1adf0:	e0bffe17 	ldw	r2,-8(fp)
   1adf4:	10800817 	ldw	r2,32(r2)
   1adf8:	10810014 	ori	r2,r2,1024
   1adfc:	1007883a 	mov	r3,r2
   1ae00:	2005883a 	mov	r2,r4
   1ae04:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   1ae08:	e0bffe17 	ldw	r2,-8(fp)
   1ae0c:	10000915 	stw	zero,36(r2)
   1ae10:	00000a06 	br	1ae3c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1ae14:	e0bffe17 	ldw	r2,-8(fp)
   1ae18:	10c00917 	ldw	r3,36(r2)
   1ae1c:	00a00034 	movhi	r2,32768
   1ae20:	10bfff04 	addi	r2,r2,-4
   1ae24:	10c00536 	bltu	r2,r3,1ae3c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   1ae28:	e0bffe17 	ldw	r2,-8(fp)
   1ae2c:	10800917 	ldw	r2,36(r2)
   1ae30:	10c00044 	addi	r3,r2,1
   1ae34:	e0bffe17 	ldw	r2,-8(fp)
   1ae38:	10c00915 	stw	r3,36(r2)
   1ae3c:	008000f4 	movhi	r2,3
   1ae40:	10a79604 	addi	r2,r2,-25000
   1ae44:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   1ae48:	e037883a 	mov	sp,fp
   1ae4c:	df000017 	ldw	fp,0(sp)
   1ae50:	dec00104 	addi	sp,sp,4
   1ae54:	f800283a 	ret

0001ae58 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1ae58:	defffc04 	addi	sp,sp,-16
   1ae5c:	df000315 	stw	fp,12(sp)
   1ae60:	df000304 	addi	fp,sp,12
   1ae64:	e13ffd15 	stw	r4,-12(fp)
   1ae68:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1ae6c:	00000706 	br	1ae8c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   1ae70:	e0bffe17 	ldw	r2,-8(fp)
   1ae74:	1090000c 	andi	r2,r2,16384
   1ae78:	1005003a 	cmpeq	r2,r2,zero
   1ae7c:	1000031e 	bne	r2,zero,1ae8c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   1ae80:	00bffd44 	movi	r2,-11
   1ae84:	e0bfff15 	stw	r2,-4(fp)
   1ae88:	00000b06 	br	1aeb8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1ae8c:	e0bffd17 	ldw	r2,-12(fp)
   1ae90:	10c00d17 	ldw	r3,52(r2)
   1ae94:	e0bffd17 	ldw	r2,-12(fp)
   1ae98:	10800c17 	ldw	r2,48(r2)
   1ae9c:	18800526 	beq	r3,r2,1aeb4 <altera_avalon_jtag_uart_close+0x5c>
   1aea0:	e0bffd17 	ldw	r2,-12(fp)
   1aea4:	10c00917 	ldw	r3,36(r2)
   1aea8:	e0bffd17 	ldw	r2,-12(fp)
   1aeac:	10800117 	ldw	r2,4(r2)
   1aeb0:	18bfef36 	bltu	r3,r2,1ae70 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1aeb4:	e03fff15 	stw	zero,-4(fp)
   1aeb8:	e0bfff17 	ldw	r2,-4(fp)
}
   1aebc:	e037883a 	mov	sp,fp
   1aec0:	df000017 	ldw	fp,0(sp)
   1aec4:	dec00104 	addi	sp,sp,4
   1aec8:	f800283a 	ret

0001aecc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1aecc:	defff804 	addi	sp,sp,-32
   1aed0:	df000715 	stw	fp,28(sp)
   1aed4:	df000704 	addi	fp,sp,28
   1aed8:	e13ffb15 	stw	r4,-20(fp)
   1aedc:	e17ffc15 	stw	r5,-16(fp)
   1aee0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   1aee4:	00bff9c4 	movi	r2,-25
   1aee8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   1aeec:	e0bffc17 	ldw	r2,-16(fp)
   1aef0:	e0bfff15 	stw	r2,-4(fp)
   1aef4:	e0ffff17 	ldw	r3,-4(fp)
   1aef8:	189a8060 	cmpeqi	r2,r3,27137
   1aefc:	1000041e 	bne	r2,zero,1af10 <altera_avalon_jtag_uart_ioctl+0x44>
   1af00:	e0ffff17 	ldw	r3,-4(fp)
   1af04:	189a80a0 	cmpeqi	r2,r3,27138
   1af08:	10001b1e 	bne	r2,zero,1af78 <altera_avalon_jtag_uart_ioctl+0xac>
   1af0c:	00002706 	br	1afac <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1af10:	e0bffb17 	ldw	r2,-20(fp)
   1af14:	10c00117 	ldw	r3,4(r2)
   1af18:	00a00034 	movhi	r2,32768
   1af1c:	10bfffc4 	addi	r2,r2,-1
   1af20:	18802226 	beq	r3,r2,1afac <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   1af24:	e0bffd17 	ldw	r2,-12(fp)
   1af28:	10800017 	ldw	r2,0(r2)
   1af2c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1af30:	e0bff917 	ldw	r2,-28(fp)
   1af34:	10800090 	cmplti	r2,r2,2
   1af38:	1000071e 	bne	r2,zero,1af58 <altera_avalon_jtag_uart_ioctl+0x8c>
   1af3c:	e0fff917 	ldw	r3,-28(fp)
   1af40:	00a00034 	movhi	r2,32768
   1af44:	10bfffc4 	addi	r2,r2,-1
   1af48:	18800326 	beq	r3,r2,1af58 <altera_avalon_jtag_uart_ioctl+0x8c>
   1af4c:	e0bff917 	ldw	r2,-28(fp)
   1af50:	e0bffe15 	stw	r2,-8(fp)
   1af54:	00000306 	br	1af64 <altera_avalon_jtag_uart_ioctl+0x98>
   1af58:	00e00034 	movhi	r3,32768
   1af5c:	18ffff84 	addi	r3,r3,-2
   1af60:	e0fffe15 	stw	r3,-8(fp)
   1af64:	e0bffb17 	ldw	r2,-20(fp)
   1af68:	e0fffe17 	ldw	r3,-8(fp)
   1af6c:	10c00115 	stw	r3,4(r2)
      rc = 0;
   1af70:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   1af74:	00000d06 	br	1afac <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1af78:	e0bffb17 	ldw	r2,-20(fp)
   1af7c:	10c00117 	ldw	r3,4(r2)
   1af80:	00a00034 	movhi	r2,32768
   1af84:	10bfffc4 	addi	r2,r2,-1
   1af88:	18800826 	beq	r3,r2,1afac <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1af8c:	e13ffd17 	ldw	r4,-12(fp)
   1af90:	e0bffb17 	ldw	r2,-20(fp)
   1af94:	10c00917 	ldw	r3,36(r2)
   1af98:	e0bffb17 	ldw	r2,-20(fp)
   1af9c:	10800117 	ldw	r2,4(r2)
   1afa0:	1885803a 	cmpltu	r2,r3,r2
   1afa4:	20800015 	stw	r2,0(r4)
      rc = 0;
   1afa8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   1afac:	e0bffa17 	ldw	r2,-24(fp)
}
   1afb0:	e037883a 	mov	sp,fp
   1afb4:	df000017 	ldw	fp,0(sp)
   1afb8:	dec00104 	addi	sp,sp,4
   1afbc:	f800283a 	ret

0001afc0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1afc0:	defff204 	addi	sp,sp,-56
   1afc4:	dfc00d15 	stw	ra,52(sp)
   1afc8:	df000c15 	stw	fp,48(sp)
   1afcc:	df000c04 	addi	fp,sp,48
   1afd0:	e13ffb15 	stw	r4,-20(fp)
   1afd4:	e17ffc15 	stw	r5,-16(fp)
   1afd8:	e1bffd15 	stw	r6,-12(fp)
   1afdc:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   1afe0:	e0bffc17 	ldw	r2,-16(fp)
   1afe4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1afe8:	00004806 	br	1b10c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1afec:	e0bffb17 	ldw	r2,-20(fp)
   1aff0:	10800a17 	ldw	r2,40(r2)
   1aff4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   1aff8:	e0bffb17 	ldw	r2,-20(fp)
   1affc:	10800b17 	ldw	r2,44(r2)
   1b000:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   1b004:	e0fff717 	ldw	r3,-36(fp)
   1b008:	e0bff617 	ldw	r2,-40(fp)
   1b00c:	18800536 	bltu	r3,r2,1b024 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1b010:	e0bff717 	ldw	r2,-36(fp)
   1b014:	e0fff617 	ldw	r3,-40(fp)
   1b018:	10c5c83a 	sub	r2,r2,r3
   1b01c:	e0bff815 	stw	r2,-32(fp)
   1b020:	00000406 	br	1b034 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1b024:	00820004 	movi	r2,2048
   1b028:	e0fff617 	ldw	r3,-40(fp)
   1b02c:	10c5c83a 	sub	r2,r2,r3
   1b030:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   1b034:	e0bff817 	ldw	r2,-32(fp)
   1b038:	1005003a 	cmpeq	r2,r2,zero
   1b03c:	10001f1e 	bne	r2,zero,1b0bc <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   1b040:	e0fffd17 	ldw	r3,-12(fp)
   1b044:	e0bff817 	ldw	r2,-32(fp)
   1b048:	1880022e 	bgeu	r3,r2,1b054 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   1b04c:	e0bffd17 	ldw	r2,-12(fp)
   1b050:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1b054:	e0bffb17 	ldw	r2,-20(fp)
   1b058:	10c00e04 	addi	r3,r2,56
   1b05c:	e0bff617 	ldw	r2,-40(fp)
   1b060:	1887883a 	add	r3,r3,r2
   1b064:	e0bffa17 	ldw	r2,-24(fp)
   1b068:	1009883a 	mov	r4,r2
   1b06c:	180b883a 	mov	r5,r3
   1b070:	e1bff817 	ldw	r6,-32(fp)
   1b074:	00159fc0 	call	159fc <memcpy>
      ptr   += n;
   1b078:	e0fff817 	ldw	r3,-32(fp)
   1b07c:	e0bffa17 	ldw	r2,-24(fp)
   1b080:	10c5883a 	add	r2,r2,r3
   1b084:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   1b088:	e0fffd17 	ldw	r3,-12(fp)
   1b08c:	e0bff817 	ldw	r2,-32(fp)
   1b090:	1885c83a 	sub	r2,r3,r2
   1b094:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b098:	e0fff617 	ldw	r3,-40(fp)
   1b09c:	e0bff817 	ldw	r2,-32(fp)
   1b0a0:	1885883a 	add	r2,r3,r2
   1b0a4:	10c1ffcc 	andi	r3,r2,2047
   1b0a8:	e0bffb17 	ldw	r2,-20(fp)
   1b0ac:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   1b0b0:	e0bffd17 	ldw	r2,-12(fp)
   1b0b4:	10800048 	cmpgei	r2,r2,1
   1b0b8:	103fcc1e 	bne	r2,zero,1afec <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   1b0bc:	e0fffa17 	ldw	r3,-24(fp)
   1b0c0:	e0bffc17 	ldw	r2,-16(fp)
   1b0c4:	1880141e 	bne	r3,r2,1b118 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1b0c8:	e0bffe17 	ldw	r2,-8(fp)
   1b0cc:	1090000c 	andi	r2,r2,16384
   1b0d0:	1004c03a 	cmpne	r2,r2,zero
   1b0d4:	1000101e 	bne	r2,zero,1b118 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1b0d8:	e0bffb17 	ldw	r2,-20(fp)
   1b0dc:	10c00a17 	ldw	r3,40(r2)
   1b0e0:	e0bff717 	ldw	r2,-36(fp)
   1b0e4:	1880051e 	bne	r3,r2,1b0fc <altera_avalon_jtag_uart_read+0x13c>
   1b0e8:	e0bffb17 	ldw	r2,-20(fp)
   1b0ec:	10c00917 	ldw	r3,36(r2)
   1b0f0:	e0bffb17 	ldw	r2,-20(fp)
   1b0f4:	10800117 	ldw	r2,4(r2)
   1b0f8:	18bff736 	bltu	r3,r2,1b0d8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1b0fc:	e0bffb17 	ldw	r2,-20(fp)
   1b100:	10c00a17 	ldw	r3,40(r2)
   1b104:	e0bff717 	ldw	r2,-36(fp)
   1b108:	18800326 	beq	r3,r2,1b118 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1b10c:	e0bffd17 	ldw	r2,-12(fp)
   1b110:	10800048 	cmpgei	r2,r2,1
   1b114:	103fb51e 	bne	r2,zero,1afec <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1b118:	e0fffa17 	ldw	r3,-24(fp)
   1b11c:	e0bffc17 	ldw	r2,-16(fp)
   1b120:	18801926 	beq	r3,r2,1b188 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b124:	0005303a 	rdctl	r2,status
   1b128:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b12c:	e0fff517 	ldw	r3,-44(fp)
   1b130:	00bfff84 	movi	r2,-2
   1b134:	1884703a 	and	r2,r3,r2
   1b138:	1001703a 	wrctl	status,r2
  
  return context;
   1b13c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1b140:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1b144:	e0bffb17 	ldw	r2,-20(fp)
   1b148:	10800817 	ldw	r2,32(r2)
   1b14c:	10c00054 	ori	r3,r2,1
   1b150:	e0bffb17 	ldw	r2,-20(fp)
   1b154:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1b158:	e0bffb17 	ldw	r2,-20(fp)
   1b15c:	10800017 	ldw	r2,0(r2)
   1b160:	11000104 	addi	r4,r2,4
   1b164:	e0bffb17 	ldw	r2,-20(fp)
   1b168:	10800817 	ldw	r2,32(r2)
   1b16c:	1007883a 	mov	r3,r2
   1b170:	2005883a 	mov	r2,r4
   1b174:	10c00035 	stwio	r3,0(r2)
   1b178:	e0bff917 	ldw	r2,-28(fp)
   1b17c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b180:	e0bff417 	ldw	r2,-48(fp)
   1b184:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1b188:	e0fffa17 	ldw	r3,-24(fp)
   1b18c:	e0bffc17 	ldw	r2,-16(fp)
   1b190:	18800526 	beq	r3,r2,1b1a8 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   1b194:	e0fffa17 	ldw	r3,-24(fp)
   1b198:	e0bffc17 	ldw	r2,-16(fp)
   1b19c:	1887c83a 	sub	r3,r3,r2
   1b1a0:	e0ffff15 	stw	r3,-4(fp)
   1b1a4:	00000906 	br	1b1cc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   1b1a8:	e0bffe17 	ldw	r2,-8(fp)
   1b1ac:	1090000c 	andi	r2,r2,16384
   1b1b0:	1005003a 	cmpeq	r2,r2,zero
   1b1b4:	1000031e 	bne	r2,zero,1b1c4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   1b1b8:	00bffd44 	movi	r2,-11
   1b1bc:	e0bfff15 	stw	r2,-4(fp)
   1b1c0:	00000206 	br	1b1cc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   1b1c4:	00bffec4 	movi	r2,-5
   1b1c8:	e0bfff15 	stw	r2,-4(fp)
   1b1cc:	e0bfff17 	ldw	r2,-4(fp)
}
   1b1d0:	e037883a 	mov	sp,fp
   1b1d4:	dfc00117 	ldw	ra,4(sp)
   1b1d8:	df000017 	ldw	fp,0(sp)
   1b1dc:	dec00204 	addi	sp,sp,8
   1b1e0:	f800283a 	ret

0001b1e4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1b1e4:	defff204 	addi	sp,sp,-56
   1b1e8:	dfc00d15 	stw	ra,52(sp)
   1b1ec:	df000c15 	stw	fp,48(sp)
   1b1f0:	df000c04 	addi	fp,sp,48
   1b1f4:	e13ffb15 	stw	r4,-20(fp)
   1b1f8:	e17ffc15 	stw	r5,-16(fp)
   1b1fc:	e1bffd15 	stw	r6,-12(fp)
   1b200:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1b204:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1b208:	e0bffc17 	ldw	r2,-16(fp)
   1b20c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1b210:	00003a06 	br	1b2fc <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1b214:	e0bffb17 	ldw	r2,-20(fp)
   1b218:	10800c17 	ldw	r2,48(r2)
   1b21c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   1b220:	e0bffb17 	ldw	r2,-20(fp)
   1b224:	10800d17 	ldw	r2,52(r2)
   1b228:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   1b22c:	e0fffa17 	ldw	r3,-24(fp)
   1b230:	e0bff917 	ldw	r2,-28(fp)
   1b234:	1880062e 	bgeu	r3,r2,1b250 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1b238:	e0fff917 	ldw	r3,-28(fp)
   1b23c:	e0bffa17 	ldw	r2,-24(fp)
   1b240:	1885c83a 	sub	r2,r3,r2
   1b244:	10bfffc4 	addi	r2,r2,-1
   1b248:	e0bff815 	stw	r2,-32(fp)
   1b24c:	00000c06 	br	1b280 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   1b250:	e0bff917 	ldw	r2,-28(fp)
   1b254:	1005003a 	cmpeq	r2,r2,zero
   1b258:	1000051e 	bne	r2,zero,1b270 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1b25c:	00820004 	movi	r2,2048
   1b260:	e0fffa17 	ldw	r3,-24(fp)
   1b264:	10c5c83a 	sub	r2,r2,r3
   1b268:	e0bff815 	stw	r2,-32(fp)
   1b26c:	00000406 	br	1b280 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1b270:	0081ffc4 	movi	r2,2047
   1b274:	e0fffa17 	ldw	r3,-24(fp)
   1b278:	10c5c83a 	sub	r2,r2,r3
   1b27c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   1b280:	e0bff817 	ldw	r2,-32(fp)
   1b284:	1005003a 	cmpeq	r2,r2,zero
   1b288:	10001f1e 	bne	r2,zero,1b308 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   1b28c:	e0fffd17 	ldw	r3,-12(fp)
   1b290:	e0bff817 	ldw	r2,-32(fp)
   1b294:	1880022e 	bgeu	r3,r2,1b2a0 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   1b298:	e0bffd17 	ldw	r2,-12(fp)
   1b29c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1b2a0:	e0bffb17 	ldw	r2,-20(fp)
   1b2a4:	10c20e04 	addi	r3,r2,2104
   1b2a8:	e0bffa17 	ldw	r2,-24(fp)
   1b2ac:	1885883a 	add	r2,r3,r2
   1b2b0:	e0fffc17 	ldw	r3,-16(fp)
   1b2b4:	1009883a 	mov	r4,r2
   1b2b8:	180b883a 	mov	r5,r3
   1b2bc:	e1bff817 	ldw	r6,-32(fp)
   1b2c0:	00159fc0 	call	159fc <memcpy>
      ptr   += n;
   1b2c4:	e0fff817 	ldw	r3,-32(fp)
   1b2c8:	e0bffc17 	ldw	r2,-16(fp)
   1b2cc:	10c5883a 	add	r2,r2,r3
   1b2d0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   1b2d4:	e0fffd17 	ldw	r3,-12(fp)
   1b2d8:	e0bff817 	ldw	r2,-32(fp)
   1b2dc:	1885c83a 	sub	r2,r3,r2
   1b2e0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b2e4:	e0fffa17 	ldw	r3,-24(fp)
   1b2e8:	e0bff817 	ldw	r2,-32(fp)
   1b2ec:	1885883a 	add	r2,r3,r2
   1b2f0:	10c1ffcc 	andi	r3,r2,2047
   1b2f4:	e0bffb17 	ldw	r2,-20(fp)
   1b2f8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1b2fc:	e0bffd17 	ldw	r2,-12(fp)
   1b300:	10800048 	cmpgei	r2,r2,1
   1b304:	103fc31e 	bne	r2,zero,1b214 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b308:	0005303a 	rdctl	r2,status
   1b30c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b310:	e0fff517 	ldw	r3,-44(fp)
   1b314:	00bfff84 	movi	r2,-2
   1b318:	1884703a 	and	r2,r3,r2
   1b31c:	1001703a 	wrctl	status,r2
  
  return context;
   1b320:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1b324:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1b328:	e0bffb17 	ldw	r2,-20(fp)
   1b32c:	10800817 	ldw	r2,32(r2)
   1b330:	10c00094 	ori	r3,r2,2
   1b334:	e0bffb17 	ldw	r2,-20(fp)
   1b338:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1b33c:	e0bffb17 	ldw	r2,-20(fp)
   1b340:	10800017 	ldw	r2,0(r2)
   1b344:	11000104 	addi	r4,r2,4
   1b348:	e0bffb17 	ldw	r2,-20(fp)
   1b34c:	10800817 	ldw	r2,32(r2)
   1b350:	1007883a 	mov	r3,r2
   1b354:	2005883a 	mov	r2,r4
   1b358:	10c00035 	stwio	r3,0(r2)
   1b35c:	e0bff717 	ldw	r2,-36(fp)
   1b360:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b364:	e0bff417 	ldw	r2,-48(fp)
   1b368:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1b36c:	e0bffd17 	ldw	r2,-12(fp)
   1b370:	10800050 	cmplti	r2,r2,1
   1b374:	1000111e 	bne	r2,zero,1b3bc <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   1b378:	e0bffe17 	ldw	r2,-8(fp)
   1b37c:	1090000c 	andi	r2,r2,16384
   1b380:	1004c03a 	cmpne	r2,r2,zero
   1b384:	1000101e 	bne	r2,zero,1b3c8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1b388:	e0bffb17 	ldw	r2,-20(fp)
   1b38c:	10c00d17 	ldw	r3,52(r2)
   1b390:	e0bff917 	ldw	r2,-28(fp)
   1b394:	1880051e 	bne	r3,r2,1b3ac <altera_avalon_jtag_uart_write+0x1c8>
   1b398:	e0bffb17 	ldw	r2,-20(fp)
   1b39c:	10c00917 	ldw	r3,36(r2)
   1b3a0:	e0bffb17 	ldw	r2,-20(fp)
   1b3a4:	10800117 	ldw	r2,4(r2)
   1b3a8:	18bff736 	bltu	r3,r2,1b388 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   1b3ac:	e0bffb17 	ldw	r2,-20(fp)
   1b3b0:	10c00d17 	ldw	r3,52(r2)
   1b3b4:	e0bff917 	ldw	r2,-28(fp)
   1b3b8:	18800326 	beq	r3,r2,1b3c8 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   1b3bc:	e0bffd17 	ldw	r2,-12(fp)
   1b3c0:	10800048 	cmpgei	r2,r2,1
   1b3c4:	103fcd1e 	bne	r2,zero,1b2fc <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1b3c8:	e0fffc17 	ldw	r3,-16(fp)
   1b3cc:	e0bff617 	ldw	r2,-40(fp)
   1b3d0:	18800526 	beq	r3,r2,1b3e8 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   1b3d4:	e0fffc17 	ldw	r3,-16(fp)
   1b3d8:	e0bff617 	ldw	r2,-40(fp)
   1b3dc:	1887c83a 	sub	r3,r3,r2
   1b3e0:	e0ffff15 	stw	r3,-4(fp)
   1b3e4:	00000906 	br	1b40c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   1b3e8:	e0bffe17 	ldw	r2,-8(fp)
   1b3ec:	1090000c 	andi	r2,r2,16384
   1b3f0:	1005003a 	cmpeq	r2,r2,zero
   1b3f4:	1000031e 	bne	r2,zero,1b404 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   1b3f8:	00bffd44 	movi	r2,-11
   1b3fc:	e0bfff15 	stw	r2,-4(fp)
   1b400:	00000206 	br	1b40c <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   1b404:	00bffec4 	movi	r2,-5
   1b408:	e0bfff15 	stw	r2,-4(fp)
   1b40c:	e0bfff17 	ldw	r2,-4(fp)
}
   1b410:	e037883a 	mov	sp,fp
   1b414:	dfc00117 	ldw	ra,4(sp)
   1b418:	df000017 	ldw	fp,0(sp)
   1b41c:	dec00204 	addi	sp,sp,8
   1b420:	f800283a 	ret

0001b424 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1b424:	defffa04 	addi	sp,sp,-24
   1b428:	dfc00515 	stw	ra,20(sp)
   1b42c:	df000415 	stw	fp,16(sp)
   1b430:	df000404 	addi	fp,sp,16
   1b434:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1b438:	e0bfff17 	ldw	r2,-4(fp)
   1b43c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1b440:	e0bfff17 	ldw	r2,-4(fp)
   1b444:	10800104 	addi	r2,r2,4
   1b448:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b44c:	0005303a 	rdctl	r2,status
   1b450:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b454:	e0fffd17 	ldw	r3,-12(fp)
   1b458:	00bfff84 	movi	r2,-2
   1b45c:	1884703a 	and	r2,r3,r2
   1b460:	1001703a 	wrctl	status,r2
  
  return context;
   1b464:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1b468:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   1b46c:	001c16c0 	call	1c16c <alt_tick>
   1b470:	e0bffe17 	ldw	r2,-8(fp)
   1b474:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b478:	e0bffc17 	ldw	r2,-16(fp)
   1b47c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1b480:	e037883a 	mov	sp,fp
   1b484:	dfc00117 	ldw	ra,4(sp)
   1b488:	df000017 	ldw	fp,0(sp)
   1b48c:	dec00204 	addi	sp,sp,8
   1b490:	f800283a 	ret

0001b494 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1b494:	defff804 	addi	sp,sp,-32
   1b498:	dfc00715 	stw	ra,28(sp)
   1b49c:	df000615 	stw	fp,24(sp)
   1b4a0:	df000604 	addi	fp,sp,24
   1b4a4:	e13ffc15 	stw	r4,-16(fp)
   1b4a8:	e17ffd15 	stw	r5,-12(fp)
   1b4ac:	e1bffe15 	stw	r6,-8(fp)
   1b4b0:	e1ffff15 	stw	r7,-4(fp)
   1b4b4:	e0bfff17 	ldw	r2,-4(fp)
   1b4b8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1b4bc:	008000f4 	movhi	r2,3
   1b4c0:	10a79604 	addi	r2,r2,-25000
   1b4c4:	10800017 	ldw	r2,0(r2)
   1b4c8:	1004c03a 	cmpne	r2,r2,zero
   1b4cc:	1000041e 	bne	r2,zero,1b4e0 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   1b4d0:	00c000f4 	movhi	r3,3
   1b4d4:	18e79604 	addi	r3,r3,-25000
   1b4d8:	e0bffb17 	ldw	r2,-20(fp)
   1b4dc:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1b4e0:	e0bffc17 	ldw	r2,-16(fp)
   1b4e4:	10800104 	addi	r2,r2,4
   1b4e8:	1007883a 	mov	r3,r2
   1b4ec:	008001c4 	movi	r2,7
   1b4f0:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   1b4f4:	d8000015 	stw	zero,0(sp)
   1b4f8:	e13ffd17 	ldw	r4,-12(fp)
   1b4fc:	e17ffe17 	ldw	r5,-8(fp)
   1b500:	018000b4 	movhi	r6,2
   1b504:	31ad0904 	addi	r6,r6,-19420
   1b508:	e1fffc17 	ldw	r7,-16(fp)
   1b50c:	001ba080 	call	1ba08 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   1b510:	e037883a 	mov	sp,fp
   1b514:	dfc00117 	ldw	ra,4(sp)
   1b518:	df000017 	ldw	fp,0(sp)
   1b51c:	dec00204 	addi	sp,sp,8
   1b520:	f800283a 	ret

0001b524 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   1b524:	defffd04 	addi	sp,sp,-12
   1b528:	df000215 	stw	fp,8(sp)
   1b52c:	df000204 	addi	fp,sp,8
  void* base = altera_avalon_timer_ts_base;
   1b530:	008000f4 	movhi	r2,3
   1b534:	10a79304 	addi	r2,r2,-25012
   1b538:	10800017 	ldw	r2,0(r2)
   1b53c:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
   1b540:	008000f4 	movhi	r2,3
   1b544:	10a79404 	addi	r2,r2,-25008
   1b548:	10800017 	ldw	r2,0(r2)
   1b54c:	1004c03a 	cmpne	r2,r2,zero
   1b550:	1000031e 	bne	r2,zero,1b560 <alt_timestamp_start+0x3c>
  {
    return -1;
   1b554:	00bfffc4 	movi	r2,-1
   1b558:	e0bfff15 	stw	r2,-4(fp)
   1b55c:	00001506 	br	1b5b4 <alt_timestamp_start+0x90>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   1b560:	e0bffe17 	ldw	r2,-8(fp)
   1b564:	10800104 	addi	r2,r2,4
   1b568:	1007883a 	mov	r3,r2
   1b56c:	00800204 	movi	r2,8
   1b570:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   1b574:	e0bffe17 	ldw	r2,-8(fp)
   1b578:	10800204 	addi	r2,r2,8
   1b57c:	1007883a 	mov	r3,r2
   1b580:	00bfffd4 	movui	r2,65535
   1b584:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   1b588:	e0bffe17 	ldw	r2,-8(fp)
   1b58c:	10800304 	addi	r2,r2,12
   1b590:	1007883a 	mov	r3,r2
   1b594:	00bfffd4 	movui	r2,65535
   1b598:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   1b59c:	e0bffe17 	ldw	r2,-8(fp)
   1b5a0:	10800104 	addi	r2,r2,4
   1b5a4:	1007883a 	mov	r3,r2
   1b5a8:	00800104 	movi	r2,4
   1b5ac:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
   1b5b0:	e03fff15 	stw	zero,-4(fp)
   1b5b4:	e0bfff17 	ldw	r2,-4(fp)
}
   1b5b8:	e037883a 	mov	sp,fp
   1b5bc:	df000017 	ldw	fp,0(sp)
   1b5c0:	dec00104 	addi	sp,sp,4
   1b5c4:	f800283a 	ret

0001b5c8 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   1b5c8:	defffb04 	addi	sp,sp,-20
   1b5cc:	df000415 	stw	fp,16(sp)
   1b5d0:	df000404 	addi	fp,sp,16

  void* base = altera_avalon_timer_ts_base;
   1b5d4:	008000f4 	movhi	r2,3
   1b5d8:	10a79304 	addi	r2,r2,-25012
   1b5dc:	10800017 	ldw	r2,0(r2)
   1b5e0:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
   1b5e4:	008000f4 	movhi	r2,3
   1b5e8:	10a79404 	addi	r2,r2,-25008
   1b5ec:	10800017 	ldw	r2,0(r2)
   1b5f0:	1004c03a 	cmpne	r2,r2,zero
   1b5f4:	1000031e 	bne	r2,zero,1b604 <alt_timestamp+0x3c>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
   1b5f8:	00bfffc4 	movi	r2,-1
   1b5fc:	e0bfff15 	stw	r2,-4(fp)
   1b600:	00001306 	br	1b650 <alt_timestamp+0x88>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   1b604:	e0bffe17 	ldw	r2,-8(fp)
   1b608:	10800404 	addi	r2,r2,16
   1b60c:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   1b610:	e0bffe17 	ldw	r2,-8(fp)
   1b614:	10800404 	addi	r2,r2,16
   1b618:	10800037 	ldwio	r2,0(r2)
   1b61c:	10bfffcc 	andi	r2,r2,65535
   1b620:	e0bffd15 	stw	r2,-12(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   1b624:	e0bffe17 	ldw	r2,-8(fp)
   1b628:	10800504 	addi	r2,r2,20
   1b62c:	10800037 	ldwio	r2,0(r2)
   1b630:	10bfffcc 	andi	r2,r2,65535
   1b634:	e0bffc15 	stw	r2,-16(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   1b638:	e0bffc17 	ldw	r2,-16(fp)
   1b63c:	1006943a 	slli	r3,r2,16
   1b640:	e0bffd17 	ldw	r2,-12(fp)
   1b644:	1884b03a 	or	r2,r3,r2
   1b648:	0084303a 	nor	r2,zero,r2
   1b64c:	e0bfff15 	stw	r2,-4(fp)
   1b650:	e0bfff17 	ldw	r2,-4(fp)
    }  
  }
}
   1b654:	e037883a 	mov	sp,fp
   1b658:	df000017 	ldw	fp,0(sp)
   1b65c:	dec00104 	addi	sp,sp,4
   1b660:	f800283a 	ret

0001b664 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   1b664:	deffff04 	addi	sp,sp,-4
   1b668:	df000015 	stw	fp,0(sp)
   1b66c:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   1b670:	008000f4 	movhi	r2,3
   1b674:	10a79404 	addi	r2,r2,-25008
   1b678:	10800017 	ldw	r2,0(r2)
}
   1b67c:	e037883a 	mov	sp,fp
   1b680:	df000017 	ldw	fp,0(sp)
   1b684:	dec00104 	addi	sp,sp,4
   1b688:	f800283a 	ret

0001b68c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1b68c:	defff404 	addi	sp,sp,-48
   1b690:	df000b15 	stw	fp,44(sp)
   1b694:	df000b04 	addi	fp,sp,44
   1b698:	e13ffb15 	stw	r4,-20(fp)
   1b69c:	e17ffc15 	stw	r5,-16(fp)
   1b6a0:	e1bffd15 	stw	r6,-12(fp)
   1b6a4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1b6a8:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1b6ac:	008000f4 	movhi	r2,3
   1b6b0:	10a79604 	addi	r2,r2,-25000
   1b6b4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1b6b8:	1005003a 	cmpeq	r2,r2,zero
   1b6bc:	1000411e 	bne	r2,zero,1b7c4 <alt_alarm_start+0x138>
  {
    if (alarm)
   1b6c0:	e0bffb17 	ldw	r2,-20(fp)
   1b6c4:	1005003a 	cmpeq	r2,r2,zero
   1b6c8:	10003b1e 	bne	r2,zero,1b7b8 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   1b6cc:	e0fffb17 	ldw	r3,-20(fp)
   1b6d0:	e0bffd17 	ldw	r2,-12(fp)
   1b6d4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   1b6d8:	e0fffb17 	ldw	r3,-20(fp)
   1b6dc:	e0bffe17 	ldw	r2,-8(fp)
   1b6e0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b6e4:	0005303a 	rdctl	r2,status
   1b6e8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b6ec:	e0fff817 	ldw	r3,-32(fp)
   1b6f0:	00bfff84 	movi	r2,-2
   1b6f4:	1884703a 	and	r2,r3,r2
   1b6f8:	1001703a 	wrctl	status,r2
  
  return context;
   1b6fc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1b700:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1b704:	008000f4 	movhi	r2,3
   1b708:	10a79704 	addi	r2,r2,-24996
   1b70c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1b710:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1b714:	e0fffc17 	ldw	r3,-16(fp)
   1b718:	e0bff917 	ldw	r2,-28(fp)
   1b71c:	1885883a 	add	r2,r3,r2
   1b720:	10c00044 	addi	r3,r2,1
   1b724:	e0bffb17 	ldw	r2,-20(fp)
   1b728:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1b72c:	e0bffb17 	ldw	r2,-20(fp)
   1b730:	10c00217 	ldw	r3,8(r2)
   1b734:	e0bff917 	ldw	r2,-28(fp)
   1b738:	1880042e 	bgeu	r3,r2,1b74c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   1b73c:	e0fffb17 	ldw	r3,-20(fp)
   1b740:	00800044 	movi	r2,1
   1b744:	18800405 	stb	r2,16(r3)
   1b748:	00000206 	br	1b754 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   1b74c:	e0bffb17 	ldw	r2,-20(fp)
   1b750:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1b754:	e0fffb17 	ldw	r3,-20(fp)
   1b758:	008000f4 	movhi	r2,3
   1b75c:	10a78204 	addi	r2,r2,-25080
   1b760:	e0bff615 	stw	r2,-40(fp)
   1b764:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1b768:	e0fff717 	ldw	r3,-36(fp)
   1b76c:	e0bff617 	ldw	r2,-40(fp)
   1b770:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   1b774:	e0bff617 	ldw	r2,-40(fp)
   1b778:	10c00017 	ldw	r3,0(r2)
   1b77c:	e0bff717 	ldw	r2,-36(fp)
   1b780:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1b784:	e0bff617 	ldw	r2,-40(fp)
   1b788:	10c00017 	ldw	r3,0(r2)
   1b78c:	e0bff717 	ldw	r2,-36(fp)
   1b790:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   1b794:	e0fff617 	ldw	r3,-40(fp)
   1b798:	e0bff717 	ldw	r2,-36(fp)
   1b79c:	18800015 	stw	r2,0(r3)
   1b7a0:	e0bffa17 	ldw	r2,-24(fp)
   1b7a4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b7a8:	e0bff517 	ldw	r2,-44(fp)
   1b7ac:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1b7b0:	e03fff15 	stw	zero,-4(fp)
   1b7b4:	00000506 	br	1b7cc <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   1b7b8:	00bffa84 	movi	r2,-22
   1b7bc:	e0bfff15 	stw	r2,-4(fp)
   1b7c0:	00000206 	br	1b7cc <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   1b7c4:	00bfde84 	movi	r2,-134
   1b7c8:	e0bfff15 	stw	r2,-4(fp)
   1b7cc:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   1b7d0:	e037883a 	mov	sp,fp
   1b7d4:	df000017 	ldw	fp,0(sp)
   1b7d8:	dec00104 	addi	sp,sp,4
   1b7dc:	f800283a 	ret

0001b7e0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1b7e0:	deffff04 	addi	sp,sp,-4
   1b7e4:	df000015 	stw	fp,0(sp)
   1b7e8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1b7ec:	e037883a 	mov	sp,fp
   1b7f0:	df000017 	ldw	fp,0(sp)
   1b7f4:	dec00104 	addi	sp,sp,4
   1b7f8:	f800283a 	ret

0001b7fc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1b7fc:	defff904 	addi	sp,sp,-28
   1b800:	dfc00615 	stw	ra,24(sp)
   1b804:	df000515 	stw	fp,20(sp)
   1b808:	df000504 	addi	fp,sp,20
   1b80c:	e13ffd15 	stw	r4,-12(fp)
   1b810:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1b814:	e0bffd17 	ldw	r2,-12(fp)
   1b818:	1005003a 	cmpeq	r2,r2,zero
   1b81c:	1000041e 	bne	r2,zero,1b830 <alt_dev_llist_insert+0x34>
   1b820:	e0bffd17 	ldw	r2,-12(fp)
   1b824:	10800217 	ldw	r2,8(r2)
   1b828:	1004c03a 	cmpne	r2,r2,zero
   1b82c:	1000071e 	bne	r2,zero,1b84c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   1b830:	001b8b00 	call	1b8b0 <alt_get_errno>
   1b834:	1007883a 	mov	r3,r2
   1b838:	00800584 	movi	r2,22
   1b83c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1b840:	00bffa84 	movi	r2,-22
   1b844:	e0bfff15 	stw	r2,-4(fp)
   1b848:	00001306 	br	1b898 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1b84c:	e0fffd17 	ldw	r3,-12(fp)
   1b850:	e0bffe17 	ldw	r2,-8(fp)
   1b854:	e0bffb15 	stw	r2,-20(fp)
   1b858:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1b85c:	e0fffc17 	ldw	r3,-16(fp)
   1b860:	e0bffb17 	ldw	r2,-20(fp)
   1b864:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   1b868:	e0bffb17 	ldw	r2,-20(fp)
   1b86c:	10c00017 	ldw	r3,0(r2)
   1b870:	e0bffc17 	ldw	r2,-16(fp)
   1b874:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1b878:	e0bffb17 	ldw	r2,-20(fp)
   1b87c:	10c00017 	ldw	r3,0(r2)
   1b880:	e0bffc17 	ldw	r2,-16(fp)
   1b884:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   1b888:	e0fffb17 	ldw	r3,-20(fp)
   1b88c:	e0bffc17 	ldw	r2,-16(fp)
   1b890:	18800015 	stw	r2,0(r3)

  return 0;  
   1b894:	e03fff15 	stw	zero,-4(fp)
   1b898:	e0bfff17 	ldw	r2,-4(fp)
}
   1b89c:	e037883a 	mov	sp,fp
   1b8a0:	dfc00117 	ldw	ra,4(sp)
   1b8a4:	df000017 	ldw	fp,0(sp)
   1b8a8:	dec00204 	addi	sp,sp,8
   1b8ac:	f800283a 	ret

0001b8b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b8b0:	defffd04 	addi	sp,sp,-12
   1b8b4:	dfc00215 	stw	ra,8(sp)
   1b8b8:	df000115 	stw	fp,4(sp)
   1b8bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1b8c0:	008000f4 	movhi	r2,3
   1b8c4:	10a77f04 	addi	r2,r2,-25092
   1b8c8:	10800017 	ldw	r2,0(r2)
   1b8cc:	1005003a 	cmpeq	r2,r2,zero
   1b8d0:	1000061e 	bne	r2,zero,1b8ec <alt_get_errno+0x3c>
   1b8d4:	008000f4 	movhi	r2,3
   1b8d8:	10a77f04 	addi	r2,r2,-25092
   1b8dc:	10800017 	ldw	r2,0(r2)
   1b8e0:	103ee83a 	callr	r2
   1b8e4:	e0bfff15 	stw	r2,-4(fp)
   1b8e8:	00000306 	br	1b8f8 <alt_get_errno+0x48>
   1b8ec:	008000f4 	movhi	r2,3
   1b8f0:	10a78f04 	addi	r2,r2,-25028
   1b8f4:	e0bfff15 	stw	r2,-4(fp)
   1b8f8:	e0bfff17 	ldw	r2,-4(fp)
}
   1b8fc:	e037883a 	mov	sp,fp
   1b900:	dfc00117 	ldw	ra,4(sp)
   1b904:	df000017 	ldw	fp,0(sp)
   1b908:	dec00204 	addi	sp,sp,8
   1b90c:	f800283a 	ret

0001b910 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1b910:	defffd04 	addi	sp,sp,-12
   1b914:	dfc00215 	stw	ra,8(sp)
   1b918:	df000115 	stw	fp,4(sp)
   1b91c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1b920:	00bfff04 	movi	r2,-4
   1b924:	00c000b4 	movhi	r3,2
   1b928:	18f26804 	addi	r3,r3,-13920
   1b92c:	1885883a 	add	r2,r3,r2
   1b930:	e0bfff15 	stw	r2,-4(fp)
   1b934:	00000606 	br	1b950 <_do_ctors+0x40>
        (*ctor) (); 
   1b938:	e0bfff17 	ldw	r2,-4(fp)
   1b93c:	10800017 	ldw	r2,0(r2)
   1b940:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1b944:	e0bfff17 	ldw	r2,-4(fp)
   1b948:	10bfff04 	addi	r2,r2,-4
   1b94c:	e0bfff15 	stw	r2,-4(fp)
   1b950:	e0ffff17 	ldw	r3,-4(fp)
   1b954:	008000b4 	movhi	r2,2
   1b958:	10b26704 	addi	r2,r2,-13924
   1b95c:	18bff62e 	bgeu	r3,r2,1b938 <_do_ctors+0x28>
        (*ctor) (); 
}
   1b960:	e037883a 	mov	sp,fp
   1b964:	dfc00117 	ldw	ra,4(sp)
   1b968:	df000017 	ldw	fp,0(sp)
   1b96c:	dec00204 	addi	sp,sp,8
   1b970:	f800283a 	ret

0001b974 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1b974:	defffd04 	addi	sp,sp,-12
   1b978:	dfc00215 	stw	ra,8(sp)
   1b97c:	df000115 	stw	fp,4(sp)
   1b980:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1b984:	00bfff04 	movi	r2,-4
   1b988:	00c000b4 	movhi	r3,2
   1b98c:	18f26804 	addi	r3,r3,-13920
   1b990:	1885883a 	add	r2,r3,r2
   1b994:	e0bfff15 	stw	r2,-4(fp)
   1b998:	00000606 	br	1b9b4 <_do_dtors+0x40>
        (*dtor) (); 
   1b99c:	e0bfff17 	ldw	r2,-4(fp)
   1b9a0:	10800017 	ldw	r2,0(r2)
   1b9a4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1b9a8:	e0bfff17 	ldw	r2,-4(fp)
   1b9ac:	10bfff04 	addi	r2,r2,-4
   1b9b0:	e0bfff15 	stw	r2,-4(fp)
   1b9b4:	e0ffff17 	ldw	r3,-4(fp)
   1b9b8:	008000b4 	movhi	r2,2
   1b9bc:	10b26804 	addi	r2,r2,-13920
   1b9c0:	18bff62e 	bgeu	r3,r2,1b99c <_do_dtors+0x28>
        (*dtor) (); 
}
   1b9c4:	e037883a 	mov	sp,fp
   1b9c8:	dfc00117 	ldw	ra,4(sp)
   1b9cc:	df000017 	ldw	fp,0(sp)
   1b9d0:	dec00204 	addi	sp,sp,8
   1b9d4:	f800283a 	ret

0001b9d8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1b9d8:	defffe04 	addi	sp,sp,-8
   1b9dc:	dfc00115 	stw	ra,4(sp)
   1b9e0:	df000015 	stw	fp,0(sp)
   1b9e4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1b9e8:	0009883a 	mov	r4,zero
   1b9ec:	01440004 	movi	r5,4096
   1b9f0:	001c5040 	call	1c504 <alt_icache_flush>
#endif
}
   1b9f4:	e037883a 	mov	sp,fp
   1b9f8:	dfc00117 	ldw	ra,4(sp)
   1b9fc:	df000017 	ldw	fp,0(sp)
   1ba00:	dec00204 	addi	sp,sp,8
   1ba04:	f800283a 	ret

0001ba08 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1ba08:	defff904 	addi	sp,sp,-28
   1ba0c:	dfc00615 	stw	ra,24(sp)
   1ba10:	df000515 	stw	fp,20(sp)
   1ba14:	df000504 	addi	fp,sp,20
   1ba18:	e13ffc15 	stw	r4,-16(fp)
   1ba1c:	e17ffd15 	stw	r5,-12(fp)
   1ba20:	e1bffe15 	stw	r6,-8(fp)
   1ba24:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1ba28:	e0800217 	ldw	r2,8(fp)
   1ba2c:	d8800015 	stw	r2,0(sp)
   1ba30:	e13ffc17 	ldw	r4,-16(fp)
   1ba34:	e17ffd17 	ldw	r5,-12(fp)
   1ba38:	e1bffe17 	ldw	r6,-8(fp)
   1ba3c:	e1ffff17 	ldw	r7,-4(fp)
   1ba40:	001bbdc0 	call	1bbdc <alt_iic_isr_register>
}  
   1ba44:	e037883a 	mov	sp,fp
   1ba48:	dfc00117 	ldw	ra,4(sp)
   1ba4c:	df000017 	ldw	fp,0(sp)
   1ba50:	dec00204 	addi	sp,sp,8
   1ba54:	f800283a 	ret

0001ba58 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1ba58:	defff904 	addi	sp,sp,-28
   1ba5c:	df000615 	stw	fp,24(sp)
   1ba60:	df000604 	addi	fp,sp,24
   1ba64:	e13ffe15 	stw	r4,-8(fp)
   1ba68:	e17fff15 	stw	r5,-4(fp)
   1ba6c:	e0bfff17 	ldw	r2,-4(fp)
   1ba70:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ba74:	0005303a 	rdctl	r2,status
   1ba78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ba7c:	e0fffb17 	ldw	r3,-20(fp)
   1ba80:	00bfff84 	movi	r2,-2
   1ba84:	1884703a 	and	r2,r3,r2
   1ba88:	1001703a 	wrctl	status,r2
  
  return context;
   1ba8c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1ba90:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   1ba94:	e0fffc17 	ldw	r3,-16(fp)
   1ba98:	00800044 	movi	r2,1
   1ba9c:	10c4983a 	sll	r2,r2,r3
   1baa0:	1007883a 	mov	r3,r2
   1baa4:	008000f4 	movhi	r2,3
   1baa8:	10a79504 	addi	r2,r2,-25004
   1baac:	10800017 	ldw	r2,0(r2)
   1bab0:	1886b03a 	or	r3,r3,r2
   1bab4:	008000f4 	movhi	r2,3
   1bab8:	10a79504 	addi	r2,r2,-25004
   1babc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1bac0:	008000f4 	movhi	r2,3
   1bac4:	10a79504 	addi	r2,r2,-25004
   1bac8:	10800017 	ldw	r2,0(r2)
   1bacc:	100170fa 	wrctl	ienable,r2
   1bad0:	e0bffd17 	ldw	r2,-12(fp)
   1bad4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bad8:	e0bffa17 	ldw	r2,-24(fp)
   1badc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1bae0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   1bae4:	e037883a 	mov	sp,fp
   1bae8:	df000017 	ldw	fp,0(sp)
   1baec:	dec00104 	addi	sp,sp,4
   1baf0:	f800283a 	ret

0001baf4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1baf4:	defff904 	addi	sp,sp,-28
   1baf8:	df000615 	stw	fp,24(sp)
   1bafc:	df000604 	addi	fp,sp,24
   1bb00:	e13ffe15 	stw	r4,-8(fp)
   1bb04:	e17fff15 	stw	r5,-4(fp)
   1bb08:	e0bfff17 	ldw	r2,-4(fp)
   1bb0c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bb10:	0005303a 	rdctl	r2,status
   1bb14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bb18:	e0fffb17 	ldw	r3,-20(fp)
   1bb1c:	00bfff84 	movi	r2,-2
   1bb20:	1884703a 	and	r2,r3,r2
   1bb24:	1001703a 	wrctl	status,r2
  
  return context;
   1bb28:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1bb2c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   1bb30:	e0fffc17 	ldw	r3,-16(fp)
   1bb34:	00800044 	movi	r2,1
   1bb38:	10c4983a 	sll	r2,r2,r3
   1bb3c:	0084303a 	nor	r2,zero,r2
   1bb40:	1007883a 	mov	r3,r2
   1bb44:	008000f4 	movhi	r2,3
   1bb48:	10a79504 	addi	r2,r2,-25004
   1bb4c:	10800017 	ldw	r2,0(r2)
   1bb50:	1886703a 	and	r3,r3,r2
   1bb54:	008000f4 	movhi	r2,3
   1bb58:	10a79504 	addi	r2,r2,-25004
   1bb5c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1bb60:	008000f4 	movhi	r2,3
   1bb64:	10a79504 	addi	r2,r2,-25004
   1bb68:	10800017 	ldw	r2,0(r2)
   1bb6c:	100170fa 	wrctl	ienable,r2
   1bb70:	e0bffd17 	ldw	r2,-12(fp)
   1bb74:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bb78:	e0bffa17 	ldw	r2,-24(fp)
   1bb7c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1bb80:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   1bb84:	e037883a 	mov	sp,fp
   1bb88:	df000017 	ldw	fp,0(sp)
   1bb8c:	dec00104 	addi	sp,sp,4
   1bb90:	f800283a 	ret

0001bb94 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   1bb94:	defffc04 	addi	sp,sp,-16
   1bb98:	df000315 	stw	fp,12(sp)
   1bb9c:	df000304 	addi	fp,sp,12
   1bba0:	e13ffe15 	stw	r4,-8(fp)
   1bba4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1bba8:	000530fa 	rdctl	r2,ienable
   1bbac:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1bbb0:	e0ffff17 	ldw	r3,-4(fp)
   1bbb4:	00800044 	movi	r2,1
   1bbb8:	10c4983a 	sll	r2,r2,r3
   1bbbc:	1007883a 	mov	r3,r2
   1bbc0:	e0bffd17 	ldw	r2,-12(fp)
   1bbc4:	1884703a 	and	r2,r3,r2
   1bbc8:	1004c03a 	cmpne	r2,r2,zero
}
   1bbcc:	e037883a 	mov	sp,fp
   1bbd0:	df000017 	ldw	fp,0(sp)
   1bbd4:	dec00104 	addi	sp,sp,4
   1bbd8:	f800283a 	ret

0001bbdc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1bbdc:	defff404 	addi	sp,sp,-48
   1bbe0:	dfc00b15 	stw	ra,44(sp)
   1bbe4:	df000a15 	stw	fp,40(sp)
   1bbe8:	df000a04 	addi	fp,sp,40
   1bbec:	e13ffb15 	stw	r4,-20(fp)
   1bbf0:	e17ffc15 	stw	r5,-16(fp)
   1bbf4:	e1bffd15 	stw	r6,-12(fp)
   1bbf8:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   1bbfc:	00bffa84 	movi	r2,-22
   1bc00:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1bc04:	e0bffc17 	ldw	r2,-16(fp)
   1bc08:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1bc0c:	e0bff917 	ldw	r2,-28(fp)
   1bc10:	10800808 	cmpgei	r2,r2,32
   1bc14:	1000291e 	bne	r2,zero,1bcbc <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bc18:	0005303a 	rdctl	r2,status
   1bc1c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bc20:	e0fff717 	ldw	r3,-36(fp)
   1bc24:	00bfff84 	movi	r2,-2
   1bc28:	1884703a 	and	r2,r3,r2
   1bc2c:	1001703a 	wrctl	status,r2
  
  return context;
   1bc30:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1bc34:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   1bc38:	e0bff917 	ldw	r2,-28(fp)
   1bc3c:	00c000f4 	movhi	r3,3
   1bc40:	18e7a204 	addi	r3,r3,-24952
   1bc44:	100490fa 	slli	r2,r2,3
   1bc48:	10c7883a 	add	r3,r2,r3
   1bc4c:	e0bffd17 	ldw	r2,-12(fp)
   1bc50:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   1bc54:	e0bff917 	ldw	r2,-28(fp)
   1bc58:	00c000f4 	movhi	r3,3
   1bc5c:	18e7a204 	addi	r3,r3,-24952
   1bc60:	100490fa 	slli	r2,r2,3
   1bc64:	10c5883a 	add	r2,r2,r3
   1bc68:	10c00104 	addi	r3,r2,4
   1bc6c:	e0bffe17 	ldw	r2,-8(fp)
   1bc70:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1bc74:	e0bffd17 	ldw	r2,-12(fp)
   1bc78:	1005003a 	cmpeq	r2,r2,zero
   1bc7c:	1000051e 	bne	r2,zero,1bc94 <alt_iic_isr_register+0xb8>
   1bc80:	e17ff917 	ldw	r5,-28(fp)
   1bc84:	e13ffb17 	ldw	r4,-20(fp)
   1bc88:	001ba580 	call	1ba58 <alt_ic_irq_enable>
   1bc8c:	e0bfff15 	stw	r2,-4(fp)
   1bc90:	00000406 	br	1bca4 <alt_iic_isr_register+0xc8>
   1bc94:	e17ff917 	ldw	r5,-28(fp)
   1bc98:	e13ffb17 	ldw	r4,-20(fp)
   1bc9c:	001baf40 	call	1baf4 <alt_ic_irq_disable>
   1bca0:	e0bfff15 	stw	r2,-4(fp)
   1bca4:	e0bfff17 	ldw	r2,-4(fp)
   1bca8:	e0bffa15 	stw	r2,-24(fp)
   1bcac:	e0bff817 	ldw	r2,-32(fp)
   1bcb0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bcb4:	e0bff617 	ldw	r2,-40(fp)
   1bcb8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1bcbc:	e0bffa17 	ldw	r2,-24(fp)
}
   1bcc0:	e037883a 	mov	sp,fp
   1bcc4:	dfc00117 	ldw	ra,4(sp)
   1bcc8:	df000017 	ldw	fp,0(sp)
   1bccc:	dec00204 	addi	sp,sp,8
   1bcd0:	f800283a 	ret

0001bcd4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1bcd4:	defff904 	addi	sp,sp,-28
   1bcd8:	dfc00615 	stw	ra,24(sp)
   1bcdc:	df000515 	stw	fp,20(sp)
   1bce0:	df000504 	addi	fp,sp,20
   1bce4:	e13ffc15 	stw	r4,-16(fp)
   1bce8:	e17ffd15 	stw	r5,-12(fp)
   1bcec:	e1bffe15 	stw	r6,-8(fp)
   1bcf0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1bcf4:	e13ffd17 	ldw	r4,-12(fp)
   1bcf8:	e17ffe17 	ldw	r5,-8(fp)
   1bcfc:	e1bfff17 	ldw	r6,-4(fp)
   1bd00:	001beec0 	call	1beec <open>
   1bd04:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1bd08:	e0bffb17 	ldw	r2,-20(fp)
   1bd0c:	1004803a 	cmplt	r2,r2,zero
   1bd10:	10001c1e 	bne	r2,zero,1bd84 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   1bd14:	e0bffb17 	ldw	r2,-20(fp)
   1bd18:	00c000f4 	movhi	r3,3
   1bd1c:	18e2fc04 	addi	r3,r3,-29712
   1bd20:	10800324 	muli	r2,r2,12
   1bd24:	10c5883a 	add	r2,r2,r3
   1bd28:	10c00017 	ldw	r3,0(r2)
   1bd2c:	e0bffc17 	ldw	r2,-16(fp)
   1bd30:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1bd34:	e0bffb17 	ldw	r2,-20(fp)
   1bd38:	00c000f4 	movhi	r3,3
   1bd3c:	18e2fc04 	addi	r3,r3,-29712
   1bd40:	10800324 	muli	r2,r2,12
   1bd44:	10c5883a 	add	r2,r2,r3
   1bd48:	10800104 	addi	r2,r2,4
   1bd4c:	10c00017 	ldw	r3,0(r2)
   1bd50:	e0bffc17 	ldw	r2,-16(fp)
   1bd54:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1bd58:	e0bffb17 	ldw	r2,-20(fp)
   1bd5c:	00c000f4 	movhi	r3,3
   1bd60:	18e2fc04 	addi	r3,r3,-29712
   1bd64:	10800324 	muli	r2,r2,12
   1bd68:	10c5883a 	add	r2,r2,r3
   1bd6c:	10800204 	addi	r2,r2,8
   1bd70:	10c00017 	ldw	r3,0(r2)
   1bd74:	e0bffc17 	ldw	r2,-16(fp)
   1bd78:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1bd7c:	e13ffb17 	ldw	r4,-20(fp)
   1bd80:	001a5ec0 	call	1a5ec <alt_release_fd>
  }
} 
   1bd84:	e037883a 	mov	sp,fp
   1bd88:	dfc00117 	ldw	ra,4(sp)
   1bd8c:	df000017 	ldw	fp,0(sp)
   1bd90:	dec00204 	addi	sp,sp,8
   1bd94:	f800283a 	ret

0001bd98 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1bd98:	defffb04 	addi	sp,sp,-20
   1bd9c:	dfc00415 	stw	ra,16(sp)
   1bda0:	df000315 	stw	fp,12(sp)
   1bda4:	df000304 	addi	fp,sp,12
   1bda8:	e13ffd15 	stw	r4,-12(fp)
   1bdac:	e17ffe15 	stw	r5,-8(fp)
   1bdb0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1bdb4:	010000f4 	movhi	r4,3
   1bdb8:	2122ff04 	addi	r4,r4,-29700
   1bdbc:	e17ffd17 	ldw	r5,-12(fp)
   1bdc0:	01800044 	movi	r6,1
   1bdc4:	01c07fc4 	movi	r7,511
   1bdc8:	001bcd40 	call	1bcd4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1bdcc:	010000f4 	movhi	r4,3
   1bdd0:	2122fc04 	addi	r4,r4,-29712
   1bdd4:	e17ffe17 	ldw	r5,-8(fp)
   1bdd8:	000d883a 	mov	r6,zero
   1bddc:	01c07fc4 	movi	r7,511
   1bde0:	001bcd40 	call	1bcd4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1bde4:	010000f4 	movhi	r4,3
   1bde8:	21230204 	addi	r4,r4,-29688
   1bdec:	e17fff17 	ldw	r5,-4(fp)
   1bdf0:	01800044 	movi	r6,1
   1bdf4:	01c07fc4 	movi	r7,511
   1bdf8:	001bcd40 	call	1bcd4 <alt_open_fd>
}  
   1bdfc:	e037883a 	mov	sp,fp
   1be00:	dfc00117 	ldw	ra,4(sp)
   1be04:	df000017 	ldw	fp,0(sp)
   1be08:	dec00204 	addi	sp,sp,8
   1be0c:	f800283a 	ret

0001be10 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1be10:	defffc04 	addi	sp,sp,-16
   1be14:	df000315 	stw	fp,12(sp)
   1be18:	df000304 	addi	fp,sp,12
   1be1c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1be20:	e0bffe17 	ldw	r2,-8(fp)
   1be24:	10800217 	ldw	r2,8(r2)
   1be28:	10d00034 	orhi	r3,r2,16384
   1be2c:	e0bffe17 	ldw	r2,-8(fp)
   1be30:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1be34:	e03ffd15 	stw	zero,-12(fp)
   1be38:	00002006 	br	1bebc <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1be3c:	e0bffd17 	ldw	r2,-12(fp)
   1be40:	00c000f4 	movhi	r3,3
   1be44:	18e2fc04 	addi	r3,r3,-29712
   1be48:	10800324 	muli	r2,r2,12
   1be4c:	10c5883a 	add	r2,r2,r3
   1be50:	10c00017 	ldw	r3,0(r2)
   1be54:	e0bffe17 	ldw	r2,-8(fp)
   1be58:	10800017 	ldw	r2,0(r2)
   1be5c:	1880141e 	bne	r3,r2,1beb0 <alt_file_locked+0xa0>
   1be60:	e0bffd17 	ldw	r2,-12(fp)
   1be64:	00c000f4 	movhi	r3,3
   1be68:	18e2fc04 	addi	r3,r3,-29712
   1be6c:	10800324 	muli	r2,r2,12
   1be70:	10c5883a 	add	r2,r2,r3
   1be74:	10800204 	addi	r2,r2,8
   1be78:	10800017 	ldw	r2,0(r2)
   1be7c:	1004403a 	cmpge	r2,r2,zero
   1be80:	10000b1e 	bne	r2,zero,1beb0 <alt_file_locked+0xa0>
   1be84:	e0bffd17 	ldw	r2,-12(fp)
   1be88:	10800324 	muli	r2,r2,12
   1be8c:	1007883a 	mov	r3,r2
   1be90:	008000f4 	movhi	r2,3
   1be94:	10a2fc04 	addi	r2,r2,-29712
   1be98:	1887883a 	add	r3,r3,r2
   1be9c:	e0bffe17 	ldw	r2,-8(fp)
   1bea0:	18800326 	beq	r3,r2,1beb0 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1bea4:	00bffcc4 	movi	r2,-13
   1bea8:	e0bfff15 	stw	r2,-4(fp)
   1beac:	00000a06 	br	1bed8 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1beb0:	e0bffd17 	ldw	r2,-12(fp)
   1beb4:	10800044 	addi	r2,r2,1
   1beb8:	e0bffd15 	stw	r2,-12(fp)
   1bebc:	008000f4 	movhi	r2,3
   1bec0:	10a77e04 	addi	r2,r2,-25096
   1bec4:	10800017 	ldw	r2,0(r2)
   1bec8:	1007883a 	mov	r3,r2
   1becc:	e0bffd17 	ldw	r2,-12(fp)
   1bed0:	18bfda2e 	bgeu	r3,r2,1be3c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1bed4:	e03fff15 	stw	zero,-4(fp)
   1bed8:	e0bfff17 	ldw	r2,-4(fp)
}
   1bedc:	e037883a 	mov	sp,fp
   1bee0:	df000017 	ldw	fp,0(sp)
   1bee4:	dec00104 	addi	sp,sp,4
   1bee8:	f800283a 	ret

0001beec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1beec:	defff404 	addi	sp,sp,-48
   1bef0:	dfc00b15 	stw	ra,44(sp)
   1bef4:	df000a15 	stw	fp,40(sp)
   1bef8:	df000a04 	addi	fp,sp,40
   1befc:	e13ffb15 	stw	r4,-20(fp)
   1bf00:	e17ffc15 	stw	r5,-16(fp)
   1bf04:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1bf08:	00bfffc4 	movi	r2,-1
   1bf0c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   1bf10:	00bffb44 	movi	r2,-19
   1bf14:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   1bf18:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1bf1c:	e13ffb17 	ldw	r4,-20(fp)
   1bf20:	014000f4 	movhi	r5,3
   1bf24:	29677c04 	addi	r5,r5,-25104
   1bf28:	001c2980 	call	1c298 <alt_find_dev>
   1bf2c:	e0bffa15 	stw	r2,-24(fp)
   1bf30:	e0bffa17 	ldw	r2,-24(fp)
   1bf34:	1004c03a 	cmpne	r2,r2,zero
   1bf38:	1000051e 	bne	r2,zero,1bf50 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1bf3c:	e13ffb17 	ldw	r4,-20(fp)
   1bf40:	001c32c0 	call	1c32c <alt_find_file>
   1bf44:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   1bf48:	00800044 	movi	r2,1
   1bf4c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1bf50:	e0bffa17 	ldw	r2,-24(fp)
   1bf54:	1005003a 	cmpeq	r2,r2,zero
   1bf58:	1000301e 	bne	r2,zero,1c01c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1bf5c:	e13ffa17 	ldw	r4,-24(fp)
   1bf60:	001c44c0 	call	1c44c <alt_get_fd>
   1bf64:	e0bff815 	stw	r2,-32(fp)
   1bf68:	e0bff817 	ldw	r2,-32(fp)
   1bf6c:	1004403a 	cmpge	r2,r2,zero
   1bf70:	1000031e 	bne	r2,zero,1bf80 <open+0x94>
    {
      status = index;
   1bf74:	e0bff817 	ldw	r2,-32(fp)
   1bf78:	e0bff715 	stw	r2,-36(fp)
   1bf7c:	00002906 	br	1c024 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   1bf80:	e0bff817 	ldw	r2,-32(fp)
   1bf84:	10800324 	muli	r2,r2,12
   1bf88:	1007883a 	mov	r3,r2
   1bf8c:	008000f4 	movhi	r2,3
   1bf90:	10a2fc04 	addi	r2,r2,-29712
   1bf94:	1885883a 	add	r2,r3,r2
   1bf98:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1bf9c:	e0fffc17 	ldw	r3,-16(fp)
   1bfa0:	00900034 	movhi	r2,16384
   1bfa4:	10bfffc4 	addi	r2,r2,-1
   1bfa8:	1886703a 	and	r3,r3,r2
   1bfac:	e0bff917 	ldw	r2,-28(fp)
   1bfb0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1bfb4:	e0bff617 	ldw	r2,-40(fp)
   1bfb8:	1004c03a 	cmpne	r2,r2,zero
   1bfbc:	1000061e 	bne	r2,zero,1bfd8 <open+0xec>
   1bfc0:	e13ff917 	ldw	r4,-28(fp)
   1bfc4:	001be100 	call	1be10 <alt_file_locked>
   1bfc8:	e0bff715 	stw	r2,-36(fp)
   1bfcc:	e0bff717 	ldw	r2,-36(fp)
   1bfd0:	1004803a 	cmplt	r2,r2,zero
   1bfd4:	1000131e 	bne	r2,zero,1c024 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1bfd8:	e0bffa17 	ldw	r2,-24(fp)
   1bfdc:	10800317 	ldw	r2,12(r2)
   1bfe0:	1005003a 	cmpeq	r2,r2,zero
   1bfe4:	1000091e 	bne	r2,zero,1c00c <open+0x120>
   1bfe8:	e0bffa17 	ldw	r2,-24(fp)
   1bfec:	10800317 	ldw	r2,12(r2)
   1bff0:	e13ff917 	ldw	r4,-28(fp)
   1bff4:	e17ffb17 	ldw	r5,-20(fp)
   1bff8:	e1bffc17 	ldw	r6,-16(fp)
   1bffc:	e1fffd17 	ldw	r7,-12(fp)
   1c000:	103ee83a 	callr	r2
   1c004:	e0bfff15 	stw	r2,-4(fp)
   1c008:	00000106 	br	1c010 <open+0x124>
   1c00c:	e03fff15 	stw	zero,-4(fp)
   1c010:	e0bfff17 	ldw	r2,-4(fp)
   1c014:	e0bff715 	stw	r2,-36(fp)
   1c018:	00000206 	br	1c024 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1c01c:	00bffb44 	movi	r2,-19
   1c020:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1c024:	e0bff717 	ldw	r2,-36(fp)
   1c028:	1004403a 	cmpge	r2,r2,zero
   1c02c:	1000091e 	bne	r2,zero,1c054 <open+0x168>
  {
    alt_release_fd (index);  
   1c030:	e13ff817 	ldw	r4,-32(fp)
   1c034:	001a5ec0 	call	1a5ec <alt_release_fd>
    ALT_ERRNO = -status;
   1c038:	001c0740 	call	1c074 <alt_get_errno>
   1c03c:	e0fff717 	ldw	r3,-36(fp)
   1c040:	00c7c83a 	sub	r3,zero,r3
   1c044:	10c00015 	stw	r3,0(r2)
    return -1;
   1c048:	00bfffc4 	movi	r2,-1
   1c04c:	e0bffe15 	stw	r2,-8(fp)
   1c050:	00000206 	br	1c05c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   1c054:	e0bff817 	ldw	r2,-32(fp)
   1c058:	e0bffe15 	stw	r2,-8(fp)
   1c05c:	e0bffe17 	ldw	r2,-8(fp)
}
   1c060:	e037883a 	mov	sp,fp
   1c064:	dfc00117 	ldw	ra,4(sp)
   1c068:	df000017 	ldw	fp,0(sp)
   1c06c:	dec00204 	addi	sp,sp,8
   1c070:	f800283a 	ret

0001c074 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1c074:	defffd04 	addi	sp,sp,-12
   1c078:	dfc00215 	stw	ra,8(sp)
   1c07c:	df000115 	stw	fp,4(sp)
   1c080:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1c084:	008000f4 	movhi	r2,3
   1c088:	10a77f04 	addi	r2,r2,-25092
   1c08c:	10800017 	ldw	r2,0(r2)
   1c090:	1005003a 	cmpeq	r2,r2,zero
   1c094:	1000061e 	bne	r2,zero,1c0b0 <alt_get_errno+0x3c>
   1c098:	008000f4 	movhi	r2,3
   1c09c:	10a77f04 	addi	r2,r2,-25092
   1c0a0:	10800017 	ldw	r2,0(r2)
   1c0a4:	103ee83a 	callr	r2
   1c0a8:	e0bfff15 	stw	r2,-4(fp)
   1c0ac:	00000306 	br	1c0bc <alt_get_errno+0x48>
   1c0b0:	008000f4 	movhi	r2,3
   1c0b4:	10a78f04 	addi	r2,r2,-25028
   1c0b8:	e0bfff15 	stw	r2,-4(fp)
   1c0bc:	e0bfff17 	ldw	r2,-4(fp)
}
   1c0c0:	e037883a 	mov	sp,fp
   1c0c4:	dfc00117 	ldw	ra,4(sp)
   1c0c8:	df000017 	ldw	fp,0(sp)
   1c0cc:	dec00204 	addi	sp,sp,8
   1c0d0:	f800283a 	ret

0001c0d4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1c0d4:	defffa04 	addi	sp,sp,-24
   1c0d8:	df000515 	stw	fp,20(sp)
   1c0dc:	df000504 	addi	fp,sp,20
   1c0e0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c0e4:	0005303a 	rdctl	r2,status
   1c0e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c0ec:	e0fffd17 	ldw	r3,-12(fp)
   1c0f0:	00bfff84 	movi	r2,-2
   1c0f4:	1884703a 	and	r2,r3,r2
   1c0f8:	1001703a 	wrctl	status,r2
  
  return context;
   1c0fc:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1c100:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   1c104:	e0bfff17 	ldw	r2,-4(fp)
   1c108:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1c10c:	e0bffc17 	ldw	r2,-16(fp)
   1c110:	10c00017 	ldw	r3,0(r2)
   1c114:	e0bffc17 	ldw	r2,-16(fp)
   1c118:	10800117 	ldw	r2,4(r2)
   1c11c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   1c120:	e0bffc17 	ldw	r2,-16(fp)
   1c124:	10c00117 	ldw	r3,4(r2)
   1c128:	e0bffc17 	ldw	r2,-16(fp)
   1c12c:	10800017 	ldw	r2,0(r2)
   1c130:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1c134:	e0fffc17 	ldw	r3,-16(fp)
   1c138:	e0bffc17 	ldw	r2,-16(fp)
   1c13c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   1c140:	e0fffc17 	ldw	r3,-16(fp)
   1c144:	e0bffc17 	ldw	r2,-16(fp)
   1c148:	18800015 	stw	r2,0(r3)
   1c14c:	e0bffe17 	ldw	r2,-8(fp)
   1c150:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c154:	e0bffb17 	ldw	r2,-20(fp)
   1c158:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1c15c:	e037883a 	mov	sp,fp
   1c160:	df000017 	ldw	fp,0(sp)
   1c164:	dec00104 	addi	sp,sp,4
   1c168:	f800283a 	ret

0001c16c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1c16c:	defffb04 	addi	sp,sp,-20
   1c170:	dfc00415 	stw	ra,16(sp)
   1c174:	df000315 	stw	fp,12(sp)
   1c178:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1c17c:	d0a00e17 	ldw	r2,-32712(gp)
   1c180:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1c184:	d0a02317 	ldw	r2,-32628(gp)
   1c188:	10800044 	addi	r2,r2,1
   1c18c:	d0a02315 	stw	r2,-32628(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1c190:	00003106 	br	1c258 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   1c194:	e0bffe17 	ldw	r2,-8(fp)
   1c198:	10800017 	ldw	r2,0(r2)
   1c19c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1c1a0:	e0bffe17 	ldw	r2,-8(fp)
   1c1a4:	10800403 	ldbu	r2,16(r2)
   1c1a8:	10803fcc 	andi	r2,r2,255
   1c1ac:	1005003a 	cmpeq	r2,r2,zero
   1c1b0:	1000051e 	bne	r2,zero,1c1c8 <alt_tick+0x5c>
   1c1b4:	d0a02317 	ldw	r2,-32628(gp)
   1c1b8:	1004c03a 	cmpne	r2,r2,zero
   1c1bc:	1000021e 	bne	r2,zero,1c1c8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   1c1c0:	e0bffe17 	ldw	r2,-8(fp)
   1c1c4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1c1c8:	e0bffe17 	ldw	r2,-8(fp)
   1c1cc:	10c00217 	ldw	r3,8(r2)
   1c1d0:	d0a02317 	ldw	r2,-32628(gp)
   1c1d4:	10c01e36 	bltu	r2,r3,1c250 <alt_tick+0xe4>
   1c1d8:	e0bffe17 	ldw	r2,-8(fp)
   1c1dc:	10800403 	ldbu	r2,16(r2)
   1c1e0:	10803fcc 	andi	r2,r2,255
   1c1e4:	1004c03a 	cmpne	r2,r2,zero
   1c1e8:	1000191e 	bne	r2,zero,1c250 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   1c1ec:	e0bffe17 	ldw	r2,-8(fp)
   1c1f0:	10c00317 	ldw	r3,12(r2)
   1c1f4:	e0bffe17 	ldw	r2,-8(fp)
   1c1f8:	11000517 	ldw	r4,20(r2)
   1c1fc:	183ee83a 	callr	r3
   1c200:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1c204:	e0bffd17 	ldw	r2,-12(fp)
   1c208:	1004c03a 	cmpne	r2,r2,zero
   1c20c:	1000031e 	bne	r2,zero,1c21c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   1c210:	e13ffe17 	ldw	r4,-8(fp)
   1c214:	001c0d40 	call	1c0d4 <alt_alarm_stop>
   1c218:	00000d06 	br	1c250 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   1c21c:	e0bffe17 	ldw	r2,-8(fp)
   1c220:	10c00217 	ldw	r3,8(r2)
   1c224:	e0bffd17 	ldw	r2,-12(fp)
   1c228:	1887883a 	add	r3,r3,r2
   1c22c:	e0bffe17 	ldw	r2,-8(fp)
   1c230:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1c234:	e0bffe17 	ldw	r2,-8(fp)
   1c238:	10c00217 	ldw	r3,8(r2)
   1c23c:	d0a02317 	ldw	r2,-32628(gp)
   1c240:	1880032e 	bgeu	r3,r2,1c250 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   1c244:	e0fffe17 	ldw	r3,-8(fp)
   1c248:	00800044 	movi	r2,1
   1c24c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   1c250:	e0bfff17 	ldw	r2,-4(fp)
   1c254:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1c258:	d0e00e04 	addi	r3,gp,-32712
   1c25c:	e0bffe17 	ldw	r2,-8(fp)
   1c260:	10ffcc1e 	bne	r2,r3,1c194 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   1c264:	e037883a 	mov	sp,fp
   1c268:	dfc00117 	ldw	ra,4(sp)
   1c26c:	df000017 	ldw	fp,0(sp)
   1c270:	dec00204 	addi	sp,sp,8
   1c274:	f800283a 	ret

0001c278 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   1c278:	deffff04 	addi	sp,sp,-4
   1c27c:	df000015 	stw	fp,0(sp)
   1c280:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1c284:	000170fa 	wrctl	ienable,zero
}
   1c288:	e037883a 	mov	sp,fp
   1c28c:	df000017 	ldw	fp,0(sp)
   1c290:	dec00104 	addi	sp,sp,4
   1c294:	f800283a 	ret

0001c298 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1c298:	defff904 	addi	sp,sp,-28
   1c29c:	dfc00615 	stw	ra,24(sp)
   1c2a0:	df000515 	stw	fp,20(sp)
   1c2a4:	df000504 	addi	fp,sp,20
   1c2a8:	e13ffd15 	stw	r4,-12(fp)
   1c2ac:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1c2b0:	e0bffe17 	ldw	r2,-8(fp)
   1c2b4:	10800017 	ldw	r2,0(r2)
   1c2b8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1c2bc:	e13ffd17 	ldw	r4,-12(fp)
   1c2c0:	00107900 	call	10790 <strlen>
   1c2c4:	10800044 	addi	r2,r2,1
   1c2c8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1c2cc:	00000d06 	br	1c304 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1c2d0:	e0bffc17 	ldw	r2,-16(fp)
   1c2d4:	11000217 	ldw	r4,8(r2)
   1c2d8:	e1bffb17 	ldw	r6,-20(fp)
   1c2dc:	e17ffd17 	ldw	r5,-12(fp)
   1c2e0:	001c5e00 	call	1c5e0 <memcmp>
   1c2e4:	1004c03a 	cmpne	r2,r2,zero
   1c2e8:	1000031e 	bne	r2,zero,1c2f8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1c2ec:	e0bffc17 	ldw	r2,-16(fp)
   1c2f0:	e0bfff15 	stw	r2,-4(fp)
   1c2f4:	00000706 	br	1c314 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1c2f8:	e0bffc17 	ldw	r2,-16(fp)
   1c2fc:	10800017 	ldw	r2,0(r2)
   1c300:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1c304:	e0fffe17 	ldw	r3,-8(fp)
   1c308:	e0bffc17 	ldw	r2,-16(fp)
   1c30c:	10fff01e 	bne	r2,r3,1c2d0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1c310:	e03fff15 	stw	zero,-4(fp)
   1c314:	e0bfff17 	ldw	r2,-4(fp)
}
   1c318:	e037883a 	mov	sp,fp
   1c31c:	dfc00117 	ldw	ra,4(sp)
   1c320:	df000017 	ldw	fp,0(sp)
   1c324:	dec00204 	addi	sp,sp,8
   1c328:	f800283a 	ret

0001c32c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1c32c:	defffa04 	addi	sp,sp,-24
   1c330:	dfc00515 	stw	ra,20(sp)
   1c334:	df000415 	stw	fp,16(sp)
   1c338:	df000404 	addi	fp,sp,16
   1c33c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1c340:	008000f4 	movhi	r2,3
   1c344:	10a77a04 	addi	r2,r2,-25112
   1c348:	10800017 	ldw	r2,0(r2)
   1c34c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1c350:	00003306 	br	1c420 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   1c354:	e0bffd17 	ldw	r2,-12(fp)
   1c358:	11000217 	ldw	r4,8(r2)
   1c35c:	00107900 	call	10790 <strlen>
   1c360:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   1c364:	e0bffd17 	ldw	r2,-12(fp)
   1c368:	10c00217 	ldw	r3,8(r2)
   1c36c:	e0bffc17 	ldw	r2,-16(fp)
   1c370:	1885883a 	add	r2,r3,r2
   1c374:	10bfffc4 	addi	r2,r2,-1
   1c378:	10800003 	ldbu	r2,0(r2)
   1c37c:	10803fcc 	andi	r2,r2,255
   1c380:	1080201c 	xori	r2,r2,128
   1c384:	10bfe004 	addi	r2,r2,-128
   1c388:	10800bd8 	cmpnei	r2,r2,47
   1c38c:	1000031e 	bne	r2,zero,1c39c <alt_find_file+0x70>
    {
      len -= 1;
   1c390:	e0bffc17 	ldw	r2,-16(fp)
   1c394:	10bfffc4 	addi	r2,r2,-1
   1c398:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1c39c:	e0bffc17 	ldw	r2,-16(fp)
   1c3a0:	1007883a 	mov	r3,r2
   1c3a4:	e0bffe17 	ldw	r2,-8(fp)
   1c3a8:	1885883a 	add	r2,r3,r2
   1c3ac:	10800003 	ldbu	r2,0(r2)
   1c3b0:	10803fcc 	andi	r2,r2,255
   1c3b4:	1080201c 	xori	r2,r2,128
   1c3b8:	10bfe004 	addi	r2,r2,-128
   1c3bc:	10800be0 	cmpeqi	r2,r2,47
   1c3c0:	10000a1e 	bne	r2,zero,1c3ec <alt_find_file+0xc0>
   1c3c4:	e0bffc17 	ldw	r2,-16(fp)
   1c3c8:	1007883a 	mov	r3,r2
   1c3cc:	e0bffe17 	ldw	r2,-8(fp)
   1c3d0:	1885883a 	add	r2,r3,r2
   1c3d4:	10800003 	ldbu	r2,0(r2)
   1c3d8:	10803fcc 	andi	r2,r2,255
   1c3dc:	1080201c 	xori	r2,r2,128
   1c3e0:	10bfe004 	addi	r2,r2,-128
   1c3e4:	1004c03a 	cmpne	r2,r2,zero
   1c3e8:	10000a1e 	bne	r2,zero,1c414 <alt_find_file+0xe8>
   1c3ec:	e0bffd17 	ldw	r2,-12(fp)
   1c3f0:	11000217 	ldw	r4,8(r2)
   1c3f4:	e1bffc17 	ldw	r6,-16(fp)
   1c3f8:	e17ffe17 	ldw	r5,-8(fp)
   1c3fc:	001c5e00 	call	1c5e0 <memcmp>
   1c400:	1004c03a 	cmpne	r2,r2,zero
   1c404:	1000031e 	bne	r2,zero,1c414 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1c408:	e0bffd17 	ldw	r2,-12(fp)
   1c40c:	e0bfff15 	stw	r2,-4(fp)
   1c410:	00000806 	br	1c434 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   1c414:	e0bffd17 	ldw	r2,-12(fp)
   1c418:	10800017 	ldw	r2,0(r2)
   1c41c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1c420:	00c000f4 	movhi	r3,3
   1c424:	18e77a04 	addi	r3,r3,-25112
   1c428:	e0bffd17 	ldw	r2,-12(fp)
   1c42c:	10ffc91e 	bne	r2,r3,1c354 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1c430:	e03fff15 	stw	zero,-4(fp)
   1c434:	e0bfff17 	ldw	r2,-4(fp)
}
   1c438:	e037883a 	mov	sp,fp
   1c43c:	dfc00117 	ldw	ra,4(sp)
   1c440:	df000017 	ldw	fp,0(sp)
   1c444:	dec00204 	addi	sp,sp,8
   1c448:	f800283a 	ret

0001c44c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1c44c:	defffc04 	addi	sp,sp,-16
   1c450:	df000315 	stw	fp,12(sp)
   1c454:	df000304 	addi	fp,sp,12
   1c458:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1c45c:	00bffa04 	movi	r2,-24
   1c460:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1c464:	e03ffe15 	stw	zero,-8(fp)
   1c468:	00001e06 	br	1c4e4 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   1c46c:	e0bffe17 	ldw	r2,-8(fp)
   1c470:	00c000f4 	movhi	r3,3
   1c474:	18e2fc04 	addi	r3,r3,-29712
   1c478:	10800324 	muli	r2,r2,12
   1c47c:	10c5883a 	add	r2,r2,r3
   1c480:	10800017 	ldw	r2,0(r2)
   1c484:	1004c03a 	cmpne	r2,r2,zero
   1c488:	1000131e 	bne	r2,zero,1c4d8 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   1c48c:	e0bffe17 	ldw	r2,-8(fp)
   1c490:	00c000f4 	movhi	r3,3
   1c494:	18e2fc04 	addi	r3,r3,-29712
   1c498:	10800324 	muli	r2,r2,12
   1c49c:	10c7883a 	add	r3,r2,r3
   1c4a0:	e0bfff17 	ldw	r2,-4(fp)
   1c4a4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   1c4a8:	008000f4 	movhi	r2,3
   1c4ac:	10a77e04 	addi	r2,r2,-25096
   1c4b0:	10c00017 	ldw	r3,0(r2)
   1c4b4:	e0bffe17 	ldw	r2,-8(fp)
   1c4b8:	1880040e 	bge	r3,r2,1c4cc <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   1c4bc:	00c000f4 	movhi	r3,3
   1c4c0:	18e77e04 	addi	r3,r3,-25096
   1c4c4:	e0bffe17 	ldw	r2,-8(fp)
   1c4c8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   1c4cc:	e0bffe17 	ldw	r2,-8(fp)
   1c4d0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   1c4d4:	00000606 	br	1c4f0 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1c4d8:	e0bffe17 	ldw	r2,-8(fp)
   1c4dc:	10800044 	addi	r2,r2,1
   1c4e0:	e0bffe15 	stw	r2,-8(fp)
   1c4e4:	e0bffe17 	ldw	r2,-8(fp)
   1c4e8:	10800810 	cmplti	r2,r2,32
   1c4ec:	103fdf1e 	bne	r2,zero,1c46c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1c4f0:	e0bffd17 	ldw	r2,-12(fp)
}
   1c4f4:	e037883a 	mov	sp,fp
   1c4f8:	df000017 	ldw	fp,0(sp)
   1c4fc:	dec00104 	addi	sp,sp,4
   1c500:	f800283a 	ret

0001c504 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1c504:	defffb04 	addi	sp,sp,-20
   1c508:	df000415 	stw	fp,16(sp)
   1c50c:	df000404 	addi	fp,sp,16
   1c510:	e13ffe15 	stw	r4,-8(fp)
   1c514:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1c518:	e0bfff17 	ldw	r2,-4(fp)
   1c51c:	10840070 	cmpltui	r2,r2,4097
   1c520:	1000021e 	bne	r2,zero,1c52c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1c524:	00840004 	movi	r2,4096
   1c528:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1c52c:	e0fffe17 	ldw	r3,-8(fp)
   1c530:	e0bfff17 	ldw	r2,-4(fp)
   1c534:	1885883a 	add	r2,r3,r2
   1c538:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1c53c:	e0bffe17 	ldw	r2,-8(fp)
   1c540:	e0bffd15 	stw	r2,-12(fp)
   1c544:	00000506 	br	1c55c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1c548:	e0bffd17 	ldw	r2,-12(fp)
   1c54c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1c550:	e0bffd17 	ldw	r2,-12(fp)
   1c554:	10800804 	addi	r2,r2,32
   1c558:	e0bffd15 	stw	r2,-12(fp)
   1c55c:	e0fffd17 	ldw	r3,-12(fp)
   1c560:	e0bffc17 	ldw	r2,-16(fp)
   1c564:	18bff836 	bltu	r3,r2,1c548 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1c568:	e0bffe17 	ldw	r2,-8(fp)
   1c56c:	108007cc 	andi	r2,r2,31
   1c570:	1005003a 	cmpeq	r2,r2,zero
   1c574:	1000021e 	bne	r2,zero,1c580 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1c578:	e0bffd17 	ldw	r2,-12(fp)
   1c57c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1c580:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1c584:	e037883a 	mov	sp,fp
   1c588:	df000017 	ldw	fp,0(sp)
   1c58c:	dec00104 	addi	sp,sp,4
   1c590:	f800283a 	ret

0001c594 <atexit>:
   1c594:	200b883a 	mov	r5,r4
   1c598:	000d883a 	mov	r6,zero
   1c59c:	0009883a 	mov	r4,zero
   1c5a0:	000f883a 	mov	r7,zero
   1c5a4:	001c6541 	jmpi	1c654 <__register_exitproc>

0001c5a8 <exit>:
   1c5a8:	defffe04 	addi	sp,sp,-8
   1c5ac:	000b883a 	mov	r5,zero
   1c5b0:	dc000015 	stw	r16,0(sp)
   1c5b4:	dfc00115 	stw	ra,4(sp)
   1c5b8:	2021883a 	mov	r16,r4
   1c5bc:	001c78c0 	call	1c78c <__call_exitprocs>
   1c5c0:	008000f4 	movhi	r2,3
   1c5c4:	10a77504 	addi	r2,r2,-25132
   1c5c8:	11000017 	ldw	r4,0(r2)
   1c5cc:	20800f17 	ldw	r2,60(r4)
   1c5d0:	10000126 	beq	r2,zero,1c5d8 <exit+0x30>
   1c5d4:	103ee83a 	callr	r2
   1c5d8:	8009883a 	mov	r4,r16
   1c5dc:	001c97c0 	call	1c97c <_exit>

0001c5e0 <memcmp>:
   1c5e0:	00c000c4 	movi	r3,3
   1c5e4:	1980032e 	bgeu	r3,r6,1c5f4 <memcmp+0x14>
   1c5e8:	2144b03a 	or	r2,r4,r5
   1c5ec:	10c4703a 	and	r2,r2,r3
   1c5f0:	10000f26 	beq	r2,zero,1c630 <memcmp+0x50>
   1c5f4:	31ffffc4 	addi	r7,r6,-1
   1c5f8:	3000061e 	bne	r6,zero,1c614 <memcmp+0x34>
   1c5fc:	00000a06 	br	1c628 <memcmp+0x48>
   1c600:	39ffffc4 	addi	r7,r7,-1
   1c604:	00bfffc4 	movi	r2,-1
   1c608:	21000044 	addi	r4,r4,1
   1c60c:	29400044 	addi	r5,r5,1
   1c610:	38800526 	beq	r7,r2,1c628 <memcmp+0x48>
   1c614:	20c00003 	ldbu	r3,0(r4)
   1c618:	28800003 	ldbu	r2,0(r5)
   1c61c:	18bff826 	beq	r3,r2,1c600 <memcmp+0x20>
   1c620:	1885c83a 	sub	r2,r3,r2
   1c624:	f800283a 	ret
   1c628:	0005883a 	mov	r2,zero
   1c62c:	f800283a 	ret
   1c630:	180f883a 	mov	r7,r3
   1c634:	20c00017 	ldw	r3,0(r4)
   1c638:	28800017 	ldw	r2,0(r5)
   1c63c:	18bfed1e 	bne	r3,r2,1c5f4 <memcmp+0x14>
   1c640:	31bfff04 	addi	r6,r6,-4
   1c644:	21000104 	addi	r4,r4,4
   1c648:	29400104 	addi	r5,r5,4
   1c64c:	39bff936 	bltu	r7,r6,1c634 <memcmp+0x54>
   1c650:	003fe806 	br	1c5f4 <memcmp+0x14>

0001c654 <__register_exitproc>:
   1c654:	defffa04 	addi	sp,sp,-24
   1c658:	008000f4 	movhi	r2,3
   1c65c:	10a77504 	addi	r2,r2,-25132
   1c660:	dc000015 	stw	r16,0(sp)
   1c664:	14000017 	ldw	r16,0(r2)
   1c668:	dd000415 	stw	r20,16(sp)
   1c66c:	2829883a 	mov	r20,r5
   1c670:	81405217 	ldw	r5,328(r16)
   1c674:	dcc00315 	stw	r19,12(sp)
   1c678:	dc800215 	stw	r18,8(sp)
   1c67c:	dc400115 	stw	r17,4(sp)
   1c680:	dfc00515 	stw	ra,20(sp)
   1c684:	2023883a 	mov	r17,r4
   1c688:	3027883a 	mov	r19,r6
   1c68c:	3825883a 	mov	r18,r7
   1c690:	28002526 	beq	r5,zero,1c728 <__register_exitproc+0xd4>
   1c694:	29000117 	ldw	r4,4(r5)
   1c698:	008007c4 	movi	r2,31
   1c69c:	11002716 	blt	r2,r4,1c73c <__register_exitproc+0xe8>
   1c6a0:	8800101e 	bne	r17,zero,1c6e4 <__register_exitproc+0x90>
   1c6a4:	2105883a 	add	r2,r4,r4
   1c6a8:	1085883a 	add	r2,r2,r2
   1c6ac:	20c00044 	addi	r3,r4,1
   1c6b0:	1145883a 	add	r2,r2,r5
   1c6b4:	0009883a 	mov	r4,zero
   1c6b8:	15000215 	stw	r20,8(r2)
   1c6bc:	28c00115 	stw	r3,4(r5)
   1c6c0:	2005883a 	mov	r2,r4
   1c6c4:	dfc00517 	ldw	ra,20(sp)
   1c6c8:	dd000417 	ldw	r20,16(sp)
   1c6cc:	dcc00317 	ldw	r19,12(sp)
   1c6d0:	dc800217 	ldw	r18,8(sp)
   1c6d4:	dc400117 	ldw	r17,4(sp)
   1c6d8:	dc000017 	ldw	r16,0(sp)
   1c6dc:	dec00604 	addi	sp,sp,24
   1c6e0:	f800283a 	ret
   1c6e4:	29802204 	addi	r6,r5,136
   1c6e8:	00800044 	movi	r2,1
   1c6ec:	110e983a 	sll	r7,r2,r4
   1c6f0:	30c04017 	ldw	r3,256(r6)
   1c6f4:	2105883a 	add	r2,r4,r4
   1c6f8:	1085883a 	add	r2,r2,r2
   1c6fc:	1185883a 	add	r2,r2,r6
   1c700:	19c6b03a 	or	r3,r3,r7
   1c704:	14802015 	stw	r18,128(r2)
   1c708:	14c00015 	stw	r19,0(r2)
   1c70c:	00800084 	movi	r2,2
   1c710:	30c04015 	stw	r3,256(r6)
   1c714:	88bfe31e 	bne	r17,r2,1c6a4 <__register_exitproc+0x50>
   1c718:	30804117 	ldw	r2,260(r6)
   1c71c:	11c4b03a 	or	r2,r2,r7
   1c720:	30804115 	stw	r2,260(r6)
   1c724:	003fdf06 	br	1c6a4 <__register_exitproc+0x50>
   1c728:	008000f4 	movhi	r2,3
   1c72c:	10a7e204 	addi	r2,r2,-24696
   1c730:	100b883a 	mov	r5,r2
   1c734:	80805215 	stw	r2,328(r16)
   1c738:	003fd606 	br	1c694 <__register_exitproc+0x40>
   1c73c:	00800034 	movhi	r2,0
   1c740:	10800004 	addi	r2,r2,0
   1c744:	1000021e 	bne	r2,zero,1c750 <__register_exitproc+0xfc>
   1c748:	013fffc4 	movi	r4,-1
   1c74c:	003fdc06 	br	1c6c0 <__register_exitproc+0x6c>
   1c750:	01006404 	movi	r4,400
   1c754:	103ee83a 	callr	r2
   1c758:	1007883a 	mov	r3,r2
   1c75c:	103ffa26 	beq	r2,zero,1c748 <__register_exitproc+0xf4>
   1c760:	80805217 	ldw	r2,328(r16)
   1c764:	180b883a 	mov	r5,r3
   1c768:	18000115 	stw	zero,4(r3)
   1c76c:	18800015 	stw	r2,0(r3)
   1c770:	80c05215 	stw	r3,328(r16)
   1c774:	18006215 	stw	zero,392(r3)
   1c778:	18006315 	stw	zero,396(r3)
   1c77c:	0009883a 	mov	r4,zero
   1c780:	883fc826 	beq	r17,zero,1c6a4 <__register_exitproc+0x50>
   1c784:	003fd706 	br	1c6e4 <__register_exitproc+0x90>

0001c788 <register_fini>:
   1c788:	f800283a 	ret

0001c78c <__call_exitprocs>:
   1c78c:	008000f4 	movhi	r2,3
   1c790:	10a77504 	addi	r2,r2,-25132
   1c794:	10800017 	ldw	r2,0(r2)
   1c798:	defff304 	addi	sp,sp,-52
   1c79c:	df000b15 	stw	fp,44(sp)
   1c7a0:	d8800115 	stw	r2,4(sp)
   1c7a4:	00800034 	movhi	r2,0
   1c7a8:	10800004 	addi	r2,r2,0
   1c7ac:	1005003a 	cmpeq	r2,r2,zero
   1c7b0:	d8800215 	stw	r2,8(sp)
   1c7b4:	d8800117 	ldw	r2,4(sp)
   1c7b8:	dd400815 	stw	r21,32(sp)
   1c7bc:	dd000715 	stw	r20,28(sp)
   1c7c0:	10805204 	addi	r2,r2,328
   1c7c4:	dfc00c15 	stw	ra,48(sp)
   1c7c8:	ddc00a15 	stw	r23,40(sp)
   1c7cc:	dd800915 	stw	r22,36(sp)
   1c7d0:	dcc00615 	stw	r19,24(sp)
   1c7d4:	dc800515 	stw	r18,20(sp)
   1c7d8:	dc400415 	stw	r17,16(sp)
   1c7dc:	dc000315 	stw	r16,12(sp)
   1c7e0:	282b883a 	mov	r21,r5
   1c7e4:	2039883a 	mov	fp,r4
   1c7e8:	d8800015 	stw	r2,0(sp)
   1c7ec:	2829003a 	cmpeq	r20,r5,zero
   1c7f0:	d8800117 	ldw	r2,4(sp)
   1c7f4:	14405217 	ldw	r17,328(r2)
   1c7f8:	88001026 	beq	r17,zero,1c83c <__call_exitprocs+0xb0>
   1c7fc:	ddc00017 	ldw	r23,0(sp)
   1c800:	88800117 	ldw	r2,4(r17)
   1c804:	8c802204 	addi	r18,r17,136
   1c808:	143fffc4 	addi	r16,r2,-1
   1c80c:	80000916 	blt	r16,zero,1c834 <__call_exitprocs+0xa8>
   1c810:	05bfffc4 	movi	r22,-1
   1c814:	a000151e 	bne	r20,zero,1c86c <__call_exitprocs+0xe0>
   1c818:	8409883a 	add	r4,r16,r16
   1c81c:	2105883a 	add	r2,r4,r4
   1c820:	1485883a 	add	r2,r2,r18
   1c824:	10c02017 	ldw	r3,128(r2)
   1c828:	a8c01126 	beq	r21,r3,1c870 <__call_exitprocs+0xe4>
   1c82c:	843fffc4 	addi	r16,r16,-1
   1c830:	85bff81e 	bne	r16,r22,1c814 <__call_exitprocs+0x88>
   1c834:	d8800217 	ldw	r2,8(sp)
   1c838:	10003126 	beq	r2,zero,1c900 <__call_exitprocs+0x174>
   1c83c:	dfc00c17 	ldw	ra,48(sp)
   1c840:	df000b17 	ldw	fp,44(sp)
   1c844:	ddc00a17 	ldw	r23,40(sp)
   1c848:	dd800917 	ldw	r22,36(sp)
   1c84c:	dd400817 	ldw	r21,32(sp)
   1c850:	dd000717 	ldw	r20,28(sp)
   1c854:	dcc00617 	ldw	r19,24(sp)
   1c858:	dc800517 	ldw	r18,20(sp)
   1c85c:	dc400417 	ldw	r17,16(sp)
   1c860:	dc000317 	ldw	r16,12(sp)
   1c864:	dec00d04 	addi	sp,sp,52
   1c868:	f800283a 	ret
   1c86c:	8409883a 	add	r4,r16,r16
   1c870:	88c00117 	ldw	r3,4(r17)
   1c874:	2105883a 	add	r2,r4,r4
   1c878:	1445883a 	add	r2,r2,r17
   1c87c:	18ffffc4 	addi	r3,r3,-1
   1c880:	11800217 	ldw	r6,8(r2)
   1c884:	1c001526 	beq	r3,r16,1c8dc <__call_exitprocs+0x150>
   1c888:	10000215 	stw	zero,8(r2)
   1c88c:	303fe726 	beq	r6,zero,1c82c <__call_exitprocs+0xa0>
   1c890:	00c00044 	movi	r3,1
   1c894:	1c06983a 	sll	r3,r3,r16
   1c898:	90804017 	ldw	r2,256(r18)
   1c89c:	8cc00117 	ldw	r19,4(r17)
   1c8a0:	1884703a 	and	r2,r3,r2
   1c8a4:	10001426 	beq	r2,zero,1c8f8 <__call_exitprocs+0x16c>
   1c8a8:	90804117 	ldw	r2,260(r18)
   1c8ac:	1884703a 	and	r2,r3,r2
   1c8b0:	10000c1e 	bne	r2,zero,1c8e4 <__call_exitprocs+0x158>
   1c8b4:	2105883a 	add	r2,r4,r4
   1c8b8:	1485883a 	add	r2,r2,r18
   1c8bc:	11400017 	ldw	r5,0(r2)
   1c8c0:	e009883a 	mov	r4,fp
   1c8c4:	303ee83a 	callr	r6
   1c8c8:	88800117 	ldw	r2,4(r17)
   1c8cc:	98bfc81e 	bne	r19,r2,1c7f0 <__call_exitprocs+0x64>
   1c8d0:	b8800017 	ldw	r2,0(r23)
   1c8d4:	147fd526 	beq	r2,r17,1c82c <__call_exitprocs+0xa0>
   1c8d8:	003fc506 	br	1c7f0 <__call_exitprocs+0x64>
   1c8dc:	8c000115 	stw	r16,4(r17)
   1c8e0:	003fea06 	br	1c88c <__call_exitprocs+0x100>
   1c8e4:	2105883a 	add	r2,r4,r4
   1c8e8:	1485883a 	add	r2,r2,r18
   1c8ec:	11000017 	ldw	r4,0(r2)
   1c8f0:	303ee83a 	callr	r6
   1c8f4:	003ff406 	br	1c8c8 <__call_exitprocs+0x13c>
   1c8f8:	303ee83a 	callr	r6
   1c8fc:	003ff206 	br	1c8c8 <__call_exitprocs+0x13c>
   1c900:	88800117 	ldw	r2,4(r17)
   1c904:	1000081e 	bne	r2,zero,1c928 <__call_exitprocs+0x19c>
   1c908:	89000017 	ldw	r4,0(r17)
   1c90c:	20000726 	beq	r4,zero,1c92c <__call_exitprocs+0x1a0>
   1c910:	b9000015 	stw	r4,0(r23)
   1c914:	8809883a 	mov	r4,r17
   1c918:	00000000 	call	0 <__alt_mem_ins_mem1-0x10000>
   1c91c:	bc400017 	ldw	r17,0(r23)
   1c920:	883fb71e 	bne	r17,zero,1c800 <__call_exitprocs+0x74>
   1c924:	003fc506 	br	1c83c <__call_exitprocs+0xb0>
   1c928:	89000017 	ldw	r4,0(r17)
   1c92c:	882f883a 	mov	r23,r17
   1c930:	2023883a 	mov	r17,r4
   1c934:	883fb21e 	bne	r17,zero,1c800 <__call_exitprocs+0x74>
   1c938:	003fc006 	br	1c83c <__call_exitprocs+0xb0>

0001c93c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   1c93c:	defffd04 	addi	sp,sp,-12
   1c940:	df000215 	stw	fp,8(sp)
   1c944:	df000204 	addi	fp,sp,8
   1c948:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   1c94c:	e0bfff17 	ldw	r2,-4(fp)
   1c950:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1c954:	e0bffe17 	ldw	r2,-8(fp)
   1c958:	1005003a 	cmpeq	r2,r2,zero
   1c95c:	1000021e 	bne	r2,zero,1c968 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   1c960:	002af070 	cmpltui	zero,zero,43969
   1c964:	00000106 	br	1c96c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   1c968:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   1c96c:	e037883a 	mov	sp,fp
   1c970:	df000017 	ldw	fp,0(sp)
   1c974:	dec00104 	addi	sp,sp,4
   1c978:	f800283a 	ret

0001c97c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1c97c:	defffd04 	addi	sp,sp,-12
   1c980:	dfc00215 	stw	ra,8(sp)
   1c984:	df000115 	stw	fp,4(sp)
   1c988:	df000104 	addi	fp,sp,4
   1c98c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   1c990:	e13fff17 	ldw	r4,-4(fp)
   1c994:	001c93c0 	call	1c93c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1c998:	003fff06 	br	1c998 <_exit+0x1c>
   1c99c:	0001c788 	cmpgei	zero,zero,1822
