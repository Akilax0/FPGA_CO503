
consumer.elf:     file format elf32-littlenios2
consumer.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000c7b8 memsz 0x0000c7b8 flags r-x
    LOAD off    0x0000e394 vaddr 0x00010394 paddr 0x0000c7d8 align 2**12
         filesz 0x00001a5c memsz 0x00001d5c flags rw-
    LOAD off    0x00010000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000394 memsz 0x00000394 flags r--

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c624  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000394  00010000  00010000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  00010394  0000c7d8  0000e394  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000300  00011df0  0000e234  0000fdf0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00010394  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000c98  00000000  00000000  000103b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000013ef  00000000  00000000  00011050  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000231a2  00000000  00000000  0001243f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007976  00000000  00000000  000355e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013555  00000000  00000000  0003cf57  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000018a4  00000000  00000000  000504ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002154  00000000  00000000  00051d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000be16  00000000  00000000  00053ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0005fcbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  0005fce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00063679  2**0
                  CONTENTS, READONLY
 18 .cpu          00000004  00000000  00000000  0006367c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00063680  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00063681  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00063682  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00063686  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006368a  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0006368e  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00063699  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000636a4  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  000636af  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000044  00000000  00000000  000636b2  2**0
                  CONTENTS, READONLY
 29 .jdi          00008508  00000000  00000000  000636f6  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00062901  00000000  00000000  0006bbfe  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
00010000 l    d  .rodata	00000000 .rodata
00010394 l    d  .rwdata	00000000 .rwdata
00011df0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO_1.c
00000000 l    df *ABS*	00000000 consumer.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000007cc l     F .text	00000058 __sprint_r
000100c2 l     O .rodata	00000010 blanks.3452
000100b2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002830 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000422c l     F .text	00000058 std
00004338 l     F .text	00000008 __fp_lock
00004340 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00010394 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00011dbc l     O .rwdata	00000004 charset
000100f8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00010240 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
000084cc l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000095f8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00009e6c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00009ecc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00009fcc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000a0ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000a1cc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000a328 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000a554 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011de0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000a7f0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010d50 l     O .rwdata	00001060 jtag_uart_1
0000a8e0 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000ab20 l     F .text	00000228 altera_avalon_jtag_uart_irq
0000ad48 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000b3c4 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000b6e8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000bb0c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000bc48 l     F .text	000000dc alt_file_locked
0000beac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000c5c0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000c774 l     F .text	00000040 alt_sim_halt
00005fe8 g     F .text	00000094 _mprec_log10
000060d4 g     F .text	00000088 __any_on
000077e0 g     F .text	00000070 _isatty_r
00010218 g     O .rodata	00000028 __mprec_tinytens
0000a388 g     F .text	0000006c alt_main
00000000 g       *ABS*	00000000 __alt_mem_ins_mem1
000006a4 g     F .text	000000a0 _puts_r
00011df0 g     O .bss	00000004 writep
00011e60 g     O .bss	00000100 alt_irq
00007850 g     F .text	00000078 _lseek_r
0000c7d8 g       *ABS*	00000000 __flash_rwdata_start
00008fec g     F .text	00000088 __eqdf2
000004a4 g     F .text	00000098 FIFO_1_INIT
000120f0 g       *ABS*	00000000 __alt_heap_start
0000062c g     F .text	00000044 printf
000072ac g     F .text	00000068 __sseek
00004294 g     F .text	000000a4 __sinit
00004f6c g     F .text	00000084 _setlocale_r
00004394 g     F .text	00000068 __sfmoreglue
0000a414 g     F .text	00000020 __malloc_unlock
00011df4 g     O .bss	00000004 readp
00005a64 g     F .text	000000e0 memmove
00004384 g     F .text	00000010 _cleanup
0000615c g     F .text	000000bc _Balloc
000090fc g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000776c g     F .text	00000074 _fstat_r
00011e1c g     O .bss	00000004 errno
00011e24 g     O .bss	00000004 alt_argv
00019db0 g       *ABS*	00000000 _gp
00010bd0 g     O .rwdata	00000180 alt_fd_list
0000c0d0 g     F .text	00000094 alt_find_dev
000059c4 g     F .text	000000a0 memcpy
00004378 g     F .text	0000000c _cleanup_r
00009294 g     F .text	000000f8 __floatsidf
0000bbd0 g     F .text	00000078 alt_io_redirect
0000920c g     F .text	00000088 __ltdf2
0000c7d8 g       *ABS*	00000000 __DTOR_END__
00000744 g     F .text	00000014 puts
00005f38 g     F .text	000000b0 __ratio
0000af60 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000670 g     F .text	00000034 _printf_r
00009734 g     F .text	00000008 __udivsi3
0000a02c g     F .text	000000c0 isatty
00010128 g     O .rodata	000000c8 __mprec_tens
00004f48 g     F .text	00000008 __locale_charset
0000c33c g     F .text	00000090 alt_icache_flush
00011e10 g     O .bss	00000004 __malloc_top_pad
00011db8 g     O .rwdata	00000004 __mb_cur_max
00004f50 g     F .text	0000000c _localeconv_r
00006854 g     F .text	0000003c __i2b
0000492c g     F .text	0000049c __sfvwrite_r
00007234 g     F .text	00000070 _sbrk_r
00000554 g     F .text	00000094 consumer
00011df8 g     O .bss	00000004 fullp
000078c8 g     F .text	00000078 _read_r
00010794 g     O .rwdata	0000000c __lc_ctype
00011dd8 g     O .rwdata	00000004 alt_max_fd
00009b70 g     F .text	00000138 __unpack_d
00007648 g     F .text	00000110 _fclose_r
000041f8 g     F .text	00000034 fflush
00011e14 g     O .bss	00000004 __malloc_max_sbrked_mem
0000895c g     F .text	00000074 __adddf3
00005e18 g     F .text	00000120 __b2d
00007f1c g     F .text	000005b0 __umoddi3
0000a238 g     F .text	000000f0 lseek
00011db4 g     O .rwdata	00000004 _global_impure_ptr
00006bd0 g     F .text	000005f4 _realloc_r
000120f0 g       *ABS*	00000000 __bss_end
0000ba14 g     F .text	000000f8 alt_iic_isr_register
0000bfa4 g     F .text	0000010c alt_tick
00007940 g     F .text	000005dc __udivdi3
000101f0 g     O .rodata	00000028 __mprec_bigtens
00006ab0 g     F .text	00000120 __s2b
00009464 g     F .text	00000194 __floatunsidf
00005d38 g     F .text	00000060 __mcmp
00004360 g     F .text	00000018 __fp_lock_all
0000b9cc g     F .text	00000048 alt_ic_irq_enabled
0000bf0c g     F .text	00000098 alt_alarm_stop
00011e2c g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
00010ba8 g     O .rwdata	00000028 alt_dev_null
0000b618 g     F .text	0000001c alt_dcache_flush_all
00005c04 g     F .text	00000070 __hi0bits
0000938c g     F .text	000000d8 __fixdfsi
00011df0 g       *ABS*	00000000 __ram_rwdata_end
00011dd0 g     O .rwdata	00000008 alt_dev_list
0000a6d0 g     F .text	00000120 write
00010394 g       *ABS*	00000000 __ram_rodata_end
00009ef8 g     F .text	000000d4 fstat
00006990 g     F .text	00000120 __pow5mult
00011e04 g     O .bss	00000004 __nlocale_changed
0000973c g     F .text	00000008 __umodsi3
000120f0 g       *ABS*	00000000 end
0000aa60 g     F .text	000000c0 altera_avalon_jtag_uart_init
0000c7d4 g       *ABS*	00000000 __CTOR_LIST__
00018000 g       *ABS*	00000000 __alt_stack_pointer
0000b434 g     F .text	00000090 alt_avalon_timer_sc_init
000097dc g     F .text	00000080 __clzsi2
0000b184 g     F .text	00000240 altera_avalon_jtag_uart_write
00004284 g     F .text	00000004 __sfp_lock_acquire
000058e0 g     F .text	000000e4 memchr
00000824 g     F .text	00001eac ___vfprintf_internal_r
00004618 g     F .text	00000314 _free_r
0000c5c4 g     F .text	000001b0 __call_exitprocs
00011e08 g     O .bss	00000004 __mlocale_changed
00011dc4 g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000003c _start
00011e30 g     O .bss	00000004 _alt_tick_rate
00006520 g     F .text	0000014c __lshift
00011e34 g     O .bss	00000004 _alt_nticks
0000a434 g     F .text	00000120 read
0000a884 g     F .text	0000005c alt_sys_init
0000c48c g     F .text	00000134 __register_exitproc
0000666c g     F .text	000001e8 __multiply
0000adf8 g     F .text	00000074 altera_avalon_jtag_uart_close
00010394 g       *ABS*	00000000 __ram_rwdata_start
00010000 g       *ABS*	00000000 __ram_rodata_start
00011e38 g     O .bss	00000028 __malloc_current_mallinfo
00006218 g     F .text	0000017c __d2b
0000a918 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000c284 g     F .text	000000b8 alt_get_fd
00009ca8 g     F .text	000000c8 __fpcmp_parts_d
000075d8 g     F .text	00000070 _close_r
0000c418 g     F .text	00000074 memcmp
0000a9c8 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
000120f0 g       *ABS*	00000000 __alt_stack_base
0000aa10 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000026f4 g     F .text	0000013c __swsetup_r
00008d94 g     F .text	00000258 __divdf3
000043fc g     F .text	000000f0 __sfp
0000607c g     F .text	00000058 __copybits
000107a0 g     O .rwdata	00000408 __malloc_av_
00004290 g     F .text	00000004 __sinit_lock_release
000089d0 g     F .text	000003c4 __muldf3
00007390 g     F .text	00000060 __sread
0000c164 g     F .text	00000120 alt_find_file
0000b634 g     F .text	000000b4 alt_dev_llist_insert
0000a3f4 g     F .text	00000020 __malloc_lock
0000a614 g     F .text	000000bc sbrk
00003ffc g     F .text	000001fc _fflush_r
00007524 g     F .text	000000b4 _calloc_r
00011df0 g       *ABS*	00000000 __bss_start
00005b44 g     F .text	00000098 memset
0000053c g     F .text	00000018 main
00011e28 g     O .bss	00000004 alt_envp
00011e18 g     O .bss	00000004 __malloc_max_total_mem
0000a970 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000072a4 g     F .text	00000008 __sclose
00018000 g       *ABS*	00000000 __alt_heap_limit
00007758 g     F .text	00000014 fclose
00010000 g       *ABS*	00000000 __alt_mem_data_mem1
00011f60 g     O .bss	00000190 _atexit0
00002a48 g     F .text	000015b4 _dtoa_r
000051a0 g     F .text	00000740 _malloc_r
00011ddc g     O .rwdata	00000004 alt_errno
00004e90 g     F .text	000000b8 _fwalk
000001f0 g     F .text	00000158 WRITE_FIFO_1
00009674 g     F .text	00000060 __divsi3
0001024c g     O .rodata	00000014 __thenan_df
000044ec g     F .text	0000012c _malloc_trim_r
0000c7d8 g       *ABS*	00000000 __CTOR_END__
000073f0 g     F .text	000000bc strcmp
00010000 g       *ABS*	00000000 __flash_rodata_start
0000c7d8 g       *ABS*	00000000 __DTOR_LIST__
000005e8 g     F .text	00000044 delay
00009074 g     F .text	00000088 __nedf2
0000a850 g     F .text	00000034 alt_irq_init
0000a5b4 g     F .text	00000060 alt_release_fd
00010260 g     O .rodata	00000100 __clz_tab
00011e0c g     O .bss	00000004 _PathLocale
0000c3cc g     F .text	00000014 atexit
000074ac g     F .text	00000078 _write_r
00004ff0 g     F .text	0000001c setlocale
00011db0 g     O .rwdata	00000004 _impure_ptr
00011e20 g     O .bss	00000004 alt_argc
0000b7ac g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00005d98 g     F .text	00000080 __ulp
000071c4 g     F .text	00000040 __isinfd
00004348 g     F .text	00000018 __fp_unlock_all
00011dc8 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00004f5c g     F .text	00000010 localeconv
0000b840 g     F .text	00000050 alt_ic_isr_register
00011df0 g       *ABS*	00000000 _edata
000120f0 g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
0000ae6c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000b92c g     F .text	000000a0 alt_ic_irq_disable
00007314 g     F .text	0000007c __swrite
00011dc0 g     O .rwdata	00000004 __malloc_trim_threshold
0000c0b0 g     F .text	00000020 altera_nios2_qsys_irq_init
0000c3e0 g     F .text	00000038 exit
00004dc8 g     F .text	000000c8 _fwalk_reent
00006394 g     F .text	0000018c __mdiff
000096d4 g     F .text	00000060 __modsi3
00018000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004288 g     F .text	00000004 __sfp_lock_release
0000c7b4 g     F .text	00000020 _exit
00007204 g     F .text	00000030 __isnand
0000b4c4 g     F .text	00000154 alt_alarm_start
00009744 g     F .text	00000098 __muldi3
0000500c g     F .text	00000194 __smakebuf_r
00000758 g     F .text	00000074 strlen
0000bd24 g     F .text	00000188 open
00009184 g     F .text	00000088 __gedf2
00000348 g     F .text	0000015c READ_FIFO_1
0000b810 g     F .text	00000030 alt_icache_flush_all
00011de4 g     O .rwdata	00000004 alt_priority_mask
00011dfc g     O .bss	00000004 emptyp
0000b890 g     F .text	0000009c alt_ic_irq_enable
000026d0 g     F .text	00000024 __vfprintf_internal
000088dc g     F .text	00000080 __subdf3
00005c74 g     F .text	000000c4 __lo0bits
00011de8 g     O .rwdata	00000008 alt_alarm_list
0000b748 g     F .text	00000064 _do_ctors
00011e00 g     O .bss	00000004 countp
00009d70 g     F .text	000000fc close
0000a14c g     F .text	00000080 alt_load
0000985c g     F .text	00000314 __pack_d
00020000 g       *ABS*	00000000 __alt_mem_shared_mem
00000000  w      *UND*	00000000 free
0000428c g     F .text	00000004 __sinit_lock_acquire
00006890 g     F .text	00000100 __multadd
00005bdc g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18c79804 	addi	r3,r3,7776
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18c79804 	addi	r3,r3,7776
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	dee00014 	ori	sp,sp,32768

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c0:	d6a76c14 	ori	gp,gp,40368
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1c8:	10877c14 	ori	r2,r2,7664

    movhi r3, %hi(__bss_end)
     1cc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1d0:	18c83c14 	ori	r3,r3,8432

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e4:	000a14c0 	call	a14c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e8:	000a3880 	call	a388 <alt_main>

000001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1ec:	003fff06 	br	1ec <alt_after_alt_main>

000001f0 <WRITE_FIFO_1>:


#include "FIFO_1.h"

void WRITE_FIFO_1(int *buffer)
{
     1f0:	defffe04 	addi	sp,sp,-8
     1f4:	df000115 	stw	fp,4(sp)
     1f8:	df000104 	addi	fp,sp,4
     1fc:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is full
	while(IORD_32DIRECT(MEM_BASE,fullp)==0x1){}
     200:	d0a01217 	ldw	r2,-32696(gp)
     204:	1007883a 	mov	r3,r2
     208:	008000b4 	movhi	r2,2
     20c:	10801204 	addi	r2,r2,72
     210:	1885883a 	add	r2,r3,r2
     214:	10800037 	ldwio	r2,0(r2)
     218:	10800060 	cmpeqi	r2,r2,1
     21c:	103ff81e 	bne	r2,zero,200 <WRITE_FIFO_1+0x10>

	// Write the data to FIFO
	IOWR_32DIRECT(MEM_BASE,writep,buffer);
     220:	d0a01017 	ldw	r2,-32704(gp)
     224:	1007883a 	mov	r3,r2
     228:	008000b4 	movhi	r2,2
     22c:	10801204 	addi	r2,r2,72
     230:	1885883a 	add	r2,r3,r2
     234:	e0ffff17 	ldw	r3,-4(fp)
     238:	10c00035 	stwio	r3,0(r2)

	// Update the write pointer
	writep += UNIT_SIZE;
     23c:	d0a01017 	ldw	r2,-32704(gp)
     240:	10800104 	addi	r2,r2,4
     244:	d0a01015 	stw	r2,-32704(gp)

	// Update "count" in shared mem
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE,countp) + 0x1);
     248:	d0a01417 	ldw	r2,-32688(gp)
     24c:	1007883a 	mov	r3,r2
     250:	008000b4 	movhi	r2,2
     254:	10801204 	addi	r2,r2,72
     258:	1889883a 	add	r4,r3,r2
     25c:	d0a01417 	ldw	r2,-32688(gp)
     260:	1007883a 	mov	r3,r2
     264:	008000b4 	movhi	r2,2
     268:	10801204 	addi	r2,r2,72
     26c:	1885883a 	add	r2,r3,r2
     270:	10800037 	ldwio	r2,0(r2)
     274:	10c00044 	addi	r3,r2,1
     278:	2005883a 	mov	r2,r4
     27c:	10c00035 	stwio	r3,0(r2)

	// Update the "full?" and "empty?" flags accordingly
	// Set the full flag if FIFO is now full
	// Reset the empty flag if FIFO now has 1 entry
	if(IORD_32DIRECT(MEM_BASE,countp)==CAPACITY){
     280:	d0a01417 	ldw	r2,-32688(gp)
     284:	1007883a 	mov	r3,r2
     288:	008000b4 	movhi	r2,2
     28c:	10801204 	addi	r2,r2,72
     290:	1885883a 	add	r2,r3,r2
     294:	10800037 	ldwio	r2,0(r2)
     298:	10800a18 	cmpnei	r2,r2,40
     29c:	1000091e 	bne	r2,zero,2c4 <WRITE_FIFO_1+0xd4>
		IOWR_32DIRECT(MEM_BASE,fullp,0x1);
     2a0:	d0a01217 	ldw	r2,-32696(gp)
     2a4:	1007883a 	mov	r3,r2
     2a8:	008000b4 	movhi	r2,2
     2ac:	10801204 	addi	r2,r2,72
     2b0:	1885883a 	add	r2,r3,r2
     2b4:	1007883a 	mov	r3,r2
     2b8:	00800044 	movi	r2,1
     2bc:	18800035 	stwio	r2,0(r3)
     2c0:	00000606 	br	2dc <WRITE_FIFO_1+0xec>
	}else{
		IOWR_32DIRECT(MEM_BASE,fullp,0x0);
     2c4:	d0a01217 	ldw	r2,-32696(gp)
     2c8:	1007883a 	mov	r3,r2
     2cc:	008000b4 	movhi	r2,2
     2d0:	10801204 	addi	r2,r2,72
     2d4:	1885883a 	add	r2,r3,r2
     2d8:	10000035 	stwio	zero,0(r2)
	}
	if(IORD_32DIRECT(MEM_BASE,countp)==0x0){
     2dc:	d0a01417 	ldw	r2,-32688(gp)
     2e0:	1007883a 	mov	r3,r2
     2e4:	008000b4 	movhi	r2,2
     2e8:	10801204 	addi	r2,r2,72
     2ec:	1885883a 	add	r2,r3,r2
     2f0:	10800037 	ldwio	r2,0(r2)
     2f4:	1004c03a 	cmpne	r2,r2,zero
     2f8:	1000091e 	bne	r2,zero,320 <WRITE_FIFO_1+0x130>
		IOWR_32DIRECT(MEM_BASE,emptyp,0x1);
     2fc:	d0a01317 	ldw	r2,-32692(gp)
     300:	1007883a 	mov	r3,r2
     304:	008000b4 	movhi	r2,2
     308:	10801204 	addi	r2,r2,72
     30c:	1885883a 	add	r2,r3,r2
     310:	1007883a 	mov	r3,r2
     314:	00800044 	movi	r2,1
     318:	18800035 	stwio	r2,0(r3)
     31c:	00000606 	br	338 <WRITE_FIFO_1+0x148>
	}else{
		IOWR_32DIRECT(MEM_BASE,emptyp,0x0);
     320:	d0a01317 	ldw	r2,-32692(gp)
     324:	1007883a 	mov	r3,r2
     328:	008000b4 	movhi	r2,2
     32c:	10801204 	addi	r2,r2,72
     330:	1885883a 	add	r2,r3,r2
     334:	10000035 	stwio	zero,0(r2)
	}
}
     338:	e037883a 	mov	sp,fp
     33c:	df000017 	ldw	fp,0(sp)
     340:	dec00104 	addi	sp,sp,4
     344:	f800283a 	ret

00000348 <READ_FIFO_1>:


void READ_FIFO_1(int *buffer)
{
     348:	defffe04 	addi	sp,sp,-8
     34c:	df000115 	stw	fp,4(sp)
     350:	df000104 	addi	fp,sp,4
     354:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is empty
	while(IORD_32DIRECT(MEM_BASE,emptyp)==0x1){}
     358:	d0a01317 	ldw	r2,-32692(gp)
     35c:	1007883a 	mov	r3,r2
     360:	008000b4 	movhi	r2,2
     364:	10801204 	addi	r2,r2,72
     368:	1885883a 	add	r2,r3,r2
     36c:	10800037 	ldwio	r2,0(r2)
     370:	10800060 	cmpeqi	r2,r2,1
     374:	103ff81e 	bne	r2,zero,358 <READ_FIFO_1+0x10>

	// Read the data
	*buffer = IORD_32DIRECT(MEM_BASE,readp);
     378:	d0a01117 	ldw	r2,-32700(gp)
     37c:	1007883a 	mov	r3,r2
     380:	008000b4 	movhi	r2,2
     384:	10801204 	addi	r2,r2,72
     388:	1885883a 	add	r2,r3,r2
     38c:	10c00037 	ldwio	r3,0(r2)
     390:	e0bfff17 	ldw	r2,-4(fp)
     394:	10c00015 	stw	r3,0(r2)
	//printf("Buffer [%i]\n",&buffer);

	// Update the read pointer
	readp += UNIT_SIZE;
     398:	d0a01117 	ldw	r2,-32700(gp)
     39c:	10800104 	addi	r2,r2,4
     3a0:	d0a01115 	stw	r2,-32700(gp)

	// Update "count" in shared mem
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE,countp) - 0x1);
     3a4:	d0a01417 	ldw	r2,-32688(gp)
     3a8:	1007883a 	mov	r3,r2
     3ac:	008000b4 	movhi	r2,2
     3b0:	10801204 	addi	r2,r2,72
     3b4:	1889883a 	add	r4,r3,r2
     3b8:	d0a01417 	ldw	r2,-32688(gp)
     3bc:	1007883a 	mov	r3,r2
     3c0:	008000b4 	movhi	r2,2
     3c4:	10801204 	addi	r2,r2,72
     3c8:	1885883a 	add	r2,r3,r2
     3cc:	10800037 	ldwio	r2,0(r2)
     3d0:	10ffffc4 	addi	r3,r2,-1
     3d4:	2005883a 	mov	r2,r4
     3d8:	10c00035 	stwio	r3,0(r2)

	// Update the "full?" and "empty?" flags accordingly
	// Set the empty flag if FIFO is now empty
	// Reset the full flag if FIFO now has 1 entry less than capacity
	if(IORD_32DIRECT(MEM_BASE,countp)==CAPACITY){
     3dc:	d0a01417 	ldw	r2,-32688(gp)
     3e0:	1007883a 	mov	r3,r2
     3e4:	008000b4 	movhi	r2,2
     3e8:	10801204 	addi	r2,r2,72
     3ec:	1885883a 	add	r2,r3,r2
     3f0:	10800037 	ldwio	r2,0(r2)
     3f4:	10800a18 	cmpnei	r2,r2,40
     3f8:	1000091e 	bne	r2,zero,420 <READ_FIFO_1+0xd8>
		IOWR_32DIRECT(MEM_BASE,fullp,0x1);
     3fc:	d0a01217 	ldw	r2,-32696(gp)
     400:	1007883a 	mov	r3,r2
     404:	008000b4 	movhi	r2,2
     408:	10801204 	addi	r2,r2,72
     40c:	1885883a 	add	r2,r3,r2
     410:	1007883a 	mov	r3,r2
     414:	00800044 	movi	r2,1
     418:	18800035 	stwio	r2,0(r3)
     41c:	00000606 	br	438 <READ_FIFO_1+0xf0>
	}else{
		IOWR_32DIRECT(MEM_BASE,fullp,0x0);
     420:	d0a01217 	ldw	r2,-32696(gp)
     424:	1007883a 	mov	r3,r2
     428:	008000b4 	movhi	r2,2
     42c:	10801204 	addi	r2,r2,72
     430:	1885883a 	add	r2,r3,r2
     434:	10000035 	stwio	zero,0(r2)
	}
	if(IORD_32DIRECT(MEM_BASE,countp)==0x0){
     438:	d0a01417 	ldw	r2,-32688(gp)
     43c:	1007883a 	mov	r3,r2
     440:	008000b4 	movhi	r2,2
     444:	10801204 	addi	r2,r2,72
     448:	1885883a 	add	r2,r3,r2
     44c:	10800037 	ldwio	r2,0(r2)
     450:	1004c03a 	cmpne	r2,r2,zero
     454:	1000091e 	bne	r2,zero,47c <READ_FIFO_1+0x134>
		IOWR_32DIRECT(MEM_BASE,emptyp,0x1);
     458:	d0a01317 	ldw	r2,-32692(gp)
     45c:	1007883a 	mov	r3,r2
     460:	008000b4 	movhi	r2,2
     464:	10801204 	addi	r2,r2,72
     468:	1885883a 	add	r2,r3,r2
     46c:	1007883a 	mov	r3,r2
     470:	00800044 	movi	r2,1
     474:	18800035 	stwio	r2,0(r3)
     478:	00000606 	br	494 <READ_FIFO_1+0x14c>
	}else{
		IOWR_32DIRECT(MEM_BASE,emptyp,0x0);
     47c:	d0a01317 	ldw	r2,-32692(gp)
     480:	1007883a 	mov	r3,r2
     484:	008000b4 	movhi	r2,2
     488:	10801204 	addi	r2,r2,72
     48c:	1885883a 	add	r2,r3,r2
     490:	10000035 	stwio	zero,0(r2)
	}
}
     494:	e037883a 	mov	sp,fp
     498:	df000017 	ldw	fp,0(sp)
     49c:	dec00104 	addi	sp,sp,4
     4a0:	f800283a 	ret

000004a4 <FIFO_1_INIT>:

//Initialization
void FIFO_1_INIT()
{
     4a4:	deffff04 	addi	sp,sp,-4
     4a8:	df000015 	stw	fp,0(sp)
     4ac:	d839883a 	mov	fp,sp
	writep = STARTP; // Initially the FIFO is empty, so start writing at the first slot
     4b0:	00800304 	movi	r2,12
     4b4:	d0a01015 	stw	r2,-32704(gp)
	readp  = STARTP;
     4b8:	00800304 	movi	r2,12
     4bc:	d0a01115 	stw	r2,-32700(gp)
	fullp   = 0x0; // SET THIS OFFSET (If there are previous FIFOs in shared memory, use Prev Fifo's STARTP + Prev Fifo's size)
     4c0:	d0201215 	stw	zero,-32696(gp)
	emptyp   = fullp + UNIT_SIZE;
     4c4:	d0a01217 	ldw	r2,-32696(gp)
     4c8:	10800104 	addi	r2,r2,4
     4cc:	d0a01315 	stw	r2,-32692(gp)
	countp  = emptyp + UNIT_SIZE;
     4d0:	d0a01317 	ldw	r2,-32692(gp)
     4d4:	10800104 	addi	r2,r2,4
     4d8:	d0a01415 	stw	r2,-32688(gp)

	// Assigning values for the flags.
	IOWR_32DIRECT(MEM_BASE, fullp, 0x0);
     4dc:	d0a01217 	ldw	r2,-32696(gp)
     4e0:	1007883a 	mov	r3,r2
     4e4:	008000b4 	movhi	r2,2
     4e8:	10801204 	addi	r2,r2,72
     4ec:	1885883a 	add	r2,r3,r2
     4f0:	10000035 	stwio	zero,0(r2)
	IOWR_32DIRECT(MEM_BASE, emptyp, 0x1); // The fifo is empty at the start
     4f4:	d0a01317 	ldw	r2,-32692(gp)
     4f8:	1007883a 	mov	r3,r2
     4fc:	008000b4 	movhi	r2,2
     500:	10801204 	addi	r2,r2,72
     504:	1885883a 	add	r2,r3,r2
     508:	1007883a 	mov	r3,r2
     50c:	00800044 	movi	r2,1
     510:	18800035 	stwio	r2,0(r3)
	IOWR_32DIRECT(MEM_BASE, countp, 0x0); // The fifo is empty at the start
     514:	d0a01417 	ldw	r2,-32688(gp)
     518:	1007883a 	mov	r3,r2
     51c:	008000b4 	movhi	r2,2
     520:	10801204 	addi	r2,r2,72
     524:	1885883a 	add	r2,r3,r2
     528:	10000035 	stwio	zero,0(r2)
}
     52c:	e037883a 	mov	sp,fp
     530:	df000017 	ldw	fp,0(sp)
     534:	dec00104 	addi	sp,sp,4
     538:	f800283a 	ret

0000053c <main>:
void delay(int n);
int consumer();


int main()
{
     53c:	defffe04 	addi	sp,sp,-8
     540:	dfc00115 	stw	ra,4(sp)
     544:	df000015 	stw	fp,0(sp)
     548:	d839883a 	mov	fp,sp
	consumer();
     54c:	00005540 	call	554 <consumer>
	
	while(1) { }
     550:	003fff06 	br	550 <main+0x14>

00000554 <consumer>:
	return 0;
}


int consumer()
{
     554:	defffc04 	addi	sp,sp,-16
     558:	dfc00315 	stw	ra,12(sp)
     55c:	df000215 	stw	fp,8(sp)
     560:	df000204 	addi	fp,sp,8
	printf("Consumer starting..\n");
     564:	01000074 	movhi	r4,1
     568:	21000004 	addi	r4,r4,0
     56c:	00007440 	call	744 <puts>

	FIFO_1_INIT(); // Initialize the producer-consumer fifo
     570:	00004a40 	call	4a4 <FIFO_1_INIT>

	int j = 0;
     574:	e03fff15 	stw	zero,-4(fp)
	int k = 5;
     578:	00800144 	movi	r2,5
     57c:	e0bffe15 	stw	r2,-8(fp)
	while(k<500)
     580:	00000d06 	br	5b8 <consumer+0x64>
	{
		READ_FIFO_1(&j);  // Read from the producer-consumer fifo
     584:	e13fff04 	addi	r4,fp,-4
     588:	00003480 	call	348 <READ_FIFO_1>
		if(j==k)
     58c:	e0ffff17 	ldw	r3,-4(fp)
     590:	e0bffe17 	ldw	r2,-8(fp)
     594:	1880051e 	bne	r3,r2,5ac <consumer+0x58>
			printf("Consumer succefully received [%i]\t%x\n",j,readp);
     598:	e17fff17 	ldw	r5,-4(fp)
     59c:	d1a01117 	ldw	r6,-32700(gp)
     5a0:	01000074 	movhi	r4,1
     5a4:	21000504 	addi	r4,r4,20
     5a8:	000062c0 	call	62c <printf>

		k+=10;
     5ac:	e0bffe17 	ldw	r2,-8(fp)
     5b0:	10800284 	addi	r2,r2,10
     5b4:	e0bffe15 	stw	r2,-8(fp)

	FIFO_1_INIT(); // Initialize the producer-consumer fifo

	int j = 0;
	int k = 5;
	while(k<500)
     5b8:	e0bffe17 	ldw	r2,-8(fp)
     5bc:	10807d10 	cmplti	r2,r2,500
     5c0:	103ff01e 	bne	r2,zero,584 <consumer+0x30>
			printf("Consumer succefully received [%i]\t%x\n",j,readp);

		k+=10;
	}

	printf("Consumer finished..\n");
     5c4:	01000074 	movhi	r4,1
     5c8:	21000f04 	addi	r4,r4,60
     5cc:	00007440 	call	744 <puts>
	return 0;
     5d0:	0005883a 	mov	r2,zero
}
     5d4:	e037883a 	mov	sp,fp
     5d8:	dfc00117 	ldw	ra,4(sp)
     5dc:	df000017 	ldw	fp,0(sp)
     5e0:	dec00204 	addi	sp,sp,8
     5e4:	f800283a 	ret

000005e8 <delay>:


void delay(int n)
{
     5e8:	defffd04 	addi	sp,sp,-12
     5ec:	df000215 	stw	fp,8(sp)
     5f0:	df000204 	addi	fp,sp,8
     5f4:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i=n; i>0; i--)
     5f8:	e0bfff17 	ldw	r2,-4(fp)
     5fc:	e0bffe15 	stw	r2,-8(fp)
     600:	00000306 	br	610 <delay+0x28>
     604:	e0bffe17 	ldw	r2,-8(fp)
     608:	10bfffc4 	addi	r2,r2,-1
     60c:	e0bffe15 	stw	r2,-8(fp)
     610:	e0bffe17 	ldw	r2,-8(fp)
     614:	10800048 	cmpgei	r2,r2,1
     618:	103ffa1e 	bne	r2,zero,604 <delay+0x1c>
	{
		continue;
	}
}
     61c:	e037883a 	mov	sp,fp
     620:	df000017 	ldw	fp,0(sp)
     624:	dec00104 	addi	sp,sp,4
     628:	f800283a 	ret

0000062c <printf>:
     62c:	defffb04 	addi	sp,sp,-20
     630:	dfc00115 	stw	ra,4(sp)
     634:	d9400215 	stw	r5,8(sp)
     638:	d9800315 	stw	r6,12(sp)
     63c:	d9c00415 	stw	r7,16(sp)
     640:	00800074 	movhi	r2,1
     644:	10876c04 	addi	r2,r2,7600
     648:	10c00017 	ldw	r3,0(r2)
     64c:	200b883a 	mov	r5,r4
     650:	d8800204 	addi	r2,sp,8
     654:	19000217 	ldw	r4,8(r3)
     658:	100d883a 	mov	r6,r2
     65c:	d8800015 	stw	r2,0(sp)
     660:	00026d00 	call	26d0 <__vfprintf_internal>
     664:	dfc00117 	ldw	ra,4(sp)
     668:	dec00504 	addi	sp,sp,20
     66c:	f800283a 	ret

00000670 <_printf_r>:
     670:	defffc04 	addi	sp,sp,-16
     674:	dfc00115 	stw	ra,4(sp)
     678:	d9800215 	stw	r6,8(sp)
     67c:	d9c00315 	stw	r7,12(sp)
     680:	280d883a 	mov	r6,r5
     684:	21400217 	ldw	r5,8(r4)
     688:	d8c00204 	addi	r3,sp,8
     68c:	180f883a 	mov	r7,r3
     690:	d8c00015 	stw	r3,0(sp)
     694:	00008240 	call	824 <___vfprintf_internal_r>
     698:	dfc00117 	ldw	ra,4(sp)
     69c:	dec00404 	addi	sp,sp,16
     6a0:	f800283a 	ret

000006a4 <_puts_r>:
     6a4:	defff604 	addi	sp,sp,-40
     6a8:	dc400715 	stw	r17,28(sp)
     6ac:	2023883a 	mov	r17,r4
     6b0:	2809883a 	mov	r4,r5
     6b4:	dfc00915 	stw	ra,36(sp)
     6b8:	dcc00815 	stw	r19,32(sp)
     6bc:	2827883a 	mov	r19,r5
     6c0:	00007580 	call	758 <strlen>
     6c4:	89400217 	ldw	r5,8(r17)
     6c8:	00c00074 	movhi	r3,1
     6cc:	18c01404 	addi	r3,r3,80
     6d0:	01c00044 	movi	r7,1
     6d4:	12000044 	addi	r8,r2,1
     6d8:	d8c00515 	stw	r3,20(sp)
     6dc:	d9c00615 	stw	r7,24(sp)
     6e0:	d8c00304 	addi	r3,sp,12
     6e4:	01c00084 	movi	r7,2
     6e8:	8809883a 	mov	r4,r17
     6ec:	d80d883a 	mov	r6,sp
     6f0:	d8c00015 	stw	r3,0(sp)
     6f4:	dcc00315 	stw	r19,12(sp)
     6f8:	da000215 	stw	r8,8(sp)
     6fc:	d9c00115 	stw	r7,4(sp)
     700:	d8800415 	stw	r2,16(sp)
     704:	000492c0 	call	492c <__sfvwrite_r>
     708:	00ffffc4 	movi	r3,-1
     70c:	10000626 	beq	r2,zero,728 <_puts_r+0x84>
     710:	1805883a 	mov	r2,r3
     714:	dfc00917 	ldw	ra,36(sp)
     718:	dcc00817 	ldw	r19,32(sp)
     71c:	dc400717 	ldw	r17,28(sp)
     720:	dec00a04 	addi	sp,sp,40
     724:	f800283a 	ret
     728:	00c00284 	movi	r3,10
     72c:	1805883a 	mov	r2,r3
     730:	dfc00917 	ldw	ra,36(sp)
     734:	dcc00817 	ldw	r19,32(sp)
     738:	dc400717 	ldw	r17,28(sp)
     73c:	dec00a04 	addi	sp,sp,40
     740:	f800283a 	ret

00000744 <puts>:
     744:	00800074 	movhi	r2,1
     748:	10876c04 	addi	r2,r2,7600
     74c:	200b883a 	mov	r5,r4
     750:	11000017 	ldw	r4,0(r2)
     754:	00006a41 	jmpi	6a4 <_puts_r>

00000758 <strlen>:
     758:	208000cc 	andi	r2,r4,3
     75c:	2011883a 	mov	r8,r4
     760:	1000161e 	bne	r2,zero,7bc <strlen+0x64>
     764:	20c00017 	ldw	r3,0(r4)
     768:	017fbff4 	movhi	r5,65279
     76c:	297fbfc4 	addi	r5,r5,-257
     770:	01e02074 	movhi	r7,32897
     774:	39e02004 	addi	r7,r7,-32640
     778:	1945883a 	add	r2,r3,r5
     77c:	11c4703a 	and	r2,r2,r7
     780:	00c6303a 	nor	r3,zero,r3
     784:	1886703a 	and	r3,r3,r2
     788:	18000c1e 	bne	r3,zero,7bc <strlen+0x64>
     78c:	280d883a 	mov	r6,r5
     790:	380b883a 	mov	r5,r7
     794:	21000104 	addi	r4,r4,4
     798:	20800017 	ldw	r2,0(r4)
     79c:	1187883a 	add	r3,r2,r6
     7a0:	1946703a 	and	r3,r3,r5
     7a4:	0084303a 	nor	r2,zero,r2
     7a8:	10c4703a 	and	r2,r2,r3
     7ac:	103ff926 	beq	r2,zero,794 <strlen+0x3c>
     7b0:	20800007 	ldb	r2,0(r4)
     7b4:	10000326 	beq	r2,zero,7c4 <strlen+0x6c>
     7b8:	21000044 	addi	r4,r4,1
     7bc:	20800007 	ldb	r2,0(r4)
     7c0:	103ffd1e 	bne	r2,zero,7b8 <strlen+0x60>
     7c4:	2205c83a 	sub	r2,r4,r8
     7c8:	f800283a 	ret

000007cc <__sprint_r>:
     7cc:	30800217 	ldw	r2,8(r6)
     7d0:	defffe04 	addi	sp,sp,-8
     7d4:	dc000015 	stw	r16,0(sp)
     7d8:	dfc00115 	stw	ra,4(sp)
     7dc:	3021883a 	mov	r16,r6
     7e0:	0007883a 	mov	r3,zero
     7e4:	1000061e 	bne	r2,zero,800 <__sprint_r+0x34>
     7e8:	1805883a 	mov	r2,r3
     7ec:	30000115 	stw	zero,4(r6)
     7f0:	dfc00117 	ldw	ra,4(sp)
     7f4:	dc000017 	ldw	r16,0(sp)
     7f8:	dec00204 	addi	sp,sp,8
     7fc:	f800283a 	ret
     800:	000492c0 	call	492c <__sfvwrite_r>
     804:	1007883a 	mov	r3,r2
     808:	1805883a 	mov	r2,r3
     80c:	80000115 	stw	zero,4(r16)
     810:	80000215 	stw	zero,8(r16)
     814:	dfc00117 	ldw	ra,4(sp)
     818:	dc000017 	ldw	r16,0(sp)
     81c:	dec00204 	addi	sp,sp,8
     820:	f800283a 	ret

00000824 <___vfprintf_internal_r>:
     824:	defea404 	addi	sp,sp,-1392
     828:	dd815815 	stw	r22,1376(sp)
     82c:	dc015215 	stw	r16,1352(sp)
     830:	d9c15115 	stw	r7,1348(sp)
     834:	dfc15b15 	stw	ra,1388(sp)
     838:	df015a15 	stw	fp,1384(sp)
     83c:	ddc15915 	stw	r23,1380(sp)
     840:	dd415715 	stw	r21,1372(sp)
     844:	dd015615 	stw	r20,1368(sp)
     848:	dcc15515 	stw	r19,1364(sp)
     84c:	dc815415 	stw	r18,1360(sp)
     850:	dc415315 	stw	r17,1356(sp)
     854:	282d883a 	mov	r22,r5
     858:	3021883a 	mov	r16,r6
     85c:	d9014f15 	stw	r4,1340(sp)
     860:	0004f500 	call	4f50 <_localeconv_r>
     864:	10800017 	ldw	r2,0(r2)
     868:	d9c15117 	ldw	r7,1348(sp)
     86c:	d8814915 	stw	r2,1316(sp)
     870:	d8814f17 	ldw	r2,1340(sp)
     874:	10000226 	beq	r2,zero,880 <___vfprintf_internal_r+0x5c>
     878:	10800e17 	ldw	r2,56(r2)
     87c:	10020d26 	beq	r2,zero,10b4 <___vfprintf_internal_r+0x890>
     880:	b080030b 	ldhu	r2,12(r22)
     884:	1080020c 	andi	r2,r2,8
     888:	10020e26 	beq	r2,zero,10c4 <___vfprintf_internal_r+0x8a0>
     88c:	b0800417 	ldw	r2,16(r22)
     890:	10020c26 	beq	r2,zero,10c4 <___vfprintf_internal_r+0x8a0>
     894:	b200030b 	ldhu	r8,12(r22)
     898:	00800284 	movi	r2,10
     89c:	40c0068c 	andi	r3,r8,26
     8a0:	18802f1e 	bne	r3,r2,960 <___vfprintf_internal_r+0x13c>
     8a4:	b080038f 	ldh	r2,14(r22)
     8a8:	10002d16 	blt	r2,zero,960 <___vfprintf_internal_r+0x13c>
     8ac:	b240038b 	ldhu	r9,14(r22)
     8b0:	b2800717 	ldw	r10,28(r22)
     8b4:	b2c00917 	ldw	r11,36(r22)
     8b8:	d9014f17 	ldw	r4,1340(sp)
     8bc:	dc402904 	addi	r17,sp,164
     8c0:	d8804004 	addi	r2,sp,256
     8c4:	00c10004 	movi	r3,1024
     8c8:	423fff4c 	andi	r8,r8,65533
     8cc:	800d883a 	mov	r6,r16
     8d0:	880b883a 	mov	r5,r17
     8d4:	da002c0d 	sth	r8,176(sp)
     8d8:	da402c8d 	sth	r9,178(sp)
     8dc:	da803015 	stw	r10,192(sp)
     8e0:	dac03215 	stw	r11,200(sp)
     8e4:	d8802d15 	stw	r2,180(sp)
     8e8:	d8c02e15 	stw	r3,184(sp)
     8ec:	d8802915 	stw	r2,164(sp)
     8f0:	d8c02b15 	stw	r3,172(sp)
     8f4:	d8002f15 	stw	zero,188(sp)
     8f8:	00008240 	call	824 <___vfprintf_internal_r>
     8fc:	d8814b15 	stw	r2,1324(sp)
     900:	10000416 	blt	r2,zero,914 <___vfprintf_internal_r+0xf0>
     904:	d9014f17 	ldw	r4,1340(sp)
     908:	880b883a 	mov	r5,r17
     90c:	0003ffc0 	call	3ffc <_fflush_r>
     910:	1002321e 	bne	r2,zero,11dc <___vfprintf_internal_r+0x9b8>
     914:	d8802c0b 	ldhu	r2,176(sp)
     918:	1080100c 	andi	r2,r2,64
     91c:	10000326 	beq	r2,zero,92c <___vfprintf_internal_r+0x108>
     920:	b080030b 	ldhu	r2,12(r22)
     924:	10801014 	ori	r2,r2,64
     928:	b080030d 	sth	r2,12(r22)
     92c:	d8814b17 	ldw	r2,1324(sp)
     930:	dfc15b17 	ldw	ra,1388(sp)
     934:	df015a17 	ldw	fp,1384(sp)
     938:	ddc15917 	ldw	r23,1380(sp)
     93c:	dd815817 	ldw	r22,1376(sp)
     940:	dd415717 	ldw	r21,1372(sp)
     944:	dd015617 	ldw	r20,1368(sp)
     948:	dcc15517 	ldw	r19,1364(sp)
     94c:	dc815417 	ldw	r18,1360(sp)
     950:	dc415317 	ldw	r17,1356(sp)
     954:	dc015217 	ldw	r16,1352(sp)
     958:	dec15c04 	addi	sp,sp,1392
     95c:	f800283a 	ret
     960:	0005883a 	mov	r2,zero
     964:	0007883a 	mov	r3,zero
     968:	dd401904 	addi	r21,sp,100
     96c:	d8814215 	stw	r2,1288(sp)
     970:	802f883a 	mov	r23,r16
     974:	d8c14315 	stw	r3,1292(sp)
     978:	d8014b15 	stw	zero,1324(sp)
     97c:	d8014815 	stw	zero,1312(sp)
     980:	d8014415 	stw	zero,1296(sp)
     984:	d8014715 	stw	zero,1308(sp)
     988:	dd400c15 	stw	r21,48(sp)
     98c:	d8000e15 	stw	zero,56(sp)
     990:	d8000d15 	stw	zero,52(sp)
     994:	b8800007 	ldb	r2,0(r23)
     998:	10001926 	beq	r2,zero,a00 <___vfprintf_internal_r+0x1dc>
     99c:	00c00944 	movi	r3,37
     9a0:	10c01726 	beq	r2,r3,a00 <___vfprintf_internal_r+0x1dc>
     9a4:	b821883a 	mov	r16,r23
     9a8:	00000106 	br	9b0 <___vfprintf_internal_r+0x18c>
     9ac:	10c00326 	beq	r2,r3,9bc <___vfprintf_internal_r+0x198>
     9b0:	84000044 	addi	r16,r16,1
     9b4:	80800007 	ldb	r2,0(r16)
     9b8:	103ffc1e 	bne	r2,zero,9ac <___vfprintf_internal_r+0x188>
     9bc:	85e7c83a 	sub	r19,r16,r23
     9c0:	98000e26 	beq	r19,zero,9fc <___vfprintf_internal_r+0x1d8>
     9c4:	dc800e17 	ldw	r18,56(sp)
     9c8:	dc400d17 	ldw	r17,52(sp)
     9cc:	008001c4 	movi	r2,7
     9d0:	94e5883a 	add	r18,r18,r19
     9d4:	8c400044 	addi	r17,r17,1
     9d8:	adc00015 	stw	r23,0(r21)
     9dc:	dc800e15 	stw	r18,56(sp)
     9e0:	acc00115 	stw	r19,4(r21)
     9e4:	dc400d15 	stw	r17,52(sp)
     9e8:	14428b16 	blt	r2,r17,1418 <___vfprintf_internal_r+0xbf4>
     9ec:	ad400204 	addi	r21,r21,8
     9f0:	d9014b17 	ldw	r4,1324(sp)
     9f4:	24c9883a 	add	r4,r4,r19
     9f8:	d9014b15 	stw	r4,1324(sp)
     9fc:	802f883a 	mov	r23,r16
     a00:	b8800007 	ldb	r2,0(r23)
     a04:	10013c26 	beq	r2,zero,ef8 <___vfprintf_internal_r+0x6d4>
     a08:	bdc00044 	addi	r23,r23,1
     a0c:	d8000405 	stb	zero,16(sp)
     a10:	b8c00007 	ldb	r3,0(r23)
     a14:	04ffffc4 	movi	r19,-1
     a18:	d8014c15 	stw	zero,1328(sp)
     a1c:	d8014a15 	stw	zero,1320(sp)
     a20:	d8c14d15 	stw	r3,1332(sp)
     a24:	bdc00044 	addi	r23,r23,1
     a28:	d9414d17 	ldw	r5,1332(sp)
     a2c:	00801604 	movi	r2,88
     a30:	28fff804 	addi	r3,r5,-32
     a34:	10c06036 	bltu	r2,r3,bb8 <___vfprintf_internal_r+0x394>
     a38:	18c5883a 	add	r2,r3,r3
     a3c:	1085883a 	add	r2,r2,r2
     a40:	00c00034 	movhi	r3,0
     a44:	18c29504 	addi	r3,r3,2644
     a48:	10c5883a 	add	r2,r2,r3
     a4c:	11000017 	ldw	r4,0(r2)
     a50:	2000683a 	jmp	r4
     a54:	000019c8 	cmpgei	zero,zero,103
     a58:	00000bb8 	rdprs	zero,zero,46
     a5c:	00000bb8 	rdprs	zero,zero,46
     a60:	000019b4 	movhi	zero,102
     a64:	00000bb8 	rdprs	zero,zero,46
     a68:	00000bb8 	rdprs	zero,zero,46
     a6c:	00000bb8 	rdprs	zero,zero,46
     a70:	00000bb8 	rdprs	zero,zero,46
     a74:	00000bb8 	rdprs	zero,zero,46
     a78:	00000bb8 	rdprs	zero,zero,46
     a7c:	00001794 	movui	zero,94
     a80:	000019a4 	muli	zero,zero,102
     a84:	00000bb8 	rdprs	zero,zero,46
     a88:	000017ac 	andhi	zero,zero,94
     a8c:	00001a40 	call	1a4 <alt_irq_handler+0xb8>
     a90:	00000bb8 	rdprs	zero,zero,46
     a94:	00001a2c 	andhi	zero,zero,104
     a98:	000019f4 	movhi	zero,103
     a9c:	000019f4 	movhi	zero,103
     aa0:	000019f4 	movhi	zero,103
     aa4:	000019f4 	movhi	zero,103
     aa8:	000019f4 	movhi	zero,103
     aac:	000019f4 	movhi	zero,103
     ab0:	000019f4 	movhi	zero,103
     ab4:	000019f4 	movhi	zero,103
     ab8:	000019f4 	movhi	zero,103
     abc:	00000bb8 	rdprs	zero,zero,46
     ac0:	00000bb8 	rdprs	zero,zero,46
     ac4:	00000bb8 	rdprs	zero,zero,46
     ac8:	00000bb8 	rdprs	zero,zero,46
     acc:	00000bb8 	rdprs	zero,zero,46
     ad0:	00000bb8 	rdprs	zero,zero,46
     ad4:	00000bb8 	rdprs	zero,zero,46
     ad8:	00000bb8 	rdprs	zero,zero,46
     adc:	00000bb8 	rdprs	zero,zero,46
     ae0:	00000bb8 	rdprs	zero,zero,46
     ae4:	00001210 	cmplti	zero,zero,72
     ae8:	0000187c 	xorhi	zero,zero,97
     aec:	00000bb8 	rdprs	zero,zero,46
     af0:	0000187c 	xorhi	zero,zero,97
     af4:	00000bb8 	rdprs	zero,zero,46
     af8:	00000bb8 	rdprs	zero,zero,46
     afc:	00000bb8 	rdprs	zero,zero,46
     b00:	00000bb8 	rdprs	zero,zero,46
     b04:	000019e0 	cmpeqi	zero,zero,103
     b08:	00000bb8 	rdprs	zero,zero,46
     b0c:	00000bb8 	rdprs	zero,zero,46
     b10:	000012c4 	movi	zero,75
     b14:	00000bb8 	rdprs	zero,zero,46
     b18:	00000bb8 	rdprs	zero,zero,46
     b1c:	00000bb8 	rdprs	zero,zero,46
     b20:	00000bb8 	rdprs	zero,zero,46
     b24:	00000bb8 	rdprs	zero,zero,46
     b28:	00001310 	cmplti	zero,zero,76
     b2c:	00000bb8 	rdprs	zero,zero,46
     b30:	00000bb8 	rdprs	zero,zero,46
     b34:	00001930 	cmpltui	zero,zero,100
     b38:	00000bb8 	rdprs	zero,zero,46
     b3c:	00000bb8 	rdprs	zero,zero,46
     b40:	00000bb8 	rdprs	zero,zero,46
     b44:	00000bb8 	rdprs	zero,zero,46
     b48:	00000bb8 	rdprs	zero,zero,46
     b4c:	00000bb8 	rdprs	zero,zero,46
     b50:	00000bb8 	rdprs	zero,zero,46
     b54:	00000bb8 	rdprs	zero,zero,46
     b58:	00000bb8 	rdprs	zero,zero,46
     b5c:	00000bb8 	rdprs	zero,zero,46
     b60:	00001904 	movi	zero,100
     b64:	0000121c 	xori	zero,zero,72
     b68:	0000187c 	xorhi	zero,zero,97
     b6c:	0000187c 	xorhi	zero,zero,97
     b70:	0000187c 	xorhi	zero,zero,97
     b74:	00001868 	cmpgeui	zero,zero,97
     b78:	0000121c 	xori	zero,zero,72
     b7c:	00000bb8 	rdprs	zero,zero,46
     b80:	00000bb8 	rdprs	zero,zero,46
     b84:	000017f0 	cmpltui	zero,zero,95
     b88:	00000bb8 	rdprs	zero,zero,46
     b8c:	000017c0 	call	17c <alt_irq_handler+0x90>
     b90:	000012d0 	cmplti	zero,zero,75
     b94:	00001820 	cmpeqi	zero,zero,96
     b98:	0000180c 	andi	zero,zero,96
     b9c:	00000bb8 	rdprs	zero,zero,46
     ba0:	00001a9c 	xori	zero,zero,106
     ba4:	00000bb8 	rdprs	zero,zero,46
     ba8:	0000131c 	xori	zero,zero,76
     bac:	00000bb8 	rdprs	zero,zero,46
     bb0:	00000bb8 	rdprs	zero,zero,46
     bb4:	00001994 	movui	zero,102
     bb8:	d9014d17 	ldw	r4,1332(sp)
     bbc:	2000ce26 	beq	r4,zero,ef8 <___vfprintf_internal_r+0x6d4>
     bc0:	01400044 	movi	r5,1
     bc4:	d9800f04 	addi	r6,sp,60
     bc8:	d9c14015 	stw	r7,1280(sp)
     bcc:	d9414515 	stw	r5,1300(sp)
     bd0:	d9814115 	stw	r6,1284(sp)
     bd4:	280f883a 	mov	r7,r5
     bd8:	d9000f05 	stb	r4,60(sp)
     bdc:	d8000405 	stb	zero,16(sp)
     be0:	d8014615 	stw	zero,1304(sp)
     be4:	d8c14c17 	ldw	r3,1328(sp)
     be8:	1880008c 	andi	r2,r3,2
     bec:	1005003a 	cmpeq	r2,r2,zero
     bf0:	d8815015 	stw	r2,1344(sp)
     bf4:	1000031e 	bne	r2,zero,c04 <___vfprintf_internal_r+0x3e0>
     bf8:	d9014517 	ldw	r4,1300(sp)
     bfc:	21000084 	addi	r4,r4,2
     c00:	d9014515 	stw	r4,1300(sp)
     c04:	d9414c17 	ldw	r5,1328(sp)
     c08:	2940210c 	andi	r5,r5,132
     c0c:	d9414e15 	stw	r5,1336(sp)
     c10:	28002d1e 	bne	r5,zero,cc8 <___vfprintf_internal_r+0x4a4>
     c14:	d9814a17 	ldw	r6,1320(sp)
     c18:	d8814517 	ldw	r2,1300(sp)
     c1c:	30a1c83a 	sub	r16,r6,r2
     c20:	0400290e 	bge	zero,r16,cc8 <___vfprintf_internal_r+0x4a4>
     c24:	00800404 	movi	r2,16
     c28:	1404580e 	bge	r2,r16,1d8c <___vfprintf_internal_r+0x1568>
     c2c:	dc800e17 	ldw	r18,56(sp)
     c30:	dc400d17 	ldw	r17,52(sp)
     c34:	1027883a 	mov	r19,r2
     c38:	07000074 	movhi	fp,1
     c3c:	e7003084 	addi	fp,fp,194
     c40:	050001c4 	movi	r20,7
     c44:	00000306 	br	c54 <___vfprintf_internal_r+0x430>
     c48:	843ffc04 	addi	r16,r16,-16
     c4c:	ad400204 	addi	r21,r21,8
     c50:	9c00130e 	bge	r19,r16,ca0 <___vfprintf_internal_r+0x47c>
     c54:	94800404 	addi	r18,r18,16
     c58:	8c400044 	addi	r17,r17,1
     c5c:	af000015 	stw	fp,0(r21)
     c60:	acc00115 	stw	r19,4(r21)
     c64:	dc800e15 	stw	r18,56(sp)
     c68:	dc400d15 	stw	r17,52(sp)
     c6c:	a47ff60e 	bge	r20,r17,c48 <___vfprintf_internal_r+0x424>
     c70:	d9014f17 	ldw	r4,1340(sp)
     c74:	b00b883a 	mov	r5,r22
     c78:	d9800c04 	addi	r6,sp,48
     c7c:	d9c15115 	stw	r7,1348(sp)
     c80:	00007cc0 	call	7cc <__sprint_r>
     c84:	d9c15117 	ldw	r7,1348(sp)
     c88:	10009e1e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
     c8c:	843ffc04 	addi	r16,r16,-16
     c90:	dc800e17 	ldw	r18,56(sp)
     c94:	dc400d17 	ldw	r17,52(sp)
     c98:	dd401904 	addi	r21,sp,100
     c9c:	9c3fed16 	blt	r19,r16,c54 <___vfprintf_internal_r+0x430>
     ca0:	9425883a 	add	r18,r18,r16
     ca4:	8c400044 	addi	r17,r17,1
     ca8:	008001c4 	movi	r2,7
     cac:	af000015 	stw	fp,0(r21)
     cb0:	ac000115 	stw	r16,4(r21)
     cb4:	dc800e15 	stw	r18,56(sp)
     cb8:	dc400d15 	stw	r17,52(sp)
     cbc:	1441f516 	blt	r2,r17,1494 <___vfprintf_internal_r+0xc70>
     cc0:	ad400204 	addi	r21,r21,8
     cc4:	00000206 	br	cd0 <___vfprintf_internal_r+0x4ac>
     cc8:	dc800e17 	ldw	r18,56(sp)
     ccc:	dc400d17 	ldw	r17,52(sp)
     cd0:	d8800407 	ldb	r2,16(sp)
     cd4:	10000b26 	beq	r2,zero,d04 <___vfprintf_internal_r+0x4e0>
     cd8:	00800044 	movi	r2,1
     cdc:	94800044 	addi	r18,r18,1
     ce0:	8c400044 	addi	r17,r17,1
     ce4:	a8800115 	stw	r2,4(r21)
     ce8:	d8c00404 	addi	r3,sp,16
     cec:	008001c4 	movi	r2,7
     cf0:	a8c00015 	stw	r3,0(r21)
     cf4:	dc800e15 	stw	r18,56(sp)
     cf8:	dc400d15 	stw	r17,52(sp)
     cfc:	1441da16 	blt	r2,r17,1468 <___vfprintf_internal_r+0xc44>
     d00:	ad400204 	addi	r21,r21,8
     d04:	d9015017 	ldw	r4,1344(sp)
     d08:	20000b1e 	bne	r4,zero,d38 <___vfprintf_internal_r+0x514>
     d0c:	d8800444 	addi	r2,sp,17
     d10:	94800084 	addi	r18,r18,2
     d14:	8c400044 	addi	r17,r17,1
     d18:	a8800015 	stw	r2,0(r21)
     d1c:	00c00084 	movi	r3,2
     d20:	008001c4 	movi	r2,7
     d24:	a8c00115 	stw	r3,4(r21)
     d28:	dc800e15 	stw	r18,56(sp)
     d2c:	dc400d15 	stw	r17,52(sp)
     d30:	1441c216 	blt	r2,r17,143c <___vfprintf_internal_r+0xc18>
     d34:	ad400204 	addi	r21,r21,8
     d38:	d9414e17 	ldw	r5,1336(sp)
     d3c:	00802004 	movi	r2,128
     d40:	2880b126 	beq	r5,r2,1008 <___vfprintf_internal_r+0x7e4>
     d44:	d8c14617 	ldw	r3,1304(sp)
     d48:	19e1c83a 	sub	r16,r3,r7
     d4c:	0400260e 	bge	zero,r16,de8 <___vfprintf_internal_r+0x5c4>
     d50:	00800404 	movi	r2,16
     d54:	1403c90e 	bge	r2,r16,1c7c <___vfprintf_internal_r+0x1458>
     d58:	1027883a 	mov	r19,r2
     d5c:	07000074 	movhi	fp,1
     d60:	e7002c84 	addi	fp,fp,178
     d64:	050001c4 	movi	r20,7
     d68:	00000306 	br	d78 <___vfprintf_internal_r+0x554>
     d6c:	843ffc04 	addi	r16,r16,-16
     d70:	ad400204 	addi	r21,r21,8
     d74:	9c00130e 	bge	r19,r16,dc4 <___vfprintf_internal_r+0x5a0>
     d78:	94800404 	addi	r18,r18,16
     d7c:	8c400044 	addi	r17,r17,1
     d80:	af000015 	stw	fp,0(r21)
     d84:	acc00115 	stw	r19,4(r21)
     d88:	dc800e15 	stw	r18,56(sp)
     d8c:	dc400d15 	stw	r17,52(sp)
     d90:	a47ff60e 	bge	r20,r17,d6c <___vfprintf_internal_r+0x548>
     d94:	d9014f17 	ldw	r4,1340(sp)
     d98:	b00b883a 	mov	r5,r22
     d9c:	d9800c04 	addi	r6,sp,48
     da0:	d9c15115 	stw	r7,1348(sp)
     da4:	00007cc0 	call	7cc <__sprint_r>
     da8:	d9c15117 	ldw	r7,1348(sp)
     dac:	1000551e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
     db0:	843ffc04 	addi	r16,r16,-16
     db4:	dc800e17 	ldw	r18,56(sp)
     db8:	dc400d17 	ldw	r17,52(sp)
     dbc:	dd401904 	addi	r21,sp,100
     dc0:	9c3fed16 	blt	r19,r16,d78 <___vfprintf_internal_r+0x554>
     dc4:	9425883a 	add	r18,r18,r16
     dc8:	8c400044 	addi	r17,r17,1
     dcc:	008001c4 	movi	r2,7
     dd0:	af000015 	stw	fp,0(r21)
     dd4:	ac000115 	stw	r16,4(r21)
     dd8:	dc800e15 	stw	r18,56(sp)
     ddc:	dc400d15 	stw	r17,52(sp)
     de0:	14418216 	blt	r2,r17,13ec <___vfprintf_internal_r+0xbc8>
     de4:	ad400204 	addi	r21,r21,8
     de8:	d9014c17 	ldw	r4,1328(sp)
     dec:	2080400c 	andi	r2,r4,256
     df0:	10004a1e 	bne	r2,zero,f1c <___vfprintf_internal_r+0x6f8>
     df4:	d9414117 	ldw	r5,1284(sp)
     df8:	91e5883a 	add	r18,r18,r7
     dfc:	8c400044 	addi	r17,r17,1
     e00:	008001c4 	movi	r2,7
     e04:	a9400015 	stw	r5,0(r21)
     e08:	a9c00115 	stw	r7,4(r21)
     e0c:	dc800e15 	stw	r18,56(sp)
     e10:	dc400d15 	stw	r17,52(sp)
     e14:	14416716 	blt	r2,r17,13b4 <___vfprintf_internal_r+0xb90>
     e18:	a8c00204 	addi	r3,r21,8
     e1c:	d9814c17 	ldw	r6,1328(sp)
     e20:	3080010c 	andi	r2,r6,4
     e24:	10002826 	beq	r2,zero,ec8 <___vfprintf_internal_r+0x6a4>
     e28:	d8814a17 	ldw	r2,1320(sp)
     e2c:	d9014517 	ldw	r4,1300(sp)
     e30:	1121c83a 	sub	r16,r2,r4
     e34:	0400240e 	bge	zero,r16,ec8 <___vfprintf_internal_r+0x6a4>
     e38:	00800404 	movi	r2,16
     e3c:	14044f0e 	bge	r2,r16,1f7c <___vfprintf_internal_r+0x1758>
     e40:	dc400d17 	ldw	r17,52(sp)
     e44:	1027883a 	mov	r19,r2
     e48:	07000074 	movhi	fp,1
     e4c:	e7003084 	addi	fp,fp,194
     e50:	050001c4 	movi	r20,7
     e54:	00000306 	br	e64 <___vfprintf_internal_r+0x640>
     e58:	843ffc04 	addi	r16,r16,-16
     e5c:	18c00204 	addi	r3,r3,8
     e60:	9c00110e 	bge	r19,r16,ea8 <___vfprintf_internal_r+0x684>
     e64:	94800404 	addi	r18,r18,16
     e68:	8c400044 	addi	r17,r17,1
     e6c:	1f000015 	stw	fp,0(r3)
     e70:	1cc00115 	stw	r19,4(r3)
     e74:	dc800e15 	stw	r18,56(sp)
     e78:	dc400d15 	stw	r17,52(sp)
     e7c:	a47ff60e 	bge	r20,r17,e58 <___vfprintf_internal_r+0x634>
     e80:	d9014f17 	ldw	r4,1340(sp)
     e84:	b00b883a 	mov	r5,r22
     e88:	d9800c04 	addi	r6,sp,48
     e8c:	00007cc0 	call	7cc <__sprint_r>
     e90:	10001c1e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
     e94:	843ffc04 	addi	r16,r16,-16
     e98:	dc800e17 	ldw	r18,56(sp)
     e9c:	dc400d17 	ldw	r17,52(sp)
     ea0:	d8c01904 	addi	r3,sp,100
     ea4:	9c3fef16 	blt	r19,r16,e64 <___vfprintf_internal_r+0x640>
     ea8:	9425883a 	add	r18,r18,r16
     eac:	8c400044 	addi	r17,r17,1
     eb0:	008001c4 	movi	r2,7
     eb4:	1f000015 	stw	fp,0(r3)
     eb8:	1c000115 	stw	r16,4(r3)
     ebc:	dc800e15 	stw	r18,56(sp)
     ec0:	dc400d15 	stw	r17,52(sp)
     ec4:	1440cb16 	blt	r2,r17,11f4 <___vfprintf_internal_r+0x9d0>
     ec8:	d8814a17 	ldw	r2,1320(sp)
     ecc:	d9414517 	ldw	r5,1300(sp)
     ed0:	1140010e 	bge	r2,r5,ed8 <___vfprintf_internal_r+0x6b4>
     ed4:	2805883a 	mov	r2,r5
     ed8:	d9814b17 	ldw	r6,1324(sp)
     edc:	308d883a 	add	r6,r6,r2
     ee0:	d9814b15 	stw	r6,1324(sp)
     ee4:	90013b1e 	bne	r18,zero,13d4 <___vfprintf_internal_r+0xbb0>
     ee8:	d9c14017 	ldw	r7,1280(sp)
     eec:	dd401904 	addi	r21,sp,100
     ef0:	d8000d15 	stw	zero,52(sp)
     ef4:	003ea706 	br	994 <___vfprintf_internal_r+0x170>
     ef8:	d8800e17 	ldw	r2,56(sp)
     efc:	10053f1e 	bne	r2,zero,23fc <___vfprintf_internal_r+0x1bd8>
     f00:	d8000d15 	stw	zero,52(sp)
     f04:	b080030b 	ldhu	r2,12(r22)
     f08:	1080100c 	andi	r2,r2,64
     f0c:	103e8726 	beq	r2,zero,92c <___vfprintf_internal_r+0x108>
     f10:	00bfffc4 	movi	r2,-1
     f14:	d8814b15 	stw	r2,1324(sp)
     f18:	003e8406 	br	92c <___vfprintf_internal_r+0x108>
     f1c:	d9814d17 	ldw	r6,1332(sp)
     f20:	00801944 	movi	r2,101
     f24:	11806e16 	blt	r2,r6,10e0 <___vfprintf_internal_r+0x8bc>
     f28:	d9414717 	ldw	r5,1308(sp)
     f2c:	00c00044 	movi	r3,1
     f30:	1943430e 	bge	r3,r5,1c40 <___vfprintf_internal_r+0x141c>
     f34:	d8814117 	ldw	r2,1284(sp)
     f38:	94800044 	addi	r18,r18,1
     f3c:	8c400044 	addi	r17,r17,1
     f40:	a8800015 	stw	r2,0(r21)
     f44:	008001c4 	movi	r2,7
     f48:	a8c00115 	stw	r3,4(r21)
     f4c:	dc800e15 	stw	r18,56(sp)
     f50:	dc400d15 	stw	r17,52(sp)
     f54:	1441ca16 	blt	r2,r17,1680 <___vfprintf_internal_r+0xe5c>
     f58:	a8c00204 	addi	r3,r21,8
     f5c:	d9014917 	ldw	r4,1316(sp)
     f60:	00800044 	movi	r2,1
     f64:	94800044 	addi	r18,r18,1
     f68:	8c400044 	addi	r17,r17,1
     f6c:	18800115 	stw	r2,4(r3)
     f70:	008001c4 	movi	r2,7
     f74:	19000015 	stw	r4,0(r3)
     f78:	dc800e15 	stw	r18,56(sp)
     f7c:	dc400d15 	stw	r17,52(sp)
     f80:	1441b616 	blt	r2,r17,165c <___vfprintf_internal_r+0xe38>
     f84:	1cc00204 	addi	r19,r3,8
     f88:	d9014217 	ldw	r4,1288(sp)
     f8c:	d9414317 	ldw	r5,1292(sp)
     f90:	000d883a 	mov	r6,zero
     f94:	000f883a 	mov	r7,zero
     f98:	00090740 	call	9074 <__nedf2>
     f9c:	10017426 	beq	r2,zero,1570 <___vfprintf_internal_r+0xd4c>
     fa0:	d9414717 	ldw	r5,1308(sp)
     fa4:	d9814117 	ldw	r6,1284(sp)
     fa8:	8c400044 	addi	r17,r17,1
     fac:	2c85883a 	add	r2,r5,r18
     fb0:	14bfffc4 	addi	r18,r2,-1
     fb4:	28bfffc4 	addi	r2,r5,-1
     fb8:	30c00044 	addi	r3,r6,1
     fbc:	98800115 	stw	r2,4(r19)
     fc0:	008001c4 	movi	r2,7
     fc4:	98c00015 	stw	r3,0(r19)
     fc8:	dc800e15 	stw	r18,56(sp)
     fcc:	dc400d15 	stw	r17,52(sp)
     fd0:	14418e16 	blt	r2,r17,160c <___vfprintf_internal_r+0xde8>
     fd4:	9cc00204 	addi	r19,r19,8
     fd8:	d9414817 	ldw	r5,1312(sp)
     fdc:	d8800804 	addi	r2,sp,32
     fe0:	8c400044 	addi	r17,r17,1
     fe4:	9165883a 	add	r18,r18,r5
     fe8:	98800015 	stw	r2,0(r19)
     fec:	008001c4 	movi	r2,7
     ff0:	99400115 	stw	r5,4(r19)
     ff4:	dc800e15 	stw	r18,56(sp)
     ff8:	dc400d15 	stw	r17,52(sp)
     ffc:	1440ed16 	blt	r2,r17,13b4 <___vfprintf_internal_r+0xb90>
    1000:	98c00204 	addi	r3,r19,8
    1004:	003f8506 	br	e1c <___vfprintf_internal_r+0x5f8>
    1008:	d9814a17 	ldw	r6,1320(sp)
    100c:	d8814517 	ldw	r2,1300(sp)
    1010:	30a1c83a 	sub	r16,r6,r2
    1014:	043f4b0e 	bge	zero,r16,d44 <___vfprintf_internal_r+0x520>
    1018:	00800404 	movi	r2,16
    101c:	1404340e 	bge	r2,r16,20f0 <___vfprintf_internal_r+0x18cc>
    1020:	1027883a 	mov	r19,r2
    1024:	07000074 	movhi	fp,1
    1028:	e7002c84 	addi	fp,fp,178
    102c:	050001c4 	movi	r20,7
    1030:	00000306 	br	1040 <___vfprintf_internal_r+0x81c>
    1034:	843ffc04 	addi	r16,r16,-16
    1038:	ad400204 	addi	r21,r21,8
    103c:	9c00130e 	bge	r19,r16,108c <___vfprintf_internal_r+0x868>
    1040:	94800404 	addi	r18,r18,16
    1044:	8c400044 	addi	r17,r17,1
    1048:	af000015 	stw	fp,0(r21)
    104c:	acc00115 	stw	r19,4(r21)
    1050:	dc800e15 	stw	r18,56(sp)
    1054:	dc400d15 	stw	r17,52(sp)
    1058:	a47ff60e 	bge	r20,r17,1034 <___vfprintf_internal_r+0x810>
    105c:	d9014f17 	ldw	r4,1340(sp)
    1060:	b00b883a 	mov	r5,r22
    1064:	d9800c04 	addi	r6,sp,48
    1068:	d9c15115 	stw	r7,1348(sp)
    106c:	00007cc0 	call	7cc <__sprint_r>
    1070:	d9c15117 	ldw	r7,1348(sp)
    1074:	103fa31e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
    1078:	843ffc04 	addi	r16,r16,-16
    107c:	dc800e17 	ldw	r18,56(sp)
    1080:	dc400d17 	ldw	r17,52(sp)
    1084:	dd401904 	addi	r21,sp,100
    1088:	9c3fed16 	blt	r19,r16,1040 <___vfprintf_internal_r+0x81c>
    108c:	9425883a 	add	r18,r18,r16
    1090:	8c400044 	addi	r17,r17,1
    1094:	008001c4 	movi	r2,7
    1098:	af000015 	stw	fp,0(r21)
    109c:	ac000115 	stw	r16,4(r21)
    10a0:	dc800e15 	stw	r18,56(sp)
    10a4:	dc400d15 	stw	r17,52(sp)
    10a8:	14416116 	blt	r2,r17,1630 <___vfprintf_internal_r+0xe0c>
    10ac:	ad400204 	addi	r21,r21,8
    10b0:	003f2406 	br	d44 <___vfprintf_internal_r+0x520>
    10b4:	d9014f17 	ldw	r4,1340(sp)
    10b8:	00042940 	call	4294 <__sinit>
    10bc:	d9c15117 	ldw	r7,1348(sp)
    10c0:	003def06 	br	880 <___vfprintf_internal_r+0x5c>
    10c4:	d9014f17 	ldw	r4,1340(sp)
    10c8:	b00b883a 	mov	r5,r22
    10cc:	d9c15115 	stw	r7,1348(sp)
    10d0:	00026f40 	call	26f4 <__swsetup_r>
    10d4:	d9c15117 	ldw	r7,1348(sp)
    10d8:	103dee26 	beq	r2,zero,894 <___vfprintf_internal_r+0x70>
    10dc:	003f8c06 	br	f10 <___vfprintf_internal_r+0x6ec>
    10e0:	d9014217 	ldw	r4,1288(sp)
    10e4:	d9414317 	ldw	r5,1292(sp)
    10e8:	000d883a 	mov	r6,zero
    10ec:	000f883a 	mov	r7,zero
    10f0:	0008fec0 	call	8fec <__eqdf2>
    10f4:	1000f21e 	bne	r2,zero,14c0 <___vfprintf_internal_r+0xc9c>
    10f8:	00800074 	movhi	r2,1
    10fc:	10802c04 	addi	r2,r2,176
    1100:	94800044 	addi	r18,r18,1
    1104:	8c400044 	addi	r17,r17,1
    1108:	a8800015 	stw	r2,0(r21)
    110c:	00c00044 	movi	r3,1
    1110:	008001c4 	movi	r2,7
    1114:	a8c00115 	stw	r3,4(r21)
    1118:	dc800e15 	stw	r18,56(sp)
    111c:	dc400d15 	stw	r17,52(sp)
    1120:	1442fa16 	blt	r2,r17,1d0c <___vfprintf_internal_r+0x14e8>
    1124:	a8c00204 	addi	r3,r21,8
    1128:	d8800517 	ldw	r2,20(sp)
    112c:	d9014717 	ldw	r4,1308(sp)
    1130:	11015c0e 	bge	r2,r4,16a4 <___vfprintf_internal_r+0xe80>
    1134:	dc400d17 	ldw	r17,52(sp)
    1138:	d9814917 	ldw	r6,1316(sp)
    113c:	00800044 	movi	r2,1
    1140:	94800044 	addi	r18,r18,1
    1144:	8c400044 	addi	r17,r17,1
    1148:	18800115 	stw	r2,4(r3)
    114c:	008001c4 	movi	r2,7
    1150:	19800015 	stw	r6,0(r3)
    1154:	dc800e15 	stw	r18,56(sp)
    1158:	dc400d15 	stw	r17,52(sp)
    115c:	14431016 	blt	r2,r17,1da0 <___vfprintf_internal_r+0x157c>
    1160:	18c00204 	addi	r3,r3,8
    1164:	d8814717 	ldw	r2,1308(sp)
    1168:	143fffc4 	addi	r16,r2,-1
    116c:	043f2b0e 	bge	zero,r16,e1c <___vfprintf_internal_r+0x5f8>
    1170:	00800404 	movi	r2,16
    1174:	1402a20e 	bge	r2,r16,1c00 <___vfprintf_internal_r+0x13dc>
    1178:	dc400d17 	ldw	r17,52(sp)
    117c:	1027883a 	mov	r19,r2
    1180:	07000074 	movhi	fp,1
    1184:	e7002c84 	addi	fp,fp,178
    1188:	050001c4 	movi	r20,7
    118c:	00000306 	br	119c <___vfprintf_internal_r+0x978>
    1190:	18c00204 	addi	r3,r3,8
    1194:	843ffc04 	addi	r16,r16,-16
    1198:	9c029c0e 	bge	r19,r16,1c0c <___vfprintf_internal_r+0x13e8>
    119c:	94800404 	addi	r18,r18,16
    11a0:	8c400044 	addi	r17,r17,1
    11a4:	1f000015 	stw	fp,0(r3)
    11a8:	1cc00115 	stw	r19,4(r3)
    11ac:	dc800e15 	stw	r18,56(sp)
    11b0:	dc400d15 	stw	r17,52(sp)
    11b4:	a47ff60e 	bge	r20,r17,1190 <___vfprintf_internal_r+0x96c>
    11b8:	d9014f17 	ldw	r4,1340(sp)
    11bc:	b00b883a 	mov	r5,r22
    11c0:	d9800c04 	addi	r6,sp,48
    11c4:	00007cc0 	call	7cc <__sprint_r>
    11c8:	103f4e1e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
    11cc:	dc800e17 	ldw	r18,56(sp)
    11d0:	dc400d17 	ldw	r17,52(sp)
    11d4:	d8c01904 	addi	r3,sp,100
    11d8:	003fee06 	br	1194 <___vfprintf_internal_r+0x970>
    11dc:	d8802c0b 	ldhu	r2,176(sp)
    11e0:	00ffffc4 	movi	r3,-1
    11e4:	d8c14b15 	stw	r3,1324(sp)
    11e8:	1080100c 	andi	r2,r2,64
    11ec:	103dcc1e 	bne	r2,zero,920 <___vfprintf_internal_r+0xfc>
    11f0:	003dce06 	br	92c <___vfprintf_internal_r+0x108>
    11f4:	d9014f17 	ldw	r4,1340(sp)
    11f8:	b00b883a 	mov	r5,r22
    11fc:	d9800c04 	addi	r6,sp,48
    1200:	00007cc0 	call	7cc <__sprint_r>
    1204:	103f3f1e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
    1208:	dc800e17 	ldw	r18,56(sp)
    120c:	003f2e06 	br	ec8 <___vfprintf_internal_r+0x6a4>
    1210:	d9414c17 	ldw	r5,1328(sp)
    1214:	29400414 	ori	r5,r5,16
    1218:	d9414c15 	stw	r5,1328(sp)
    121c:	d9814c17 	ldw	r6,1328(sp)
    1220:	3080080c 	andi	r2,r6,32
    1224:	10014f1e 	bne	r2,zero,1764 <___vfprintf_internal_r+0xf40>
    1228:	d8c14c17 	ldw	r3,1328(sp)
    122c:	1880040c 	andi	r2,r3,16
    1230:	1002ea1e 	bne	r2,zero,1ddc <___vfprintf_internal_r+0x15b8>
    1234:	d9014c17 	ldw	r4,1328(sp)
    1238:	2080100c 	andi	r2,r4,64
    123c:	1002e726 	beq	r2,zero,1ddc <___vfprintf_internal_r+0x15b8>
    1240:	3880000f 	ldh	r2,0(r7)
    1244:	39c00104 	addi	r7,r7,4
    1248:	d9c14015 	stw	r7,1280(sp)
    124c:	1023d7fa 	srai	r17,r2,31
    1250:	1021883a 	mov	r16,r2
    1254:	88037216 	blt	r17,zero,2020 <___vfprintf_internal_r+0x17fc>
    1258:	01000044 	movi	r4,1
    125c:	98000416 	blt	r19,zero,1270 <___vfprintf_internal_r+0xa4c>
    1260:	d8c14c17 	ldw	r3,1328(sp)
    1264:	00bfdfc4 	movi	r2,-129
    1268:	1886703a 	and	r3,r3,r2
    126c:	d8c14c15 	stw	r3,1328(sp)
    1270:	8444b03a 	or	r2,r16,r17
    1274:	1002261e 	bne	r2,zero,1b10 <___vfprintf_internal_r+0x12ec>
    1278:	9802251e 	bne	r19,zero,1b10 <___vfprintf_internal_r+0x12ec>
    127c:	20803fcc 	andi	r2,r4,255
    1280:	10029b26 	beq	r2,zero,1cf0 <___vfprintf_internal_r+0x14cc>
    1284:	d8c01904 	addi	r3,sp,100
    1288:	dd000f04 	addi	r20,sp,60
    128c:	d8c14115 	stw	r3,1284(sp)
    1290:	d8c14117 	ldw	r3,1284(sp)
    1294:	dcc14515 	stw	r19,1300(sp)
    1298:	a0c5c83a 	sub	r2,r20,r3
    129c:	11c00a04 	addi	r7,r2,40
    12a0:	99c0010e 	bge	r19,r7,12a8 <___vfprintf_internal_r+0xa84>
    12a4:	d9c14515 	stw	r7,1300(sp)
    12a8:	dcc14615 	stw	r19,1304(sp)
    12ac:	d8800407 	ldb	r2,16(sp)
    12b0:	103e4c26 	beq	r2,zero,be4 <___vfprintf_internal_r+0x3c0>
    12b4:	d8814517 	ldw	r2,1300(sp)
    12b8:	10800044 	addi	r2,r2,1
    12bc:	d8814515 	stw	r2,1300(sp)
    12c0:	003e4806 	br	be4 <___vfprintf_internal_r+0x3c0>
    12c4:	d9814c17 	ldw	r6,1328(sp)
    12c8:	31800414 	ori	r6,r6,16
    12cc:	d9814c15 	stw	r6,1328(sp)
    12d0:	d8c14c17 	ldw	r3,1328(sp)
    12d4:	1880080c 	andi	r2,r3,32
    12d8:	1001271e 	bne	r2,zero,1778 <___vfprintf_internal_r+0xf54>
    12dc:	d9414c17 	ldw	r5,1328(sp)
    12e0:	2880040c 	andi	r2,r5,16
    12e4:	1002b61e 	bne	r2,zero,1dc0 <___vfprintf_internal_r+0x159c>
    12e8:	d9814c17 	ldw	r6,1328(sp)
    12ec:	3080100c 	andi	r2,r6,64
    12f0:	1002b326 	beq	r2,zero,1dc0 <___vfprintf_internal_r+0x159c>
    12f4:	3c00000b 	ldhu	r16,0(r7)
    12f8:	0009883a 	mov	r4,zero
    12fc:	39c00104 	addi	r7,r7,4
    1300:	0023883a 	mov	r17,zero
    1304:	d9c14015 	stw	r7,1280(sp)
    1308:	d8000405 	stb	zero,16(sp)
    130c:	003fd306 	br	125c <___vfprintf_internal_r+0xa38>
    1310:	d9014c17 	ldw	r4,1328(sp)
    1314:	21000414 	ori	r4,r4,16
    1318:	d9014c15 	stw	r4,1328(sp)
    131c:	d9414c17 	ldw	r5,1328(sp)
    1320:	2880080c 	andi	r2,r5,32
    1324:	1001081e 	bne	r2,zero,1748 <___vfprintf_internal_r+0xf24>
    1328:	d8c14c17 	ldw	r3,1328(sp)
    132c:	1880040c 	andi	r2,r3,16
    1330:	1002b01e 	bne	r2,zero,1df4 <___vfprintf_internal_r+0x15d0>
    1334:	d9014c17 	ldw	r4,1328(sp)
    1338:	2080100c 	andi	r2,r4,64
    133c:	1002ad26 	beq	r2,zero,1df4 <___vfprintf_internal_r+0x15d0>
    1340:	3c00000b 	ldhu	r16,0(r7)
    1344:	01000044 	movi	r4,1
    1348:	39c00104 	addi	r7,r7,4
    134c:	0023883a 	mov	r17,zero
    1350:	d9c14015 	stw	r7,1280(sp)
    1354:	d8000405 	stb	zero,16(sp)
    1358:	003fc006 	br	125c <___vfprintf_internal_r+0xa38>
    135c:	d9014f17 	ldw	r4,1340(sp)
    1360:	b00b883a 	mov	r5,r22
    1364:	d9800c04 	addi	r6,sp,48
    1368:	00007cc0 	call	7cc <__sprint_r>
    136c:	103ee51e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
    1370:	dc800e17 	ldw	r18,56(sp)
    1374:	d8c01904 	addi	r3,sp,100
    1378:	d9814c17 	ldw	r6,1328(sp)
    137c:	3080004c 	andi	r2,r6,1
    1380:	1005003a 	cmpeq	r2,r2,zero
    1384:	103ea51e 	bne	r2,zero,e1c <___vfprintf_internal_r+0x5f8>
    1388:	00800044 	movi	r2,1
    138c:	dc400d17 	ldw	r17,52(sp)
    1390:	18800115 	stw	r2,4(r3)
    1394:	d8814917 	ldw	r2,1316(sp)
    1398:	94800044 	addi	r18,r18,1
    139c:	8c400044 	addi	r17,r17,1
    13a0:	18800015 	stw	r2,0(r3)
    13a4:	008001c4 	movi	r2,7
    13a8:	dc800e15 	stw	r18,56(sp)
    13ac:	dc400d15 	stw	r17,52(sp)
    13b0:	14421e0e 	bge	r2,r17,1c2c <___vfprintf_internal_r+0x1408>
    13b4:	d9014f17 	ldw	r4,1340(sp)
    13b8:	b00b883a 	mov	r5,r22
    13bc:	d9800c04 	addi	r6,sp,48
    13c0:	00007cc0 	call	7cc <__sprint_r>
    13c4:	103ecf1e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
    13c8:	dc800e17 	ldw	r18,56(sp)
    13cc:	d8c01904 	addi	r3,sp,100
    13d0:	003e9206 	br	e1c <___vfprintf_internal_r+0x5f8>
    13d4:	d9014f17 	ldw	r4,1340(sp)
    13d8:	b00b883a 	mov	r5,r22
    13dc:	d9800c04 	addi	r6,sp,48
    13e0:	00007cc0 	call	7cc <__sprint_r>
    13e4:	103ec026 	beq	r2,zero,ee8 <___vfprintf_internal_r+0x6c4>
    13e8:	003ec606 	br	f04 <___vfprintf_internal_r+0x6e0>
    13ec:	d9014f17 	ldw	r4,1340(sp)
    13f0:	b00b883a 	mov	r5,r22
    13f4:	d9800c04 	addi	r6,sp,48
    13f8:	d9c15115 	stw	r7,1348(sp)
    13fc:	00007cc0 	call	7cc <__sprint_r>
    1400:	d9c15117 	ldw	r7,1348(sp)
    1404:	103ebf1e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
    1408:	dc800e17 	ldw	r18,56(sp)
    140c:	dc400d17 	ldw	r17,52(sp)
    1410:	dd401904 	addi	r21,sp,100
    1414:	003e7406 	br	de8 <___vfprintf_internal_r+0x5c4>
    1418:	d9014f17 	ldw	r4,1340(sp)
    141c:	b00b883a 	mov	r5,r22
    1420:	d9800c04 	addi	r6,sp,48
    1424:	d9c15115 	stw	r7,1348(sp)
    1428:	00007cc0 	call	7cc <__sprint_r>
    142c:	d9c15117 	ldw	r7,1348(sp)
    1430:	103eb41e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
    1434:	dd401904 	addi	r21,sp,100
    1438:	003d6d06 	br	9f0 <___vfprintf_internal_r+0x1cc>
    143c:	d9014f17 	ldw	r4,1340(sp)
    1440:	b00b883a 	mov	r5,r22
    1444:	d9800c04 	addi	r6,sp,48
    1448:	d9c15115 	stw	r7,1348(sp)
    144c:	00007cc0 	call	7cc <__sprint_r>
    1450:	d9c15117 	ldw	r7,1348(sp)
    1454:	103eab1e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
    1458:	dc800e17 	ldw	r18,56(sp)
    145c:	dc400d17 	ldw	r17,52(sp)
    1460:	dd401904 	addi	r21,sp,100
    1464:	003e3406 	br	d38 <___vfprintf_internal_r+0x514>
    1468:	d9014f17 	ldw	r4,1340(sp)
    146c:	b00b883a 	mov	r5,r22
    1470:	d9800c04 	addi	r6,sp,48
    1474:	d9c15115 	stw	r7,1348(sp)
    1478:	00007cc0 	call	7cc <__sprint_r>
    147c:	d9c15117 	ldw	r7,1348(sp)
    1480:	103ea01e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
    1484:	dc800e17 	ldw	r18,56(sp)
    1488:	dc400d17 	ldw	r17,52(sp)
    148c:	dd401904 	addi	r21,sp,100
    1490:	003e1c06 	br	d04 <___vfprintf_internal_r+0x4e0>
    1494:	d9014f17 	ldw	r4,1340(sp)
    1498:	b00b883a 	mov	r5,r22
    149c:	d9800c04 	addi	r6,sp,48
    14a0:	d9c15115 	stw	r7,1348(sp)
    14a4:	00007cc0 	call	7cc <__sprint_r>
    14a8:	d9c15117 	ldw	r7,1348(sp)
    14ac:	103e951e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
    14b0:	dc800e17 	ldw	r18,56(sp)
    14b4:	dc400d17 	ldw	r17,52(sp)
    14b8:	dd401904 	addi	r21,sp,100
    14bc:	003e0406 	br	cd0 <___vfprintf_internal_r+0x4ac>
    14c0:	d9000517 	ldw	r4,20(sp)
    14c4:	0102520e 	bge	zero,r4,1e10 <___vfprintf_internal_r+0x15ec>
    14c8:	d9814717 	ldw	r6,1308(sp)
    14cc:	21807a16 	blt	r4,r6,16b8 <___vfprintf_internal_r+0xe94>
    14d0:	d8814117 	ldw	r2,1284(sp)
    14d4:	91a5883a 	add	r18,r18,r6
    14d8:	8c400044 	addi	r17,r17,1
    14dc:	a8800015 	stw	r2,0(r21)
    14e0:	008001c4 	movi	r2,7
    14e4:	a9800115 	stw	r6,4(r21)
    14e8:	dc800e15 	stw	r18,56(sp)
    14ec:	dc400d15 	stw	r17,52(sp)
    14f0:	1442f616 	blt	r2,r17,20cc <___vfprintf_internal_r+0x18a8>
    14f4:	a8c00204 	addi	r3,r21,8
    14f8:	d9414717 	ldw	r5,1308(sp)
    14fc:	2161c83a 	sub	r16,r4,r5
    1500:	043f9d0e 	bge	zero,r16,1378 <___vfprintf_internal_r+0xb54>
    1504:	00800404 	movi	r2,16
    1508:	1402130e 	bge	r2,r16,1d58 <___vfprintf_internal_r+0x1534>
    150c:	dc400d17 	ldw	r17,52(sp)
    1510:	1027883a 	mov	r19,r2
    1514:	07000074 	movhi	fp,1
    1518:	e7002c84 	addi	fp,fp,178
    151c:	050001c4 	movi	r20,7
    1520:	00000306 	br	1530 <___vfprintf_internal_r+0xd0c>
    1524:	18c00204 	addi	r3,r3,8
    1528:	843ffc04 	addi	r16,r16,-16
    152c:	9c020d0e 	bge	r19,r16,1d64 <___vfprintf_internal_r+0x1540>
    1530:	94800404 	addi	r18,r18,16
    1534:	8c400044 	addi	r17,r17,1
    1538:	1f000015 	stw	fp,0(r3)
    153c:	1cc00115 	stw	r19,4(r3)
    1540:	dc800e15 	stw	r18,56(sp)
    1544:	dc400d15 	stw	r17,52(sp)
    1548:	a47ff60e 	bge	r20,r17,1524 <___vfprintf_internal_r+0xd00>
    154c:	d9014f17 	ldw	r4,1340(sp)
    1550:	b00b883a 	mov	r5,r22
    1554:	d9800c04 	addi	r6,sp,48
    1558:	00007cc0 	call	7cc <__sprint_r>
    155c:	103e691e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
    1560:	dc800e17 	ldw	r18,56(sp)
    1564:	dc400d17 	ldw	r17,52(sp)
    1568:	d8c01904 	addi	r3,sp,100
    156c:	003fee06 	br	1528 <___vfprintf_internal_r+0xd04>
    1570:	d8814717 	ldw	r2,1308(sp)
    1574:	143fffc4 	addi	r16,r2,-1
    1578:	043e970e 	bge	zero,r16,fd8 <___vfprintf_internal_r+0x7b4>
    157c:	00800404 	movi	r2,16
    1580:	1400180e 	bge	r2,r16,15e4 <___vfprintf_internal_r+0xdc0>
    1584:	1029883a 	mov	r20,r2
    1588:	07000074 	movhi	fp,1
    158c:	e7002c84 	addi	fp,fp,178
    1590:	054001c4 	movi	r21,7
    1594:	00000306 	br	15a4 <___vfprintf_internal_r+0xd80>
    1598:	9cc00204 	addi	r19,r19,8
    159c:	843ffc04 	addi	r16,r16,-16
    15a0:	a400120e 	bge	r20,r16,15ec <___vfprintf_internal_r+0xdc8>
    15a4:	94800404 	addi	r18,r18,16
    15a8:	8c400044 	addi	r17,r17,1
    15ac:	9f000015 	stw	fp,0(r19)
    15b0:	9d000115 	stw	r20,4(r19)
    15b4:	dc800e15 	stw	r18,56(sp)
    15b8:	dc400d15 	stw	r17,52(sp)
    15bc:	ac7ff60e 	bge	r21,r17,1598 <___vfprintf_internal_r+0xd74>
    15c0:	d9014f17 	ldw	r4,1340(sp)
    15c4:	b00b883a 	mov	r5,r22
    15c8:	d9800c04 	addi	r6,sp,48
    15cc:	00007cc0 	call	7cc <__sprint_r>
    15d0:	103e4c1e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
    15d4:	dc800e17 	ldw	r18,56(sp)
    15d8:	dc400d17 	ldw	r17,52(sp)
    15dc:	dcc01904 	addi	r19,sp,100
    15e0:	003fee06 	br	159c <___vfprintf_internal_r+0xd78>
    15e4:	07000074 	movhi	fp,1
    15e8:	e7002c84 	addi	fp,fp,178
    15ec:	9425883a 	add	r18,r18,r16
    15f0:	8c400044 	addi	r17,r17,1
    15f4:	008001c4 	movi	r2,7
    15f8:	9f000015 	stw	fp,0(r19)
    15fc:	9c000115 	stw	r16,4(r19)
    1600:	dc800e15 	stw	r18,56(sp)
    1604:	dc400d15 	stw	r17,52(sp)
    1608:	147e720e 	bge	r2,r17,fd4 <___vfprintf_internal_r+0x7b0>
    160c:	d9014f17 	ldw	r4,1340(sp)
    1610:	b00b883a 	mov	r5,r22
    1614:	d9800c04 	addi	r6,sp,48
    1618:	00007cc0 	call	7cc <__sprint_r>
    161c:	103e391e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
    1620:	dc800e17 	ldw	r18,56(sp)
    1624:	dc400d17 	ldw	r17,52(sp)
    1628:	dcc01904 	addi	r19,sp,100
    162c:	003e6a06 	br	fd8 <___vfprintf_internal_r+0x7b4>
    1630:	d9014f17 	ldw	r4,1340(sp)
    1634:	b00b883a 	mov	r5,r22
    1638:	d9800c04 	addi	r6,sp,48
    163c:	d9c15115 	stw	r7,1348(sp)
    1640:	00007cc0 	call	7cc <__sprint_r>
    1644:	d9c15117 	ldw	r7,1348(sp)
    1648:	103e2e1e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
    164c:	dc800e17 	ldw	r18,56(sp)
    1650:	dc400d17 	ldw	r17,52(sp)
    1654:	dd401904 	addi	r21,sp,100
    1658:	003dba06 	br	d44 <___vfprintf_internal_r+0x520>
    165c:	d9014f17 	ldw	r4,1340(sp)
    1660:	b00b883a 	mov	r5,r22
    1664:	d9800c04 	addi	r6,sp,48
    1668:	00007cc0 	call	7cc <__sprint_r>
    166c:	103e251e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
    1670:	dc800e17 	ldw	r18,56(sp)
    1674:	dc400d17 	ldw	r17,52(sp)
    1678:	dcc01904 	addi	r19,sp,100
    167c:	003e4206 	br	f88 <___vfprintf_internal_r+0x764>
    1680:	d9014f17 	ldw	r4,1340(sp)
    1684:	b00b883a 	mov	r5,r22
    1688:	d9800c04 	addi	r6,sp,48
    168c:	00007cc0 	call	7cc <__sprint_r>
    1690:	103e1c1e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
    1694:	dc800e17 	ldw	r18,56(sp)
    1698:	dc400d17 	ldw	r17,52(sp)
    169c:	d8c01904 	addi	r3,sp,100
    16a0:	003e2e06 	br	f5c <___vfprintf_internal_r+0x738>
    16a4:	d9414c17 	ldw	r5,1328(sp)
    16a8:	2880004c 	andi	r2,r5,1
    16ac:	1005003a 	cmpeq	r2,r2,zero
    16b0:	103dda1e 	bne	r2,zero,e1c <___vfprintf_internal_r+0x5f8>
    16b4:	003e9f06 	br	1134 <___vfprintf_internal_r+0x910>
    16b8:	d8c14117 	ldw	r3,1284(sp)
    16bc:	9125883a 	add	r18,r18,r4
    16c0:	8c400044 	addi	r17,r17,1
    16c4:	008001c4 	movi	r2,7
    16c8:	a8c00015 	stw	r3,0(r21)
    16cc:	a9000115 	stw	r4,4(r21)
    16d0:	dc800e15 	stw	r18,56(sp)
    16d4:	dc400d15 	stw	r17,52(sp)
    16d8:	14426616 	blt	r2,r17,2074 <___vfprintf_internal_r+0x1850>
    16dc:	a8c00204 	addi	r3,r21,8
    16e0:	d9414917 	ldw	r5,1316(sp)
    16e4:	00800044 	movi	r2,1
    16e8:	94800044 	addi	r18,r18,1
    16ec:	8c400044 	addi	r17,r17,1
    16f0:	18800115 	stw	r2,4(r3)
    16f4:	008001c4 	movi	r2,7
    16f8:	19400015 	stw	r5,0(r3)
    16fc:	dc800e15 	stw	r18,56(sp)
    1700:	dc400d15 	stw	r17,52(sp)
    1704:	2021883a 	mov	r16,r4
    1708:	14425016 	blt	r2,r17,204c <___vfprintf_internal_r+0x1828>
    170c:	19400204 	addi	r5,r3,8
    1710:	d9814717 	ldw	r6,1308(sp)
    1714:	8c400044 	addi	r17,r17,1
    1718:	dc400d15 	stw	r17,52(sp)
    171c:	3107c83a 	sub	r3,r6,r4
    1720:	d9014117 	ldw	r4,1284(sp)
    1724:	90e5883a 	add	r18,r18,r3
    1728:	28c00115 	stw	r3,4(r5)
    172c:	8105883a 	add	r2,r16,r4
    1730:	28800015 	stw	r2,0(r5)
    1734:	008001c4 	movi	r2,7
    1738:	dc800e15 	stw	r18,56(sp)
    173c:	147f1d16 	blt	r2,r17,13b4 <___vfprintf_internal_r+0xb90>
    1740:	28c00204 	addi	r3,r5,8
    1744:	003db506 	br	e1c <___vfprintf_internal_r+0x5f8>
    1748:	3c000017 	ldw	r16,0(r7)
    174c:	3c400117 	ldw	r17,4(r7)
    1750:	39800204 	addi	r6,r7,8
    1754:	01000044 	movi	r4,1
    1758:	d9814015 	stw	r6,1280(sp)
    175c:	d8000405 	stb	zero,16(sp)
    1760:	003ebe06 	br	125c <___vfprintf_internal_r+0xa38>
    1764:	3c000017 	ldw	r16,0(r7)
    1768:	3c400117 	ldw	r17,4(r7)
    176c:	38800204 	addi	r2,r7,8
    1770:	d8814015 	stw	r2,1280(sp)
    1774:	003eb706 	br	1254 <___vfprintf_internal_r+0xa30>
    1778:	3c000017 	ldw	r16,0(r7)
    177c:	3c400117 	ldw	r17,4(r7)
    1780:	39000204 	addi	r4,r7,8
    1784:	d9014015 	stw	r4,1280(sp)
    1788:	0009883a 	mov	r4,zero
    178c:	d8000405 	stb	zero,16(sp)
    1790:	003eb206 	br	125c <___vfprintf_internal_r+0xa38>
    1794:	38c00017 	ldw	r3,0(r7)
    1798:	39c00104 	addi	r7,r7,4
    179c:	d8c14a15 	stw	r3,1320(sp)
    17a0:	1800d10e 	bge	r3,zero,1ae8 <___vfprintf_internal_r+0x12c4>
    17a4:	00c7c83a 	sub	r3,zero,r3
    17a8:	d8c14a15 	stw	r3,1320(sp)
    17ac:	d9014c17 	ldw	r4,1328(sp)
    17b0:	b8c00007 	ldb	r3,0(r23)
    17b4:	21000114 	ori	r4,r4,4
    17b8:	d9014c15 	stw	r4,1328(sp)
    17bc:	003c9806 	br	a20 <___vfprintf_internal_r+0x1fc>
    17c0:	d9814c17 	ldw	r6,1328(sp)
    17c4:	3080080c 	andi	r2,r6,32
    17c8:	1001f026 	beq	r2,zero,1f8c <___vfprintf_internal_r+0x1768>
    17cc:	d9014b17 	ldw	r4,1324(sp)
    17d0:	38800017 	ldw	r2,0(r7)
    17d4:	39c00104 	addi	r7,r7,4
    17d8:	d9c14015 	stw	r7,1280(sp)
    17dc:	2007d7fa 	srai	r3,r4,31
    17e0:	d9c14017 	ldw	r7,1280(sp)
    17e4:	11000015 	stw	r4,0(r2)
    17e8:	10c00115 	stw	r3,4(r2)
    17ec:	003c6906 	br	994 <___vfprintf_internal_r+0x170>
    17f0:	b8c00007 	ldb	r3,0(r23)
    17f4:	00801b04 	movi	r2,108
    17f8:	18824f26 	beq	r3,r2,2138 <___vfprintf_internal_r+0x1914>
    17fc:	d9414c17 	ldw	r5,1328(sp)
    1800:	29400414 	ori	r5,r5,16
    1804:	d9414c15 	stw	r5,1328(sp)
    1808:	003c8506 	br	a20 <___vfprintf_internal_r+0x1fc>
    180c:	d9814c17 	ldw	r6,1328(sp)
    1810:	b8c00007 	ldb	r3,0(r23)
    1814:	31800814 	ori	r6,r6,32
    1818:	d9814c15 	stw	r6,1328(sp)
    181c:	003c8006 	br	a20 <___vfprintf_internal_r+0x1fc>
    1820:	d8814c17 	ldw	r2,1328(sp)
    1824:	3c000017 	ldw	r16,0(r7)
    1828:	00c01e04 	movi	r3,120
    182c:	10800094 	ori	r2,r2,2
    1830:	d8814c15 	stw	r2,1328(sp)
    1834:	39c00104 	addi	r7,r7,4
    1838:	01400074 	movhi	r5,1
    183c:	29401504 	addi	r5,r5,84
    1840:	00800c04 	movi	r2,48
    1844:	0023883a 	mov	r17,zero
    1848:	01000084 	movi	r4,2
    184c:	d9c14015 	stw	r7,1280(sp)
    1850:	d8c14d15 	stw	r3,1332(sp)
    1854:	d9414415 	stw	r5,1296(sp)
    1858:	d8800445 	stb	r2,17(sp)
    185c:	d8c00485 	stb	r3,18(sp)
    1860:	d8000405 	stb	zero,16(sp)
    1864:	003e7d06 	br	125c <___vfprintf_internal_r+0xa38>
    1868:	d8814c17 	ldw	r2,1328(sp)
    186c:	b8c00007 	ldb	r3,0(r23)
    1870:	10801014 	ori	r2,r2,64
    1874:	d8814c15 	stw	r2,1328(sp)
    1878:	003c6906 	br	a20 <___vfprintf_internal_r+0x1fc>
    187c:	d9414c17 	ldw	r5,1328(sp)
    1880:	2880020c 	andi	r2,r5,8
    1884:	1001df26 	beq	r2,zero,2004 <___vfprintf_internal_r+0x17e0>
    1888:	39800017 	ldw	r6,0(r7)
    188c:	38800204 	addi	r2,r7,8
    1890:	d8814015 	stw	r2,1280(sp)
    1894:	d9814215 	stw	r6,1288(sp)
    1898:	39c00117 	ldw	r7,4(r7)
    189c:	d9c14315 	stw	r7,1292(sp)
    18a0:	d9014217 	ldw	r4,1288(sp)
    18a4:	d9414317 	ldw	r5,1292(sp)
    18a8:	00071c40 	call	71c4 <__isinfd>
    18ac:	10021726 	beq	r2,zero,210c <___vfprintf_internal_r+0x18e8>
    18b0:	d9014217 	ldw	r4,1288(sp)
    18b4:	d9414317 	ldw	r5,1292(sp)
    18b8:	000d883a 	mov	r6,zero
    18bc:	000f883a 	mov	r7,zero
    18c0:	000920c0 	call	920c <__ltdf2>
    18c4:	1002ca16 	blt	r2,zero,23f0 <___vfprintf_internal_r+0x1bcc>
    18c8:	d9414d17 	ldw	r5,1332(sp)
    18cc:	008011c4 	movi	r2,71
    18d0:	11420a16 	blt	r2,r5,20fc <___vfprintf_internal_r+0x18d8>
    18d4:	01800074 	movhi	r6,1
    18d8:	31801a04 	addi	r6,r6,104
    18dc:	d9814115 	stw	r6,1284(sp)
    18e0:	d9014c17 	ldw	r4,1328(sp)
    18e4:	00c000c4 	movi	r3,3
    18e8:	00bfdfc4 	movi	r2,-129
    18ec:	2088703a 	and	r4,r4,r2
    18f0:	180f883a 	mov	r7,r3
    18f4:	d8c14515 	stw	r3,1300(sp)
    18f8:	d9014c15 	stw	r4,1328(sp)
    18fc:	d8014615 	stw	zero,1304(sp)
    1900:	003e6a06 	br	12ac <___vfprintf_internal_r+0xa88>
    1904:	38800017 	ldw	r2,0(r7)
    1908:	00c00044 	movi	r3,1
    190c:	39c00104 	addi	r7,r7,4
    1910:	d9c14015 	stw	r7,1280(sp)
    1914:	d9000f04 	addi	r4,sp,60
    1918:	180f883a 	mov	r7,r3
    191c:	d8c14515 	stw	r3,1300(sp)
    1920:	d9014115 	stw	r4,1284(sp)
    1924:	d8800f05 	stb	r2,60(sp)
    1928:	d8000405 	stb	zero,16(sp)
    192c:	003cac06 	br	be0 <___vfprintf_internal_r+0x3bc>
    1930:	01400074 	movhi	r5,1
    1934:	29402004 	addi	r5,r5,128
    1938:	d9414415 	stw	r5,1296(sp)
    193c:	d9814c17 	ldw	r6,1328(sp)
    1940:	3080080c 	andi	r2,r6,32
    1944:	1000f926 	beq	r2,zero,1d2c <___vfprintf_internal_r+0x1508>
    1948:	3c000017 	ldw	r16,0(r7)
    194c:	3c400117 	ldw	r17,4(r7)
    1950:	38800204 	addi	r2,r7,8
    1954:	d8814015 	stw	r2,1280(sp)
    1958:	d9414c17 	ldw	r5,1328(sp)
    195c:	2880004c 	andi	r2,r5,1
    1960:	1005003a 	cmpeq	r2,r2,zero
    1964:	1000b31e 	bne	r2,zero,1c34 <___vfprintf_internal_r+0x1410>
    1968:	8444b03a 	or	r2,r16,r17
    196c:	1000b126 	beq	r2,zero,1c34 <___vfprintf_internal_r+0x1410>
    1970:	d9814d17 	ldw	r6,1332(sp)
    1974:	29400094 	ori	r5,r5,2
    1978:	00800c04 	movi	r2,48
    197c:	01000084 	movi	r4,2
    1980:	d9414c15 	stw	r5,1328(sp)
    1984:	d8800445 	stb	r2,17(sp)
    1988:	d9800485 	stb	r6,18(sp)
    198c:	d8000405 	stb	zero,16(sp)
    1990:	003e3206 	br	125c <___vfprintf_internal_r+0xa38>
    1994:	01800074 	movhi	r6,1
    1998:	31801504 	addi	r6,r6,84
    199c:	d9814415 	stw	r6,1296(sp)
    19a0:	003fe606 	br	193c <___vfprintf_internal_r+0x1118>
    19a4:	00800ac4 	movi	r2,43
    19a8:	d8800405 	stb	r2,16(sp)
    19ac:	b8c00007 	ldb	r3,0(r23)
    19b0:	003c1b06 	br	a20 <___vfprintf_internal_r+0x1fc>
    19b4:	d8814c17 	ldw	r2,1328(sp)
    19b8:	b8c00007 	ldb	r3,0(r23)
    19bc:	10800054 	ori	r2,r2,1
    19c0:	d8814c15 	stw	r2,1328(sp)
    19c4:	003c1606 	br	a20 <___vfprintf_internal_r+0x1fc>
    19c8:	d8800407 	ldb	r2,16(sp)
    19cc:	1000461e 	bne	r2,zero,1ae8 <___vfprintf_internal_r+0x12c4>
    19d0:	00800804 	movi	r2,32
    19d4:	d8800405 	stb	r2,16(sp)
    19d8:	b8c00007 	ldb	r3,0(r23)
    19dc:	003c1006 	br	a20 <___vfprintf_internal_r+0x1fc>
    19e0:	d9814c17 	ldw	r6,1328(sp)
    19e4:	b8c00007 	ldb	r3,0(r23)
    19e8:	31800214 	ori	r6,r6,8
    19ec:	d9814c15 	stw	r6,1328(sp)
    19f0:	003c0b06 	br	a20 <___vfprintf_internal_r+0x1fc>
    19f4:	0007883a 	mov	r3,zero
    19f8:	01000244 	movi	r4,9
    19fc:	188002a4 	muli	r2,r3,10
    1a00:	b8c00007 	ldb	r3,0(r23)
    1a04:	d9814d17 	ldw	r6,1332(sp)
    1a08:	bdc00044 	addi	r23,r23,1
    1a0c:	d8c14d15 	stw	r3,1332(sp)
    1a10:	d9414d17 	ldw	r5,1332(sp)
    1a14:	3085883a 	add	r2,r6,r2
    1a18:	10fff404 	addi	r3,r2,-48
    1a1c:	28bff404 	addi	r2,r5,-48
    1a20:	20bff62e 	bgeu	r4,r2,19fc <___vfprintf_internal_r+0x11d8>
    1a24:	d8c14a15 	stw	r3,1320(sp)
    1a28:	003bff06 	br	a28 <___vfprintf_internal_r+0x204>
    1a2c:	d9414c17 	ldw	r5,1328(sp)
    1a30:	b8c00007 	ldb	r3,0(r23)
    1a34:	29402014 	ori	r5,r5,128
    1a38:	d9414c15 	stw	r5,1328(sp)
    1a3c:	003bf806 	br	a20 <___vfprintf_internal_r+0x1fc>
    1a40:	b8c00007 	ldb	r3,0(r23)
    1a44:	00800a84 	movi	r2,42
    1a48:	bdc00044 	addi	r23,r23,1
    1a4c:	18831526 	beq	r3,r2,26a4 <___vfprintf_internal_r+0x1e80>
    1a50:	d8c14d15 	stw	r3,1332(sp)
    1a54:	18bff404 	addi	r2,r3,-48
    1a58:	00c00244 	movi	r3,9
    1a5c:	18827836 	bltu	r3,r2,2440 <___vfprintf_internal_r+0x1c1c>
    1a60:	000d883a 	mov	r6,zero
    1a64:	308002a4 	muli	r2,r6,10
    1a68:	b9800007 	ldb	r6,0(r23)
    1a6c:	d9414d17 	ldw	r5,1332(sp)
    1a70:	bdc00044 	addi	r23,r23,1
    1a74:	d9814d15 	stw	r6,1332(sp)
    1a78:	d9014d17 	ldw	r4,1332(sp)
    1a7c:	1145883a 	add	r2,r2,r5
    1a80:	11bff404 	addi	r6,r2,-48
    1a84:	20bff404 	addi	r2,r4,-48
    1a88:	18bff62e 	bgeu	r3,r2,1a64 <___vfprintf_internal_r+0x1240>
    1a8c:	3027883a 	mov	r19,r6
    1a90:	303be50e 	bge	r6,zero,a28 <___vfprintf_internal_r+0x204>
    1a94:	04ffffc4 	movi	r19,-1
    1a98:	003be306 	br	a28 <___vfprintf_internal_r+0x204>
    1a9c:	d8000405 	stb	zero,16(sp)
    1aa0:	39800017 	ldw	r6,0(r7)
    1aa4:	39c00104 	addi	r7,r7,4
    1aa8:	d9c14015 	stw	r7,1280(sp)
    1aac:	d9814115 	stw	r6,1284(sp)
    1ab0:	3001c926 	beq	r6,zero,21d8 <___vfprintf_internal_r+0x19b4>
    1ab4:	98000e16 	blt	r19,zero,1af0 <___vfprintf_internal_r+0x12cc>
    1ab8:	d9014117 	ldw	r4,1284(sp)
    1abc:	000b883a 	mov	r5,zero
    1ac0:	980d883a 	mov	r6,r19
    1ac4:	00058e00 	call	58e0 <memchr>
    1ac8:	10025926 	beq	r2,zero,2430 <___vfprintf_internal_r+0x1c0c>
    1acc:	d8c14117 	ldw	r3,1284(sp)
    1ad0:	10cfc83a 	sub	r7,r2,r3
    1ad4:	99c19e16 	blt	r19,r7,2150 <___vfprintf_internal_r+0x192c>
    1ad8:	d9c14515 	stw	r7,1300(sp)
    1adc:	38000916 	blt	r7,zero,1b04 <___vfprintf_internal_r+0x12e0>
    1ae0:	d8014615 	stw	zero,1304(sp)
    1ae4:	003df106 	br	12ac <___vfprintf_internal_r+0xa88>
    1ae8:	b8c00007 	ldb	r3,0(r23)
    1aec:	003bcc06 	br	a20 <___vfprintf_internal_r+0x1fc>
    1af0:	d9014117 	ldw	r4,1284(sp)
    1af4:	00007580 	call	758 <strlen>
    1af8:	d8814515 	stw	r2,1300(sp)
    1afc:	100f883a 	mov	r7,r2
    1b00:	103ff70e 	bge	r2,zero,1ae0 <___vfprintf_internal_r+0x12bc>
    1b04:	d8014515 	stw	zero,1300(sp)
    1b08:	d8014615 	stw	zero,1304(sp)
    1b0c:	003de706 	br	12ac <___vfprintf_internal_r+0xa88>
    1b10:	20c03fcc 	andi	r3,r4,255
    1b14:	00800044 	movi	r2,1
    1b18:	18802d26 	beq	r3,r2,1bd0 <___vfprintf_internal_r+0x13ac>
    1b1c:	18800e36 	bltu	r3,r2,1b58 <___vfprintf_internal_r+0x1334>
    1b20:	00800084 	movi	r2,2
    1b24:	1880fa26 	beq	r3,r2,1f10 <___vfprintf_internal_r+0x16ec>
    1b28:	01000074 	movhi	r4,1
    1b2c:	21002504 	addi	r4,r4,148
    1b30:	00007580 	call	758 <strlen>
    1b34:	100f883a 	mov	r7,r2
    1b38:	dcc14515 	stw	r19,1300(sp)
    1b3c:	9880010e 	bge	r19,r2,1b44 <___vfprintf_internal_r+0x1320>
    1b40:	d8814515 	stw	r2,1300(sp)
    1b44:	00800074 	movhi	r2,1
    1b48:	10802504 	addi	r2,r2,148
    1b4c:	dcc14615 	stw	r19,1304(sp)
    1b50:	d8814115 	stw	r2,1284(sp)
    1b54:	003dd506 	br	12ac <___vfprintf_internal_r+0xa88>
    1b58:	d9401904 	addi	r5,sp,100
    1b5c:	dd000f04 	addi	r20,sp,60
    1b60:	d9414115 	stw	r5,1284(sp)
    1b64:	880a977a 	slli	r5,r17,29
    1b68:	d9814117 	ldw	r6,1284(sp)
    1b6c:	8004d0fa 	srli	r2,r16,3
    1b70:	8806d0fa 	srli	r3,r17,3
    1b74:	810001cc 	andi	r4,r16,7
    1b78:	2884b03a 	or	r2,r5,r2
    1b7c:	31bfffc4 	addi	r6,r6,-1
    1b80:	21000c04 	addi	r4,r4,48
    1b84:	d9814115 	stw	r6,1284(sp)
    1b88:	10cab03a 	or	r5,r2,r3
    1b8c:	31000005 	stb	r4,0(r6)
    1b90:	1021883a 	mov	r16,r2
    1b94:	1823883a 	mov	r17,r3
    1b98:	283ff21e 	bne	r5,zero,1b64 <___vfprintf_internal_r+0x1340>
    1b9c:	d8c14c17 	ldw	r3,1328(sp)
    1ba0:	1880004c 	andi	r2,r3,1
    1ba4:	1005003a 	cmpeq	r2,r2,zero
    1ba8:	103db91e 	bne	r2,zero,1290 <___vfprintf_internal_r+0xa6c>
    1bac:	20803fcc 	andi	r2,r4,255
    1bb0:	1080201c 	xori	r2,r2,128
    1bb4:	10bfe004 	addi	r2,r2,-128
    1bb8:	00c00c04 	movi	r3,48
    1bbc:	10fdb426 	beq	r2,r3,1290 <___vfprintf_internal_r+0xa6c>
    1bc0:	31bfffc4 	addi	r6,r6,-1
    1bc4:	d9814115 	stw	r6,1284(sp)
    1bc8:	30c00005 	stb	r3,0(r6)
    1bcc:	003db006 	br	1290 <___vfprintf_internal_r+0xa6c>
    1bd0:	88800068 	cmpgeui	r2,r17,1
    1bd4:	10002c1e 	bne	r2,zero,1c88 <___vfprintf_internal_r+0x1464>
    1bd8:	8800021e 	bne	r17,zero,1be4 <___vfprintf_internal_r+0x13c0>
    1bdc:	00800244 	movi	r2,9
    1be0:	14002936 	bltu	r2,r16,1c88 <___vfprintf_internal_r+0x1464>
    1be4:	d90018c4 	addi	r4,sp,99
    1be8:	dd000f04 	addi	r20,sp,60
    1bec:	d9014115 	stw	r4,1284(sp)
    1bf0:	d9014117 	ldw	r4,1284(sp)
    1bf4:	80800c04 	addi	r2,r16,48
    1bf8:	20800005 	stb	r2,0(r4)
    1bfc:	003da406 	br	1290 <___vfprintf_internal_r+0xa6c>
    1c00:	dc400d17 	ldw	r17,52(sp)
    1c04:	07000074 	movhi	fp,1
    1c08:	e7002c84 	addi	fp,fp,178
    1c0c:	9425883a 	add	r18,r18,r16
    1c10:	8c400044 	addi	r17,r17,1
    1c14:	008001c4 	movi	r2,7
    1c18:	1f000015 	stw	fp,0(r3)
    1c1c:	1c000115 	stw	r16,4(r3)
    1c20:	dc800e15 	stw	r18,56(sp)
    1c24:	dc400d15 	stw	r17,52(sp)
    1c28:	147de216 	blt	r2,r17,13b4 <___vfprintf_internal_r+0xb90>
    1c2c:	18c00204 	addi	r3,r3,8
    1c30:	003c7a06 	br	e1c <___vfprintf_internal_r+0x5f8>
    1c34:	01000084 	movi	r4,2
    1c38:	d8000405 	stb	zero,16(sp)
    1c3c:	003d8706 	br	125c <___vfprintf_internal_r+0xa38>
    1c40:	d9814c17 	ldw	r6,1328(sp)
    1c44:	30c4703a 	and	r2,r6,r3
    1c48:	1005003a 	cmpeq	r2,r2,zero
    1c4c:	103cb926 	beq	r2,zero,f34 <___vfprintf_internal_r+0x710>
    1c50:	d9014117 	ldw	r4,1284(sp)
    1c54:	94800044 	addi	r18,r18,1
    1c58:	8c400044 	addi	r17,r17,1
    1c5c:	008001c4 	movi	r2,7
    1c60:	a9000015 	stw	r4,0(r21)
    1c64:	a8c00115 	stw	r3,4(r21)
    1c68:	dc800e15 	stw	r18,56(sp)
    1c6c:	dc400d15 	stw	r17,52(sp)
    1c70:	147e6616 	blt	r2,r17,160c <___vfprintf_internal_r+0xde8>
    1c74:	acc00204 	addi	r19,r21,8
    1c78:	003cd706 	br	fd8 <___vfprintf_internal_r+0x7b4>
    1c7c:	07000074 	movhi	fp,1
    1c80:	e7002c84 	addi	fp,fp,178
    1c84:	003c4f06 	br	dc4 <___vfprintf_internal_r+0x5a0>
    1c88:	dd000f04 	addi	r20,sp,60
    1c8c:	dc801904 	addi	r18,sp,100
    1c90:	8009883a 	mov	r4,r16
    1c94:	880b883a 	mov	r5,r17
    1c98:	01800284 	movi	r6,10
    1c9c:	000f883a 	mov	r7,zero
    1ca0:	0007f1c0 	call	7f1c <__umoddi3>
    1ca4:	12000c04 	addi	r8,r2,48
    1ca8:	94bfffc4 	addi	r18,r18,-1
    1cac:	8009883a 	mov	r4,r16
    1cb0:	880b883a 	mov	r5,r17
    1cb4:	01800284 	movi	r6,10
    1cb8:	000f883a 	mov	r7,zero
    1cbc:	92000005 	stb	r8,0(r18)
    1cc0:	00079400 	call	7940 <__udivdi3>
    1cc4:	1009883a 	mov	r4,r2
    1cc8:	1021883a 	mov	r16,r2
    1ccc:	18800068 	cmpgeui	r2,r3,1
    1cd0:	1823883a 	mov	r17,r3
    1cd4:	103fee1e 	bne	r2,zero,1c90 <___vfprintf_internal_r+0x146c>
    1cd8:	1800021e 	bne	r3,zero,1ce4 <___vfprintf_internal_r+0x14c0>
    1cdc:	00800244 	movi	r2,9
    1ce0:	113feb36 	bltu	r2,r4,1c90 <___vfprintf_internal_r+0x146c>
    1ce4:	94bfffc4 	addi	r18,r18,-1
    1ce8:	dc814115 	stw	r18,1284(sp)
    1cec:	003fc006 	br	1bf0 <___vfprintf_internal_r+0x13cc>
    1cf0:	d9014c17 	ldw	r4,1328(sp)
    1cf4:	2080004c 	andi	r2,r4,1
    1cf8:	10009a1e 	bne	r2,zero,1f64 <___vfprintf_internal_r+0x1740>
    1cfc:	d9401904 	addi	r5,sp,100
    1d00:	dd000f04 	addi	r20,sp,60
    1d04:	d9414115 	stw	r5,1284(sp)
    1d08:	003d6106 	br	1290 <___vfprintf_internal_r+0xa6c>
    1d0c:	d9014f17 	ldw	r4,1340(sp)
    1d10:	b00b883a 	mov	r5,r22
    1d14:	d9800c04 	addi	r6,sp,48
    1d18:	00007cc0 	call	7cc <__sprint_r>
    1d1c:	103c791e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
    1d20:	dc800e17 	ldw	r18,56(sp)
    1d24:	d8c01904 	addi	r3,sp,100
    1d28:	003cff06 	br	1128 <___vfprintf_internal_r+0x904>
    1d2c:	d8c14c17 	ldw	r3,1328(sp)
    1d30:	1880040c 	andi	r2,r3,16
    1d34:	1000711e 	bne	r2,zero,1efc <___vfprintf_internal_r+0x16d8>
    1d38:	d9014c17 	ldw	r4,1328(sp)
    1d3c:	2080100c 	andi	r2,r4,64
    1d40:	10006e26 	beq	r2,zero,1efc <___vfprintf_internal_r+0x16d8>
    1d44:	3c00000b 	ldhu	r16,0(r7)
    1d48:	0023883a 	mov	r17,zero
    1d4c:	39c00104 	addi	r7,r7,4
    1d50:	d9c14015 	stw	r7,1280(sp)
    1d54:	003f0006 	br	1958 <___vfprintf_internal_r+0x1134>
    1d58:	dc400d17 	ldw	r17,52(sp)
    1d5c:	07000074 	movhi	fp,1
    1d60:	e7002c84 	addi	fp,fp,178
    1d64:	9425883a 	add	r18,r18,r16
    1d68:	8c400044 	addi	r17,r17,1
    1d6c:	008001c4 	movi	r2,7
    1d70:	1f000015 	stw	fp,0(r3)
    1d74:	1c000115 	stw	r16,4(r3)
    1d78:	dc800e15 	stw	r18,56(sp)
    1d7c:	dc400d15 	stw	r17,52(sp)
    1d80:	147d7616 	blt	r2,r17,135c <___vfprintf_internal_r+0xb38>
    1d84:	18c00204 	addi	r3,r3,8
    1d88:	003d7b06 	br	1378 <___vfprintf_internal_r+0xb54>
    1d8c:	dc800e17 	ldw	r18,56(sp)
    1d90:	dc400d17 	ldw	r17,52(sp)
    1d94:	07000074 	movhi	fp,1
    1d98:	e7003084 	addi	fp,fp,194
    1d9c:	003bc006 	br	ca0 <___vfprintf_internal_r+0x47c>
    1da0:	d9014f17 	ldw	r4,1340(sp)
    1da4:	b00b883a 	mov	r5,r22
    1da8:	d9800c04 	addi	r6,sp,48
    1dac:	00007cc0 	call	7cc <__sprint_r>
    1db0:	103c541e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
    1db4:	dc800e17 	ldw	r18,56(sp)
    1db8:	d8c01904 	addi	r3,sp,100
    1dbc:	003ce906 	br	1164 <___vfprintf_internal_r+0x940>
    1dc0:	3c000017 	ldw	r16,0(r7)
    1dc4:	0009883a 	mov	r4,zero
    1dc8:	39c00104 	addi	r7,r7,4
    1dcc:	0023883a 	mov	r17,zero
    1dd0:	d9c14015 	stw	r7,1280(sp)
    1dd4:	d8000405 	stb	zero,16(sp)
    1dd8:	003d2006 	br	125c <___vfprintf_internal_r+0xa38>
    1ddc:	38800017 	ldw	r2,0(r7)
    1de0:	39c00104 	addi	r7,r7,4
    1de4:	d9c14015 	stw	r7,1280(sp)
    1de8:	1023d7fa 	srai	r17,r2,31
    1dec:	1021883a 	mov	r16,r2
    1df0:	003d1806 	br	1254 <___vfprintf_internal_r+0xa30>
    1df4:	3c000017 	ldw	r16,0(r7)
    1df8:	01000044 	movi	r4,1
    1dfc:	39c00104 	addi	r7,r7,4
    1e00:	0023883a 	mov	r17,zero
    1e04:	d9c14015 	stw	r7,1280(sp)
    1e08:	d8000405 	stb	zero,16(sp)
    1e0c:	003d1306 	br	125c <___vfprintf_internal_r+0xa38>
    1e10:	00800074 	movhi	r2,1
    1e14:	10802c04 	addi	r2,r2,176
    1e18:	94800044 	addi	r18,r18,1
    1e1c:	8c400044 	addi	r17,r17,1
    1e20:	a8800015 	stw	r2,0(r21)
    1e24:	00c00044 	movi	r3,1
    1e28:	008001c4 	movi	r2,7
    1e2c:	a8c00115 	stw	r3,4(r21)
    1e30:	dc800e15 	stw	r18,56(sp)
    1e34:	dc400d15 	stw	r17,52(sp)
    1e38:	1440ca16 	blt	r2,r17,2164 <___vfprintf_internal_r+0x1940>
    1e3c:	a8c00204 	addi	r3,r21,8
    1e40:	2000061e 	bne	r4,zero,1e5c <___vfprintf_internal_r+0x1638>
    1e44:	d9414717 	ldw	r5,1308(sp)
    1e48:	2800041e 	bne	r5,zero,1e5c <___vfprintf_internal_r+0x1638>
    1e4c:	d9814c17 	ldw	r6,1328(sp)
    1e50:	3080004c 	andi	r2,r6,1
    1e54:	1005003a 	cmpeq	r2,r2,zero
    1e58:	103bf01e 	bne	r2,zero,e1c <___vfprintf_internal_r+0x5f8>
    1e5c:	00800044 	movi	r2,1
    1e60:	dc400d17 	ldw	r17,52(sp)
    1e64:	18800115 	stw	r2,4(r3)
    1e68:	d8814917 	ldw	r2,1316(sp)
    1e6c:	94800044 	addi	r18,r18,1
    1e70:	8c400044 	addi	r17,r17,1
    1e74:	18800015 	stw	r2,0(r3)
    1e78:	008001c4 	movi	r2,7
    1e7c:	dc800e15 	stw	r18,56(sp)
    1e80:	dc400d15 	stw	r17,52(sp)
    1e84:	1440ca16 	blt	r2,r17,21b0 <___vfprintf_internal_r+0x198c>
    1e88:	18c00204 	addi	r3,r3,8
    1e8c:	0121c83a 	sub	r16,zero,r4
    1e90:	0400500e 	bge	zero,r16,1fd4 <___vfprintf_internal_r+0x17b0>
    1e94:	00800404 	movi	r2,16
    1e98:	1400800e 	bge	r2,r16,209c <___vfprintf_internal_r+0x1878>
    1e9c:	1027883a 	mov	r19,r2
    1ea0:	07000074 	movhi	fp,1
    1ea4:	e7002c84 	addi	fp,fp,178
    1ea8:	050001c4 	movi	r20,7
    1eac:	00000306 	br	1ebc <___vfprintf_internal_r+0x1698>
    1eb0:	18c00204 	addi	r3,r3,8
    1eb4:	843ffc04 	addi	r16,r16,-16
    1eb8:	9c007a0e 	bge	r19,r16,20a4 <___vfprintf_internal_r+0x1880>
    1ebc:	94800404 	addi	r18,r18,16
    1ec0:	8c400044 	addi	r17,r17,1
    1ec4:	1f000015 	stw	fp,0(r3)
    1ec8:	1cc00115 	stw	r19,4(r3)
    1ecc:	dc800e15 	stw	r18,56(sp)
    1ed0:	dc400d15 	stw	r17,52(sp)
    1ed4:	a47ff60e 	bge	r20,r17,1eb0 <___vfprintf_internal_r+0x168c>
    1ed8:	d9014f17 	ldw	r4,1340(sp)
    1edc:	b00b883a 	mov	r5,r22
    1ee0:	d9800c04 	addi	r6,sp,48
    1ee4:	00007cc0 	call	7cc <__sprint_r>
    1ee8:	103c061e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
    1eec:	dc800e17 	ldw	r18,56(sp)
    1ef0:	dc400d17 	ldw	r17,52(sp)
    1ef4:	d8c01904 	addi	r3,sp,100
    1ef8:	003fee06 	br	1eb4 <___vfprintf_internal_r+0x1690>
    1efc:	3c000017 	ldw	r16,0(r7)
    1f00:	0023883a 	mov	r17,zero
    1f04:	39c00104 	addi	r7,r7,4
    1f08:	d9c14015 	stw	r7,1280(sp)
    1f0c:	003e9206 	br	1958 <___vfprintf_internal_r+0x1134>
    1f10:	d9401904 	addi	r5,sp,100
    1f14:	dd000f04 	addi	r20,sp,60
    1f18:	d9414115 	stw	r5,1284(sp)
    1f1c:	d9814417 	ldw	r6,1296(sp)
    1f20:	880a973a 	slli	r5,r17,28
    1f24:	8004d13a 	srli	r2,r16,4
    1f28:	810003cc 	andi	r4,r16,15
    1f2c:	3109883a 	add	r4,r6,r4
    1f30:	2884b03a 	or	r2,r5,r2
    1f34:	21400003 	ldbu	r5,0(r4)
    1f38:	d9014117 	ldw	r4,1284(sp)
    1f3c:	8806d13a 	srli	r3,r17,4
    1f40:	1021883a 	mov	r16,r2
    1f44:	213fffc4 	addi	r4,r4,-1
    1f48:	d9014115 	stw	r4,1284(sp)
    1f4c:	d9814117 	ldw	r6,1284(sp)
    1f50:	10c8b03a 	or	r4,r2,r3
    1f54:	1823883a 	mov	r17,r3
    1f58:	31400005 	stb	r5,0(r6)
    1f5c:	203fef1e 	bne	r4,zero,1f1c <___vfprintf_internal_r+0x16f8>
    1f60:	003ccb06 	br	1290 <___vfprintf_internal_r+0xa6c>
    1f64:	00800c04 	movi	r2,48
    1f68:	d98018c4 	addi	r6,sp,99
    1f6c:	dd000f04 	addi	r20,sp,60
    1f70:	d88018c5 	stb	r2,99(sp)
    1f74:	d9814115 	stw	r6,1284(sp)
    1f78:	003cc506 	br	1290 <___vfprintf_internal_r+0xa6c>
    1f7c:	dc400d17 	ldw	r17,52(sp)
    1f80:	07000074 	movhi	fp,1
    1f84:	e7003084 	addi	fp,fp,194
    1f88:	003bc706 	br	ea8 <___vfprintf_internal_r+0x684>
    1f8c:	d9414c17 	ldw	r5,1328(sp)
    1f90:	2880040c 	andi	r2,r5,16
    1f94:	10007c26 	beq	r2,zero,2188 <___vfprintf_internal_r+0x1964>
    1f98:	38800017 	ldw	r2,0(r7)
    1f9c:	39c00104 	addi	r7,r7,4
    1fa0:	d9c14015 	stw	r7,1280(sp)
    1fa4:	d9814b17 	ldw	r6,1324(sp)
    1fa8:	d9c14017 	ldw	r7,1280(sp)
    1fac:	11800015 	stw	r6,0(r2)
    1fb0:	003a7806 	br	994 <___vfprintf_internal_r+0x170>
    1fb4:	d9014f17 	ldw	r4,1340(sp)
    1fb8:	b00b883a 	mov	r5,r22
    1fbc:	d9800c04 	addi	r6,sp,48
    1fc0:	00007cc0 	call	7cc <__sprint_r>
    1fc4:	103bcf1e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
    1fc8:	dc800e17 	ldw	r18,56(sp)
    1fcc:	dc400d17 	ldw	r17,52(sp)
    1fd0:	d8c01904 	addi	r3,sp,100
    1fd4:	d9014717 	ldw	r4,1308(sp)
    1fd8:	d9414117 	ldw	r5,1284(sp)
    1fdc:	8c400044 	addi	r17,r17,1
    1fe0:	9125883a 	add	r18,r18,r4
    1fe4:	008001c4 	movi	r2,7
    1fe8:	19400015 	stw	r5,0(r3)
    1fec:	19000115 	stw	r4,4(r3)
    1ff0:	dc800e15 	stw	r18,56(sp)
    1ff4:	dc400d15 	stw	r17,52(sp)
    1ff8:	147cee16 	blt	r2,r17,13b4 <___vfprintf_internal_r+0xb90>
    1ffc:	18c00204 	addi	r3,r3,8
    2000:	003b8606 	br	e1c <___vfprintf_internal_r+0x5f8>
    2004:	38c00017 	ldw	r3,0(r7)
    2008:	39000204 	addi	r4,r7,8
    200c:	d9014015 	stw	r4,1280(sp)
    2010:	d8c14215 	stw	r3,1288(sp)
    2014:	39c00117 	ldw	r7,4(r7)
    2018:	d9c14315 	stw	r7,1292(sp)
    201c:	003e2006 	br	18a0 <___vfprintf_internal_r+0x107c>
    2020:	0005883a 	mov	r2,zero
    2024:	1409c83a 	sub	r4,r2,r16
    2028:	1105803a 	cmpltu	r2,r2,r4
    202c:	044bc83a 	sub	r5,zero,r17
    2030:	2885c83a 	sub	r2,r5,r2
    2034:	2021883a 	mov	r16,r4
    2038:	1023883a 	mov	r17,r2
    203c:	01000044 	movi	r4,1
    2040:	00800b44 	movi	r2,45
    2044:	d8800405 	stb	r2,16(sp)
    2048:	003c8406 	br	125c <___vfprintf_internal_r+0xa38>
    204c:	d9014f17 	ldw	r4,1340(sp)
    2050:	b00b883a 	mov	r5,r22
    2054:	d9800c04 	addi	r6,sp,48
    2058:	00007cc0 	call	7cc <__sprint_r>
    205c:	103ba91e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
    2060:	dc800e17 	ldw	r18,56(sp)
    2064:	dc400d17 	ldw	r17,52(sp)
    2068:	d9000517 	ldw	r4,20(sp)
    206c:	d9401904 	addi	r5,sp,100
    2070:	003da706 	br	1710 <___vfprintf_internal_r+0xeec>
    2074:	d9014f17 	ldw	r4,1340(sp)
    2078:	b00b883a 	mov	r5,r22
    207c:	d9800c04 	addi	r6,sp,48
    2080:	00007cc0 	call	7cc <__sprint_r>
    2084:	103b9f1e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
    2088:	dc800e17 	ldw	r18,56(sp)
    208c:	dc400d17 	ldw	r17,52(sp)
    2090:	d9000517 	ldw	r4,20(sp)
    2094:	d8c01904 	addi	r3,sp,100
    2098:	003d9106 	br	16e0 <___vfprintf_internal_r+0xebc>
    209c:	07000074 	movhi	fp,1
    20a0:	e7002c84 	addi	fp,fp,178
    20a4:	9425883a 	add	r18,r18,r16
    20a8:	8c400044 	addi	r17,r17,1
    20ac:	008001c4 	movi	r2,7
    20b0:	1f000015 	stw	fp,0(r3)
    20b4:	1c000115 	stw	r16,4(r3)
    20b8:	dc800e15 	stw	r18,56(sp)
    20bc:	dc400d15 	stw	r17,52(sp)
    20c0:	147fbc16 	blt	r2,r17,1fb4 <___vfprintf_internal_r+0x1790>
    20c4:	18c00204 	addi	r3,r3,8
    20c8:	003fc206 	br	1fd4 <___vfprintf_internal_r+0x17b0>
    20cc:	d9014f17 	ldw	r4,1340(sp)
    20d0:	b00b883a 	mov	r5,r22
    20d4:	d9800c04 	addi	r6,sp,48
    20d8:	00007cc0 	call	7cc <__sprint_r>
    20dc:	103b891e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
    20e0:	dc800e17 	ldw	r18,56(sp)
    20e4:	d9000517 	ldw	r4,20(sp)
    20e8:	d8c01904 	addi	r3,sp,100
    20ec:	003d0206 	br	14f8 <___vfprintf_internal_r+0xcd4>
    20f0:	07000074 	movhi	fp,1
    20f4:	e7002c84 	addi	fp,fp,178
    20f8:	003be406 	br	108c <___vfprintf_internal_r+0x868>
    20fc:	00800074 	movhi	r2,1
    2100:	10801b04 	addi	r2,r2,108
    2104:	d8814115 	stw	r2,1284(sp)
    2108:	003df506 	br	18e0 <___vfprintf_internal_r+0x10bc>
    210c:	d9014217 	ldw	r4,1288(sp)
    2110:	d9414317 	ldw	r5,1292(sp)
    2114:	00072040 	call	7204 <__isnand>
    2118:	10003926 	beq	r2,zero,2200 <___vfprintf_internal_r+0x19dc>
    211c:	d9414d17 	ldw	r5,1332(sp)
    2120:	008011c4 	movi	r2,71
    2124:	1140ce16 	blt	r2,r5,2460 <___vfprintf_internal_r+0x1c3c>
    2128:	01800074 	movhi	r6,1
    212c:	31801c04 	addi	r6,r6,112
    2130:	d9814115 	stw	r6,1284(sp)
    2134:	003dea06 	br	18e0 <___vfprintf_internal_r+0x10bc>
    2138:	d9014c17 	ldw	r4,1328(sp)
    213c:	bdc00044 	addi	r23,r23,1
    2140:	b8c00007 	ldb	r3,0(r23)
    2144:	21000814 	ori	r4,r4,32
    2148:	d9014c15 	stw	r4,1328(sp)
    214c:	003a3406 	br	a20 <___vfprintf_internal_r+0x1fc>
    2150:	dcc14515 	stw	r19,1300(sp)
    2154:	98011016 	blt	r19,zero,2598 <___vfprintf_internal_r+0x1d74>
    2158:	980f883a 	mov	r7,r19
    215c:	d8014615 	stw	zero,1304(sp)
    2160:	003c5206 	br	12ac <___vfprintf_internal_r+0xa88>
    2164:	d9014f17 	ldw	r4,1340(sp)
    2168:	b00b883a 	mov	r5,r22
    216c:	d9800c04 	addi	r6,sp,48
    2170:	00007cc0 	call	7cc <__sprint_r>
    2174:	103b631e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
    2178:	dc800e17 	ldw	r18,56(sp)
    217c:	d9000517 	ldw	r4,20(sp)
    2180:	d8c01904 	addi	r3,sp,100
    2184:	003f2e06 	br	1e40 <___vfprintf_internal_r+0x161c>
    2188:	d8c14c17 	ldw	r3,1328(sp)
    218c:	1880100c 	andi	r2,r3,64
    2190:	1000a026 	beq	r2,zero,2414 <___vfprintf_internal_r+0x1bf0>
    2194:	38800017 	ldw	r2,0(r7)
    2198:	39c00104 	addi	r7,r7,4
    219c:	d9c14015 	stw	r7,1280(sp)
    21a0:	d9014b17 	ldw	r4,1324(sp)
    21a4:	d9c14017 	ldw	r7,1280(sp)
    21a8:	1100000d 	sth	r4,0(r2)
    21ac:	0039f906 	br	994 <___vfprintf_internal_r+0x170>
    21b0:	d9014f17 	ldw	r4,1340(sp)
    21b4:	b00b883a 	mov	r5,r22
    21b8:	d9800c04 	addi	r6,sp,48
    21bc:	00007cc0 	call	7cc <__sprint_r>
    21c0:	103b501e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
    21c4:	dc800e17 	ldw	r18,56(sp)
    21c8:	dc400d17 	ldw	r17,52(sp)
    21cc:	d9000517 	ldw	r4,20(sp)
    21d0:	d8c01904 	addi	r3,sp,100
    21d4:	003f2d06 	br	1e8c <___vfprintf_internal_r+0x1668>
    21d8:	00800184 	movi	r2,6
    21dc:	14c09a36 	bltu	r2,r19,2448 <___vfprintf_internal_r+0x1c24>
    21e0:	dcc14515 	stw	r19,1300(sp)
    21e4:	9800010e 	bge	r19,zero,21ec <___vfprintf_internal_r+0x19c8>
    21e8:	d8014515 	stw	zero,1300(sp)
    21ec:	00800074 	movhi	r2,1
    21f0:	10801e04 	addi	r2,r2,120
    21f4:	980f883a 	mov	r7,r19
    21f8:	d8814115 	stw	r2,1284(sp)
    21fc:	003a7806 	br	be0 <___vfprintf_internal_r+0x3bc>
    2200:	00bfffc4 	movi	r2,-1
    2204:	9880e226 	beq	r19,r2,2590 <___vfprintf_internal_r+0x1d6c>
    2208:	d9414d17 	ldw	r5,1332(sp)
    220c:	008019c4 	movi	r2,103
    2210:	2880dc26 	beq	r5,r2,2584 <___vfprintf_internal_r+0x1d60>
    2214:	008011c4 	movi	r2,71
    2218:	2880da26 	beq	r5,r2,2584 <___vfprintf_internal_r+0x1d60>
    221c:	d9414c17 	ldw	r5,1328(sp)
    2220:	d9014317 	ldw	r4,1292(sp)
    2224:	d9814217 	ldw	r6,1288(sp)
    2228:	29404014 	ori	r5,r5,256
    222c:	d9414c15 	stw	r5,1328(sp)
    2230:	2000cc16 	blt	r4,zero,2564 <___vfprintf_internal_r+0x1d40>
    2234:	3021883a 	mov	r16,r6
    2238:	2023883a 	mov	r17,r4
    223c:	0039883a 	mov	fp,zero
    2240:	d9414d17 	ldw	r5,1332(sp)
    2244:	00801984 	movi	r2,102
    2248:	2880b726 	beq	r5,r2,2528 <___vfprintf_internal_r+0x1d04>
    224c:	00801184 	movi	r2,70
    2250:	2880b526 	beq	r5,r2,2528 <___vfprintf_internal_r+0x1d04>
    2254:	00801944 	movi	r2,101
    2258:	2880c826 	beq	r5,r2,257c <___vfprintf_internal_r+0x1d58>
    225c:	00801144 	movi	r2,69
    2260:	2880c626 	beq	r5,r2,257c <___vfprintf_internal_r+0x1d58>
    2264:	9829883a 	mov	r20,r19
    2268:	d9014f17 	ldw	r4,1340(sp)
    226c:	d8800504 	addi	r2,sp,20
    2270:	880d883a 	mov	r6,r17
    2274:	d8800115 	stw	r2,4(sp)
    2278:	d8c00604 	addi	r3,sp,24
    227c:	d8800704 	addi	r2,sp,28
    2280:	800b883a 	mov	r5,r16
    2284:	01c00084 	movi	r7,2
    2288:	d8c00215 	stw	r3,8(sp)
    228c:	d8800315 	stw	r2,12(sp)
    2290:	dd000015 	stw	r20,0(sp)
    2294:	0002a480 	call	2a48 <_dtoa_r>
    2298:	d9814d17 	ldw	r6,1332(sp)
    229c:	d8814115 	stw	r2,1284(sp)
    22a0:	008019c4 	movi	r2,103
    22a4:	30809526 	beq	r6,r2,24fc <___vfprintf_internal_r+0x1cd8>
    22a8:	d8c14d17 	ldw	r3,1332(sp)
    22ac:	008011c4 	movi	r2,71
    22b0:	18809226 	beq	r3,r2,24fc <___vfprintf_internal_r+0x1cd8>
    22b4:	d9414117 	ldw	r5,1284(sp)
    22b8:	d9814d17 	ldw	r6,1332(sp)
    22bc:	00801984 	movi	r2,102
    22c0:	2d25883a 	add	r18,r5,r20
    22c4:	30808626 	beq	r6,r2,24e0 <___vfprintf_internal_r+0x1cbc>
    22c8:	00801184 	movi	r2,70
    22cc:	30808426 	beq	r6,r2,24e0 <___vfprintf_internal_r+0x1cbc>
    22d0:	000d883a 	mov	r6,zero
    22d4:	000f883a 	mov	r7,zero
    22d8:	880b883a 	mov	r5,r17
    22dc:	8009883a 	mov	r4,r16
    22e0:	0008fec0 	call	8fec <__eqdf2>
    22e4:	1000751e 	bne	r2,zero,24bc <___vfprintf_internal_r+0x1c98>
    22e8:	9005883a 	mov	r2,r18
    22ec:	dc800715 	stw	r18,28(sp)
    22f0:	d9014117 	ldw	r4,1284(sp)
    22f4:	d9414d17 	ldw	r5,1332(sp)
    22f8:	00c019c4 	movi	r3,103
    22fc:	1125c83a 	sub	r18,r2,r4
    2300:	28c06826 	beq	r5,r3,24a4 <___vfprintf_internal_r+0x1c80>
    2304:	008011c4 	movi	r2,71
    2308:	28806626 	beq	r5,r2,24a4 <___vfprintf_internal_r+0x1c80>
    230c:	d9000517 	ldw	r4,20(sp)
    2310:	d8c14d17 	ldw	r3,1332(sp)
    2314:	00801944 	movi	r2,101
    2318:	10c05516 	blt	r2,r3,2470 <___vfprintf_internal_r+0x1c4c>
    231c:	213fffc4 	addi	r4,r4,-1
    2320:	d9000515 	stw	r4,20(sp)
    2324:	d8c00805 	stb	r3,32(sp)
    2328:	2021883a 	mov	r16,r4
    232c:	2000c116 	blt	r4,zero,2634 <___vfprintf_internal_r+0x1e10>
    2330:	00800ac4 	movi	r2,43
    2334:	d8800845 	stb	r2,33(sp)
    2338:	00800244 	movi	r2,9
    233c:	1400af0e 	bge	r2,r16,25fc <___vfprintf_internal_r+0x1dd8>
    2340:	1027883a 	mov	r19,r2
    2344:	dc400b84 	addi	r17,sp,46
    2348:	8009883a 	mov	r4,r16
    234c:	01400284 	movi	r5,10
    2350:	00096d40 	call	96d4 <__modsi3>
    2354:	10800c04 	addi	r2,r2,48
    2358:	8c7fffc4 	addi	r17,r17,-1
    235c:	8009883a 	mov	r4,r16
    2360:	01400284 	movi	r5,10
    2364:	88800005 	stb	r2,0(r17)
    2368:	00096740 	call	9674 <__divsi3>
    236c:	1021883a 	mov	r16,r2
    2370:	98bff516 	blt	r19,r2,2348 <___vfprintf_internal_r+0x1b24>
    2374:	10c00c04 	addi	r3,r2,48
    2378:	d88009c4 	addi	r2,sp,39
    237c:	108001c4 	addi	r2,r2,7
    2380:	897fffc4 	addi	r5,r17,-1
    2384:	88ffffc5 	stb	r3,-1(r17)
    2388:	2880a72e 	bgeu	r5,r2,2628 <___vfprintf_internal_r+0x1e04>
    238c:	1009883a 	mov	r4,r2
    2390:	d9800804 	addi	r6,sp,32
    2394:	d8c00884 	addi	r3,sp,34
    2398:	28800003 	ldbu	r2,0(r5)
    239c:	29400044 	addi	r5,r5,1
    23a0:	18800005 	stb	r2,0(r3)
    23a4:	18c00044 	addi	r3,r3,1
    23a8:	293ffb36 	bltu	r5,r4,2398 <___vfprintf_internal_r+0x1b74>
    23ac:	1987c83a 	sub	r3,r3,r6
    23b0:	00800044 	movi	r2,1
    23b4:	d8c14815 	stw	r3,1312(sp)
    23b8:	90cf883a 	add	r7,r18,r3
    23bc:	1480960e 	bge	r2,r18,2618 <___vfprintf_internal_r+0x1df4>
    23c0:	39c00044 	addi	r7,r7,1
    23c4:	d9c14515 	stw	r7,1300(sp)
    23c8:	38003416 	blt	r7,zero,249c <___vfprintf_internal_r+0x1c78>
    23cc:	e0803fcc 	andi	r2,fp,255
    23d0:	1080201c 	xori	r2,r2,128
    23d4:	10bfe004 	addi	r2,r2,-128
    23d8:	10004e26 	beq	r2,zero,2514 <___vfprintf_internal_r+0x1cf0>
    23dc:	00800b44 	movi	r2,45
    23e0:	dc814715 	stw	r18,1308(sp)
    23e4:	d8014615 	stw	zero,1304(sp)
    23e8:	d8800405 	stb	r2,16(sp)
    23ec:	003bb106 	br	12b4 <___vfprintf_internal_r+0xa90>
    23f0:	00800b44 	movi	r2,45
    23f4:	d8800405 	stb	r2,16(sp)
    23f8:	003d3306 	br	18c8 <___vfprintf_internal_r+0x10a4>
    23fc:	d9014f17 	ldw	r4,1340(sp)
    2400:	b00b883a 	mov	r5,r22
    2404:	d9800c04 	addi	r6,sp,48
    2408:	00007cc0 	call	7cc <__sprint_r>
    240c:	103abd1e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x6e0>
    2410:	003abb06 	br	f00 <___vfprintf_internal_r+0x6dc>
    2414:	38800017 	ldw	r2,0(r7)
    2418:	39c00104 	addi	r7,r7,4
    241c:	d9c14015 	stw	r7,1280(sp)
    2420:	d9414b17 	ldw	r5,1324(sp)
    2424:	d9c14017 	ldw	r7,1280(sp)
    2428:	11400015 	stw	r5,0(r2)
    242c:	00395906 	br	994 <___vfprintf_internal_r+0x170>
    2430:	980f883a 	mov	r7,r19
    2434:	dcc14515 	stw	r19,1300(sp)
    2438:	d8014615 	stw	zero,1304(sp)
    243c:	003b9b06 	br	12ac <___vfprintf_internal_r+0xa88>
    2440:	0027883a 	mov	r19,zero
    2444:	00397806 	br	a28 <___vfprintf_internal_r+0x204>
    2448:	00c00074 	movhi	r3,1
    244c:	18c01e04 	addi	r3,r3,120
    2450:	100f883a 	mov	r7,r2
    2454:	d8814515 	stw	r2,1300(sp)
    2458:	d8c14115 	stw	r3,1284(sp)
    245c:	0039e006 	br	be0 <___vfprintf_internal_r+0x3bc>
    2460:	00800074 	movhi	r2,1
    2464:	10801d04 	addi	r2,r2,116
    2468:	d8814115 	stw	r2,1284(sp)
    246c:	003d1c06 	br	18e0 <___vfprintf_internal_r+0x10bc>
    2470:	d9414d17 	ldw	r5,1332(sp)
    2474:	00801984 	movi	r2,102
    2478:	28804926 	beq	r5,r2,25a0 <___vfprintf_internal_r+0x1d7c>
    247c:	200f883a 	mov	r7,r4
    2480:	24805716 	blt	r4,r18,25e0 <___vfprintf_internal_r+0x1dbc>
    2484:	d9414c17 	ldw	r5,1328(sp)
    2488:	2880004c 	andi	r2,r5,1
    248c:	10000126 	beq	r2,zero,2494 <___vfprintf_internal_r+0x1c70>
    2490:	21c00044 	addi	r7,r4,1
    2494:	d9c14515 	stw	r7,1300(sp)
    2498:	383fcc0e 	bge	r7,zero,23cc <___vfprintf_internal_r+0x1ba8>
    249c:	d8014515 	stw	zero,1300(sp)
    24a0:	003fca06 	br	23cc <___vfprintf_internal_r+0x1ba8>
    24a4:	d9000517 	ldw	r4,20(sp)
    24a8:	00bfff04 	movi	r2,-4
    24ac:	1100480e 	bge	r2,r4,25d0 <___vfprintf_internal_r+0x1dac>
    24b0:	99004716 	blt	r19,r4,25d0 <___vfprintf_internal_r+0x1dac>
    24b4:	d8c14d15 	stw	r3,1332(sp)
    24b8:	003ff006 	br	247c <___vfprintf_internal_r+0x1c58>
    24bc:	d8800717 	ldw	r2,28(sp)
    24c0:	14bf8b2e 	bgeu	r2,r18,22f0 <___vfprintf_internal_r+0x1acc>
    24c4:	9007883a 	mov	r3,r18
    24c8:	01000c04 	movi	r4,48
    24cc:	11000005 	stb	r4,0(r2)
    24d0:	10800044 	addi	r2,r2,1
    24d4:	d8800715 	stw	r2,28(sp)
    24d8:	18bffc1e 	bne	r3,r2,24cc <___vfprintf_internal_r+0x1ca8>
    24dc:	003f8406 	br	22f0 <___vfprintf_internal_r+0x1acc>
    24e0:	d8814117 	ldw	r2,1284(sp)
    24e4:	10c00007 	ldb	r3,0(r2)
    24e8:	00800c04 	movi	r2,48
    24ec:	18805b26 	beq	r3,r2,265c <___vfprintf_internal_r+0x1e38>
    24f0:	d9000517 	ldw	r4,20(sp)
    24f4:	9125883a 	add	r18,r18,r4
    24f8:	003f7506 	br	22d0 <___vfprintf_internal_r+0x1aac>
    24fc:	d9014c17 	ldw	r4,1328(sp)
    2500:	2080004c 	andi	r2,r4,1
    2504:	1005003a 	cmpeq	r2,r2,zero
    2508:	103f6a26 	beq	r2,zero,22b4 <___vfprintf_internal_r+0x1a90>
    250c:	d8800717 	ldw	r2,28(sp)
    2510:	003f7706 	br	22f0 <___vfprintf_internal_r+0x1acc>
    2514:	d9c14515 	stw	r7,1300(sp)
    2518:	38004d16 	blt	r7,zero,2650 <___vfprintf_internal_r+0x1e2c>
    251c:	dc814715 	stw	r18,1308(sp)
    2520:	d8014615 	stw	zero,1304(sp)
    2524:	003b6106 	br	12ac <___vfprintf_internal_r+0xa88>
    2528:	d9014f17 	ldw	r4,1340(sp)
    252c:	d8800504 	addi	r2,sp,20
    2530:	d8800115 	stw	r2,4(sp)
    2534:	d8c00604 	addi	r3,sp,24
    2538:	d8800704 	addi	r2,sp,28
    253c:	800b883a 	mov	r5,r16
    2540:	880d883a 	mov	r6,r17
    2544:	01c000c4 	movi	r7,3
    2548:	d8c00215 	stw	r3,8(sp)
    254c:	d8800315 	stw	r2,12(sp)
    2550:	dcc00015 	stw	r19,0(sp)
    2554:	9829883a 	mov	r20,r19
    2558:	0002a480 	call	2a48 <_dtoa_r>
    255c:	d8814115 	stw	r2,1284(sp)
    2560:	003f5106 	br	22a8 <___vfprintf_internal_r+0x1a84>
    2564:	d8c14217 	ldw	r3,1288(sp)
    2568:	d9014317 	ldw	r4,1292(sp)
    256c:	07000b44 	movi	fp,45
    2570:	1821883a 	mov	r16,r3
    2574:	2460003c 	xorhi	r17,r4,32768
    2578:	003f3106 	br	2240 <___vfprintf_internal_r+0x1a1c>
    257c:	9d000044 	addi	r20,r19,1
    2580:	003f3906 	br	2268 <___vfprintf_internal_r+0x1a44>
    2584:	983f251e 	bne	r19,zero,221c <___vfprintf_internal_r+0x19f8>
    2588:	04c00044 	movi	r19,1
    258c:	003f2306 	br	221c <___vfprintf_internal_r+0x19f8>
    2590:	04c00184 	movi	r19,6
    2594:	003f2106 	br	221c <___vfprintf_internal_r+0x19f8>
    2598:	d8014515 	stw	zero,1300(sp)
    259c:	003eee06 	br	2158 <___vfprintf_internal_r+0x1934>
    25a0:	200f883a 	mov	r7,r4
    25a4:	0100370e 	bge	zero,r4,2684 <___vfprintf_internal_r+0x1e60>
    25a8:	9800031e 	bne	r19,zero,25b8 <___vfprintf_internal_r+0x1d94>
    25ac:	d9814c17 	ldw	r6,1328(sp)
    25b0:	3080004c 	andi	r2,r6,1
    25b4:	103fb726 	beq	r2,zero,2494 <___vfprintf_internal_r+0x1c70>
    25b8:	20800044 	addi	r2,r4,1
    25bc:	98a7883a 	add	r19,r19,r2
    25c0:	dcc14515 	stw	r19,1300(sp)
    25c4:	980f883a 	mov	r7,r19
    25c8:	983f800e 	bge	r19,zero,23cc <___vfprintf_internal_r+0x1ba8>
    25cc:	003fb306 	br	249c <___vfprintf_internal_r+0x1c78>
    25d0:	d9814d17 	ldw	r6,1332(sp)
    25d4:	31bfff84 	addi	r6,r6,-2
    25d8:	d9814d15 	stw	r6,1332(sp)
    25dc:	003f4c06 	br	2310 <___vfprintf_internal_r+0x1aec>
    25e0:	0100180e 	bge	zero,r4,2644 <___vfprintf_internal_r+0x1e20>
    25e4:	00800044 	movi	r2,1
    25e8:	1485883a 	add	r2,r2,r18
    25ec:	d8814515 	stw	r2,1300(sp)
    25f0:	100f883a 	mov	r7,r2
    25f4:	103f750e 	bge	r2,zero,23cc <___vfprintf_internal_r+0x1ba8>
    25f8:	003fa806 	br	249c <___vfprintf_internal_r+0x1c78>
    25fc:	80c00c04 	addi	r3,r16,48
    2600:	00800c04 	movi	r2,48
    2604:	d8c008c5 	stb	r3,35(sp)
    2608:	d9800804 	addi	r6,sp,32
    260c:	d8c00904 	addi	r3,sp,36
    2610:	d8800885 	stb	r2,34(sp)
    2614:	003f6506 	br	23ac <___vfprintf_internal_r+0x1b88>
    2618:	d9014c17 	ldw	r4,1328(sp)
    261c:	2084703a 	and	r2,r4,r2
    2620:	103f9c26 	beq	r2,zero,2494 <___vfprintf_internal_r+0x1c70>
    2624:	003f6606 	br	23c0 <___vfprintf_internal_r+0x1b9c>
    2628:	d9800804 	addi	r6,sp,32
    262c:	d8c00884 	addi	r3,sp,34
    2630:	003f5e06 	br	23ac <___vfprintf_internal_r+0x1b88>
    2634:	00800b44 	movi	r2,45
    2638:	0121c83a 	sub	r16,zero,r4
    263c:	d8800845 	stb	r2,33(sp)
    2640:	003f3d06 	br	2338 <___vfprintf_internal_r+0x1b14>
    2644:	00800084 	movi	r2,2
    2648:	1105c83a 	sub	r2,r2,r4
    264c:	003fe606 	br	25e8 <___vfprintf_internal_r+0x1dc4>
    2650:	d8014515 	stw	zero,1300(sp)
    2654:	dc814715 	stw	r18,1308(sp)
    2658:	003fb106 	br	2520 <___vfprintf_internal_r+0x1cfc>
    265c:	000d883a 	mov	r6,zero
    2660:	000f883a 	mov	r7,zero
    2664:	8009883a 	mov	r4,r16
    2668:	880b883a 	mov	r5,r17
    266c:	00090740 	call	9074 <__nedf2>
    2670:	103f9f26 	beq	r2,zero,24f0 <___vfprintf_internal_r+0x1ccc>
    2674:	00800044 	movi	r2,1
    2678:	1509c83a 	sub	r4,r2,r20
    267c:	d9000515 	stw	r4,20(sp)
    2680:	003f9b06 	br	24f0 <___vfprintf_internal_r+0x1ccc>
    2684:	98000d1e 	bne	r19,zero,26bc <___vfprintf_internal_r+0x1e98>
    2688:	d8c14c17 	ldw	r3,1328(sp)
    268c:	1880004c 	andi	r2,r3,1
    2690:	10000a1e 	bne	r2,zero,26bc <___vfprintf_internal_r+0x1e98>
    2694:	01000044 	movi	r4,1
    2698:	200f883a 	mov	r7,r4
    269c:	d9014515 	stw	r4,1300(sp)
    26a0:	003f4a06 	br	23cc <___vfprintf_internal_r+0x1ba8>
    26a4:	3cc00017 	ldw	r19,0(r7)
    26a8:	39c00104 	addi	r7,r7,4
    26ac:	983d0e0e 	bge	r19,zero,1ae8 <___vfprintf_internal_r+0x12c4>
    26b0:	b8c00007 	ldb	r3,0(r23)
    26b4:	04ffffc4 	movi	r19,-1
    26b8:	0038d906 	br	a20 <___vfprintf_internal_r+0x1fc>
    26bc:	9cc00084 	addi	r19,r19,2
    26c0:	dcc14515 	stw	r19,1300(sp)
    26c4:	980f883a 	mov	r7,r19
    26c8:	983f400e 	bge	r19,zero,23cc <___vfprintf_internal_r+0x1ba8>
    26cc:	003f7306 	br	249c <___vfprintf_internal_r+0x1c78>

000026d0 <__vfprintf_internal>:
    26d0:	00800074 	movhi	r2,1
    26d4:	10876c04 	addi	r2,r2,7600
    26d8:	2013883a 	mov	r9,r4
    26dc:	11000017 	ldw	r4,0(r2)
    26e0:	2805883a 	mov	r2,r5
    26e4:	300f883a 	mov	r7,r6
    26e8:	480b883a 	mov	r5,r9
    26ec:	100d883a 	mov	r6,r2
    26f0:	00008241 	jmpi	824 <___vfprintf_internal_r>

000026f4 <__swsetup_r>:
    26f4:	00800074 	movhi	r2,1
    26f8:	10876c04 	addi	r2,r2,7600
    26fc:	10c00017 	ldw	r3,0(r2)
    2700:	defffd04 	addi	sp,sp,-12
    2704:	dc400115 	stw	r17,4(sp)
    2708:	dc000015 	stw	r16,0(sp)
    270c:	dfc00215 	stw	ra,8(sp)
    2710:	2023883a 	mov	r17,r4
    2714:	2821883a 	mov	r16,r5
    2718:	18000226 	beq	r3,zero,2724 <__swsetup_r+0x30>
    271c:	18800e17 	ldw	r2,56(r3)
    2720:	10001f26 	beq	r2,zero,27a0 <__swsetup_r+0xac>
    2724:	8100030b 	ldhu	r4,12(r16)
    2728:	2080020c 	andi	r2,r4,8
    272c:	10002826 	beq	r2,zero,27d0 <__swsetup_r+0xdc>
    2730:	81400417 	ldw	r5,16(r16)
    2734:	28001d26 	beq	r5,zero,27ac <__swsetup_r+0xb8>
    2738:	2080004c 	andi	r2,r4,1
    273c:	1005003a 	cmpeq	r2,r2,zero
    2740:	10000b26 	beq	r2,zero,2770 <__swsetup_r+0x7c>
    2744:	2080008c 	andi	r2,r4,2
    2748:	10001226 	beq	r2,zero,2794 <__swsetup_r+0xa0>
    274c:	0005883a 	mov	r2,zero
    2750:	80800215 	stw	r2,8(r16)
    2754:	28000b26 	beq	r5,zero,2784 <__swsetup_r+0x90>
    2758:	0005883a 	mov	r2,zero
    275c:	dfc00217 	ldw	ra,8(sp)
    2760:	dc400117 	ldw	r17,4(sp)
    2764:	dc000017 	ldw	r16,0(sp)
    2768:	dec00304 	addi	sp,sp,12
    276c:	f800283a 	ret
    2770:	80800517 	ldw	r2,20(r16)
    2774:	80000215 	stw	zero,8(r16)
    2778:	0085c83a 	sub	r2,zero,r2
    277c:	80800615 	stw	r2,24(r16)
    2780:	283ff51e 	bne	r5,zero,2758 <__swsetup_r+0x64>
    2784:	2080200c 	andi	r2,r4,128
    2788:	103ff326 	beq	r2,zero,2758 <__swsetup_r+0x64>
    278c:	00bfffc4 	movi	r2,-1
    2790:	003ff206 	br	275c <__swsetup_r+0x68>
    2794:	80800517 	ldw	r2,20(r16)
    2798:	80800215 	stw	r2,8(r16)
    279c:	003fed06 	br	2754 <__swsetup_r+0x60>
    27a0:	1809883a 	mov	r4,r3
    27a4:	00042940 	call	4294 <__sinit>
    27a8:	003fde06 	br	2724 <__swsetup_r+0x30>
    27ac:	20c0a00c 	andi	r3,r4,640
    27b0:	00808004 	movi	r2,512
    27b4:	18bfe026 	beq	r3,r2,2738 <__swsetup_r+0x44>
    27b8:	8809883a 	mov	r4,r17
    27bc:	800b883a 	mov	r5,r16
    27c0:	000500c0 	call	500c <__smakebuf_r>
    27c4:	8100030b 	ldhu	r4,12(r16)
    27c8:	81400417 	ldw	r5,16(r16)
    27cc:	003fda06 	br	2738 <__swsetup_r+0x44>
    27d0:	2080040c 	andi	r2,r4,16
    27d4:	103fed26 	beq	r2,zero,278c <__swsetup_r+0x98>
    27d8:	2080010c 	andi	r2,r4,4
    27dc:	10001226 	beq	r2,zero,2828 <__swsetup_r+0x134>
    27e0:	81400c17 	ldw	r5,48(r16)
    27e4:	28000526 	beq	r5,zero,27fc <__swsetup_r+0x108>
    27e8:	80801004 	addi	r2,r16,64
    27ec:	28800226 	beq	r5,r2,27f8 <__swsetup_r+0x104>
    27f0:	8809883a 	mov	r4,r17
    27f4:	00046180 	call	4618 <_free_r>
    27f8:	80000c15 	stw	zero,48(r16)
    27fc:	8080030b 	ldhu	r2,12(r16)
    2800:	81400417 	ldw	r5,16(r16)
    2804:	80000115 	stw	zero,4(r16)
    2808:	10bff6cc 	andi	r2,r2,65499
    280c:	8080030d 	sth	r2,12(r16)
    2810:	81400015 	stw	r5,0(r16)
    2814:	8080030b 	ldhu	r2,12(r16)
    2818:	10800214 	ori	r2,r2,8
    281c:	113fffcc 	andi	r4,r2,65535
    2820:	8080030d 	sth	r2,12(r16)
    2824:	003fc306 	br	2734 <__swsetup_r+0x40>
    2828:	81400417 	ldw	r5,16(r16)
    282c:	003ff906 	br	2814 <__swsetup_r+0x120>

00002830 <quorem>:
    2830:	28c00417 	ldw	r3,16(r5)
    2834:	20800417 	ldw	r2,16(r4)
    2838:	defff604 	addi	sp,sp,-40
    283c:	ddc00715 	stw	r23,28(sp)
    2840:	dd400515 	stw	r21,20(sp)
    2844:	dfc00915 	stw	ra,36(sp)
    2848:	df000815 	stw	fp,32(sp)
    284c:	dd800615 	stw	r22,24(sp)
    2850:	dd000415 	stw	r20,16(sp)
    2854:	dcc00315 	stw	r19,12(sp)
    2858:	dc800215 	stw	r18,8(sp)
    285c:	dc400115 	stw	r17,4(sp)
    2860:	dc000015 	stw	r16,0(sp)
    2864:	202f883a 	mov	r23,r4
    2868:	282b883a 	mov	r21,r5
    286c:	10c07416 	blt	r2,r3,2a40 <quorem+0x210>
    2870:	1c7fffc4 	addi	r17,r3,-1
    2874:	8c45883a 	add	r2,r17,r17
    2878:	1085883a 	add	r2,r2,r2
    287c:	2c000504 	addi	r16,r5,20
    2880:	24c00504 	addi	r19,r4,20
    2884:	14ed883a 	add	r22,r2,r19
    2888:	80a5883a 	add	r18,r16,r2
    288c:	b7000017 	ldw	fp,0(r22)
    2890:	91400017 	ldw	r5,0(r18)
    2894:	e009883a 	mov	r4,fp
    2898:	29400044 	addi	r5,r5,1
    289c:	00097340 	call	9734 <__udivsi3>
    28a0:	1029883a 	mov	r20,r2
    28a4:	10003c1e 	bne	r2,zero,2998 <quorem+0x168>
    28a8:	a80b883a 	mov	r5,r21
    28ac:	b809883a 	mov	r4,r23
    28b0:	0005d380 	call	5d38 <__mcmp>
    28b4:	10002b16 	blt	r2,zero,2964 <quorem+0x134>
    28b8:	a5000044 	addi	r20,r20,1
    28bc:	980f883a 	mov	r7,r19
    28c0:	0011883a 	mov	r8,zero
    28c4:	0009883a 	mov	r4,zero
    28c8:	81400017 	ldw	r5,0(r16)
    28cc:	38c00017 	ldw	r3,0(r7)
    28d0:	84000104 	addi	r16,r16,4
    28d4:	28bfffcc 	andi	r2,r5,65535
    28d8:	2085883a 	add	r2,r4,r2
    28dc:	11bfffcc 	andi	r6,r2,65535
    28e0:	193fffcc 	andi	r4,r3,65535
    28e4:	1004d43a 	srli	r2,r2,16
    28e8:	280ad43a 	srli	r5,r5,16
    28ec:	2189c83a 	sub	r4,r4,r6
    28f0:	2209883a 	add	r4,r4,r8
    28f4:	1806d43a 	srli	r3,r3,16
    28f8:	288b883a 	add	r5,r5,r2
    28fc:	200dd43a 	srai	r6,r4,16
    2900:	28bfffcc 	andi	r2,r5,65535
    2904:	1887c83a 	sub	r3,r3,r2
    2908:	1987883a 	add	r3,r3,r6
    290c:	3900000d 	sth	r4,0(r7)
    2910:	38c0008d 	sth	r3,2(r7)
    2914:	2808d43a 	srli	r4,r5,16
    2918:	39c00104 	addi	r7,r7,4
    291c:	1811d43a 	srai	r8,r3,16
    2920:	943fe92e 	bgeu	r18,r16,28c8 <quorem+0x98>
    2924:	8c45883a 	add	r2,r17,r17
    2928:	1085883a 	add	r2,r2,r2
    292c:	9885883a 	add	r2,r19,r2
    2930:	10c00017 	ldw	r3,0(r2)
    2934:	18000b1e 	bne	r3,zero,2964 <quorem+0x134>
    2938:	113fff04 	addi	r4,r2,-4
    293c:	9900082e 	bgeu	r19,r4,2960 <quorem+0x130>
    2940:	10bfff17 	ldw	r2,-4(r2)
    2944:	10000326 	beq	r2,zero,2954 <quorem+0x124>
    2948:	00000506 	br	2960 <quorem+0x130>
    294c:	20800017 	ldw	r2,0(r4)
    2950:	1000031e 	bne	r2,zero,2960 <quorem+0x130>
    2954:	213fff04 	addi	r4,r4,-4
    2958:	8c7fffc4 	addi	r17,r17,-1
    295c:	993ffb36 	bltu	r19,r4,294c <quorem+0x11c>
    2960:	bc400415 	stw	r17,16(r23)
    2964:	a005883a 	mov	r2,r20
    2968:	dfc00917 	ldw	ra,36(sp)
    296c:	df000817 	ldw	fp,32(sp)
    2970:	ddc00717 	ldw	r23,28(sp)
    2974:	dd800617 	ldw	r22,24(sp)
    2978:	dd400517 	ldw	r21,20(sp)
    297c:	dd000417 	ldw	r20,16(sp)
    2980:	dcc00317 	ldw	r19,12(sp)
    2984:	dc800217 	ldw	r18,8(sp)
    2988:	dc400117 	ldw	r17,4(sp)
    298c:	dc000017 	ldw	r16,0(sp)
    2990:	dec00a04 	addi	sp,sp,40
    2994:	f800283a 	ret
    2998:	980f883a 	mov	r7,r19
    299c:	8011883a 	mov	r8,r16
    29a0:	0013883a 	mov	r9,zero
    29a4:	000d883a 	mov	r6,zero
    29a8:	40c00017 	ldw	r3,0(r8)
    29ac:	39000017 	ldw	r4,0(r7)
    29b0:	42000104 	addi	r8,r8,4
    29b4:	18bfffcc 	andi	r2,r3,65535
    29b8:	a085383a 	mul	r2,r20,r2
    29bc:	1806d43a 	srli	r3,r3,16
    29c0:	217fffcc 	andi	r5,r4,65535
    29c4:	3085883a 	add	r2,r6,r2
    29c8:	11bfffcc 	andi	r6,r2,65535
    29cc:	a0c7383a 	mul	r3,r20,r3
    29d0:	1004d43a 	srli	r2,r2,16
    29d4:	298bc83a 	sub	r5,r5,r6
    29d8:	2a4b883a 	add	r5,r5,r9
    29dc:	2008d43a 	srli	r4,r4,16
    29e0:	1887883a 	add	r3,r3,r2
    29e4:	280dd43a 	srai	r6,r5,16
    29e8:	18bfffcc 	andi	r2,r3,65535
    29ec:	2089c83a 	sub	r4,r4,r2
    29f0:	2189883a 	add	r4,r4,r6
    29f4:	3900008d 	sth	r4,2(r7)
    29f8:	3940000d 	sth	r5,0(r7)
    29fc:	180cd43a 	srli	r6,r3,16
    2a00:	39c00104 	addi	r7,r7,4
    2a04:	2013d43a 	srai	r9,r4,16
    2a08:	923fe72e 	bgeu	r18,r8,29a8 <quorem+0x178>
    2a0c:	e03fa61e 	bne	fp,zero,28a8 <quorem+0x78>
    2a10:	b0ffff04 	addi	r3,r22,-4
    2a14:	98c0082e 	bgeu	r19,r3,2a38 <quorem+0x208>
    2a18:	b0bfff17 	ldw	r2,-4(r22)
    2a1c:	10000326 	beq	r2,zero,2a2c <quorem+0x1fc>
    2a20:	00000506 	br	2a38 <quorem+0x208>
    2a24:	18800017 	ldw	r2,0(r3)
    2a28:	1000031e 	bne	r2,zero,2a38 <quorem+0x208>
    2a2c:	18ffff04 	addi	r3,r3,-4
    2a30:	8c7fffc4 	addi	r17,r17,-1
    2a34:	98fffb36 	bltu	r19,r3,2a24 <quorem+0x1f4>
    2a38:	bc400415 	stw	r17,16(r23)
    2a3c:	003f9a06 	br	28a8 <quorem+0x78>
    2a40:	0005883a 	mov	r2,zero
    2a44:	003fc806 	br	2968 <quorem+0x138>

00002a48 <_dtoa_r>:
    2a48:	22001017 	ldw	r8,64(r4)
    2a4c:	deffda04 	addi	sp,sp,-152
    2a50:	dd402115 	stw	r21,132(sp)
    2a54:	dd002015 	stw	r20,128(sp)
    2a58:	dc801e15 	stw	r18,120(sp)
    2a5c:	dc401d15 	stw	r17,116(sp)
    2a60:	dfc02515 	stw	ra,148(sp)
    2a64:	df002415 	stw	fp,144(sp)
    2a68:	ddc02315 	stw	r23,140(sp)
    2a6c:	dd802215 	stw	r22,136(sp)
    2a70:	dcc01f15 	stw	r19,124(sp)
    2a74:	dc001c15 	stw	r16,112(sp)
    2a78:	d9001615 	stw	r4,88(sp)
    2a7c:	3023883a 	mov	r17,r6
    2a80:	2829883a 	mov	r20,r5
    2a84:	d9c01715 	stw	r7,92(sp)
    2a88:	dc802817 	ldw	r18,160(sp)
    2a8c:	302b883a 	mov	r21,r6
    2a90:	40000a26 	beq	r8,zero,2abc <_dtoa_r+0x74>
    2a94:	20801117 	ldw	r2,68(r4)
    2a98:	400b883a 	mov	r5,r8
    2a9c:	40800115 	stw	r2,4(r8)
    2aa0:	20c01117 	ldw	r3,68(r4)
    2aa4:	00800044 	movi	r2,1
    2aa8:	10c4983a 	sll	r2,r2,r3
    2aac:	40800215 	stw	r2,8(r8)
    2ab0:	0005bdc0 	call	5bdc <_Bfree>
    2ab4:	d8c01617 	ldw	r3,88(sp)
    2ab8:	18001015 	stw	zero,64(r3)
    2abc:	8800a316 	blt	r17,zero,2d4c <_dtoa_r+0x304>
    2ac0:	90000015 	stw	zero,0(r18)
    2ac4:	a8dffc2c 	andhi	r3,r21,32752
    2ac8:	009ffc34 	movhi	r2,32752
    2acc:	18809126 	beq	r3,r2,2d14 <_dtoa_r+0x2cc>
    2ad0:	000d883a 	mov	r6,zero
    2ad4:	000f883a 	mov	r7,zero
    2ad8:	a009883a 	mov	r4,r20
    2adc:	a80b883a 	mov	r5,r21
    2ae0:	dd001215 	stw	r20,72(sp)
    2ae4:	dd401315 	stw	r21,76(sp)
    2ae8:	00090740 	call	9074 <__nedf2>
    2aec:	1000171e 	bne	r2,zero,2b4c <_dtoa_r+0x104>
    2af0:	d9802717 	ldw	r6,156(sp)
    2af4:	00800044 	movi	r2,1
    2af8:	30800015 	stw	r2,0(r6)
    2afc:	d8802917 	ldw	r2,164(sp)
    2b00:	10029b26 	beq	r2,zero,3570 <_dtoa_r+0xb28>
    2b04:	d9002917 	ldw	r4,164(sp)
    2b08:	00800074 	movhi	r2,1
    2b0c:	10802c44 	addi	r2,r2,177
    2b10:	10ffffc4 	addi	r3,r2,-1
    2b14:	20800015 	stw	r2,0(r4)
    2b18:	1805883a 	mov	r2,r3
    2b1c:	dfc02517 	ldw	ra,148(sp)
    2b20:	df002417 	ldw	fp,144(sp)
    2b24:	ddc02317 	ldw	r23,140(sp)
    2b28:	dd802217 	ldw	r22,136(sp)
    2b2c:	dd402117 	ldw	r21,132(sp)
    2b30:	dd002017 	ldw	r20,128(sp)
    2b34:	dcc01f17 	ldw	r19,124(sp)
    2b38:	dc801e17 	ldw	r18,120(sp)
    2b3c:	dc401d17 	ldw	r17,116(sp)
    2b40:	dc001c17 	ldw	r16,112(sp)
    2b44:	dec02604 	addi	sp,sp,152
    2b48:	f800283a 	ret
    2b4c:	d9001617 	ldw	r4,88(sp)
    2b50:	d9401217 	ldw	r5,72(sp)
    2b54:	d8800104 	addi	r2,sp,4
    2b58:	a80d883a 	mov	r6,r21
    2b5c:	d9c00204 	addi	r7,sp,8
    2b60:	d8800015 	stw	r2,0(sp)
    2b64:	00062180 	call	6218 <__d2b>
    2b68:	d8800715 	stw	r2,28(sp)
    2b6c:	a804d53a 	srli	r2,r21,20
    2b70:	1101ffcc 	andi	r4,r2,2047
    2b74:	20008626 	beq	r4,zero,2d90 <_dtoa_r+0x348>
    2b78:	d8c01217 	ldw	r3,72(sp)
    2b7c:	00800434 	movhi	r2,16
    2b80:	10bfffc4 	addi	r2,r2,-1
    2b84:	ddc00117 	ldw	r23,4(sp)
    2b88:	a884703a 	and	r2,r21,r2
    2b8c:	1811883a 	mov	r8,r3
    2b90:	124ffc34 	orhi	r9,r2,16368
    2b94:	25bf0044 	addi	r22,r4,-1023
    2b98:	d8000815 	stw	zero,32(sp)
    2b9c:	0005883a 	mov	r2,zero
    2ba0:	00cffe34 	movhi	r3,16376
    2ba4:	480b883a 	mov	r5,r9
    2ba8:	4009883a 	mov	r4,r8
    2bac:	180f883a 	mov	r7,r3
    2bb0:	100d883a 	mov	r6,r2
    2bb4:	00088dc0 	call	88dc <__subdf3>
    2bb8:	0218dbf4 	movhi	r8,25455
    2bbc:	4210d844 	addi	r8,r8,17249
    2bc0:	024ff4f4 	movhi	r9,16339
    2bc4:	4a61e9c4 	addi	r9,r9,-30809
    2bc8:	480f883a 	mov	r7,r9
    2bcc:	400d883a 	mov	r6,r8
    2bd0:	180b883a 	mov	r5,r3
    2bd4:	1009883a 	mov	r4,r2
    2bd8:	00089d00 	call	89d0 <__muldf3>
    2bdc:	0222d874 	movhi	r8,35681
    2be0:	42322cc4 	addi	r8,r8,-14157
    2be4:	024ff1f4 	movhi	r9,16327
    2be8:	4a628a04 	addi	r9,r9,-30168
    2bec:	480f883a 	mov	r7,r9
    2bf0:	400d883a 	mov	r6,r8
    2bf4:	180b883a 	mov	r5,r3
    2bf8:	1009883a 	mov	r4,r2
    2bfc:	000895c0 	call	895c <__adddf3>
    2c00:	b009883a 	mov	r4,r22
    2c04:	1021883a 	mov	r16,r2
    2c08:	1823883a 	mov	r17,r3
    2c0c:	00092940 	call	9294 <__floatsidf>
    2c10:	021427f4 	movhi	r8,20639
    2c14:	421e7ec4 	addi	r8,r8,31227
    2c18:	024ff4f4 	movhi	r9,16339
    2c1c:	4a5104c4 	addi	r9,r9,17427
    2c20:	480f883a 	mov	r7,r9
    2c24:	400d883a 	mov	r6,r8
    2c28:	180b883a 	mov	r5,r3
    2c2c:	1009883a 	mov	r4,r2
    2c30:	00089d00 	call	89d0 <__muldf3>
    2c34:	180f883a 	mov	r7,r3
    2c38:	880b883a 	mov	r5,r17
    2c3c:	100d883a 	mov	r6,r2
    2c40:	8009883a 	mov	r4,r16
    2c44:	000895c0 	call	895c <__adddf3>
    2c48:	1009883a 	mov	r4,r2
    2c4c:	180b883a 	mov	r5,r3
    2c50:	1021883a 	mov	r16,r2
    2c54:	1823883a 	mov	r17,r3
    2c58:	000938c0 	call	938c <__fixdfsi>
    2c5c:	000d883a 	mov	r6,zero
    2c60:	000f883a 	mov	r7,zero
    2c64:	8009883a 	mov	r4,r16
    2c68:	880b883a 	mov	r5,r17
    2c6c:	d8800d15 	stw	r2,52(sp)
    2c70:	000920c0 	call	920c <__ltdf2>
    2c74:	10031716 	blt	r2,zero,38d4 <_dtoa_r+0xe8c>
    2c78:	d8c00d17 	ldw	r3,52(sp)
    2c7c:	00800584 	movi	r2,22
    2c80:	10c1482e 	bgeu	r2,r3,31a4 <_dtoa_r+0x75c>
    2c84:	01000044 	movi	r4,1
    2c88:	d9000c15 	stw	r4,48(sp)
    2c8c:	bd85c83a 	sub	r2,r23,r22
    2c90:	11bfffc4 	addi	r6,r2,-1
    2c94:	30030b16 	blt	r6,zero,38c4 <_dtoa_r+0xe7c>
    2c98:	d9800a15 	stw	r6,40(sp)
    2c9c:	d8001115 	stw	zero,68(sp)
    2ca0:	d8c00d17 	ldw	r3,52(sp)
    2ca4:	1802ff16 	blt	r3,zero,38a4 <_dtoa_r+0xe5c>
    2ca8:	d9000a17 	ldw	r4,40(sp)
    2cac:	d8c00915 	stw	r3,36(sp)
    2cb0:	d8001015 	stw	zero,64(sp)
    2cb4:	20c9883a 	add	r4,r4,r3
    2cb8:	d9000a15 	stw	r4,40(sp)
    2cbc:	d9001717 	ldw	r4,92(sp)
    2cc0:	00800244 	movi	r2,9
    2cc4:	11004636 	bltu	r2,r4,2de0 <_dtoa_r+0x398>
    2cc8:	00800144 	movi	r2,5
    2ccc:	11020416 	blt	r2,r4,34e0 <_dtoa_r+0xa98>
    2cd0:	04400044 	movi	r17,1
    2cd4:	d8c01717 	ldw	r3,92(sp)
    2cd8:	00800144 	movi	r2,5
    2cdc:	10c1ed36 	bltu	r2,r3,3494 <_dtoa_r+0xa4c>
    2ce0:	18c5883a 	add	r2,r3,r3
    2ce4:	1085883a 	add	r2,r2,r2
    2ce8:	00c00034 	movhi	r3,0
    2cec:	18cb3f04 	addi	r3,r3,11516
    2cf0:	10c5883a 	add	r2,r2,r3
    2cf4:	11000017 	ldw	r4,0(r2)
    2cf8:	2000683a 	jmp	r4
    2cfc:	00002de8 	cmpgeui	zero,zero,183
    2d00:	00002de8 	cmpgeui	zero,zero,183
    2d04:	000037e8 	cmpgeui	zero,zero,223
    2d08:	000037c0 	call	37c <READ_FIFO_1+0x34>
    2d0c:	00003804 	movi	zero,224
    2d10:	00003810 	cmplti	zero,zero,224
    2d14:	d9002717 	ldw	r4,156(sp)
    2d18:	0089c3c4 	movi	r2,9999
    2d1c:	20800015 	stw	r2,0(r4)
    2d20:	a0001026 	beq	r20,zero,2d64 <_dtoa_r+0x31c>
    2d24:	00c00074 	movhi	r3,1
    2d28:	18c03804 	addi	r3,r3,224
    2d2c:	d9802917 	ldw	r6,164(sp)
    2d30:	303f7926 	beq	r6,zero,2b18 <_dtoa_r+0xd0>
    2d34:	188000c7 	ldb	r2,3(r3)
    2d38:	190000c4 	addi	r4,r3,3
    2d3c:	1000101e 	bne	r2,zero,2d80 <_dtoa_r+0x338>
    2d40:	d8802917 	ldw	r2,164(sp)
    2d44:	11000015 	stw	r4,0(r2)
    2d48:	003f7306 	br	2b18 <_dtoa_r+0xd0>
    2d4c:	00a00034 	movhi	r2,32768
    2d50:	10bfffc4 	addi	r2,r2,-1
    2d54:	00c00044 	movi	r3,1
    2d58:	88aa703a 	and	r21,r17,r2
    2d5c:	90c00015 	stw	r3,0(r18)
    2d60:	003f5806 	br	2ac4 <_dtoa_r+0x7c>
    2d64:	00800434 	movhi	r2,16
    2d68:	10bfffc4 	addi	r2,r2,-1
    2d6c:	a884703a 	and	r2,r21,r2
    2d70:	103fec1e 	bne	r2,zero,2d24 <_dtoa_r+0x2dc>
    2d74:	00c00074 	movhi	r3,1
    2d78:	18c03504 	addi	r3,r3,212
    2d7c:	003feb06 	br	2d2c <_dtoa_r+0x2e4>
    2d80:	d8802917 	ldw	r2,164(sp)
    2d84:	19000204 	addi	r4,r3,8
    2d88:	11000015 	stw	r4,0(r2)
    2d8c:	003f6206 	br	2b18 <_dtoa_r+0xd0>
    2d90:	ddc00117 	ldw	r23,4(sp)
    2d94:	d8800217 	ldw	r2,8(sp)
    2d98:	01000804 	movi	r4,32
    2d9c:	b8c10c84 	addi	r3,r23,1074
    2da0:	18a3883a 	add	r17,r3,r2
    2da4:	2441b80e 	bge	r4,r17,3488 <_dtoa_r+0xa40>
    2da8:	00c01004 	movi	r3,64
    2dac:	1c47c83a 	sub	r3,r3,r17
    2db0:	88bff804 	addi	r2,r17,-32
    2db4:	a8c6983a 	sll	r3,r21,r3
    2db8:	a084d83a 	srl	r2,r20,r2
    2dbc:	1888b03a 	or	r4,r3,r2
    2dc0:	00094640 	call	9464 <__floatunsidf>
    2dc4:	1011883a 	mov	r8,r2
    2dc8:	00bf8434 	movhi	r2,65040
    2dcc:	01000044 	movi	r4,1
    2dd0:	10d3883a 	add	r9,r2,r3
    2dd4:	8dbef344 	addi	r22,r17,-1075
    2dd8:	d9000815 	stw	r4,32(sp)
    2ddc:	003f6f06 	br	2b9c <_dtoa_r+0x154>
    2de0:	d8001715 	stw	zero,92(sp)
    2de4:	04400044 	movi	r17,1
    2de8:	00bfffc4 	movi	r2,-1
    2dec:	00c00044 	movi	r3,1
    2df0:	d8800e15 	stw	r2,56(sp)
    2df4:	d8002615 	stw	zero,152(sp)
    2df8:	d8800f15 	stw	r2,60(sp)
    2dfc:	d8c00b15 	stw	r3,44(sp)
    2e00:	1021883a 	mov	r16,r2
    2e04:	d8801617 	ldw	r2,88(sp)
    2e08:	10001115 	stw	zero,68(r2)
    2e0c:	d8801617 	ldw	r2,88(sp)
    2e10:	11401117 	ldw	r5,68(r2)
    2e14:	1009883a 	mov	r4,r2
    2e18:	000615c0 	call	615c <_Balloc>
    2e1c:	d8c01617 	ldw	r3,88(sp)
    2e20:	d8800515 	stw	r2,20(sp)
    2e24:	18801015 	stw	r2,64(r3)
    2e28:	00800384 	movi	r2,14
    2e2c:	14006836 	bltu	r2,r16,2fd0 <_dtoa_r+0x588>
    2e30:	8805003a 	cmpeq	r2,r17,zero
    2e34:	1000661e 	bne	r2,zero,2fd0 <_dtoa_r+0x588>
    2e38:	d9000d17 	ldw	r4,52(sp)
    2e3c:	0102300e 	bge	zero,r4,3700 <_dtoa_r+0xcb8>
    2e40:	208003cc 	andi	r2,r4,15
    2e44:	100490fa 	slli	r2,r2,3
    2e48:	2025d13a 	srai	r18,r4,4
    2e4c:	00c00074 	movhi	r3,1
    2e50:	18c04a04 	addi	r3,r3,296
    2e54:	10c5883a 	add	r2,r2,r3
    2e58:	90c0040c 	andi	r3,r18,16
    2e5c:	14000017 	ldw	r16,0(r2)
    2e60:	14400117 	ldw	r17,4(r2)
    2e64:	18036a1e 	bne	r3,zero,3c10 <_dtoa_r+0x11c8>
    2e68:	05800084 	movi	r22,2
    2e6c:	90001026 	beq	r18,zero,2eb0 <_dtoa_r+0x468>
    2e70:	04c00074 	movhi	r19,1
    2e74:	9cc07c04 	addi	r19,r19,496
    2e78:	9080004c 	andi	r2,r18,1
    2e7c:	1005003a 	cmpeq	r2,r2,zero
    2e80:	1000081e 	bne	r2,zero,2ea4 <_dtoa_r+0x45c>
    2e84:	99800017 	ldw	r6,0(r19)
    2e88:	99c00117 	ldw	r7,4(r19)
    2e8c:	880b883a 	mov	r5,r17
    2e90:	8009883a 	mov	r4,r16
    2e94:	00089d00 	call	89d0 <__muldf3>
    2e98:	1021883a 	mov	r16,r2
    2e9c:	b5800044 	addi	r22,r22,1
    2ea0:	1823883a 	mov	r17,r3
    2ea4:	9025d07a 	srai	r18,r18,1
    2ea8:	9cc00204 	addi	r19,r19,8
    2eac:	903ff21e 	bne	r18,zero,2e78 <_dtoa_r+0x430>
    2eb0:	a80b883a 	mov	r5,r21
    2eb4:	a009883a 	mov	r4,r20
    2eb8:	880f883a 	mov	r7,r17
    2ebc:	800d883a 	mov	r6,r16
    2ec0:	0008d940 	call	8d94 <__divdf3>
    2ec4:	1029883a 	mov	r20,r2
    2ec8:	182b883a 	mov	r21,r3
    2ecc:	d8c00c17 	ldw	r3,48(sp)
    2ed0:	1805003a 	cmpeq	r2,r3,zero
    2ed4:	1000081e 	bne	r2,zero,2ef8 <_dtoa_r+0x4b0>
    2ed8:	0005883a 	mov	r2,zero
    2edc:	00cffc34 	movhi	r3,16368
    2ee0:	180f883a 	mov	r7,r3
    2ee4:	a009883a 	mov	r4,r20
    2ee8:	a80b883a 	mov	r5,r21
    2eec:	100d883a 	mov	r6,r2
    2ef0:	000920c0 	call	920c <__ltdf2>
    2ef4:	1003fe16 	blt	r2,zero,3ef0 <_dtoa_r+0x14a8>
    2ef8:	b009883a 	mov	r4,r22
    2efc:	00092940 	call	9294 <__floatsidf>
    2f00:	180b883a 	mov	r5,r3
    2f04:	1009883a 	mov	r4,r2
    2f08:	a00d883a 	mov	r6,r20
    2f0c:	a80f883a 	mov	r7,r21
    2f10:	00089d00 	call	89d0 <__muldf3>
    2f14:	0011883a 	mov	r8,zero
    2f18:	02500734 	movhi	r9,16412
    2f1c:	1009883a 	mov	r4,r2
    2f20:	180b883a 	mov	r5,r3
    2f24:	480f883a 	mov	r7,r9
    2f28:	400d883a 	mov	r6,r8
    2f2c:	000895c0 	call	895c <__adddf3>
    2f30:	d9000f17 	ldw	r4,60(sp)
    2f34:	102d883a 	mov	r22,r2
    2f38:	00bf3034 	movhi	r2,64704
    2f3c:	18b9883a 	add	fp,r3,r2
    2f40:	e02f883a 	mov	r23,fp
    2f44:	20028f1e 	bne	r4,zero,3984 <_dtoa_r+0xf3c>
    2f48:	0005883a 	mov	r2,zero
    2f4c:	00d00534 	movhi	r3,16404
    2f50:	a009883a 	mov	r4,r20
    2f54:	a80b883a 	mov	r5,r21
    2f58:	180f883a 	mov	r7,r3
    2f5c:	100d883a 	mov	r6,r2
    2f60:	00088dc0 	call	88dc <__subdf3>
    2f64:	1009883a 	mov	r4,r2
    2f68:	e00f883a 	mov	r7,fp
    2f6c:	180b883a 	mov	r5,r3
    2f70:	b00d883a 	mov	r6,r22
    2f74:	1025883a 	mov	r18,r2
    2f78:	1827883a 	mov	r19,r3
    2f7c:	00090fc0 	call	90fc <__gtdf2>
    2f80:	00834f16 	blt	zero,r2,3cc0 <_dtoa_r+0x1278>
    2f84:	e0e0003c 	xorhi	r3,fp,32768
    2f88:	9009883a 	mov	r4,r18
    2f8c:	980b883a 	mov	r5,r19
    2f90:	180f883a 	mov	r7,r3
    2f94:	b00d883a 	mov	r6,r22
    2f98:	000920c0 	call	920c <__ltdf2>
    2f9c:	1000080e 	bge	r2,zero,2fc0 <_dtoa_r+0x578>
    2fa0:	0027883a 	mov	r19,zero
    2fa4:	0025883a 	mov	r18,zero
    2fa8:	d8802617 	ldw	r2,152(sp)
    2fac:	df000517 	ldw	fp,20(sp)
    2fb0:	d8000615 	stw	zero,24(sp)
    2fb4:	0084303a 	nor	r2,zero,r2
    2fb8:	d8800d15 	stw	r2,52(sp)
    2fbc:	00019b06 	br	362c <_dtoa_r+0xbe4>
    2fc0:	d9801217 	ldw	r6,72(sp)
    2fc4:	d8801317 	ldw	r2,76(sp)
    2fc8:	3029883a 	mov	r20,r6
    2fcc:	102b883a 	mov	r21,r2
    2fd0:	d8c00217 	ldw	r3,8(sp)
    2fd4:	18008516 	blt	r3,zero,31ec <_dtoa_r+0x7a4>
    2fd8:	d9000d17 	ldw	r4,52(sp)
    2fdc:	00800384 	movi	r2,14
    2fe0:	11008216 	blt	r2,r4,31ec <_dtoa_r+0x7a4>
    2fe4:	200490fa 	slli	r2,r4,3
    2fe8:	d9802617 	ldw	r6,152(sp)
    2fec:	00c00074 	movhi	r3,1
    2ff0:	18c04a04 	addi	r3,r3,296
    2ff4:	10c5883a 	add	r2,r2,r3
    2ff8:	14800017 	ldw	r18,0(r2)
    2ffc:	14c00117 	ldw	r19,4(r2)
    3000:	30031e16 	blt	r6,zero,3c7c <_dtoa_r+0x1234>
    3004:	d9000517 	ldw	r4,20(sp)
    3008:	d8c00f17 	ldw	r3,60(sp)
    300c:	a823883a 	mov	r17,r21
    3010:	a021883a 	mov	r16,r20
    3014:	192b883a 	add	r21,r3,r4
    3018:	2039883a 	mov	fp,r4
    301c:	00000f06 	br	305c <_dtoa_r+0x614>
    3020:	0005883a 	mov	r2,zero
    3024:	00d00934 	movhi	r3,16420
    3028:	5009883a 	mov	r4,r10
    302c:	580b883a 	mov	r5,r11
    3030:	180f883a 	mov	r7,r3
    3034:	100d883a 	mov	r6,r2
    3038:	00089d00 	call	89d0 <__muldf3>
    303c:	180b883a 	mov	r5,r3
    3040:	000d883a 	mov	r6,zero
    3044:	000f883a 	mov	r7,zero
    3048:	1009883a 	mov	r4,r2
    304c:	1021883a 	mov	r16,r2
    3050:	1823883a 	mov	r17,r3
    3054:	00090740 	call	9074 <__nedf2>
    3058:	10004526 	beq	r2,zero,3170 <_dtoa_r+0x728>
    305c:	900d883a 	mov	r6,r18
    3060:	980f883a 	mov	r7,r19
    3064:	8009883a 	mov	r4,r16
    3068:	880b883a 	mov	r5,r17
    306c:	0008d940 	call	8d94 <__divdf3>
    3070:	180b883a 	mov	r5,r3
    3074:	1009883a 	mov	r4,r2
    3078:	000938c0 	call	938c <__fixdfsi>
    307c:	1009883a 	mov	r4,r2
    3080:	1029883a 	mov	r20,r2
    3084:	00092940 	call	9294 <__floatsidf>
    3088:	180f883a 	mov	r7,r3
    308c:	9009883a 	mov	r4,r18
    3090:	980b883a 	mov	r5,r19
    3094:	100d883a 	mov	r6,r2
    3098:	00089d00 	call	89d0 <__muldf3>
    309c:	180f883a 	mov	r7,r3
    30a0:	880b883a 	mov	r5,r17
    30a4:	8009883a 	mov	r4,r16
    30a8:	100d883a 	mov	r6,r2
    30ac:	00088dc0 	call	88dc <__subdf3>
    30b0:	1015883a 	mov	r10,r2
    30b4:	a0800c04 	addi	r2,r20,48
    30b8:	e0800005 	stb	r2,0(fp)
    30bc:	e7000044 	addi	fp,fp,1
    30c0:	1817883a 	mov	r11,r3
    30c4:	e57fd61e 	bne	fp,r21,3020 <_dtoa_r+0x5d8>
    30c8:	500d883a 	mov	r6,r10
    30cc:	180f883a 	mov	r7,r3
    30d0:	5009883a 	mov	r4,r10
    30d4:	180b883a 	mov	r5,r3
    30d8:	000895c0 	call	895c <__adddf3>
    30dc:	100d883a 	mov	r6,r2
    30e0:	9009883a 	mov	r4,r18
    30e4:	980b883a 	mov	r5,r19
    30e8:	180f883a 	mov	r7,r3
    30ec:	1021883a 	mov	r16,r2
    30f0:	1823883a 	mov	r17,r3
    30f4:	000920c0 	call	920c <__ltdf2>
    30f8:	10000816 	blt	r2,zero,311c <_dtoa_r+0x6d4>
    30fc:	980b883a 	mov	r5,r19
    3100:	800d883a 	mov	r6,r16
    3104:	880f883a 	mov	r7,r17
    3108:	9009883a 	mov	r4,r18
    310c:	0008fec0 	call	8fec <__eqdf2>
    3110:	1000171e 	bne	r2,zero,3170 <_dtoa_r+0x728>
    3114:	a080004c 	andi	r2,r20,1
    3118:	10001526 	beq	r2,zero,3170 <_dtoa_r+0x728>
    311c:	d8800d17 	ldw	r2,52(sp)
    3120:	d8800415 	stw	r2,16(sp)
    3124:	e009883a 	mov	r4,fp
    3128:	213fffc4 	addi	r4,r4,-1
    312c:	20c00007 	ldb	r3,0(r4)
    3130:	00800e44 	movi	r2,57
    3134:	1880081e 	bne	r3,r2,3158 <_dtoa_r+0x710>
    3138:	d8800517 	ldw	r2,20(sp)
    313c:	113ffa1e 	bne	r2,r4,3128 <_dtoa_r+0x6e0>
    3140:	d8c00417 	ldw	r3,16(sp)
    3144:	d9800517 	ldw	r6,20(sp)
    3148:	00800c04 	movi	r2,48
    314c:	18c00044 	addi	r3,r3,1
    3150:	d8c00415 	stw	r3,16(sp)
    3154:	30800005 	stb	r2,0(r6)
    3158:	20800003 	ldbu	r2,0(r4)
    315c:	d8c00417 	ldw	r3,16(sp)
    3160:	27000044 	addi	fp,r4,1
    3164:	10800044 	addi	r2,r2,1
    3168:	d8c00d15 	stw	r3,52(sp)
    316c:	20800005 	stb	r2,0(r4)
    3170:	d9001617 	ldw	r4,88(sp)
    3174:	d9400717 	ldw	r5,28(sp)
    3178:	0005bdc0 	call	5bdc <_Bfree>
    317c:	e0000005 	stb	zero,0(fp)
    3180:	d9800d17 	ldw	r6,52(sp)
    3184:	d8c02717 	ldw	r3,156(sp)
    3188:	d9002917 	ldw	r4,164(sp)
    318c:	30800044 	addi	r2,r6,1
    3190:	18800015 	stw	r2,0(r3)
    3194:	20029c26 	beq	r4,zero,3c08 <_dtoa_r+0x11c0>
    3198:	d8c00517 	ldw	r3,20(sp)
    319c:	27000015 	stw	fp,0(r4)
    31a0:	003e5d06 	br	2b18 <_dtoa_r+0xd0>
    31a4:	d9800d17 	ldw	r6,52(sp)
    31a8:	00c00074 	movhi	r3,1
    31ac:	18c04a04 	addi	r3,r3,296
    31b0:	d9001217 	ldw	r4,72(sp)
    31b4:	300490fa 	slli	r2,r6,3
    31b8:	d9401317 	ldw	r5,76(sp)
    31bc:	10c5883a 	add	r2,r2,r3
    31c0:	12000017 	ldw	r8,0(r2)
    31c4:	12400117 	ldw	r9,4(r2)
    31c8:	400d883a 	mov	r6,r8
    31cc:	480f883a 	mov	r7,r9
    31d0:	000920c0 	call	920c <__ltdf2>
    31d4:	1000030e 	bge	r2,zero,31e4 <_dtoa_r+0x79c>
    31d8:	d8800d17 	ldw	r2,52(sp)
    31dc:	10bfffc4 	addi	r2,r2,-1
    31e0:	d8800d15 	stw	r2,52(sp)
    31e4:	d8000c15 	stw	zero,48(sp)
    31e8:	003ea806 	br	2c8c <_dtoa_r+0x244>
    31ec:	d9000b17 	ldw	r4,44(sp)
    31f0:	202cc03a 	cmpne	r22,r4,zero
    31f4:	b000c71e 	bne	r22,zero,3514 <_dtoa_r+0xacc>
    31f8:	dc001117 	ldw	r16,68(sp)
    31fc:	dc801017 	ldw	r18,64(sp)
    3200:	0027883a 	mov	r19,zero
    3204:	04000b0e 	bge	zero,r16,3234 <_dtoa_r+0x7ec>
    3208:	d8c00a17 	ldw	r3,40(sp)
    320c:	00c0090e 	bge	zero,r3,3234 <_dtoa_r+0x7ec>
    3210:	8005883a 	mov	r2,r16
    3214:	1c011316 	blt	r3,r16,3664 <_dtoa_r+0xc1c>
    3218:	d9000a17 	ldw	r4,40(sp)
    321c:	d9801117 	ldw	r6,68(sp)
    3220:	80a1c83a 	sub	r16,r16,r2
    3224:	2089c83a 	sub	r4,r4,r2
    3228:	308dc83a 	sub	r6,r6,r2
    322c:	d9000a15 	stw	r4,40(sp)
    3230:	d9801115 	stw	r6,68(sp)
    3234:	d8801017 	ldw	r2,64(sp)
    3238:	0080150e 	bge	zero,r2,3290 <_dtoa_r+0x848>
    323c:	d8c00b17 	ldw	r3,44(sp)
    3240:	1805003a 	cmpeq	r2,r3,zero
    3244:	1001c91e 	bne	r2,zero,396c <_dtoa_r+0xf24>
    3248:	04800e0e 	bge	zero,r18,3284 <_dtoa_r+0x83c>
    324c:	d9001617 	ldw	r4,88(sp)
    3250:	980b883a 	mov	r5,r19
    3254:	900d883a 	mov	r6,r18
    3258:	00069900 	call	6990 <__pow5mult>
    325c:	d9001617 	ldw	r4,88(sp)
    3260:	d9800717 	ldw	r6,28(sp)
    3264:	100b883a 	mov	r5,r2
    3268:	1027883a 	mov	r19,r2
    326c:	000666c0 	call	666c <__multiply>
    3270:	d9001617 	ldw	r4,88(sp)
    3274:	d9400717 	ldw	r5,28(sp)
    3278:	1023883a 	mov	r17,r2
    327c:	0005bdc0 	call	5bdc <_Bfree>
    3280:	dc400715 	stw	r17,28(sp)
    3284:	d9001017 	ldw	r4,64(sp)
    3288:	248dc83a 	sub	r6,r4,r18
    328c:	30010e1e 	bne	r6,zero,36c8 <_dtoa_r+0xc80>
    3290:	d9001617 	ldw	r4,88(sp)
    3294:	04400044 	movi	r17,1
    3298:	880b883a 	mov	r5,r17
    329c:	00068540 	call	6854 <__i2b>
    32a0:	d9800917 	ldw	r6,36(sp)
    32a4:	1025883a 	mov	r18,r2
    32a8:	0180040e 	bge	zero,r6,32bc <_dtoa_r+0x874>
    32ac:	d9001617 	ldw	r4,88(sp)
    32b0:	100b883a 	mov	r5,r2
    32b4:	00069900 	call	6990 <__pow5mult>
    32b8:	1025883a 	mov	r18,r2
    32bc:	d8801717 	ldw	r2,92(sp)
    32c0:	8880f30e 	bge	r17,r2,3690 <_dtoa_r+0xc48>
    32c4:	0023883a 	mov	r17,zero
    32c8:	d9800917 	ldw	r6,36(sp)
    32cc:	30019e1e 	bne	r6,zero,3948 <_dtoa_r+0xf00>
    32d0:	00c00044 	movi	r3,1
    32d4:	d9000a17 	ldw	r4,40(sp)
    32d8:	20c5883a 	add	r2,r4,r3
    32dc:	10c007cc 	andi	r3,r2,31
    32e0:	1800841e 	bne	r3,zero,34f4 <_dtoa_r+0xaac>
    32e4:	00800704 	movi	r2,28
    32e8:	d9000a17 	ldw	r4,40(sp)
    32ec:	d9801117 	ldw	r6,68(sp)
    32f0:	80a1883a 	add	r16,r16,r2
    32f4:	2089883a 	add	r4,r4,r2
    32f8:	308d883a 	add	r6,r6,r2
    32fc:	d9000a15 	stw	r4,40(sp)
    3300:	d9801115 	stw	r6,68(sp)
    3304:	d8801117 	ldw	r2,68(sp)
    3308:	0080050e 	bge	zero,r2,3320 <_dtoa_r+0x8d8>
    330c:	d9400717 	ldw	r5,28(sp)
    3310:	d9001617 	ldw	r4,88(sp)
    3314:	100d883a 	mov	r6,r2
    3318:	00065200 	call	6520 <__lshift>
    331c:	d8800715 	stw	r2,28(sp)
    3320:	d8c00a17 	ldw	r3,40(sp)
    3324:	00c0050e 	bge	zero,r3,333c <_dtoa_r+0x8f4>
    3328:	d9001617 	ldw	r4,88(sp)
    332c:	900b883a 	mov	r5,r18
    3330:	180d883a 	mov	r6,r3
    3334:	00065200 	call	6520 <__lshift>
    3338:	1025883a 	mov	r18,r2
    333c:	d9000c17 	ldw	r4,48(sp)
    3340:	2005003a 	cmpeq	r2,r4,zero
    3344:	10016f26 	beq	r2,zero,3904 <_dtoa_r+0xebc>
    3348:	d9000f17 	ldw	r4,60(sp)
    334c:	0102170e 	bge	zero,r4,3bac <_dtoa_r+0x1164>
    3350:	d9800b17 	ldw	r6,44(sp)
    3354:	3005003a 	cmpeq	r2,r6,zero
    3358:	1000881e 	bne	r2,zero,357c <_dtoa_r+0xb34>
    335c:	0400050e 	bge	zero,r16,3374 <_dtoa_r+0x92c>
    3360:	d9001617 	ldw	r4,88(sp)
    3364:	980b883a 	mov	r5,r19
    3368:	800d883a 	mov	r6,r16
    336c:	00065200 	call	6520 <__lshift>
    3370:	1027883a 	mov	r19,r2
    3374:	8804c03a 	cmpne	r2,r17,zero
    3378:	1002541e 	bne	r2,zero,3ccc <_dtoa_r+0x1284>
    337c:	980b883a 	mov	r5,r19
    3380:	dd800517 	ldw	r22,20(sp)
    3384:	dcc00615 	stw	r19,24(sp)
    3388:	a700004c 	andi	fp,r20,1
    338c:	2827883a 	mov	r19,r5
    3390:	d9000717 	ldw	r4,28(sp)
    3394:	900b883a 	mov	r5,r18
    3398:	00028300 	call	2830 <quorem>
    339c:	d9000717 	ldw	r4,28(sp)
    33a0:	d9400617 	ldw	r5,24(sp)
    33a4:	1023883a 	mov	r17,r2
    33a8:	8dc00c04 	addi	r23,r17,48
    33ac:	0005d380 	call	5d38 <__mcmp>
    33b0:	d9001617 	ldw	r4,88(sp)
    33b4:	900b883a 	mov	r5,r18
    33b8:	980d883a 	mov	r6,r19
    33bc:	1029883a 	mov	r20,r2
    33c0:	00063940 	call	6394 <__mdiff>
    33c4:	102b883a 	mov	r21,r2
    33c8:	10800317 	ldw	r2,12(r2)
    33cc:	1001281e 	bne	r2,zero,3870 <_dtoa_r+0xe28>
    33d0:	d9000717 	ldw	r4,28(sp)
    33d4:	a80b883a 	mov	r5,r21
    33d8:	0005d380 	call	5d38 <__mcmp>
    33dc:	d9001617 	ldw	r4,88(sp)
    33e0:	1021883a 	mov	r16,r2
    33e4:	a80b883a 	mov	r5,r21
    33e8:	0005bdc0 	call	5bdc <_Bfree>
    33ec:	8000041e 	bne	r16,zero,3400 <_dtoa_r+0x9b8>
    33f0:	d8801717 	ldw	r2,92(sp)
    33f4:	1000021e 	bne	r2,zero,3400 <_dtoa_r+0x9b8>
    33f8:	e004c03a 	cmpne	r2,fp,zero
    33fc:	10011726 	beq	r2,zero,385c <_dtoa_r+0xe14>
    3400:	a0010616 	blt	r20,zero,381c <_dtoa_r+0xdd4>
    3404:	a000041e 	bne	r20,zero,3418 <_dtoa_r+0x9d0>
    3408:	d8c01717 	ldw	r3,92(sp)
    340c:	1800021e 	bne	r3,zero,3418 <_dtoa_r+0x9d0>
    3410:	e004c03a 	cmpne	r2,fp,zero
    3414:	10010126 	beq	r2,zero,381c <_dtoa_r+0xdd4>
    3418:	04023d16 	blt	zero,r16,3d10 <_dtoa_r+0x12c8>
    341c:	b5c00005 	stb	r23,0(r22)
    3420:	d9800517 	ldw	r6,20(sp)
    3424:	d9000f17 	ldw	r4,60(sp)
    3428:	b5800044 	addi	r22,r22,1
    342c:	3105883a 	add	r2,r6,r4
    3430:	b0806526 	beq	r22,r2,35c8 <_dtoa_r+0xb80>
    3434:	d9400717 	ldw	r5,28(sp)
    3438:	d9001617 	ldw	r4,88(sp)
    343c:	01800284 	movi	r6,10
    3440:	000f883a 	mov	r7,zero
    3444:	00068900 	call	6890 <__multadd>
    3448:	d8800715 	stw	r2,28(sp)
    344c:	d8800617 	ldw	r2,24(sp)
    3450:	14c10c26 	beq	r2,r19,3884 <_dtoa_r+0xe3c>
    3454:	d9400617 	ldw	r5,24(sp)
    3458:	d9001617 	ldw	r4,88(sp)
    345c:	01800284 	movi	r6,10
    3460:	000f883a 	mov	r7,zero
    3464:	00068900 	call	6890 <__multadd>
    3468:	d9001617 	ldw	r4,88(sp)
    346c:	980b883a 	mov	r5,r19
    3470:	01800284 	movi	r6,10
    3474:	000f883a 	mov	r7,zero
    3478:	d8800615 	stw	r2,24(sp)
    347c:	00068900 	call	6890 <__multadd>
    3480:	1027883a 	mov	r19,r2
    3484:	003fc206 	br	3390 <_dtoa_r+0x948>
    3488:	2445c83a 	sub	r2,r4,r17
    348c:	a088983a 	sll	r4,r20,r2
    3490:	003e4b06 	br	2dc0 <_dtoa_r+0x378>
    3494:	01bfffc4 	movi	r6,-1
    3498:	00800044 	movi	r2,1
    349c:	d9800e15 	stw	r6,56(sp)
    34a0:	d9800f15 	stw	r6,60(sp)
    34a4:	d8800b15 	stw	r2,44(sp)
    34a8:	d8c01617 	ldw	r3,88(sp)
    34ac:	008005c4 	movi	r2,23
    34b0:	18001115 	stw	zero,68(r3)
    34b4:	1580082e 	bgeu	r2,r22,34d8 <_dtoa_r+0xa90>
    34b8:	00c00104 	movi	r3,4
    34bc:	0009883a 	mov	r4,zero
    34c0:	18c7883a 	add	r3,r3,r3
    34c4:	18800504 	addi	r2,r3,20
    34c8:	21000044 	addi	r4,r4,1
    34cc:	b0bffc2e 	bgeu	r22,r2,34c0 <_dtoa_r+0xa78>
    34d0:	d9801617 	ldw	r6,88(sp)
    34d4:	31001115 	stw	r4,68(r6)
    34d8:	dc000f17 	ldw	r16,60(sp)
    34dc:	003e4b06 	br	2e0c <_dtoa_r+0x3c4>
    34e0:	d9801717 	ldw	r6,92(sp)
    34e4:	0023883a 	mov	r17,zero
    34e8:	31bfff04 	addi	r6,r6,-4
    34ec:	d9801715 	stw	r6,92(sp)
    34f0:	003df806 	br	2cd4 <_dtoa_r+0x28c>
    34f4:	00800804 	movi	r2,32
    34f8:	10c9c83a 	sub	r4,r2,r3
    34fc:	00c00104 	movi	r3,4
    3500:	19005a16 	blt	r3,r4,366c <_dtoa_r+0xc24>
    3504:	008000c4 	movi	r2,3
    3508:	113f7e16 	blt	r2,r4,3304 <_dtoa_r+0x8bc>
    350c:	20800704 	addi	r2,r4,28
    3510:	003f7506 	br	32e8 <_dtoa_r+0x8a0>
    3514:	d9801717 	ldw	r6,92(sp)
    3518:	00800044 	movi	r2,1
    351c:	1180a10e 	bge	r2,r6,37a4 <_dtoa_r+0xd5c>
    3520:	d9800f17 	ldw	r6,60(sp)
    3524:	d8c01017 	ldw	r3,64(sp)
    3528:	30bfffc4 	addi	r2,r6,-1
    352c:	1881c616 	blt	r3,r2,3c48 <_dtoa_r+0x1200>
    3530:	18a5c83a 	sub	r18,r3,r2
    3534:	d8800f17 	ldw	r2,60(sp)
    3538:	10026216 	blt	r2,zero,3ec4 <_dtoa_r+0x147c>
    353c:	dc001117 	ldw	r16,68(sp)
    3540:	1007883a 	mov	r3,r2
    3544:	d9800a17 	ldw	r6,40(sp)
    3548:	d8801117 	ldw	r2,68(sp)
    354c:	d9001617 	ldw	r4,88(sp)
    3550:	30cd883a 	add	r6,r6,r3
    3554:	10c5883a 	add	r2,r2,r3
    3558:	01400044 	movi	r5,1
    355c:	d9800a15 	stw	r6,40(sp)
    3560:	d8801115 	stw	r2,68(sp)
    3564:	00068540 	call	6854 <__i2b>
    3568:	1027883a 	mov	r19,r2
    356c:	003f2506 	br	3204 <_dtoa_r+0x7bc>
    3570:	00c00074 	movhi	r3,1
    3574:	18c02c04 	addi	r3,r3,176
    3578:	003d6706 	br	2b18 <_dtoa_r+0xd0>
    357c:	dd800517 	ldw	r22,20(sp)
    3580:	04000044 	movi	r16,1
    3584:	00000706 	br	35a4 <_dtoa_r+0xb5c>
    3588:	d9400717 	ldw	r5,28(sp)
    358c:	d9001617 	ldw	r4,88(sp)
    3590:	01800284 	movi	r6,10
    3594:	000f883a 	mov	r7,zero
    3598:	00068900 	call	6890 <__multadd>
    359c:	d8800715 	stw	r2,28(sp)
    35a0:	84000044 	addi	r16,r16,1
    35a4:	d9000717 	ldw	r4,28(sp)
    35a8:	900b883a 	mov	r5,r18
    35ac:	00028300 	call	2830 <quorem>
    35b0:	15c00c04 	addi	r23,r2,48
    35b4:	b5c00005 	stb	r23,0(r22)
    35b8:	d8c00f17 	ldw	r3,60(sp)
    35bc:	b5800044 	addi	r22,r22,1
    35c0:	80fff116 	blt	r16,r3,3588 <_dtoa_r+0xb40>
    35c4:	d8000615 	stw	zero,24(sp)
    35c8:	d9400717 	ldw	r5,28(sp)
    35cc:	d9001617 	ldw	r4,88(sp)
    35d0:	01800044 	movi	r6,1
    35d4:	00065200 	call	6520 <__lshift>
    35d8:	1009883a 	mov	r4,r2
    35dc:	900b883a 	mov	r5,r18
    35e0:	d8800715 	stw	r2,28(sp)
    35e4:	0005d380 	call	5d38 <__mcmp>
    35e8:	00803c0e 	bge	zero,r2,36dc <_dtoa_r+0xc94>
    35ec:	b009883a 	mov	r4,r22
    35f0:	213fffc4 	addi	r4,r4,-1
    35f4:	21400003 	ldbu	r5,0(r4)
    35f8:	00800e44 	movi	r2,57
    35fc:	28c03fcc 	andi	r3,r5,255
    3600:	18c0201c 	xori	r3,r3,128
    3604:	18ffe004 	addi	r3,r3,-128
    3608:	1881981e 	bne	r3,r2,3c6c <_dtoa_r+0x1224>
    360c:	d9800517 	ldw	r6,20(sp)
    3610:	21bff71e 	bne	r4,r6,35f0 <_dtoa_r+0xba8>
    3614:	d8800d17 	ldw	r2,52(sp)
    3618:	37000044 	addi	fp,r6,1
    361c:	10800044 	addi	r2,r2,1
    3620:	d8800d15 	stw	r2,52(sp)
    3624:	00800c44 	movi	r2,49
    3628:	30800005 	stb	r2,0(r6)
    362c:	d9001617 	ldw	r4,88(sp)
    3630:	900b883a 	mov	r5,r18
    3634:	0005bdc0 	call	5bdc <_Bfree>
    3638:	983ecd26 	beq	r19,zero,3170 <_dtoa_r+0x728>
    363c:	d8c00617 	ldw	r3,24(sp)
    3640:	18000426 	beq	r3,zero,3654 <_dtoa_r+0xc0c>
    3644:	1cc00326 	beq	r3,r19,3654 <_dtoa_r+0xc0c>
    3648:	d9001617 	ldw	r4,88(sp)
    364c:	180b883a 	mov	r5,r3
    3650:	0005bdc0 	call	5bdc <_Bfree>
    3654:	d9001617 	ldw	r4,88(sp)
    3658:	980b883a 	mov	r5,r19
    365c:	0005bdc0 	call	5bdc <_Bfree>
    3660:	003ec306 	br	3170 <_dtoa_r+0x728>
    3664:	1805883a 	mov	r2,r3
    3668:	003eeb06 	br	3218 <_dtoa_r+0x7d0>
    366c:	d9800a17 	ldw	r6,40(sp)
    3670:	d8c01117 	ldw	r3,68(sp)
    3674:	20bfff04 	addi	r2,r4,-4
    3678:	308d883a 	add	r6,r6,r2
    367c:	1887883a 	add	r3,r3,r2
    3680:	80a1883a 	add	r16,r16,r2
    3684:	d9800a15 	stw	r6,40(sp)
    3688:	d8c01115 	stw	r3,68(sp)
    368c:	003f1d06 	br	3304 <_dtoa_r+0x8bc>
    3690:	a03f0c1e 	bne	r20,zero,32c4 <_dtoa_r+0x87c>
    3694:	00800434 	movhi	r2,16
    3698:	10bfffc4 	addi	r2,r2,-1
    369c:	a884703a 	and	r2,r21,r2
    36a0:	103f081e 	bne	r2,zero,32c4 <_dtoa_r+0x87c>
    36a4:	a89ffc2c 	andhi	r2,r21,32752
    36a8:	103f0626 	beq	r2,zero,32c4 <_dtoa_r+0x87c>
    36ac:	d8c01117 	ldw	r3,68(sp)
    36b0:	d9000a17 	ldw	r4,40(sp)
    36b4:	18c00044 	addi	r3,r3,1
    36b8:	21000044 	addi	r4,r4,1
    36bc:	d8c01115 	stw	r3,68(sp)
    36c0:	d9000a15 	stw	r4,40(sp)
    36c4:	003f0006 	br	32c8 <_dtoa_r+0x880>
    36c8:	d9400717 	ldw	r5,28(sp)
    36cc:	d9001617 	ldw	r4,88(sp)
    36d0:	00069900 	call	6990 <__pow5mult>
    36d4:	d8800715 	stw	r2,28(sp)
    36d8:	003eed06 	br	3290 <_dtoa_r+0x848>
    36dc:	1000021e 	bne	r2,zero,36e8 <_dtoa_r+0xca0>
    36e0:	b880004c 	andi	r2,r23,1
    36e4:	103fc11e 	bne	r2,zero,35ec <_dtoa_r+0xba4>
    36e8:	b5bfffc4 	addi	r22,r22,-1
    36ec:	b0c00007 	ldb	r3,0(r22)
    36f0:	00800c04 	movi	r2,48
    36f4:	18bffc26 	beq	r3,r2,36e8 <_dtoa_r+0xca0>
    36f8:	b7000044 	addi	fp,r22,1
    36fc:	003fcb06 	br	362c <_dtoa_r+0xbe4>
    3700:	d9800d17 	ldw	r6,52(sp)
    3704:	018fc83a 	sub	r7,zero,r6
    3708:	3801f726 	beq	r7,zero,3ee8 <_dtoa_r+0x14a0>
    370c:	398003cc 	andi	r6,r7,15
    3710:	300c90fa 	slli	r6,r6,3
    3714:	01400074 	movhi	r5,1
    3718:	29404a04 	addi	r5,r5,296
    371c:	d9001217 	ldw	r4,72(sp)
    3720:	314d883a 	add	r6,r6,r5
    3724:	30c00117 	ldw	r3,4(r6)
    3728:	30800017 	ldw	r2,0(r6)
    372c:	d9401317 	ldw	r5,76(sp)
    3730:	3821d13a 	srai	r16,r7,4
    3734:	100d883a 	mov	r6,r2
    3738:	180f883a 	mov	r7,r3
    373c:	00089d00 	call	89d0 <__muldf3>
    3740:	1011883a 	mov	r8,r2
    3744:	1813883a 	mov	r9,r3
    3748:	1029883a 	mov	r20,r2
    374c:	182b883a 	mov	r21,r3
    3750:	8001e526 	beq	r16,zero,3ee8 <_dtoa_r+0x14a0>
    3754:	05800084 	movi	r22,2
    3758:	04400074 	movhi	r17,1
    375c:	8c407c04 	addi	r17,r17,496
    3760:	8080004c 	andi	r2,r16,1
    3764:	1005003a 	cmpeq	r2,r2,zero
    3768:	1000081e 	bne	r2,zero,378c <_dtoa_r+0xd44>
    376c:	89800017 	ldw	r6,0(r17)
    3770:	89c00117 	ldw	r7,4(r17)
    3774:	480b883a 	mov	r5,r9
    3778:	4009883a 	mov	r4,r8
    377c:	00089d00 	call	89d0 <__muldf3>
    3780:	1011883a 	mov	r8,r2
    3784:	b5800044 	addi	r22,r22,1
    3788:	1813883a 	mov	r9,r3
    378c:	8021d07a 	srai	r16,r16,1
    3790:	8c400204 	addi	r17,r17,8
    3794:	803ff21e 	bne	r16,zero,3760 <_dtoa_r+0xd18>
    3798:	4029883a 	mov	r20,r8
    379c:	482b883a 	mov	r21,r9
    37a0:	003dca06 	br	2ecc <_dtoa_r+0x484>
    37a4:	d9000817 	ldw	r4,32(sp)
    37a8:	2005003a 	cmpeq	r2,r4,zero
    37ac:	1001f61e 	bne	r2,zero,3f88 <_dtoa_r+0x1540>
    37b0:	dc001117 	ldw	r16,68(sp)
    37b4:	dc801017 	ldw	r18,64(sp)
    37b8:	18c10cc4 	addi	r3,r3,1075
    37bc:	003f6106 	br	3544 <_dtoa_r+0xafc>
    37c0:	d8000b15 	stw	zero,44(sp)
    37c4:	d9802617 	ldw	r6,152(sp)
    37c8:	d8c00d17 	ldw	r3,52(sp)
    37cc:	30800044 	addi	r2,r6,1
    37d0:	18ad883a 	add	r22,r3,r2
    37d4:	b13fffc4 	addi	r4,r22,-1
    37d8:	d9000e15 	stw	r4,56(sp)
    37dc:	0581f60e 	bge	zero,r22,3fb8 <_dtoa_r+0x1570>
    37e0:	dd800f15 	stw	r22,60(sp)
    37e4:	003f3006 	br	34a8 <_dtoa_r+0xa60>
    37e8:	d8000b15 	stw	zero,44(sp)
    37ec:	d9002617 	ldw	r4,152(sp)
    37f0:	0101eb0e 	bge	zero,r4,3fa0 <_dtoa_r+0x1558>
    37f4:	202d883a 	mov	r22,r4
    37f8:	d9000e15 	stw	r4,56(sp)
    37fc:	d9000f15 	stw	r4,60(sp)
    3800:	003f2906 	br	34a8 <_dtoa_r+0xa60>
    3804:	01800044 	movi	r6,1
    3808:	d9800b15 	stw	r6,44(sp)
    380c:	003ff706 	br	37ec <_dtoa_r+0xda4>
    3810:	01000044 	movi	r4,1
    3814:	d9000b15 	stw	r4,44(sp)
    3818:	003fea06 	br	37c4 <_dtoa_r+0xd7c>
    381c:	04000c0e 	bge	zero,r16,3850 <_dtoa_r+0xe08>
    3820:	d9400717 	ldw	r5,28(sp)
    3824:	d9001617 	ldw	r4,88(sp)
    3828:	01800044 	movi	r6,1
    382c:	00065200 	call	6520 <__lshift>
    3830:	1009883a 	mov	r4,r2
    3834:	900b883a 	mov	r5,r18
    3838:	d8800715 	stw	r2,28(sp)
    383c:	0005d380 	call	5d38 <__mcmp>
    3840:	0081e00e 	bge	zero,r2,3fc4 <_dtoa_r+0x157c>
    3844:	bdc00044 	addi	r23,r23,1
    3848:	00800e84 	movi	r2,58
    384c:	b881a226 	beq	r23,r2,3ed8 <_dtoa_r+0x1490>
    3850:	b7000044 	addi	fp,r22,1
    3854:	b5c00005 	stb	r23,0(r22)
    3858:	003f7406 	br	362c <_dtoa_r+0xbe4>
    385c:	00800e44 	movi	r2,57
    3860:	b8819d26 	beq	r23,r2,3ed8 <_dtoa_r+0x1490>
    3864:	053ffa0e 	bge	zero,r20,3850 <_dtoa_r+0xe08>
    3868:	8dc00c44 	addi	r23,r17,49
    386c:	003ff806 	br	3850 <_dtoa_r+0xe08>
    3870:	d9001617 	ldw	r4,88(sp)
    3874:	a80b883a 	mov	r5,r21
    3878:	04000044 	movi	r16,1
    387c:	0005bdc0 	call	5bdc <_Bfree>
    3880:	003edf06 	br	3400 <_dtoa_r+0x9b8>
    3884:	d9001617 	ldw	r4,88(sp)
    3888:	980b883a 	mov	r5,r19
    388c:	01800284 	movi	r6,10
    3890:	000f883a 	mov	r7,zero
    3894:	00068900 	call	6890 <__multadd>
    3898:	1027883a 	mov	r19,r2
    389c:	d8800615 	stw	r2,24(sp)
    38a0:	003ebb06 	br	3390 <_dtoa_r+0x948>
    38a4:	d9801117 	ldw	r6,68(sp)
    38a8:	d8800d17 	ldw	r2,52(sp)
    38ac:	d8000915 	stw	zero,36(sp)
    38b0:	308dc83a 	sub	r6,r6,r2
    38b4:	0087c83a 	sub	r3,zero,r2
    38b8:	d9801115 	stw	r6,68(sp)
    38bc:	d8c01015 	stw	r3,64(sp)
    38c0:	003cfe06 	br	2cbc <_dtoa_r+0x274>
    38c4:	018dc83a 	sub	r6,zero,r6
    38c8:	d9801115 	stw	r6,68(sp)
    38cc:	d8000a15 	stw	zero,40(sp)
    38d0:	003cf306 	br	2ca0 <_dtoa_r+0x258>
    38d4:	d9000d17 	ldw	r4,52(sp)
    38d8:	00092940 	call	9294 <__floatsidf>
    38dc:	880b883a 	mov	r5,r17
    38e0:	8009883a 	mov	r4,r16
    38e4:	180f883a 	mov	r7,r3
    38e8:	100d883a 	mov	r6,r2
    38ec:	00090740 	call	9074 <__nedf2>
    38f0:	103ce126 	beq	r2,zero,2c78 <_dtoa_r+0x230>
    38f4:	d9800d17 	ldw	r6,52(sp)
    38f8:	31bfffc4 	addi	r6,r6,-1
    38fc:	d9800d15 	stw	r6,52(sp)
    3900:	003cdd06 	br	2c78 <_dtoa_r+0x230>
    3904:	d9000717 	ldw	r4,28(sp)
    3908:	900b883a 	mov	r5,r18
    390c:	0005d380 	call	5d38 <__mcmp>
    3910:	103e8d0e 	bge	r2,zero,3348 <_dtoa_r+0x900>
    3914:	d9400717 	ldw	r5,28(sp)
    3918:	d9001617 	ldw	r4,88(sp)
    391c:	01800284 	movi	r6,10
    3920:	000f883a 	mov	r7,zero
    3924:	00068900 	call	6890 <__multadd>
    3928:	d9800d17 	ldw	r6,52(sp)
    392c:	d8800715 	stw	r2,28(sp)
    3930:	31bfffc4 	addi	r6,r6,-1
    3934:	d9800d15 	stw	r6,52(sp)
    3938:	b001a71e 	bne	r22,zero,3fd8 <_dtoa_r+0x1590>
    393c:	d8800e17 	ldw	r2,56(sp)
    3940:	d8800f15 	stw	r2,60(sp)
    3944:	003e8006 	br	3348 <_dtoa_r+0x900>
    3948:	90800417 	ldw	r2,16(r18)
    394c:	1085883a 	add	r2,r2,r2
    3950:	1085883a 	add	r2,r2,r2
    3954:	1485883a 	add	r2,r2,r18
    3958:	11000417 	ldw	r4,16(r2)
    395c:	0005c040 	call	5c04 <__hi0bits>
    3960:	00c00804 	movi	r3,32
    3964:	1887c83a 	sub	r3,r3,r2
    3968:	003e5a06 	br	32d4 <_dtoa_r+0x88c>
    396c:	d9400717 	ldw	r5,28(sp)
    3970:	d9801017 	ldw	r6,64(sp)
    3974:	d9001617 	ldw	r4,88(sp)
    3978:	00069900 	call	6990 <__pow5mult>
    397c:	d8800715 	stw	r2,28(sp)
    3980:	003e4306 	br	3290 <_dtoa_r+0x848>
    3984:	d9800f17 	ldw	r6,60(sp)
    3988:	d8800d17 	ldw	r2,52(sp)
    398c:	d9800315 	stw	r6,12(sp)
    3990:	d8800415 	stw	r2,16(sp)
    3994:	d8c00b17 	ldw	r3,44(sp)
    3998:	1805003a 	cmpeq	r2,r3,zero
    399c:	1000e21e 	bne	r2,zero,3d28 <_dtoa_r+0x12e0>
    39a0:	d9000317 	ldw	r4,12(sp)
    39a4:	0005883a 	mov	r2,zero
    39a8:	00cff834 	movhi	r3,16352
    39ac:	200c90fa 	slli	r6,r4,3
    39b0:	01000074 	movhi	r4,1
    39b4:	21004a04 	addi	r4,r4,296
    39b8:	180b883a 	mov	r5,r3
    39bc:	310d883a 	add	r6,r6,r4
    39c0:	327fff17 	ldw	r9,-4(r6)
    39c4:	323ffe17 	ldw	r8,-8(r6)
    39c8:	1009883a 	mov	r4,r2
    39cc:	480f883a 	mov	r7,r9
    39d0:	400d883a 	mov	r6,r8
    39d4:	0008d940 	call	8d94 <__divdf3>
    39d8:	180b883a 	mov	r5,r3
    39dc:	b00d883a 	mov	r6,r22
    39e0:	b80f883a 	mov	r7,r23
    39e4:	1009883a 	mov	r4,r2
    39e8:	00088dc0 	call	88dc <__subdf3>
    39ec:	a80b883a 	mov	r5,r21
    39f0:	a009883a 	mov	r4,r20
    39f4:	d8c01915 	stw	r3,100(sp)
    39f8:	d8801815 	stw	r2,96(sp)
    39fc:	000938c0 	call	938c <__fixdfsi>
    3a00:	1009883a 	mov	r4,r2
    3a04:	1027883a 	mov	r19,r2
    3a08:	00092940 	call	9294 <__floatsidf>
    3a0c:	a80b883a 	mov	r5,r21
    3a10:	a009883a 	mov	r4,r20
    3a14:	180f883a 	mov	r7,r3
    3a18:	100d883a 	mov	r6,r2
    3a1c:	00088dc0 	call	88dc <__subdf3>
    3a20:	d9801817 	ldw	r6,96(sp)
    3a24:	1823883a 	mov	r17,r3
    3a28:	d8801415 	stw	r2,80(sp)
    3a2c:	302d883a 	mov	r22,r6
    3a30:	d9800517 	ldw	r6,20(sp)
    3a34:	9cc00c04 	addi	r19,r19,48
    3a38:	dc401515 	stw	r17,84(sp)
    3a3c:	d8c01917 	ldw	r3,100(sp)
    3a40:	34c00005 	stb	r19,0(r6)
    3a44:	d8800517 	ldw	r2,20(sp)
    3a48:	d9401917 	ldw	r5,100(sp)
    3a4c:	d9801417 	ldw	r6,80(sp)
    3a50:	b009883a 	mov	r4,r22
    3a54:	880f883a 	mov	r7,r17
    3a58:	182f883a 	mov	r23,r3
    3a5c:	17000044 	addi	fp,r2,1
    3a60:	00090fc0 	call	90fc <__gtdf2>
    3a64:	00804e16 	blt	zero,r2,3ba0 <_dtoa_r+0x1158>
    3a68:	d9801417 	ldw	r6,80(sp)
    3a6c:	0005883a 	mov	r2,zero
    3a70:	00cffc34 	movhi	r3,16368
    3a74:	180b883a 	mov	r5,r3
    3a78:	880f883a 	mov	r7,r17
    3a7c:	1009883a 	mov	r4,r2
    3a80:	00088dc0 	call	88dc <__subdf3>
    3a84:	d9401917 	ldw	r5,100(sp)
    3a88:	180f883a 	mov	r7,r3
    3a8c:	b009883a 	mov	r4,r22
    3a90:	100d883a 	mov	r6,r2
    3a94:	00090fc0 	call	90fc <__gtdf2>
    3a98:	00bda216 	blt	zero,r2,3124 <_dtoa_r+0x6dc>
    3a9c:	d8c00317 	ldw	r3,12(sp)
    3aa0:	00800044 	movi	r2,1
    3aa4:	10c01216 	blt	r2,r3,3af0 <_dtoa_r+0x10a8>
    3aa8:	003d4506 	br	2fc0 <_dtoa_r+0x578>
    3aac:	d9801417 	ldw	r6,80(sp)
    3ab0:	0005883a 	mov	r2,zero
    3ab4:	00cffc34 	movhi	r3,16368
    3ab8:	180b883a 	mov	r5,r3
    3abc:	880f883a 	mov	r7,r17
    3ac0:	1009883a 	mov	r4,r2
    3ac4:	00088dc0 	call	88dc <__subdf3>
    3ac8:	d9c01b17 	ldw	r7,108(sp)
    3acc:	180b883a 	mov	r5,r3
    3ad0:	1009883a 	mov	r4,r2
    3ad4:	b00d883a 	mov	r6,r22
    3ad8:	000920c0 	call	920c <__ltdf2>
    3adc:	103d9116 	blt	r2,zero,3124 <_dtoa_r+0x6dc>
    3ae0:	d9800517 	ldw	r6,20(sp)
    3ae4:	d9000317 	ldw	r4,12(sp)
    3ae8:	3105883a 	add	r2,r6,r4
    3aec:	e0bd3426 	beq	fp,r2,2fc0 <_dtoa_r+0x578>
    3af0:	04500934 	movhi	r17,16420
    3af4:	0021883a 	mov	r16,zero
    3af8:	b80b883a 	mov	r5,r23
    3afc:	b009883a 	mov	r4,r22
    3b00:	800d883a 	mov	r6,r16
    3b04:	880f883a 	mov	r7,r17
    3b08:	00089d00 	call	89d0 <__muldf3>
    3b0c:	d9401517 	ldw	r5,84(sp)
    3b10:	d9001417 	ldw	r4,80(sp)
    3b14:	880f883a 	mov	r7,r17
    3b18:	000d883a 	mov	r6,zero
    3b1c:	d8801a15 	stw	r2,104(sp)
    3b20:	d8c01b15 	stw	r3,108(sp)
    3b24:	00089d00 	call	89d0 <__muldf3>
    3b28:	180b883a 	mov	r5,r3
    3b2c:	1009883a 	mov	r4,r2
    3b30:	1823883a 	mov	r17,r3
    3b34:	1021883a 	mov	r16,r2
    3b38:	000938c0 	call	938c <__fixdfsi>
    3b3c:	1009883a 	mov	r4,r2
    3b40:	102b883a 	mov	r21,r2
    3b44:	00092940 	call	9294 <__floatsidf>
    3b48:	880b883a 	mov	r5,r17
    3b4c:	8009883a 	mov	r4,r16
    3b50:	180f883a 	mov	r7,r3
    3b54:	100d883a 	mov	r6,r2
    3b58:	00088dc0 	call	88dc <__subdf3>
    3b5c:	1021883a 	mov	r16,r2
    3b60:	d9001b17 	ldw	r4,108(sp)
    3b64:	1823883a 	mov	r17,r3
    3b68:	dc001415 	stw	r16,80(sp)
    3b6c:	ad400c04 	addi	r21,r21,48
    3b70:	dc401515 	stw	r17,84(sp)
    3b74:	d8801a17 	ldw	r2,104(sp)
    3b78:	e5400005 	stb	r21,0(fp)
    3b7c:	202f883a 	mov	r23,r4
    3b80:	d9c01b17 	ldw	r7,108(sp)
    3b84:	d9001417 	ldw	r4,80(sp)
    3b88:	880b883a 	mov	r5,r17
    3b8c:	100d883a 	mov	r6,r2
    3b90:	102d883a 	mov	r22,r2
    3b94:	e7000044 	addi	fp,fp,1
    3b98:	000920c0 	call	920c <__ltdf2>
    3b9c:	103fc30e 	bge	r2,zero,3aac <_dtoa_r+0x1064>
    3ba0:	d9000417 	ldw	r4,16(sp)
    3ba4:	d9000d15 	stw	r4,52(sp)
    3ba8:	003d7106 	br	3170 <_dtoa_r+0x728>
    3bac:	d9801717 	ldw	r6,92(sp)
    3bb0:	00800084 	movi	r2,2
    3bb4:	11bde60e 	bge	r2,r6,3350 <_dtoa_r+0x908>
    3bb8:	203cfb1e 	bne	r4,zero,2fa8 <_dtoa_r+0x560>
    3bbc:	d9001617 	ldw	r4,88(sp)
    3bc0:	900b883a 	mov	r5,r18
    3bc4:	01800144 	movi	r6,5
    3bc8:	000f883a 	mov	r7,zero
    3bcc:	00068900 	call	6890 <__multadd>
    3bd0:	d9000717 	ldw	r4,28(sp)
    3bd4:	100b883a 	mov	r5,r2
    3bd8:	1025883a 	mov	r18,r2
    3bdc:	0005d380 	call	5d38 <__mcmp>
    3be0:	00bcf10e 	bge	zero,r2,2fa8 <_dtoa_r+0x560>
    3be4:	d8c00d17 	ldw	r3,52(sp)
    3be8:	d9000517 	ldw	r4,20(sp)
    3bec:	d8000615 	stw	zero,24(sp)
    3bf0:	18c00044 	addi	r3,r3,1
    3bf4:	d8c00d15 	stw	r3,52(sp)
    3bf8:	00800c44 	movi	r2,49
    3bfc:	27000044 	addi	fp,r4,1
    3c00:	20800005 	stb	r2,0(r4)
    3c04:	003e8906 	br	362c <_dtoa_r+0xbe4>
    3c08:	d8c00517 	ldw	r3,20(sp)
    3c0c:	003bc206 	br	2b18 <_dtoa_r+0xd0>
    3c10:	01800074 	movhi	r6,1
    3c14:	31807c04 	addi	r6,r6,496
    3c18:	30c00917 	ldw	r3,36(r6)
    3c1c:	30800817 	ldw	r2,32(r6)
    3c20:	d9001217 	ldw	r4,72(sp)
    3c24:	d9401317 	ldw	r5,76(sp)
    3c28:	180f883a 	mov	r7,r3
    3c2c:	100d883a 	mov	r6,r2
    3c30:	0008d940 	call	8d94 <__divdf3>
    3c34:	948003cc 	andi	r18,r18,15
    3c38:	058000c4 	movi	r22,3
    3c3c:	1029883a 	mov	r20,r2
    3c40:	182b883a 	mov	r21,r3
    3c44:	003c8906 	br	2e6c <_dtoa_r+0x424>
    3c48:	d9001017 	ldw	r4,64(sp)
    3c4c:	d9800917 	ldw	r6,36(sp)
    3c50:	0025883a 	mov	r18,zero
    3c54:	1105c83a 	sub	r2,r2,r4
    3c58:	2089883a 	add	r4,r4,r2
    3c5c:	308d883a 	add	r6,r6,r2
    3c60:	d9001015 	stw	r4,64(sp)
    3c64:	d9800915 	stw	r6,36(sp)
    3c68:	003e3206 	br	3534 <_dtoa_r+0xaec>
    3c6c:	28800044 	addi	r2,r5,1
    3c70:	27000044 	addi	fp,r4,1
    3c74:	20800005 	stb	r2,0(r4)
    3c78:	003e6c06 	br	362c <_dtoa_r+0xbe4>
    3c7c:	d8800f17 	ldw	r2,60(sp)
    3c80:	00bce016 	blt	zero,r2,3004 <_dtoa_r+0x5bc>
    3c84:	d9800f17 	ldw	r6,60(sp)
    3c88:	303cc51e 	bne	r6,zero,2fa0 <_dtoa_r+0x558>
    3c8c:	0005883a 	mov	r2,zero
    3c90:	00d00534 	movhi	r3,16404
    3c94:	980b883a 	mov	r5,r19
    3c98:	180f883a 	mov	r7,r3
    3c9c:	9009883a 	mov	r4,r18
    3ca0:	100d883a 	mov	r6,r2
    3ca4:	00089d00 	call	89d0 <__muldf3>
    3ca8:	180b883a 	mov	r5,r3
    3cac:	a80f883a 	mov	r7,r21
    3cb0:	1009883a 	mov	r4,r2
    3cb4:	a00d883a 	mov	r6,r20
    3cb8:	00091840 	call	9184 <__gedf2>
    3cbc:	103cb80e 	bge	r2,zero,2fa0 <_dtoa_r+0x558>
    3cc0:	0027883a 	mov	r19,zero
    3cc4:	0025883a 	mov	r18,zero
    3cc8:	003fc606 	br	3be4 <_dtoa_r+0x119c>
    3ccc:	99400117 	ldw	r5,4(r19)
    3cd0:	d9001617 	ldw	r4,88(sp)
    3cd4:	000615c0 	call	615c <_Balloc>
    3cd8:	99800417 	ldw	r6,16(r19)
    3cdc:	11000304 	addi	r4,r2,12
    3ce0:	99400304 	addi	r5,r19,12
    3ce4:	318d883a 	add	r6,r6,r6
    3ce8:	318d883a 	add	r6,r6,r6
    3cec:	31800204 	addi	r6,r6,8
    3cf0:	1023883a 	mov	r17,r2
    3cf4:	00059c40 	call	59c4 <memcpy>
    3cf8:	d9001617 	ldw	r4,88(sp)
    3cfc:	880b883a 	mov	r5,r17
    3d00:	01800044 	movi	r6,1
    3d04:	00065200 	call	6520 <__lshift>
    3d08:	100b883a 	mov	r5,r2
    3d0c:	003d9c06 	br	3380 <_dtoa_r+0x938>
    3d10:	00800e44 	movi	r2,57
    3d14:	b8807026 	beq	r23,r2,3ed8 <_dtoa_r+0x1490>
    3d18:	b8800044 	addi	r2,r23,1
    3d1c:	b7000044 	addi	fp,r22,1
    3d20:	b0800005 	stb	r2,0(r22)
    3d24:	003e4106 	br	362c <_dtoa_r+0xbe4>
    3d28:	d8800317 	ldw	r2,12(sp)
    3d2c:	01800074 	movhi	r6,1
    3d30:	31804a04 	addi	r6,r6,296
    3d34:	b009883a 	mov	r4,r22
    3d38:	100e90fa 	slli	r7,r2,3
    3d3c:	b80b883a 	mov	r5,r23
    3d40:	398f883a 	add	r7,r7,r6
    3d44:	38bffe17 	ldw	r2,-8(r7)
    3d48:	d9800517 	ldw	r6,20(sp)
    3d4c:	38ffff17 	ldw	r3,-4(r7)
    3d50:	37000044 	addi	fp,r6,1
    3d54:	180f883a 	mov	r7,r3
    3d58:	100d883a 	mov	r6,r2
    3d5c:	00089d00 	call	89d0 <__muldf3>
    3d60:	a80b883a 	mov	r5,r21
    3d64:	a009883a 	mov	r4,r20
    3d68:	182f883a 	mov	r23,r3
    3d6c:	102d883a 	mov	r22,r2
    3d70:	000938c0 	call	938c <__fixdfsi>
    3d74:	1009883a 	mov	r4,r2
    3d78:	1027883a 	mov	r19,r2
    3d7c:	00092940 	call	9294 <__floatsidf>
    3d80:	a80b883a 	mov	r5,r21
    3d84:	a009883a 	mov	r4,r20
    3d88:	180f883a 	mov	r7,r3
    3d8c:	100d883a 	mov	r6,r2
    3d90:	00088dc0 	call	88dc <__subdf3>
    3d94:	180b883a 	mov	r5,r3
    3d98:	d8c00517 	ldw	r3,20(sp)
    3d9c:	9cc00c04 	addi	r19,r19,48
    3da0:	1009883a 	mov	r4,r2
    3da4:	1cc00005 	stb	r19,0(r3)
    3da8:	2021883a 	mov	r16,r4
    3dac:	d9000317 	ldw	r4,12(sp)
    3db0:	00800044 	movi	r2,1
    3db4:	2823883a 	mov	r17,r5
    3db8:	20802226 	beq	r4,r2,3e44 <_dtoa_r+0x13fc>
    3dbc:	1029883a 	mov	r20,r2
    3dc0:	0005883a 	mov	r2,zero
    3dc4:	00d00934 	movhi	r3,16420
    3dc8:	180f883a 	mov	r7,r3
    3dcc:	100d883a 	mov	r6,r2
    3dd0:	880b883a 	mov	r5,r17
    3dd4:	8009883a 	mov	r4,r16
    3dd8:	00089d00 	call	89d0 <__muldf3>
    3ddc:	180b883a 	mov	r5,r3
    3de0:	1009883a 	mov	r4,r2
    3de4:	1823883a 	mov	r17,r3
    3de8:	1021883a 	mov	r16,r2
    3dec:	000938c0 	call	938c <__fixdfsi>
    3df0:	1009883a 	mov	r4,r2
    3df4:	102b883a 	mov	r21,r2
    3df8:	00092940 	call	9294 <__floatsidf>
    3dfc:	880b883a 	mov	r5,r17
    3e00:	8009883a 	mov	r4,r16
    3e04:	180f883a 	mov	r7,r3
    3e08:	100d883a 	mov	r6,r2
    3e0c:	00088dc0 	call	88dc <__subdf3>
    3e10:	180b883a 	mov	r5,r3
    3e14:	d8c00517 	ldw	r3,20(sp)
    3e18:	1009883a 	mov	r4,r2
    3e1c:	ad400c04 	addi	r21,r21,48
    3e20:	1d05883a 	add	r2,r3,r20
    3e24:	15400005 	stb	r21,0(r2)
    3e28:	2021883a 	mov	r16,r4
    3e2c:	d9000317 	ldw	r4,12(sp)
    3e30:	a5000044 	addi	r20,r20,1
    3e34:	2823883a 	mov	r17,r5
    3e38:	a13fe11e 	bne	r20,r4,3dc0 <_dtoa_r+0x1378>
    3e3c:	e505883a 	add	r2,fp,r20
    3e40:	173fffc4 	addi	fp,r2,-1
    3e44:	0025883a 	mov	r18,zero
    3e48:	04cff834 	movhi	r19,16352
    3e4c:	b009883a 	mov	r4,r22
    3e50:	b80b883a 	mov	r5,r23
    3e54:	900d883a 	mov	r6,r18
    3e58:	980f883a 	mov	r7,r19
    3e5c:	000895c0 	call	895c <__adddf3>
    3e60:	180b883a 	mov	r5,r3
    3e64:	1009883a 	mov	r4,r2
    3e68:	800d883a 	mov	r6,r16
    3e6c:	880f883a 	mov	r7,r17
    3e70:	000920c0 	call	920c <__ltdf2>
    3e74:	103cab16 	blt	r2,zero,3124 <_dtoa_r+0x6dc>
    3e78:	0009883a 	mov	r4,zero
    3e7c:	980b883a 	mov	r5,r19
    3e80:	b80f883a 	mov	r7,r23
    3e84:	b00d883a 	mov	r6,r22
    3e88:	00088dc0 	call	88dc <__subdf3>
    3e8c:	180b883a 	mov	r5,r3
    3e90:	880f883a 	mov	r7,r17
    3e94:	1009883a 	mov	r4,r2
    3e98:	800d883a 	mov	r6,r16
    3e9c:	00090fc0 	call	90fc <__gtdf2>
    3ea0:	00bc470e 	bge	zero,r2,2fc0 <_dtoa_r+0x578>
    3ea4:	00c00c04 	movi	r3,48
    3ea8:	e73fffc4 	addi	fp,fp,-1
    3eac:	e0800007 	ldb	r2,0(fp)
    3eb0:	10fffd26 	beq	r2,r3,3ea8 <_dtoa_r+0x1460>
    3eb4:	d9800417 	ldw	r6,16(sp)
    3eb8:	e7000044 	addi	fp,fp,1
    3ebc:	d9800d15 	stw	r6,52(sp)
    3ec0:	003cab06 	br	3170 <_dtoa_r+0x728>
    3ec4:	d8c00f17 	ldw	r3,60(sp)
    3ec8:	d9001117 	ldw	r4,68(sp)
    3ecc:	20e1c83a 	sub	r16,r4,r3
    3ed0:	0007883a 	mov	r3,zero
    3ed4:	003d9b06 	br	3544 <_dtoa_r+0xafc>
    3ed8:	00800e44 	movi	r2,57
    3edc:	b0800005 	stb	r2,0(r22)
    3ee0:	b5800044 	addi	r22,r22,1
    3ee4:	003dc106 	br	35ec <_dtoa_r+0xba4>
    3ee8:	05800084 	movi	r22,2
    3eec:	003bf706 	br	2ecc <_dtoa_r+0x484>
    3ef0:	d9000f17 	ldw	r4,60(sp)
    3ef4:	013c000e 	bge	zero,r4,2ef8 <_dtoa_r+0x4b0>
    3ef8:	d9800e17 	ldw	r6,56(sp)
    3efc:	01bc300e 	bge	zero,r6,2fc0 <_dtoa_r+0x578>
    3f00:	0005883a 	mov	r2,zero
    3f04:	00d00934 	movhi	r3,16420
    3f08:	a80b883a 	mov	r5,r21
    3f0c:	180f883a 	mov	r7,r3
    3f10:	a009883a 	mov	r4,r20
    3f14:	100d883a 	mov	r6,r2
    3f18:	00089d00 	call	89d0 <__muldf3>
    3f1c:	b1000044 	addi	r4,r22,1
    3f20:	1021883a 	mov	r16,r2
    3f24:	1823883a 	mov	r17,r3
    3f28:	00092940 	call	9294 <__floatsidf>
    3f2c:	880b883a 	mov	r5,r17
    3f30:	8009883a 	mov	r4,r16
    3f34:	180f883a 	mov	r7,r3
    3f38:	100d883a 	mov	r6,r2
    3f3c:	00089d00 	call	89d0 <__muldf3>
    3f40:	0011883a 	mov	r8,zero
    3f44:	02500734 	movhi	r9,16412
    3f48:	180b883a 	mov	r5,r3
    3f4c:	480f883a 	mov	r7,r9
    3f50:	1009883a 	mov	r4,r2
    3f54:	400d883a 	mov	r6,r8
    3f58:	000895c0 	call	895c <__adddf3>
    3f5c:	102d883a 	mov	r22,r2
    3f60:	00bf3034 	movhi	r2,64704
    3f64:	10ef883a 	add	r23,r2,r3
    3f68:	d8800d17 	ldw	r2,52(sp)
    3f6c:	d8c00e17 	ldw	r3,56(sp)
    3f70:	8029883a 	mov	r20,r16
    3f74:	10bfffc4 	addi	r2,r2,-1
    3f78:	882b883a 	mov	r21,r17
    3f7c:	d8800415 	stw	r2,16(sp)
    3f80:	d8c00315 	stw	r3,12(sp)
    3f84:	003e8306 	br	3994 <_dtoa_r+0xf4c>
    3f88:	d8800117 	ldw	r2,4(sp)
    3f8c:	dc001117 	ldw	r16,68(sp)
    3f90:	dc801017 	ldw	r18,64(sp)
    3f94:	00c00d84 	movi	r3,54
    3f98:	1887c83a 	sub	r3,r3,r2
    3f9c:	003d6906 	br	3544 <_dtoa_r+0xafc>
    3fa0:	01800044 	movi	r6,1
    3fa4:	3021883a 	mov	r16,r6
    3fa8:	d9800f15 	stw	r6,60(sp)
    3fac:	d9802615 	stw	r6,152(sp)
    3fb0:	d9800e15 	stw	r6,56(sp)
    3fb4:	003b9306 	br	2e04 <_dtoa_r+0x3bc>
    3fb8:	b021883a 	mov	r16,r22
    3fbc:	dd800f15 	stw	r22,60(sp)
    3fc0:	003b9006 	br	2e04 <_dtoa_r+0x3bc>
    3fc4:	103e221e 	bne	r2,zero,3850 <_dtoa_r+0xe08>
    3fc8:	b880004c 	andi	r2,r23,1
    3fcc:	1005003a 	cmpeq	r2,r2,zero
    3fd0:	103e1f1e 	bne	r2,zero,3850 <_dtoa_r+0xe08>
    3fd4:	003e1b06 	br	3844 <_dtoa_r+0xdfc>
    3fd8:	d9001617 	ldw	r4,88(sp)
    3fdc:	980b883a 	mov	r5,r19
    3fe0:	01800284 	movi	r6,10
    3fe4:	000f883a 	mov	r7,zero
    3fe8:	00068900 	call	6890 <__multadd>
    3fec:	d8c00e17 	ldw	r3,56(sp)
    3ff0:	1027883a 	mov	r19,r2
    3ff4:	d8c00f15 	stw	r3,60(sp)
    3ff8:	003cd306 	br	3348 <_dtoa_r+0x900>

00003ffc <_fflush_r>:
    3ffc:	defffb04 	addi	sp,sp,-20
    4000:	dcc00315 	stw	r19,12(sp)
    4004:	dc800215 	stw	r18,8(sp)
    4008:	dfc00415 	stw	ra,16(sp)
    400c:	dc400115 	stw	r17,4(sp)
    4010:	dc000015 	stw	r16,0(sp)
    4014:	2027883a 	mov	r19,r4
    4018:	2825883a 	mov	r18,r5
    401c:	20000226 	beq	r4,zero,4028 <_fflush_r+0x2c>
    4020:	20800e17 	ldw	r2,56(r4)
    4024:	10005626 	beq	r2,zero,4180 <_fflush_r+0x184>
    4028:	9100030b 	ldhu	r4,12(r18)
    402c:	20ffffcc 	andi	r3,r4,65535
    4030:	18e0001c 	xori	r3,r3,32768
    4034:	18e00004 	addi	r3,r3,-32768
    4038:	1880020c 	andi	r2,r3,8
    403c:	1000261e 	bne	r2,zero,40d8 <_fflush_r+0xdc>
    4040:	90c00117 	ldw	r3,4(r18)
    4044:	20820014 	ori	r2,r4,2048
    4048:	9080030d 	sth	r2,12(r18)
    404c:	1009883a 	mov	r4,r2
    4050:	00c0400e 	bge	zero,r3,4154 <_fflush_r+0x158>
    4054:	92000a17 	ldw	r8,40(r18)
    4058:	40004026 	beq	r8,zero,415c <_fflush_r+0x160>
    405c:	2084000c 	andi	r2,r4,4096
    4060:	10005326 	beq	r2,zero,41b0 <_fflush_r+0x1b4>
    4064:	94001417 	ldw	r16,80(r18)
    4068:	9080030b 	ldhu	r2,12(r18)
    406c:	1080010c 	andi	r2,r2,4
    4070:	1000481e 	bne	r2,zero,4194 <_fflush_r+0x198>
    4074:	91400717 	ldw	r5,28(r18)
    4078:	9809883a 	mov	r4,r19
    407c:	800d883a 	mov	r6,r16
    4080:	000f883a 	mov	r7,zero
    4084:	403ee83a 	callr	r8
    4088:	8080261e 	bne	r16,r2,4124 <_fflush_r+0x128>
    408c:	9080030b 	ldhu	r2,12(r18)
    4090:	91000417 	ldw	r4,16(r18)
    4094:	90000115 	stw	zero,4(r18)
    4098:	10bdffcc 	andi	r2,r2,63487
    409c:	10ffffcc 	andi	r3,r2,65535
    40a0:	18c4000c 	andi	r3,r3,4096
    40a4:	9080030d 	sth	r2,12(r18)
    40a8:	91000015 	stw	r4,0(r18)
    40ac:	18002b26 	beq	r3,zero,415c <_fflush_r+0x160>
    40b0:	0007883a 	mov	r3,zero
    40b4:	1805883a 	mov	r2,r3
    40b8:	94001415 	stw	r16,80(r18)
    40bc:	dfc00417 	ldw	ra,16(sp)
    40c0:	dcc00317 	ldw	r19,12(sp)
    40c4:	dc800217 	ldw	r18,8(sp)
    40c8:	dc400117 	ldw	r17,4(sp)
    40cc:	dc000017 	ldw	r16,0(sp)
    40d0:	dec00504 	addi	sp,sp,20
    40d4:	f800283a 	ret
    40d8:	94400417 	ldw	r17,16(r18)
    40dc:	88001f26 	beq	r17,zero,415c <_fflush_r+0x160>
    40e0:	90800017 	ldw	r2,0(r18)
    40e4:	18c000cc 	andi	r3,r3,3
    40e8:	94400015 	stw	r17,0(r18)
    40ec:	1461c83a 	sub	r16,r2,r17
    40f0:	18002526 	beq	r3,zero,4188 <_fflush_r+0x18c>
    40f4:	0005883a 	mov	r2,zero
    40f8:	90800215 	stw	r2,8(r18)
    40fc:	0400170e 	bge	zero,r16,415c <_fflush_r+0x160>
    4100:	90c00917 	ldw	r3,36(r18)
    4104:	91400717 	ldw	r5,28(r18)
    4108:	880d883a 	mov	r6,r17
    410c:	800f883a 	mov	r7,r16
    4110:	9809883a 	mov	r4,r19
    4114:	183ee83a 	callr	r3
    4118:	88a3883a 	add	r17,r17,r2
    411c:	80a1c83a 	sub	r16,r16,r2
    4120:	00bff616 	blt	zero,r2,40fc <_fflush_r+0x100>
    4124:	9080030b 	ldhu	r2,12(r18)
    4128:	00ffffc4 	movi	r3,-1
    412c:	10801014 	ori	r2,r2,64
    4130:	9080030d 	sth	r2,12(r18)
    4134:	1805883a 	mov	r2,r3
    4138:	dfc00417 	ldw	ra,16(sp)
    413c:	dcc00317 	ldw	r19,12(sp)
    4140:	dc800217 	ldw	r18,8(sp)
    4144:	dc400117 	ldw	r17,4(sp)
    4148:	dc000017 	ldw	r16,0(sp)
    414c:	dec00504 	addi	sp,sp,20
    4150:	f800283a 	ret
    4154:	90800f17 	ldw	r2,60(r18)
    4158:	00bfbe16 	blt	zero,r2,4054 <_fflush_r+0x58>
    415c:	0007883a 	mov	r3,zero
    4160:	1805883a 	mov	r2,r3
    4164:	dfc00417 	ldw	ra,16(sp)
    4168:	dcc00317 	ldw	r19,12(sp)
    416c:	dc800217 	ldw	r18,8(sp)
    4170:	dc400117 	ldw	r17,4(sp)
    4174:	dc000017 	ldw	r16,0(sp)
    4178:	dec00504 	addi	sp,sp,20
    417c:	f800283a 	ret
    4180:	00042940 	call	4294 <__sinit>
    4184:	003fa806 	br	4028 <_fflush_r+0x2c>
    4188:	90800517 	ldw	r2,20(r18)
    418c:	90800215 	stw	r2,8(r18)
    4190:	003fda06 	br	40fc <_fflush_r+0x100>
    4194:	90800117 	ldw	r2,4(r18)
    4198:	90c00c17 	ldw	r3,48(r18)
    419c:	80a1c83a 	sub	r16,r16,r2
    41a0:	183fb426 	beq	r3,zero,4074 <_fflush_r+0x78>
    41a4:	90800f17 	ldw	r2,60(r18)
    41a8:	80a1c83a 	sub	r16,r16,r2
    41ac:	003fb106 	br	4074 <_fflush_r+0x78>
    41b0:	91400717 	ldw	r5,28(r18)
    41b4:	9809883a 	mov	r4,r19
    41b8:	000d883a 	mov	r6,zero
    41bc:	01c00044 	movi	r7,1
    41c0:	403ee83a 	callr	r8
    41c4:	1021883a 	mov	r16,r2
    41c8:	00bfffc4 	movi	r2,-1
    41cc:	80800226 	beq	r16,r2,41d8 <_fflush_r+0x1dc>
    41d0:	92000a17 	ldw	r8,40(r18)
    41d4:	003fa406 	br	4068 <_fflush_r+0x6c>
    41d8:	98c00017 	ldw	r3,0(r19)
    41dc:	00800744 	movi	r2,29
    41e0:	18bfde26 	beq	r3,r2,415c <_fflush_r+0x160>
    41e4:	9080030b 	ldhu	r2,12(r18)
    41e8:	8007883a 	mov	r3,r16
    41ec:	10801014 	ori	r2,r2,64
    41f0:	9080030d 	sth	r2,12(r18)
    41f4:	003fcf06 	br	4134 <_fflush_r+0x138>

000041f8 <fflush>:
    41f8:	01400034 	movhi	r5,0
    41fc:	294fff04 	addi	r5,r5,16380
    4200:	2007883a 	mov	r3,r4
    4204:	20000526 	beq	r4,zero,421c <fflush+0x24>
    4208:	00800074 	movhi	r2,1
    420c:	10876c04 	addi	r2,r2,7600
    4210:	11000017 	ldw	r4,0(r2)
    4214:	180b883a 	mov	r5,r3
    4218:	0003ffc1 	jmpi	3ffc <_fflush_r>
    421c:	00800074 	movhi	r2,1
    4220:	10876d04 	addi	r2,r2,7604
    4224:	11000017 	ldw	r4,0(r2)
    4228:	0004dc81 	jmpi	4dc8 <_fwalk_reent>

0000422c <std>:
    422c:	00800034 	movhi	r2,0
    4230:	109ca904 	addi	r2,r2,29348
    4234:	20800b15 	stw	r2,44(r4)
    4238:	00800034 	movhi	r2,0
    423c:	109ce404 	addi	r2,r2,29584
    4240:	20800815 	stw	r2,32(r4)
    4244:	00c00034 	movhi	r3,0
    4248:	18dcc504 	addi	r3,r3,29460
    424c:	00800034 	movhi	r2,0
    4250:	109cab04 	addi	r2,r2,29356
    4254:	2140030d 	sth	r5,12(r4)
    4258:	2180038d 	sth	r6,14(r4)
    425c:	20c00915 	stw	r3,36(r4)
    4260:	20800a15 	stw	r2,40(r4)
    4264:	20000015 	stw	zero,0(r4)
    4268:	20000115 	stw	zero,4(r4)
    426c:	20000215 	stw	zero,8(r4)
    4270:	20000415 	stw	zero,16(r4)
    4274:	20000515 	stw	zero,20(r4)
    4278:	20000615 	stw	zero,24(r4)
    427c:	21000715 	stw	r4,28(r4)
    4280:	f800283a 	ret

00004284 <__sfp_lock_acquire>:
    4284:	f800283a 	ret

00004288 <__sfp_lock_release>:
    4288:	f800283a 	ret

0000428c <__sinit_lock_acquire>:
    428c:	f800283a 	ret

00004290 <__sinit_lock_release>:
    4290:	f800283a 	ret

00004294 <__sinit>:
    4294:	20800e17 	ldw	r2,56(r4)
    4298:	defffd04 	addi	sp,sp,-12
    429c:	dc400115 	stw	r17,4(sp)
    42a0:	dc000015 	stw	r16,0(sp)
    42a4:	dfc00215 	stw	ra,8(sp)
    42a8:	04400044 	movi	r17,1
    42ac:	01400104 	movi	r5,4
    42b0:	000d883a 	mov	r6,zero
    42b4:	2021883a 	mov	r16,r4
    42b8:	2200bb04 	addi	r8,r4,748
    42bc:	200f883a 	mov	r7,r4
    42c0:	10000526 	beq	r2,zero,42d8 <__sinit+0x44>
    42c4:	dfc00217 	ldw	ra,8(sp)
    42c8:	dc400117 	ldw	r17,4(sp)
    42cc:	dc000017 	ldw	r16,0(sp)
    42d0:	dec00304 	addi	sp,sp,12
    42d4:	f800283a 	ret
    42d8:	21000117 	ldw	r4,4(r4)
    42dc:	00800034 	movhi	r2,0
    42e0:	1090de04 	addi	r2,r2,17272
    42e4:	00c000c4 	movi	r3,3
    42e8:	80800f15 	stw	r2,60(r16)
    42ec:	80c0b915 	stw	r3,740(r16)
    42f0:	8200ba15 	stw	r8,744(r16)
    42f4:	84400e15 	stw	r17,56(r16)
    42f8:	8000b815 	stw	zero,736(r16)
    42fc:	000422c0 	call	422c <std>
    4300:	81000217 	ldw	r4,8(r16)
    4304:	880d883a 	mov	r6,r17
    4308:	800f883a 	mov	r7,r16
    430c:	01400284 	movi	r5,10
    4310:	000422c0 	call	422c <std>
    4314:	81000317 	ldw	r4,12(r16)
    4318:	800f883a 	mov	r7,r16
    431c:	01400484 	movi	r5,18
    4320:	01800084 	movi	r6,2
    4324:	dfc00217 	ldw	ra,8(sp)
    4328:	dc400117 	ldw	r17,4(sp)
    432c:	dc000017 	ldw	r16,0(sp)
    4330:	dec00304 	addi	sp,sp,12
    4334:	000422c1 	jmpi	422c <std>

00004338 <__fp_lock>:
    4338:	0005883a 	mov	r2,zero
    433c:	f800283a 	ret

00004340 <__fp_unlock>:
    4340:	0005883a 	mov	r2,zero
    4344:	f800283a 	ret

00004348 <__fp_unlock_all>:
    4348:	00800074 	movhi	r2,1
    434c:	10876c04 	addi	r2,r2,7600
    4350:	11000017 	ldw	r4,0(r2)
    4354:	01400034 	movhi	r5,0
    4358:	2950d004 	addi	r5,r5,17216
    435c:	0004e901 	jmpi	4e90 <_fwalk>

00004360 <__fp_lock_all>:
    4360:	00800074 	movhi	r2,1
    4364:	10876c04 	addi	r2,r2,7600
    4368:	11000017 	ldw	r4,0(r2)
    436c:	01400034 	movhi	r5,0
    4370:	2950ce04 	addi	r5,r5,17208
    4374:	0004e901 	jmpi	4e90 <_fwalk>

00004378 <_cleanup_r>:
    4378:	01400034 	movhi	r5,0
    437c:	295dd604 	addi	r5,r5,30552
    4380:	0004e901 	jmpi	4e90 <_fwalk>

00004384 <_cleanup>:
    4384:	00800074 	movhi	r2,1
    4388:	10876d04 	addi	r2,r2,7604
    438c:	11000017 	ldw	r4,0(r2)
    4390:	00043781 	jmpi	4378 <_cleanup_r>

00004394 <__sfmoreglue>:
    4394:	defffc04 	addi	sp,sp,-16
    4398:	dc400115 	stw	r17,4(sp)
    439c:	2c401724 	muli	r17,r5,92
    43a0:	dc800215 	stw	r18,8(sp)
    43a4:	2825883a 	mov	r18,r5
    43a8:	89400304 	addi	r5,r17,12
    43ac:	dc000015 	stw	r16,0(sp)
    43b0:	dfc00315 	stw	ra,12(sp)
    43b4:	00051a00 	call	51a0 <_malloc_r>
    43b8:	0021883a 	mov	r16,zero
    43bc:	880d883a 	mov	r6,r17
    43c0:	000b883a 	mov	r5,zero
    43c4:	10000626 	beq	r2,zero,43e0 <__sfmoreglue+0x4c>
    43c8:	11000304 	addi	r4,r2,12
    43cc:	14800115 	stw	r18,4(r2)
    43d0:	10000015 	stw	zero,0(r2)
    43d4:	11000215 	stw	r4,8(r2)
    43d8:	1021883a 	mov	r16,r2
    43dc:	0005b440 	call	5b44 <memset>
    43e0:	8005883a 	mov	r2,r16
    43e4:	dfc00317 	ldw	ra,12(sp)
    43e8:	dc800217 	ldw	r18,8(sp)
    43ec:	dc400117 	ldw	r17,4(sp)
    43f0:	dc000017 	ldw	r16,0(sp)
    43f4:	dec00404 	addi	sp,sp,16
    43f8:	f800283a 	ret

000043fc <__sfp>:
    43fc:	defffd04 	addi	sp,sp,-12
    4400:	00800074 	movhi	r2,1
    4404:	10876d04 	addi	r2,r2,7604
    4408:	dc000015 	stw	r16,0(sp)
    440c:	14000017 	ldw	r16,0(r2)
    4410:	dc400115 	stw	r17,4(sp)
    4414:	dfc00215 	stw	ra,8(sp)
    4418:	80800e17 	ldw	r2,56(r16)
    441c:	2023883a 	mov	r17,r4
    4420:	10002626 	beq	r2,zero,44bc <__sfp+0xc0>
    4424:	8400b804 	addi	r16,r16,736
    4428:	80800117 	ldw	r2,4(r16)
    442c:	81000217 	ldw	r4,8(r16)
    4430:	10ffffc4 	addi	r3,r2,-1
    4434:	18000916 	blt	r3,zero,445c <__sfp+0x60>
    4438:	2080030f 	ldh	r2,12(r4)
    443c:	10000b26 	beq	r2,zero,446c <__sfp+0x70>
    4440:	017fffc4 	movi	r5,-1
    4444:	00000206 	br	4450 <__sfp+0x54>
    4448:	2080030f 	ldh	r2,12(r4)
    444c:	10000726 	beq	r2,zero,446c <__sfp+0x70>
    4450:	18ffffc4 	addi	r3,r3,-1
    4454:	21001704 	addi	r4,r4,92
    4458:	197ffb1e 	bne	r3,r5,4448 <__sfp+0x4c>
    445c:	80800017 	ldw	r2,0(r16)
    4460:	10001926 	beq	r2,zero,44c8 <__sfp+0xcc>
    4464:	1021883a 	mov	r16,r2
    4468:	003fef06 	br	4428 <__sfp+0x2c>
    446c:	00bfffc4 	movi	r2,-1
    4470:	00c00044 	movi	r3,1
    4474:	2080038d 	sth	r2,14(r4)
    4478:	20c0030d 	sth	r3,12(r4)
    447c:	20000015 	stw	zero,0(r4)
    4480:	20000215 	stw	zero,8(r4)
    4484:	20000115 	stw	zero,4(r4)
    4488:	20000415 	stw	zero,16(r4)
    448c:	20000515 	stw	zero,20(r4)
    4490:	20000615 	stw	zero,24(r4)
    4494:	20000c15 	stw	zero,48(r4)
    4498:	20000d15 	stw	zero,52(r4)
    449c:	20001115 	stw	zero,68(r4)
    44a0:	20001215 	stw	zero,72(r4)
    44a4:	2005883a 	mov	r2,r4
    44a8:	dfc00217 	ldw	ra,8(sp)
    44ac:	dc400117 	ldw	r17,4(sp)
    44b0:	dc000017 	ldw	r16,0(sp)
    44b4:	dec00304 	addi	sp,sp,12
    44b8:	f800283a 	ret
    44bc:	8009883a 	mov	r4,r16
    44c0:	00042940 	call	4294 <__sinit>
    44c4:	003fd706 	br	4424 <__sfp+0x28>
    44c8:	8809883a 	mov	r4,r17
    44cc:	01400104 	movi	r5,4
    44d0:	00043940 	call	4394 <__sfmoreglue>
    44d4:	80800015 	stw	r2,0(r16)
    44d8:	103fe21e 	bne	r2,zero,4464 <__sfp+0x68>
    44dc:	00800304 	movi	r2,12
    44e0:	0009883a 	mov	r4,zero
    44e4:	88800015 	stw	r2,0(r17)
    44e8:	003fee06 	br	44a4 <__sfp+0xa8>

000044ec <_malloc_trim_r>:
    44ec:	defffb04 	addi	sp,sp,-20
    44f0:	dcc00315 	stw	r19,12(sp)
    44f4:	04c00074 	movhi	r19,1
    44f8:	9cc1e804 	addi	r19,r19,1952
    44fc:	dc800215 	stw	r18,8(sp)
    4500:	dc400115 	stw	r17,4(sp)
    4504:	dc000015 	stw	r16,0(sp)
    4508:	2823883a 	mov	r17,r5
    450c:	2025883a 	mov	r18,r4
    4510:	dfc00415 	stw	ra,16(sp)
    4514:	000a3f40 	call	a3f4 <__malloc_lock>
    4518:	98800217 	ldw	r2,8(r19)
    451c:	9009883a 	mov	r4,r18
    4520:	000b883a 	mov	r5,zero
    4524:	10c00117 	ldw	r3,4(r2)
    4528:	00bfff04 	movi	r2,-4
    452c:	18a0703a 	and	r16,r3,r2
    4530:	8463c83a 	sub	r17,r16,r17
    4534:	8c43fbc4 	addi	r17,r17,4079
    4538:	8822d33a 	srli	r17,r17,12
    453c:	0083ffc4 	movi	r2,4095
    4540:	8c7fffc4 	addi	r17,r17,-1
    4544:	8822933a 	slli	r17,r17,12
    4548:	1440060e 	bge	r2,r17,4564 <_malloc_trim_r+0x78>
    454c:	00072340 	call	7234 <_sbrk_r>
    4550:	98c00217 	ldw	r3,8(r19)
    4554:	9009883a 	mov	r4,r18
    4558:	044bc83a 	sub	r5,zero,r17
    455c:	80c7883a 	add	r3,r16,r3
    4560:	10c00926 	beq	r2,r3,4588 <_malloc_trim_r+0x9c>
    4564:	000a4140 	call	a414 <__malloc_unlock>
    4568:	0005883a 	mov	r2,zero
    456c:	dfc00417 	ldw	ra,16(sp)
    4570:	dcc00317 	ldw	r19,12(sp)
    4574:	dc800217 	ldw	r18,8(sp)
    4578:	dc400117 	ldw	r17,4(sp)
    457c:	dc000017 	ldw	r16,0(sp)
    4580:	dec00504 	addi	sp,sp,20
    4584:	f800283a 	ret
    4588:	9009883a 	mov	r4,r18
    458c:	00072340 	call	7234 <_sbrk_r>
    4590:	844dc83a 	sub	r6,r16,r17
    4594:	00ffffc4 	movi	r3,-1
    4598:	9009883a 	mov	r4,r18
    459c:	000b883a 	mov	r5,zero
    45a0:	01c00074 	movhi	r7,1
    45a4:	39c78e04 	addi	r7,r7,7736
    45a8:	31800054 	ori	r6,r6,1
    45ac:	10c00926 	beq	r2,r3,45d4 <_malloc_trim_r+0xe8>
    45b0:	38800017 	ldw	r2,0(r7)
    45b4:	98c00217 	ldw	r3,8(r19)
    45b8:	9009883a 	mov	r4,r18
    45bc:	1445c83a 	sub	r2,r2,r17
    45c0:	38800015 	stw	r2,0(r7)
    45c4:	19800115 	stw	r6,4(r3)
    45c8:	000a4140 	call	a414 <__malloc_unlock>
    45cc:	00800044 	movi	r2,1
    45d0:	003fe606 	br	456c <_malloc_trim_r+0x80>
    45d4:	00072340 	call	7234 <_sbrk_r>
    45d8:	99800217 	ldw	r6,8(r19)
    45dc:	100f883a 	mov	r7,r2
    45e0:	9009883a 	mov	r4,r18
    45e4:	1187c83a 	sub	r3,r2,r6
    45e8:	008003c4 	movi	r2,15
    45ec:	19400054 	ori	r5,r3,1
    45f0:	10ffdc0e 	bge	r2,r3,4564 <_malloc_trim_r+0x78>
    45f4:	00800074 	movhi	r2,1
    45f8:	10877104 	addi	r2,r2,7620
    45fc:	10c00017 	ldw	r3,0(r2)
    4600:	00800074 	movhi	r2,1
    4604:	10878e04 	addi	r2,r2,7736
    4608:	31400115 	stw	r5,4(r6)
    460c:	38c7c83a 	sub	r3,r7,r3
    4610:	10c00015 	stw	r3,0(r2)
    4614:	003fd306 	br	4564 <_malloc_trim_r+0x78>

00004618 <_free_r>:
    4618:	defffd04 	addi	sp,sp,-12
    461c:	dc400115 	stw	r17,4(sp)
    4620:	dc000015 	stw	r16,0(sp)
    4624:	dfc00215 	stw	ra,8(sp)
    4628:	2821883a 	mov	r16,r5
    462c:	2023883a 	mov	r17,r4
    4630:	28005a26 	beq	r5,zero,479c <_free_r+0x184>
    4634:	000a3f40 	call	a3f4 <__malloc_lock>
    4638:	823ffe04 	addi	r8,r16,-8
    463c:	41400117 	ldw	r5,4(r8)
    4640:	00bfff84 	movi	r2,-2
    4644:	02800074 	movhi	r10,1
    4648:	5281e804 	addi	r10,r10,1952
    464c:	288e703a 	and	r7,r5,r2
    4650:	41cd883a 	add	r6,r8,r7
    4654:	30c00117 	ldw	r3,4(r6)
    4658:	51000217 	ldw	r4,8(r10)
    465c:	00bfff04 	movi	r2,-4
    4660:	1892703a 	and	r9,r3,r2
    4664:	5017883a 	mov	r11,r10
    4668:	31006726 	beq	r6,r4,4808 <_free_r+0x1f0>
    466c:	2880004c 	andi	r2,r5,1
    4670:	1005003a 	cmpeq	r2,r2,zero
    4674:	32400115 	stw	r9,4(r6)
    4678:	10001a1e 	bne	r2,zero,46e4 <_free_r+0xcc>
    467c:	000b883a 	mov	r5,zero
    4680:	3247883a 	add	r3,r6,r9
    4684:	18800117 	ldw	r2,4(r3)
    4688:	1080004c 	andi	r2,r2,1
    468c:	1000231e 	bne	r2,zero,471c <_free_r+0x104>
    4690:	280ac03a 	cmpne	r5,r5,zero
    4694:	3a4f883a 	add	r7,r7,r9
    4698:	2800451e 	bne	r5,zero,47b0 <_free_r+0x198>
    469c:	31000217 	ldw	r4,8(r6)
    46a0:	00800074 	movhi	r2,1
    46a4:	1081ea04 	addi	r2,r2,1960
    46a8:	20807b26 	beq	r4,r2,4898 <_free_r+0x280>
    46ac:	30800317 	ldw	r2,12(r6)
    46b0:	3a07883a 	add	r3,r7,r8
    46b4:	19c00015 	stw	r7,0(r3)
    46b8:	11000215 	stw	r4,8(r2)
    46bc:	20800315 	stw	r2,12(r4)
    46c0:	38800054 	ori	r2,r7,1
    46c4:	40800115 	stw	r2,4(r8)
    46c8:	28001a26 	beq	r5,zero,4734 <_free_r+0x11c>
    46cc:	8809883a 	mov	r4,r17
    46d0:	dfc00217 	ldw	ra,8(sp)
    46d4:	dc400117 	ldw	r17,4(sp)
    46d8:	dc000017 	ldw	r16,0(sp)
    46dc:	dec00304 	addi	sp,sp,12
    46e0:	000a4141 	jmpi	a414 <__malloc_unlock>
    46e4:	80bffe17 	ldw	r2,-8(r16)
    46e8:	50c00204 	addi	r3,r10,8
    46ec:	4091c83a 	sub	r8,r8,r2
    46f0:	41000217 	ldw	r4,8(r8)
    46f4:	388f883a 	add	r7,r7,r2
    46f8:	20c06126 	beq	r4,r3,4880 <_free_r+0x268>
    46fc:	40800317 	ldw	r2,12(r8)
    4700:	3247883a 	add	r3,r6,r9
    4704:	000b883a 	mov	r5,zero
    4708:	11000215 	stw	r4,8(r2)
    470c:	20800315 	stw	r2,12(r4)
    4710:	18800117 	ldw	r2,4(r3)
    4714:	1080004c 	andi	r2,r2,1
    4718:	103fdd26 	beq	r2,zero,4690 <_free_r+0x78>
    471c:	38800054 	ori	r2,r7,1
    4720:	3a07883a 	add	r3,r7,r8
    4724:	280ac03a 	cmpne	r5,r5,zero
    4728:	40800115 	stw	r2,4(r8)
    472c:	19c00015 	stw	r7,0(r3)
    4730:	283fe61e 	bne	r5,zero,46cc <_free_r+0xb4>
    4734:	00807fc4 	movi	r2,511
    4738:	11c01f2e 	bgeu	r2,r7,47b8 <_free_r+0x1a0>
    473c:	3806d27a 	srli	r3,r7,9
    4740:	1800481e 	bne	r3,zero,4864 <_free_r+0x24c>
    4744:	3804d0fa 	srli	r2,r7,3
    4748:	100690fa 	slli	r3,r2,3
    474c:	1acd883a 	add	r6,r3,r11
    4750:	31400217 	ldw	r5,8(r6)
    4754:	31405926 	beq	r6,r5,48bc <_free_r+0x2a4>
    4758:	28800117 	ldw	r2,4(r5)
    475c:	00ffff04 	movi	r3,-4
    4760:	10c4703a 	and	r2,r2,r3
    4764:	3880022e 	bgeu	r7,r2,4770 <_free_r+0x158>
    4768:	29400217 	ldw	r5,8(r5)
    476c:	317ffa1e 	bne	r6,r5,4758 <_free_r+0x140>
    4770:	29800317 	ldw	r6,12(r5)
    4774:	41800315 	stw	r6,12(r8)
    4778:	41400215 	stw	r5,8(r8)
    477c:	8809883a 	mov	r4,r17
    4780:	2a000315 	stw	r8,12(r5)
    4784:	32000215 	stw	r8,8(r6)
    4788:	dfc00217 	ldw	ra,8(sp)
    478c:	dc400117 	ldw	r17,4(sp)
    4790:	dc000017 	ldw	r16,0(sp)
    4794:	dec00304 	addi	sp,sp,12
    4798:	000a4141 	jmpi	a414 <__malloc_unlock>
    479c:	dfc00217 	ldw	ra,8(sp)
    47a0:	dc400117 	ldw	r17,4(sp)
    47a4:	dc000017 	ldw	r16,0(sp)
    47a8:	dec00304 	addi	sp,sp,12
    47ac:	f800283a 	ret
    47b0:	31000217 	ldw	r4,8(r6)
    47b4:	003fbd06 	br	46ac <_free_r+0x94>
    47b8:	3806d0fa 	srli	r3,r7,3
    47bc:	00800044 	movi	r2,1
    47c0:	51400117 	ldw	r5,4(r10)
    47c4:	180890fa 	slli	r4,r3,3
    47c8:	1807d0ba 	srai	r3,r3,2
    47cc:	22c9883a 	add	r4,r4,r11
    47d0:	21800217 	ldw	r6,8(r4)
    47d4:	10c4983a 	sll	r2,r2,r3
    47d8:	41000315 	stw	r4,12(r8)
    47dc:	41800215 	stw	r6,8(r8)
    47e0:	288ab03a 	or	r5,r5,r2
    47e4:	22000215 	stw	r8,8(r4)
    47e8:	8809883a 	mov	r4,r17
    47ec:	51400115 	stw	r5,4(r10)
    47f0:	32000315 	stw	r8,12(r6)
    47f4:	dfc00217 	ldw	ra,8(sp)
    47f8:	dc400117 	ldw	r17,4(sp)
    47fc:	dc000017 	ldw	r16,0(sp)
    4800:	dec00304 	addi	sp,sp,12
    4804:	000a4141 	jmpi	a414 <__malloc_unlock>
    4808:	2880004c 	andi	r2,r5,1
    480c:	3a4d883a 	add	r6,r7,r9
    4810:	1000071e 	bne	r2,zero,4830 <_free_r+0x218>
    4814:	80bffe17 	ldw	r2,-8(r16)
    4818:	4091c83a 	sub	r8,r8,r2
    481c:	41000317 	ldw	r4,12(r8)
    4820:	40c00217 	ldw	r3,8(r8)
    4824:	308d883a 	add	r6,r6,r2
    4828:	20c00215 	stw	r3,8(r4)
    482c:	19000315 	stw	r4,12(r3)
    4830:	00800074 	movhi	r2,1
    4834:	10877004 	addi	r2,r2,7616
    4838:	11000017 	ldw	r4,0(r2)
    483c:	30c00054 	ori	r3,r6,1
    4840:	52000215 	stw	r8,8(r10)
    4844:	40c00115 	stw	r3,4(r8)
    4848:	313fa036 	bltu	r6,r4,46cc <_free_r+0xb4>
    484c:	00800074 	movhi	r2,1
    4850:	10878404 	addi	r2,r2,7696
    4854:	11400017 	ldw	r5,0(r2)
    4858:	8809883a 	mov	r4,r17
    485c:	00044ec0 	call	44ec <_malloc_trim_r>
    4860:	003f9a06 	br	46cc <_free_r+0xb4>
    4864:	00800104 	movi	r2,4
    4868:	10c0072e 	bgeu	r2,r3,4888 <_free_r+0x270>
    486c:	00800504 	movi	r2,20
    4870:	10c01936 	bltu	r2,r3,48d8 <_free_r+0x2c0>
    4874:	188016c4 	addi	r2,r3,91
    4878:	100690fa 	slli	r3,r2,3
    487c:	003fb306 	br	474c <_free_r+0x134>
    4880:	01400044 	movi	r5,1
    4884:	003f7e06 	br	4680 <_free_r+0x68>
    4888:	3804d1ba 	srli	r2,r7,6
    488c:	10800e04 	addi	r2,r2,56
    4890:	100690fa 	slli	r3,r2,3
    4894:	003fad06 	br	474c <_free_r+0x134>
    4898:	22000315 	stw	r8,12(r4)
    489c:	22000215 	stw	r8,8(r4)
    48a0:	3a05883a 	add	r2,r7,r8
    48a4:	38c00054 	ori	r3,r7,1
    48a8:	11c00015 	stw	r7,0(r2)
    48ac:	41000215 	stw	r4,8(r8)
    48b0:	40c00115 	stw	r3,4(r8)
    48b4:	41000315 	stw	r4,12(r8)
    48b8:	003f8406 	br	46cc <_free_r+0xb4>
    48bc:	1005d0ba 	srai	r2,r2,2
    48c0:	00c00044 	movi	r3,1
    48c4:	51000117 	ldw	r4,4(r10)
    48c8:	1886983a 	sll	r3,r3,r2
    48cc:	20c8b03a 	or	r4,r4,r3
    48d0:	51000115 	stw	r4,4(r10)
    48d4:	003fa706 	br	4774 <_free_r+0x15c>
    48d8:	00801504 	movi	r2,84
    48dc:	10c00436 	bltu	r2,r3,48f0 <_free_r+0x2d8>
    48e0:	3804d33a 	srli	r2,r7,12
    48e4:	10801b84 	addi	r2,r2,110
    48e8:	100690fa 	slli	r3,r2,3
    48ec:	003f9706 	br	474c <_free_r+0x134>
    48f0:	00805504 	movi	r2,340
    48f4:	10c00436 	bltu	r2,r3,4908 <_free_r+0x2f0>
    48f8:	3804d3fa 	srli	r2,r7,15
    48fc:	10801dc4 	addi	r2,r2,119
    4900:	100690fa 	slli	r3,r2,3
    4904:	003f9106 	br	474c <_free_r+0x134>
    4908:	00815504 	movi	r2,1364
    490c:	10c0032e 	bgeu	r2,r3,491c <_free_r+0x304>
    4910:	00801f84 	movi	r2,126
    4914:	00c0fc04 	movi	r3,1008
    4918:	003f8c06 	br	474c <_free_r+0x134>
    491c:	3804d4ba 	srli	r2,r7,18
    4920:	10801f04 	addi	r2,r2,124
    4924:	100690fa 	slli	r3,r2,3
    4928:	003f8806 	br	474c <_free_r+0x134>

0000492c <__sfvwrite_r>:
    492c:	30800217 	ldw	r2,8(r6)
    4930:	defff504 	addi	sp,sp,-44
    4934:	df000915 	stw	fp,36(sp)
    4938:	dd800715 	stw	r22,28(sp)
    493c:	dc800315 	stw	r18,12(sp)
    4940:	dfc00a15 	stw	ra,40(sp)
    4944:	ddc00815 	stw	r23,32(sp)
    4948:	dd400615 	stw	r21,24(sp)
    494c:	dd000515 	stw	r20,20(sp)
    4950:	dcc00415 	stw	r19,16(sp)
    4954:	dc400215 	stw	r17,8(sp)
    4958:	dc000115 	stw	r16,4(sp)
    495c:	302d883a 	mov	r22,r6
    4960:	2039883a 	mov	fp,r4
    4964:	2825883a 	mov	r18,r5
    4968:	10001c26 	beq	r2,zero,49dc <__sfvwrite_r+0xb0>
    496c:	29c0030b 	ldhu	r7,12(r5)
    4970:	3880020c 	andi	r2,r7,8
    4974:	10002726 	beq	r2,zero,4a14 <__sfvwrite_r+0xe8>
    4978:	28800417 	ldw	r2,16(r5)
    497c:	10002526 	beq	r2,zero,4a14 <__sfvwrite_r+0xe8>
    4980:	3880008c 	andi	r2,r7,2
    4984:	b5400017 	ldw	r21,0(r22)
    4988:	10002826 	beq	r2,zero,4a2c <__sfvwrite_r+0x100>
    498c:	0021883a 	mov	r16,zero
    4990:	0023883a 	mov	r17,zero
    4994:	880d883a 	mov	r6,r17
    4998:	e009883a 	mov	r4,fp
    499c:	00810004 	movi	r2,1024
    49a0:	80006e26 	beq	r16,zero,4b5c <__sfvwrite_r+0x230>
    49a4:	800f883a 	mov	r7,r16
    49a8:	91400717 	ldw	r5,28(r18)
    49ac:	1400012e 	bgeu	r2,r16,49b4 <__sfvwrite_r+0x88>
    49b0:	100f883a 	mov	r7,r2
    49b4:	90c00917 	ldw	r3,36(r18)
    49b8:	183ee83a 	callr	r3
    49bc:	1007883a 	mov	r3,r2
    49c0:	80a1c83a 	sub	r16,r16,r2
    49c4:	88a3883a 	add	r17,r17,r2
    49c8:	00806d0e 	bge	zero,r2,4b80 <__sfvwrite_r+0x254>
    49cc:	b0800217 	ldw	r2,8(r22)
    49d0:	10c5c83a 	sub	r2,r2,r3
    49d4:	b0800215 	stw	r2,8(r22)
    49d8:	103fee1e 	bne	r2,zero,4994 <__sfvwrite_r+0x68>
    49dc:	0009883a 	mov	r4,zero
    49e0:	2005883a 	mov	r2,r4
    49e4:	dfc00a17 	ldw	ra,40(sp)
    49e8:	df000917 	ldw	fp,36(sp)
    49ec:	ddc00817 	ldw	r23,32(sp)
    49f0:	dd800717 	ldw	r22,28(sp)
    49f4:	dd400617 	ldw	r21,24(sp)
    49f8:	dd000517 	ldw	r20,20(sp)
    49fc:	dcc00417 	ldw	r19,16(sp)
    4a00:	dc800317 	ldw	r18,12(sp)
    4a04:	dc400217 	ldw	r17,8(sp)
    4a08:	dc000117 	ldw	r16,4(sp)
    4a0c:	dec00b04 	addi	sp,sp,44
    4a10:	f800283a 	ret
    4a14:	00026f40 	call	26f4 <__swsetup_r>
    4a18:	1000e41e 	bne	r2,zero,4dac <__sfvwrite_r+0x480>
    4a1c:	91c0030b 	ldhu	r7,12(r18)
    4a20:	b5400017 	ldw	r21,0(r22)
    4a24:	3880008c 	andi	r2,r7,2
    4a28:	103fd81e 	bne	r2,zero,498c <__sfvwrite_r+0x60>
    4a2c:	3880004c 	andi	r2,r7,1
    4a30:	1005003a 	cmpeq	r2,r2,zero
    4a34:	10005726 	beq	r2,zero,4b94 <__sfvwrite_r+0x268>
    4a38:	0029883a 	mov	r20,zero
    4a3c:	002f883a 	mov	r23,zero
    4a40:	a0004226 	beq	r20,zero,4b4c <__sfvwrite_r+0x220>
    4a44:	3880800c 	andi	r2,r7,512
    4a48:	94000217 	ldw	r16,8(r18)
    4a4c:	10008b26 	beq	r2,zero,4c7c <__sfvwrite_r+0x350>
    4a50:	800d883a 	mov	r6,r16
    4a54:	a400a536 	bltu	r20,r16,4cec <__sfvwrite_r+0x3c0>
    4a58:	3881200c 	andi	r2,r7,1152
    4a5c:	10002726 	beq	r2,zero,4afc <__sfvwrite_r+0x1d0>
    4a60:	90800517 	ldw	r2,20(r18)
    4a64:	92000417 	ldw	r8,16(r18)
    4a68:	91400017 	ldw	r5,0(r18)
    4a6c:	1087883a 	add	r3,r2,r2
    4a70:	1887883a 	add	r3,r3,r2
    4a74:	1808d7fa 	srli	r4,r3,31
    4a78:	2a21c83a 	sub	r16,r5,r8
    4a7c:	80800044 	addi	r2,r16,1
    4a80:	20c9883a 	add	r4,r4,r3
    4a84:	2027d07a 	srai	r19,r4,1
    4a88:	a085883a 	add	r2,r20,r2
    4a8c:	980d883a 	mov	r6,r19
    4a90:	9880022e 	bgeu	r19,r2,4a9c <__sfvwrite_r+0x170>
    4a94:	1027883a 	mov	r19,r2
    4a98:	100d883a 	mov	r6,r2
    4a9c:	3881000c 	andi	r2,r7,1024
    4aa0:	1000b826 	beq	r2,zero,4d84 <__sfvwrite_r+0x458>
    4aa4:	300b883a 	mov	r5,r6
    4aa8:	e009883a 	mov	r4,fp
    4aac:	00051a00 	call	51a0 <_malloc_r>
    4ab0:	10003126 	beq	r2,zero,4b78 <__sfvwrite_r+0x24c>
    4ab4:	91400417 	ldw	r5,16(r18)
    4ab8:	1009883a 	mov	r4,r2
    4abc:	800d883a 	mov	r6,r16
    4ac0:	1023883a 	mov	r17,r2
    4ac4:	00059c40 	call	59c4 <memcpy>
    4ac8:	90c0030b 	ldhu	r3,12(r18)
    4acc:	00beffc4 	movi	r2,-1025
    4ad0:	1886703a 	and	r3,r3,r2
    4ad4:	18c02014 	ori	r3,r3,128
    4ad8:	90c0030d 	sth	r3,12(r18)
    4adc:	9c07c83a 	sub	r3,r19,r16
    4ae0:	8c05883a 	add	r2,r17,r16
    4ae4:	a00d883a 	mov	r6,r20
    4ae8:	a021883a 	mov	r16,r20
    4aec:	90800015 	stw	r2,0(r18)
    4af0:	90c00215 	stw	r3,8(r18)
    4af4:	94400415 	stw	r17,16(r18)
    4af8:	94c00515 	stw	r19,20(r18)
    4afc:	91000017 	ldw	r4,0(r18)
    4b00:	b80b883a 	mov	r5,r23
    4b04:	a023883a 	mov	r17,r20
    4b08:	0005a640 	call	5a64 <memmove>
    4b0c:	90c00217 	ldw	r3,8(r18)
    4b10:	90800017 	ldw	r2,0(r18)
    4b14:	a027883a 	mov	r19,r20
    4b18:	1c07c83a 	sub	r3,r3,r16
    4b1c:	1405883a 	add	r2,r2,r16
    4b20:	90c00215 	stw	r3,8(r18)
    4b24:	a021883a 	mov	r16,r20
    4b28:	90800015 	stw	r2,0(r18)
    4b2c:	b0800217 	ldw	r2,8(r22)
    4b30:	1405c83a 	sub	r2,r2,r16
    4b34:	b0800215 	stw	r2,8(r22)
    4b38:	103fa826 	beq	r2,zero,49dc <__sfvwrite_r+0xb0>
    4b3c:	a469c83a 	sub	r20,r20,r17
    4b40:	91c0030b 	ldhu	r7,12(r18)
    4b44:	bcef883a 	add	r23,r23,r19
    4b48:	a03fbe1e 	bne	r20,zero,4a44 <__sfvwrite_r+0x118>
    4b4c:	adc00017 	ldw	r23,0(r21)
    4b50:	ad000117 	ldw	r20,4(r21)
    4b54:	ad400204 	addi	r21,r21,8
    4b58:	003fb906 	br	4a40 <__sfvwrite_r+0x114>
    4b5c:	ac400017 	ldw	r17,0(r21)
    4b60:	ac000117 	ldw	r16,4(r21)
    4b64:	ad400204 	addi	r21,r21,8
    4b68:	003f8a06 	br	4994 <__sfvwrite_r+0x68>
    4b6c:	91400417 	ldw	r5,16(r18)
    4b70:	e009883a 	mov	r4,fp
    4b74:	00046180 	call	4618 <_free_r>
    4b78:	00800304 	movi	r2,12
    4b7c:	e0800015 	stw	r2,0(fp)
    4b80:	9080030b 	ldhu	r2,12(r18)
    4b84:	013fffc4 	movi	r4,-1
    4b88:	10801014 	ori	r2,r2,64
    4b8c:	9080030d 	sth	r2,12(r18)
    4b90:	003f9306 	br	49e0 <__sfvwrite_r+0xb4>
    4b94:	0027883a 	mov	r19,zero
    4b98:	002f883a 	mov	r23,zero
    4b9c:	d8000015 	stw	zero,0(sp)
    4ba0:	0029883a 	mov	r20,zero
    4ba4:	98001e26 	beq	r19,zero,4c20 <__sfvwrite_r+0x2f4>
    4ba8:	d8c00017 	ldw	r3,0(sp)
    4bac:	1804c03a 	cmpne	r2,r3,zero
    4bb0:	10005e26 	beq	r2,zero,4d2c <__sfvwrite_r+0x400>
    4bb4:	9821883a 	mov	r16,r19
    4bb8:	a4c0012e 	bgeu	r20,r19,4bc0 <__sfvwrite_r+0x294>
    4bbc:	a021883a 	mov	r16,r20
    4bc0:	91000017 	ldw	r4,0(r18)
    4bc4:	90800417 	ldw	r2,16(r18)
    4bc8:	91800217 	ldw	r6,8(r18)
    4bcc:	91c00517 	ldw	r7,20(r18)
    4bd0:	1100022e 	bgeu	r2,r4,4bdc <__sfvwrite_r+0x2b0>
    4bd4:	31e3883a 	add	r17,r6,r7
    4bd8:	8c001616 	blt	r17,r16,4c34 <__sfvwrite_r+0x308>
    4bdc:	81c03816 	blt	r16,r7,4cc0 <__sfvwrite_r+0x394>
    4be0:	90c00917 	ldw	r3,36(r18)
    4be4:	91400717 	ldw	r5,28(r18)
    4be8:	e009883a 	mov	r4,fp
    4bec:	b80d883a 	mov	r6,r23
    4bf0:	183ee83a 	callr	r3
    4bf4:	1023883a 	mov	r17,r2
    4bf8:	00bfe10e 	bge	zero,r2,4b80 <__sfvwrite_r+0x254>
    4bfc:	a469c83a 	sub	r20,r20,r17
    4c00:	a0001826 	beq	r20,zero,4c64 <__sfvwrite_r+0x338>
    4c04:	b0800217 	ldw	r2,8(r22)
    4c08:	1445c83a 	sub	r2,r2,r17
    4c0c:	b0800215 	stw	r2,8(r22)
    4c10:	103f7226 	beq	r2,zero,49dc <__sfvwrite_r+0xb0>
    4c14:	9c67c83a 	sub	r19,r19,r17
    4c18:	bc6f883a 	add	r23,r23,r17
    4c1c:	983fe21e 	bne	r19,zero,4ba8 <__sfvwrite_r+0x27c>
    4c20:	adc00017 	ldw	r23,0(r21)
    4c24:	acc00117 	ldw	r19,4(r21)
    4c28:	ad400204 	addi	r21,r21,8
    4c2c:	d8000015 	stw	zero,0(sp)
    4c30:	003fdc06 	br	4ba4 <__sfvwrite_r+0x278>
    4c34:	b80b883a 	mov	r5,r23
    4c38:	880d883a 	mov	r6,r17
    4c3c:	0005a640 	call	5a64 <memmove>
    4c40:	90c00017 	ldw	r3,0(r18)
    4c44:	e009883a 	mov	r4,fp
    4c48:	900b883a 	mov	r5,r18
    4c4c:	1c47883a 	add	r3,r3,r17
    4c50:	90c00015 	stw	r3,0(r18)
    4c54:	0003ffc0 	call	3ffc <_fflush_r>
    4c58:	103fc91e 	bne	r2,zero,4b80 <__sfvwrite_r+0x254>
    4c5c:	a469c83a 	sub	r20,r20,r17
    4c60:	a03fe81e 	bne	r20,zero,4c04 <__sfvwrite_r+0x2d8>
    4c64:	e009883a 	mov	r4,fp
    4c68:	900b883a 	mov	r5,r18
    4c6c:	0003ffc0 	call	3ffc <_fflush_r>
    4c70:	103fc31e 	bne	r2,zero,4b80 <__sfvwrite_r+0x254>
    4c74:	d8000015 	stw	zero,0(sp)
    4c78:	003fe206 	br	4c04 <__sfvwrite_r+0x2d8>
    4c7c:	91000017 	ldw	r4,0(r18)
    4c80:	90800417 	ldw	r2,16(r18)
    4c84:	1100022e 	bgeu	r2,r4,4c90 <__sfvwrite_r+0x364>
    4c88:	8023883a 	mov	r17,r16
    4c8c:	85003136 	bltu	r16,r20,4d54 <__sfvwrite_r+0x428>
    4c90:	91c00517 	ldw	r7,20(r18)
    4c94:	a1c01836 	bltu	r20,r7,4cf8 <__sfvwrite_r+0x3cc>
    4c98:	90c00917 	ldw	r3,36(r18)
    4c9c:	91400717 	ldw	r5,28(r18)
    4ca0:	e009883a 	mov	r4,fp
    4ca4:	b80d883a 	mov	r6,r23
    4ca8:	183ee83a 	callr	r3
    4cac:	1021883a 	mov	r16,r2
    4cb0:	00bfb30e 	bge	zero,r2,4b80 <__sfvwrite_r+0x254>
    4cb4:	1023883a 	mov	r17,r2
    4cb8:	1027883a 	mov	r19,r2
    4cbc:	003f9b06 	br	4b2c <__sfvwrite_r+0x200>
    4cc0:	b80b883a 	mov	r5,r23
    4cc4:	800d883a 	mov	r6,r16
    4cc8:	0005a640 	call	5a64 <memmove>
    4ccc:	90c00217 	ldw	r3,8(r18)
    4cd0:	90800017 	ldw	r2,0(r18)
    4cd4:	8023883a 	mov	r17,r16
    4cd8:	1c07c83a 	sub	r3,r3,r16
    4cdc:	1405883a 	add	r2,r2,r16
    4ce0:	90c00215 	stw	r3,8(r18)
    4ce4:	90800015 	stw	r2,0(r18)
    4ce8:	003fc406 	br	4bfc <__sfvwrite_r+0x2d0>
    4cec:	a00d883a 	mov	r6,r20
    4cf0:	a021883a 	mov	r16,r20
    4cf4:	003f8106 	br	4afc <__sfvwrite_r+0x1d0>
    4cf8:	b80b883a 	mov	r5,r23
    4cfc:	a00d883a 	mov	r6,r20
    4d00:	0005a640 	call	5a64 <memmove>
    4d04:	90c00217 	ldw	r3,8(r18)
    4d08:	90800017 	ldw	r2,0(r18)
    4d0c:	a021883a 	mov	r16,r20
    4d10:	1d07c83a 	sub	r3,r3,r20
    4d14:	1505883a 	add	r2,r2,r20
    4d18:	a023883a 	mov	r17,r20
    4d1c:	a027883a 	mov	r19,r20
    4d20:	90c00215 	stw	r3,8(r18)
    4d24:	90800015 	stw	r2,0(r18)
    4d28:	003f8006 	br	4b2c <__sfvwrite_r+0x200>
    4d2c:	b809883a 	mov	r4,r23
    4d30:	01400284 	movi	r5,10
    4d34:	980d883a 	mov	r6,r19
    4d38:	00058e00 	call	58e0 <memchr>
    4d3c:	10001726 	beq	r2,zero,4d9c <__sfvwrite_r+0x470>
    4d40:	15c5c83a 	sub	r2,r2,r23
    4d44:	15000044 	addi	r20,r2,1
    4d48:	00800044 	movi	r2,1
    4d4c:	d8800015 	stw	r2,0(sp)
    4d50:	003f9806 	br	4bb4 <__sfvwrite_r+0x288>
    4d54:	b80b883a 	mov	r5,r23
    4d58:	800d883a 	mov	r6,r16
    4d5c:	0005a640 	call	5a64 <memmove>
    4d60:	90c00017 	ldw	r3,0(r18)
    4d64:	e009883a 	mov	r4,fp
    4d68:	900b883a 	mov	r5,r18
    4d6c:	1c07883a 	add	r3,r3,r16
    4d70:	90c00015 	stw	r3,0(r18)
    4d74:	8027883a 	mov	r19,r16
    4d78:	0003ffc0 	call	3ffc <_fflush_r>
    4d7c:	103f6b26 	beq	r2,zero,4b2c <__sfvwrite_r+0x200>
    4d80:	003f7f06 	br	4b80 <__sfvwrite_r+0x254>
    4d84:	400b883a 	mov	r5,r8
    4d88:	e009883a 	mov	r4,fp
    4d8c:	0006bd00 	call	6bd0 <_realloc_r>
    4d90:	103f7626 	beq	r2,zero,4b6c <__sfvwrite_r+0x240>
    4d94:	1023883a 	mov	r17,r2
    4d98:	003f5006 	br	4adc <__sfvwrite_r+0x1b0>
    4d9c:	00c00044 	movi	r3,1
    4da0:	9d000044 	addi	r20,r19,1
    4da4:	d8c00015 	stw	r3,0(sp)
    4da8:	003f8206 	br	4bb4 <__sfvwrite_r+0x288>
    4dac:	9080030b 	ldhu	r2,12(r18)
    4db0:	00c00244 	movi	r3,9
    4db4:	013fffc4 	movi	r4,-1
    4db8:	10801014 	ori	r2,r2,64
    4dbc:	9080030d 	sth	r2,12(r18)
    4dc0:	e0c00015 	stw	r3,0(fp)
    4dc4:	003f0606 	br	49e0 <__sfvwrite_r+0xb4>

00004dc8 <_fwalk_reent>:
    4dc8:	defff704 	addi	sp,sp,-36
    4dcc:	dcc00315 	stw	r19,12(sp)
    4dd0:	24c0b804 	addi	r19,r4,736
    4dd4:	dd800615 	stw	r22,24(sp)
    4dd8:	dd400515 	stw	r21,20(sp)
    4ddc:	dfc00815 	stw	ra,32(sp)
    4de0:	ddc00715 	stw	r23,28(sp)
    4de4:	dd000415 	stw	r20,16(sp)
    4de8:	dc800215 	stw	r18,8(sp)
    4dec:	dc400115 	stw	r17,4(sp)
    4df0:	dc000015 	stw	r16,0(sp)
    4df4:	202b883a 	mov	r21,r4
    4df8:	282d883a 	mov	r22,r5
    4dfc:	00042840 	call	4284 <__sfp_lock_acquire>
    4e00:	98002126 	beq	r19,zero,4e88 <_fwalk_reent+0xc0>
    4e04:	002f883a 	mov	r23,zero
    4e08:	9c800117 	ldw	r18,4(r19)
    4e0c:	9c000217 	ldw	r16,8(r19)
    4e10:	90bfffc4 	addi	r2,r18,-1
    4e14:	10000d16 	blt	r2,zero,4e4c <_fwalk_reent+0x84>
    4e18:	0023883a 	mov	r17,zero
    4e1c:	053fffc4 	movi	r20,-1
    4e20:	8080030f 	ldh	r2,12(r16)
    4e24:	8c400044 	addi	r17,r17,1
    4e28:	10000626 	beq	r2,zero,4e44 <_fwalk_reent+0x7c>
    4e2c:	8080038f 	ldh	r2,14(r16)
    4e30:	800b883a 	mov	r5,r16
    4e34:	a809883a 	mov	r4,r21
    4e38:	15000226 	beq	r2,r20,4e44 <_fwalk_reent+0x7c>
    4e3c:	b03ee83a 	callr	r22
    4e40:	b8aeb03a 	or	r23,r23,r2
    4e44:	84001704 	addi	r16,r16,92
    4e48:	947ff51e 	bne	r18,r17,4e20 <_fwalk_reent+0x58>
    4e4c:	9cc00017 	ldw	r19,0(r19)
    4e50:	983fed1e 	bne	r19,zero,4e08 <_fwalk_reent+0x40>
    4e54:	00042880 	call	4288 <__sfp_lock_release>
    4e58:	b805883a 	mov	r2,r23
    4e5c:	dfc00817 	ldw	ra,32(sp)
    4e60:	ddc00717 	ldw	r23,28(sp)
    4e64:	dd800617 	ldw	r22,24(sp)
    4e68:	dd400517 	ldw	r21,20(sp)
    4e6c:	dd000417 	ldw	r20,16(sp)
    4e70:	dcc00317 	ldw	r19,12(sp)
    4e74:	dc800217 	ldw	r18,8(sp)
    4e78:	dc400117 	ldw	r17,4(sp)
    4e7c:	dc000017 	ldw	r16,0(sp)
    4e80:	dec00904 	addi	sp,sp,36
    4e84:	f800283a 	ret
    4e88:	002f883a 	mov	r23,zero
    4e8c:	003ff106 	br	4e54 <_fwalk_reent+0x8c>

00004e90 <_fwalk>:
    4e90:	defff804 	addi	sp,sp,-32
    4e94:	dcc00315 	stw	r19,12(sp)
    4e98:	24c0b804 	addi	r19,r4,736
    4e9c:	dd400515 	stw	r21,20(sp)
    4ea0:	dfc00715 	stw	ra,28(sp)
    4ea4:	dd800615 	stw	r22,24(sp)
    4ea8:	dd000415 	stw	r20,16(sp)
    4eac:	dc800215 	stw	r18,8(sp)
    4eb0:	dc400115 	stw	r17,4(sp)
    4eb4:	dc000015 	stw	r16,0(sp)
    4eb8:	282b883a 	mov	r21,r5
    4ebc:	00042840 	call	4284 <__sfp_lock_acquire>
    4ec0:	98001f26 	beq	r19,zero,4f40 <_fwalk+0xb0>
    4ec4:	002d883a 	mov	r22,zero
    4ec8:	9c800117 	ldw	r18,4(r19)
    4ecc:	9c000217 	ldw	r16,8(r19)
    4ed0:	90bfffc4 	addi	r2,r18,-1
    4ed4:	10000c16 	blt	r2,zero,4f08 <_fwalk+0x78>
    4ed8:	0023883a 	mov	r17,zero
    4edc:	053fffc4 	movi	r20,-1
    4ee0:	8080030f 	ldh	r2,12(r16)
    4ee4:	8c400044 	addi	r17,r17,1
    4ee8:	10000526 	beq	r2,zero,4f00 <_fwalk+0x70>
    4eec:	8080038f 	ldh	r2,14(r16)
    4ef0:	8009883a 	mov	r4,r16
    4ef4:	15000226 	beq	r2,r20,4f00 <_fwalk+0x70>
    4ef8:	a83ee83a 	callr	r21
    4efc:	b0acb03a 	or	r22,r22,r2
    4f00:	84001704 	addi	r16,r16,92
    4f04:	947ff61e 	bne	r18,r17,4ee0 <_fwalk+0x50>
    4f08:	9cc00017 	ldw	r19,0(r19)
    4f0c:	983fee1e 	bne	r19,zero,4ec8 <_fwalk+0x38>
    4f10:	00042880 	call	4288 <__sfp_lock_release>
    4f14:	b005883a 	mov	r2,r22
    4f18:	dfc00717 	ldw	ra,28(sp)
    4f1c:	dd800617 	ldw	r22,24(sp)
    4f20:	dd400517 	ldw	r21,20(sp)
    4f24:	dd000417 	ldw	r20,16(sp)
    4f28:	dcc00317 	ldw	r19,12(sp)
    4f2c:	dc800217 	ldw	r18,8(sp)
    4f30:	dc400117 	ldw	r17,4(sp)
    4f34:	dc000017 	ldw	r16,0(sp)
    4f38:	dec00804 	addi	sp,sp,32
    4f3c:	f800283a 	ret
    4f40:	002d883a 	mov	r22,zero
    4f44:	003ff206 	br	4f10 <_fwalk+0x80>

00004f48 <__locale_charset>:
    4f48:	d0a00317 	ldw	r2,-32756(gp)
    4f4c:	f800283a 	ret

00004f50 <_localeconv_r>:
    4f50:	00800074 	movhi	r2,1
    4f54:	10803e04 	addi	r2,r2,248
    4f58:	f800283a 	ret

00004f5c <localeconv>:
    4f5c:	00800074 	movhi	r2,1
    4f60:	10876c04 	addi	r2,r2,7600
    4f64:	11000017 	ldw	r4,0(r2)
    4f68:	0004f501 	jmpi	4f50 <_localeconv_r>

00004f6c <_setlocale_r>:
    4f6c:	defffc04 	addi	sp,sp,-16
    4f70:	00c00074 	movhi	r3,1
    4f74:	18c03904 	addi	r3,r3,228
    4f78:	dc800215 	stw	r18,8(sp)
    4f7c:	dc400115 	stw	r17,4(sp)
    4f80:	dc000015 	stw	r16,0(sp)
    4f84:	2023883a 	mov	r17,r4
    4f88:	2825883a 	mov	r18,r5
    4f8c:	dfc00315 	stw	ra,12(sp)
    4f90:	3021883a 	mov	r16,r6
    4f94:	3009883a 	mov	r4,r6
    4f98:	180b883a 	mov	r5,r3
    4f9c:	30000926 	beq	r6,zero,4fc4 <_setlocale_r+0x58>
    4fa0:	00073f00 	call	73f0 <strcmp>
    4fa4:	8009883a 	mov	r4,r16
    4fa8:	01400074 	movhi	r5,1
    4fac:	29402404 	addi	r5,r5,144
    4fb0:	10000b1e 	bne	r2,zero,4fe0 <_setlocale_r+0x74>
    4fb4:	8c000d15 	stw	r16,52(r17)
    4fb8:	8c800c15 	stw	r18,48(r17)
    4fbc:	00c00074 	movhi	r3,1
    4fc0:	18c03904 	addi	r3,r3,228
    4fc4:	1805883a 	mov	r2,r3
    4fc8:	dfc00317 	ldw	ra,12(sp)
    4fcc:	dc800217 	ldw	r18,8(sp)
    4fd0:	dc400117 	ldw	r17,4(sp)
    4fd4:	dc000017 	ldw	r16,0(sp)
    4fd8:	dec00404 	addi	sp,sp,16
    4fdc:	f800283a 	ret
    4fe0:	00073f00 	call	73f0 <strcmp>
    4fe4:	0007883a 	mov	r3,zero
    4fe8:	103ff226 	beq	r2,zero,4fb4 <_setlocale_r+0x48>
    4fec:	003ff506 	br	4fc4 <_setlocale_r+0x58>

00004ff0 <setlocale>:
    4ff0:	01800074 	movhi	r6,1
    4ff4:	31876c04 	addi	r6,r6,7600
    4ff8:	2007883a 	mov	r3,r4
    4ffc:	31000017 	ldw	r4,0(r6)
    5000:	280d883a 	mov	r6,r5
    5004:	180b883a 	mov	r5,r3
    5008:	0004f6c1 	jmpi	4f6c <_setlocale_r>

0000500c <__smakebuf_r>:
    500c:	2880030b 	ldhu	r2,12(r5)
    5010:	deffed04 	addi	sp,sp,-76
    5014:	dc401015 	stw	r17,64(sp)
    5018:	1080008c 	andi	r2,r2,2
    501c:	dc000f15 	stw	r16,60(sp)
    5020:	dfc01215 	stw	ra,72(sp)
    5024:	dc801115 	stw	r18,68(sp)
    5028:	2821883a 	mov	r16,r5
    502c:	2023883a 	mov	r17,r4
    5030:	10000b26 	beq	r2,zero,5060 <__smakebuf_r+0x54>
    5034:	28c010c4 	addi	r3,r5,67
    5038:	00800044 	movi	r2,1
    503c:	28800515 	stw	r2,20(r5)
    5040:	28c00415 	stw	r3,16(r5)
    5044:	28c00015 	stw	r3,0(r5)
    5048:	dfc01217 	ldw	ra,72(sp)
    504c:	dc801117 	ldw	r18,68(sp)
    5050:	dc401017 	ldw	r17,64(sp)
    5054:	dc000f17 	ldw	r16,60(sp)
    5058:	dec01304 	addi	sp,sp,76
    505c:	f800283a 	ret
    5060:	2940038f 	ldh	r5,14(r5)
    5064:	28002116 	blt	r5,zero,50ec <__smakebuf_r+0xe0>
    5068:	d80d883a 	mov	r6,sp
    506c:	000776c0 	call	776c <_fstat_r>
    5070:	10001e16 	blt	r2,zero,50ec <__smakebuf_r+0xe0>
    5074:	d8800117 	ldw	r2,4(sp)
    5078:	00e00014 	movui	r3,32768
    507c:	113c000c 	andi	r4,r2,61440
    5080:	20c03126 	beq	r4,r3,5148 <__smakebuf_r+0x13c>
    5084:	8080030b 	ldhu	r2,12(r16)
    5088:	00c80004 	movi	r3,8192
    508c:	10820014 	ori	r2,r2,2048
    5090:	8080030d 	sth	r2,12(r16)
    5094:	20c01e26 	beq	r4,r3,5110 <__smakebuf_r+0x104>
    5098:	04810004 	movi	r18,1024
    509c:	8809883a 	mov	r4,r17
    50a0:	900b883a 	mov	r5,r18
    50a4:	00051a00 	call	51a0 <_malloc_r>
    50a8:	1009883a 	mov	r4,r2
    50ac:	10003126 	beq	r2,zero,5174 <__smakebuf_r+0x168>
    50b0:	80c0030b 	ldhu	r3,12(r16)
    50b4:	00800034 	movhi	r2,0
    50b8:	1090de04 	addi	r2,r2,17272
    50bc:	88800f15 	stw	r2,60(r17)
    50c0:	18c02014 	ori	r3,r3,128
    50c4:	84800515 	stw	r18,20(r16)
    50c8:	80c0030d 	sth	r3,12(r16)
    50cc:	81000415 	stw	r4,16(r16)
    50d0:	81000015 	stw	r4,0(r16)
    50d4:	dfc01217 	ldw	ra,72(sp)
    50d8:	dc801117 	ldw	r18,68(sp)
    50dc:	dc401017 	ldw	r17,64(sp)
    50e0:	dc000f17 	ldw	r16,60(sp)
    50e4:	dec01304 	addi	sp,sp,76
    50e8:	f800283a 	ret
    50ec:	80c0030b 	ldhu	r3,12(r16)
    50f0:	1880200c 	andi	r2,r3,128
    50f4:	10000426 	beq	r2,zero,5108 <__smakebuf_r+0xfc>
    50f8:	04801004 	movi	r18,64
    50fc:	18820014 	ori	r2,r3,2048
    5100:	8080030d 	sth	r2,12(r16)
    5104:	003fe506 	br	509c <__smakebuf_r+0x90>
    5108:	04810004 	movi	r18,1024
    510c:	003ffb06 	br	50fc <__smakebuf_r+0xf0>
    5110:	8140038f 	ldh	r5,14(r16)
    5114:	8809883a 	mov	r4,r17
    5118:	00077e00 	call	77e0 <_isatty_r>
    511c:	103fde26 	beq	r2,zero,5098 <__smakebuf_r+0x8c>
    5120:	8080030b 	ldhu	r2,12(r16)
    5124:	80c010c4 	addi	r3,r16,67
    5128:	04810004 	movi	r18,1024
    512c:	10800054 	ori	r2,r2,1
    5130:	8080030d 	sth	r2,12(r16)
    5134:	00800044 	movi	r2,1
    5138:	80c00415 	stw	r3,16(r16)
    513c:	80800515 	stw	r2,20(r16)
    5140:	80c00015 	stw	r3,0(r16)
    5144:	003fd506 	br	509c <__smakebuf_r+0x90>
    5148:	80c00a17 	ldw	r3,40(r16)
    514c:	00800034 	movhi	r2,0
    5150:	109cab04 	addi	r2,r2,29356
    5154:	18bfcb1e 	bne	r3,r2,5084 <__smakebuf_r+0x78>
    5158:	8080030b 	ldhu	r2,12(r16)
    515c:	00c10004 	movi	r3,1024
    5160:	1825883a 	mov	r18,r3
    5164:	10c4b03a 	or	r2,r2,r3
    5168:	8080030d 	sth	r2,12(r16)
    516c:	80c01315 	stw	r3,76(r16)
    5170:	003fca06 	br	509c <__smakebuf_r+0x90>
    5174:	8100030b 	ldhu	r4,12(r16)
    5178:	2080800c 	andi	r2,r4,512
    517c:	103fb21e 	bne	r2,zero,5048 <__smakebuf_r+0x3c>
    5180:	80c010c4 	addi	r3,r16,67
    5184:	21000094 	ori	r4,r4,2
    5188:	00800044 	movi	r2,1
    518c:	80800515 	stw	r2,20(r16)
    5190:	8100030d 	sth	r4,12(r16)
    5194:	80c00415 	stw	r3,16(r16)
    5198:	80c00015 	stw	r3,0(r16)
    519c:	003faa06 	br	5048 <__smakebuf_r+0x3c>

000051a0 <_malloc_r>:
    51a0:	defff604 	addi	sp,sp,-40
    51a4:	28c002c4 	addi	r3,r5,11
    51a8:	00800584 	movi	r2,22
    51ac:	dc800215 	stw	r18,8(sp)
    51b0:	dfc00915 	stw	ra,36(sp)
    51b4:	df000815 	stw	fp,32(sp)
    51b8:	ddc00715 	stw	r23,28(sp)
    51bc:	dd800615 	stw	r22,24(sp)
    51c0:	dd400515 	stw	r21,20(sp)
    51c4:	dd000415 	stw	r20,16(sp)
    51c8:	dcc00315 	stw	r19,12(sp)
    51cc:	dc400115 	stw	r17,4(sp)
    51d0:	dc000015 	stw	r16,0(sp)
    51d4:	2025883a 	mov	r18,r4
    51d8:	10c01236 	bltu	r2,r3,5224 <_malloc_r+0x84>
    51dc:	04400404 	movi	r17,16
    51e0:	8940142e 	bgeu	r17,r5,5234 <_malloc_r+0x94>
    51e4:	00800304 	movi	r2,12
    51e8:	0007883a 	mov	r3,zero
    51ec:	90800015 	stw	r2,0(r18)
    51f0:	1805883a 	mov	r2,r3
    51f4:	dfc00917 	ldw	ra,36(sp)
    51f8:	df000817 	ldw	fp,32(sp)
    51fc:	ddc00717 	ldw	r23,28(sp)
    5200:	dd800617 	ldw	r22,24(sp)
    5204:	dd400517 	ldw	r21,20(sp)
    5208:	dd000417 	ldw	r20,16(sp)
    520c:	dcc00317 	ldw	r19,12(sp)
    5210:	dc800217 	ldw	r18,8(sp)
    5214:	dc400117 	ldw	r17,4(sp)
    5218:	dc000017 	ldw	r16,0(sp)
    521c:	dec00a04 	addi	sp,sp,40
    5220:	f800283a 	ret
    5224:	00bffe04 	movi	r2,-8
    5228:	18a2703a 	and	r17,r3,r2
    522c:	883fed16 	blt	r17,zero,51e4 <_malloc_r+0x44>
    5230:	897fec36 	bltu	r17,r5,51e4 <_malloc_r+0x44>
    5234:	9009883a 	mov	r4,r18
    5238:	000a3f40 	call	a3f4 <__malloc_lock>
    523c:	00807dc4 	movi	r2,503
    5240:	14402b2e 	bgeu	r2,r17,52f0 <_malloc_r+0x150>
    5244:	8806d27a 	srli	r3,r17,9
    5248:	18003f1e 	bne	r3,zero,5348 <_malloc_r+0x1a8>
    524c:	880cd0fa 	srli	r6,r17,3
    5250:	300490fa 	slli	r2,r6,3
    5254:	02c00074 	movhi	r11,1
    5258:	5ac1e804 	addi	r11,r11,1952
    525c:	12cb883a 	add	r5,r2,r11
    5260:	2c000317 	ldw	r16,12(r5)
    5264:	580f883a 	mov	r7,r11
    5268:	2c00041e 	bne	r5,r16,527c <_malloc_r+0xdc>
    526c:	00000a06 	br	5298 <_malloc_r+0xf8>
    5270:	1800860e 	bge	r3,zero,548c <_malloc_r+0x2ec>
    5274:	84000317 	ldw	r16,12(r16)
    5278:	2c000726 	beq	r5,r16,5298 <_malloc_r+0xf8>
    527c:	80800117 	ldw	r2,4(r16)
    5280:	00ffff04 	movi	r3,-4
    5284:	10c8703a 	and	r4,r2,r3
    5288:	2447c83a 	sub	r3,r4,r17
    528c:	008003c4 	movi	r2,15
    5290:	10fff70e 	bge	r2,r3,5270 <_malloc_r+0xd0>
    5294:	31bfffc4 	addi	r6,r6,-1
    5298:	32400044 	addi	r9,r6,1
    529c:	02800074 	movhi	r10,1
    52a0:	5281ea04 	addi	r10,r10,1960
    52a4:	54000217 	ldw	r16,8(r10)
    52a8:	8280a026 	beq	r16,r10,552c <_malloc_r+0x38c>
    52ac:	80800117 	ldw	r2,4(r16)
    52b0:	00ffff04 	movi	r3,-4
    52b4:	10ca703a 	and	r5,r2,r3
    52b8:	2c4dc83a 	sub	r6,r5,r17
    52bc:	008003c4 	movi	r2,15
    52c0:	11808316 	blt	r2,r6,54d0 <_malloc_r+0x330>
    52c4:	52800315 	stw	r10,12(r10)
    52c8:	52800215 	stw	r10,8(r10)
    52cc:	30002916 	blt	r6,zero,5374 <_malloc_r+0x1d4>
    52d0:	8147883a 	add	r3,r16,r5
    52d4:	18800117 	ldw	r2,4(r3)
    52d8:	9009883a 	mov	r4,r18
    52dc:	10800054 	ori	r2,r2,1
    52e0:	18800115 	stw	r2,4(r3)
    52e4:	000a4140 	call	a414 <__malloc_unlock>
    52e8:	80c00204 	addi	r3,r16,8
    52ec:	003fc006 	br	51f0 <_malloc_r+0x50>
    52f0:	02c00074 	movhi	r11,1
    52f4:	5ac1e804 	addi	r11,r11,1952
    52f8:	8ac5883a 	add	r2,r17,r11
    52fc:	14000317 	ldw	r16,12(r2)
    5300:	580f883a 	mov	r7,r11
    5304:	8806d0fa 	srli	r3,r17,3
    5308:	14006c26 	beq	r2,r16,54bc <_malloc_r+0x31c>
    530c:	80c00117 	ldw	r3,4(r16)
    5310:	00bfff04 	movi	r2,-4
    5314:	81800317 	ldw	r6,12(r16)
    5318:	1886703a 	and	r3,r3,r2
    531c:	80c7883a 	add	r3,r16,r3
    5320:	18800117 	ldw	r2,4(r3)
    5324:	81400217 	ldw	r5,8(r16)
    5328:	9009883a 	mov	r4,r18
    532c:	10800054 	ori	r2,r2,1
    5330:	18800115 	stw	r2,4(r3)
    5334:	31400215 	stw	r5,8(r6)
    5338:	29800315 	stw	r6,12(r5)
    533c:	000a4140 	call	a414 <__malloc_unlock>
    5340:	80c00204 	addi	r3,r16,8
    5344:	003faa06 	br	51f0 <_malloc_r+0x50>
    5348:	00800104 	movi	r2,4
    534c:	10c0052e 	bgeu	r2,r3,5364 <_malloc_r+0x1c4>
    5350:	00800504 	movi	r2,20
    5354:	10c07836 	bltu	r2,r3,5538 <_malloc_r+0x398>
    5358:	198016c4 	addi	r6,r3,91
    535c:	300490fa 	slli	r2,r6,3
    5360:	003fbc06 	br	5254 <_malloc_r+0xb4>
    5364:	8804d1ba 	srli	r2,r17,6
    5368:	11800e04 	addi	r6,r2,56
    536c:	300490fa 	slli	r2,r6,3
    5370:	003fb806 	br	5254 <_malloc_r+0xb4>
    5374:	00807fc4 	movi	r2,511
    5378:	1140bb36 	bltu	r2,r5,5668 <_malloc_r+0x4c8>
    537c:	2806d0fa 	srli	r3,r5,3
    5380:	573ffe04 	addi	fp,r10,-8
    5384:	00800044 	movi	r2,1
    5388:	180890fa 	slli	r4,r3,3
    538c:	1807d0ba 	srai	r3,r3,2
    5390:	e1c00117 	ldw	r7,4(fp)
    5394:	5909883a 	add	r4,r11,r4
    5398:	21400217 	ldw	r5,8(r4)
    539c:	10c4983a 	sll	r2,r2,r3
    53a0:	81000315 	stw	r4,12(r16)
    53a4:	81400215 	stw	r5,8(r16)
    53a8:	388eb03a 	or	r7,r7,r2
    53ac:	2c000315 	stw	r16,12(r5)
    53b0:	24000215 	stw	r16,8(r4)
    53b4:	e1c00115 	stw	r7,4(fp)
    53b8:	4807883a 	mov	r3,r9
    53bc:	4800cd16 	blt	r9,zero,56f4 <_malloc_r+0x554>
    53c0:	1807d0ba 	srai	r3,r3,2
    53c4:	00800044 	movi	r2,1
    53c8:	10c8983a 	sll	r4,r2,r3
    53cc:	39004436 	bltu	r7,r4,54e0 <_malloc_r+0x340>
    53d0:	21c4703a 	and	r2,r4,r7
    53d4:	10000a1e 	bne	r2,zero,5400 <_malloc_r+0x260>
    53d8:	2109883a 	add	r4,r4,r4
    53dc:	00bfff04 	movi	r2,-4
    53e0:	4884703a 	and	r2,r9,r2
    53e4:	3906703a 	and	r3,r7,r4
    53e8:	12400104 	addi	r9,r2,4
    53ec:	1800041e 	bne	r3,zero,5400 <_malloc_r+0x260>
    53f0:	2109883a 	add	r4,r4,r4
    53f4:	3904703a 	and	r2,r7,r4
    53f8:	4a400104 	addi	r9,r9,4
    53fc:	103ffc26 	beq	r2,zero,53f0 <_malloc_r+0x250>
    5400:	480490fa 	slli	r2,r9,3
    5404:	4819883a 	mov	r12,r9
    5408:	023fff04 	movi	r8,-4
    540c:	589b883a 	add	r13,r11,r2
    5410:	6807883a 	mov	r3,r13
    5414:	014003c4 	movi	r5,15
    5418:	1c000317 	ldw	r16,12(r3)
    541c:	1c00041e 	bne	r3,r16,5430 <_malloc_r+0x290>
    5420:	0000a706 	br	56c0 <_malloc_r+0x520>
    5424:	3000ab0e 	bge	r6,zero,56d4 <_malloc_r+0x534>
    5428:	84000317 	ldw	r16,12(r16)
    542c:	1c00a426 	beq	r3,r16,56c0 <_malloc_r+0x520>
    5430:	80800117 	ldw	r2,4(r16)
    5434:	1204703a 	and	r2,r2,r8
    5438:	144dc83a 	sub	r6,r2,r17
    543c:	29bff90e 	bge	r5,r6,5424 <_malloc_r+0x284>
    5440:	81000317 	ldw	r4,12(r16)
    5444:	80c00217 	ldw	r3,8(r16)
    5448:	89400054 	ori	r5,r17,1
    544c:	8445883a 	add	r2,r16,r17
    5450:	20c00215 	stw	r3,8(r4)
    5454:	19000315 	stw	r4,12(r3)
    5458:	81400115 	stw	r5,4(r16)
    545c:	1187883a 	add	r3,r2,r6
    5460:	31000054 	ori	r4,r6,1
    5464:	50800315 	stw	r2,12(r10)
    5468:	50800215 	stw	r2,8(r10)
    546c:	19800015 	stw	r6,0(r3)
    5470:	11000115 	stw	r4,4(r2)
    5474:	12800215 	stw	r10,8(r2)
    5478:	12800315 	stw	r10,12(r2)
    547c:	9009883a 	mov	r4,r18
    5480:	000a4140 	call	a414 <__malloc_unlock>
    5484:	80c00204 	addi	r3,r16,8
    5488:	003f5906 	br	51f0 <_malloc_r+0x50>
    548c:	8109883a 	add	r4,r16,r4
    5490:	20800117 	ldw	r2,4(r4)
    5494:	80c00217 	ldw	r3,8(r16)
    5498:	81400317 	ldw	r5,12(r16)
    549c:	10800054 	ori	r2,r2,1
    54a0:	20800115 	stw	r2,4(r4)
    54a4:	28c00215 	stw	r3,8(r5)
    54a8:	19400315 	stw	r5,12(r3)
    54ac:	9009883a 	mov	r4,r18
    54b0:	000a4140 	call	a414 <__malloc_unlock>
    54b4:	80c00204 	addi	r3,r16,8
    54b8:	003f4d06 	br	51f0 <_malloc_r+0x50>
    54bc:	80800204 	addi	r2,r16,8
    54c0:	14000317 	ldw	r16,12(r2)
    54c4:	143f911e 	bne	r2,r16,530c <_malloc_r+0x16c>
    54c8:	1a400084 	addi	r9,r3,2
    54cc:	003f7306 	br	529c <_malloc_r+0xfc>
    54d0:	88c00054 	ori	r3,r17,1
    54d4:	8445883a 	add	r2,r16,r17
    54d8:	80c00115 	stw	r3,4(r16)
    54dc:	003fdf06 	br	545c <_malloc_r+0x2bc>
    54e0:	e4000217 	ldw	r16,8(fp)
    54e4:	00bfff04 	movi	r2,-4
    54e8:	80c00117 	ldw	r3,4(r16)
    54ec:	802d883a 	mov	r22,r16
    54f0:	18aa703a 	and	r21,r3,r2
    54f4:	ac401636 	bltu	r21,r17,5550 <_malloc_r+0x3b0>
    54f8:	ac49c83a 	sub	r4,r21,r17
    54fc:	008003c4 	movi	r2,15
    5500:	1100130e 	bge	r2,r4,5550 <_malloc_r+0x3b0>
    5504:	88800054 	ori	r2,r17,1
    5508:	8447883a 	add	r3,r16,r17
    550c:	80800115 	stw	r2,4(r16)
    5510:	20800054 	ori	r2,r4,1
    5514:	18800115 	stw	r2,4(r3)
    5518:	e0c00215 	stw	r3,8(fp)
    551c:	9009883a 	mov	r4,r18
    5520:	000a4140 	call	a414 <__malloc_unlock>
    5524:	80c00204 	addi	r3,r16,8
    5528:	003f3106 	br	51f0 <_malloc_r+0x50>
    552c:	39c00117 	ldw	r7,4(r7)
    5530:	573ffe04 	addi	fp,r10,-8
    5534:	003fa006 	br	53b8 <_malloc_r+0x218>
    5538:	00801504 	movi	r2,84
    553c:	10c06736 	bltu	r2,r3,56dc <_malloc_r+0x53c>
    5540:	8804d33a 	srli	r2,r17,12
    5544:	11801b84 	addi	r6,r2,110
    5548:	300490fa 	slli	r2,r6,3
    554c:	003f4106 	br	5254 <_malloc_r+0xb4>
    5550:	d0a01817 	ldw	r2,-32672(gp)
    5554:	d0e00517 	ldw	r3,-32748(gp)
    5558:	053fffc4 	movi	r20,-1
    555c:	10800404 	addi	r2,r2,16
    5560:	88a7883a 	add	r19,r17,r2
    5564:	1d000326 	beq	r3,r20,5574 <_malloc_r+0x3d4>
    5568:	98c3ffc4 	addi	r3,r19,4095
    556c:	00bc0004 	movi	r2,-4096
    5570:	18a6703a 	and	r19,r3,r2
    5574:	9009883a 	mov	r4,r18
    5578:	980b883a 	mov	r5,r19
    557c:	00072340 	call	7234 <_sbrk_r>
    5580:	1009883a 	mov	r4,r2
    5584:	15000426 	beq	r2,r20,5598 <_malloc_r+0x3f8>
    5588:	854b883a 	add	r5,r16,r21
    558c:	1029883a 	mov	r20,r2
    5590:	11405a2e 	bgeu	r2,r5,56fc <_malloc_r+0x55c>
    5594:	87000c26 	beq	r16,fp,55c8 <_malloc_r+0x428>
    5598:	e4000217 	ldw	r16,8(fp)
    559c:	80c00117 	ldw	r3,4(r16)
    55a0:	00bfff04 	movi	r2,-4
    55a4:	1884703a 	and	r2,r3,r2
    55a8:	14400336 	bltu	r2,r17,55b8 <_malloc_r+0x418>
    55ac:	1449c83a 	sub	r4,r2,r17
    55b0:	008003c4 	movi	r2,15
    55b4:	113fd316 	blt	r2,r4,5504 <_malloc_r+0x364>
    55b8:	9009883a 	mov	r4,r18
    55bc:	000a4140 	call	a414 <__malloc_unlock>
    55c0:	0007883a 	mov	r3,zero
    55c4:	003f0a06 	br	51f0 <_malloc_r+0x50>
    55c8:	05c00074 	movhi	r23,1
    55cc:	bdc78e04 	addi	r23,r23,7736
    55d0:	b8800017 	ldw	r2,0(r23)
    55d4:	988d883a 	add	r6,r19,r2
    55d8:	b9800015 	stw	r6,0(r23)
    55dc:	d0e00517 	ldw	r3,-32748(gp)
    55e0:	00bfffc4 	movi	r2,-1
    55e4:	18808e26 	beq	r3,r2,5820 <_malloc_r+0x680>
    55e8:	2145c83a 	sub	r2,r4,r5
    55ec:	3085883a 	add	r2,r6,r2
    55f0:	b8800015 	stw	r2,0(r23)
    55f4:	20c001cc 	andi	r3,r4,7
    55f8:	18005f1e 	bne	r3,zero,5778 <_malloc_r+0x5d8>
    55fc:	000b883a 	mov	r5,zero
    5600:	a4c5883a 	add	r2,r20,r19
    5604:	1083ffcc 	andi	r2,r2,4095
    5608:	00c40004 	movi	r3,4096
    560c:	1887c83a 	sub	r3,r3,r2
    5610:	28e7883a 	add	r19,r5,r3
    5614:	9009883a 	mov	r4,r18
    5618:	980b883a 	mov	r5,r19
    561c:	00072340 	call	7234 <_sbrk_r>
    5620:	1007883a 	mov	r3,r2
    5624:	00bfffc4 	movi	r2,-1
    5628:	18807a26 	beq	r3,r2,5814 <_malloc_r+0x674>
    562c:	1d05c83a 	sub	r2,r3,r20
    5630:	9885883a 	add	r2,r19,r2
    5634:	10c00054 	ori	r3,r2,1
    5638:	b8800017 	ldw	r2,0(r23)
    563c:	a021883a 	mov	r16,r20
    5640:	a0c00115 	stw	r3,4(r20)
    5644:	9885883a 	add	r2,r19,r2
    5648:	b8800015 	stw	r2,0(r23)
    564c:	e5000215 	stw	r20,8(fp)
    5650:	b7003626 	beq	r22,fp,572c <_malloc_r+0x58c>
    5654:	018003c4 	movi	r6,15
    5658:	35404b36 	bltu	r6,r21,5788 <_malloc_r+0x5e8>
    565c:	00800044 	movi	r2,1
    5660:	a0800115 	stw	r2,4(r20)
    5664:	003fcd06 	br	559c <_malloc_r+0x3fc>
    5668:	2808d27a 	srli	r4,r5,9
    566c:	2000371e 	bne	r4,zero,574c <_malloc_r+0x5ac>
    5670:	2808d0fa 	srli	r4,r5,3
    5674:	200690fa 	slli	r3,r4,3
    5678:	1ad1883a 	add	r8,r3,r11
    567c:	41800217 	ldw	r6,8(r8)
    5680:	41805b26 	beq	r8,r6,57f0 <_malloc_r+0x650>
    5684:	30800117 	ldw	r2,4(r6)
    5688:	00ffff04 	movi	r3,-4
    568c:	10c4703a 	and	r2,r2,r3
    5690:	2880022e 	bgeu	r5,r2,569c <_malloc_r+0x4fc>
    5694:	31800217 	ldw	r6,8(r6)
    5698:	41bffa1e 	bne	r8,r6,5684 <_malloc_r+0x4e4>
    569c:	32000317 	ldw	r8,12(r6)
    56a0:	39c00117 	ldw	r7,4(r7)
    56a4:	82000315 	stw	r8,12(r16)
    56a8:	81800215 	stw	r6,8(r16)
    56ac:	07000074 	movhi	fp,1
    56b0:	e701e804 	addi	fp,fp,1952
    56b4:	34000315 	stw	r16,12(r6)
    56b8:	44000215 	stw	r16,8(r8)
    56bc:	003f3e06 	br	53b8 <_malloc_r+0x218>
    56c0:	63000044 	addi	r12,r12,1
    56c4:	608000cc 	andi	r2,r12,3
    56c8:	10005d26 	beq	r2,zero,5840 <_malloc_r+0x6a0>
    56cc:	18c00204 	addi	r3,r3,8
    56d0:	003f5106 	br	5418 <_malloc_r+0x278>
    56d4:	8089883a 	add	r4,r16,r2
    56d8:	003f6d06 	br	5490 <_malloc_r+0x2f0>
    56dc:	00805504 	movi	r2,340
    56e0:	10c02036 	bltu	r2,r3,5764 <_malloc_r+0x5c4>
    56e4:	8804d3fa 	srli	r2,r17,15
    56e8:	11801dc4 	addi	r6,r2,119
    56ec:	300490fa 	slli	r2,r6,3
    56f0:	003ed806 	br	5254 <_malloc_r+0xb4>
    56f4:	48c000c4 	addi	r3,r9,3
    56f8:	003f3106 	br	53c0 <_malloc_r+0x220>
    56fc:	05c00074 	movhi	r23,1
    5700:	bdc78e04 	addi	r23,r23,7736
    5704:	b8800017 	ldw	r2,0(r23)
    5708:	988d883a 	add	r6,r19,r2
    570c:	b9800015 	stw	r6,0(r23)
    5710:	293fb21e 	bne	r5,r4,55dc <_malloc_r+0x43c>
    5714:	2083ffcc 	andi	r2,r4,4095
    5718:	103fb01e 	bne	r2,zero,55dc <_malloc_r+0x43c>
    571c:	e4000217 	ldw	r16,8(fp)
    5720:	9d45883a 	add	r2,r19,r21
    5724:	10800054 	ori	r2,r2,1
    5728:	80800115 	stw	r2,4(r16)
    572c:	b8c00017 	ldw	r3,0(r23)
    5730:	d0a01917 	ldw	r2,-32668(gp)
    5734:	10c0012e 	bgeu	r2,r3,573c <_malloc_r+0x59c>
    5738:	d0e01915 	stw	r3,-32668(gp)
    573c:	d0a01a17 	ldw	r2,-32664(gp)
    5740:	10ff962e 	bgeu	r2,r3,559c <_malloc_r+0x3fc>
    5744:	d0e01a15 	stw	r3,-32664(gp)
    5748:	003f9406 	br	559c <_malloc_r+0x3fc>
    574c:	00800104 	movi	r2,4
    5750:	11001e36 	bltu	r2,r4,57cc <_malloc_r+0x62c>
    5754:	2804d1ba 	srli	r2,r5,6
    5758:	11000e04 	addi	r4,r2,56
    575c:	200690fa 	slli	r3,r4,3
    5760:	003fc506 	br	5678 <_malloc_r+0x4d8>
    5764:	00815504 	movi	r2,1364
    5768:	10c01d2e 	bgeu	r2,r3,57e0 <_malloc_r+0x640>
    576c:	01801f84 	movi	r6,126
    5770:	0080fc04 	movi	r2,1008
    5774:	003eb706 	br	5254 <_malloc_r+0xb4>
    5778:	00800204 	movi	r2,8
    577c:	10cbc83a 	sub	r5,r2,r3
    5780:	2169883a 	add	r20,r4,r5
    5784:	003f9e06 	br	5600 <_malloc_r+0x460>
    5788:	00bffe04 	movi	r2,-8
    578c:	a93ffd04 	addi	r4,r21,-12
    5790:	2088703a 	and	r4,r4,r2
    5794:	b10b883a 	add	r5,r22,r4
    5798:	00c00144 	movi	r3,5
    579c:	28c00215 	stw	r3,8(r5)
    57a0:	28c00115 	stw	r3,4(r5)
    57a4:	b0800117 	ldw	r2,4(r22)
    57a8:	1080004c 	andi	r2,r2,1
    57ac:	2084b03a 	or	r2,r4,r2
    57b0:	b0800115 	stw	r2,4(r22)
    57b4:	313fdd2e 	bgeu	r6,r4,572c <_malloc_r+0x58c>
    57b8:	b1400204 	addi	r5,r22,8
    57bc:	9009883a 	mov	r4,r18
    57c0:	00046180 	call	4618 <_free_r>
    57c4:	e4000217 	ldw	r16,8(fp)
    57c8:	003fd806 	br	572c <_malloc_r+0x58c>
    57cc:	00800504 	movi	r2,20
    57d0:	11001536 	bltu	r2,r4,5828 <_malloc_r+0x688>
    57d4:	210016c4 	addi	r4,r4,91
    57d8:	200690fa 	slli	r3,r4,3
    57dc:	003fa606 	br	5678 <_malloc_r+0x4d8>
    57e0:	8804d4ba 	srli	r2,r17,18
    57e4:	11801f04 	addi	r6,r2,124
    57e8:	300490fa 	slli	r2,r6,3
    57ec:	003e9906 	br	5254 <_malloc_r+0xb4>
    57f0:	2009d0ba 	srai	r4,r4,2
    57f4:	01400074 	movhi	r5,1
    57f8:	2941e804 	addi	r5,r5,1952
    57fc:	00c00044 	movi	r3,1
    5800:	28800117 	ldw	r2,4(r5)
    5804:	1906983a 	sll	r3,r3,r4
    5808:	10c4b03a 	or	r2,r2,r3
    580c:	28800115 	stw	r2,4(r5)
    5810:	003fa306 	br	56a0 <_malloc_r+0x500>
    5814:	0027883a 	mov	r19,zero
    5818:	00c00044 	movi	r3,1
    581c:	003f8606 	br	5638 <_malloc_r+0x498>
    5820:	d1200515 	stw	r4,-32748(gp)
    5824:	003f7306 	br	55f4 <_malloc_r+0x454>
    5828:	00801504 	movi	r2,84
    582c:	11001936 	bltu	r2,r4,5894 <_malloc_r+0x6f4>
    5830:	2804d33a 	srli	r2,r5,12
    5834:	11001b84 	addi	r4,r2,110
    5838:	200690fa 	slli	r3,r4,3
    583c:	003f8e06 	br	5678 <_malloc_r+0x4d8>
    5840:	480b883a 	mov	r5,r9
    5844:	6807883a 	mov	r3,r13
    5848:	288000cc 	andi	r2,r5,3
    584c:	18fffe04 	addi	r3,r3,-8
    5850:	297fffc4 	addi	r5,r5,-1
    5854:	10001526 	beq	r2,zero,58ac <_malloc_r+0x70c>
    5858:	18800217 	ldw	r2,8(r3)
    585c:	10fffa26 	beq	r2,r3,5848 <_malloc_r+0x6a8>
    5860:	2109883a 	add	r4,r4,r4
    5864:	393f1e36 	bltu	r7,r4,54e0 <_malloc_r+0x340>
    5868:	203f1d26 	beq	r4,zero,54e0 <_malloc_r+0x340>
    586c:	21c4703a 	and	r2,r4,r7
    5870:	10000226 	beq	r2,zero,587c <_malloc_r+0x6dc>
    5874:	6013883a 	mov	r9,r12
    5878:	003ee106 	br	5400 <_malloc_r+0x260>
    587c:	2109883a 	add	r4,r4,r4
    5880:	3904703a 	and	r2,r7,r4
    5884:	63000104 	addi	r12,r12,4
    5888:	103ffc26 	beq	r2,zero,587c <_malloc_r+0x6dc>
    588c:	6013883a 	mov	r9,r12
    5890:	003edb06 	br	5400 <_malloc_r+0x260>
    5894:	00805504 	movi	r2,340
    5898:	11000836 	bltu	r2,r4,58bc <_malloc_r+0x71c>
    589c:	2804d3fa 	srli	r2,r5,15
    58a0:	11001dc4 	addi	r4,r2,119
    58a4:	200690fa 	slli	r3,r4,3
    58a8:	003f7306 	br	5678 <_malloc_r+0x4d8>
    58ac:	0104303a 	nor	r2,zero,r4
    58b0:	388e703a 	and	r7,r7,r2
    58b4:	e1c00115 	stw	r7,4(fp)
    58b8:	003fe906 	br	5860 <_malloc_r+0x6c0>
    58bc:	00815504 	movi	r2,1364
    58c0:	1100032e 	bgeu	r2,r4,58d0 <_malloc_r+0x730>
    58c4:	01001f84 	movi	r4,126
    58c8:	00c0fc04 	movi	r3,1008
    58cc:	003f6a06 	br	5678 <_malloc_r+0x4d8>
    58d0:	2804d4ba 	srli	r2,r5,18
    58d4:	11001f04 	addi	r4,r2,124
    58d8:	200690fa 	slli	r3,r4,3
    58dc:	003f6606 	br	5678 <_malloc_r+0x4d8>

000058e0 <memchr>:
    58e0:	008000c4 	movi	r2,3
    58e4:	29403fcc 	andi	r5,r5,255
    58e8:	2007883a 	mov	r3,r4
    58ec:	1180022e 	bgeu	r2,r6,58f8 <memchr+0x18>
    58f0:	2084703a 	and	r2,r4,r2
    58f4:	10000b26 	beq	r2,zero,5924 <memchr+0x44>
    58f8:	313fffc4 	addi	r4,r6,-1
    58fc:	3000051e 	bne	r6,zero,5914 <memchr+0x34>
    5900:	00002c06 	br	59b4 <memchr+0xd4>
    5904:	213fffc4 	addi	r4,r4,-1
    5908:	00bfffc4 	movi	r2,-1
    590c:	18c00044 	addi	r3,r3,1
    5910:	20802826 	beq	r4,r2,59b4 <memchr+0xd4>
    5914:	18800003 	ldbu	r2,0(r3)
    5918:	28bffa1e 	bne	r5,r2,5904 <memchr+0x24>
    591c:	1805883a 	mov	r2,r3
    5920:	f800283a 	ret
    5924:	0011883a 	mov	r8,zero
    5928:	0007883a 	mov	r3,zero
    592c:	01c00104 	movi	r7,4
    5930:	4004923a 	slli	r2,r8,8
    5934:	18c00044 	addi	r3,r3,1
    5938:	1151883a 	add	r8,r2,r5
    593c:	19fffc1e 	bne	r3,r7,5930 <memchr+0x50>
    5940:	02bfbff4 	movhi	r10,65279
    5944:	52bfbfc4 	addi	r10,r10,-257
    5948:	02602074 	movhi	r9,32897
    594c:	4a602004 	addi	r9,r9,-32640
    5950:	02c000c4 	movi	r11,3
    5954:	20800017 	ldw	r2,0(r4)
    5958:	31bfff04 	addi	r6,r6,-4
    595c:	200f883a 	mov	r7,r4
    5960:	1204f03a 	xor	r2,r2,r8
    5964:	1287883a 	add	r3,r2,r10
    5968:	1a46703a 	and	r3,r3,r9
    596c:	0084303a 	nor	r2,zero,r2
    5970:	10c4703a 	and	r2,r2,r3
    5974:	10000b26 	beq	r2,zero,59a4 <memchr+0xc4>
    5978:	20800003 	ldbu	r2,0(r4)
    597c:	28800f26 	beq	r5,r2,59bc <memchr+0xdc>
    5980:	20800043 	ldbu	r2,1(r4)
    5984:	21c00044 	addi	r7,r4,1
    5988:	28800c26 	beq	r5,r2,59bc <memchr+0xdc>
    598c:	20800083 	ldbu	r2,2(r4)
    5990:	21c00084 	addi	r7,r4,2
    5994:	28800926 	beq	r5,r2,59bc <memchr+0xdc>
    5998:	208000c3 	ldbu	r2,3(r4)
    599c:	21c000c4 	addi	r7,r4,3
    59a0:	28800626 	beq	r5,r2,59bc <memchr+0xdc>
    59a4:	21000104 	addi	r4,r4,4
    59a8:	59bfea36 	bltu	r11,r6,5954 <memchr+0x74>
    59ac:	2007883a 	mov	r3,r4
    59b0:	003fd106 	br	58f8 <memchr+0x18>
    59b4:	0005883a 	mov	r2,zero
    59b8:	f800283a 	ret
    59bc:	3805883a 	mov	r2,r7
    59c0:	f800283a 	ret

000059c4 <memcpy>:
    59c4:	01c003c4 	movi	r7,15
    59c8:	2007883a 	mov	r3,r4
    59cc:	3980032e 	bgeu	r7,r6,59dc <memcpy+0x18>
    59d0:	2904b03a 	or	r2,r5,r4
    59d4:	108000cc 	andi	r2,r2,3
    59d8:	10000926 	beq	r2,zero,5a00 <memcpy+0x3c>
    59dc:	30000626 	beq	r6,zero,59f8 <memcpy+0x34>
    59e0:	30cd883a 	add	r6,r6,r3
    59e4:	28800003 	ldbu	r2,0(r5)
    59e8:	29400044 	addi	r5,r5,1
    59ec:	18800005 	stb	r2,0(r3)
    59f0:	18c00044 	addi	r3,r3,1
    59f4:	30fffb1e 	bne	r6,r3,59e4 <memcpy+0x20>
    59f8:	2005883a 	mov	r2,r4
    59fc:	f800283a 	ret
    5a00:	3811883a 	mov	r8,r7
    5a04:	200f883a 	mov	r7,r4
    5a08:	28c00017 	ldw	r3,0(r5)
    5a0c:	31bffc04 	addi	r6,r6,-16
    5a10:	38c00015 	stw	r3,0(r7)
    5a14:	28800117 	ldw	r2,4(r5)
    5a18:	38800115 	stw	r2,4(r7)
    5a1c:	28c00217 	ldw	r3,8(r5)
    5a20:	38c00215 	stw	r3,8(r7)
    5a24:	28800317 	ldw	r2,12(r5)
    5a28:	29400404 	addi	r5,r5,16
    5a2c:	38800315 	stw	r2,12(r7)
    5a30:	39c00404 	addi	r7,r7,16
    5a34:	41bff436 	bltu	r8,r6,5a08 <memcpy+0x44>
    5a38:	008000c4 	movi	r2,3
    5a3c:	1180072e 	bgeu	r2,r6,5a5c <memcpy+0x98>
    5a40:	1007883a 	mov	r3,r2
    5a44:	28800017 	ldw	r2,0(r5)
    5a48:	31bfff04 	addi	r6,r6,-4
    5a4c:	29400104 	addi	r5,r5,4
    5a50:	38800015 	stw	r2,0(r7)
    5a54:	39c00104 	addi	r7,r7,4
    5a58:	19bffa36 	bltu	r3,r6,5a44 <memcpy+0x80>
    5a5c:	3807883a 	mov	r3,r7
    5a60:	003fde06 	br	59dc <memcpy+0x18>

00005a64 <memmove>:
    5a64:	2807883a 	mov	r3,r5
    5a68:	2011883a 	mov	r8,r4
    5a6c:	29000c2e 	bgeu	r5,r4,5aa0 <memmove+0x3c>
    5a70:	298f883a 	add	r7,r5,r6
    5a74:	21c00a2e 	bgeu	r4,r7,5aa0 <memmove+0x3c>
    5a78:	30000726 	beq	r6,zero,5a98 <memmove+0x34>
    5a7c:	2187883a 	add	r3,r4,r6
    5a80:	198dc83a 	sub	r6,r3,r6
    5a84:	39ffffc4 	addi	r7,r7,-1
    5a88:	38800003 	ldbu	r2,0(r7)
    5a8c:	18ffffc4 	addi	r3,r3,-1
    5a90:	18800005 	stb	r2,0(r3)
    5a94:	19bffb1e 	bne	r3,r6,5a84 <memmove+0x20>
    5a98:	2005883a 	mov	r2,r4
    5a9c:	f800283a 	ret
    5aa0:	01c003c4 	movi	r7,15
    5aa4:	39800a36 	bltu	r7,r6,5ad0 <memmove+0x6c>
    5aa8:	303ffb26 	beq	r6,zero,5a98 <memmove+0x34>
    5aac:	400f883a 	mov	r7,r8
    5ab0:	320d883a 	add	r6,r6,r8
    5ab4:	28800003 	ldbu	r2,0(r5)
    5ab8:	29400044 	addi	r5,r5,1
    5abc:	38800005 	stb	r2,0(r7)
    5ac0:	39c00044 	addi	r7,r7,1
    5ac4:	39bffb1e 	bne	r7,r6,5ab4 <memmove+0x50>
    5ac8:	2005883a 	mov	r2,r4
    5acc:	f800283a 	ret
    5ad0:	1904b03a 	or	r2,r3,r4
    5ad4:	108000cc 	andi	r2,r2,3
    5ad8:	103ff31e 	bne	r2,zero,5aa8 <memmove+0x44>
    5adc:	3811883a 	mov	r8,r7
    5ae0:	180b883a 	mov	r5,r3
    5ae4:	200f883a 	mov	r7,r4
    5ae8:	28c00017 	ldw	r3,0(r5)
    5aec:	31bffc04 	addi	r6,r6,-16
    5af0:	38c00015 	stw	r3,0(r7)
    5af4:	28800117 	ldw	r2,4(r5)
    5af8:	38800115 	stw	r2,4(r7)
    5afc:	28c00217 	ldw	r3,8(r5)
    5b00:	38c00215 	stw	r3,8(r7)
    5b04:	28800317 	ldw	r2,12(r5)
    5b08:	29400404 	addi	r5,r5,16
    5b0c:	38800315 	stw	r2,12(r7)
    5b10:	39c00404 	addi	r7,r7,16
    5b14:	41bff436 	bltu	r8,r6,5ae8 <memmove+0x84>
    5b18:	008000c4 	movi	r2,3
    5b1c:	1180072e 	bgeu	r2,r6,5b3c <memmove+0xd8>
    5b20:	1007883a 	mov	r3,r2
    5b24:	28800017 	ldw	r2,0(r5)
    5b28:	31bfff04 	addi	r6,r6,-4
    5b2c:	29400104 	addi	r5,r5,4
    5b30:	38800015 	stw	r2,0(r7)
    5b34:	39c00104 	addi	r7,r7,4
    5b38:	19bffa36 	bltu	r3,r6,5b24 <memmove+0xc0>
    5b3c:	3811883a 	mov	r8,r7
    5b40:	003fd906 	br	5aa8 <memmove+0x44>

00005b44 <memset>:
    5b44:	008000c4 	movi	r2,3
    5b48:	29403fcc 	andi	r5,r5,255
    5b4c:	2007883a 	mov	r3,r4
    5b50:	1180022e 	bgeu	r2,r6,5b5c <memset+0x18>
    5b54:	2084703a 	and	r2,r4,r2
    5b58:	10000826 	beq	r2,zero,5b7c <memset+0x38>
    5b5c:	30000526 	beq	r6,zero,5b74 <memset+0x30>
    5b60:	2805883a 	mov	r2,r5
    5b64:	30cd883a 	add	r6,r6,r3
    5b68:	18800005 	stb	r2,0(r3)
    5b6c:	18c00044 	addi	r3,r3,1
    5b70:	19bffd1e 	bne	r3,r6,5b68 <memset+0x24>
    5b74:	2005883a 	mov	r2,r4
    5b78:	f800283a 	ret
    5b7c:	2804923a 	slli	r2,r5,8
    5b80:	020003c4 	movi	r8,15
    5b84:	200f883a 	mov	r7,r4
    5b88:	2884b03a 	or	r2,r5,r2
    5b8c:	1006943a 	slli	r3,r2,16
    5b90:	10c6b03a 	or	r3,r2,r3
    5b94:	41800a2e 	bgeu	r8,r6,5bc0 <memset+0x7c>
    5b98:	4005883a 	mov	r2,r8
    5b9c:	31bffc04 	addi	r6,r6,-16
    5ba0:	38c00015 	stw	r3,0(r7)
    5ba4:	38c00115 	stw	r3,4(r7)
    5ba8:	38c00215 	stw	r3,8(r7)
    5bac:	38c00315 	stw	r3,12(r7)
    5bb0:	39c00404 	addi	r7,r7,16
    5bb4:	11bff936 	bltu	r2,r6,5b9c <memset+0x58>
    5bb8:	008000c4 	movi	r2,3
    5bbc:	1180052e 	bgeu	r2,r6,5bd4 <memset+0x90>
    5bc0:	31bfff04 	addi	r6,r6,-4
    5bc4:	008000c4 	movi	r2,3
    5bc8:	38c00015 	stw	r3,0(r7)
    5bcc:	39c00104 	addi	r7,r7,4
    5bd0:	11bffb36 	bltu	r2,r6,5bc0 <memset+0x7c>
    5bd4:	3807883a 	mov	r3,r7
    5bd8:	003fe006 	br	5b5c <memset+0x18>

00005bdc <_Bfree>:
    5bdc:	28000826 	beq	r5,zero,5c00 <_Bfree+0x24>
    5be0:	28800117 	ldw	r2,4(r5)
    5be4:	21001317 	ldw	r4,76(r4)
    5be8:	1085883a 	add	r2,r2,r2
    5bec:	1085883a 	add	r2,r2,r2
    5bf0:	1105883a 	add	r2,r2,r4
    5bf4:	10c00017 	ldw	r3,0(r2)
    5bf8:	28c00015 	stw	r3,0(r5)
    5bfc:	11400015 	stw	r5,0(r2)
    5c00:	f800283a 	ret

00005c04 <__hi0bits>:
    5c04:	20bfffec 	andhi	r2,r4,65535
    5c08:	10001426 	beq	r2,zero,5c5c <__hi0bits+0x58>
    5c0c:	0007883a 	mov	r3,zero
    5c10:	20bfc02c 	andhi	r2,r4,65280
    5c14:	1000021e 	bne	r2,zero,5c20 <__hi0bits+0x1c>
    5c18:	2008923a 	slli	r4,r4,8
    5c1c:	18c00204 	addi	r3,r3,8
    5c20:	20bc002c 	andhi	r2,r4,61440
    5c24:	1000021e 	bne	r2,zero,5c30 <__hi0bits+0x2c>
    5c28:	2008913a 	slli	r4,r4,4
    5c2c:	18c00104 	addi	r3,r3,4
    5c30:	20b0002c 	andhi	r2,r4,49152
    5c34:	1000031e 	bne	r2,zero,5c44 <__hi0bits+0x40>
    5c38:	2105883a 	add	r2,r4,r4
    5c3c:	18c00084 	addi	r3,r3,2
    5c40:	1089883a 	add	r4,r2,r2
    5c44:	20000316 	blt	r4,zero,5c54 <__hi0bits+0x50>
    5c48:	2090002c 	andhi	r2,r4,16384
    5c4c:	10000626 	beq	r2,zero,5c68 <__hi0bits+0x64>
    5c50:	18c00044 	addi	r3,r3,1
    5c54:	1805883a 	mov	r2,r3
    5c58:	f800283a 	ret
    5c5c:	2008943a 	slli	r4,r4,16
    5c60:	00c00404 	movi	r3,16
    5c64:	003fea06 	br	5c10 <__hi0bits+0xc>
    5c68:	00c00804 	movi	r3,32
    5c6c:	1805883a 	mov	r2,r3
    5c70:	f800283a 	ret

00005c74 <__lo0bits>:
    5c74:	20c00017 	ldw	r3,0(r4)
    5c78:	188001cc 	andi	r2,r3,7
    5c7c:	10000a26 	beq	r2,zero,5ca8 <__lo0bits+0x34>
    5c80:	1880004c 	andi	r2,r3,1
    5c84:	1005003a 	cmpeq	r2,r2,zero
    5c88:	10002126 	beq	r2,zero,5d10 <__lo0bits+0x9c>
    5c8c:	1880008c 	andi	r2,r3,2
    5c90:	1000251e 	bne	r2,zero,5d28 <__lo0bits+0xb4>
    5c94:	1804d0ba 	srli	r2,r3,2
    5c98:	01400084 	movi	r5,2
    5c9c:	20800015 	stw	r2,0(r4)
    5ca0:	2805883a 	mov	r2,r5
    5ca4:	f800283a 	ret
    5ca8:	18bfffcc 	andi	r2,r3,65535
    5cac:	10001526 	beq	r2,zero,5d04 <__lo0bits+0x90>
    5cb0:	000b883a 	mov	r5,zero
    5cb4:	18803fcc 	andi	r2,r3,255
    5cb8:	1000021e 	bne	r2,zero,5cc4 <__lo0bits+0x50>
    5cbc:	1806d23a 	srli	r3,r3,8
    5cc0:	29400204 	addi	r5,r5,8
    5cc4:	188003cc 	andi	r2,r3,15
    5cc8:	1000021e 	bne	r2,zero,5cd4 <__lo0bits+0x60>
    5ccc:	1806d13a 	srli	r3,r3,4
    5cd0:	29400104 	addi	r5,r5,4
    5cd4:	188000cc 	andi	r2,r3,3
    5cd8:	1000021e 	bne	r2,zero,5ce4 <__lo0bits+0x70>
    5cdc:	1806d0ba 	srli	r3,r3,2
    5ce0:	29400084 	addi	r5,r5,2
    5ce4:	1880004c 	andi	r2,r3,1
    5ce8:	1000031e 	bne	r2,zero,5cf8 <__lo0bits+0x84>
    5cec:	1806d07a 	srli	r3,r3,1
    5cf0:	18000a26 	beq	r3,zero,5d1c <__lo0bits+0xa8>
    5cf4:	29400044 	addi	r5,r5,1
    5cf8:	2805883a 	mov	r2,r5
    5cfc:	20c00015 	stw	r3,0(r4)
    5d00:	f800283a 	ret
    5d04:	1806d43a 	srli	r3,r3,16
    5d08:	01400404 	movi	r5,16
    5d0c:	003fe906 	br	5cb4 <__lo0bits+0x40>
    5d10:	000b883a 	mov	r5,zero
    5d14:	2805883a 	mov	r2,r5
    5d18:	f800283a 	ret
    5d1c:	01400804 	movi	r5,32
    5d20:	2805883a 	mov	r2,r5
    5d24:	f800283a 	ret
    5d28:	1804d07a 	srli	r2,r3,1
    5d2c:	01400044 	movi	r5,1
    5d30:	20800015 	stw	r2,0(r4)
    5d34:	003fda06 	br	5ca0 <__lo0bits+0x2c>

00005d38 <__mcmp>:
    5d38:	20800417 	ldw	r2,16(r4)
    5d3c:	28c00417 	ldw	r3,16(r5)
    5d40:	10cfc83a 	sub	r7,r2,r3
    5d44:	38000c1e 	bne	r7,zero,5d78 <__mcmp+0x40>
    5d48:	18c5883a 	add	r2,r3,r3
    5d4c:	1085883a 	add	r2,r2,r2
    5d50:	10c00504 	addi	r3,r2,20
    5d54:	21000504 	addi	r4,r4,20
    5d58:	28cb883a 	add	r5,r5,r3
    5d5c:	2085883a 	add	r2,r4,r2
    5d60:	10bfff04 	addi	r2,r2,-4
    5d64:	297fff04 	addi	r5,r5,-4
    5d68:	11800017 	ldw	r6,0(r2)
    5d6c:	28c00017 	ldw	r3,0(r5)
    5d70:	30c0031e 	bne	r6,r3,5d80 <__mcmp+0x48>
    5d74:	20bffa36 	bltu	r4,r2,5d60 <__mcmp+0x28>
    5d78:	3805883a 	mov	r2,r7
    5d7c:	f800283a 	ret
    5d80:	30c00336 	bltu	r6,r3,5d90 <__mcmp+0x58>
    5d84:	01c00044 	movi	r7,1
    5d88:	3805883a 	mov	r2,r7
    5d8c:	f800283a 	ret
    5d90:	01ffffc4 	movi	r7,-1
    5d94:	003ff806 	br	5d78 <__mcmp+0x40>

00005d98 <__ulp>:
    5d98:	295ffc2c 	andhi	r5,r5,32752
    5d9c:	013f3034 	movhi	r4,64704
    5da0:	290b883a 	add	r5,r5,r4
    5da4:	0145c83a 	sub	r2,zero,r5
    5da8:	1007d53a 	srai	r3,r2,20
    5dac:	000d883a 	mov	r6,zero
    5db0:	0140040e 	bge	zero,r5,5dc4 <__ulp+0x2c>
    5db4:	280f883a 	mov	r7,r5
    5db8:	3807883a 	mov	r3,r7
    5dbc:	3005883a 	mov	r2,r6
    5dc0:	f800283a 	ret
    5dc4:	008004c4 	movi	r2,19
    5dc8:	193ffb04 	addi	r4,r3,-20
    5dcc:	10c00c0e 	bge	r2,r3,5e00 <__ulp+0x68>
    5dd0:	008007c4 	movi	r2,31
    5dd4:	1107c83a 	sub	r3,r2,r4
    5dd8:	00800784 	movi	r2,30
    5ddc:	01400044 	movi	r5,1
    5de0:	11000216 	blt	r2,r4,5dec <__ulp+0x54>
    5de4:	00800044 	movi	r2,1
    5de8:	10ca983a 	sll	r5,r2,r3
    5dec:	000f883a 	mov	r7,zero
    5df0:	280d883a 	mov	r6,r5
    5df4:	3807883a 	mov	r3,r7
    5df8:	3005883a 	mov	r2,r6
    5dfc:	f800283a 	ret
    5e00:	00800234 	movhi	r2,8
    5e04:	10cfd83a 	sra	r7,r2,r3
    5e08:	000d883a 	mov	r6,zero
    5e0c:	3005883a 	mov	r2,r6
    5e10:	3807883a 	mov	r3,r7
    5e14:	f800283a 	ret

00005e18 <__b2d>:
    5e18:	20800417 	ldw	r2,16(r4)
    5e1c:	defff904 	addi	sp,sp,-28
    5e20:	dd000415 	stw	r20,16(sp)
    5e24:	1085883a 	add	r2,r2,r2
    5e28:	25000504 	addi	r20,r4,20
    5e2c:	1085883a 	add	r2,r2,r2
    5e30:	dc000015 	stw	r16,0(sp)
    5e34:	a0a1883a 	add	r16,r20,r2
    5e38:	dd400515 	stw	r21,20(sp)
    5e3c:	857fff17 	ldw	r21,-4(r16)
    5e40:	dc400115 	stw	r17,4(sp)
    5e44:	dfc00615 	stw	ra,24(sp)
    5e48:	a809883a 	mov	r4,r21
    5e4c:	2823883a 	mov	r17,r5
    5e50:	dcc00315 	stw	r19,12(sp)
    5e54:	dc800215 	stw	r18,8(sp)
    5e58:	0005c040 	call	5c04 <__hi0bits>
    5e5c:	100b883a 	mov	r5,r2
    5e60:	00800804 	movi	r2,32
    5e64:	1145c83a 	sub	r2,r2,r5
    5e68:	88800015 	stw	r2,0(r17)
    5e6c:	00800284 	movi	r2,10
    5e70:	80ffff04 	addi	r3,r16,-4
    5e74:	11401416 	blt	r2,r5,5ec8 <__b2d+0xb0>
    5e78:	008002c4 	movi	r2,11
    5e7c:	1149c83a 	sub	r4,r2,r5
    5e80:	a0c02736 	bltu	r20,r3,5f20 <__b2d+0x108>
    5e84:	000d883a 	mov	r6,zero
    5e88:	28800544 	addi	r2,r5,21
    5e8c:	a906d83a 	srl	r3,r21,r4
    5e90:	a884983a 	sll	r2,r21,r2
    5e94:	1ccffc34 	orhi	r19,r3,16368
    5e98:	11a4b03a 	or	r18,r2,r6
    5e9c:	9005883a 	mov	r2,r18
    5ea0:	9807883a 	mov	r3,r19
    5ea4:	dfc00617 	ldw	ra,24(sp)
    5ea8:	dd400517 	ldw	r21,20(sp)
    5eac:	dd000417 	ldw	r20,16(sp)
    5eb0:	dcc00317 	ldw	r19,12(sp)
    5eb4:	dc800217 	ldw	r18,8(sp)
    5eb8:	dc400117 	ldw	r17,4(sp)
    5ebc:	dc000017 	ldw	r16,0(sp)
    5ec0:	dec00704 	addi	sp,sp,28
    5ec4:	f800283a 	ret
    5ec8:	a0c00e36 	bltu	r20,r3,5f04 <__b2d+0xec>
    5ecc:	293ffd44 	addi	r4,r5,-11
    5ed0:	000d883a 	mov	r6,zero
    5ed4:	20000f26 	beq	r4,zero,5f14 <__b2d+0xfc>
    5ed8:	00800804 	movi	r2,32
    5edc:	110bc83a 	sub	r5,r2,r4
    5ee0:	a0c01236 	bltu	r20,r3,5f2c <__b2d+0x114>
    5ee4:	000f883a 	mov	r7,zero
    5ee8:	a904983a 	sll	r2,r21,r4
    5eec:	3146d83a 	srl	r3,r6,r5
    5ef0:	3108983a 	sll	r4,r6,r4
    5ef4:	108ffc34 	orhi	r2,r2,16368
    5ef8:	18a6b03a 	or	r19,r3,r2
    5efc:	3924b03a 	or	r18,r7,r4
    5f00:	003fe606 	br	5e9c <__b2d+0x84>
    5f04:	293ffd44 	addi	r4,r5,-11
    5f08:	81bffe17 	ldw	r6,-8(r16)
    5f0c:	80fffe04 	addi	r3,r16,-8
    5f10:	203ff11e 	bne	r4,zero,5ed8 <__b2d+0xc0>
    5f14:	accffc34 	orhi	r19,r21,16368
    5f18:	3025883a 	mov	r18,r6
    5f1c:	003fdf06 	br	5e9c <__b2d+0x84>
    5f20:	18bfff17 	ldw	r2,-4(r3)
    5f24:	110cd83a 	srl	r6,r2,r4
    5f28:	003fd706 	br	5e88 <__b2d+0x70>
    5f2c:	18bfff17 	ldw	r2,-4(r3)
    5f30:	114ed83a 	srl	r7,r2,r5
    5f34:	003fec06 	br	5ee8 <__b2d+0xd0>

00005f38 <__ratio>:
    5f38:	defff904 	addi	sp,sp,-28
    5f3c:	dc400215 	stw	r17,8(sp)
    5f40:	2823883a 	mov	r17,r5
    5f44:	d80b883a 	mov	r5,sp
    5f48:	dfc00615 	stw	ra,24(sp)
    5f4c:	dd000515 	stw	r20,20(sp)
    5f50:	dcc00415 	stw	r19,16(sp)
    5f54:	dc800315 	stw	r18,12(sp)
    5f58:	2025883a 	mov	r18,r4
    5f5c:	0005e180 	call	5e18 <__b2d>
    5f60:	8809883a 	mov	r4,r17
    5f64:	d9400104 	addi	r5,sp,4
    5f68:	1027883a 	mov	r19,r2
    5f6c:	1829883a 	mov	r20,r3
    5f70:	0005e180 	call	5e18 <__b2d>
    5f74:	89000417 	ldw	r4,16(r17)
    5f78:	91c00417 	ldw	r7,16(r18)
    5f7c:	d9800117 	ldw	r6,4(sp)
    5f80:	180b883a 	mov	r5,r3
    5f84:	390fc83a 	sub	r7,r7,r4
    5f88:	1009883a 	mov	r4,r2
    5f8c:	d8800017 	ldw	r2,0(sp)
    5f90:	380e917a 	slli	r7,r7,5
    5f94:	2011883a 	mov	r8,r4
    5f98:	1185c83a 	sub	r2,r2,r6
    5f9c:	11c5883a 	add	r2,r2,r7
    5fa0:	1006953a 	slli	r3,r2,20
    5fa4:	2813883a 	mov	r9,r5
    5fa8:	00800d0e 	bge	zero,r2,5fe0 <__ratio+0xa8>
    5fac:	1d29883a 	add	r20,r3,r20
    5fb0:	a00b883a 	mov	r5,r20
    5fb4:	480f883a 	mov	r7,r9
    5fb8:	9809883a 	mov	r4,r19
    5fbc:	400d883a 	mov	r6,r8
    5fc0:	0008d940 	call	8d94 <__divdf3>
    5fc4:	dfc00617 	ldw	ra,24(sp)
    5fc8:	dd000517 	ldw	r20,20(sp)
    5fcc:	dcc00417 	ldw	r19,16(sp)
    5fd0:	dc800317 	ldw	r18,12(sp)
    5fd4:	dc400217 	ldw	r17,8(sp)
    5fd8:	dec00704 	addi	sp,sp,28
    5fdc:	f800283a 	ret
    5fe0:	28d3c83a 	sub	r9,r5,r3
    5fe4:	003ff206 	br	5fb0 <__ratio+0x78>

00005fe8 <_mprec_log10>:
    5fe8:	defffe04 	addi	sp,sp,-8
    5fec:	008005c4 	movi	r2,23
    5ff0:	dc000015 	stw	r16,0(sp)
    5ff4:	dfc00115 	stw	ra,4(sp)
    5ff8:	2021883a 	mov	r16,r4
    5ffc:	11000c16 	blt	r2,r4,6030 <_mprec_log10+0x48>
    6000:	200490fa 	slli	r2,r4,3
    6004:	00c00074 	movhi	r3,1
    6008:	18c04a04 	addi	r3,r3,296
    600c:	10c5883a 	add	r2,r2,r3
    6010:	12400117 	ldw	r9,4(r2)
    6014:	12000017 	ldw	r8,0(r2)
    6018:	4807883a 	mov	r3,r9
    601c:	4005883a 	mov	r2,r8
    6020:	dfc00117 	ldw	ra,4(sp)
    6024:	dc000017 	ldw	r16,0(sp)
    6028:	dec00204 	addi	sp,sp,8
    602c:	f800283a 	ret
    6030:	0011883a 	mov	r8,zero
    6034:	024ffc34 	movhi	r9,16368
    6038:	0005883a 	mov	r2,zero
    603c:	00d00934 	movhi	r3,16420
    6040:	480b883a 	mov	r5,r9
    6044:	4009883a 	mov	r4,r8
    6048:	180f883a 	mov	r7,r3
    604c:	100d883a 	mov	r6,r2
    6050:	00089d00 	call	89d0 <__muldf3>
    6054:	843fffc4 	addi	r16,r16,-1
    6058:	1011883a 	mov	r8,r2
    605c:	1813883a 	mov	r9,r3
    6060:	803ff51e 	bne	r16,zero,6038 <_mprec_log10+0x50>
    6064:	4005883a 	mov	r2,r8
    6068:	4807883a 	mov	r3,r9
    606c:	dfc00117 	ldw	ra,4(sp)
    6070:	dc000017 	ldw	r16,0(sp)
    6074:	dec00204 	addi	sp,sp,8
    6078:	f800283a 	ret

0000607c <__copybits>:
    607c:	297fffc4 	addi	r5,r5,-1
    6080:	30800417 	ldw	r2,16(r6)
    6084:	280bd17a 	srai	r5,r5,5
    6088:	31800504 	addi	r6,r6,20
    608c:	1085883a 	add	r2,r2,r2
    6090:	294b883a 	add	r5,r5,r5
    6094:	294b883a 	add	r5,r5,r5
    6098:	1085883a 	add	r2,r2,r2
    609c:	290b883a 	add	r5,r5,r4
    60a0:	3087883a 	add	r3,r6,r2
    60a4:	29400104 	addi	r5,r5,4
    60a8:	30c0052e 	bgeu	r6,r3,60c0 <__copybits+0x44>
    60ac:	30800017 	ldw	r2,0(r6)
    60b0:	31800104 	addi	r6,r6,4
    60b4:	20800015 	stw	r2,0(r4)
    60b8:	21000104 	addi	r4,r4,4
    60bc:	30fffb36 	bltu	r6,r3,60ac <__copybits+0x30>
    60c0:	2140032e 	bgeu	r4,r5,60d0 <__copybits+0x54>
    60c4:	20000015 	stw	zero,0(r4)
    60c8:	21000104 	addi	r4,r4,4
    60cc:	217ffd36 	bltu	r4,r5,60c4 <__copybits+0x48>
    60d0:	f800283a 	ret

000060d4 <__any_on>:
    60d4:	20800417 	ldw	r2,16(r4)
    60d8:	2807d17a 	srai	r3,r5,5
    60dc:	21000504 	addi	r4,r4,20
    60e0:	10c00d0e 	bge	r2,r3,6118 <__any_on+0x44>
    60e4:	1085883a 	add	r2,r2,r2
    60e8:	1085883a 	add	r2,r2,r2
    60ec:	208d883a 	add	r6,r4,r2
    60f0:	2180182e 	bgeu	r4,r6,6154 <__any_on+0x80>
    60f4:	30bfff17 	ldw	r2,-4(r6)
    60f8:	30ffff04 	addi	r3,r6,-4
    60fc:	1000041e 	bne	r2,zero,6110 <__any_on+0x3c>
    6100:	20c0142e 	bgeu	r4,r3,6154 <__any_on+0x80>
    6104:	18ffff04 	addi	r3,r3,-4
    6108:	18800017 	ldw	r2,0(r3)
    610c:	103ffc26 	beq	r2,zero,6100 <__any_on+0x2c>
    6110:	00800044 	movi	r2,1
    6114:	f800283a 	ret
    6118:	18800a0e 	bge	r3,r2,6144 <__any_on+0x70>
    611c:	294007cc 	andi	r5,r5,31
    6120:	28000826 	beq	r5,zero,6144 <__any_on+0x70>
    6124:	18c5883a 	add	r2,r3,r3
    6128:	1085883a 	add	r2,r2,r2
    612c:	208d883a 	add	r6,r4,r2
    6130:	30c00017 	ldw	r3,0(r6)
    6134:	1944d83a 	srl	r2,r3,r5
    6138:	1144983a 	sll	r2,r2,r5
    613c:	18bff41e 	bne	r3,r2,6110 <__any_on+0x3c>
    6140:	003feb06 	br	60f0 <__any_on+0x1c>
    6144:	18c5883a 	add	r2,r3,r3
    6148:	1085883a 	add	r2,r2,r2
    614c:	208d883a 	add	r6,r4,r2
    6150:	003fe706 	br	60f0 <__any_on+0x1c>
    6154:	0005883a 	mov	r2,zero
    6158:	f800283a 	ret

0000615c <_Balloc>:
    615c:	20c01317 	ldw	r3,76(r4)
    6160:	defffb04 	addi	sp,sp,-20
    6164:	dcc00315 	stw	r19,12(sp)
    6168:	dc800215 	stw	r18,8(sp)
    616c:	dfc00415 	stw	ra,16(sp)
    6170:	2825883a 	mov	r18,r5
    6174:	dc400115 	stw	r17,4(sp)
    6178:	dc000015 	stw	r16,0(sp)
    617c:	2027883a 	mov	r19,r4
    6180:	01800404 	movi	r6,16
    6184:	01400104 	movi	r5,4
    6188:	18001726 	beq	r3,zero,61e8 <_Balloc+0x8c>
    618c:	01400044 	movi	r5,1
    6190:	9485883a 	add	r2,r18,r18
    6194:	2ca2983a 	sll	r17,r5,r18
    6198:	1085883a 	add	r2,r2,r2
    619c:	10c7883a 	add	r3,r2,r3
    61a0:	1c000017 	ldw	r16,0(r3)
    61a4:	8c4d883a 	add	r6,r17,r17
    61a8:	318d883a 	add	r6,r6,r6
    61ac:	9809883a 	mov	r4,r19
    61b0:	31800504 	addi	r6,r6,20
    61b4:	80001226 	beq	r16,zero,6200 <_Balloc+0xa4>
    61b8:	80800017 	ldw	r2,0(r16)
    61bc:	18800015 	stw	r2,0(r3)
    61c0:	80000415 	stw	zero,16(r16)
    61c4:	80000315 	stw	zero,12(r16)
    61c8:	8005883a 	mov	r2,r16
    61cc:	dfc00417 	ldw	ra,16(sp)
    61d0:	dcc00317 	ldw	r19,12(sp)
    61d4:	dc800217 	ldw	r18,8(sp)
    61d8:	dc400117 	ldw	r17,4(sp)
    61dc:	dc000017 	ldw	r16,0(sp)
    61e0:	dec00504 	addi	sp,sp,20
    61e4:	f800283a 	ret
    61e8:	00075240 	call	7524 <_calloc_r>
    61ec:	1007883a 	mov	r3,r2
    61f0:	0021883a 	mov	r16,zero
    61f4:	98801315 	stw	r2,76(r19)
    61f8:	103fe41e 	bne	r2,zero,618c <_Balloc+0x30>
    61fc:	003ff206 	br	61c8 <_Balloc+0x6c>
    6200:	00075240 	call	7524 <_calloc_r>
    6204:	103ff026 	beq	r2,zero,61c8 <_Balloc+0x6c>
    6208:	1021883a 	mov	r16,r2
    620c:	14800115 	stw	r18,4(r2)
    6210:	14400215 	stw	r17,8(r2)
    6214:	003fea06 	br	61c0 <_Balloc+0x64>

00006218 <__d2b>:
    6218:	defff504 	addi	sp,sp,-44
    621c:	dcc00515 	stw	r19,20(sp)
    6220:	04c00044 	movi	r19,1
    6224:	dc000215 	stw	r16,8(sp)
    6228:	2821883a 	mov	r16,r5
    622c:	980b883a 	mov	r5,r19
    6230:	ddc00915 	stw	r23,36(sp)
    6234:	dd800815 	stw	r22,32(sp)
    6238:	dd400715 	stw	r21,28(sp)
    623c:	dd000615 	stw	r20,24(sp)
    6240:	dc800415 	stw	r18,16(sp)
    6244:	dc400315 	stw	r17,12(sp)
    6248:	dfc00a15 	stw	ra,40(sp)
    624c:	3023883a 	mov	r17,r6
    6250:	382d883a 	mov	r22,r7
    6254:	ddc00b17 	ldw	r23,44(sp)
    6258:	000615c0 	call	615c <_Balloc>
    625c:	1025883a 	mov	r18,r2
    6260:	00a00034 	movhi	r2,32768
    6264:	10bfffc4 	addi	r2,r2,-1
    6268:	8888703a 	and	r4,r17,r2
    626c:	202ad53a 	srli	r21,r4,20
    6270:	00800434 	movhi	r2,16
    6274:	10bfffc4 	addi	r2,r2,-1
    6278:	8886703a 	and	r3,r17,r2
    627c:	a829003a 	cmpeq	r20,r21,zero
    6280:	800b883a 	mov	r5,r16
    6284:	d8c00115 	stw	r3,4(sp)
    6288:	94000504 	addi	r16,r18,20
    628c:	a000021e 	bne	r20,zero,6298 <__d2b+0x80>
    6290:	18c00434 	orhi	r3,r3,16
    6294:	d8c00115 	stw	r3,4(sp)
    6298:	28002726 	beq	r5,zero,6338 <__d2b+0x120>
    629c:	d809883a 	mov	r4,sp
    62a0:	d9400015 	stw	r5,0(sp)
    62a4:	0005c740 	call	5c74 <__lo0bits>
    62a8:	100d883a 	mov	r6,r2
    62ac:	10003526 	beq	r2,zero,6384 <__d2b+0x16c>
    62b0:	d8c00117 	ldw	r3,4(sp)
    62b4:	00800804 	movi	r2,32
    62b8:	1185c83a 	sub	r2,r2,r6
    62bc:	d9000017 	ldw	r4,0(sp)
    62c0:	1886983a 	sll	r3,r3,r2
    62c4:	1906b03a 	or	r3,r3,r4
    62c8:	90c00515 	stw	r3,20(r18)
    62cc:	d8c00117 	ldw	r3,4(sp)
    62d0:	1986d83a 	srl	r3,r3,r6
    62d4:	d8c00115 	stw	r3,4(sp)
    62d8:	180b003a 	cmpeq	r5,r3,zero
    62dc:	00800084 	movi	r2,2
    62e0:	114bc83a 	sub	r5,r2,r5
    62e4:	80c00115 	stw	r3,4(r16)
    62e8:	91400415 	stw	r5,16(r18)
    62ec:	a0001a1e 	bne	r20,zero,6358 <__d2b+0x140>
    62f0:	3545883a 	add	r2,r6,r21
    62f4:	10bef344 	addi	r2,r2,-1075
    62f8:	00c00d44 	movi	r3,53
    62fc:	b0800015 	stw	r2,0(r22)
    6300:	1987c83a 	sub	r3,r3,r6
    6304:	b8c00015 	stw	r3,0(r23)
    6308:	9005883a 	mov	r2,r18
    630c:	dfc00a17 	ldw	ra,40(sp)
    6310:	ddc00917 	ldw	r23,36(sp)
    6314:	dd800817 	ldw	r22,32(sp)
    6318:	dd400717 	ldw	r21,28(sp)
    631c:	dd000617 	ldw	r20,24(sp)
    6320:	dcc00517 	ldw	r19,20(sp)
    6324:	dc800417 	ldw	r18,16(sp)
    6328:	dc400317 	ldw	r17,12(sp)
    632c:	dc000217 	ldw	r16,8(sp)
    6330:	dec00b04 	addi	sp,sp,44
    6334:	f800283a 	ret
    6338:	d9000104 	addi	r4,sp,4
    633c:	0005c740 	call	5c74 <__lo0bits>
    6340:	11800804 	addi	r6,r2,32
    6344:	d8800117 	ldw	r2,4(sp)
    6348:	94c00415 	stw	r19,16(r18)
    634c:	980b883a 	mov	r5,r19
    6350:	90800515 	stw	r2,20(r18)
    6354:	a03fe626 	beq	r20,zero,62f0 <__d2b+0xd8>
    6358:	2945883a 	add	r2,r5,r5
    635c:	1085883a 	add	r2,r2,r2
    6360:	1405883a 	add	r2,r2,r16
    6364:	113fff17 	ldw	r4,-4(r2)
    6368:	30fef384 	addi	r3,r6,-1074
    636c:	2820917a 	slli	r16,r5,5
    6370:	b0c00015 	stw	r3,0(r22)
    6374:	0005c040 	call	5c04 <__hi0bits>
    6378:	80a1c83a 	sub	r16,r16,r2
    637c:	bc000015 	stw	r16,0(r23)
    6380:	003fe106 	br	6308 <__d2b+0xf0>
    6384:	d8800017 	ldw	r2,0(sp)
    6388:	90800515 	stw	r2,20(r18)
    638c:	d8c00117 	ldw	r3,4(sp)
    6390:	003fd106 	br	62d8 <__d2b+0xc0>

00006394 <__mdiff>:
    6394:	defffb04 	addi	sp,sp,-20
    6398:	dc000015 	stw	r16,0(sp)
    639c:	2821883a 	mov	r16,r5
    63a0:	dc800215 	stw	r18,8(sp)
    63a4:	300b883a 	mov	r5,r6
    63a8:	2025883a 	mov	r18,r4
    63ac:	8009883a 	mov	r4,r16
    63b0:	dc400115 	stw	r17,4(sp)
    63b4:	dfc00415 	stw	ra,16(sp)
    63b8:	dcc00315 	stw	r19,12(sp)
    63bc:	3023883a 	mov	r17,r6
    63c0:	0005d380 	call	5d38 <__mcmp>
    63c4:	10004226 	beq	r2,zero,64d0 <__mdiff+0x13c>
    63c8:	10005016 	blt	r2,zero,650c <__mdiff+0x178>
    63cc:	0027883a 	mov	r19,zero
    63d0:	81400117 	ldw	r5,4(r16)
    63d4:	9009883a 	mov	r4,r18
    63d8:	000615c0 	call	615c <_Balloc>
    63dc:	1019883a 	mov	r12,r2
    63e0:	82800417 	ldw	r10,16(r16)
    63e4:	88800417 	ldw	r2,16(r17)
    63e8:	81800504 	addi	r6,r16,20
    63ec:	5287883a 	add	r3,r10,r10
    63f0:	1085883a 	add	r2,r2,r2
    63f4:	18c7883a 	add	r3,r3,r3
    63f8:	1085883a 	add	r2,r2,r2
    63fc:	8a000504 	addi	r8,r17,20
    6400:	64c00315 	stw	r19,12(r12)
    6404:	30db883a 	add	r13,r6,r3
    6408:	4097883a 	add	r11,r8,r2
    640c:	61c00504 	addi	r7,r12,20
    6410:	0013883a 	mov	r9,zero
    6414:	31000017 	ldw	r4,0(r6)
    6418:	41400017 	ldw	r5,0(r8)
    641c:	42000104 	addi	r8,r8,4
    6420:	20bfffcc 	andi	r2,r4,65535
    6424:	28ffffcc 	andi	r3,r5,65535
    6428:	10c5c83a 	sub	r2,r2,r3
    642c:	1245883a 	add	r2,r2,r9
    6430:	2008d43a 	srli	r4,r4,16
    6434:	280ad43a 	srli	r5,r5,16
    6438:	1007d43a 	srai	r3,r2,16
    643c:	3880000d 	sth	r2,0(r7)
    6440:	2149c83a 	sub	r4,r4,r5
    6444:	20c9883a 	add	r4,r4,r3
    6448:	3900008d 	sth	r4,2(r7)
    644c:	31800104 	addi	r6,r6,4
    6450:	39c00104 	addi	r7,r7,4
    6454:	2013d43a 	srai	r9,r4,16
    6458:	42ffee36 	bltu	r8,r11,6414 <__mdiff+0x80>
    645c:	33400c2e 	bgeu	r6,r13,6490 <__mdiff+0xfc>
    6460:	30800017 	ldw	r2,0(r6)
    6464:	31800104 	addi	r6,r6,4
    6468:	10ffffcc 	andi	r3,r2,65535
    646c:	1a47883a 	add	r3,r3,r9
    6470:	1004d43a 	srli	r2,r2,16
    6474:	1809d43a 	srai	r4,r3,16
    6478:	38c0000d 	sth	r3,0(r7)
    647c:	1105883a 	add	r2,r2,r4
    6480:	3880008d 	sth	r2,2(r7)
    6484:	1013d43a 	srai	r9,r2,16
    6488:	39c00104 	addi	r7,r7,4
    648c:	337ff436 	bltu	r6,r13,6460 <__mdiff+0xcc>
    6490:	38bfff17 	ldw	r2,-4(r7)
    6494:	38ffff04 	addi	r3,r7,-4
    6498:	1000041e 	bne	r2,zero,64ac <__mdiff+0x118>
    649c:	18ffff04 	addi	r3,r3,-4
    64a0:	18800017 	ldw	r2,0(r3)
    64a4:	52bfffc4 	addi	r10,r10,-1
    64a8:	103ffc26 	beq	r2,zero,649c <__mdiff+0x108>
    64ac:	6005883a 	mov	r2,r12
    64b0:	62800415 	stw	r10,16(r12)
    64b4:	dfc00417 	ldw	ra,16(sp)
    64b8:	dcc00317 	ldw	r19,12(sp)
    64bc:	dc800217 	ldw	r18,8(sp)
    64c0:	dc400117 	ldw	r17,4(sp)
    64c4:	dc000017 	ldw	r16,0(sp)
    64c8:	dec00504 	addi	sp,sp,20
    64cc:	f800283a 	ret
    64d0:	9009883a 	mov	r4,r18
    64d4:	000b883a 	mov	r5,zero
    64d8:	000615c0 	call	615c <_Balloc>
    64dc:	1019883a 	mov	r12,r2
    64e0:	00800044 	movi	r2,1
    64e4:	60800415 	stw	r2,16(r12)
    64e8:	6005883a 	mov	r2,r12
    64ec:	60000515 	stw	zero,20(r12)
    64f0:	dfc00417 	ldw	ra,16(sp)
    64f4:	dcc00317 	ldw	r19,12(sp)
    64f8:	dc800217 	ldw	r18,8(sp)
    64fc:	dc400117 	ldw	r17,4(sp)
    6500:	dc000017 	ldw	r16,0(sp)
    6504:	dec00504 	addi	sp,sp,20
    6508:	f800283a 	ret
    650c:	880d883a 	mov	r6,r17
    6510:	04c00044 	movi	r19,1
    6514:	8023883a 	mov	r17,r16
    6518:	3021883a 	mov	r16,r6
    651c:	003fac06 	br	63d0 <__mdiff+0x3c>

00006520 <__lshift>:
    6520:	defff904 	addi	sp,sp,-28
    6524:	28800417 	ldw	r2,16(r5)
    6528:	dc000015 	stw	r16,0(sp)
    652c:	3021d17a 	srai	r16,r6,5
    6530:	28c00217 	ldw	r3,8(r5)
    6534:	10800044 	addi	r2,r2,1
    6538:	dc400115 	stw	r17,4(sp)
    653c:	80a3883a 	add	r17,r16,r2
    6540:	dd400515 	stw	r21,20(sp)
    6544:	dd000415 	stw	r20,16(sp)
    6548:	dc800215 	stw	r18,8(sp)
    654c:	dfc00615 	stw	ra,24(sp)
    6550:	2825883a 	mov	r18,r5
    6554:	dcc00315 	stw	r19,12(sp)
    6558:	3029883a 	mov	r20,r6
    655c:	202b883a 	mov	r21,r4
    6560:	29400117 	ldw	r5,4(r5)
    6564:	1c40030e 	bge	r3,r17,6574 <__lshift+0x54>
    6568:	18c7883a 	add	r3,r3,r3
    656c:	29400044 	addi	r5,r5,1
    6570:	1c7ffd16 	blt	r3,r17,6568 <__lshift+0x48>
    6574:	a809883a 	mov	r4,r21
    6578:	000615c0 	call	615c <_Balloc>
    657c:	1027883a 	mov	r19,r2
    6580:	11400504 	addi	r5,r2,20
    6584:	0400090e 	bge	zero,r16,65ac <__lshift+0x8c>
    6588:	2805883a 	mov	r2,r5
    658c:	0007883a 	mov	r3,zero
    6590:	18c00044 	addi	r3,r3,1
    6594:	10000015 	stw	zero,0(r2)
    6598:	10800104 	addi	r2,r2,4
    659c:	80fffc1e 	bne	r16,r3,6590 <__lshift+0x70>
    65a0:	8405883a 	add	r2,r16,r16
    65a4:	1085883a 	add	r2,r2,r2
    65a8:	288b883a 	add	r5,r5,r2
    65ac:	90800417 	ldw	r2,16(r18)
    65b0:	91000504 	addi	r4,r18,20
    65b4:	a18007cc 	andi	r6,r20,31
    65b8:	1085883a 	add	r2,r2,r2
    65bc:	1085883a 	add	r2,r2,r2
    65c0:	208f883a 	add	r7,r4,r2
    65c4:	30001e26 	beq	r6,zero,6640 <__lshift+0x120>
    65c8:	00800804 	movi	r2,32
    65cc:	1191c83a 	sub	r8,r2,r6
    65d0:	0007883a 	mov	r3,zero
    65d4:	20800017 	ldw	r2,0(r4)
    65d8:	1184983a 	sll	r2,r2,r6
    65dc:	1884b03a 	or	r2,r3,r2
    65e0:	28800015 	stw	r2,0(r5)
    65e4:	20c00017 	ldw	r3,0(r4)
    65e8:	21000104 	addi	r4,r4,4
    65ec:	29400104 	addi	r5,r5,4
    65f0:	1a06d83a 	srl	r3,r3,r8
    65f4:	21fff736 	bltu	r4,r7,65d4 <__lshift+0xb4>
    65f8:	28c00015 	stw	r3,0(r5)
    65fc:	18000126 	beq	r3,zero,6604 <__lshift+0xe4>
    6600:	8c400044 	addi	r17,r17,1
    6604:	88bfffc4 	addi	r2,r17,-1
    6608:	98800415 	stw	r2,16(r19)
    660c:	a809883a 	mov	r4,r21
    6610:	900b883a 	mov	r5,r18
    6614:	0005bdc0 	call	5bdc <_Bfree>
    6618:	9805883a 	mov	r2,r19
    661c:	dfc00617 	ldw	ra,24(sp)
    6620:	dd400517 	ldw	r21,20(sp)
    6624:	dd000417 	ldw	r20,16(sp)
    6628:	dcc00317 	ldw	r19,12(sp)
    662c:	dc800217 	ldw	r18,8(sp)
    6630:	dc400117 	ldw	r17,4(sp)
    6634:	dc000017 	ldw	r16,0(sp)
    6638:	dec00704 	addi	sp,sp,28
    663c:	f800283a 	ret
    6640:	20800017 	ldw	r2,0(r4)
    6644:	21000104 	addi	r4,r4,4
    6648:	28800015 	stw	r2,0(r5)
    664c:	29400104 	addi	r5,r5,4
    6650:	21ffec2e 	bgeu	r4,r7,6604 <__lshift+0xe4>
    6654:	20800017 	ldw	r2,0(r4)
    6658:	21000104 	addi	r4,r4,4
    665c:	28800015 	stw	r2,0(r5)
    6660:	29400104 	addi	r5,r5,4
    6664:	21fff636 	bltu	r4,r7,6640 <__lshift+0x120>
    6668:	003fe606 	br	6604 <__lshift+0xe4>

0000666c <__multiply>:
    666c:	defff904 	addi	sp,sp,-28
    6670:	dcc00315 	stw	r19,12(sp)
    6674:	dc800215 	stw	r18,8(sp)
    6678:	2cc00417 	ldw	r19,16(r5)
    667c:	34800417 	ldw	r18,16(r6)
    6680:	dd000415 	stw	r20,16(sp)
    6684:	dc400115 	stw	r17,4(sp)
    6688:	dfc00615 	stw	ra,24(sp)
    668c:	dd400515 	stw	r21,20(sp)
    6690:	dc000015 	stw	r16,0(sp)
    6694:	2823883a 	mov	r17,r5
    6698:	3029883a 	mov	r20,r6
    669c:	9c80040e 	bge	r19,r18,66b0 <__multiply+0x44>
    66a0:	9027883a 	mov	r19,r18
    66a4:	2c800417 	ldw	r18,16(r5)
    66a8:	2829883a 	mov	r20,r5
    66ac:	3023883a 	mov	r17,r6
    66b0:	88800217 	ldw	r2,8(r17)
    66b4:	9ca1883a 	add	r16,r19,r18
    66b8:	89400117 	ldw	r5,4(r17)
    66bc:	1400010e 	bge	r2,r16,66c4 <__multiply+0x58>
    66c0:	29400044 	addi	r5,r5,1
    66c4:	000615c0 	call	615c <_Balloc>
    66c8:	102b883a 	mov	r21,r2
    66cc:	8405883a 	add	r2,r16,r16
    66d0:	1085883a 	add	r2,r2,r2
    66d4:	a9000504 	addi	r4,r21,20
    66d8:	209d883a 	add	r14,r4,r2
    66dc:	2380042e 	bgeu	r4,r14,66f0 <__multiply+0x84>
    66e0:	2005883a 	mov	r2,r4
    66e4:	10000015 	stw	zero,0(r2)
    66e8:	10800104 	addi	r2,r2,4
    66ec:	13bffd36 	bltu	r2,r14,66e4 <__multiply+0x78>
    66f0:	9485883a 	add	r2,r18,r18
    66f4:	9cc7883a 	add	r3,r19,r19
    66f8:	a1800504 	addi	r6,r20,20
    66fc:	1085883a 	add	r2,r2,r2
    6700:	8b400504 	addi	r13,r17,20
    6704:	18c7883a 	add	r3,r3,r3
    6708:	309f883a 	add	r15,r6,r2
    670c:	68d7883a 	add	r11,r13,r3
    6710:	33c03b2e 	bgeu	r6,r15,6800 <__multiply+0x194>
    6714:	2019883a 	mov	r12,r4
    6718:	30800017 	ldw	r2,0(r6)
    671c:	127fffcc 	andi	r9,r2,65535
    6720:	48001826 	beq	r9,zero,6784 <__multiply+0x118>
    6724:	6811883a 	mov	r8,r13
    6728:	600f883a 	mov	r7,r12
    672c:	0015883a 	mov	r10,zero
    6730:	40c00017 	ldw	r3,0(r8)
    6734:	39400017 	ldw	r5,0(r7)
    6738:	42000104 	addi	r8,r8,4
    673c:	193fffcc 	andi	r4,r3,65535
    6740:	4909383a 	mul	r4,r9,r4
    6744:	1806d43a 	srli	r3,r3,16
    6748:	28bfffcc 	andi	r2,r5,65535
    674c:	5085883a 	add	r2,r10,r2
    6750:	2089883a 	add	r4,r4,r2
    6754:	48c7383a 	mul	r3,r9,r3
    6758:	280ad43a 	srli	r5,r5,16
    675c:	2004d43a 	srli	r2,r4,16
    6760:	3900000d 	sth	r4,0(r7)
    6764:	1947883a 	add	r3,r3,r5
    6768:	10c5883a 	add	r2,r2,r3
    676c:	3880008d 	sth	r2,2(r7)
    6770:	1014d43a 	srli	r10,r2,16
    6774:	39c00104 	addi	r7,r7,4
    6778:	42ffed36 	bltu	r8,r11,6730 <__multiply+0xc4>
    677c:	3a800015 	stw	r10,0(r7)
    6780:	30800017 	ldw	r2,0(r6)
    6784:	1012d43a 	srli	r9,r2,16
    6788:	48001926 	beq	r9,zero,67f0 <__multiply+0x184>
    678c:	60800017 	ldw	r2,0(r12)
    6790:	6811883a 	mov	r8,r13
    6794:	600f883a 	mov	r7,r12
    6798:	0015883a 	mov	r10,zero
    679c:	100b883a 	mov	r5,r2
    67a0:	41000017 	ldw	r4,0(r8)
    67a4:	2806d43a 	srli	r3,r5,16
    67a8:	3880000d 	sth	r2,0(r7)
    67ac:	20bfffcc 	andi	r2,r4,65535
    67b0:	4885383a 	mul	r2,r9,r2
    67b4:	50c7883a 	add	r3,r10,r3
    67b8:	2008d43a 	srli	r4,r4,16
    67bc:	10c5883a 	add	r2,r2,r3
    67c0:	3880008d 	sth	r2,2(r7)
    67c4:	39c00104 	addi	r7,r7,4
    67c8:	39400017 	ldw	r5,0(r7)
    67cc:	4909383a 	mul	r4,r9,r4
    67d0:	1004d43a 	srli	r2,r2,16
    67d4:	28ffffcc 	andi	r3,r5,65535
    67d8:	20c9883a 	add	r4,r4,r3
    67dc:	1105883a 	add	r2,r2,r4
    67e0:	42000104 	addi	r8,r8,4
    67e4:	1014d43a 	srli	r10,r2,16
    67e8:	42ffed36 	bltu	r8,r11,67a0 <__multiply+0x134>
    67ec:	38800015 	stw	r2,0(r7)
    67f0:	31800104 	addi	r6,r6,4
    67f4:	33c0022e 	bgeu	r6,r15,6800 <__multiply+0x194>
    67f8:	63000104 	addi	r12,r12,4
    67fc:	003fc606 	br	6718 <__multiply+0xac>
    6800:	0400090e 	bge	zero,r16,6828 <__multiply+0x1bc>
    6804:	70bfff17 	ldw	r2,-4(r14)
    6808:	70ffff04 	addi	r3,r14,-4
    680c:	10000326 	beq	r2,zero,681c <__multiply+0x1b0>
    6810:	00000506 	br	6828 <__multiply+0x1bc>
    6814:	18800017 	ldw	r2,0(r3)
    6818:	1000031e 	bne	r2,zero,6828 <__multiply+0x1bc>
    681c:	843fffc4 	addi	r16,r16,-1
    6820:	18ffff04 	addi	r3,r3,-4
    6824:	803ffb1e 	bne	r16,zero,6814 <__multiply+0x1a8>
    6828:	a805883a 	mov	r2,r21
    682c:	ac000415 	stw	r16,16(r21)
    6830:	dfc00617 	ldw	ra,24(sp)
    6834:	dd400517 	ldw	r21,20(sp)
    6838:	dd000417 	ldw	r20,16(sp)
    683c:	dcc00317 	ldw	r19,12(sp)
    6840:	dc800217 	ldw	r18,8(sp)
    6844:	dc400117 	ldw	r17,4(sp)
    6848:	dc000017 	ldw	r16,0(sp)
    684c:	dec00704 	addi	sp,sp,28
    6850:	f800283a 	ret

00006854 <__i2b>:
    6854:	defffd04 	addi	sp,sp,-12
    6858:	dc000015 	stw	r16,0(sp)
    685c:	04000044 	movi	r16,1
    6860:	dc800115 	stw	r18,4(sp)
    6864:	2825883a 	mov	r18,r5
    6868:	800b883a 	mov	r5,r16
    686c:	dfc00215 	stw	ra,8(sp)
    6870:	000615c0 	call	615c <_Balloc>
    6874:	14000415 	stw	r16,16(r2)
    6878:	14800515 	stw	r18,20(r2)
    687c:	dfc00217 	ldw	ra,8(sp)
    6880:	dc800117 	ldw	r18,4(sp)
    6884:	dc000017 	ldw	r16,0(sp)
    6888:	dec00304 	addi	sp,sp,12
    688c:	f800283a 	ret

00006890 <__multadd>:
    6890:	defffa04 	addi	sp,sp,-24
    6894:	dc800215 	stw	r18,8(sp)
    6898:	2c800417 	ldw	r18,16(r5)
    689c:	dd000415 	stw	r20,16(sp)
    68a0:	dcc00315 	stw	r19,12(sp)
    68a4:	dc000015 	stw	r16,0(sp)
    68a8:	dfc00515 	stw	ra,20(sp)
    68ac:	3821883a 	mov	r16,r7
    68b0:	dc400115 	stw	r17,4(sp)
    68b4:	2827883a 	mov	r19,r5
    68b8:	2029883a 	mov	r20,r4
    68bc:	2a000504 	addi	r8,r5,20
    68c0:	000f883a 	mov	r7,zero
    68c4:	40800017 	ldw	r2,0(r8)
    68c8:	39c00044 	addi	r7,r7,1
    68cc:	10ffffcc 	andi	r3,r2,65535
    68d0:	1987383a 	mul	r3,r3,r6
    68d4:	1004d43a 	srli	r2,r2,16
    68d8:	1c07883a 	add	r3,r3,r16
    68dc:	180ad43a 	srli	r5,r3,16
    68e0:	1185383a 	mul	r2,r2,r6
    68e4:	18ffffcc 	andi	r3,r3,65535
    68e8:	1145883a 	add	r2,r2,r5
    68ec:	1008943a 	slli	r4,r2,16
    68f0:	1020d43a 	srli	r16,r2,16
    68f4:	20c9883a 	add	r4,r4,r3
    68f8:	41000015 	stw	r4,0(r8)
    68fc:	42000104 	addi	r8,r8,4
    6900:	3cbff016 	blt	r7,r18,68c4 <__multadd+0x34>
    6904:	80000826 	beq	r16,zero,6928 <__multadd+0x98>
    6908:	98800217 	ldw	r2,8(r19)
    690c:	90800f0e 	bge	r18,r2,694c <__multadd+0xbc>
    6910:	9485883a 	add	r2,r18,r18
    6914:	1085883a 	add	r2,r2,r2
    6918:	14c5883a 	add	r2,r2,r19
    691c:	90c00044 	addi	r3,r18,1
    6920:	14000515 	stw	r16,20(r2)
    6924:	98c00415 	stw	r3,16(r19)
    6928:	9805883a 	mov	r2,r19
    692c:	dfc00517 	ldw	ra,20(sp)
    6930:	dd000417 	ldw	r20,16(sp)
    6934:	dcc00317 	ldw	r19,12(sp)
    6938:	dc800217 	ldw	r18,8(sp)
    693c:	dc400117 	ldw	r17,4(sp)
    6940:	dc000017 	ldw	r16,0(sp)
    6944:	dec00604 	addi	sp,sp,24
    6948:	f800283a 	ret
    694c:	99400117 	ldw	r5,4(r19)
    6950:	a009883a 	mov	r4,r20
    6954:	29400044 	addi	r5,r5,1
    6958:	000615c0 	call	615c <_Balloc>
    695c:	99800417 	ldw	r6,16(r19)
    6960:	99400304 	addi	r5,r19,12
    6964:	11000304 	addi	r4,r2,12
    6968:	318d883a 	add	r6,r6,r6
    696c:	318d883a 	add	r6,r6,r6
    6970:	31800204 	addi	r6,r6,8
    6974:	1023883a 	mov	r17,r2
    6978:	00059c40 	call	59c4 <memcpy>
    697c:	980b883a 	mov	r5,r19
    6980:	a009883a 	mov	r4,r20
    6984:	0005bdc0 	call	5bdc <_Bfree>
    6988:	8827883a 	mov	r19,r17
    698c:	003fe006 	br	6910 <__multadd+0x80>

00006990 <__pow5mult>:
    6990:	defffa04 	addi	sp,sp,-24
    6994:	308000cc 	andi	r2,r6,3
    6998:	dd000415 	stw	r20,16(sp)
    699c:	dcc00315 	stw	r19,12(sp)
    69a0:	dc000015 	stw	r16,0(sp)
    69a4:	dfc00515 	stw	ra,20(sp)
    69a8:	dc800215 	stw	r18,8(sp)
    69ac:	dc400115 	stw	r17,4(sp)
    69b0:	3021883a 	mov	r16,r6
    69b4:	2027883a 	mov	r19,r4
    69b8:	2829883a 	mov	r20,r5
    69bc:	10002b1e 	bne	r2,zero,6a6c <__pow5mult+0xdc>
    69c0:	8025d0ba 	srai	r18,r16,2
    69c4:	90001b26 	beq	r18,zero,6a34 <__pow5mult+0xa4>
    69c8:	9c001217 	ldw	r16,72(r19)
    69cc:	8000081e 	bne	r16,zero,69f0 <__pow5mult+0x60>
    69d0:	00003006 	br	6a94 <__pow5mult+0x104>
    69d4:	800b883a 	mov	r5,r16
    69d8:	800d883a 	mov	r6,r16
    69dc:	9809883a 	mov	r4,r19
    69e0:	90001426 	beq	r18,zero,6a34 <__pow5mult+0xa4>
    69e4:	80800017 	ldw	r2,0(r16)
    69e8:	10001b26 	beq	r2,zero,6a58 <__pow5mult+0xc8>
    69ec:	1021883a 	mov	r16,r2
    69f0:	9080004c 	andi	r2,r18,1
    69f4:	1005003a 	cmpeq	r2,r2,zero
    69f8:	9025d07a 	srai	r18,r18,1
    69fc:	800d883a 	mov	r6,r16
    6a00:	9809883a 	mov	r4,r19
    6a04:	a00b883a 	mov	r5,r20
    6a08:	103ff21e 	bne	r2,zero,69d4 <__pow5mult+0x44>
    6a0c:	000666c0 	call	666c <__multiply>
    6a10:	a00b883a 	mov	r5,r20
    6a14:	9809883a 	mov	r4,r19
    6a18:	1023883a 	mov	r17,r2
    6a1c:	0005bdc0 	call	5bdc <_Bfree>
    6a20:	8829883a 	mov	r20,r17
    6a24:	800b883a 	mov	r5,r16
    6a28:	800d883a 	mov	r6,r16
    6a2c:	9809883a 	mov	r4,r19
    6a30:	903fec1e 	bne	r18,zero,69e4 <__pow5mult+0x54>
    6a34:	a005883a 	mov	r2,r20
    6a38:	dfc00517 	ldw	ra,20(sp)
    6a3c:	dd000417 	ldw	r20,16(sp)
    6a40:	dcc00317 	ldw	r19,12(sp)
    6a44:	dc800217 	ldw	r18,8(sp)
    6a48:	dc400117 	ldw	r17,4(sp)
    6a4c:	dc000017 	ldw	r16,0(sp)
    6a50:	dec00604 	addi	sp,sp,24
    6a54:	f800283a 	ret
    6a58:	000666c0 	call	666c <__multiply>
    6a5c:	80800015 	stw	r2,0(r16)
    6a60:	1021883a 	mov	r16,r2
    6a64:	10000015 	stw	zero,0(r2)
    6a68:	003fe106 	br	69f0 <__pow5mult+0x60>
    6a6c:	1085883a 	add	r2,r2,r2
    6a70:	00c00074 	movhi	r3,1
    6a74:	18c09004 	addi	r3,r3,576
    6a78:	1085883a 	add	r2,r2,r2
    6a7c:	10c5883a 	add	r2,r2,r3
    6a80:	11bfff17 	ldw	r6,-4(r2)
    6a84:	000f883a 	mov	r7,zero
    6a88:	00068900 	call	6890 <__multadd>
    6a8c:	1029883a 	mov	r20,r2
    6a90:	003fcb06 	br	69c0 <__pow5mult+0x30>
    6a94:	9809883a 	mov	r4,r19
    6a98:	01409c44 	movi	r5,625
    6a9c:	00068540 	call	6854 <__i2b>
    6aa0:	98801215 	stw	r2,72(r19)
    6aa4:	1021883a 	mov	r16,r2
    6aa8:	10000015 	stw	zero,0(r2)
    6aac:	003fd006 	br	69f0 <__pow5mult+0x60>

00006ab0 <__s2b>:
    6ab0:	defff904 	addi	sp,sp,-28
    6ab4:	dcc00315 	stw	r19,12(sp)
    6ab8:	dc800215 	stw	r18,8(sp)
    6abc:	2827883a 	mov	r19,r5
    6ac0:	2025883a 	mov	r18,r4
    6ac4:	01400244 	movi	r5,9
    6ac8:	39000204 	addi	r4,r7,8
    6acc:	dd000415 	stw	r20,16(sp)
    6ad0:	dc400115 	stw	r17,4(sp)
    6ad4:	dfc00615 	stw	ra,24(sp)
    6ad8:	dd400515 	stw	r21,20(sp)
    6adc:	dc000015 	stw	r16,0(sp)
    6ae0:	3829883a 	mov	r20,r7
    6ae4:	3023883a 	mov	r17,r6
    6ae8:	00096740 	call	9674 <__divsi3>
    6aec:	00c00044 	movi	r3,1
    6af0:	1880350e 	bge	r3,r2,6bc8 <__s2b+0x118>
    6af4:	000b883a 	mov	r5,zero
    6af8:	18c7883a 	add	r3,r3,r3
    6afc:	29400044 	addi	r5,r5,1
    6b00:	18bffd16 	blt	r3,r2,6af8 <__s2b+0x48>
    6b04:	9009883a 	mov	r4,r18
    6b08:	000615c0 	call	615c <_Balloc>
    6b0c:	1011883a 	mov	r8,r2
    6b10:	d8800717 	ldw	r2,28(sp)
    6b14:	00c00044 	movi	r3,1
    6b18:	01800244 	movi	r6,9
    6b1c:	40800515 	stw	r2,20(r8)
    6b20:	40c00415 	stw	r3,16(r8)
    6b24:	3440260e 	bge	r6,r17,6bc0 <__s2b+0x110>
    6b28:	3021883a 	mov	r16,r6
    6b2c:	99ab883a 	add	r21,r19,r6
    6b30:	9c05883a 	add	r2,r19,r16
    6b34:	11c00007 	ldb	r7,0(r2)
    6b38:	400b883a 	mov	r5,r8
    6b3c:	9009883a 	mov	r4,r18
    6b40:	39fff404 	addi	r7,r7,-48
    6b44:	01800284 	movi	r6,10
    6b48:	00068900 	call	6890 <__multadd>
    6b4c:	84000044 	addi	r16,r16,1
    6b50:	1011883a 	mov	r8,r2
    6b54:	8c3ff61e 	bne	r17,r16,6b30 <__s2b+0x80>
    6b58:	ac45883a 	add	r2,r21,r17
    6b5c:	117ffe04 	addi	r5,r2,-8
    6b60:	880d883a 	mov	r6,r17
    6b64:	35000c0e 	bge	r6,r20,6b98 <__s2b+0xe8>
    6b68:	a185c83a 	sub	r2,r20,r6
    6b6c:	2821883a 	mov	r16,r5
    6b70:	28a3883a 	add	r17,r5,r2
    6b74:	81c00007 	ldb	r7,0(r16)
    6b78:	400b883a 	mov	r5,r8
    6b7c:	9009883a 	mov	r4,r18
    6b80:	39fff404 	addi	r7,r7,-48
    6b84:	01800284 	movi	r6,10
    6b88:	00068900 	call	6890 <__multadd>
    6b8c:	84000044 	addi	r16,r16,1
    6b90:	1011883a 	mov	r8,r2
    6b94:	847ff71e 	bne	r16,r17,6b74 <__s2b+0xc4>
    6b98:	4005883a 	mov	r2,r8
    6b9c:	dfc00617 	ldw	ra,24(sp)
    6ba0:	dd400517 	ldw	r21,20(sp)
    6ba4:	dd000417 	ldw	r20,16(sp)
    6ba8:	dcc00317 	ldw	r19,12(sp)
    6bac:	dc800217 	ldw	r18,8(sp)
    6bb0:	dc400117 	ldw	r17,4(sp)
    6bb4:	dc000017 	ldw	r16,0(sp)
    6bb8:	dec00704 	addi	sp,sp,28
    6bbc:	f800283a 	ret
    6bc0:	99400284 	addi	r5,r19,10
    6bc4:	003fe706 	br	6b64 <__s2b+0xb4>
    6bc8:	000b883a 	mov	r5,zero
    6bcc:	003fcd06 	br	6b04 <__s2b+0x54>

00006bd0 <_realloc_r>:
    6bd0:	defff404 	addi	sp,sp,-48
    6bd4:	dd800815 	stw	r22,32(sp)
    6bd8:	dc800415 	stw	r18,16(sp)
    6bdc:	dc400315 	stw	r17,12(sp)
    6be0:	dfc00b15 	stw	ra,44(sp)
    6be4:	df000a15 	stw	fp,40(sp)
    6be8:	ddc00915 	stw	r23,36(sp)
    6bec:	dd400715 	stw	r21,28(sp)
    6bf0:	dd000615 	stw	r20,24(sp)
    6bf4:	dcc00515 	stw	r19,20(sp)
    6bf8:	dc000215 	stw	r16,8(sp)
    6bfc:	2825883a 	mov	r18,r5
    6c00:	3023883a 	mov	r17,r6
    6c04:	202d883a 	mov	r22,r4
    6c08:	2800c926 	beq	r5,zero,6f30 <_realloc_r+0x360>
    6c0c:	000a3f40 	call	a3f4 <__malloc_lock>
    6c10:	943ffe04 	addi	r16,r18,-8
    6c14:	88c002c4 	addi	r3,r17,11
    6c18:	00800584 	movi	r2,22
    6c1c:	82000117 	ldw	r8,4(r16)
    6c20:	10c01b2e 	bgeu	r2,r3,6c90 <_realloc_r+0xc0>
    6c24:	00bffe04 	movi	r2,-8
    6c28:	188e703a 	and	r7,r3,r2
    6c2c:	3839883a 	mov	fp,r7
    6c30:	38001a16 	blt	r7,zero,6c9c <_realloc_r+0xcc>
    6c34:	e4401936 	bltu	fp,r17,6c9c <_realloc_r+0xcc>
    6c38:	013fff04 	movi	r4,-4
    6c3c:	4126703a 	and	r19,r8,r4
    6c40:	99c02616 	blt	r19,r7,6cdc <_realloc_r+0x10c>
    6c44:	802b883a 	mov	r21,r16
    6c48:	9829883a 	mov	r20,r19
    6c4c:	84000204 	addi	r16,r16,8
    6c50:	a80f883a 	mov	r7,r21
    6c54:	a70dc83a 	sub	r6,r20,fp
    6c58:	008003c4 	movi	r2,15
    6c5c:	1180c136 	bltu	r2,r6,6f64 <_realloc_r+0x394>
    6c60:	38800117 	ldw	r2,4(r7)
    6c64:	a549883a 	add	r4,r20,r21
    6c68:	1080004c 	andi	r2,r2,1
    6c6c:	a084b03a 	or	r2,r20,r2
    6c70:	38800115 	stw	r2,4(r7)
    6c74:	20c00117 	ldw	r3,4(r4)
    6c78:	18c00054 	ori	r3,r3,1
    6c7c:	20c00115 	stw	r3,4(r4)
    6c80:	b009883a 	mov	r4,r22
    6c84:	000a4140 	call	a414 <__malloc_unlock>
    6c88:	8023883a 	mov	r17,r16
    6c8c:	00000606 	br	6ca8 <_realloc_r+0xd8>
    6c90:	01c00404 	movi	r7,16
    6c94:	3839883a 	mov	fp,r7
    6c98:	e47fe72e 	bgeu	fp,r17,6c38 <_realloc_r+0x68>
    6c9c:	00800304 	movi	r2,12
    6ca0:	0023883a 	mov	r17,zero
    6ca4:	b0800015 	stw	r2,0(r22)
    6ca8:	8805883a 	mov	r2,r17
    6cac:	dfc00b17 	ldw	ra,44(sp)
    6cb0:	df000a17 	ldw	fp,40(sp)
    6cb4:	ddc00917 	ldw	r23,36(sp)
    6cb8:	dd800817 	ldw	r22,32(sp)
    6cbc:	dd400717 	ldw	r21,28(sp)
    6cc0:	dd000617 	ldw	r20,24(sp)
    6cc4:	dcc00517 	ldw	r19,20(sp)
    6cc8:	dc800417 	ldw	r18,16(sp)
    6ccc:	dc400317 	ldw	r17,12(sp)
    6cd0:	dc000217 	ldw	r16,8(sp)
    6cd4:	dec00c04 	addi	sp,sp,48
    6cd8:	f800283a 	ret
    6cdc:	00800074 	movhi	r2,1
    6ce0:	1081e804 	addi	r2,r2,1952
    6ce4:	12400217 	ldw	r9,8(r2)
    6ce8:	84cd883a 	add	r6,r16,r19
    6cec:	802b883a 	mov	r21,r16
    6cf0:	3240b926 	beq	r6,r9,6fd8 <_realloc_r+0x408>
    6cf4:	31400117 	ldw	r5,4(r6)
    6cf8:	00bfff84 	movi	r2,-2
    6cfc:	2884703a 	and	r2,r5,r2
    6d00:	1185883a 	add	r2,r2,r6
    6d04:	10c00117 	ldw	r3,4(r2)
    6d08:	18c0004c 	andi	r3,r3,1
    6d0c:	1807003a 	cmpeq	r3,r3,zero
    6d10:	1800a326 	beq	r3,zero,6fa0 <_realloc_r+0x3d0>
    6d14:	2908703a 	and	r4,r5,r4
    6d18:	9929883a 	add	r20,r19,r4
    6d1c:	a1c0a30e 	bge	r20,r7,6fac <_realloc_r+0x3dc>
    6d20:	4080004c 	andi	r2,r8,1
    6d24:	1000551e 	bne	r2,zero,6e7c <_realloc_r+0x2ac>
    6d28:	80800017 	ldw	r2,0(r16)
    6d2c:	80afc83a 	sub	r23,r16,r2
    6d30:	b8c00117 	ldw	r3,4(r23)
    6d34:	00bfff04 	movi	r2,-4
    6d38:	1884703a 	and	r2,r3,r2
    6d3c:	30002e26 	beq	r6,zero,6df8 <_realloc_r+0x228>
    6d40:	3240b926 	beq	r6,r9,7028 <_realloc_r+0x458>
    6d44:	98a9883a 	add	r20,r19,r2
    6d48:	2509883a 	add	r4,r4,r20
    6d4c:	d9000015 	stw	r4,0(sp)
    6d50:	21c02a16 	blt	r4,r7,6dfc <_realloc_r+0x22c>
    6d54:	30800317 	ldw	r2,12(r6)
    6d58:	30c00217 	ldw	r3,8(r6)
    6d5c:	01400904 	movi	r5,36
    6d60:	99bfff04 	addi	r6,r19,-4
    6d64:	18800315 	stw	r2,12(r3)
    6d68:	10c00215 	stw	r3,8(r2)
    6d6c:	b9000317 	ldw	r4,12(r23)
    6d70:	b8800217 	ldw	r2,8(r23)
    6d74:	b82b883a 	mov	r21,r23
    6d78:	bc000204 	addi	r16,r23,8
    6d7c:	20800215 	stw	r2,8(r4)
    6d80:	11000315 	stw	r4,12(r2)
    6d84:	2980e436 	bltu	r5,r6,7118 <_realloc_r+0x548>
    6d88:	008004c4 	movi	r2,19
    6d8c:	9009883a 	mov	r4,r18
    6d90:	8011883a 	mov	r8,r16
    6d94:	11800f2e 	bgeu	r2,r6,6dd4 <_realloc_r+0x204>
    6d98:	90800017 	ldw	r2,0(r18)
    6d9c:	ba000404 	addi	r8,r23,16
    6da0:	91000204 	addi	r4,r18,8
    6da4:	b8800215 	stw	r2,8(r23)
    6da8:	90c00117 	ldw	r3,4(r18)
    6dac:	008006c4 	movi	r2,27
    6db0:	b8c00315 	stw	r3,12(r23)
    6db4:	1180072e 	bgeu	r2,r6,6dd4 <_realloc_r+0x204>
    6db8:	90c00217 	ldw	r3,8(r18)
    6dbc:	ba000604 	addi	r8,r23,24
    6dc0:	91000404 	addi	r4,r18,16
    6dc4:	b8c00415 	stw	r3,16(r23)
    6dc8:	90800317 	ldw	r2,12(r18)
    6dcc:	b8800515 	stw	r2,20(r23)
    6dd0:	3140e726 	beq	r6,r5,7170 <_realloc_r+0x5a0>
    6dd4:	20800017 	ldw	r2,0(r4)
    6dd8:	dd000017 	ldw	r20,0(sp)
    6ddc:	b80f883a 	mov	r7,r23
    6de0:	40800015 	stw	r2,0(r8)
    6de4:	20c00117 	ldw	r3,4(r4)
    6de8:	40c00115 	stw	r3,4(r8)
    6dec:	20800217 	ldw	r2,8(r4)
    6df0:	40800215 	stw	r2,8(r8)
    6df4:	003f9706 	br	6c54 <_realloc_r+0x84>
    6df8:	98a9883a 	add	r20,r19,r2
    6dfc:	a1c01f16 	blt	r20,r7,6e7c <_realloc_r+0x2ac>
    6e00:	b8c00317 	ldw	r3,12(r23)
    6e04:	b8800217 	ldw	r2,8(r23)
    6e08:	99bfff04 	addi	r6,r19,-4
    6e0c:	01400904 	movi	r5,36
    6e10:	b82b883a 	mov	r21,r23
    6e14:	18800215 	stw	r2,8(r3)
    6e18:	10c00315 	stw	r3,12(r2)
    6e1c:	bc000204 	addi	r16,r23,8
    6e20:	2980c336 	bltu	r5,r6,7130 <_realloc_r+0x560>
    6e24:	008004c4 	movi	r2,19
    6e28:	9009883a 	mov	r4,r18
    6e2c:	8011883a 	mov	r8,r16
    6e30:	11800f2e 	bgeu	r2,r6,6e70 <_realloc_r+0x2a0>
    6e34:	90800017 	ldw	r2,0(r18)
    6e38:	ba000404 	addi	r8,r23,16
    6e3c:	91000204 	addi	r4,r18,8
    6e40:	b8800215 	stw	r2,8(r23)
    6e44:	90c00117 	ldw	r3,4(r18)
    6e48:	008006c4 	movi	r2,27
    6e4c:	b8c00315 	stw	r3,12(r23)
    6e50:	1180072e 	bgeu	r2,r6,6e70 <_realloc_r+0x2a0>
    6e54:	90c00217 	ldw	r3,8(r18)
    6e58:	ba000604 	addi	r8,r23,24
    6e5c:	91000404 	addi	r4,r18,16
    6e60:	b8c00415 	stw	r3,16(r23)
    6e64:	90800317 	ldw	r2,12(r18)
    6e68:	b8800515 	stw	r2,20(r23)
    6e6c:	3140c726 	beq	r6,r5,718c <_realloc_r+0x5bc>
    6e70:	20800017 	ldw	r2,0(r4)
    6e74:	b80f883a 	mov	r7,r23
    6e78:	003fd906 	br	6de0 <_realloc_r+0x210>
    6e7c:	880b883a 	mov	r5,r17
    6e80:	b009883a 	mov	r4,r22
    6e84:	00051a00 	call	51a0 <_malloc_r>
    6e88:	1023883a 	mov	r17,r2
    6e8c:	10002526 	beq	r2,zero,6f24 <_realloc_r+0x354>
    6e90:	80800117 	ldw	r2,4(r16)
    6e94:	00ffff84 	movi	r3,-2
    6e98:	893ffe04 	addi	r4,r17,-8
    6e9c:	10c4703a 	and	r2,r2,r3
    6ea0:	8085883a 	add	r2,r16,r2
    6ea4:	20809526 	beq	r4,r2,70fc <_realloc_r+0x52c>
    6ea8:	99bfff04 	addi	r6,r19,-4
    6eac:	01c00904 	movi	r7,36
    6eb0:	39804536 	bltu	r7,r6,6fc8 <_realloc_r+0x3f8>
    6eb4:	008004c4 	movi	r2,19
    6eb8:	9009883a 	mov	r4,r18
    6ebc:	880b883a 	mov	r5,r17
    6ec0:	11800f2e 	bgeu	r2,r6,6f00 <_realloc_r+0x330>
    6ec4:	90800017 	ldw	r2,0(r18)
    6ec8:	89400204 	addi	r5,r17,8
    6ecc:	91000204 	addi	r4,r18,8
    6ed0:	88800015 	stw	r2,0(r17)
    6ed4:	90c00117 	ldw	r3,4(r18)
    6ed8:	008006c4 	movi	r2,27
    6edc:	88c00115 	stw	r3,4(r17)
    6ee0:	1180072e 	bgeu	r2,r6,6f00 <_realloc_r+0x330>
    6ee4:	90c00217 	ldw	r3,8(r18)
    6ee8:	89400404 	addi	r5,r17,16
    6eec:	91000404 	addi	r4,r18,16
    6ef0:	88c00215 	stw	r3,8(r17)
    6ef4:	90800317 	ldw	r2,12(r18)
    6ef8:	88800315 	stw	r2,12(r17)
    6efc:	31c09126 	beq	r6,r7,7144 <_realloc_r+0x574>
    6f00:	20800017 	ldw	r2,0(r4)
    6f04:	28800015 	stw	r2,0(r5)
    6f08:	20c00117 	ldw	r3,4(r4)
    6f0c:	28c00115 	stw	r3,4(r5)
    6f10:	20800217 	ldw	r2,8(r4)
    6f14:	28800215 	stw	r2,8(r5)
    6f18:	900b883a 	mov	r5,r18
    6f1c:	b009883a 	mov	r4,r22
    6f20:	00046180 	call	4618 <_free_r>
    6f24:	b009883a 	mov	r4,r22
    6f28:	000a4140 	call	a414 <__malloc_unlock>
    6f2c:	003f5e06 	br	6ca8 <_realloc_r+0xd8>
    6f30:	300b883a 	mov	r5,r6
    6f34:	dfc00b17 	ldw	ra,44(sp)
    6f38:	df000a17 	ldw	fp,40(sp)
    6f3c:	ddc00917 	ldw	r23,36(sp)
    6f40:	dd800817 	ldw	r22,32(sp)
    6f44:	dd400717 	ldw	r21,28(sp)
    6f48:	dd000617 	ldw	r20,24(sp)
    6f4c:	dcc00517 	ldw	r19,20(sp)
    6f50:	dc800417 	ldw	r18,16(sp)
    6f54:	dc400317 	ldw	r17,12(sp)
    6f58:	dc000217 	ldw	r16,8(sp)
    6f5c:	dec00c04 	addi	sp,sp,48
    6f60:	00051a01 	jmpi	51a0 <_malloc_r>
    6f64:	38800117 	ldw	r2,4(r7)
    6f68:	e54b883a 	add	r5,fp,r21
    6f6c:	31000054 	ori	r4,r6,1
    6f70:	1080004c 	andi	r2,r2,1
    6f74:	1704b03a 	or	r2,r2,fp
    6f78:	38800115 	stw	r2,4(r7)
    6f7c:	29000115 	stw	r4,4(r5)
    6f80:	2987883a 	add	r3,r5,r6
    6f84:	18800117 	ldw	r2,4(r3)
    6f88:	29400204 	addi	r5,r5,8
    6f8c:	b009883a 	mov	r4,r22
    6f90:	10800054 	ori	r2,r2,1
    6f94:	18800115 	stw	r2,4(r3)
    6f98:	00046180 	call	4618 <_free_r>
    6f9c:	003f3806 	br	6c80 <_realloc_r+0xb0>
    6fa0:	000d883a 	mov	r6,zero
    6fa4:	0009883a 	mov	r4,zero
    6fa8:	003f5d06 	br	6d20 <_realloc_r+0x150>
    6fac:	30c00217 	ldw	r3,8(r6)
    6fb0:	30800317 	ldw	r2,12(r6)
    6fb4:	800f883a 	mov	r7,r16
    6fb8:	84000204 	addi	r16,r16,8
    6fbc:	10c00215 	stw	r3,8(r2)
    6fc0:	18800315 	stw	r2,12(r3)
    6fc4:	003f2306 	br	6c54 <_realloc_r+0x84>
    6fc8:	8809883a 	mov	r4,r17
    6fcc:	900b883a 	mov	r5,r18
    6fd0:	0005a640 	call	5a64 <memmove>
    6fd4:	003fd006 	br	6f18 <_realloc_r+0x348>
    6fd8:	30800117 	ldw	r2,4(r6)
    6fdc:	e0c00404 	addi	r3,fp,16
    6fe0:	1108703a 	and	r4,r2,r4
    6fe4:	9905883a 	add	r2,r19,r4
    6fe8:	10ff4d16 	blt	r2,r3,6d20 <_realloc_r+0x150>
    6fec:	1705c83a 	sub	r2,r2,fp
    6ff0:	870b883a 	add	r5,r16,fp
    6ff4:	10800054 	ori	r2,r2,1
    6ff8:	28800115 	stw	r2,4(r5)
    6ffc:	80c00117 	ldw	r3,4(r16)
    7000:	00800074 	movhi	r2,1
    7004:	1081e804 	addi	r2,r2,1952
    7008:	b009883a 	mov	r4,r22
    700c:	18c0004c 	andi	r3,r3,1
    7010:	e0c6b03a 	or	r3,fp,r3
    7014:	11400215 	stw	r5,8(r2)
    7018:	80c00115 	stw	r3,4(r16)
    701c:	000a4140 	call	a414 <__malloc_unlock>
    7020:	84400204 	addi	r17,r16,8
    7024:	003f2006 	br	6ca8 <_realloc_r+0xd8>
    7028:	98a9883a 	add	r20,r19,r2
    702c:	2509883a 	add	r4,r4,r20
    7030:	e0800404 	addi	r2,fp,16
    7034:	d9000115 	stw	r4,4(sp)
    7038:	20bf7016 	blt	r4,r2,6dfc <_realloc_r+0x22c>
    703c:	b8c00317 	ldw	r3,12(r23)
    7040:	b8800217 	ldw	r2,8(r23)
    7044:	99bfff04 	addi	r6,r19,-4
    7048:	01400904 	movi	r5,36
    704c:	18800215 	stw	r2,8(r3)
    7050:	10c00315 	stw	r3,12(r2)
    7054:	bc400204 	addi	r17,r23,8
    7058:	29804136 	bltu	r5,r6,7160 <_realloc_r+0x590>
    705c:	008004c4 	movi	r2,19
    7060:	9009883a 	mov	r4,r18
    7064:	880f883a 	mov	r7,r17
    7068:	11800f2e 	bgeu	r2,r6,70a8 <_realloc_r+0x4d8>
    706c:	90800017 	ldw	r2,0(r18)
    7070:	b9c00404 	addi	r7,r23,16
    7074:	91000204 	addi	r4,r18,8
    7078:	b8800215 	stw	r2,8(r23)
    707c:	90c00117 	ldw	r3,4(r18)
    7080:	008006c4 	movi	r2,27
    7084:	b8c00315 	stw	r3,12(r23)
    7088:	1180072e 	bgeu	r2,r6,70a8 <_realloc_r+0x4d8>
    708c:	90c00217 	ldw	r3,8(r18)
    7090:	b9c00604 	addi	r7,r23,24
    7094:	91000404 	addi	r4,r18,16
    7098:	b8c00415 	stw	r3,16(r23)
    709c:	90800317 	ldw	r2,12(r18)
    70a0:	b8800515 	stw	r2,20(r23)
    70a4:	31404026 	beq	r6,r5,71a8 <_realloc_r+0x5d8>
    70a8:	20800017 	ldw	r2,0(r4)
    70ac:	38800015 	stw	r2,0(r7)
    70b0:	20c00117 	ldw	r3,4(r4)
    70b4:	38c00115 	stw	r3,4(r7)
    70b8:	20800217 	ldw	r2,8(r4)
    70bc:	38800215 	stw	r2,8(r7)
    70c0:	d8c00117 	ldw	r3,4(sp)
    70c4:	bf0b883a 	add	r5,r23,fp
    70c8:	b009883a 	mov	r4,r22
    70cc:	1f05c83a 	sub	r2,r3,fp
    70d0:	10800054 	ori	r2,r2,1
    70d4:	28800115 	stw	r2,4(r5)
    70d8:	b8c00117 	ldw	r3,4(r23)
    70dc:	00800074 	movhi	r2,1
    70e0:	1081e804 	addi	r2,r2,1952
    70e4:	11400215 	stw	r5,8(r2)
    70e8:	18c0004c 	andi	r3,r3,1
    70ec:	e0c6b03a 	or	r3,fp,r3
    70f0:	b8c00115 	stw	r3,4(r23)
    70f4:	000a4140 	call	a414 <__malloc_unlock>
    70f8:	003eeb06 	br	6ca8 <_realloc_r+0xd8>
    70fc:	20800117 	ldw	r2,4(r4)
    7100:	00ffff04 	movi	r3,-4
    7104:	800f883a 	mov	r7,r16
    7108:	10c4703a 	and	r2,r2,r3
    710c:	98a9883a 	add	r20,r19,r2
    7110:	84000204 	addi	r16,r16,8
    7114:	003ecf06 	br	6c54 <_realloc_r+0x84>
    7118:	900b883a 	mov	r5,r18
    711c:	8009883a 	mov	r4,r16
    7120:	0005a640 	call	5a64 <memmove>
    7124:	dd000017 	ldw	r20,0(sp)
    7128:	b80f883a 	mov	r7,r23
    712c:	003ec906 	br	6c54 <_realloc_r+0x84>
    7130:	900b883a 	mov	r5,r18
    7134:	8009883a 	mov	r4,r16
    7138:	0005a640 	call	5a64 <memmove>
    713c:	b80f883a 	mov	r7,r23
    7140:	003ec406 	br	6c54 <_realloc_r+0x84>
    7144:	90c00417 	ldw	r3,16(r18)
    7148:	89400604 	addi	r5,r17,24
    714c:	91000604 	addi	r4,r18,24
    7150:	88c00415 	stw	r3,16(r17)
    7154:	90800517 	ldw	r2,20(r18)
    7158:	88800515 	stw	r2,20(r17)
    715c:	003f6806 	br	6f00 <_realloc_r+0x330>
    7160:	900b883a 	mov	r5,r18
    7164:	8809883a 	mov	r4,r17
    7168:	0005a640 	call	5a64 <memmove>
    716c:	003fd406 	br	70c0 <_realloc_r+0x4f0>
    7170:	90c00417 	ldw	r3,16(r18)
    7174:	91000604 	addi	r4,r18,24
    7178:	ba000804 	addi	r8,r23,32
    717c:	b8c00615 	stw	r3,24(r23)
    7180:	90800517 	ldw	r2,20(r18)
    7184:	b8800715 	stw	r2,28(r23)
    7188:	003f1206 	br	6dd4 <_realloc_r+0x204>
    718c:	90c00417 	ldw	r3,16(r18)
    7190:	91000604 	addi	r4,r18,24
    7194:	ba000804 	addi	r8,r23,32
    7198:	b8c00615 	stw	r3,24(r23)
    719c:	90800517 	ldw	r2,20(r18)
    71a0:	b8800715 	stw	r2,28(r23)
    71a4:	003f3206 	br	6e70 <_realloc_r+0x2a0>
    71a8:	90c00417 	ldw	r3,16(r18)
    71ac:	91000604 	addi	r4,r18,24
    71b0:	b9c00804 	addi	r7,r23,32
    71b4:	b8c00615 	stw	r3,24(r23)
    71b8:	90800517 	ldw	r2,20(r18)
    71bc:	b8800715 	stw	r2,28(r23)
    71c0:	003fb906 	br	70a8 <_realloc_r+0x4d8>

000071c4 <__isinfd>:
    71c4:	200d883a 	mov	r6,r4
    71c8:	0109c83a 	sub	r4,zero,r4
    71cc:	2188b03a 	or	r4,r4,r6
    71d0:	2008d7fa 	srli	r4,r4,31
    71d4:	00a00034 	movhi	r2,32768
    71d8:	10bfffc4 	addi	r2,r2,-1
    71dc:	1144703a 	and	r2,r2,r5
    71e0:	2088b03a 	or	r4,r4,r2
    71e4:	009ffc34 	movhi	r2,32752
    71e8:	1105c83a 	sub	r2,r2,r4
    71ec:	0087c83a 	sub	r3,zero,r2
    71f0:	10c4b03a 	or	r2,r2,r3
    71f4:	1004d7fa 	srli	r2,r2,31
    71f8:	00c00044 	movi	r3,1
    71fc:	1885c83a 	sub	r2,r3,r2
    7200:	f800283a 	ret

00007204 <__isnand>:
    7204:	200d883a 	mov	r6,r4
    7208:	0109c83a 	sub	r4,zero,r4
    720c:	2188b03a 	or	r4,r4,r6
    7210:	2008d7fa 	srli	r4,r4,31
    7214:	00a00034 	movhi	r2,32768
    7218:	10bfffc4 	addi	r2,r2,-1
    721c:	1144703a 	and	r2,r2,r5
    7220:	2088b03a 	or	r4,r4,r2
    7224:	009ffc34 	movhi	r2,32752
    7228:	1105c83a 	sub	r2,r2,r4
    722c:	1004d7fa 	srli	r2,r2,31
    7230:	f800283a 	ret

00007234 <_sbrk_r>:
    7234:	defffd04 	addi	sp,sp,-12
    7238:	dc000015 	stw	r16,0(sp)
    723c:	04000074 	movhi	r16,1
    7240:	84078704 	addi	r16,r16,7708
    7244:	dc400115 	stw	r17,4(sp)
    7248:	80000015 	stw	zero,0(r16)
    724c:	2023883a 	mov	r17,r4
    7250:	2809883a 	mov	r4,r5
    7254:	dfc00215 	stw	ra,8(sp)
    7258:	000a6140 	call	a614 <sbrk>
    725c:	1007883a 	mov	r3,r2
    7260:	00bfffc4 	movi	r2,-1
    7264:	18800626 	beq	r3,r2,7280 <_sbrk_r+0x4c>
    7268:	1805883a 	mov	r2,r3
    726c:	dfc00217 	ldw	ra,8(sp)
    7270:	dc400117 	ldw	r17,4(sp)
    7274:	dc000017 	ldw	r16,0(sp)
    7278:	dec00304 	addi	sp,sp,12
    727c:	f800283a 	ret
    7280:	80800017 	ldw	r2,0(r16)
    7284:	103ff826 	beq	r2,zero,7268 <_sbrk_r+0x34>
    7288:	88800015 	stw	r2,0(r17)
    728c:	1805883a 	mov	r2,r3
    7290:	dfc00217 	ldw	ra,8(sp)
    7294:	dc400117 	ldw	r17,4(sp)
    7298:	dc000017 	ldw	r16,0(sp)
    729c:	dec00304 	addi	sp,sp,12
    72a0:	f800283a 	ret

000072a4 <__sclose>:
    72a4:	2940038f 	ldh	r5,14(r5)
    72a8:	00075d81 	jmpi	75d8 <_close_r>

000072ac <__sseek>:
    72ac:	defffe04 	addi	sp,sp,-8
    72b0:	dc000015 	stw	r16,0(sp)
    72b4:	2821883a 	mov	r16,r5
    72b8:	2940038f 	ldh	r5,14(r5)
    72bc:	dfc00115 	stw	ra,4(sp)
    72c0:	00078500 	call	7850 <_lseek_r>
    72c4:	1007883a 	mov	r3,r2
    72c8:	00bfffc4 	movi	r2,-1
    72cc:	18800926 	beq	r3,r2,72f4 <__sseek+0x48>
    72d0:	8080030b 	ldhu	r2,12(r16)
    72d4:	80c01415 	stw	r3,80(r16)
    72d8:	10840014 	ori	r2,r2,4096
    72dc:	8080030d 	sth	r2,12(r16)
    72e0:	1805883a 	mov	r2,r3
    72e4:	dfc00117 	ldw	ra,4(sp)
    72e8:	dc000017 	ldw	r16,0(sp)
    72ec:	dec00204 	addi	sp,sp,8
    72f0:	f800283a 	ret
    72f4:	8080030b 	ldhu	r2,12(r16)
    72f8:	10bbffcc 	andi	r2,r2,61439
    72fc:	8080030d 	sth	r2,12(r16)
    7300:	1805883a 	mov	r2,r3
    7304:	dfc00117 	ldw	ra,4(sp)
    7308:	dc000017 	ldw	r16,0(sp)
    730c:	dec00204 	addi	sp,sp,8
    7310:	f800283a 	ret

00007314 <__swrite>:
    7314:	2880030b 	ldhu	r2,12(r5)
    7318:	defffb04 	addi	sp,sp,-20
    731c:	dcc00315 	stw	r19,12(sp)
    7320:	1080400c 	andi	r2,r2,256
    7324:	dc800215 	stw	r18,8(sp)
    7328:	dc400115 	stw	r17,4(sp)
    732c:	dc000015 	stw	r16,0(sp)
    7330:	3027883a 	mov	r19,r6
    7334:	3825883a 	mov	r18,r7
    7338:	dfc00415 	stw	ra,16(sp)
    733c:	2821883a 	mov	r16,r5
    7340:	000d883a 	mov	r6,zero
    7344:	01c00084 	movi	r7,2
    7348:	2023883a 	mov	r17,r4
    734c:	10000226 	beq	r2,zero,7358 <__swrite+0x44>
    7350:	2940038f 	ldh	r5,14(r5)
    7354:	00078500 	call	7850 <_lseek_r>
    7358:	8080030b 	ldhu	r2,12(r16)
    735c:	8140038f 	ldh	r5,14(r16)
    7360:	8809883a 	mov	r4,r17
    7364:	10bbffcc 	andi	r2,r2,61439
    7368:	980d883a 	mov	r6,r19
    736c:	900f883a 	mov	r7,r18
    7370:	8080030d 	sth	r2,12(r16)
    7374:	dfc00417 	ldw	ra,16(sp)
    7378:	dcc00317 	ldw	r19,12(sp)
    737c:	dc800217 	ldw	r18,8(sp)
    7380:	dc400117 	ldw	r17,4(sp)
    7384:	dc000017 	ldw	r16,0(sp)
    7388:	dec00504 	addi	sp,sp,20
    738c:	00074ac1 	jmpi	74ac <_write_r>

00007390 <__sread>:
    7390:	defffe04 	addi	sp,sp,-8
    7394:	dc000015 	stw	r16,0(sp)
    7398:	2821883a 	mov	r16,r5
    739c:	2940038f 	ldh	r5,14(r5)
    73a0:	dfc00115 	stw	ra,4(sp)
    73a4:	00078c80 	call	78c8 <_read_r>
    73a8:	1007883a 	mov	r3,r2
    73ac:	10000816 	blt	r2,zero,73d0 <__sread+0x40>
    73b0:	80801417 	ldw	r2,80(r16)
    73b4:	10c5883a 	add	r2,r2,r3
    73b8:	80801415 	stw	r2,80(r16)
    73bc:	1805883a 	mov	r2,r3
    73c0:	dfc00117 	ldw	ra,4(sp)
    73c4:	dc000017 	ldw	r16,0(sp)
    73c8:	dec00204 	addi	sp,sp,8
    73cc:	f800283a 	ret
    73d0:	8080030b 	ldhu	r2,12(r16)
    73d4:	10bbffcc 	andi	r2,r2,61439
    73d8:	8080030d 	sth	r2,12(r16)
    73dc:	1805883a 	mov	r2,r3
    73e0:	dfc00117 	ldw	ra,4(sp)
    73e4:	dc000017 	ldw	r16,0(sp)
    73e8:	dec00204 	addi	sp,sp,8
    73ec:	f800283a 	ret

000073f0 <strcmp>:
    73f0:	2144b03a 	or	r2,r4,r5
    73f4:	108000cc 	andi	r2,r2,3
    73f8:	10001d1e 	bne	r2,zero,7470 <strcmp+0x80>
    73fc:	200f883a 	mov	r7,r4
    7400:	28800017 	ldw	r2,0(r5)
    7404:	21000017 	ldw	r4,0(r4)
    7408:	280d883a 	mov	r6,r5
    740c:	2080161e 	bne	r4,r2,7468 <strcmp+0x78>
    7410:	023fbff4 	movhi	r8,65279
    7414:	423fbfc4 	addi	r8,r8,-257
    7418:	2207883a 	add	r3,r4,r8
    741c:	01602074 	movhi	r5,32897
    7420:	29602004 	addi	r5,r5,-32640
    7424:	1946703a 	and	r3,r3,r5
    7428:	0104303a 	nor	r2,zero,r4
    742c:	10c4703a 	and	r2,r2,r3
    7430:	10001c1e 	bne	r2,zero,74a4 <strcmp+0xb4>
    7434:	4013883a 	mov	r9,r8
    7438:	2811883a 	mov	r8,r5
    743c:	00000106 	br	7444 <strcmp+0x54>
    7440:	1800181e 	bne	r3,zero,74a4 <strcmp+0xb4>
    7444:	39c00104 	addi	r7,r7,4
    7448:	39000017 	ldw	r4,0(r7)
    744c:	31800104 	addi	r6,r6,4
    7450:	31400017 	ldw	r5,0(r6)
    7454:	2245883a 	add	r2,r4,r9
    7458:	1204703a 	and	r2,r2,r8
    745c:	0106303a 	nor	r3,zero,r4
    7460:	1886703a 	and	r3,r3,r2
    7464:	217ff626 	beq	r4,r5,7440 <strcmp+0x50>
    7468:	3809883a 	mov	r4,r7
    746c:	300b883a 	mov	r5,r6
    7470:	20c00007 	ldb	r3,0(r4)
    7474:	1800051e 	bne	r3,zero,748c <strcmp+0x9c>
    7478:	00000606 	br	7494 <strcmp+0xa4>
    747c:	21000044 	addi	r4,r4,1
    7480:	20c00007 	ldb	r3,0(r4)
    7484:	29400044 	addi	r5,r5,1
    7488:	18000226 	beq	r3,zero,7494 <strcmp+0xa4>
    748c:	28800007 	ldb	r2,0(r5)
    7490:	18bffa26 	beq	r3,r2,747c <strcmp+0x8c>
    7494:	20c00003 	ldbu	r3,0(r4)
    7498:	28800003 	ldbu	r2,0(r5)
    749c:	1885c83a 	sub	r2,r3,r2
    74a0:	f800283a 	ret
    74a4:	0005883a 	mov	r2,zero
    74a8:	f800283a 	ret

000074ac <_write_r>:
    74ac:	defffd04 	addi	sp,sp,-12
    74b0:	dc000015 	stw	r16,0(sp)
    74b4:	04000074 	movhi	r16,1
    74b8:	84078704 	addi	r16,r16,7708
    74bc:	dc400115 	stw	r17,4(sp)
    74c0:	80000015 	stw	zero,0(r16)
    74c4:	2023883a 	mov	r17,r4
    74c8:	2809883a 	mov	r4,r5
    74cc:	300b883a 	mov	r5,r6
    74d0:	380d883a 	mov	r6,r7
    74d4:	dfc00215 	stw	ra,8(sp)
    74d8:	000a6d00 	call	a6d0 <write>
    74dc:	1007883a 	mov	r3,r2
    74e0:	00bfffc4 	movi	r2,-1
    74e4:	18800626 	beq	r3,r2,7500 <_write_r+0x54>
    74e8:	1805883a 	mov	r2,r3
    74ec:	dfc00217 	ldw	ra,8(sp)
    74f0:	dc400117 	ldw	r17,4(sp)
    74f4:	dc000017 	ldw	r16,0(sp)
    74f8:	dec00304 	addi	sp,sp,12
    74fc:	f800283a 	ret
    7500:	80800017 	ldw	r2,0(r16)
    7504:	103ff826 	beq	r2,zero,74e8 <_write_r+0x3c>
    7508:	88800015 	stw	r2,0(r17)
    750c:	1805883a 	mov	r2,r3
    7510:	dfc00217 	ldw	ra,8(sp)
    7514:	dc400117 	ldw	r17,4(sp)
    7518:	dc000017 	ldw	r16,0(sp)
    751c:	dec00304 	addi	sp,sp,12
    7520:	f800283a 	ret

00007524 <_calloc_r>:
    7524:	298b383a 	mul	r5,r5,r6
    7528:	defffe04 	addi	sp,sp,-8
    752c:	dc000015 	stw	r16,0(sp)
    7530:	dfc00115 	stw	ra,4(sp)
    7534:	00051a00 	call	51a0 <_malloc_r>
    7538:	1021883a 	mov	r16,r2
    753c:	01c00904 	movi	r7,36
    7540:	10000d26 	beq	r2,zero,7578 <_calloc_r+0x54>
    7544:	10ffff17 	ldw	r3,-4(r2)
    7548:	1009883a 	mov	r4,r2
    754c:	00bfff04 	movi	r2,-4
    7550:	1886703a 	and	r3,r3,r2
    7554:	1887883a 	add	r3,r3,r2
    7558:	180d883a 	mov	r6,r3
    755c:	000b883a 	mov	r5,zero
    7560:	38c01736 	bltu	r7,r3,75c0 <_calloc_r+0x9c>
    7564:	008004c4 	movi	r2,19
    7568:	10c00836 	bltu	r2,r3,758c <_calloc_r+0x68>
    756c:	20000215 	stw	zero,8(r4)
    7570:	20000015 	stw	zero,0(r4)
    7574:	20000115 	stw	zero,4(r4)
    7578:	8005883a 	mov	r2,r16
    757c:	dfc00117 	ldw	ra,4(sp)
    7580:	dc000017 	ldw	r16,0(sp)
    7584:	dec00204 	addi	sp,sp,8
    7588:	f800283a 	ret
    758c:	008006c4 	movi	r2,27
    7590:	80000015 	stw	zero,0(r16)
    7594:	80000115 	stw	zero,4(r16)
    7598:	81000204 	addi	r4,r16,8
    759c:	10fff32e 	bgeu	r2,r3,756c <_calloc_r+0x48>
    75a0:	80000215 	stw	zero,8(r16)
    75a4:	80000315 	stw	zero,12(r16)
    75a8:	81000404 	addi	r4,r16,16
    75ac:	19ffef1e 	bne	r3,r7,756c <_calloc_r+0x48>
    75b0:	81000604 	addi	r4,r16,24
    75b4:	80000415 	stw	zero,16(r16)
    75b8:	80000515 	stw	zero,20(r16)
    75bc:	003feb06 	br	756c <_calloc_r+0x48>
    75c0:	0005b440 	call	5b44 <memset>
    75c4:	8005883a 	mov	r2,r16
    75c8:	dfc00117 	ldw	ra,4(sp)
    75cc:	dc000017 	ldw	r16,0(sp)
    75d0:	dec00204 	addi	sp,sp,8
    75d4:	f800283a 	ret

000075d8 <_close_r>:
    75d8:	defffd04 	addi	sp,sp,-12
    75dc:	dc000015 	stw	r16,0(sp)
    75e0:	04000074 	movhi	r16,1
    75e4:	84078704 	addi	r16,r16,7708
    75e8:	dc400115 	stw	r17,4(sp)
    75ec:	80000015 	stw	zero,0(r16)
    75f0:	2023883a 	mov	r17,r4
    75f4:	2809883a 	mov	r4,r5
    75f8:	dfc00215 	stw	ra,8(sp)
    75fc:	0009d700 	call	9d70 <close>
    7600:	1007883a 	mov	r3,r2
    7604:	00bfffc4 	movi	r2,-1
    7608:	18800626 	beq	r3,r2,7624 <_close_r+0x4c>
    760c:	1805883a 	mov	r2,r3
    7610:	dfc00217 	ldw	ra,8(sp)
    7614:	dc400117 	ldw	r17,4(sp)
    7618:	dc000017 	ldw	r16,0(sp)
    761c:	dec00304 	addi	sp,sp,12
    7620:	f800283a 	ret
    7624:	80800017 	ldw	r2,0(r16)
    7628:	103ff826 	beq	r2,zero,760c <_close_r+0x34>
    762c:	88800015 	stw	r2,0(r17)
    7630:	1805883a 	mov	r2,r3
    7634:	dfc00217 	ldw	ra,8(sp)
    7638:	dc400117 	ldw	r17,4(sp)
    763c:	dc000017 	ldw	r16,0(sp)
    7640:	dec00304 	addi	sp,sp,12
    7644:	f800283a 	ret

00007648 <_fclose_r>:
    7648:	defffc04 	addi	sp,sp,-16
    764c:	dc400115 	stw	r17,4(sp)
    7650:	dc000015 	stw	r16,0(sp)
    7654:	dfc00315 	stw	ra,12(sp)
    7658:	dc800215 	stw	r18,8(sp)
    765c:	2821883a 	mov	r16,r5
    7660:	2023883a 	mov	r17,r4
    7664:	28002926 	beq	r5,zero,770c <_fclose_r+0xc4>
    7668:	00042840 	call	4284 <__sfp_lock_acquire>
    766c:	88000226 	beq	r17,zero,7678 <_fclose_r+0x30>
    7670:	88800e17 	ldw	r2,56(r17)
    7674:	10002d26 	beq	r2,zero,772c <_fclose_r+0xe4>
    7678:	8080030f 	ldh	r2,12(r16)
    767c:	10002226 	beq	r2,zero,7708 <_fclose_r+0xc0>
    7680:	8809883a 	mov	r4,r17
    7684:	800b883a 	mov	r5,r16
    7688:	0003ffc0 	call	3ffc <_fflush_r>
    768c:	1025883a 	mov	r18,r2
    7690:	80800b17 	ldw	r2,44(r16)
    7694:	10000426 	beq	r2,zero,76a8 <_fclose_r+0x60>
    7698:	81400717 	ldw	r5,28(r16)
    769c:	8809883a 	mov	r4,r17
    76a0:	103ee83a 	callr	r2
    76a4:	10002a16 	blt	r2,zero,7750 <_fclose_r+0x108>
    76a8:	8080030b 	ldhu	r2,12(r16)
    76ac:	1080200c 	andi	r2,r2,128
    76b0:	1000231e 	bne	r2,zero,7740 <_fclose_r+0xf8>
    76b4:	81400c17 	ldw	r5,48(r16)
    76b8:	28000526 	beq	r5,zero,76d0 <_fclose_r+0x88>
    76bc:	80801004 	addi	r2,r16,64
    76c0:	28800226 	beq	r5,r2,76cc <_fclose_r+0x84>
    76c4:	8809883a 	mov	r4,r17
    76c8:	00046180 	call	4618 <_free_r>
    76cc:	80000c15 	stw	zero,48(r16)
    76d0:	81401117 	ldw	r5,68(r16)
    76d4:	28000326 	beq	r5,zero,76e4 <_fclose_r+0x9c>
    76d8:	8809883a 	mov	r4,r17
    76dc:	00046180 	call	4618 <_free_r>
    76e0:	80001115 	stw	zero,68(r16)
    76e4:	8000030d 	sth	zero,12(r16)
    76e8:	00042880 	call	4288 <__sfp_lock_release>
    76ec:	9005883a 	mov	r2,r18
    76f0:	dfc00317 	ldw	ra,12(sp)
    76f4:	dc800217 	ldw	r18,8(sp)
    76f8:	dc400117 	ldw	r17,4(sp)
    76fc:	dc000017 	ldw	r16,0(sp)
    7700:	dec00404 	addi	sp,sp,16
    7704:	f800283a 	ret
    7708:	00042880 	call	4288 <__sfp_lock_release>
    770c:	0025883a 	mov	r18,zero
    7710:	9005883a 	mov	r2,r18
    7714:	dfc00317 	ldw	ra,12(sp)
    7718:	dc800217 	ldw	r18,8(sp)
    771c:	dc400117 	ldw	r17,4(sp)
    7720:	dc000017 	ldw	r16,0(sp)
    7724:	dec00404 	addi	sp,sp,16
    7728:	f800283a 	ret
    772c:	8809883a 	mov	r4,r17
    7730:	00042940 	call	4294 <__sinit>
    7734:	8080030f 	ldh	r2,12(r16)
    7738:	103fd11e 	bne	r2,zero,7680 <_fclose_r+0x38>
    773c:	003ff206 	br	7708 <_fclose_r+0xc0>
    7740:	81400417 	ldw	r5,16(r16)
    7744:	8809883a 	mov	r4,r17
    7748:	00046180 	call	4618 <_free_r>
    774c:	003fd906 	br	76b4 <_fclose_r+0x6c>
    7750:	04bfffc4 	movi	r18,-1
    7754:	003fd406 	br	76a8 <_fclose_r+0x60>

00007758 <fclose>:
    7758:	00800074 	movhi	r2,1
    775c:	10876c04 	addi	r2,r2,7600
    7760:	200b883a 	mov	r5,r4
    7764:	11000017 	ldw	r4,0(r2)
    7768:	00076481 	jmpi	7648 <_fclose_r>

0000776c <_fstat_r>:
    776c:	defffd04 	addi	sp,sp,-12
    7770:	dc000015 	stw	r16,0(sp)
    7774:	04000074 	movhi	r16,1
    7778:	84078704 	addi	r16,r16,7708
    777c:	dc400115 	stw	r17,4(sp)
    7780:	80000015 	stw	zero,0(r16)
    7784:	2023883a 	mov	r17,r4
    7788:	2809883a 	mov	r4,r5
    778c:	300b883a 	mov	r5,r6
    7790:	dfc00215 	stw	ra,8(sp)
    7794:	0009ef80 	call	9ef8 <fstat>
    7798:	1007883a 	mov	r3,r2
    779c:	00bfffc4 	movi	r2,-1
    77a0:	18800626 	beq	r3,r2,77bc <_fstat_r+0x50>
    77a4:	1805883a 	mov	r2,r3
    77a8:	dfc00217 	ldw	ra,8(sp)
    77ac:	dc400117 	ldw	r17,4(sp)
    77b0:	dc000017 	ldw	r16,0(sp)
    77b4:	dec00304 	addi	sp,sp,12
    77b8:	f800283a 	ret
    77bc:	80800017 	ldw	r2,0(r16)
    77c0:	103ff826 	beq	r2,zero,77a4 <_fstat_r+0x38>
    77c4:	88800015 	stw	r2,0(r17)
    77c8:	1805883a 	mov	r2,r3
    77cc:	dfc00217 	ldw	ra,8(sp)
    77d0:	dc400117 	ldw	r17,4(sp)
    77d4:	dc000017 	ldw	r16,0(sp)
    77d8:	dec00304 	addi	sp,sp,12
    77dc:	f800283a 	ret

000077e0 <_isatty_r>:
    77e0:	defffd04 	addi	sp,sp,-12
    77e4:	dc000015 	stw	r16,0(sp)
    77e8:	04000074 	movhi	r16,1
    77ec:	84078704 	addi	r16,r16,7708
    77f0:	dc400115 	stw	r17,4(sp)
    77f4:	80000015 	stw	zero,0(r16)
    77f8:	2023883a 	mov	r17,r4
    77fc:	2809883a 	mov	r4,r5
    7800:	dfc00215 	stw	ra,8(sp)
    7804:	000a02c0 	call	a02c <isatty>
    7808:	1007883a 	mov	r3,r2
    780c:	00bfffc4 	movi	r2,-1
    7810:	18800626 	beq	r3,r2,782c <_isatty_r+0x4c>
    7814:	1805883a 	mov	r2,r3
    7818:	dfc00217 	ldw	ra,8(sp)
    781c:	dc400117 	ldw	r17,4(sp)
    7820:	dc000017 	ldw	r16,0(sp)
    7824:	dec00304 	addi	sp,sp,12
    7828:	f800283a 	ret
    782c:	80800017 	ldw	r2,0(r16)
    7830:	103ff826 	beq	r2,zero,7814 <_isatty_r+0x34>
    7834:	88800015 	stw	r2,0(r17)
    7838:	1805883a 	mov	r2,r3
    783c:	dfc00217 	ldw	ra,8(sp)
    7840:	dc400117 	ldw	r17,4(sp)
    7844:	dc000017 	ldw	r16,0(sp)
    7848:	dec00304 	addi	sp,sp,12
    784c:	f800283a 	ret

00007850 <_lseek_r>:
    7850:	defffd04 	addi	sp,sp,-12
    7854:	dc000015 	stw	r16,0(sp)
    7858:	04000074 	movhi	r16,1
    785c:	84078704 	addi	r16,r16,7708
    7860:	dc400115 	stw	r17,4(sp)
    7864:	80000015 	stw	zero,0(r16)
    7868:	2023883a 	mov	r17,r4
    786c:	2809883a 	mov	r4,r5
    7870:	300b883a 	mov	r5,r6
    7874:	380d883a 	mov	r6,r7
    7878:	dfc00215 	stw	ra,8(sp)
    787c:	000a2380 	call	a238 <lseek>
    7880:	1007883a 	mov	r3,r2
    7884:	00bfffc4 	movi	r2,-1
    7888:	18800626 	beq	r3,r2,78a4 <_lseek_r+0x54>
    788c:	1805883a 	mov	r2,r3
    7890:	dfc00217 	ldw	ra,8(sp)
    7894:	dc400117 	ldw	r17,4(sp)
    7898:	dc000017 	ldw	r16,0(sp)
    789c:	dec00304 	addi	sp,sp,12
    78a0:	f800283a 	ret
    78a4:	80800017 	ldw	r2,0(r16)
    78a8:	103ff826 	beq	r2,zero,788c <_lseek_r+0x3c>
    78ac:	88800015 	stw	r2,0(r17)
    78b0:	1805883a 	mov	r2,r3
    78b4:	dfc00217 	ldw	ra,8(sp)
    78b8:	dc400117 	ldw	r17,4(sp)
    78bc:	dc000017 	ldw	r16,0(sp)
    78c0:	dec00304 	addi	sp,sp,12
    78c4:	f800283a 	ret

000078c8 <_read_r>:
    78c8:	defffd04 	addi	sp,sp,-12
    78cc:	dc000015 	stw	r16,0(sp)
    78d0:	04000074 	movhi	r16,1
    78d4:	84078704 	addi	r16,r16,7708
    78d8:	dc400115 	stw	r17,4(sp)
    78dc:	80000015 	stw	zero,0(r16)
    78e0:	2023883a 	mov	r17,r4
    78e4:	2809883a 	mov	r4,r5
    78e8:	300b883a 	mov	r5,r6
    78ec:	380d883a 	mov	r6,r7
    78f0:	dfc00215 	stw	ra,8(sp)
    78f4:	000a4340 	call	a434 <read>
    78f8:	1007883a 	mov	r3,r2
    78fc:	00bfffc4 	movi	r2,-1
    7900:	18800626 	beq	r3,r2,791c <_read_r+0x54>
    7904:	1805883a 	mov	r2,r3
    7908:	dfc00217 	ldw	ra,8(sp)
    790c:	dc400117 	ldw	r17,4(sp)
    7910:	dc000017 	ldw	r16,0(sp)
    7914:	dec00304 	addi	sp,sp,12
    7918:	f800283a 	ret
    791c:	80800017 	ldw	r2,0(r16)
    7920:	103ff826 	beq	r2,zero,7904 <_read_r+0x3c>
    7924:	88800015 	stw	r2,0(r17)
    7928:	1805883a 	mov	r2,r3
    792c:	dfc00217 	ldw	ra,8(sp)
    7930:	dc400117 	ldw	r17,4(sp)
    7934:	dc000017 	ldw	r16,0(sp)
    7938:	dec00304 	addi	sp,sp,12
    793c:	f800283a 	ret

00007940 <__udivdi3>:
    7940:	defff004 	addi	sp,sp,-64
    7944:	2005883a 	mov	r2,r4
    7948:	3011883a 	mov	r8,r6
    794c:	df000e15 	stw	fp,56(sp)
    7950:	dd000a15 	stw	r20,40(sp)
    7954:	dc000615 	stw	r16,24(sp)
    7958:	dfc00f15 	stw	ra,60(sp)
    795c:	ddc00d15 	stw	r23,52(sp)
    7960:	dd800c15 	stw	r22,48(sp)
    7964:	dd400b15 	stw	r21,44(sp)
    7968:	dcc00915 	stw	r19,36(sp)
    796c:	dc800815 	stw	r18,32(sp)
    7970:	dc400715 	stw	r17,28(sp)
    7974:	4021883a 	mov	r16,r8
    7978:	1039883a 	mov	fp,r2
    797c:	2829883a 	mov	r20,r5
    7980:	38003b1e 	bne	r7,zero,7a70 <__udivdi3+0x130>
    7984:	2a005c36 	bltu	r5,r8,7af8 <__udivdi3+0x1b8>
    7988:	4000a626 	beq	r8,zero,7c24 <__udivdi3+0x2e4>
    798c:	00bfffd4 	movui	r2,65535
    7990:	14009e36 	bltu	r2,r16,7c0c <__udivdi3+0x2cc>
    7994:	00803fc4 	movi	r2,255
    7998:	14013d36 	bltu	r2,r16,7e90 <__udivdi3+0x550>
    799c:	000b883a 	mov	r5,zero
    79a0:	0005883a 	mov	r2,zero
    79a4:	8084d83a 	srl	r2,r16,r2
    79a8:	01000074 	movhi	r4,1
    79ac:	21009804 	addi	r4,r4,608
    79b0:	01800804 	movi	r6,32
    79b4:	1105883a 	add	r2,r2,r4
    79b8:	10c00003 	ldbu	r3,0(r2)
    79bc:	28c7883a 	add	r3,r5,r3
    79c0:	30edc83a 	sub	r22,r6,r3
    79c4:	b000ee1e 	bne	r22,zero,7d80 <__udivdi3+0x440>
    79c8:	802ad43a 	srli	r21,r16,16
    79cc:	00800044 	movi	r2,1
    79d0:	a423c83a 	sub	r17,r20,r16
    79d4:	85ffffcc 	andi	r23,r16,65535
    79d8:	d8800315 	stw	r2,12(sp)
    79dc:	8809883a 	mov	r4,r17
    79e0:	a80b883a 	mov	r5,r21
    79e4:	00097340 	call	9734 <__udivsi3>
    79e8:	8809883a 	mov	r4,r17
    79ec:	a80b883a 	mov	r5,r21
    79f0:	102d883a 	mov	r22,r2
    79f4:	000973c0 	call	973c <__umodsi3>
    79f8:	1004943a 	slli	r2,r2,16
    79fc:	e006d43a 	srli	r3,fp,16
    7a00:	bda3383a 	mul	r17,r23,r22
    7a04:	10c4b03a 	or	r2,r2,r3
    7a08:	1440042e 	bgeu	r2,r17,7a1c <__udivdi3+0xdc>
    7a0c:	1405883a 	add	r2,r2,r16
    7a10:	b5bfffc4 	addi	r22,r22,-1
    7a14:	14000136 	bltu	r2,r16,7a1c <__udivdi3+0xdc>
    7a18:	14413d36 	bltu	r2,r17,7f10 <__udivdi3+0x5d0>
    7a1c:	1463c83a 	sub	r17,r2,r17
    7a20:	8809883a 	mov	r4,r17
    7a24:	a80b883a 	mov	r5,r21
    7a28:	00097340 	call	9734 <__udivsi3>
    7a2c:	8809883a 	mov	r4,r17
    7a30:	a80b883a 	mov	r5,r21
    7a34:	1029883a 	mov	r20,r2
    7a38:	000973c0 	call	973c <__umodsi3>
    7a3c:	1004943a 	slli	r2,r2,16
    7a40:	bd09383a 	mul	r4,r23,r20
    7a44:	e0ffffcc 	andi	r3,fp,65535
    7a48:	10c4b03a 	or	r2,r2,r3
    7a4c:	1100042e 	bgeu	r2,r4,7a60 <__udivdi3+0x120>
    7a50:	8085883a 	add	r2,r16,r2
    7a54:	a53fffc4 	addi	r20,r20,-1
    7a58:	14000136 	bltu	r2,r16,7a60 <__udivdi3+0x120>
    7a5c:	11012036 	bltu	r2,r4,7ee0 <__udivdi3+0x5a0>
    7a60:	b004943a 	slli	r2,r22,16
    7a64:	d9000317 	ldw	r4,12(sp)
    7a68:	a084b03a 	or	r2,r20,r2
    7a6c:	00001506 	br	7ac4 <__udivdi3+0x184>
    7a70:	380d883a 	mov	r6,r7
    7a74:	29c06236 	bltu	r5,r7,7c00 <__udivdi3+0x2c0>
    7a78:	00bfffd4 	movui	r2,65535
    7a7c:	11c05a36 	bltu	r2,r7,7be8 <__udivdi3+0x2a8>
    7a80:	00803fc4 	movi	r2,255
    7a84:	11c0fc36 	bltu	r2,r7,7e78 <__udivdi3+0x538>
    7a88:	000b883a 	mov	r5,zero
    7a8c:	0005883a 	mov	r2,zero
    7a90:	3084d83a 	srl	r2,r6,r2
    7a94:	01000074 	movhi	r4,1
    7a98:	21009804 	addi	r4,r4,608
    7a9c:	01c00804 	movi	r7,32
    7aa0:	1105883a 	add	r2,r2,r4
    7aa4:	10c00003 	ldbu	r3,0(r2)
    7aa8:	28c7883a 	add	r3,r5,r3
    7aac:	38efc83a 	sub	r23,r7,r3
    7ab0:	b800691e 	bne	r23,zero,7c58 <__udivdi3+0x318>
    7ab4:	35000136 	bltu	r6,r20,7abc <__udivdi3+0x17c>
    7ab8:	e4005136 	bltu	fp,r16,7c00 <__udivdi3+0x2c0>
    7abc:	00800044 	movi	r2,1
    7ac0:	0009883a 	mov	r4,zero
    7ac4:	2007883a 	mov	r3,r4
    7ac8:	dfc00f17 	ldw	ra,60(sp)
    7acc:	df000e17 	ldw	fp,56(sp)
    7ad0:	ddc00d17 	ldw	r23,52(sp)
    7ad4:	dd800c17 	ldw	r22,48(sp)
    7ad8:	dd400b17 	ldw	r21,44(sp)
    7adc:	dd000a17 	ldw	r20,40(sp)
    7ae0:	dcc00917 	ldw	r19,36(sp)
    7ae4:	dc800817 	ldw	r18,32(sp)
    7ae8:	dc400717 	ldw	r17,28(sp)
    7aec:	dc000617 	ldw	r16,24(sp)
    7af0:	dec01004 	addi	sp,sp,64
    7af4:	f800283a 	ret
    7af8:	00bfffd4 	movui	r2,65535
    7afc:	12005036 	bltu	r2,r8,7c40 <__udivdi3+0x300>
    7b00:	00803fc4 	movi	r2,255
    7b04:	1200e836 	bltu	r2,r8,7ea8 <__udivdi3+0x568>
    7b08:	000b883a 	mov	r5,zero
    7b0c:	0005883a 	mov	r2,zero
    7b10:	8084d83a 	srl	r2,r16,r2
    7b14:	01000074 	movhi	r4,1
    7b18:	21009804 	addi	r4,r4,608
    7b1c:	01800804 	movi	r6,32
    7b20:	1105883a 	add	r2,r2,r4
    7b24:	10c00003 	ldbu	r3,0(r2)
    7b28:	28c7883a 	add	r3,r5,r3
    7b2c:	30cbc83a 	sub	r5,r6,r3
    7b30:	28000626 	beq	r5,zero,7b4c <__udivdi3+0x20c>
    7b34:	3145c83a 	sub	r2,r6,r5
    7b38:	e084d83a 	srl	r2,fp,r2
    7b3c:	a146983a 	sll	r3,r20,r5
    7b40:	e178983a 	sll	fp,fp,r5
    7b44:	8160983a 	sll	r16,r16,r5
    7b48:	18a8b03a 	or	r20,r3,r2
    7b4c:	802ad43a 	srli	r21,r16,16
    7b50:	a009883a 	mov	r4,r20
    7b54:	85ffffcc 	andi	r23,r16,65535
    7b58:	a80b883a 	mov	r5,r21
    7b5c:	00097340 	call	9734 <__udivsi3>
    7b60:	a009883a 	mov	r4,r20
    7b64:	a80b883a 	mov	r5,r21
    7b68:	102d883a 	mov	r22,r2
    7b6c:	000973c0 	call	973c <__umodsi3>
    7b70:	1004943a 	slli	r2,r2,16
    7b74:	e006d43a 	srli	r3,fp,16
    7b78:	bda3383a 	mul	r17,r23,r22
    7b7c:	10c4b03a 	or	r2,r2,r3
    7b80:	1440042e 	bgeu	r2,r17,7b94 <__udivdi3+0x254>
    7b84:	1405883a 	add	r2,r2,r16
    7b88:	b5bfffc4 	addi	r22,r22,-1
    7b8c:	14000136 	bltu	r2,r16,7b94 <__udivdi3+0x254>
    7b90:	1440d536 	bltu	r2,r17,7ee8 <__udivdi3+0x5a8>
    7b94:	1463c83a 	sub	r17,r2,r17
    7b98:	8809883a 	mov	r4,r17
    7b9c:	a80b883a 	mov	r5,r21
    7ba0:	00097340 	call	9734 <__udivsi3>
    7ba4:	8809883a 	mov	r4,r17
    7ba8:	a80b883a 	mov	r5,r21
    7bac:	1029883a 	mov	r20,r2
    7bb0:	000973c0 	call	973c <__umodsi3>
    7bb4:	1004943a 	slli	r2,r2,16
    7bb8:	bd09383a 	mul	r4,r23,r20
    7bbc:	e0ffffcc 	andi	r3,fp,65535
    7bc0:	10c4b03a 	or	r2,r2,r3
    7bc4:	1100042e 	bgeu	r2,r4,7bd8 <__udivdi3+0x298>
    7bc8:	8085883a 	add	r2,r16,r2
    7bcc:	a53fffc4 	addi	r20,r20,-1
    7bd0:	14000136 	bltu	r2,r16,7bd8 <__udivdi3+0x298>
    7bd4:	1100c736 	bltu	r2,r4,7ef4 <__udivdi3+0x5b4>
    7bd8:	b004943a 	slli	r2,r22,16
    7bdc:	0009883a 	mov	r4,zero
    7be0:	a084b03a 	or	r2,r20,r2
    7be4:	003fb706 	br	7ac4 <__udivdi3+0x184>
    7be8:	00804034 	movhi	r2,256
    7bec:	10bfffc4 	addi	r2,r2,-1
    7bf0:	11c0a436 	bltu	r2,r7,7e84 <__udivdi3+0x544>
    7bf4:	01400404 	movi	r5,16
    7bf8:	2805883a 	mov	r2,r5
    7bfc:	003fa406 	br	7a90 <__udivdi3+0x150>
    7c00:	0005883a 	mov	r2,zero
    7c04:	0009883a 	mov	r4,zero
    7c08:	003fae06 	br	7ac4 <__udivdi3+0x184>
    7c0c:	00804034 	movhi	r2,256
    7c10:	10bfffc4 	addi	r2,r2,-1
    7c14:	1400a136 	bltu	r2,r16,7e9c <__udivdi3+0x55c>
    7c18:	01400404 	movi	r5,16
    7c1c:	2805883a 	mov	r2,r5
    7c20:	003f6006 	br	79a4 <__udivdi3+0x64>
    7c24:	01000044 	movi	r4,1
    7c28:	000b883a 	mov	r5,zero
    7c2c:	00097340 	call	9734 <__udivsi3>
    7c30:	1021883a 	mov	r16,r2
    7c34:	00bfffd4 	movui	r2,65535
    7c38:	143ff436 	bltu	r2,r16,7c0c <__udivdi3+0x2cc>
    7c3c:	003f5506 	br	7994 <__udivdi3+0x54>
    7c40:	00804034 	movhi	r2,256
    7c44:	10bfffc4 	addi	r2,r2,-1
    7c48:	12009a36 	bltu	r2,r8,7eb4 <__udivdi3+0x574>
    7c4c:	01400404 	movi	r5,16
    7c50:	2805883a 	mov	r2,r5
    7c54:	003fae06 	br	7b10 <__udivdi3+0x1d0>
    7c58:	3dc5c83a 	sub	r2,r7,r23
    7c5c:	35c8983a 	sll	r4,r6,r23
    7c60:	8086d83a 	srl	r3,r16,r2
    7c64:	a0a2d83a 	srl	r17,r20,r2
    7c68:	e084d83a 	srl	r2,fp,r2
    7c6c:	20eab03a 	or	r21,r4,r3
    7c70:	a82cd43a 	srli	r22,r21,16
    7c74:	a5c6983a 	sll	r3,r20,r23
    7c78:	8809883a 	mov	r4,r17
    7c7c:	b00b883a 	mov	r5,r22
    7c80:	1886b03a 	or	r3,r3,r2
    7c84:	d8c00215 	stw	r3,8(sp)
    7c88:	00097340 	call	9734 <__udivsi3>
    7c8c:	8809883a 	mov	r4,r17
    7c90:	b00b883a 	mov	r5,r22
    7c94:	1029883a 	mov	r20,r2
    7c98:	000973c0 	call	973c <__umodsi3>
    7c9c:	a8ffffcc 	andi	r3,r21,65535
    7ca0:	d8c00515 	stw	r3,20(sp)
    7ca4:	d9000217 	ldw	r4,8(sp)
    7ca8:	d9400517 	ldw	r5,20(sp)
    7cac:	1004943a 	slli	r2,r2,16
    7cb0:	2006d43a 	srli	r3,r4,16
    7cb4:	85e0983a 	sll	r16,r16,r23
    7cb8:	2d23383a 	mul	r17,r5,r20
    7cbc:	10c4b03a 	or	r2,r2,r3
    7cc0:	dc000015 	stw	r16,0(sp)
    7cc4:	1440032e 	bgeu	r2,r17,7cd4 <__udivdi3+0x394>
    7cc8:	1545883a 	add	r2,r2,r21
    7ccc:	a53fffc4 	addi	r20,r20,-1
    7cd0:	15407f2e 	bgeu	r2,r21,7ed0 <__udivdi3+0x590>
    7cd4:	1463c83a 	sub	r17,r2,r17
    7cd8:	8809883a 	mov	r4,r17
    7cdc:	b00b883a 	mov	r5,r22
    7ce0:	00097340 	call	9734 <__udivsi3>
    7ce4:	8809883a 	mov	r4,r17
    7ce8:	b00b883a 	mov	r5,r22
    7cec:	1021883a 	mov	r16,r2
    7cf0:	000973c0 	call	973c <__umodsi3>
    7cf4:	d8c00517 	ldw	r3,20(sp)
    7cf8:	d9000217 	ldw	r4,8(sp)
    7cfc:	1004943a 	slli	r2,r2,16
    7d00:	1c0f383a 	mul	r7,r3,r16
    7d04:	20ffffcc 	andi	r3,r4,65535
    7d08:	10e2b03a 	or	r17,r2,r3
    7d0c:	89c0032e 	bgeu	r17,r7,7d1c <__udivdi3+0x3dc>
    7d10:	8d63883a 	add	r17,r17,r21
    7d14:	843fffc4 	addi	r16,r16,-1
    7d18:	8d40692e 	bgeu	r17,r21,7ec0 <__udivdi3+0x580>
    7d1c:	a008943a 	slli	r4,r20,16
    7d20:	d9400017 	ldw	r5,0(sp)
    7d24:	89e3c83a 	sub	r17,r17,r7
    7d28:	8110b03a 	or	r8,r16,r4
    7d2c:	280cd43a 	srli	r6,r5,16
    7d30:	28ffffcc 	andi	r3,r5,65535
    7d34:	40bfffcc 	andi	r2,r8,65535
    7d38:	400ad43a 	srli	r5,r8,16
    7d3c:	10d3383a 	mul	r9,r2,r3
    7d40:	1185383a 	mul	r2,r2,r6
    7d44:	28c7383a 	mul	r3,r5,r3
    7d48:	4808d43a 	srli	r4,r9,16
    7d4c:	298b383a 	mul	r5,r5,r6
    7d50:	10c5883a 	add	r2,r2,r3
    7d54:	2089883a 	add	r4,r4,r2
    7d58:	20c0022e 	bgeu	r4,r3,7d64 <__udivdi3+0x424>
    7d5c:	00800074 	movhi	r2,1
    7d60:	288b883a 	add	r5,r5,r2
    7d64:	2004d43a 	srli	r2,r4,16
    7d68:	288b883a 	add	r5,r5,r2
    7d6c:	89403f36 	bltu	r17,r5,7e6c <__udivdi3+0x52c>
    7d70:	89403926 	beq	r17,r5,7e58 <__udivdi3+0x518>
    7d74:	4005883a 	mov	r2,r8
    7d78:	0009883a 	mov	r4,zero
    7d7c:	003f5106 	br	7ac4 <__udivdi3+0x184>
    7d80:	85a0983a 	sll	r16,r16,r22
    7d84:	3585c83a 	sub	r2,r6,r22
    7d88:	a0a2d83a 	srl	r17,r20,r2
    7d8c:	802ad43a 	srli	r21,r16,16
    7d90:	e084d83a 	srl	r2,fp,r2
    7d94:	a586983a 	sll	r3,r20,r22
    7d98:	8809883a 	mov	r4,r17
    7d9c:	a80b883a 	mov	r5,r21
    7da0:	1886b03a 	or	r3,r3,r2
    7da4:	d8c00115 	stw	r3,4(sp)
    7da8:	00097340 	call	9734 <__udivsi3>
    7dac:	8809883a 	mov	r4,r17
    7db0:	a80b883a 	mov	r5,r21
    7db4:	d8800415 	stw	r2,16(sp)
    7db8:	000973c0 	call	973c <__umodsi3>
    7dbc:	d9000117 	ldw	r4,4(sp)
    7dc0:	d9400417 	ldw	r5,16(sp)
    7dc4:	1004943a 	slli	r2,r2,16
    7dc8:	85ffffcc 	andi	r23,r16,65535
    7dcc:	2006d43a 	srli	r3,r4,16
    7dd0:	b963383a 	mul	r17,r23,r5
    7dd4:	10c4b03a 	or	r2,r2,r3
    7dd8:	1440042e 	bgeu	r2,r17,7dec <__udivdi3+0x4ac>
    7ddc:	297fffc4 	addi	r5,r5,-1
    7de0:	1405883a 	add	r2,r2,r16
    7de4:	d9400415 	stw	r5,16(sp)
    7de8:	1400442e 	bgeu	r2,r16,7efc <__udivdi3+0x5bc>
    7dec:	1463c83a 	sub	r17,r2,r17
    7df0:	8809883a 	mov	r4,r17
    7df4:	a80b883a 	mov	r5,r21
    7df8:	00097340 	call	9734 <__udivsi3>
    7dfc:	8809883a 	mov	r4,r17
    7e00:	a80b883a 	mov	r5,r21
    7e04:	1029883a 	mov	r20,r2
    7e08:	000973c0 	call	973c <__umodsi3>
    7e0c:	d9400117 	ldw	r5,4(sp)
    7e10:	1004943a 	slli	r2,r2,16
    7e14:	bd09383a 	mul	r4,r23,r20
    7e18:	28ffffcc 	andi	r3,r5,65535
    7e1c:	10c6b03a 	or	r3,r2,r3
    7e20:	1900062e 	bgeu	r3,r4,7e3c <__udivdi3+0x4fc>
    7e24:	1c07883a 	add	r3,r3,r16
    7e28:	a53fffc4 	addi	r20,r20,-1
    7e2c:	1c000336 	bltu	r3,r16,7e3c <__udivdi3+0x4fc>
    7e30:	1900022e 	bgeu	r3,r4,7e3c <__udivdi3+0x4fc>
    7e34:	a53fffc4 	addi	r20,r20,-1
    7e38:	1c07883a 	add	r3,r3,r16
    7e3c:	d9400417 	ldw	r5,16(sp)
    7e40:	e5b8983a 	sll	fp,fp,r22
    7e44:	1923c83a 	sub	r17,r3,r4
    7e48:	2804943a 	slli	r2,r5,16
    7e4c:	a0a8b03a 	or	r20,r20,r2
    7e50:	dd000315 	stw	r20,12(sp)
    7e54:	003ee106 	br	79dc <__udivdi3+0x9c>
    7e58:	2004943a 	slli	r2,r4,16
    7e5c:	e5c8983a 	sll	r4,fp,r23
    7e60:	48ffffcc 	andi	r3,r9,65535
    7e64:	10c5883a 	add	r2,r2,r3
    7e68:	20bfc22e 	bgeu	r4,r2,7d74 <__udivdi3+0x434>
    7e6c:	40bfffc4 	addi	r2,r8,-1
    7e70:	0009883a 	mov	r4,zero
    7e74:	003f1306 	br	7ac4 <__udivdi3+0x184>
    7e78:	01400204 	movi	r5,8
    7e7c:	2805883a 	mov	r2,r5
    7e80:	003f0306 	br	7a90 <__udivdi3+0x150>
    7e84:	01400604 	movi	r5,24
    7e88:	2805883a 	mov	r2,r5
    7e8c:	003f0006 	br	7a90 <__udivdi3+0x150>
    7e90:	01400204 	movi	r5,8
    7e94:	2805883a 	mov	r2,r5
    7e98:	003ec206 	br	79a4 <__udivdi3+0x64>
    7e9c:	01400604 	movi	r5,24
    7ea0:	2805883a 	mov	r2,r5
    7ea4:	003ebf06 	br	79a4 <__udivdi3+0x64>
    7ea8:	01400204 	movi	r5,8
    7eac:	2805883a 	mov	r2,r5
    7eb0:	003f1706 	br	7b10 <__udivdi3+0x1d0>
    7eb4:	01400604 	movi	r5,24
    7eb8:	2805883a 	mov	r2,r5
    7ebc:	003f1406 	br	7b10 <__udivdi3+0x1d0>
    7ec0:	89ff962e 	bgeu	r17,r7,7d1c <__udivdi3+0x3dc>
    7ec4:	8d63883a 	add	r17,r17,r21
    7ec8:	843fffc4 	addi	r16,r16,-1
    7ecc:	003f9306 	br	7d1c <__udivdi3+0x3dc>
    7ed0:	147f802e 	bgeu	r2,r17,7cd4 <__udivdi3+0x394>
    7ed4:	a53fffc4 	addi	r20,r20,-1
    7ed8:	1545883a 	add	r2,r2,r21
    7edc:	003f7d06 	br	7cd4 <__udivdi3+0x394>
    7ee0:	a53fffc4 	addi	r20,r20,-1
    7ee4:	003ede06 	br	7a60 <__udivdi3+0x120>
    7ee8:	b5bfffc4 	addi	r22,r22,-1
    7eec:	1405883a 	add	r2,r2,r16
    7ef0:	003f2806 	br	7b94 <__udivdi3+0x254>
    7ef4:	a53fffc4 	addi	r20,r20,-1
    7ef8:	003f3706 	br	7bd8 <__udivdi3+0x298>
    7efc:	147fbb2e 	bgeu	r2,r17,7dec <__udivdi3+0x4ac>
    7f00:	297fffc4 	addi	r5,r5,-1
    7f04:	1405883a 	add	r2,r2,r16
    7f08:	d9400415 	stw	r5,16(sp)
    7f0c:	003fb706 	br	7dec <__udivdi3+0x4ac>
    7f10:	b5bfffc4 	addi	r22,r22,-1
    7f14:	1405883a 	add	r2,r2,r16
    7f18:	003ec006 	br	7a1c <__udivdi3+0xdc>

00007f1c <__umoddi3>:
    7f1c:	defff104 	addi	sp,sp,-60
    7f20:	dd800b15 	stw	r22,44(sp)
    7f24:	dd000915 	stw	r20,36(sp)
    7f28:	dc000515 	stw	r16,20(sp)
    7f2c:	dfc00e15 	stw	ra,56(sp)
    7f30:	df000d15 	stw	fp,52(sp)
    7f34:	ddc00c15 	stw	r23,48(sp)
    7f38:	dd400a15 	stw	r21,40(sp)
    7f3c:	dcc00815 	stw	r19,32(sp)
    7f40:	dc800715 	stw	r18,28(sp)
    7f44:	dc400615 	stw	r17,24(sp)
    7f48:	3021883a 	mov	r16,r6
    7f4c:	202d883a 	mov	r22,r4
    7f50:	2829883a 	mov	r20,r5
    7f54:	38002b1e 	bne	r7,zero,8004 <__umoddi3+0xe8>
    7f58:	29805036 	bltu	r5,r6,809c <__umoddi3+0x180>
    7f5c:	30008a26 	beq	r6,zero,8188 <__umoddi3+0x26c>
    7f60:	00bfffd4 	movui	r2,65535
    7f64:	14008236 	bltu	r2,r16,8170 <__umoddi3+0x254>
    7f68:	00803fc4 	movi	r2,255
    7f6c:	14013636 	bltu	r2,r16,8448 <__umoddi3+0x52c>
    7f70:	000b883a 	mov	r5,zero
    7f74:	0005883a 	mov	r2,zero
    7f78:	8084d83a 	srl	r2,r16,r2
    7f7c:	01000074 	movhi	r4,1
    7f80:	21009804 	addi	r4,r4,608
    7f84:	01800804 	movi	r6,32
    7f88:	1105883a 	add	r2,r2,r4
    7f8c:	10c00003 	ldbu	r3,0(r2)
    7f90:	28c7883a 	add	r3,r5,r3
    7f94:	30efc83a 	sub	r23,r6,r3
    7f98:	b800941e 	bne	r23,zero,81ec <__umoddi3+0x2d0>
    7f9c:	802ad43a 	srli	r21,r16,16
    7fa0:	a423c83a 	sub	r17,r20,r16
    7fa4:	0039883a 	mov	fp,zero
    7fa8:	853fffcc 	andi	r20,r16,65535
    7fac:	8809883a 	mov	r4,r17
    7fb0:	a80b883a 	mov	r5,r21
    7fb4:	00097340 	call	9734 <__udivsi3>
    7fb8:	8809883a 	mov	r4,r17
    7fbc:	a80b883a 	mov	r5,r21
    7fc0:	a0a3383a 	mul	r17,r20,r2
    7fc4:	000973c0 	call	973c <__umodsi3>
    7fc8:	1004943a 	slli	r2,r2,16
    7fcc:	b006d43a 	srli	r3,r22,16
    7fd0:	10c4b03a 	or	r2,r2,r3
    7fd4:	1440032e 	bgeu	r2,r17,7fe4 <__umoddi3+0xc8>
    7fd8:	1405883a 	add	r2,r2,r16
    7fdc:	14000136 	bltu	r2,r16,7fe4 <__umoddi3+0xc8>
    7fe0:	14413536 	bltu	r2,r17,84b8 <__umoddi3+0x59c>
    7fe4:	1463c83a 	sub	r17,r2,r17
    7fe8:	8809883a 	mov	r4,r17
    7fec:	a80b883a 	mov	r5,r21
    7ff0:	00097340 	call	9734 <__udivsi3>
    7ff4:	8809883a 	mov	r4,r17
    7ff8:	a0a3383a 	mul	r17,r20,r2
    7ffc:	a80b883a 	mov	r5,r21
    8000:	00004d06 	br	8138 <__umoddi3+0x21c>
    8004:	380d883a 	mov	r6,r7
    8008:	29c0102e 	bgeu	r5,r7,804c <__umoddi3+0x130>
    800c:	2011883a 	mov	r8,r4
    8010:	2813883a 	mov	r9,r5
    8014:	4005883a 	mov	r2,r8
    8018:	4807883a 	mov	r3,r9
    801c:	dfc00e17 	ldw	ra,56(sp)
    8020:	df000d17 	ldw	fp,52(sp)
    8024:	ddc00c17 	ldw	r23,48(sp)
    8028:	dd800b17 	ldw	r22,44(sp)
    802c:	dd400a17 	ldw	r21,40(sp)
    8030:	dd000917 	ldw	r20,36(sp)
    8034:	dcc00817 	ldw	r19,32(sp)
    8038:	dc800717 	ldw	r18,28(sp)
    803c:	dc400617 	ldw	r17,24(sp)
    8040:	dc000517 	ldw	r16,20(sp)
    8044:	dec00f04 	addi	sp,sp,60
    8048:	f800283a 	ret
    804c:	00bfffd4 	movui	r2,65535
    8050:	11c05a36 	bltu	r2,r7,81bc <__umoddi3+0x2a0>
    8054:	00803fc4 	movi	r2,255
    8058:	11c0fe36 	bltu	r2,r7,8454 <__umoddi3+0x538>
    805c:	000b883a 	mov	r5,zero
    8060:	0005883a 	mov	r2,zero
    8064:	3084d83a 	srl	r2,r6,r2
    8068:	01000074 	movhi	r4,1
    806c:	21009804 	addi	r4,r4,608
    8070:	01c00804 	movi	r7,32
    8074:	1105883a 	add	r2,r2,r4
    8078:	10c00003 	ldbu	r3,0(r2)
    807c:	28c7883a 	add	r3,r5,r3
    8080:	38ebc83a 	sub	r21,r7,r3
    8084:	a800851e 	bne	r21,zero,829c <__umoddi3+0x380>
    8088:	35005236 	bltu	r6,r20,81d4 <__umoddi3+0x2b8>
    808c:	b400512e 	bgeu	r22,r16,81d4 <__umoddi3+0x2b8>
    8090:	b011883a 	mov	r8,r22
    8094:	a013883a 	mov	r9,r20
    8098:	003fde06 	br	8014 <__umoddi3+0xf8>
    809c:	00bfffd4 	movui	r2,65535
    80a0:	11804036 	bltu	r2,r6,81a4 <__umoddi3+0x288>
    80a4:	00803fc4 	movi	r2,255
    80a8:	1180ed36 	bltu	r2,r6,8460 <__umoddi3+0x544>
    80ac:	000b883a 	mov	r5,zero
    80b0:	0005883a 	mov	r2,zero
    80b4:	8084d83a 	srl	r2,r16,r2
    80b8:	01000074 	movhi	r4,1
    80bc:	21009804 	addi	r4,r4,608
    80c0:	01800804 	movi	r6,32
    80c4:	1105883a 	add	r2,r2,r4
    80c8:	10c00003 	ldbu	r3,0(r2)
    80cc:	28c7883a 	add	r3,r5,r3
    80d0:	30c7c83a 	sub	r3,r6,r3
    80d4:	1800bf1e 	bne	r3,zero,83d4 <__umoddi3+0x4b8>
    80d8:	0039883a 	mov	fp,zero
    80dc:	802ad43a 	srli	r21,r16,16
    80e0:	a009883a 	mov	r4,r20
    80e4:	85ffffcc 	andi	r23,r16,65535
    80e8:	a80b883a 	mov	r5,r21
    80ec:	00097340 	call	9734 <__udivsi3>
    80f0:	a009883a 	mov	r4,r20
    80f4:	a80b883a 	mov	r5,r21
    80f8:	b8a3383a 	mul	r17,r23,r2
    80fc:	000973c0 	call	973c <__umodsi3>
    8100:	1004943a 	slli	r2,r2,16
    8104:	b006d43a 	srli	r3,r22,16
    8108:	10c4b03a 	or	r2,r2,r3
    810c:	1440032e 	bgeu	r2,r17,811c <__umoddi3+0x200>
    8110:	1405883a 	add	r2,r2,r16
    8114:	14000136 	bltu	r2,r16,811c <__umoddi3+0x200>
    8118:	1440e536 	bltu	r2,r17,84b0 <__umoddi3+0x594>
    811c:	1463c83a 	sub	r17,r2,r17
    8120:	8809883a 	mov	r4,r17
    8124:	a80b883a 	mov	r5,r21
    8128:	00097340 	call	9734 <__udivsi3>
    812c:	8809883a 	mov	r4,r17
    8130:	b8a3383a 	mul	r17,r23,r2
    8134:	a80b883a 	mov	r5,r21
    8138:	000973c0 	call	973c <__umodsi3>
    813c:	1004943a 	slli	r2,r2,16
    8140:	b0ffffcc 	andi	r3,r22,65535
    8144:	10c4b03a 	or	r2,r2,r3
    8148:	1440042e 	bgeu	r2,r17,815c <__umoddi3+0x240>
    814c:	1405883a 	add	r2,r2,r16
    8150:	14000236 	bltu	r2,r16,815c <__umoddi3+0x240>
    8154:	1440012e 	bgeu	r2,r17,815c <__umoddi3+0x240>
    8158:	1405883a 	add	r2,r2,r16
    815c:	1445c83a 	sub	r2,r2,r17
    8160:	1724d83a 	srl	r18,r2,fp
    8164:	0013883a 	mov	r9,zero
    8168:	9011883a 	mov	r8,r18
    816c:	003fa906 	br	8014 <__umoddi3+0xf8>
    8170:	00804034 	movhi	r2,256
    8174:	10bfffc4 	addi	r2,r2,-1
    8178:	1400b036 	bltu	r2,r16,843c <__umoddi3+0x520>
    817c:	01400404 	movi	r5,16
    8180:	2805883a 	mov	r2,r5
    8184:	003f7c06 	br	7f78 <__umoddi3+0x5c>
    8188:	01000044 	movi	r4,1
    818c:	000b883a 	mov	r5,zero
    8190:	00097340 	call	9734 <__udivsi3>
    8194:	1021883a 	mov	r16,r2
    8198:	00bfffd4 	movui	r2,65535
    819c:	143ff436 	bltu	r2,r16,8170 <__umoddi3+0x254>
    81a0:	003f7106 	br	7f68 <__umoddi3+0x4c>
    81a4:	00804034 	movhi	r2,256
    81a8:	10bfffc4 	addi	r2,r2,-1
    81ac:	1180af36 	bltu	r2,r6,846c <__umoddi3+0x550>
    81b0:	01400404 	movi	r5,16
    81b4:	2805883a 	mov	r2,r5
    81b8:	003fbe06 	br	80b4 <__umoddi3+0x198>
    81bc:	00804034 	movhi	r2,256
    81c0:	10bfffc4 	addi	r2,r2,-1
    81c4:	11c0ac36 	bltu	r2,r7,8478 <__umoddi3+0x55c>
    81c8:	01400404 	movi	r5,16
    81cc:	2805883a 	mov	r2,r5
    81d0:	003fa406 	br	8064 <__umoddi3+0x148>
    81d4:	b409c83a 	sub	r4,r22,r16
    81d8:	b105803a 	cmpltu	r2,r22,r4
    81dc:	a187c83a 	sub	r3,r20,r6
    81e0:	18a9c83a 	sub	r20,r3,r2
    81e4:	202d883a 	mov	r22,r4
    81e8:	003fa906 	br	8090 <__umoddi3+0x174>
    81ec:	85e0983a 	sll	r16,r16,r23
    81f0:	35c5c83a 	sub	r2,r6,r23
    81f4:	a0a2d83a 	srl	r17,r20,r2
    81f8:	802ad43a 	srli	r21,r16,16
    81fc:	b084d83a 	srl	r2,r22,r2
    8200:	a5c6983a 	sll	r3,r20,r23
    8204:	8809883a 	mov	r4,r17
    8208:	a80b883a 	mov	r5,r21
    820c:	1886b03a 	or	r3,r3,r2
    8210:	d8c00115 	stw	r3,4(sp)
    8214:	853fffcc 	andi	r20,r16,65535
    8218:	00097340 	call	9734 <__udivsi3>
    821c:	8809883a 	mov	r4,r17
    8220:	a80b883a 	mov	r5,r21
    8224:	a0a3383a 	mul	r17,r20,r2
    8228:	000973c0 	call	973c <__umodsi3>
    822c:	d9000117 	ldw	r4,4(sp)
    8230:	1004943a 	slli	r2,r2,16
    8234:	b839883a 	mov	fp,r23
    8238:	2006d43a 	srli	r3,r4,16
    823c:	10c4b03a 	or	r2,r2,r3
    8240:	1440022e 	bgeu	r2,r17,824c <__umoddi3+0x330>
    8244:	1405883a 	add	r2,r2,r16
    8248:	1400962e 	bgeu	r2,r16,84a4 <__umoddi3+0x588>
    824c:	1463c83a 	sub	r17,r2,r17
    8250:	8809883a 	mov	r4,r17
    8254:	a80b883a 	mov	r5,r21
    8258:	00097340 	call	9734 <__udivsi3>
    825c:	8809883a 	mov	r4,r17
    8260:	a80b883a 	mov	r5,r21
    8264:	a0a3383a 	mul	r17,r20,r2
    8268:	000973c0 	call	973c <__umodsi3>
    826c:	d9400117 	ldw	r5,4(sp)
    8270:	1004943a 	slli	r2,r2,16
    8274:	28ffffcc 	andi	r3,r5,65535
    8278:	10c4b03a 	or	r2,r2,r3
    827c:	1440042e 	bgeu	r2,r17,8290 <__umoddi3+0x374>
    8280:	1405883a 	add	r2,r2,r16
    8284:	14000236 	bltu	r2,r16,8290 <__umoddi3+0x374>
    8288:	1440012e 	bgeu	r2,r17,8290 <__umoddi3+0x374>
    828c:	1405883a 	add	r2,r2,r16
    8290:	b5ec983a 	sll	r22,r22,r23
    8294:	1463c83a 	sub	r17,r2,r17
    8298:	003f4406 	br	7fac <__umoddi3+0x90>
    829c:	3d4fc83a 	sub	r7,r7,r21
    82a0:	3546983a 	sll	r3,r6,r21
    82a4:	81c4d83a 	srl	r2,r16,r7
    82a8:	a1e2d83a 	srl	r17,r20,r7
    82ac:	a54c983a 	sll	r6,r20,r21
    82b0:	18aeb03a 	or	r23,r3,r2
    82b4:	b828d43a 	srli	r20,r23,16
    82b8:	b1c4d83a 	srl	r2,r22,r7
    82bc:	8809883a 	mov	r4,r17
    82c0:	a00b883a 	mov	r5,r20
    82c4:	308cb03a 	or	r6,r6,r2
    82c8:	d9c00315 	stw	r7,12(sp)
    82cc:	d9800215 	stw	r6,8(sp)
    82d0:	00097340 	call	9734 <__udivsi3>
    82d4:	8809883a 	mov	r4,r17
    82d8:	a00b883a 	mov	r5,r20
    82dc:	1039883a 	mov	fp,r2
    82e0:	000973c0 	call	973c <__umodsi3>
    82e4:	b8ffffcc 	andi	r3,r23,65535
    82e8:	d8c00415 	stw	r3,16(sp)
    82ec:	d9000217 	ldw	r4,8(sp)
    82f0:	d9400417 	ldw	r5,16(sp)
    82f4:	1004943a 	slli	r2,r2,16
    82f8:	2006d43a 	srli	r3,r4,16
    82fc:	8560983a 	sll	r16,r16,r21
    8300:	2f23383a 	mul	r17,r5,fp
    8304:	10c4b03a 	or	r2,r2,r3
    8308:	dc000015 	stw	r16,0(sp)
    830c:	b56c983a 	sll	r22,r22,r21
    8310:	1440032e 	bgeu	r2,r17,8320 <__umoddi3+0x404>
    8314:	15c5883a 	add	r2,r2,r23
    8318:	e73fffc4 	addi	fp,fp,-1
    831c:	15c05d2e 	bgeu	r2,r23,8494 <__umoddi3+0x578>
    8320:	1463c83a 	sub	r17,r2,r17
    8324:	8809883a 	mov	r4,r17
    8328:	a00b883a 	mov	r5,r20
    832c:	00097340 	call	9734 <__udivsi3>
    8330:	8809883a 	mov	r4,r17
    8334:	a00b883a 	mov	r5,r20
    8338:	1021883a 	mov	r16,r2
    833c:	000973c0 	call	973c <__umodsi3>
    8340:	d8c00417 	ldw	r3,16(sp)
    8344:	d9000217 	ldw	r4,8(sp)
    8348:	1004943a 	slli	r2,r2,16
    834c:	1c23383a 	mul	r17,r3,r16
    8350:	20ffffcc 	andi	r3,r4,65535
    8354:	10ceb03a 	or	r7,r2,r3
    8358:	3c40032e 	bgeu	r7,r17,8368 <__umoddi3+0x44c>
    835c:	3dcf883a 	add	r7,r7,r23
    8360:	843fffc4 	addi	r16,r16,-1
    8364:	3dc0472e 	bgeu	r7,r23,8484 <__umoddi3+0x568>
    8368:	e004943a 	slli	r2,fp,16
    836c:	d9400017 	ldw	r5,0(sp)
    8370:	3c4fc83a 	sub	r7,r7,r17
    8374:	8084b03a 	or	r2,r16,r2
    8378:	28ffffcc 	andi	r3,r5,65535
    837c:	280cd43a 	srli	r6,r5,16
    8380:	100ad43a 	srli	r5,r2,16
    8384:	10bfffcc 	andi	r2,r2,65535
    8388:	10d1383a 	mul	r8,r2,r3
    838c:	28c7383a 	mul	r3,r5,r3
    8390:	1185383a 	mul	r2,r2,r6
    8394:	4008d43a 	srli	r4,r8,16
    8398:	298b383a 	mul	r5,r5,r6
    839c:	10c5883a 	add	r2,r2,r3
    83a0:	2089883a 	add	r4,r4,r2
    83a4:	20c0022e 	bgeu	r4,r3,83b0 <__umoddi3+0x494>
    83a8:	00800074 	movhi	r2,1
    83ac:	288b883a 	add	r5,r5,r2
    83b0:	2004d43a 	srli	r2,r4,16
    83b4:	2008943a 	slli	r4,r4,16
    83b8:	40ffffcc 	andi	r3,r8,65535
    83bc:	288b883a 	add	r5,r5,r2
    83c0:	20c9883a 	add	r4,r4,r3
    83c4:	39400b36 	bltu	r7,r5,83f4 <__umoddi3+0x4d8>
    83c8:	39403d26 	beq	r7,r5,84c0 <__umoddi3+0x5a4>
    83cc:	394bc83a 	sub	r5,r7,r5
    83d0:	00000f06 	br	8410 <__umoddi3+0x4f4>
    83d4:	30c5c83a 	sub	r2,r6,r3
    83d8:	1839883a 	mov	fp,r3
    83dc:	b084d83a 	srl	r2,r22,r2
    83e0:	a0c6983a 	sll	r3,r20,r3
    83e4:	8720983a 	sll	r16,r16,fp
    83e8:	b72c983a 	sll	r22,r22,fp
    83ec:	18a8b03a 	or	r20,r3,r2
    83f0:	003f3a06 	br	80dc <__umoddi3+0x1c0>
    83f4:	d8c00017 	ldw	r3,0(sp)
    83f8:	20c5c83a 	sub	r2,r4,r3
    83fc:	2089803a 	cmpltu	r4,r4,r2
    8400:	2dc7c83a 	sub	r3,r5,r23
    8404:	1907c83a 	sub	r3,r3,r4
    8408:	38cbc83a 	sub	r5,r7,r3
    840c:	1009883a 	mov	r4,r2
    8410:	b105c83a 	sub	r2,r22,r4
    8414:	b087803a 	cmpltu	r3,r22,r2
    8418:	28c7c83a 	sub	r3,r5,r3
    841c:	d9400317 	ldw	r5,12(sp)
    8420:	1544d83a 	srl	r2,r2,r21
    8424:	1948983a 	sll	r4,r3,r5
    8428:	1d46d83a 	srl	r3,r3,r21
    842c:	20a4b03a 	or	r18,r4,r2
    8430:	9011883a 	mov	r8,r18
    8434:	1813883a 	mov	r9,r3
    8438:	003ef606 	br	8014 <__umoddi3+0xf8>
    843c:	01400604 	movi	r5,24
    8440:	2805883a 	mov	r2,r5
    8444:	003ecc06 	br	7f78 <__umoddi3+0x5c>
    8448:	01400204 	movi	r5,8
    844c:	2805883a 	mov	r2,r5
    8450:	003ec906 	br	7f78 <__umoddi3+0x5c>
    8454:	01400204 	movi	r5,8
    8458:	2805883a 	mov	r2,r5
    845c:	003f0106 	br	8064 <__umoddi3+0x148>
    8460:	01400204 	movi	r5,8
    8464:	2805883a 	mov	r2,r5
    8468:	003f1206 	br	80b4 <__umoddi3+0x198>
    846c:	01400604 	movi	r5,24
    8470:	2805883a 	mov	r2,r5
    8474:	003f0f06 	br	80b4 <__umoddi3+0x198>
    8478:	01400604 	movi	r5,24
    847c:	2805883a 	mov	r2,r5
    8480:	003ef806 	br	8064 <__umoddi3+0x148>
    8484:	3c7fb82e 	bgeu	r7,r17,8368 <__umoddi3+0x44c>
    8488:	843fffc4 	addi	r16,r16,-1
    848c:	3dcf883a 	add	r7,r7,r23
    8490:	003fb506 	br	8368 <__umoddi3+0x44c>
    8494:	147fa22e 	bgeu	r2,r17,8320 <__umoddi3+0x404>
    8498:	e73fffc4 	addi	fp,fp,-1
    849c:	15c5883a 	add	r2,r2,r23
    84a0:	003f9f06 	br	8320 <__umoddi3+0x404>
    84a4:	147f692e 	bgeu	r2,r17,824c <__umoddi3+0x330>
    84a8:	1405883a 	add	r2,r2,r16
    84ac:	003f6706 	br	824c <__umoddi3+0x330>
    84b0:	1405883a 	add	r2,r2,r16
    84b4:	003f1906 	br	811c <__umoddi3+0x200>
    84b8:	1405883a 	add	r2,r2,r16
    84bc:	003ec906 	br	7fe4 <__umoddi3+0xc8>
    84c0:	b13fcc36 	bltu	r22,r4,83f4 <__umoddi3+0x4d8>
    84c4:	000b883a 	mov	r5,zero
    84c8:	003fd106 	br	8410 <__umoddi3+0x4f4>

000084cc <_fpadd_parts>:
    84cc:	defff804 	addi	sp,sp,-32
    84d0:	dcc00315 	stw	r19,12(sp)
    84d4:	2027883a 	mov	r19,r4
    84d8:	21000017 	ldw	r4,0(r4)
    84dc:	00c00044 	movi	r3,1
    84e0:	dd400515 	stw	r21,20(sp)
    84e4:	dd000415 	stw	r20,16(sp)
    84e8:	ddc00715 	stw	r23,28(sp)
    84ec:	dd800615 	stw	r22,24(sp)
    84f0:	dc800215 	stw	r18,8(sp)
    84f4:	dc400115 	stw	r17,4(sp)
    84f8:	dc000015 	stw	r16,0(sp)
    84fc:	282b883a 	mov	r21,r5
    8500:	3029883a 	mov	r20,r6
    8504:	1900632e 	bgeu	r3,r4,8694 <_fpadd_parts+0x1c8>
    8508:	28800017 	ldw	r2,0(r5)
    850c:	1880812e 	bgeu	r3,r2,8714 <_fpadd_parts+0x248>
    8510:	00c00104 	movi	r3,4
    8514:	20c0dc26 	beq	r4,r3,8888 <_fpadd_parts+0x3bc>
    8518:	10c07e26 	beq	r2,r3,8714 <_fpadd_parts+0x248>
    851c:	00c00084 	movi	r3,2
    8520:	10c06726 	beq	r2,r3,86c0 <_fpadd_parts+0x1f4>
    8524:	20c07b26 	beq	r4,r3,8714 <_fpadd_parts+0x248>
    8528:	9dc00217 	ldw	r23,8(r19)
    852c:	28c00217 	ldw	r3,8(r5)
    8530:	9c400317 	ldw	r17,12(r19)
    8534:	2bc00317 	ldw	r15,12(r5)
    8538:	b8cdc83a 	sub	r6,r23,r3
    853c:	9c800417 	ldw	r18,16(r19)
    8540:	2c000417 	ldw	r16,16(r5)
    8544:	3009883a 	mov	r4,r6
    8548:	30009716 	blt	r6,zero,87a8 <_fpadd_parts+0x2dc>
    854c:	00800fc4 	movi	r2,63
    8550:	11806b16 	blt	r2,r6,8700 <_fpadd_parts+0x234>
    8554:	0100a40e 	bge	zero,r4,87e8 <_fpadd_parts+0x31c>
    8558:	35bff804 	addi	r22,r6,-32
    855c:	b000bc16 	blt	r22,zero,8850 <_fpadd_parts+0x384>
    8560:	8596d83a 	srl	r11,r16,r22
    8564:	0019883a 	mov	r12,zero
    8568:	0013883a 	mov	r9,zero
    856c:	01000044 	movi	r4,1
    8570:	0015883a 	mov	r10,zero
    8574:	b000be16 	blt	r22,zero,8870 <_fpadd_parts+0x3a4>
    8578:	2590983a 	sll	r8,r4,r22
    857c:	000f883a 	mov	r7,zero
    8580:	00bfffc4 	movi	r2,-1
    8584:	3889883a 	add	r4,r7,r2
    8588:	408b883a 	add	r5,r8,r2
    858c:	21cd803a 	cmpltu	r6,r4,r7
    8590:	314b883a 	add	r5,r6,r5
    8594:	7904703a 	and	r2,r15,r4
    8598:	8146703a 	and	r3,r16,r5
    859c:	10c4b03a 	or	r2,r2,r3
    85a0:	10000226 	beq	r2,zero,85ac <_fpadd_parts+0xe0>
    85a4:	02400044 	movi	r9,1
    85a8:	0015883a 	mov	r10,zero
    85ac:	5a5eb03a 	or	r15,r11,r9
    85b0:	62a0b03a 	or	r16,r12,r10
    85b4:	99400117 	ldw	r5,4(r19)
    85b8:	a8800117 	ldw	r2,4(r21)
    85bc:	28806e26 	beq	r5,r2,8778 <_fpadd_parts+0x2ac>
    85c0:	28006626 	beq	r5,zero,875c <_fpadd_parts+0x290>
    85c4:	7c45c83a 	sub	r2,r15,r17
    85c8:	7889803a 	cmpltu	r4,r15,r2
    85cc:	8487c83a 	sub	r3,r16,r18
    85d0:	1909c83a 	sub	r4,r3,r4
    85d4:	100d883a 	mov	r6,r2
    85d8:	200f883a 	mov	r7,r4
    85dc:	38007716 	blt	r7,zero,87bc <_fpadd_parts+0x2f0>
    85e0:	a5c00215 	stw	r23,8(r20)
    85e4:	a1c00415 	stw	r7,16(r20)
    85e8:	a0000115 	stw	zero,4(r20)
    85ec:	a1800315 	stw	r6,12(r20)
    85f0:	a2000317 	ldw	r8,12(r20)
    85f4:	a2400417 	ldw	r9,16(r20)
    85f8:	00bfffc4 	movi	r2,-1
    85fc:	408b883a 	add	r5,r8,r2
    8600:	2a09803a 	cmpltu	r4,r5,r8
    8604:	488d883a 	add	r6,r9,r2
    8608:	01c40034 	movhi	r7,4096
    860c:	39ffffc4 	addi	r7,r7,-1
    8610:	218d883a 	add	r6,r4,r6
    8614:	39801736 	bltu	r7,r6,8674 <_fpadd_parts+0x1a8>
    8618:	31c06526 	beq	r6,r7,87b0 <_fpadd_parts+0x2e4>
    861c:	a3000217 	ldw	r12,8(r20)
    8620:	4209883a 	add	r4,r8,r8
    8624:	00bfffc4 	movi	r2,-1
    8628:	220f803a 	cmpltu	r7,r4,r8
    862c:	4a4b883a 	add	r5,r9,r9
    8630:	394f883a 	add	r7,r7,r5
    8634:	2095883a 	add	r10,r4,r2
    8638:	3897883a 	add	r11,r7,r2
    863c:	510d803a 	cmpltu	r6,r10,r4
    8640:	6099883a 	add	r12,r12,r2
    8644:	32d7883a 	add	r11,r6,r11
    8648:	00840034 	movhi	r2,4096
    864c:	10bfffc4 	addi	r2,r2,-1
    8650:	2011883a 	mov	r8,r4
    8654:	3813883a 	mov	r9,r7
    8658:	a1000315 	stw	r4,12(r20)
    865c:	a1c00415 	stw	r7,16(r20)
    8660:	a3000215 	stw	r12,8(r20)
    8664:	12c00336 	bltu	r2,r11,8674 <_fpadd_parts+0x1a8>
    8668:	58bfed1e 	bne	r11,r2,8620 <_fpadd_parts+0x154>
    866c:	00bfff84 	movi	r2,-2
    8670:	12bfeb2e 	bgeu	r2,r10,8620 <_fpadd_parts+0x154>
    8674:	a2800417 	ldw	r10,16(r20)
    8678:	008000c4 	movi	r2,3
    867c:	00c80034 	movhi	r3,8192
    8680:	18ffffc4 	addi	r3,r3,-1
    8684:	a2400317 	ldw	r9,12(r20)
    8688:	a0800015 	stw	r2,0(r20)
    868c:	1a802336 	bltu	r3,r10,871c <_fpadd_parts+0x250>
    8690:	a027883a 	mov	r19,r20
    8694:	9805883a 	mov	r2,r19
    8698:	ddc00717 	ldw	r23,28(sp)
    869c:	dd800617 	ldw	r22,24(sp)
    86a0:	dd400517 	ldw	r21,20(sp)
    86a4:	dd000417 	ldw	r20,16(sp)
    86a8:	dcc00317 	ldw	r19,12(sp)
    86ac:	dc800217 	ldw	r18,8(sp)
    86b0:	dc400117 	ldw	r17,4(sp)
    86b4:	dc000017 	ldw	r16,0(sp)
    86b8:	dec00804 	addi	sp,sp,32
    86bc:	f800283a 	ret
    86c0:	20fff41e 	bne	r4,r3,8694 <_fpadd_parts+0x1c8>
    86c4:	31000015 	stw	r4,0(r6)
    86c8:	98800117 	ldw	r2,4(r19)
    86cc:	30800115 	stw	r2,4(r6)
    86d0:	98c00217 	ldw	r3,8(r19)
    86d4:	30c00215 	stw	r3,8(r6)
    86d8:	98800317 	ldw	r2,12(r19)
    86dc:	30800315 	stw	r2,12(r6)
    86e0:	98c00417 	ldw	r3,16(r19)
    86e4:	30c00415 	stw	r3,16(r6)
    86e8:	98800117 	ldw	r2,4(r19)
    86ec:	28c00117 	ldw	r3,4(r5)
    86f0:	3027883a 	mov	r19,r6
    86f4:	10c4703a 	and	r2,r2,r3
    86f8:	30800115 	stw	r2,4(r6)
    86fc:	003fe506 	br	8694 <_fpadd_parts+0x1c8>
    8700:	1dc02616 	blt	r3,r23,879c <_fpadd_parts+0x2d0>
    8704:	0023883a 	mov	r17,zero
    8708:	182f883a 	mov	r23,r3
    870c:	0025883a 	mov	r18,zero
    8710:	003fa806 	br	85b4 <_fpadd_parts+0xe8>
    8714:	a827883a 	mov	r19,r21
    8718:	003fde06 	br	8694 <_fpadd_parts+0x1c8>
    871c:	01800044 	movi	r6,1
    8720:	500497fa 	slli	r2,r10,31
    8724:	4808d07a 	srli	r4,r9,1
    8728:	518ad83a 	srl	r5,r10,r6
    872c:	a2000217 	ldw	r8,8(r20)
    8730:	1108b03a 	or	r4,r2,r4
    8734:	0007883a 	mov	r3,zero
    8738:	4984703a 	and	r2,r9,r6
    873c:	208cb03a 	or	r6,r4,r2
    8740:	28ceb03a 	or	r7,r5,r3
    8744:	42000044 	addi	r8,r8,1
    8748:	a027883a 	mov	r19,r20
    874c:	a1c00415 	stw	r7,16(r20)
    8750:	a2000215 	stw	r8,8(r20)
    8754:	a1800315 	stw	r6,12(r20)
    8758:	003fce06 	br	8694 <_fpadd_parts+0x1c8>
    875c:	8bc5c83a 	sub	r2,r17,r15
    8760:	8889803a 	cmpltu	r4,r17,r2
    8764:	9407c83a 	sub	r3,r18,r16
    8768:	1909c83a 	sub	r4,r3,r4
    876c:	100d883a 	mov	r6,r2
    8770:	200f883a 	mov	r7,r4
    8774:	003f9906 	br	85dc <_fpadd_parts+0x110>
    8778:	7c45883a 	add	r2,r15,r17
    877c:	13c9803a 	cmpltu	r4,r2,r15
    8780:	8487883a 	add	r3,r16,r18
    8784:	20c9883a 	add	r4,r4,r3
    8788:	a1400115 	stw	r5,4(r20)
    878c:	a5c00215 	stw	r23,8(r20)
    8790:	a0800315 	stw	r2,12(r20)
    8794:	a1000415 	stw	r4,16(r20)
    8798:	003fb606 	br	8674 <_fpadd_parts+0x1a8>
    879c:	001f883a 	mov	r15,zero
    87a0:	0021883a 	mov	r16,zero
    87a4:	003f8306 	br	85b4 <_fpadd_parts+0xe8>
    87a8:	018dc83a 	sub	r6,zero,r6
    87ac:	003f6706 	br	854c <_fpadd_parts+0x80>
    87b0:	00bfff84 	movi	r2,-2
    87b4:	117faf36 	bltu	r2,r5,8674 <_fpadd_parts+0x1a8>
    87b8:	003f9806 	br	861c <_fpadd_parts+0x150>
    87bc:	0005883a 	mov	r2,zero
    87c0:	1189c83a 	sub	r4,r2,r6
    87c4:	1105803a 	cmpltu	r2,r2,r4
    87c8:	01cbc83a 	sub	r5,zero,r7
    87cc:	2885c83a 	sub	r2,r5,r2
    87d0:	01800044 	movi	r6,1
    87d4:	a1800115 	stw	r6,4(r20)
    87d8:	a5c00215 	stw	r23,8(r20)
    87dc:	a1000315 	stw	r4,12(r20)
    87e0:	a0800415 	stw	r2,16(r20)
    87e4:	003f8206 	br	85f0 <_fpadd_parts+0x124>
    87e8:	203f7226 	beq	r4,zero,85b4 <_fpadd_parts+0xe8>
    87ec:	35bff804 	addi	r22,r6,-32
    87f0:	b9af883a 	add	r23,r23,r6
    87f4:	b0003116 	blt	r22,zero,88bc <_fpadd_parts+0x3f0>
    87f8:	959ad83a 	srl	r13,r18,r22
    87fc:	001d883a 	mov	r14,zero
    8800:	000f883a 	mov	r7,zero
    8804:	01000044 	movi	r4,1
    8808:	0011883a 	mov	r8,zero
    880c:	b0002516 	blt	r22,zero,88a4 <_fpadd_parts+0x3d8>
    8810:	2594983a 	sll	r10,r4,r22
    8814:	0013883a 	mov	r9,zero
    8818:	00bfffc4 	movi	r2,-1
    881c:	4889883a 	add	r4,r9,r2
    8820:	508b883a 	add	r5,r10,r2
    8824:	224d803a 	cmpltu	r6,r4,r9
    8828:	314b883a 	add	r5,r6,r5
    882c:	8904703a 	and	r2,r17,r4
    8830:	9146703a 	and	r3,r18,r5
    8834:	10c4b03a 	or	r2,r2,r3
    8838:	10000226 	beq	r2,zero,8844 <_fpadd_parts+0x378>
    883c:	01c00044 	movi	r7,1
    8840:	0011883a 	mov	r8,zero
    8844:	69e2b03a 	or	r17,r13,r7
    8848:	7224b03a 	or	r18,r14,r8
    884c:	003f5906 	br	85b4 <_fpadd_parts+0xe8>
    8850:	8407883a 	add	r3,r16,r16
    8854:	008007c4 	movi	r2,31
    8858:	1185c83a 	sub	r2,r2,r6
    885c:	1886983a 	sll	r3,r3,r2
    8860:	7996d83a 	srl	r11,r15,r6
    8864:	8198d83a 	srl	r12,r16,r6
    8868:	1ad6b03a 	or	r11,r3,r11
    886c:	003f3e06 	br	8568 <_fpadd_parts+0x9c>
    8870:	2006d07a 	srli	r3,r4,1
    8874:	008007c4 	movi	r2,31
    8878:	1185c83a 	sub	r2,r2,r6
    887c:	1890d83a 	srl	r8,r3,r2
    8880:	218e983a 	sll	r7,r4,r6
    8884:	003f3e06 	br	8580 <_fpadd_parts+0xb4>
    8888:	113f821e 	bne	r2,r4,8694 <_fpadd_parts+0x1c8>
    888c:	28c00117 	ldw	r3,4(r5)
    8890:	98800117 	ldw	r2,4(r19)
    8894:	10ff7f26 	beq	r2,r3,8694 <_fpadd_parts+0x1c8>
    8898:	04c00074 	movhi	r19,1
    889c:	9cc09304 	addi	r19,r19,588
    88a0:	003f7c06 	br	8694 <_fpadd_parts+0x1c8>
    88a4:	2006d07a 	srli	r3,r4,1
    88a8:	008007c4 	movi	r2,31
    88ac:	1185c83a 	sub	r2,r2,r6
    88b0:	1894d83a 	srl	r10,r3,r2
    88b4:	2192983a 	sll	r9,r4,r6
    88b8:	003fd706 	br	8818 <_fpadd_parts+0x34c>
    88bc:	9487883a 	add	r3,r18,r18
    88c0:	008007c4 	movi	r2,31
    88c4:	1185c83a 	sub	r2,r2,r6
    88c8:	1886983a 	sll	r3,r3,r2
    88cc:	899ad83a 	srl	r13,r17,r6
    88d0:	919cd83a 	srl	r14,r18,r6
    88d4:	1b5ab03a 	or	r13,r3,r13
    88d8:	003fc906 	br	8800 <_fpadd_parts+0x334>

000088dc <__subdf3>:
    88dc:	deffea04 	addi	sp,sp,-88
    88e0:	dcc01415 	stw	r19,80(sp)
    88e4:	dcc00404 	addi	r19,sp,16
    88e8:	2011883a 	mov	r8,r4
    88ec:	2813883a 	mov	r9,r5
    88f0:	dc401315 	stw	r17,76(sp)
    88f4:	d809883a 	mov	r4,sp
    88f8:	980b883a 	mov	r5,r19
    88fc:	dc400904 	addi	r17,sp,36
    8900:	dfc01515 	stw	ra,84(sp)
    8904:	da400115 	stw	r9,4(sp)
    8908:	d9c00315 	stw	r7,12(sp)
    890c:	da000015 	stw	r8,0(sp)
    8910:	d9800215 	stw	r6,8(sp)
    8914:	0009b700 	call	9b70 <__unpack_d>
    8918:	d9000204 	addi	r4,sp,8
    891c:	880b883a 	mov	r5,r17
    8920:	0009b700 	call	9b70 <__unpack_d>
    8924:	d8800a17 	ldw	r2,40(sp)
    8928:	880b883a 	mov	r5,r17
    892c:	9809883a 	mov	r4,r19
    8930:	d9800e04 	addi	r6,sp,56
    8934:	1080005c 	xori	r2,r2,1
    8938:	d8800a15 	stw	r2,40(sp)
    893c:	00084cc0 	call	84cc <_fpadd_parts>
    8940:	1009883a 	mov	r4,r2
    8944:	000985c0 	call	985c <__pack_d>
    8948:	dfc01517 	ldw	ra,84(sp)
    894c:	dcc01417 	ldw	r19,80(sp)
    8950:	dc401317 	ldw	r17,76(sp)
    8954:	dec01604 	addi	sp,sp,88
    8958:	f800283a 	ret

0000895c <__adddf3>:
    895c:	deffea04 	addi	sp,sp,-88
    8960:	dcc01415 	stw	r19,80(sp)
    8964:	dcc00404 	addi	r19,sp,16
    8968:	2011883a 	mov	r8,r4
    896c:	2813883a 	mov	r9,r5
    8970:	dc401315 	stw	r17,76(sp)
    8974:	d809883a 	mov	r4,sp
    8978:	980b883a 	mov	r5,r19
    897c:	dc400904 	addi	r17,sp,36
    8980:	dfc01515 	stw	ra,84(sp)
    8984:	da400115 	stw	r9,4(sp)
    8988:	d9c00315 	stw	r7,12(sp)
    898c:	da000015 	stw	r8,0(sp)
    8990:	d9800215 	stw	r6,8(sp)
    8994:	0009b700 	call	9b70 <__unpack_d>
    8998:	d9000204 	addi	r4,sp,8
    899c:	880b883a 	mov	r5,r17
    89a0:	0009b700 	call	9b70 <__unpack_d>
    89a4:	d9800e04 	addi	r6,sp,56
    89a8:	9809883a 	mov	r4,r19
    89ac:	880b883a 	mov	r5,r17
    89b0:	00084cc0 	call	84cc <_fpadd_parts>
    89b4:	1009883a 	mov	r4,r2
    89b8:	000985c0 	call	985c <__pack_d>
    89bc:	dfc01517 	ldw	ra,84(sp)
    89c0:	dcc01417 	ldw	r19,80(sp)
    89c4:	dc401317 	ldw	r17,76(sp)
    89c8:	dec01604 	addi	sp,sp,88
    89cc:	f800283a 	ret

000089d0 <__muldf3>:
    89d0:	deffe004 	addi	sp,sp,-128
    89d4:	dc401815 	stw	r17,96(sp)
    89d8:	dc400404 	addi	r17,sp,16
    89dc:	2011883a 	mov	r8,r4
    89e0:	2813883a 	mov	r9,r5
    89e4:	dc001715 	stw	r16,92(sp)
    89e8:	d809883a 	mov	r4,sp
    89ec:	880b883a 	mov	r5,r17
    89f0:	dc000904 	addi	r16,sp,36
    89f4:	dfc01f15 	stw	ra,124(sp)
    89f8:	da400115 	stw	r9,4(sp)
    89fc:	d9c00315 	stw	r7,12(sp)
    8a00:	da000015 	stw	r8,0(sp)
    8a04:	d9800215 	stw	r6,8(sp)
    8a08:	ddc01e15 	stw	r23,120(sp)
    8a0c:	dd801d15 	stw	r22,116(sp)
    8a10:	dd401c15 	stw	r21,112(sp)
    8a14:	dd001b15 	stw	r20,108(sp)
    8a18:	dcc01a15 	stw	r19,104(sp)
    8a1c:	dc801915 	stw	r18,100(sp)
    8a20:	0009b700 	call	9b70 <__unpack_d>
    8a24:	d9000204 	addi	r4,sp,8
    8a28:	800b883a 	mov	r5,r16
    8a2c:	0009b700 	call	9b70 <__unpack_d>
    8a30:	d9000417 	ldw	r4,16(sp)
    8a34:	00800044 	movi	r2,1
    8a38:	1100102e 	bgeu	r2,r4,8a7c <__muldf3+0xac>
    8a3c:	d8c00917 	ldw	r3,36(sp)
    8a40:	10c0062e 	bgeu	r2,r3,8a5c <__muldf3+0x8c>
    8a44:	00800104 	movi	r2,4
    8a48:	20800a26 	beq	r4,r2,8a74 <__muldf3+0xa4>
    8a4c:	1880cc26 	beq	r3,r2,8d80 <__muldf3+0x3b0>
    8a50:	00800084 	movi	r2,2
    8a54:	20800926 	beq	r4,r2,8a7c <__muldf3+0xac>
    8a58:	1880191e 	bne	r3,r2,8ac0 <__muldf3+0xf0>
    8a5c:	d8c00a17 	ldw	r3,40(sp)
    8a60:	d8800517 	ldw	r2,20(sp)
    8a64:	8009883a 	mov	r4,r16
    8a68:	10c4c03a 	cmpne	r2,r2,r3
    8a6c:	d8800a15 	stw	r2,40(sp)
    8a70:	00000706 	br	8a90 <__muldf3+0xc0>
    8a74:	00800084 	movi	r2,2
    8a78:	1880c326 	beq	r3,r2,8d88 <__muldf3+0x3b8>
    8a7c:	d8800517 	ldw	r2,20(sp)
    8a80:	d8c00a17 	ldw	r3,40(sp)
    8a84:	8809883a 	mov	r4,r17
    8a88:	10c4c03a 	cmpne	r2,r2,r3
    8a8c:	d8800515 	stw	r2,20(sp)
    8a90:	000985c0 	call	985c <__pack_d>
    8a94:	dfc01f17 	ldw	ra,124(sp)
    8a98:	ddc01e17 	ldw	r23,120(sp)
    8a9c:	dd801d17 	ldw	r22,116(sp)
    8aa0:	dd401c17 	ldw	r21,112(sp)
    8aa4:	dd001b17 	ldw	r20,108(sp)
    8aa8:	dcc01a17 	ldw	r19,104(sp)
    8aac:	dc801917 	ldw	r18,100(sp)
    8ab0:	dc401817 	ldw	r17,96(sp)
    8ab4:	dc001717 	ldw	r16,92(sp)
    8ab8:	dec02004 	addi	sp,sp,128
    8abc:	f800283a 	ret
    8ac0:	dd800717 	ldw	r22,28(sp)
    8ac4:	dc800c17 	ldw	r18,48(sp)
    8ac8:	002b883a 	mov	r21,zero
    8acc:	0023883a 	mov	r17,zero
    8ad0:	a80b883a 	mov	r5,r21
    8ad4:	b00d883a 	mov	r6,r22
    8ad8:	880f883a 	mov	r7,r17
    8adc:	ddc00817 	ldw	r23,32(sp)
    8ae0:	dcc00d17 	ldw	r19,52(sp)
    8ae4:	9009883a 	mov	r4,r18
    8ae8:	00097440 	call	9744 <__muldi3>
    8aec:	001b883a 	mov	r13,zero
    8af0:	680f883a 	mov	r7,r13
    8af4:	b009883a 	mov	r4,r22
    8af8:	000b883a 	mov	r5,zero
    8afc:	980d883a 	mov	r6,r19
    8b00:	b82d883a 	mov	r22,r23
    8b04:	002f883a 	mov	r23,zero
    8b08:	db401615 	stw	r13,88(sp)
    8b0c:	d8801315 	stw	r2,76(sp)
    8b10:	d8c01415 	stw	r3,80(sp)
    8b14:	dcc01515 	stw	r19,84(sp)
    8b18:	00097440 	call	9744 <__muldi3>
    8b1c:	b00d883a 	mov	r6,r22
    8b20:	000b883a 	mov	r5,zero
    8b24:	9009883a 	mov	r4,r18
    8b28:	b80f883a 	mov	r7,r23
    8b2c:	1021883a 	mov	r16,r2
    8b30:	1823883a 	mov	r17,r3
    8b34:	00097440 	call	9744 <__muldi3>
    8b38:	8085883a 	add	r2,r16,r2
    8b3c:	140d803a 	cmpltu	r6,r2,r16
    8b40:	88c7883a 	add	r3,r17,r3
    8b44:	30cd883a 	add	r6,r6,r3
    8b48:	1029883a 	mov	r20,r2
    8b4c:	302b883a 	mov	r21,r6
    8b50:	da801317 	ldw	r10,76(sp)
    8b54:	dac01417 	ldw	r11,80(sp)
    8b58:	db001517 	ldw	r12,84(sp)
    8b5c:	db401617 	ldw	r13,88(sp)
    8b60:	3440612e 	bgeu	r6,r17,8ce8 <__muldf3+0x318>
    8b64:	0009883a 	mov	r4,zero
    8b68:	5105883a 	add	r2,r10,r4
    8b6c:	128d803a 	cmpltu	r6,r2,r10
    8b70:	5d07883a 	add	r3,r11,r20
    8b74:	30cd883a 	add	r6,r6,r3
    8b78:	0021883a 	mov	r16,zero
    8b7c:	04400044 	movi	r17,1
    8b80:	1025883a 	mov	r18,r2
    8b84:	3027883a 	mov	r19,r6
    8b88:	32c06236 	bltu	r6,r11,8d14 <__muldf3+0x344>
    8b8c:	59807a26 	beq	r11,r6,8d78 <__muldf3+0x3a8>
    8b90:	680b883a 	mov	r5,r13
    8b94:	b80f883a 	mov	r7,r23
    8b98:	6009883a 	mov	r4,r12
    8b9c:	b00d883a 	mov	r6,r22
    8ba0:	00097440 	call	9744 <__muldi3>
    8ba4:	1009883a 	mov	r4,r2
    8ba8:	000f883a 	mov	r7,zero
    8bac:	1545883a 	add	r2,r2,r21
    8bb0:	1111803a 	cmpltu	r8,r2,r4
    8bb4:	19c7883a 	add	r3,r3,r7
    8bb8:	40c7883a 	add	r3,r8,r3
    8bbc:	88cb883a 	add	r5,r17,r3
    8bc0:	d8c00617 	ldw	r3,24(sp)
    8bc4:	8089883a 	add	r4,r16,r2
    8bc8:	d8800b17 	ldw	r2,44(sp)
    8bcc:	18c00104 	addi	r3,r3,4
    8bd0:	240d803a 	cmpltu	r6,r4,r16
    8bd4:	10c7883a 	add	r3,r2,r3
    8bd8:	2013883a 	mov	r9,r4
    8bdc:	d8800a17 	ldw	r2,40(sp)
    8be0:	d9000517 	ldw	r4,20(sp)
    8be4:	314d883a 	add	r6,r6,r5
    8be8:	3015883a 	mov	r10,r6
    8bec:	2088c03a 	cmpne	r4,r4,r2
    8bf0:	00880034 	movhi	r2,8192
    8bf4:	10bfffc4 	addi	r2,r2,-1
    8bf8:	d9000f15 	stw	r4,60(sp)
    8bfc:	d8c01015 	stw	r3,64(sp)
    8c00:	1180162e 	bgeu	r2,r6,8c5c <__muldf3+0x28c>
    8c04:	1811883a 	mov	r8,r3
    8c08:	101f883a 	mov	r15,r2
    8c0c:	980497fa 	slli	r2,r19,31
    8c10:	9016d07a 	srli	r11,r18,1
    8c14:	500697fa 	slli	r3,r10,31
    8c18:	480cd07a 	srli	r6,r9,1
    8c1c:	500ed07a 	srli	r7,r10,1
    8c20:	12d6b03a 	or	r11,r2,r11
    8c24:	00800044 	movi	r2,1
    8c28:	198cb03a 	or	r6,r3,r6
    8c2c:	4888703a 	and	r4,r9,r2
    8c30:	9818d07a 	srli	r12,r19,1
    8c34:	001b883a 	mov	r13,zero
    8c38:	03a00034 	movhi	r14,32768
    8c3c:	3013883a 	mov	r9,r6
    8c40:	3815883a 	mov	r10,r7
    8c44:	4091883a 	add	r8,r8,r2
    8c48:	20000226 	beq	r4,zero,8c54 <__muldf3+0x284>
    8c4c:	5b64b03a 	or	r18,r11,r13
    8c50:	63a6b03a 	or	r19,r12,r14
    8c54:	7abfed36 	bltu	r15,r10,8c0c <__muldf3+0x23c>
    8c58:	da001015 	stw	r8,64(sp)
    8c5c:	00840034 	movhi	r2,4096
    8c60:	10bfffc4 	addi	r2,r2,-1
    8c64:	12801436 	bltu	r2,r10,8cb8 <__muldf3+0x2e8>
    8c68:	da001017 	ldw	r8,64(sp)
    8c6c:	101f883a 	mov	r15,r2
    8c70:	4a45883a 	add	r2,r9,r9
    8c74:	124d803a 	cmpltu	r6,r2,r9
    8c78:	5287883a 	add	r3,r10,r10
    8c7c:	9497883a 	add	r11,r18,r18
    8c80:	5c8f803a 	cmpltu	r7,r11,r18
    8c84:	9cd9883a 	add	r12,r19,r19
    8c88:	01000044 	movi	r4,1
    8c8c:	30cd883a 	add	r6,r6,r3
    8c90:	3b0f883a 	add	r7,r7,r12
    8c94:	423fffc4 	addi	r8,r8,-1
    8c98:	1013883a 	mov	r9,r2
    8c9c:	3015883a 	mov	r10,r6
    8ca0:	111ab03a 	or	r13,r2,r4
    8ca4:	98003016 	blt	r19,zero,8d68 <__muldf3+0x398>
    8ca8:	5825883a 	mov	r18,r11
    8cac:	3827883a 	mov	r19,r7
    8cb0:	7abfef2e 	bgeu	r15,r10,8c70 <__muldf3+0x2a0>
    8cb4:	da001015 	stw	r8,64(sp)
    8cb8:	00803fc4 	movi	r2,255
    8cbc:	488e703a 	and	r7,r9,r2
    8cc0:	00802004 	movi	r2,128
    8cc4:	0007883a 	mov	r3,zero
    8cc8:	0011883a 	mov	r8,zero
    8ccc:	38801826 	beq	r7,r2,8d30 <__muldf3+0x360>
    8cd0:	008000c4 	movi	r2,3
    8cd4:	d9000e04 	addi	r4,sp,56
    8cd8:	da801215 	stw	r10,72(sp)
    8cdc:	d8800e15 	stw	r2,56(sp)
    8ce0:	da401115 	stw	r9,68(sp)
    8ce4:	003f6a06 	br	8a90 <__muldf3+0xc0>
    8ce8:	89802126 	beq	r17,r6,8d70 <__muldf3+0x3a0>
    8cec:	0009883a 	mov	r4,zero
    8cf0:	5105883a 	add	r2,r10,r4
    8cf4:	128d803a 	cmpltu	r6,r2,r10
    8cf8:	5d07883a 	add	r3,r11,r20
    8cfc:	30cd883a 	add	r6,r6,r3
    8d00:	0021883a 	mov	r16,zero
    8d04:	0023883a 	mov	r17,zero
    8d08:	1025883a 	mov	r18,r2
    8d0c:	3027883a 	mov	r19,r6
    8d10:	32ff9e2e 	bgeu	r6,r11,8b8c <__muldf3+0x1bc>
    8d14:	00800044 	movi	r2,1
    8d18:	8089883a 	add	r4,r16,r2
    8d1c:	240d803a 	cmpltu	r6,r4,r16
    8d20:	344d883a 	add	r6,r6,r17
    8d24:	2021883a 	mov	r16,r4
    8d28:	3023883a 	mov	r17,r6
    8d2c:	003f9806 	br	8b90 <__muldf3+0x1c0>
    8d30:	403fe71e 	bne	r8,zero,8cd0 <__muldf3+0x300>
    8d34:	01004004 	movi	r4,256
    8d38:	4904703a 	and	r2,r9,r4
    8d3c:	10c4b03a 	or	r2,r2,r3
    8d40:	103fe31e 	bne	r2,zero,8cd0 <__muldf3+0x300>
    8d44:	94c4b03a 	or	r2,r18,r19
    8d48:	103fe126 	beq	r2,zero,8cd0 <__muldf3+0x300>
    8d4c:	49c5883a 	add	r2,r9,r7
    8d50:	1251803a 	cmpltu	r8,r2,r9
    8d54:	4291883a 	add	r8,r8,r10
    8d58:	013fc004 	movi	r4,-256
    8d5c:	1112703a 	and	r9,r2,r4
    8d60:	4015883a 	mov	r10,r8
    8d64:	003fda06 	br	8cd0 <__muldf3+0x300>
    8d68:	6813883a 	mov	r9,r13
    8d6c:	003fce06 	br	8ca8 <__muldf3+0x2d8>
    8d70:	143f7c36 	bltu	r2,r16,8b64 <__muldf3+0x194>
    8d74:	003fdd06 	br	8cec <__muldf3+0x31c>
    8d78:	12bf852e 	bgeu	r2,r10,8b90 <__muldf3+0x1c0>
    8d7c:	003fe506 	br	8d14 <__muldf3+0x344>
    8d80:	00800084 	movi	r2,2
    8d84:	20bf351e 	bne	r4,r2,8a5c <__muldf3+0x8c>
    8d88:	01000074 	movhi	r4,1
    8d8c:	21009304 	addi	r4,r4,588
    8d90:	003f3f06 	br	8a90 <__muldf3+0xc0>

00008d94 <__divdf3>:
    8d94:	deffed04 	addi	sp,sp,-76
    8d98:	dcc01115 	stw	r19,68(sp)
    8d9c:	dcc00404 	addi	r19,sp,16
    8da0:	2011883a 	mov	r8,r4
    8da4:	2813883a 	mov	r9,r5
    8da8:	dc000e15 	stw	r16,56(sp)
    8dac:	d809883a 	mov	r4,sp
    8db0:	980b883a 	mov	r5,r19
    8db4:	dc000904 	addi	r16,sp,36
    8db8:	dfc01215 	stw	ra,72(sp)
    8dbc:	da400115 	stw	r9,4(sp)
    8dc0:	d9c00315 	stw	r7,12(sp)
    8dc4:	da000015 	stw	r8,0(sp)
    8dc8:	d9800215 	stw	r6,8(sp)
    8dcc:	dc801015 	stw	r18,64(sp)
    8dd0:	dc400f15 	stw	r17,60(sp)
    8dd4:	0009b700 	call	9b70 <__unpack_d>
    8dd8:	d9000204 	addi	r4,sp,8
    8ddc:	800b883a 	mov	r5,r16
    8de0:	0009b700 	call	9b70 <__unpack_d>
    8de4:	d9000417 	ldw	r4,16(sp)
    8de8:	00800044 	movi	r2,1
    8dec:	11000b2e 	bgeu	r2,r4,8e1c <__divdf3+0x88>
    8df0:	d9400917 	ldw	r5,36(sp)
    8df4:	1140762e 	bgeu	r2,r5,8fd0 <__divdf3+0x23c>
    8df8:	d8800517 	ldw	r2,20(sp)
    8dfc:	d8c00a17 	ldw	r3,40(sp)
    8e00:	01800104 	movi	r6,4
    8e04:	10c4f03a 	xor	r2,r2,r3
    8e08:	d8800515 	stw	r2,20(sp)
    8e0c:	21800226 	beq	r4,r6,8e18 <__divdf3+0x84>
    8e10:	00800084 	movi	r2,2
    8e14:	2080141e 	bne	r4,r2,8e68 <__divdf3+0xd4>
    8e18:	29000926 	beq	r5,r4,8e40 <__divdf3+0xac>
    8e1c:	9809883a 	mov	r4,r19
    8e20:	000985c0 	call	985c <__pack_d>
    8e24:	dfc01217 	ldw	ra,72(sp)
    8e28:	dcc01117 	ldw	r19,68(sp)
    8e2c:	dc801017 	ldw	r18,64(sp)
    8e30:	dc400f17 	ldw	r17,60(sp)
    8e34:	dc000e17 	ldw	r16,56(sp)
    8e38:	dec01304 	addi	sp,sp,76
    8e3c:	f800283a 	ret
    8e40:	01000074 	movhi	r4,1
    8e44:	21009304 	addi	r4,r4,588
    8e48:	000985c0 	call	985c <__pack_d>
    8e4c:	dfc01217 	ldw	ra,72(sp)
    8e50:	dcc01117 	ldw	r19,68(sp)
    8e54:	dc801017 	ldw	r18,64(sp)
    8e58:	dc400f17 	ldw	r17,60(sp)
    8e5c:	dc000e17 	ldw	r16,56(sp)
    8e60:	dec01304 	addi	sp,sp,76
    8e64:	f800283a 	ret
    8e68:	29805b26 	beq	r5,r6,8fd8 <__divdf3+0x244>
    8e6c:	28802d26 	beq	r5,r2,8f24 <__divdf3+0x190>
    8e70:	d8c00617 	ldw	r3,24(sp)
    8e74:	d8800b17 	ldw	r2,44(sp)
    8e78:	d9c00817 	ldw	r7,32(sp)
    8e7c:	dc400d17 	ldw	r17,52(sp)
    8e80:	188bc83a 	sub	r5,r3,r2
    8e84:	d9800717 	ldw	r6,28(sp)
    8e88:	dc000c17 	ldw	r16,48(sp)
    8e8c:	d9400615 	stw	r5,24(sp)
    8e90:	3c403836 	bltu	r7,r17,8f74 <__divdf3+0x1e0>
    8e94:	89c03626 	beq	r17,r7,8f70 <__divdf3+0x1dc>
    8e98:	0015883a 	mov	r10,zero
    8e9c:	001d883a 	mov	r14,zero
    8ea0:	02c40034 	movhi	r11,4096
    8ea4:	001f883a 	mov	r15,zero
    8ea8:	003f883a 	mov	ra,zero
    8eac:	04800f44 	movi	r18,61
    8eb0:	00000f06 	br	8ef0 <__divdf3+0x15c>
    8eb4:	601d883a 	mov	r14,r12
    8eb8:	681f883a 	mov	r15,r13
    8ebc:	400d883a 	mov	r6,r8
    8ec0:	100f883a 	mov	r7,r2
    8ec4:	3191883a 	add	r8,r6,r6
    8ec8:	5808d07a 	srli	r4,r11,1
    8ecc:	4185803a 	cmpltu	r2,r8,r6
    8ed0:	39d3883a 	add	r9,r7,r7
    8ed4:	28c6b03a 	or	r3,r5,r3
    8ed8:	1245883a 	add	r2,r2,r9
    8edc:	1815883a 	mov	r10,r3
    8ee0:	2017883a 	mov	r11,r4
    8ee4:	400d883a 	mov	r6,r8
    8ee8:	100f883a 	mov	r7,r2
    8eec:	fc801726 	beq	ra,r18,8f4c <__divdf3+0x1b8>
    8ef0:	580a97fa 	slli	r5,r11,31
    8ef4:	5006d07a 	srli	r3,r10,1
    8ef8:	ffc00044 	addi	ra,ra,1
    8efc:	3c7ff136 	bltu	r7,r17,8ec4 <__divdf3+0x130>
    8f00:	3411c83a 	sub	r8,r6,r16
    8f04:	3205803a 	cmpltu	r2,r6,r8
    8f08:	3c53c83a 	sub	r9,r7,r17
    8f0c:	7298b03a 	or	r12,r14,r10
    8f10:	7adab03a 	or	r13,r15,r11
    8f14:	4885c83a 	sub	r2,r9,r2
    8f18:	89ffe61e 	bne	r17,r7,8eb4 <__divdf3+0x120>
    8f1c:	343fe936 	bltu	r6,r16,8ec4 <__divdf3+0x130>
    8f20:	003fe406 	br	8eb4 <__divdf3+0x120>
    8f24:	9809883a 	mov	r4,r19
    8f28:	d9800415 	stw	r6,16(sp)
    8f2c:	000985c0 	call	985c <__pack_d>
    8f30:	dfc01217 	ldw	ra,72(sp)
    8f34:	dcc01117 	ldw	r19,68(sp)
    8f38:	dc801017 	ldw	r18,64(sp)
    8f3c:	dc400f17 	ldw	r17,60(sp)
    8f40:	dc000e17 	ldw	r16,56(sp)
    8f44:	dec01304 	addi	sp,sp,76
    8f48:	f800283a 	ret
    8f4c:	00803fc4 	movi	r2,255
    8f50:	7090703a 	and	r8,r14,r2
    8f54:	00802004 	movi	r2,128
    8f58:	0007883a 	mov	r3,zero
    8f5c:	0013883a 	mov	r9,zero
    8f60:	40800d26 	beq	r8,r2,8f98 <__divdf3+0x204>
    8f64:	dbc00815 	stw	r15,32(sp)
    8f68:	db800715 	stw	r14,28(sp)
    8f6c:	003fab06 	br	8e1c <__divdf3+0x88>
    8f70:	343fc92e 	bgeu	r6,r16,8e98 <__divdf3+0x104>
    8f74:	3185883a 	add	r2,r6,r6
    8f78:	1189803a 	cmpltu	r4,r2,r6
    8f7c:	39c7883a 	add	r3,r7,r7
    8f80:	20c9883a 	add	r4,r4,r3
    8f84:	297fffc4 	addi	r5,r5,-1
    8f88:	100d883a 	mov	r6,r2
    8f8c:	200f883a 	mov	r7,r4
    8f90:	d9400615 	stw	r5,24(sp)
    8f94:	003fc006 	br	8e98 <__divdf3+0x104>
    8f98:	483ff21e 	bne	r9,zero,8f64 <__divdf3+0x1d0>
    8f9c:	01004004 	movi	r4,256
    8fa0:	7104703a 	and	r2,r14,r4
    8fa4:	10c4b03a 	or	r2,r2,r3
    8fa8:	103fee1e 	bne	r2,zero,8f64 <__divdf3+0x1d0>
    8fac:	31c4b03a 	or	r2,r6,r7
    8fb0:	103fec26 	beq	r2,zero,8f64 <__divdf3+0x1d0>
    8fb4:	7205883a 	add	r2,r14,r8
    8fb8:	1391803a 	cmpltu	r8,r2,r14
    8fbc:	43d1883a 	add	r8,r8,r15
    8fc0:	013fc004 	movi	r4,-256
    8fc4:	111c703a 	and	r14,r2,r4
    8fc8:	401f883a 	mov	r15,r8
    8fcc:	003fe506 	br	8f64 <__divdf3+0x1d0>
    8fd0:	8009883a 	mov	r4,r16
    8fd4:	003f9206 	br	8e20 <__divdf3+0x8c>
    8fd8:	9809883a 	mov	r4,r19
    8fdc:	d8000715 	stw	zero,28(sp)
    8fe0:	d8000815 	stw	zero,32(sp)
    8fe4:	d8000615 	stw	zero,24(sp)
    8fe8:	003f8d06 	br	8e20 <__divdf3+0x8c>

00008fec <__eqdf2>:
    8fec:	deffef04 	addi	sp,sp,-68
    8ff0:	dc400f15 	stw	r17,60(sp)
    8ff4:	dc400404 	addi	r17,sp,16
    8ff8:	2005883a 	mov	r2,r4
    8ffc:	2807883a 	mov	r3,r5
    9000:	dc000e15 	stw	r16,56(sp)
    9004:	d809883a 	mov	r4,sp
    9008:	880b883a 	mov	r5,r17
    900c:	dc000904 	addi	r16,sp,36
    9010:	d8c00115 	stw	r3,4(sp)
    9014:	d8800015 	stw	r2,0(sp)
    9018:	d9800215 	stw	r6,8(sp)
    901c:	dfc01015 	stw	ra,64(sp)
    9020:	d9c00315 	stw	r7,12(sp)
    9024:	0009b700 	call	9b70 <__unpack_d>
    9028:	d9000204 	addi	r4,sp,8
    902c:	800b883a 	mov	r5,r16
    9030:	0009b700 	call	9b70 <__unpack_d>
    9034:	d8800417 	ldw	r2,16(sp)
    9038:	00c00044 	movi	r3,1
    903c:	180d883a 	mov	r6,r3
    9040:	1880062e 	bgeu	r3,r2,905c <__eqdf2+0x70>
    9044:	d8800917 	ldw	r2,36(sp)
    9048:	8809883a 	mov	r4,r17
    904c:	800b883a 	mov	r5,r16
    9050:	1880022e 	bgeu	r3,r2,905c <__eqdf2+0x70>
    9054:	0009ca80 	call	9ca8 <__fpcmp_parts_d>
    9058:	100d883a 	mov	r6,r2
    905c:	3005883a 	mov	r2,r6
    9060:	dfc01017 	ldw	ra,64(sp)
    9064:	dc400f17 	ldw	r17,60(sp)
    9068:	dc000e17 	ldw	r16,56(sp)
    906c:	dec01104 	addi	sp,sp,68
    9070:	f800283a 	ret

00009074 <__nedf2>:
    9074:	deffef04 	addi	sp,sp,-68
    9078:	dc400f15 	stw	r17,60(sp)
    907c:	dc400404 	addi	r17,sp,16
    9080:	2005883a 	mov	r2,r4
    9084:	2807883a 	mov	r3,r5
    9088:	dc000e15 	stw	r16,56(sp)
    908c:	d809883a 	mov	r4,sp
    9090:	880b883a 	mov	r5,r17
    9094:	dc000904 	addi	r16,sp,36
    9098:	d8c00115 	stw	r3,4(sp)
    909c:	d8800015 	stw	r2,0(sp)
    90a0:	d9800215 	stw	r6,8(sp)
    90a4:	dfc01015 	stw	ra,64(sp)
    90a8:	d9c00315 	stw	r7,12(sp)
    90ac:	0009b700 	call	9b70 <__unpack_d>
    90b0:	d9000204 	addi	r4,sp,8
    90b4:	800b883a 	mov	r5,r16
    90b8:	0009b700 	call	9b70 <__unpack_d>
    90bc:	d8800417 	ldw	r2,16(sp)
    90c0:	00c00044 	movi	r3,1
    90c4:	180d883a 	mov	r6,r3
    90c8:	1880062e 	bgeu	r3,r2,90e4 <__nedf2+0x70>
    90cc:	d8800917 	ldw	r2,36(sp)
    90d0:	8809883a 	mov	r4,r17
    90d4:	800b883a 	mov	r5,r16
    90d8:	1880022e 	bgeu	r3,r2,90e4 <__nedf2+0x70>
    90dc:	0009ca80 	call	9ca8 <__fpcmp_parts_d>
    90e0:	100d883a 	mov	r6,r2
    90e4:	3005883a 	mov	r2,r6
    90e8:	dfc01017 	ldw	ra,64(sp)
    90ec:	dc400f17 	ldw	r17,60(sp)
    90f0:	dc000e17 	ldw	r16,56(sp)
    90f4:	dec01104 	addi	sp,sp,68
    90f8:	f800283a 	ret

000090fc <__gtdf2>:
    90fc:	deffef04 	addi	sp,sp,-68
    9100:	dc400f15 	stw	r17,60(sp)
    9104:	dc400404 	addi	r17,sp,16
    9108:	2005883a 	mov	r2,r4
    910c:	2807883a 	mov	r3,r5
    9110:	dc000e15 	stw	r16,56(sp)
    9114:	d809883a 	mov	r4,sp
    9118:	880b883a 	mov	r5,r17
    911c:	dc000904 	addi	r16,sp,36
    9120:	d8c00115 	stw	r3,4(sp)
    9124:	d8800015 	stw	r2,0(sp)
    9128:	d9800215 	stw	r6,8(sp)
    912c:	dfc01015 	stw	ra,64(sp)
    9130:	d9c00315 	stw	r7,12(sp)
    9134:	0009b700 	call	9b70 <__unpack_d>
    9138:	d9000204 	addi	r4,sp,8
    913c:	800b883a 	mov	r5,r16
    9140:	0009b700 	call	9b70 <__unpack_d>
    9144:	d8800417 	ldw	r2,16(sp)
    9148:	00c00044 	movi	r3,1
    914c:	01bfffc4 	movi	r6,-1
    9150:	1880062e 	bgeu	r3,r2,916c <__gtdf2+0x70>
    9154:	d8800917 	ldw	r2,36(sp)
    9158:	8809883a 	mov	r4,r17
    915c:	800b883a 	mov	r5,r16
    9160:	1880022e 	bgeu	r3,r2,916c <__gtdf2+0x70>
    9164:	0009ca80 	call	9ca8 <__fpcmp_parts_d>
    9168:	100d883a 	mov	r6,r2
    916c:	3005883a 	mov	r2,r6
    9170:	dfc01017 	ldw	ra,64(sp)
    9174:	dc400f17 	ldw	r17,60(sp)
    9178:	dc000e17 	ldw	r16,56(sp)
    917c:	dec01104 	addi	sp,sp,68
    9180:	f800283a 	ret

00009184 <__gedf2>:
    9184:	deffef04 	addi	sp,sp,-68
    9188:	dc400f15 	stw	r17,60(sp)
    918c:	dc400404 	addi	r17,sp,16
    9190:	2005883a 	mov	r2,r4
    9194:	2807883a 	mov	r3,r5
    9198:	dc000e15 	stw	r16,56(sp)
    919c:	d809883a 	mov	r4,sp
    91a0:	880b883a 	mov	r5,r17
    91a4:	dc000904 	addi	r16,sp,36
    91a8:	d8c00115 	stw	r3,4(sp)
    91ac:	d8800015 	stw	r2,0(sp)
    91b0:	d9800215 	stw	r6,8(sp)
    91b4:	dfc01015 	stw	ra,64(sp)
    91b8:	d9c00315 	stw	r7,12(sp)
    91bc:	0009b700 	call	9b70 <__unpack_d>
    91c0:	d9000204 	addi	r4,sp,8
    91c4:	800b883a 	mov	r5,r16
    91c8:	0009b700 	call	9b70 <__unpack_d>
    91cc:	d8800417 	ldw	r2,16(sp)
    91d0:	00c00044 	movi	r3,1
    91d4:	01bfffc4 	movi	r6,-1
    91d8:	1880062e 	bgeu	r3,r2,91f4 <__gedf2+0x70>
    91dc:	d8800917 	ldw	r2,36(sp)
    91e0:	8809883a 	mov	r4,r17
    91e4:	800b883a 	mov	r5,r16
    91e8:	1880022e 	bgeu	r3,r2,91f4 <__gedf2+0x70>
    91ec:	0009ca80 	call	9ca8 <__fpcmp_parts_d>
    91f0:	100d883a 	mov	r6,r2
    91f4:	3005883a 	mov	r2,r6
    91f8:	dfc01017 	ldw	ra,64(sp)
    91fc:	dc400f17 	ldw	r17,60(sp)
    9200:	dc000e17 	ldw	r16,56(sp)
    9204:	dec01104 	addi	sp,sp,68
    9208:	f800283a 	ret

0000920c <__ltdf2>:
    920c:	deffef04 	addi	sp,sp,-68
    9210:	dc400f15 	stw	r17,60(sp)
    9214:	dc400404 	addi	r17,sp,16
    9218:	2005883a 	mov	r2,r4
    921c:	2807883a 	mov	r3,r5
    9220:	dc000e15 	stw	r16,56(sp)
    9224:	d809883a 	mov	r4,sp
    9228:	880b883a 	mov	r5,r17
    922c:	dc000904 	addi	r16,sp,36
    9230:	d8c00115 	stw	r3,4(sp)
    9234:	d8800015 	stw	r2,0(sp)
    9238:	d9800215 	stw	r6,8(sp)
    923c:	dfc01015 	stw	ra,64(sp)
    9240:	d9c00315 	stw	r7,12(sp)
    9244:	0009b700 	call	9b70 <__unpack_d>
    9248:	d9000204 	addi	r4,sp,8
    924c:	800b883a 	mov	r5,r16
    9250:	0009b700 	call	9b70 <__unpack_d>
    9254:	d8800417 	ldw	r2,16(sp)
    9258:	00c00044 	movi	r3,1
    925c:	180d883a 	mov	r6,r3
    9260:	1880062e 	bgeu	r3,r2,927c <__ltdf2+0x70>
    9264:	d8800917 	ldw	r2,36(sp)
    9268:	8809883a 	mov	r4,r17
    926c:	800b883a 	mov	r5,r16
    9270:	1880022e 	bgeu	r3,r2,927c <__ltdf2+0x70>
    9274:	0009ca80 	call	9ca8 <__fpcmp_parts_d>
    9278:	100d883a 	mov	r6,r2
    927c:	3005883a 	mov	r2,r6
    9280:	dfc01017 	ldw	ra,64(sp)
    9284:	dc400f17 	ldw	r17,60(sp)
    9288:	dc000e17 	ldw	r16,56(sp)
    928c:	dec01104 	addi	sp,sp,68
    9290:	f800283a 	ret

00009294 <__floatsidf>:
    9294:	2006d7fa 	srli	r3,r4,31
    9298:	defff604 	addi	sp,sp,-40
    929c:	008000c4 	movi	r2,3
    92a0:	dfc00915 	stw	ra,36(sp)
    92a4:	dcc00815 	stw	r19,32(sp)
    92a8:	dc800715 	stw	r18,28(sp)
    92ac:	dc400615 	stw	r17,24(sp)
    92b0:	dc000515 	stw	r16,20(sp)
    92b4:	d8800015 	stw	r2,0(sp)
    92b8:	d8c00115 	stw	r3,4(sp)
    92bc:	20000f1e 	bne	r4,zero,92fc <__floatsidf+0x68>
    92c0:	00800084 	movi	r2,2
    92c4:	d8800015 	stw	r2,0(sp)
    92c8:	d809883a 	mov	r4,sp
    92cc:	000985c0 	call	985c <__pack_d>
    92d0:	1009883a 	mov	r4,r2
    92d4:	180b883a 	mov	r5,r3
    92d8:	2005883a 	mov	r2,r4
    92dc:	2807883a 	mov	r3,r5
    92e0:	dfc00917 	ldw	ra,36(sp)
    92e4:	dcc00817 	ldw	r19,32(sp)
    92e8:	dc800717 	ldw	r18,28(sp)
    92ec:	dc400617 	ldw	r17,24(sp)
    92f0:	dc000517 	ldw	r16,20(sp)
    92f4:	dec00a04 	addi	sp,sp,40
    92f8:	f800283a 	ret
    92fc:	00800f04 	movi	r2,60
    9300:	1807003a 	cmpeq	r3,r3,zero
    9304:	d8800215 	stw	r2,8(sp)
    9308:	18001126 	beq	r3,zero,9350 <__floatsidf+0xbc>
    930c:	0027883a 	mov	r19,zero
    9310:	2025883a 	mov	r18,r4
    9314:	d9000315 	stw	r4,12(sp)
    9318:	dcc00415 	stw	r19,16(sp)
    931c:	00097dc0 	call	97dc <__clzsi2>
    9320:	11000744 	addi	r4,r2,29
    9324:	013fe80e 	bge	zero,r4,92c8 <__floatsidf+0x34>
    9328:	10bfff44 	addi	r2,r2,-3
    932c:	10000c16 	blt	r2,zero,9360 <__floatsidf+0xcc>
    9330:	90a2983a 	sll	r17,r18,r2
    9334:	0021883a 	mov	r16,zero
    9338:	d8800217 	ldw	r2,8(sp)
    933c:	dc400415 	stw	r17,16(sp)
    9340:	dc000315 	stw	r16,12(sp)
    9344:	1105c83a 	sub	r2,r2,r4
    9348:	d8800215 	stw	r2,8(sp)
    934c:	003fde06 	br	92c8 <__floatsidf+0x34>
    9350:	00a00034 	movhi	r2,32768
    9354:	20800a26 	beq	r4,r2,9380 <__floatsidf+0xec>
    9358:	0109c83a 	sub	r4,zero,r4
    935c:	003feb06 	br	930c <__floatsidf+0x78>
    9360:	9006d07a 	srli	r3,r18,1
    9364:	008007c4 	movi	r2,31
    9368:	1105c83a 	sub	r2,r2,r4
    936c:	1886d83a 	srl	r3,r3,r2
    9370:	9922983a 	sll	r17,r19,r4
    9374:	9120983a 	sll	r16,r18,r4
    9378:	1c62b03a 	or	r17,r3,r17
    937c:	003fee06 	br	9338 <__floatsidf+0xa4>
    9380:	0009883a 	mov	r4,zero
    9384:	01707834 	movhi	r5,49632
    9388:	003fd306 	br	92d8 <__floatsidf+0x44>

0000938c <__fixdfsi>:
    938c:	defff804 	addi	sp,sp,-32
    9390:	2005883a 	mov	r2,r4
    9394:	2807883a 	mov	r3,r5
    9398:	d809883a 	mov	r4,sp
    939c:	d9400204 	addi	r5,sp,8
    93a0:	d8c00115 	stw	r3,4(sp)
    93a4:	d8800015 	stw	r2,0(sp)
    93a8:	dfc00715 	stw	ra,28(sp)
    93ac:	0009b700 	call	9b70 <__unpack_d>
    93b0:	d8c00217 	ldw	r3,8(sp)
    93b4:	00800084 	movi	r2,2
    93b8:	1880051e 	bne	r3,r2,93d0 <__fixdfsi+0x44>
    93bc:	0007883a 	mov	r3,zero
    93c0:	1805883a 	mov	r2,r3
    93c4:	dfc00717 	ldw	ra,28(sp)
    93c8:	dec00804 	addi	sp,sp,32
    93cc:	f800283a 	ret
    93d0:	00800044 	movi	r2,1
    93d4:	10fff92e 	bgeu	r2,r3,93bc <__fixdfsi+0x30>
    93d8:	00800104 	movi	r2,4
    93dc:	18800426 	beq	r3,r2,93f0 <__fixdfsi+0x64>
    93e0:	d8c00417 	ldw	r3,16(sp)
    93e4:	183ff516 	blt	r3,zero,93bc <__fixdfsi+0x30>
    93e8:	00800784 	movi	r2,30
    93ec:	10c0080e 	bge	r2,r3,9410 <__fixdfsi+0x84>
    93f0:	d8800317 	ldw	r2,12(sp)
    93f4:	1000121e 	bne	r2,zero,9440 <__fixdfsi+0xb4>
    93f8:	00e00034 	movhi	r3,32768
    93fc:	18ffffc4 	addi	r3,r3,-1
    9400:	1805883a 	mov	r2,r3
    9404:	dfc00717 	ldw	ra,28(sp)
    9408:	dec00804 	addi	sp,sp,32
    940c:	f800283a 	ret
    9410:	00800f04 	movi	r2,60
    9414:	10d1c83a 	sub	r8,r2,r3
    9418:	40bff804 	addi	r2,r8,-32
    941c:	d9800517 	ldw	r6,20(sp)
    9420:	d9c00617 	ldw	r7,24(sp)
    9424:	10000816 	blt	r2,zero,9448 <__fixdfsi+0xbc>
    9428:	3888d83a 	srl	r4,r7,r2
    942c:	d8800317 	ldw	r2,12(sp)
    9430:	2007883a 	mov	r3,r4
    9434:	103fe226 	beq	r2,zero,93c0 <__fixdfsi+0x34>
    9438:	0107c83a 	sub	r3,zero,r4
    943c:	003fe006 	br	93c0 <__fixdfsi+0x34>
    9440:	00e00034 	movhi	r3,32768
    9444:	003fde06 	br	93c0 <__fixdfsi+0x34>
    9448:	39c7883a 	add	r3,r7,r7
    944c:	008007c4 	movi	r2,31
    9450:	1205c83a 	sub	r2,r2,r8
    9454:	1886983a 	sll	r3,r3,r2
    9458:	3208d83a 	srl	r4,r6,r8
    945c:	1908b03a 	or	r4,r3,r4
    9460:	003ff206 	br	942c <__fixdfsi+0xa0>

00009464 <__floatunsidf>:
    9464:	defff204 	addi	sp,sp,-56
    9468:	dfc00d15 	stw	ra,52(sp)
    946c:	ddc00c15 	stw	r23,48(sp)
    9470:	dd800b15 	stw	r22,44(sp)
    9474:	dd400a15 	stw	r21,40(sp)
    9478:	dd000915 	stw	r20,36(sp)
    947c:	dcc00815 	stw	r19,32(sp)
    9480:	dc800715 	stw	r18,28(sp)
    9484:	dc400615 	stw	r17,24(sp)
    9488:	dc000515 	stw	r16,20(sp)
    948c:	d8000115 	stw	zero,4(sp)
    9490:	20000f1e 	bne	r4,zero,94d0 <__floatunsidf+0x6c>
    9494:	00800084 	movi	r2,2
    9498:	d8800015 	stw	r2,0(sp)
    949c:	d809883a 	mov	r4,sp
    94a0:	000985c0 	call	985c <__pack_d>
    94a4:	dfc00d17 	ldw	ra,52(sp)
    94a8:	ddc00c17 	ldw	r23,48(sp)
    94ac:	dd800b17 	ldw	r22,44(sp)
    94b0:	dd400a17 	ldw	r21,40(sp)
    94b4:	dd000917 	ldw	r20,36(sp)
    94b8:	dcc00817 	ldw	r19,32(sp)
    94bc:	dc800717 	ldw	r18,28(sp)
    94c0:	dc400617 	ldw	r17,24(sp)
    94c4:	dc000517 	ldw	r16,20(sp)
    94c8:	dec00e04 	addi	sp,sp,56
    94cc:	f800283a 	ret
    94d0:	008000c4 	movi	r2,3
    94d4:	00c00f04 	movi	r3,60
    94d8:	002f883a 	mov	r23,zero
    94dc:	202d883a 	mov	r22,r4
    94e0:	d8800015 	stw	r2,0(sp)
    94e4:	d8c00215 	stw	r3,8(sp)
    94e8:	d9000315 	stw	r4,12(sp)
    94ec:	ddc00415 	stw	r23,16(sp)
    94f0:	00097dc0 	call	97dc <__clzsi2>
    94f4:	12400744 	addi	r9,r2,29
    94f8:	48000b16 	blt	r9,zero,9528 <__floatunsidf+0xc4>
    94fc:	483fe726 	beq	r9,zero,949c <__floatunsidf+0x38>
    9500:	10bfff44 	addi	r2,r2,-3
    9504:	10002e16 	blt	r2,zero,95c0 <__floatunsidf+0x15c>
    9508:	b0a2983a 	sll	r17,r22,r2
    950c:	0021883a 	mov	r16,zero
    9510:	d8800217 	ldw	r2,8(sp)
    9514:	dc400415 	stw	r17,16(sp)
    9518:	dc000315 	stw	r16,12(sp)
    951c:	1245c83a 	sub	r2,r2,r9
    9520:	d8800215 	stw	r2,8(sp)
    9524:	003fdd06 	br	949c <__floatunsidf+0x38>
    9528:	0255c83a 	sub	r10,zero,r9
    952c:	51bff804 	addi	r6,r10,-32
    9530:	30001b16 	blt	r6,zero,95a0 <__floatunsidf+0x13c>
    9534:	b9a8d83a 	srl	r20,r23,r6
    9538:	002b883a 	mov	r21,zero
    953c:	000f883a 	mov	r7,zero
    9540:	01000044 	movi	r4,1
    9544:	0011883a 	mov	r8,zero
    9548:	30002516 	blt	r6,zero,95e0 <__floatunsidf+0x17c>
    954c:	21a6983a 	sll	r19,r4,r6
    9550:	0025883a 	mov	r18,zero
    9554:	00bfffc4 	movi	r2,-1
    9558:	9089883a 	add	r4,r18,r2
    955c:	988b883a 	add	r5,r19,r2
    9560:	248d803a 	cmpltu	r6,r4,r18
    9564:	314b883a 	add	r5,r6,r5
    9568:	b104703a 	and	r2,r22,r4
    956c:	b946703a 	and	r3,r23,r5
    9570:	10c4b03a 	or	r2,r2,r3
    9574:	10000226 	beq	r2,zero,9580 <__floatunsidf+0x11c>
    9578:	01c00044 	movi	r7,1
    957c:	0011883a 	mov	r8,zero
    9580:	d9000217 	ldw	r4,8(sp)
    9584:	a1c4b03a 	or	r2,r20,r7
    9588:	aa06b03a 	or	r3,r21,r8
    958c:	2249c83a 	sub	r4,r4,r9
    9590:	d8c00415 	stw	r3,16(sp)
    9594:	d9000215 	stw	r4,8(sp)
    9598:	d8800315 	stw	r2,12(sp)
    959c:	003fbf06 	br	949c <__floatunsidf+0x38>
    95a0:	bdc7883a 	add	r3,r23,r23
    95a4:	008007c4 	movi	r2,31
    95a8:	1285c83a 	sub	r2,r2,r10
    95ac:	1886983a 	sll	r3,r3,r2
    95b0:	b2a8d83a 	srl	r20,r22,r10
    95b4:	baaad83a 	srl	r21,r23,r10
    95b8:	1d28b03a 	or	r20,r3,r20
    95bc:	003fdf06 	br	953c <__floatunsidf+0xd8>
    95c0:	b006d07a 	srli	r3,r22,1
    95c4:	008007c4 	movi	r2,31
    95c8:	1245c83a 	sub	r2,r2,r9
    95cc:	1886d83a 	srl	r3,r3,r2
    95d0:	ba62983a 	sll	r17,r23,r9
    95d4:	b260983a 	sll	r16,r22,r9
    95d8:	1c62b03a 	or	r17,r3,r17
    95dc:	003fcc06 	br	9510 <__floatunsidf+0xac>
    95e0:	2006d07a 	srli	r3,r4,1
    95e4:	008007c4 	movi	r2,31
    95e8:	1285c83a 	sub	r2,r2,r10
    95ec:	18a6d83a 	srl	r19,r3,r2
    95f0:	22a4983a 	sll	r18,r4,r10
    95f4:	003fd706 	br	9554 <__floatunsidf+0xf0>

000095f8 <udivmodsi4>:
    95f8:	29001b2e 	bgeu	r5,r4,9668 <udivmodsi4+0x70>
    95fc:	28001a16 	blt	r5,zero,9668 <udivmodsi4+0x70>
    9600:	00800044 	movi	r2,1
    9604:	0007883a 	mov	r3,zero
    9608:	01c007c4 	movi	r7,31
    960c:	00000306 	br	961c <udivmodsi4+0x24>
    9610:	19c01326 	beq	r3,r7,9660 <udivmodsi4+0x68>
    9614:	18c00044 	addi	r3,r3,1
    9618:	28000416 	blt	r5,zero,962c <udivmodsi4+0x34>
    961c:	294b883a 	add	r5,r5,r5
    9620:	1085883a 	add	r2,r2,r2
    9624:	293ffa36 	bltu	r5,r4,9610 <udivmodsi4+0x18>
    9628:	10000d26 	beq	r2,zero,9660 <udivmodsi4+0x68>
    962c:	0007883a 	mov	r3,zero
    9630:	21400236 	bltu	r4,r5,963c <udivmodsi4+0x44>
    9634:	2149c83a 	sub	r4,r4,r5
    9638:	1886b03a 	or	r3,r3,r2
    963c:	1004d07a 	srli	r2,r2,1
    9640:	280ad07a 	srli	r5,r5,1
    9644:	103ffa1e 	bne	r2,zero,9630 <udivmodsi4+0x38>
    9648:	30000226 	beq	r6,zero,9654 <udivmodsi4+0x5c>
    964c:	2005883a 	mov	r2,r4
    9650:	f800283a 	ret
    9654:	1809883a 	mov	r4,r3
    9658:	2005883a 	mov	r2,r4
    965c:	f800283a 	ret
    9660:	0007883a 	mov	r3,zero
    9664:	003ff806 	br	9648 <udivmodsi4+0x50>
    9668:	00800044 	movi	r2,1
    966c:	0007883a 	mov	r3,zero
    9670:	003fef06 	br	9630 <udivmodsi4+0x38>

00009674 <__divsi3>:
    9674:	defffe04 	addi	sp,sp,-8
    9678:	dc000015 	stw	r16,0(sp)
    967c:	dfc00115 	stw	ra,4(sp)
    9680:	0021883a 	mov	r16,zero
    9684:	20000c16 	blt	r4,zero,96b8 <__divsi3+0x44>
    9688:	000d883a 	mov	r6,zero
    968c:	28000e16 	blt	r5,zero,96c8 <__divsi3+0x54>
    9690:	00095f80 	call	95f8 <udivmodsi4>
    9694:	1007883a 	mov	r3,r2
    9698:	8005003a 	cmpeq	r2,r16,zero
    969c:	1000011e 	bne	r2,zero,96a4 <__divsi3+0x30>
    96a0:	00c7c83a 	sub	r3,zero,r3
    96a4:	1805883a 	mov	r2,r3
    96a8:	dfc00117 	ldw	ra,4(sp)
    96ac:	dc000017 	ldw	r16,0(sp)
    96b0:	dec00204 	addi	sp,sp,8
    96b4:	f800283a 	ret
    96b8:	0109c83a 	sub	r4,zero,r4
    96bc:	04000044 	movi	r16,1
    96c0:	000d883a 	mov	r6,zero
    96c4:	283ff20e 	bge	r5,zero,9690 <__divsi3+0x1c>
    96c8:	014bc83a 	sub	r5,zero,r5
    96cc:	8021003a 	cmpeq	r16,r16,zero
    96d0:	003fef06 	br	9690 <__divsi3+0x1c>

000096d4 <__modsi3>:
    96d4:	deffff04 	addi	sp,sp,-4
    96d8:	dfc00015 	stw	ra,0(sp)
    96dc:	01800044 	movi	r6,1
    96e0:	2807883a 	mov	r3,r5
    96e4:	20000416 	blt	r4,zero,96f8 <__modsi3+0x24>
    96e8:	28000c16 	blt	r5,zero,971c <__modsi3+0x48>
    96ec:	dfc00017 	ldw	ra,0(sp)
    96f0:	dec00104 	addi	sp,sp,4
    96f4:	00095f81 	jmpi	95f8 <udivmodsi4>
    96f8:	0109c83a 	sub	r4,zero,r4
    96fc:	28000b16 	blt	r5,zero,972c <__modsi3+0x58>
    9700:	180b883a 	mov	r5,r3
    9704:	01800044 	movi	r6,1
    9708:	00095f80 	call	95f8 <udivmodsi4>
    970c:	0085c83a 	sub	r2,zero,r2
    9710:	dfc00017 	ldw	ra,0(sp)
    9714:	dec00104 	addi	sp,sp,4
    9718:	f800283a 	ret
    971c:	014bc83a 	sub	r5,zero,r5
    9720:	dfc00017 	ldw	ra,0(sp)
    9724:	dec00104 	addi	sp,sp,4
    9728:	00095f81 	jmpi	95f8 <udivmodsi4>
    972c:	0147c83a 	sub	r3,zero,r5
    9730:	003ff306 	br	9700 <__modsi3+0x2c>

00009734 <__udivsi3>:
    9734:	000d883a 	mov	r6,zero
    9738:	00095f81 	jmpi	95f8 <udivmodsi4>

0000973c <__umodsi3>:
    973c:	01800044 	movi	r6,1
    9740:	00095f81 	jmpi	95f8 <udivmodsi4>

00009744 <__muldi3>:
    9744:	2011883a 	mov	r8,r4
    9748:	427fffcc 	andi	r9,r8,65535
    974c:	4018d43a 	srli	r12,r8,16
    9750:	32bfffcc 	andi	r10,r6,65535
    9754:	3016d43a 	srli	r11,r6,16
    9758:	4a85383a 	mul	r2,r9,r10
    975c:	6295383a 	mul	r10,r12,r10
    9760:	4ad3383a 	mul	r9,r9,r11
    9764:	113fffcc 	andi	r4,r2,65535
    9768:	1004d43a 	srli	r2,r2,16
    976c:	4a93883a 	add	r9,r9,r10
    9770:	3807883a 	mov	r3,r7
    9774:	1245883a 	add	r2,r2,r9
    9778:	280f883a 	mov	r7,r5
    977c:	180b883a 	mov	r5,r3
    9780:	1006943a 	slli	r3,r2,16
    9784:	defffd04 	addi	sp,sp,-12
    9788:	dc800215 	stw	r18,8(sp)
    978c:	1907883a 	add	r3,r3,r4
    9790:	dc400115 	stw	r17,4(sp)
    9794:	dc000015 	stw	r16,0(sp)
    9798:	4165383a 	mul	r18,r8,r5
    979c:	31e3383a 	mul	r17,r6,r7
    97a0:	1012d43a 	srli	r9,r2,16
    97a4:	62d9383a 	mul	r12,r12,r11
    97a8:	181f883a 	mov	r15,r3
    97ac:	1280022e 	bgeu	r2,r10,97b8 <__muldi3+0x74>
    97b0:	00800074 	movhi	r2,1
    97b4:	6099883a 	add	r12,r12,r2
    97b8:	624d883a 	add	r6,r12,r9
    97bc:	9187883a 	add	r3,r18,r6
    97c0:	88c7883a 	add	r3,r17,r3
    97c4:	7805883a 	mov	r2,r15
    97c8:	dc800217 	ldw	r18,8(sp)
    97cc:	dc400117 	ldw	r17,4(sp)
    97d0:	dc000017 	ldw	r16,0(sp)
    97d4:	dec00304 	addi	sp,sp,12
    97d8:	f800283a 	ret

000097dc <__clzsi2>:
    97dc:	00bfffd4 	movui	r2,65535
    97e0:	11000e36 	bltu	r2,r4,981c <__clzsi2+0x40>
    97e4:	00803fc4 	movi	r2,255
    97e8:	01400204 	movi	r5,8
    97ec:	0007883a 	mov	r3,zero
    97f0:	11001036 	bltu	r2,r4,9834 <__clzsi2+0x58>
    97f4:	000b883a 	mov	r5,zero
    97f8:	20c6d83a 	srl	r3,r4,r3
    97fc:	00800074 	movhi	r2,1
    9800:	10809804 	addi	r2,r2,608
    9804:	1887883a 	add	r3,r3,r2
    9808:	18800003 	ldbu	r2,0(r3)
    980c:	00c00804 	movi	r3,32
    9810:	2885883a 	add	r2,r5,r2
    9814:	1885c83a 	sub	r2,r3,r2
    9818:	f800283a 	ret
    981c:	01400404 	movi	r5,16
    9820:	00804034 	movhi	r2,256
    9824:	10bfffc4 	addi	r2,r2,-1
    9828:	2807883a 	mov	r3,r5
    982c:	113ff22e 	bgeu	r2,r4,97f8 <__clzsi2+0x1c>
    9830:	01400604 	movi	r5,24
    9834:	2807883a 	mov	r3,r5
    9838:	20c6d83a 	srl	r3,r4,r3
    983c:	00800074 	movhi	r2,1
    9840:	10809804 	addi	r2,r2,608
    9844:	1887883a 	add	r3,r3,r2
    9848:	18800003 	ldbu	r2,0(r3)
    984c:	00c00804 	movi	r3,32
    9850:	2885883a 	add	r2,r5,r2
    9854:	1885c83a 	sub	r2,r3,r2
    9858:	f800283a 	ret

0000985c <__pack_d>:
    985c:	20c00017 	ldw	r3,0(r4)
    9860:	defffd04 	addi	sp,sp,-12
    9864:	dc000015 	stw	r16,0(sp)
    9868:	dc800215 	stw	r18,8(sp)
    986c:	dc400115 	stw	r17,4(sp)
    9870:	00800044 	movi	r2,1
    9874:	22000317 	ldw	r8,12(r4)
    9878:	001f883a 	mov	r15,zero
    987c:	22400417 	ldw	r9,16(r4)
    9880:	24000117 	ldw	r16,4(r4)
    9884:	10c0552e 	bgeu	r2,r3,99dc <__pack_d+0x180>
    9888:	00800104 	movi	r2,4
    988c:	18804f26 	beq	r3,r2,99cc <__pack_d+0x170>
    9890:	00800084 	movi	r2,2
    9894:	18800226 	beq	r3,r2,98a0 <__pack_d+0x44>
    9898:	4244b03a 	or	r2,r8,r9
    989c:	10001a1e 	bne	r2,zero,9908 <__pack_d+0xac>
    98a0:	000d883a 	mov	r6,zero
    98a4:	000f883a 	mov	r7,zero
    98a8:	0011883a 	mov	r8,zero
    98ac:	00800434 	movhi	r2,16
    98b0:	10bfffc4 	addi	r2,r2,-1
    98b4:	301d883a 	mov	r14,r6
    98b8:	3884703a 	and	r2,r7,r2
    98bc:	400a953a 	slli	r5,r8,20
    98c0:	79bffc2c 	andhi	r6,r15,65520
    98c4:	308cb03a 	or	r6,r6,r2
    98c8:	00e00434 	movhi	r3,32784
    98cc:	18ffffc4 	addi	r3,r3,-1
    98d0:	800497fa 	slli	r2,r16,31
    98d4:	30c6703a 	and	r3,r6,r3
    98d8:	1946b03a 	or	r3,r3,r5
    98dc:	01600034 	movhi	r5,32768
    98e0:	297fffc4 	addi	r5,r5,-1
    98e4:	194a703a 	and	r5,r3,r5
    98e8:	288ab03a 	or	r5,r5,r2
    98ec:	2807883a 	mov	r3,r5
    98f0:	7005883a 	mov	r2,r14
    98f4:	dc800217 	ldw	r18,8(sp)
    98f8:	dc400117 	ldw	r17,4(sp)
    98fc:	dc000017 	ldw	r16,0(sp)
    9900:	dec00304 	addi	sp,sp,12
    9904:	f800283a 	ret
    9908:	21000217 	ldw	r4,8(r4)
    990c:	00bf0084 	movi	r2,-1022
    9910:	20803f16 	blt	r4,r2,9a10 <__pack_d+0x1b4>
    9914:	0080ffc4 	movi	r2,1023
    9918:	11002c16 	blt	r2,r4,99cc <__pack_d+0x170>
    991c:	00803fc4 	movi	r2,255
    9920:	408c703a 	and	r6,r8,r2
    9924:	00802004 	movi	r2,128
    9928:	0007883a 	mov	r3,zero
    992c:	000f883a 	mov	r7,zero
    9930:	2280ffc4 	addi	r10,r4,1023
    9934:	30801e26 	beq	r6,r2,99b0 <__pack_d+0x154>
    9938:	00801fc4 	movi	r2,127
    993c:	4089883a 	add	r4,r8,r2
    9940:	220d803a 	cmpltu	r6,r4,r8
    9944:	324d883a 	add	r6,r6,r9
    9948:	2011883a 	mov	r8,r4
    994c:	3013883a 	mov	r9,r6
    9950:	00880034 	movhi	r2,8192
    9954:	10bfffc4 	addi	r2,r2,-1
    9958:	12400d36 	bltu	r2,r9,9990 <__pack_d+0x134>
    995c:	4804963a 	slli	r2,r9,24
    9960:	400cd23a 	srli	r6,r8,8
    9964:	480ed23a 	srli	r7,r9,8
    9968:	013fffc4 	movi	r4,-1
    996c:	118cb03a 	or	r6,r2,r6
    9970:	01400434 	movhi	r5,16
    9974:	297fffc4 	addi	r5,r5,-1
    9978:	3104703a 	and	r2,r6,r4
    997c:	3946703a 	and	r3,r7,r5
    9980:	5201ffcc 	andi	r8,r10,2047
    9984:	100d883a 	mov	r6,r2
    9988:	180f883a 	mov	r7,r3
    998c:	003fc706 	br	98ac <__pack_d+0x50>
    9990:	480897fa 	slli	r4,r9,31
    9994:	4004d07a 	srli	r2,r8,1
    9998:	4806d07a 	srli	r3,r9,1
    999c:	52800044 	addi	r10,r10,1
    99a0:	2084b03a 	or	r2,r4,r2
    99a4:	1011883a 	mov	r8,r2
    99a8:	1813883a 	mov	r9,r3
    99ac:	003feb06 	br	995c <__pack_d+0x100>
    99b0:	383fe11e 	bne	r7,zero,9938 <__pack_d+0xdc>
    99b4:	01004004 	movi	r4,256
    99b8:	4104703a 	and	r2,r8,r4
    99bc:	10c4b03a 	or	r2,r2,r3
    99c0:	103fe326 	beq	r2,zero,9950 <__pack_d+0xf4>
    99c4:	3005883a 	mov	r2,r6
    99c8:	003fdc06 	br	993c <__pack_d+0xe0>
    99cc:	000d883a 	mov	r6,zero
    99d0:	000f883a 	mov	r7,zero
    99d4:	0201ffc4 	movi	r8,2047
    99d8:	003fb406 	br	98ac <__pack_d+0x50>
    99dc:	0005883a 	mov	r2,zero
    99e0:	00c00234 	movhi	r3,8
    99e4:	408cb03a 	or	r6,r8,r2
    99e8:	48ceb03a 	or	r7,r9,r3
    99ec:	013fffc4 	movi	r4,-1
    99f0:	01400434 	movhi	r5,16
    99f4:	297fffc4 	addi	r5,r5,-1
    99f8:	3104703a 	and	r2,r6,r4
    99fc:	3946703a 	and	r3,r7,r5
    9a00:	100d883a 	mov	r6,r2
    9a04:	180f883a 	mov	r7,r3
    9a08:	0201ffc4 	movi	r8,2047
    9a0c:	003fa706 	br	98ac <__pack_d+0x50>
    9a10:	1109c83a 	sub	r4,r2,r4
    9a14:	00800e04 	movi	r2,56
    9a18:	11004316 	blt	r2,r4,9b28 <__pack_d+0x2cc>
    9a1c:	21fff804 	addi	r7,r4,-32
    9a20:	38004516 	blt	r7,zero,9b38 <__pack_d+0x2dc>
    9a24:	49d8d83a 	srl	r12,r9,r7
    9a28:	001b883a 	mov	r13,zero
    9a2c:	0023883a 	mov	r17,zero
    9a30:	01400044 	movi	r5,1
    9a34:	0025883a 	mov	r18,zero
    9a38:	38004716 	blt	r7,zero,9b58 <__pack_d+0x2fc>
    9a3c:	29d6983a 	sll	r11,r5,r7
    9a40:	0015883a 	mov	r10,zero
    9a44:	00bfffc4 	movi	r2,-1
    9a48:	5089883a 	add	r4,r10,r2
    9a4c:	588b883a 	add	r5,r11,r2
    9a50:	228d803a 	cmpltu	r6,r4,r10
    9a54:	314b883a 	add	r5,r6,r5
    9a58:	4104703a 	and	r2,r8,r4
    9a5c:	4946703a 	and	r3,r9,r5
    9a60:	10c4b03a 	or	r2,r2,r3
    9a64:	10000226 	beq	r2,zero,9a70 <__pack_d+0x214>
    9a68:	04400044 	movi	r17,1
    9a6c:	0025883a 	mov	r18,zero
    9a70:	00803fc4 	movi	r2,255
    9a74:	644eb03a 	or	r7,r12,r17
    9a78:	3892703a 	and	r9,r7,r2
    9a7c:	00802004 	movi	r2,128
    9a80:	6c90b03a 	or	r8,r13,r18
    9a84:	0015883a 	mov	r10,zero
    9a88:	48801626 	beq	r9,r2,9ae4 <__pack_d+0x288>
    9a8c:	01001fc4 	movi	r4,127
    9a90:	3905883a 	add	r2,r7,r4
    9a94:	11cd803a 	cmpltu	r6,r2,r7
    9a98:	320d883a 	add	r6,r6,r8
    9a9c:	100f883a 	mov	r7,r2
    9aa0:	00840034 	movhi	r2,4096
    9aa4:	10bfffc4 	addi	r2,r2,-1
    9aa8:	3011883a 	mov	r8,r6
    9aac:	0007883a 	mov	r3,zero
    9ab0:	11801b36 	bltu	r2,r6,9b20 <__pack_d+0x2c4>
    9ab4:	4004963a 	slli	r2,r8,24
    9ab8:	3808d23a 	srli	r4,r7,8
    9abc:	400ad23a 	srli	r5,r8,8
    9ac0:	1813883a 	mov	r9,r3
    9ac4:	1108b03a 	or	r4,r2,r4
    9ac8:	00bfffc4 	movi	r2,-1
    9acc:	00c00434 	movhi	r3,16
    9ad0:	18ffffc4 	addi	r3,r3,-1
    9ad4:	208c703a 	and	r6,r4,r2
    9ad8:	28ce703a 	and	r7,r5,r3
    9adc:	4a01ffcc 	andi	r8,r9,2047
    9ae0:	003f7206 	br	98ac <__pack_d+0x50>
    9ae4:	503fe91e 	bne	r10,zero,9a8c <__pack_d+0x230>
    9ae8:	01004004 	movi	r4,256
    9aec:	3904703a 	and	r2,r7,r4
    9af0:	0007883a 	mov	r3,zero
    9af4:	10c4b03a 	or	r2,r2,r3
    9af8:	10000626 	beq	r2,zero,9b14 <__pack_d+0x2b8>
    9afc:	3a45883a 	add	r2,r7,r9
    9b00:	11cd803a 	cmpltu	r6,r2,r7
    9b04:	320d883a 	add	r6,r6,r8
    9b08:	100f883a 	mov	r7,r2
    9b0c:	3011883a 	mov	r8,r6
    9b10:	0007883a 	mov	r3,zero
    9b14:	00840034 	movhi	r2,4096
    9b18:	10bfffc4 	addi	r2,r2,-1
    9b1c:	123fe52e 	bgeu	r2,r8,9ab4 <__pack_d+0x258>
    9b20:	00c00044 	movi	r3,1
    9b24:	003fe306 	br	9ab4 <__pack_d+0x258>
    9b28:	0009883a 	mov	r4,zero
    9b2c:	0013883a 	mov	r9,zero
    9b30:	000b883a 	mov	r5,zero
    9b34:	003fe406 	br	9ac8 <__pack_d+0x26c>
    9b38:	4a47883a 	add	r3,r9,r9
    9b3c:	008007c4 	movi	r2,31
    9b40:	1105c83a 	sub	r2,r2,r4
    9b44:	1886983a 	sll	r3,r3,r2
    9b48:	4118d83a 	srl	r12,r8,r4
    9b4c:	491ad83a 	srl	r13,r9,r4
    9b50:	1b18b03a 	or	r12,r3,r12
    9b54:	003fb506 	br	9a2c <__pack_d+0x1d0>
    9b58:	2806d07a 	srli	r3,r5,1
    9b5c:	008007c4 	movi	r2,31
    9b60:	1105c83a 	sub	r2,r2,r4
    9b64:	1896d83a 	srl	r11,r3,r2
    9b68:	2914983a 	sll	r10,r5,r4
    9b6c:	003fb506 	br	9a44 <__pack_d+0x1e8>

00009b70 <__unpack_d>:
    9b70:	20c00117 	ldw	r3,4(r4)
    9b74:	22400017 	ldw	r9,0(r4)
    9b78:	00800434 	movhi	r2,16
    9b7c:	10bfffc4 	addi	r2,r2,-1
    9b80:	1808d53a 	srli	r4,r3,20
    9b84:	180cd7fa 	srli	r6,r3,31
    9b88:	1894703a 	and	r10,r3,r2
    9b8c:	2201ffcc 	andi	r8,r4,2047
    9b90:	281b883a 	mov	r13,r5
    9b94:	4817883a 	mov	r11,r9
    9b98:	29800115 	stw	r6,4(r5)
    9b9c:	5019883a 	mov	r12,r10
    9ba0:	40001e1e 	bne	r8,zero,9c1c <__unpack_d+0xac>
    9ba4:	4a84b03a 	or	r2,r9,r10
    9ba8:	10001926 	beq	r2,zero,9c10 <__unpack_d+0xa0>
    9bac:	4804d63a 	srli	r2,r9,24
    9bb0:	500c923a 	slli	r6,r10,8
    9bb4:	013f0084 	movi	r4,-1022
    9bb8:	00c40034 	movhi	r3,4096
    9bbc:	18ffffc4 	addi	r3,r3,-1
    9bc0:	118cb03a 	or	r6,r2,r6
    9bc4:	008000c4 	movi	r2,3
    9bc8:	480a923a 	slli	r5,r9,8
    9bcc:	68800015 	stw	r2,0(r13)
    9bd0:	69000215 	stw	r4,8(r13)
    9bd4:	19800b36 	bltu	r3,r6,9c04 <__unpack_d+0x94>
    9bd8:	200f883a 	mov	r7,r4
    9bdc:	1811883a 	mov	r8,r3
    9be0:	2945883a 	add	r2,r5,r5
    9be4:	1149803a 	cmpltu	r4,r2,r5
    9be8:	3187883a 	add	r3,r6,r6
    9bec:	20c9883a 	add	r4,r4,r3
    9bf0:	100b883a 	mov	r5,r2
    9bf4:	200d883a 	mov	r6,r4
    9bf8:	39ffffc4 	addi	r7,r7,-1
    9bfc:	413ff82e 	bgeu	r8,r4,9be0 <__unpack_d+0x70>
    9c00:	69c00215 	stw	r7,8(r13)
    9c04:	69800415 	stw	r6,16(r13)
    9c08:	69400315 	stw	r5,12(r13)
    9c0c:	f800283a 	ret
    9c10:	00800084 	movi	r2,2
    9c14:	28800015 	stw	r2,0(r5)
    9c18:	f800283a 	ret
    9c1c:	0081ffc4 	movi	r2,2047
    9c20:	40800f26 	beq	r8,r2,9c60 <__unpack_d+0xf0>
    9c24:	480cd63a 	srli	r6,r9,24
    9c28:	5006923a 	slli	r3,r10,8
    9c2c:	4804923a 	slli	r2,r9,8
    9c30:	0009883a 	mov	r4,zero
    9c34:	30c6b03a 	or	r3,r6,r3
    9c38:	01440034 	movhi	r5,4096
    9c3c:	110cb03a 	or	r6,r2,r4
    9c40:	423f0044 	addi	r8,r8,-1023
    9c44:	194eb03a 	or	r7,r3,r5
    9c48:	008000c4 	movi	r2,3
    9c4c:	69c00415 	stw	r7,16(r13)
    9c50:	6a000215 	stw	r8,8(r13)
    9c54:	68800015 	stw	r2,0(r13)
    9c58:	69800315 	stw	r6,12(r13)
    9c5c:	f800283a 	ret
    9c60:	4a84b03a 	or	r2,r9,r10
    9c64:	1000031e 	bne	r2,zero,9c74 <__unpack_d+0x104>
    9c68:	00800104 	movi	r2,4
    9c6c:	28800015 	stw	r2,0(r5)
    9c70:	f800283a 	ret
    9c74:	0009883a 	mov	r4,zero
    9c78:	01400234 	movhi	r5,8
    9c7c:	4904703a 	and	r2,r9,r4
    9c80:	5146703a 	and	r3,r10,r5
    9c84:	10c4b03a 	or	r2,r2,r3
    9c88:	10000526 	beq	r2,zero,9ca0 <__unpack_d+0x130>
    9c8c:	00800044 	movi	r2,1
    9c90:	68800015 	stw	r2,0(r13)
    9c94:	6b000415 	stw	r12,16(r13)
    9c98:	6ac00315 	stw	r11,12(r13)
    9c9c:	f800283a 	ret
    9ca0:	68000015 	stw	zero,0(r13)
    9ca4:	003ffb06 	br	9c94 <__unpack_d+0x124>

00009ca8 <__fpcmp_parts_d>:
    9ca8:	21800017 	ldw	r6,0(r4)
    9cac:	00c00044 	movi	r3,1
    9cb0:	19800a2e 	bgeu	r3,r6,9cdc <__fpcmp_parts_d+0x34>
    9cb4:	28800017 	ldw	r2,0(r5)
    9cb8:	1880082e 	bgeu	r3,r2,9cdc <__fpcmp_parts_d+0x34>
    9cbc:	00c00104 	movi	r3,4
    9cc0:	30c02626 	beq	r6,r3,9d5c <__fpcmp_parts_d+0xb4>
    9cc4:	10c02226 	beq	r2,r3,9d50 <__fpcmp_parts_d+0xa8>
    9cc8:	00c00084 	movi	r3,2
    9ccc:	30c00526 	beq	r6,r3,9ce4 <__fpcmp_parts_d+0x3c>
    9cd0:	10c0071e 	bne	r2,r3,9cf0 <__fpcmp_parts_d+0x48>
    9cd4:	20800117 	ldw	r2,4(r4)
    9cd8:	1000091e 	bne	r2,zero,9d00 <__fpcmp_parts_d+0x58>
    9cdc:	00800044 	movi	r2,1
    9ce0:	f800283a 	ret
    9ce4:	10c01a1e 	bne	r2,r3,9d50 <__fpcmp_parts_d+0xa8>
    9ce8:	0005883a 	mov	r2,zero
    9cec:	f800283a 	ret
    9cf0:	22000117 	ldw	r8,4(r4)
    9cf4:	28800117 	ldw	r2,4(r5)
    9cf8:	40800326 	beq	r8,r2,9d08 <__fpcmp_parts_d+0x60>
    9cfc:	403ff726 	beq	r8,zero,9cdc <__fpcmp_parts_d+0x34>
    9d00:	00bfffc4 	movi	r2,-1
    9d04:	f800283a 	ret
    9d08:	20c00217 	ldw	r3,8(r4)
    9d0c:	28800217 	ldw	r2,8(r5)
    9d10:	10fffa16 	blt	r2,r3,9cfc <__fpcmp_parts_d+0x54>
    9d14:	18800916 	blt	r3,r2,9d3c <__fpcmp_parts_d+0x94>
    9d18:	21c00417 	ldw	r7,16(r4)
    9d1c:	28c00417 	ldw	r3,16(r5)
    9d20:	21800317 	ldw	r6,12(r4)
    9d24:	28800317 	ldw	r2,12(r5)
    9d28:	19fff436 	bltu	r3,r7,9cfc <__fpcmp_parts_d+0x54>
    9d2c:	38c00526 	beq	r7,r3,9d44 <__fpcmp_parts_d+0x9c>
    9d30:	38c00236 	bltu	r7,r3,9d3c <__fpcmp_parts_d+0x94>
    9d34:	19ffec1e 	bne	r3,r7,9ce8 <__fpcmp_parts_d+0x40>
    9d38:	30bfeb2e 	bgeu	r6,r2,9ce8 <__fpcmp_parts_d+0x40>
    9d3c:	403fe71e 	bne	r8,zero,9cdc <__fpcmp_parts_d+0x34>
    9d40:	003fef06 	br	9d00 <__fpcmp_parts_d+0x58>
    9d44:	11bffa2e 	bgeu	r2,r6,9d30 <__fpcmp_parts_d+0x88>
    9d48:	403fe426 	beq	r8,zero,9cdc <__fpcmp_parts_d+0x34>
    9d4c:	003fec06 	br	9d00 <__fpcmp_parts_d+0x58>
    9d50:	28800117 	ldw	r2,4(r5)
    9d54:	103fe11e 	bne	r2,zero,9cdc <__fpcmp_parts_d+0x34>
    9d58:	003fe906 	br	9d00 <__fpcmp_parts_d+0x58>
    9d5c:	11bfdd1e 	bne	r2,r6,9cd4 <__fpcmp_parts_d+0x2c>
    9d60:	28c00117 	ldw	r3,4(r5)
    9d64:	20800117 	ldw	r2,4(r4)
    9d68:	1885c83a 	sub	r2,r3,r2
    9d6c:	f800283a 	ret

00009d70 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9d70:	defff804 	addi	sp,sp,-32
    9d74:	dfc00715 	stw	ra,28(sp)
    9d78:	df000615 	stw	fp,24(sp)
    9d7c:	df000604 	addi	fp,sp,24
    9d80:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9d84:	e0bffc17 	ldw	r2,-16(fp)
    9d88:	1004803a 	cmplt	r2,r2,zero
    9d8c:	1000081e 	bne	r2,zero,9db0 <close+0x40>
    9d90:	e0bffc17 	ldw	r2,-16(fp)
    9d94:	10800324 	muli	r2,r2,12
    9d98:	1007883a 	mov	r3,r2
    9d9c:	00800074 	movhi	r2,1
    9da0:	1082f404 	addi	r2,r2,3024
    9da4:	1887883a 	add	r3,r3,r2
    9da8:	e0ffff15 	stw	r3,-4(fp)
    9dac:	00000106 	br	9db4 <close+0x44>
    9db0:	e03fff15 	stw	zero,-4(fp)
    9db4:	e0bfff17 	ldw	r2,-4(fp)
    9db8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    9dbc:	e0bffb17 	ldw	r2,-20(fp)
    9dc0:	1005003a 	cmpeq	r2,r2,zero
    9dc4:	10001d1e 	bne	r2,zero,9e3c <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9dc8:	e0bffb17 	ldw	r2,-20(fp)
    9dcc:	10800017 	ldw	r2,0(r2)
    9dd0:	10800417 	ldw	r2,16(r2)
    9dd4:	1005003a 	cmpeq	r2,r2,zero
    9dd8:	1000071e 	bne	r2,zero,9df8 <close+0x88>
    9ddc:	e0bffb17 	ldw	r2,-20(fp)
    9de0:	10800017 	ldw	r2,0(r2)
    9de4:	10800417 	ldw	r2,16(r2)
    9de8:	e13ffb17 	ldw	r4,-20(fp)
    9dec:	103ee83a 	callr	r2
    9df0:	e0bffe15 	stw	r2,-8(fp)
    9df4:	00000106 	br	9dfc <close+0x8c>
    9df8:	e03ffe15 	stw	zero,-8(fp)
    9dfc:	e0bffe17 	ldw	r2,-8(fp)
    9e00:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9e04:	e13ffc17 	ldw	r4,-16(fp)
    9e08:	000a5b40 	call	a5b4 <alt_release_fd>
    if (rval < 0)
    9e0c:	e0bffa17 	ldw	r2,-24(fp)
    9e10:	1004403a 	cmpge	r2,r2,zero
    9e14:	1000071e 	bne	r2,zero,9e34 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    9e18:	0009e6c0 	call	9e6c <alt_get_errno>
    9e1c:	e0fffa17 	ldw	r3,-24(fp)
    9e20:	00c7c83a 	sub	r3,zero,r3
    9e24:	10c00015 	stw	r3,0(r2)
      return -1;
    9e28:	00bfffc4 	movi	r2,-1
    9e2c:	e0bffd15 	stw	r2,-12(fp)
    9e30:	00000806 	br	9e54 <close+0xe4>
    }
    return 0;
    9e34:	e03ffd15 	stw	zero,-12(fp)
    9e38:	00000606 	br	9e54 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9e3c:	0009e6c0 	call	9e6c <alt_get_errno>
    9e40:	1007883a 	mov	r3,r2
    9e44:	00801444 	movi	r2,81
    9e48:	18800015 	stw	r2,0(r3)
    return -1;
    9e4c:	00bfffc4 	movi	r2,-1
    9e50:	e0bffd15 	stw	r2,-12(fp)
    9e54:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    9e58:	e037883a 	mov	sp,fp
    9e5c:	dfc00117 	ldw	ra,4(sp)
    9e60:	df000017 	ldw	fp,0(sp)
    9e64:	dec00204 	addi	sp,sp,8
    9e68:	f800283a 	ret

00009e6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9e6c:	defffd04 	addi	sp,sp,-12
    9e70:	dfc00215 	stw	ra,8(sp)
    9e74:	df000115 	stw	fp,4(sp)
    9e78:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9e7c:	00800074 	movhi	r2,1
    9e80:	10877704 	addi	r2,r2,7644
    9e84:	10800017 	ldw	r2,0(r2)
    9e88:	1005003a 	cmpeq	r2,r2,zero
    9e8c:	1000061e 	bne	r2,zero,9ea8 <alt_get_errno+0x3c>
    9e90:	00800074 	movhi	r2,1
    9e94:	10877704 	addi	r2,r2,7644
    9e98:	10800017 	ldw	r2,0(r2)
    9e9c:	103ee83a 	callr	r2
    9ea0:	e0bfff15 	stw	r2,-4(fp)
    9ea4:	00000306 	br	9eb4 <alt_get_errno+0x48>
    9ea8:	00800074 	movhi	r2,1
    9eac:	10878704 	addi	r2,r2,7708
    9eb0:	e0bfff15 	stw	r2,-4(fp)
    9eb4:	e0bfff17 	ldw	r2,-4(fp)
}
    9eb8:	e037883a 	mov	sp,fp
    9ebc:	dfc00117 	ldw	ra,4(sp)
    9ec0:	df000017 	ldw	fp,0(sp)
    9ec4:	dec00204 	addi	sp,sp,8
    9ec8:	f800283a 	ret

00009ecc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9ecc:	defffc04 	addi	sp,sp,-16
    9ed0:	df000315 	stw	fp,12(sp)
    9ed4:	df000304 	addi	fp,sp,12
    9ed8:	e13ffd15 	stw	r4,-12(fp)
    9edc:	e17ffe15 	stw	r5,-8(fp)
    9ee0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9ee4:	e0bfff17 	ldw	r2,-4(fp)
}
    9ee8:	e037883a 	mov	sp,fp
    9eec:	df000017 	ldw	fp,0(sp)
    9ef0:	dec00104 	addi	sp,sp,4
    9ef4:	f800283a 	ret

00009ef8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    9ef8:	defff904 	addi	sp,sp,-28
    9efc:	dfc00615 	stw	ra,24(sp)
    9f00:	df000515 	stw	fp,20(sp)
    9f04:	df000504 	addi	fp,sp,20
    9f08:	e13ffc15 	stw	r4,-16(fp)
    9f0c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9f10:	e0bffc17 	ldw	r2,-16(fp)
    9f14:	1004803a 	cmplt	r2,r2,zero
    9f18:	1000081e 	bne	r2,zero,9f3c <fstat+0x44>
    9f1c:	e0bffc17 	ldw	r2,-16(fp)
    9f20:	10800324 	muli	r2,r2,12
    9f24:	1007883a 	mov	r3,r2
    9f28:	00800074 	movhi	r2,1
    9f2c:	1082f404 	addi	r2,r2,3024
    9f30:	1887883a 	add	r3,r3,r2
    9f34:	e0ffff15 	stw	r3,-4(fp)
    9f38:	00000106 	br	9f40 <fstat+0x48>
    9f3c:	e03fff15 	stw	zero,-4(fp)
    9f40:	e0bfff17 	ldw	r2,-4(fp)
    9f44:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    9f48:	e0bffb17 	ldw	r2,-20(fp)
    9f4c:	1005003a 	cmpeq	r2,r2,zero
    9f50:	1000121e 	bne	r2,zero,9f9c <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    9f54:	e0bffb17 	ldw	r2,-20(fp)
    9f58:	10800017 	ldw	r2,0(r2)
    9f5c:	10800817 	ldw	r2,32(r2)
    9f60:	1005003a 	cmpeq	r2,r2,zero
    9f64:	1000081e 	bne	r2,zero,9f88 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    9f68:	e0bffb17 	ldw	r2,-20(fp)
    9f6c:	10800017 	ldw	r2,0(r2)
    9f70:	10800817 	ldw	r2,32(r2)
    9f74:	e13ffb17 	ldw	r4,-20(fp)
    9f78:	e17ffd17 	ldw	r5,-12(fp)
    9f7c:	103ee83a 	callr	r2
    9f80:	e0bffe15 	stw	r2,-8(fp)
    9f84:	00000b06 	br	9fb4 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    9f88:	e0fffd17 	ldw	r3,-12(fp)
    9f8c:	00880004 	movi	r2,8192
    9f90:	18800115 	stw	r2,4(r3)
      return 0;
    9f94:	e03ffe15 	stw	zero,-8(fp)
    9f98:	00000606 	br	9fb4 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9f9c:	0009fcc0 	call	9fcc <alt_get_errno>
    9fa0:	1007883a 	mov	r3,r2
    9fa4:	00801444 	movi	r2,81
    9fa8:	18800015 	stw	r2,0(r3)
    return -1;
    9fac:	00bfffc4 	movi	r2,-1
    9fb0:	e0bffe15 	stw	r2,-8(fp)
    9fb4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    9fb8:	e037883a 	mov	sp,fp
    9fbc:	dfc00117 	ldw	ra,4(sp)
    9fc0:	df000017 	ldw	fp,0(sp)
    9fc4:	dec00204 	addi	sp,sp,8
    9fc8:	f800283a 	ret

00009fcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9fcc:	defffd04 	addi	sp,sp,-12
    9fd0:	dfc00215 	stw	ra,8(sp)
    9fd4:	df000115 	stw	fp,4(sp)
    9fd8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9fdc:	00800074 	movhi	r2,1
    9fe0:	10877704 	addi	r2,r2,7644
    9fe4:	10800017 	ldw	r2,0(r2)
    9fe8:	1005003a 	cmpeq	r2,r2,zero
    9fec:	1000061e 	bne	r2,zero,a008 <alt_get_errno+0x3c>
    9ff0:	00800074 	movhi	r2,1
    9ff4:	10877704 	addi	r2,r2,7644
    9ff8:	10800017 	ldw	r2,0(r2)
    9ffc:	103ee83a 	callr	r2
    a000:	e0bfff15 	stw	r2,-4(fp)
    a004:	00000306 	br	a014 <alt_get_errno+0x48>
    a008:	00800074 	movhi	r2,1
    a00c:	10878704 	addi	r2,r2,7708
    a010:	e0bfff15 	stw	r2,-4(fp)
    a014:	e0bfff17 	ldw	r2,-4(fp)
}
    a018:	e037883a 	mov	sp,fp
    a01c:	dfc00117 	ldw	ra,4(sp)
    a020:	df000017 	ldw	fp,0(sp)
    a024:	dec00204 	addi	sp,sp,8
    a028:	f800283a 	ret

0000a02c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    a02c:	deffeb04 	addi	sp,sp,-84
    a030:	dfc01415 	stw	ra,80(sp)
    a034:	df001315 	stw	fp,76(sp)
    a038:	df001304 	addi	fp,sp,76
    a03c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a040:	e0bffd17 	ldw	r2,-12(fp)
    a044:	1004803a 	cmplt	r2,r2,zero
    a048:	1000081e 	bne	r2,zero,a06c <isatty+0x40>
    a04c:	e0bffd17 	ldw	r2,-12(fp)
    a050:	10800324 	muli	r2,r2,12
    a054:	1007883a 	mov	r3,r2
    a058:	00800074 	movhi	r2,1
    a05c:	1082f404 	addi	r2,r2,3024
    a060:	1887883a 	add	r3,r3,r2
    a064:	e0ffff15 	stw	r3,-4(fp)
    a068:	00000106 	br	a070 <isatty+0x44>
    a06c:	e03fff15 	stw	zero,-4(fp)
    a070:	e0bfff17 	ldw	r2,-4(fp)
    a074:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    a078:	e0bfed17 	ldw	r2,-76(fp)
    a07c:	1005003a 	cmpeq	r2,r2,zero
    a080:	10000f1e 	bne	r2,zero,a0c0 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    a084:	e0bfed17 	ldw	r2,-76(fp)
    a088:	10800017 	ldw	r2,0(r2)
    a08c:	10800817 	ldw	r2,32(r2)
    a090:	1004c03a 	cmpne	r2,r2,zero
    a094:	1000031e 	bne	r2,zero,a0a4 <isatty+0x78>
    {
      return 1;
    a098:	00800044 	movi	r2,1
    a09c:	e0bffe15 	stw	r2,-8(fp)
    a0a0:	00000c06 	br	a0d4 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    a0a4:	e17fee04 	addi	r5,fp,-72
    a0a8:	e13ffd17 	ldw	r4,-12(fp)
    a0ac:	0009ef80 	call	9ef8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    a0b0:	e0bfef17 	ldw	r2,-68(fp)
    a0b4:	10880020 	cmpeqi	r2,r2,8192
    a0b8:	e0bffe15 	stw	r2,-8(fp)
    a0bc:	00000506 	br	a0d4 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a0c0:	000a0ec0 	call	a0ec <alt_get_errno>
    a0c4:	1007883a 	mov	r3,r2
    a0c8:	00801444 	movi	r2,81
    a0cc:	18800015 	stw	r2,0(r3)
    return 0;
    a0d0:	e03ffe15 	stw	zero,-8(fp)
    a0d4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    a0d8:	e037883a 	mov	sp,fp
    a0dc:	dfc00117 	ldw	ra,4(sp)
    a0e0:	df000017 	ldw	fp,0(sp)
    a0e4:	dec00204 	addi	sp,sp,8
    a0e8:	f800283a 	ret

0000a0ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a0ec:	defffd04 	addi	sp,sp,-12
    a0f0:	dfc00215 	stw	ra,8(sp)
    a0f4:	df000115 	stw	fp,4(sp)
    a0f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a0fc:	00800074 	movhi	r2,1
    a100:	10877704 	addi	r2,r2,7644
    a104:	10800017 	ldw	r2,0(r2)
    a108:	1005003a 	cmpeq	r2,r2,zero
    a10c:	1000061e 	bne	r2,zero,a128 <alt_get_errno+0x3c>
    a110:	00800074 	movhi	r2,1
    a114:	10877704 	addi	r2,r2,7644
    a118:	10800017 	ldw	r2,0(r2)
    a11c:	103ee83a 	callr	r2
    a120:	e0bfff15 	stw	r2,-4(fp)
    a124:	00000306 	br	a134 <alt_get_errno+0x48>
    a128:	00800074 	movhi	r2,1
    a12c:	10878704 	addi	r2,r2,7708
    a130:	e0bfff15 	stw	r2,-4(fp)
    a134:	e0bfff17 	ldw	r2,-4(fp)
}
    a138:	e037883a 	mov	sp,fp
    a13c:	dfc00117 	ldw	ra,4(sp)
    a140:	df000017 	ldw	fp,0(sp)
    a144:	dec00204 	addi	sp,sp,8
    a148:	f800283a 	ret

0000a14c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    a14c:	defffe04 	addi	sp,sp,-8
    a150:	dfc00115 	stw	ra,4(sp)
    a154:	df000015 	stw	fp,0(sp)
    a158:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    a15c:	01000074 	movhi	r4,1
    a160:	2131f604 	addi	r4,r4,-14376
    a164:	01400074 	movhi	r5,1
    a168:	2940e504 	addi	r5,r5,916
    a16c:	01800074 	movhi	r6,1
    a170:	31877c04 	addi	r6,r6,7664
    a174:	000a1cc0 	call	a1cc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    a178:	01000034 	movhi	r4,0
    a17c:	21000804 	addi	r4,r4,32
    a180:	01400034 	movhi	r5,0
    a184:	29400804 	addi	r5,r5,32
    a188:	01800034 	movhi	r6,0
    a18c:	31806d04 	addi	r6,r6,436
    a190:	000a1cc0 	call	a1cc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    a194:	01000074 	movhi	r4,1
    a198:	21000004 	addi	r4,r4,0
    a19c:	01400074 	movhi	r5,1
    a1a0:	29400004 	addi	r5,r5,0
    a1a4:	01800074 	movhi	r6,1
    a1a8:	3180e504 	addi	r6,r6,916
    a1ac:	000a1cc0 	call	a1cc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    a1b0:	000b6180 	call	b618 <alt_dcache_flush_all>
  alt_icache_flush_all();
    a1b4:	000b8100 	call	b810 <alt_icache_flush_all>
}
    a1b8:	e037883a 	mov	sp,fp
    a1bc:	dfc00117 	ldw	ra,4(sp)
    a1c0:	df000017 	ldw	fp,0(sp)
    a1c4:	dec00204 	addi	sp,sp,8
    a1c8:	f800283a 	ret

0000a1cc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    a1cc:	defffc04 	addi	sp,sp,-16
    a1d0:	df000315 	stw	fp,12(sp)
    a1d4:	df000304 	addi	fp,sp,12
    a1d8:	e13ffd15 	stw	r4,-12(fp)
    a1dc:	e17ffe15 	stw	r5,-8(fp)
    a1e0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    a1e4:	e0fffe17 	ldw	r3,-8(fp)
    a1e8:	e0bffd17 	ldw	r2,-12(fp)
    a1ec:	18800e26 	beq	r3,r2,a228 <alt_load_section+0x5c>
  {
    while( to != end )
    a1f0:	00000a06 	br	a21c <alt_load_section+0x50>
    {
      *to++ = *from++;
    a1f4:	e0bffd17 	ldw	r2,-12(fp)
    a1f8:	10c00017 	ldw	r3,0(r2)
    a1fc:	e0bffe17 	ldw	r2,-8(fp)
    a200:	10c00015 	stw	r3,0(r2)
    a204:	e0bffe17 	ldw	r2,-8(fp)
    a208:	10800104 	addi	r2,r2,4
    a20c:	e0bffe15 	stw	r2,-8(fp)
    a210:	e0bffd17 	ldw	r2,-12(fp)
    a214:	10800104 	addi	r2,r2,4
    a218:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    a21c:	e0fffe17 	ldw	r3,-8(fp)
    a220:	e0bfff17 	ldw	r2,-4(fp)
    a224:	18bff31e 	bne	r3,r2,a1f4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    a228:	e037883a 	mov	sp,fp
    a22c:	df000017 	ldw	fp,0(sp)
    a230:	dec00104 	addi	sp,sp,4
    a234:	f800283a 	ret

0000a238 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    a238:	defff804 	addi	sp,sp,-32
    a23c:	dfc00715 	stw	ra,28(sp)
    a240:	df000615 	stw	fp,24(sp)
    a244:	df000604 	addi	fp,sp,24
    a248:	e13ffc15 	stw	r4,-16(fp)
    a24c:	e17ffd15 	stw	r5,-12(fp)
    a250:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    a254:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a258:	e0bffc17 	ldw	r2,-16(fp)
    a25c:	1004803a 	cmplt	r2,r2,zero
    a260:	1000081e 	bne	r2,zero,a284 <lseek+0x4c>
    a264:	e0bffc17 	ldw	r2,-16(fp)
    a268:	10800324 	muli	r2,r2,12
    a26c:	1007883a 	mov	r3,r2
    a270:	00800074 	movhi	r2,1
    a274:	1082f404 	addi	r2,r2,3024
    a278:	1887883a 	add	r3,r3,r2
    a27c:	e0ffff15 	stw	r3,-4(fp)
    a280:	00000106 	br	a288 <lseek+0x50>
    a284:	e03fff15 	stw	zero,-4(fp)
    a288:	e0bfff17 	ldw	r2,-4(fp)
    a28c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    a290:	e0bffb17 	ldw	r2,-20(fp)
    a294:	1005003a 	cmpeq	r2,r2,zero
    a298:	1000111e 	bne	r2,zero,a2e0 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    a29c:	e0bffb17 	ldw	r2,-20(fp)
    a2a0:	10800017 	ldw	r2,0(r2)
    a2a4:	10800717 	ldw	r2,28(r2)
    a2a8:	1005003a 	cmpeq	r2,r2,zero
    a2ac:	1000091e 	bne	r2,zero,a2d4 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    a2b0:	e0bffb17 	ldw	r2,-20(fp)
    a2b4:	10800017 	ldw	r2,0(r2)
    a2b8:	10800717 	ldw	r2,28(r2)
    a2bc:	e13ffb17 	ldw	r4,-20(fp)
    a2c0:	e17ffd17 	ldw	r5,-12(fp)
    a2c4:	e1bffe17 	ldw	r6,-8(fp)
    a2c8:	103ee83a 	callr	r2
    a2cc:	e0bffa15 	stw	r2,-24(fp)
    a2d0:	00000506 	br	a2e8 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    a2d4:	00bfde84 	movi	r2,-134
    a2d8:	e0bffa15 	stw	r2,-24(fp)
    a2dc:	00000206 	br	a2e8 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    a2e0:	00bfebc4 	movi	r2,-81
    a2e4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    a2e8:	e0bffa17 	ldw	r2,-24(fp)
    a2ec:	1004403a 	cmpge	r2,r2,zero
    a2f0:	1000071e 	bne	r2,zero,a310 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    a2f4:	000a3280 	call	a328 <alt_get_errno>
    a2f8:	1007883a 	mov	r3,r2
    a2fc:	e0bffa17 	ldw	r2,-24(fp)
    a300:	0085c83a 	sub	r2,zero,r2
    a304:	18800015 	stw	r2,0(r3)
    rc = -1;
    a308:	00bfffc4 	movi	r2,-1
    a30c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    a310:	e0bffa17 	ldw	r2,-24(fp)
}
    a314:	e037883a 	mov	sp,fp
    a318:	dfc00117 	ldw	ra,4(sp)
    a31c:	df000017 	ldw	fp,0(sp)
    a320:	dec00204 	addi	sp,sp,8
    a324:	f800283a 	ret

0000a328 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a328:	defffd04 	addi	sp,sp,-12
    a32c:	dfc00215 	stw	ra,8(sp)
    a330:	df000115 	stw	fp,4(sp)
    a334:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a338:	00800074 	movhi	r2,1
    a33c:	10877704 	addi	r2,r2,7644
    a340:	10800017 	ldw	r2,0(r2)
    a344:	1005003a 	cmpeq	r2,r2,zero
    a348:	1000061e 	bne	r2,zero,a364 <alt_get_errno+0x3c>
    a34c:	00800074 	movhi	r2,1
    a350:	10877704 	addi	r2,r2,7644
    a354:	10800017 	ldw	r2,0(r2)
    a358:	103ee83a 	callr	r2
    a35c:	e0bfff15 	stw	r2,-4(fp)
    a360:	00000306 	br	a370 <alt_get_errno+0x48>
    a364:	00800074 	movhi	r2,1
    a368:	10878704 	addi	r2,r2,7708
    a36c:	e0bfff15 	stw	r2,-4(fp)
    a370:	e0bfff17 	ldw	r2,-4(fp)
}
    a374:	e037883a 	mov	sp,fp
    a378:	dfc00117 	ldw	ra,4(sp)
    a37c:	df000017 	ldw	fp,0(sp)
    a380:	dec00204 	addi	sp,sp,8
    a384:	f800283a 	ret

0000a388 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    a388:	defffd04 	addi	sp,sp,-12
    a38c:	dfc00215 	stw	ra,8(sp)
    a390:	df000115 	stw	fp,4(sp)
    a394:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    a398:	0009883a 	mov	r4,zero
    a39c:	000a8500 	call	a850 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    a3a0:	000a8840 	call	a884 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    a3a4:	01000074 	movhi	r4,1
    a3a8:	2100db04 	addi	r4,r4,876
    a3ac:	01400074 	movhi	r5,1
    a3b0:	2940db04 	addi	r5,r5,876
    a3b4:	01800074 	movhi	r6,1
    a3b8:	3180db04 	addi	r6,r6,876
    a3bc:	000bbd00 	call	bbd0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    a3c0:	000b7480 	call	b748 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    a3c4:	01000074 	movhi	r4,1
    a3c8:	212deb04 	addi	r4,r4,-18516
    a3cc:	000c3cc0 	call	c3cc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    a3d0:	d1201c17 	ldw	r4,-32656(gp)
    a3d4:	d1601d17 	ldw	r5,-32652(gp)
    a3d8:	d1a01e17 	ldw	r6,-32648(gp)
    a3dc:	000053c0 	call	53c <main>
    a3e0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    a3e4:	01000044 	movi	r4,1
    a3e8:	0009d700 	call	9d70 <close>
  exit (result);
    a3ec:	e13fff17 	ldw	r4,-4(fp)
    a3f0:	000c3e00 	call	c3e0 <exit>

0000a3f4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    a3f4:	defffe04 	addi	sp,sp,-8
    a3f8:	df000115 	stw	fp,4(sp)
    a3fc:	df000104 	addi	fp,sp,4
    a400:	e13fff15 	stw	r4,-4(fp)
}
    a404:	e037883a 	mov	sp,fp
    a408:	df000017 	ldw	fp,0(sp)
    a40c:	dec00104 	addi	sp,sp,4
    a410:	f800283a 	ret

0000a414 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    a414:	defffe04 	addi	sp,sp,-8
    a418:	df000115 	stw	fp,4(sp)
    a41c:	df000104 	addi	fp,sp,4
    a420:	e13fff15 	stw	r4,-4(fp)
}
    a424:	e037883a 	mov	sp,fp
    a428:	df000017 	ldw	fp,0(sp)
    a42c:	dec00104 	addi	sp,sp,4
    a430:	f800283a 	ret

0000a434 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    a434:	defff704 	addi	sp,sp,-36
    a438:	dfc00815 	stw	ra,32(sp)
    a43c:	df000715 	stw	fp,28(sp)
    a440:	df000704 	addi	fp,sp,28
    a444:	e13ffb15 	stw	r4,-20(fp)
    a448:	e17ffc15 	stw	r5,-16(fp)
    a44c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a450:	e0bffb17 	ldw	r2,-20(fp)
    a454:	1004803a 	cmplt	r2,r2,zero
    a458:	1000081e 	bne	r2,zero,a47c <read+0x48>
    a45c:	e0bffb17 	ldw	r2,-20(fp)
    a460:	10800324 	muli	r2,r2,12
    a464:	1007883a 	mov	r3,r2
    a468:	00800074 	movhi	r2,1
    a46c:	1082f404 	addi	r2,r2,3024
    a470:	1887883a 	add	r3,r3,r2
    a474:	e0ffff15 	stw	r3,-4(fp)
    a478:	00000106 	br	a480 <read+0x4c>
    a47c:	e03fff15 	stw	zero,-4(fp)
    a480:	e0bfff17 	ldw	r2,-4(fp)
    a484:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    a488:	e0bffa17 	ldw	r2,-24(fp)
    a48c:	1005003a 	cmpeq	r2,r2,zero
    a490:	1000241e 	bne	r2,zero,a524 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    a494:	e0bffa17 	ldw	r2,-24(fp)
    a498:	10800217 	ldw	r2,8(r2)
    a49c:	108000cc 	andi	r2,r2,3
    a4a0:	10800060 	cmpeqi	r2,r2,1
    a4a4:	10001a1e 	bne	r2,zero,a510 <read+0xdc>
    a4a8:	e0bffa17 	ldw	r2,-24(fp)
    a4ac:	10800017 	ldw	r2,0(r2)
    a4b0:	10800517 	ldw	r2,20(r2)
    a4b4:	1005003a 	cmpeq	r2,r2,zero
    a4b8:	1000151e 	bne	r2,zero,a510 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    a4bc:	e0bffa17 	ldw	r2,-24(fp)
    a4c0:	10800017 	ldw	r2,0(r2)
    a4c4:	10800517 	ldw	r2,20(r2)
    a4c8:	e17ffc17 	ldw	r5,-16(fp)
    a4cc:	e1bffd17 	ldw	r6,-12(fp)
    a4d0:	e13ffa17 	ldw	r4,-24(fp)
    a4d4:	103ee83a 	callr	r2
    a4d8:	e0bff915 	stw	r2,-28(fp)
    a4dc:	e0bff917 	ldw	r2,-28(fp)
    a4e0:	1004403a 	cmpge	r2,r2,zero
    a4e4:	1000071e 	bne	r2,zero,a504 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    a4e8:	000a5540 	call	a554 <alt_get_errno>
    a4ec:	e0fff917 	ldw	r3,-28(fp)
    a4f0:	00c7c83a 	sub	r3,zero,r3
    a4f4:	10c00015 	stw	r3,0(r2)
          return -1;
    a4f8:	00bfffc4 	movi	r2,-1
    a4fc:	e0bffe15 	stw	r2,-8(fp)
    a500:	00000e06 	br	a53c <read+0x108>
        }
        return rval;
    a504:	e0bff917 	ldw	r2,-28(fp)
    a508:	e0bffe15 	stw	r2,-8(fp)
    a50c:	00000b06 	br	a53c <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    a510:	000a5540 	call	a554 <alt_get_errno>
    a514:	1007883a 	mov	r3,r2
    a518:	00800344 	movi	r2,13
    a51c:	18800015 	stw	r2,0(r3)
    a520:	00000406 	br	a534 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    a524:	000a5540 	call	a554 <alt_get_errno>
    a528:	1007883a 	mov	r3,r2
    a52c:	00801444 	movi	r2,81
    a530:	18800015 	stw	r2,0(r3)
  }
  return -1;
    a534:	00bfffc4 	movi	r2,-1
    a538:	e0bffe15 	stw	r2,-8(fp)
    a53c:	e0bffe17 	ldw	r2,-8(fp)
}
    a540:	e037883a 	mov	sp,fp
    a544:	dfc00117 	ldw	ra,4(sp)
    a548:	df000017 	ldw	fp,0(sp)
    a54c:	dec00204 	addi	sp,sp,8
    a550:	f800283a 	ret

0000a554 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a554:	defffd04 	addi	sp,sp,-12
    a558:	dfc00215 	stw	ra,8(sp)
    a55c:	df000115 	stw	fp,4(sp)
    a560:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a564:	00800074 	movhi	r2,1
    a568:	10877704 	addi	r2,r2,7644
    a56c:	10800017 	ldw	r2,0(r2)
    a570:	1005003a 	cmpeq	r2,r2,zero
    a574:	1000061e 	bne	r2,zero,a590 <alt_get_errno+0x3c>
    a578:	00800074 	movhi	r2,1
    a57c:	10877704 	addi	r2,r2,7644
    a580:	10800017 	ldw	r2,0(r2)
    a584:	103ee83a 	callr	r2
    a588:	e0bfff15 	stw	r2,-4(fp)
    a58c:	00000306 	br	a59c <alt_get_errno+0x48>
    a590:	00800074 	movhi	r2,1
    a594:	10878704 	addi	r2,r2,7708
    a598:	e0bfff15 	stw	r2,-4(fp)
    a59c:	e0bfff17 	ldw	r2,-4(fp)
}
    a5a0:	e037883a 	mov	sp,fp
    a5a4:	dfc00117 	ldw	ra,4(sp)
    a5a8:	df000017 	ldw	fp,0(sp)
    a5ac:	dec00204 	addi	sp,sp,8
    a5b0:	f800283a 	ret

0000a5b4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a5b4:	defffe04 	addi	sp,sp,-8
    a5b8:	df000115 	stw	fp,4(sp)
    a5bc:	df000104 	addi	fp,sp,4
    a5c0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a5c4:	e0bfff17 	ldw	r2,-4(fp)
    a5c8:	108000d0 	cmplti	r2,r2,3
    a5cc:	10000d1e 	bne	r2,zero,a604 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    a5d0:	e0bfff17 	ldw	r2,-4(fp)
    a5d4:	00c00074 	movhi	r3,1
    a5d8:	18c2f404 	addi	r3,r3,3024
    a5dc:	10800324 	muli	r2,r2,12
    a5e0:	10c5883a 	add	r2,r2,r3
    a5e4:	10800204 	addi	r2,r2,8
    a5e8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a5ec:	e0bfff17 	ldw	r2,-4(fp)
    a5f0:	00c00074 	movhi	r3,1
    a5f4:	18c2f404 	addi	r3,r3,3024
    a5f8:	10800324 	muli	r2,r2,12
    a5fc:	10c5883a 	add	r2,r2,r3
    a600:	10000015 	stw	zero,0(r2)
  }
}
    a604:	e037883a 	mov	sp,fp
    a608:	df000017 	ldw	fp,0(sp)
    a60c:	dec00104 	addi	sp,sp,4
    a610:	f800283a 	ret

0000a614 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    a614:	defff804 	addi	sp,sp,-32
    a618:	df000715 	stw	fp,28(sp)
    a61c:	df000704 	addi	fp,sp,28
    a620:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a624:	0005303a 	rdctl	r2,status
    a628:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a62c:	e0fffb17 	ldw	r3,-20(fp)
    a630:	00bfff84 	movi	r2,-2
    a634:	1884703a 	and	r2,r3,r2
    a638:	1001703a 	wrctl	status,r2
  
  return context;
    a63c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    a640:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    a644:	d0a00c17 	ldw	r2,-32720(gp)
    a648:	10c000c4 	addi	r3,r2,3
    a64c:	00bfff04 	movi	r2,-4
    a650:	1884703a 	and	r2,r3,r2
    a654:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    a658:	d0e00c17 	ldw	r3,-32720(gp)
    a65c:	e0bffe17 	ldw	r2,-8(fp)
    a660:	1887883a 	add	r3,r3,r2
    a664:	008000b4 	movhi	r2,2
    a668:	10a00004 	addi	r2,r2,-32768
    a66c:	10c0072e 	bgeu	r2,r3,a68c <sbrk+0x78>
    a670:	e0bffd17 	ldw	r2,-12(fp)
    a674:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a678:	e0bffa17 	ldw	r2,-24(fp)
    a67c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    a680:	00bfffc4 	movi	r2,-1
    a684:	e0bfff15 	stw	r2,-4(fp)
    a688:	00000c06 	br	a6bc <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    a68c:	d0a00c17 	ldw	r2,-32720(gp)
    a690:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    a694:	d0e00c17 	ldw	r3,-32720(gp)
    a698:	e0bffe17 	ldw	r2,-8(fp)
    a69c:	1885883a 	add	r2,r3,r2
    a6a0:	d0a00c15 	stw	r2,-32720(gp)
    a6a4:	e0bffd17 	ldw	r2,-12(fp)
    a6a8:	e0bff915 	stw	r2,-28(fp)
    a6ac:	e0bff917 	ldw	r2,-28(fp)
    a6b0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    a6b4:	e0bffc17 	ldw	r2,-16(fp)
    a6b8:	e0bfff15 	stw	r2,-4(fp)
    a6bc:	e0bfff17 	ldw	r2,-4(fp)
} 
    a6c0:	e037883a 	mov	sp,fp
    a6c4:	df000017 	ldw	fp,0(sp)
    a6c8:	dec00104 	addi	sp,sp,4
    a6cc:	f800283a 	ret

0000a6d0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    a6d0:	defff704 	addi	sp,sp,-36
    a6d4:	dfc00815 	stw	ra,32(sp)
    a6d8:	df000715 	stw	fp,28(sp)
    a6dc:	df000704 	addi	fp,sp,28
    a6e0:	e13ffb15 	stw	r4,-20(fp)
    a6e4:	e17ffc15 	stw	r5,-16(fp)
    a6e8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a6ec:	e0bffb17 	ldw	r2,-20(fp)
    a6f0:	1004803a 	cmplt	r2,r2,zero
    a6f4:	1000081e 	bne	r2,zero,a718 <write+0x48>
    a6f8:	e0bffb17 	ldw	r2,-20(fp)
    a6fc:	10800324 	muli	r2,r2,12
    a700:	1007883a 	mov	r3,r2
    a704:	00800074 	movhi	r2,1
    a708:	1082f404 	addi	r2,r2,3024
    a70c:	1887883a 	add	r3,r3,r2
    a710:	e0ffff15 	stw	r3,-4(fp)
    a714:	00000106 	br	a71c <write+0x4c>
    a718:	e03fff15 	stw	zero,-4(fp)
    a71c:	e0bfff17 	ldw	r2,-4(fp)
    a720:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    a724:	e0bffa17 	ldw	r2,-24(fp)
    a728:	1005003a 	cmpeq	r2,r2,zero
    a72c:	1000241e 	bne	r2,zero,a7c0 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    a730:	e0bffa17 	ldw	r2,-24(fp)
    a734:	10800217 	ldw	r2,8(r2)
    a738:	108000cc 	andi	r2,r2,3
    a73c:	1005003a 	cmpeq	r2,r2,zero
    a740:	10001a1e 	bne	r2,zero,a7ac <write+0xdc>
    a744:	e0bffa17 	ldw	r2,-24(fp)
    a748:	10800017 	ldw	r2,0(r2)
    a74c:	10800617 	ldw	r2,24(r2)
    a750:	1005003a 	cmpeq	r2,r2,zero
    a754:	1000151e 	bne	r2,zero,a7ac <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    a758:	e0bffa17 	ldw	r2,-24(fp)
    a75c:	10800017 	ldw	r2,0(r2)
    a760:	10800617 	ldw	r2,24(r2)
    a764:	e17ffc17 	ldw	r5,-16(fp)
    a768:	e1bffd17 	ldw	r6,-12(fp)
    a76c:	e13ffa17 	ldw	r4,-24(fp)
    a770:	103ee83a 	callr	r2
    a774:	e0bff915 	stw	r2,-28(fp)
    a778:	e0bff917 	ldw	r2,-28(fp)
    a77c:	1004403a 	cmpge	r2,r2,zero
    a780:	1000071e 	bne	r2,zero,a7a0 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    a784:	000a7f00 	call	a7f0 <alt_get_errno>
    a788:	e0fff917 	ldw	r3,-28(fp)
    a78c:	00c7c83a 	sub	r3,zero,r3
    a790:	10c00015 	stw	r3,0(r2)
        return -1;
    a794:	00bfffc4 	movi	r2,-1
    a798:	e0bffe15 	stw	r2,-8(fp)
    a79c:	00000e06 	br	a7d8 <write+0x108>
      }
      return rval;
    a7a0:	e0bff917 	ldw	r2,-28(fp)
    a7a4:	e0bffe15 	stw	r2,-8(fp)
    a7a8:	00000b06 	br	a7d8 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    a7ac:	000a7f00 	call	a7f0 <alt_get_errno>
    a7b0:	1007883a 	mov	r3,r2
    a7b4:	00800344 	movi	r2,13
    a7b8:	18800015 	stw	r2,0(r3)
    a7bc:	00000406 	br	a7d0 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    a7c0:	000a7f00 	call	a7f0 <alt_get_errno>
    a7c4:	1007883a 	mov	r3,r2
    a7c8:	00801444 	movi	r2,81
    a7cc:	18800015 	stw	r2,0(r3)
  }
  return -1;
    a7d0:	00bfffc4 	movi	r2,-1
    a7d4:	e0bffe15 	stw	r2,-8(fp)
    a7d8:	e0bffe17 	ldw	r2,-8(fp)
}
    a7dc:	e037883a 	mov	sp,fp
    a7e0:	dfc00117 	ldw	ra,4(sp)
    a7e4:	df000017 	ldw	fp,0(sp)
    a7e8:	dec00204 	addi	sp,sp,8
    a7ec:	f800283a 	ret

0000a7f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a7f0:	defffd04 	addi	sp,sp,-12
    a7f4:	dfc00215 	stw	ra,8(sp)
    a7f8:	df000115 	stw	fp,4(sp)
    a7fc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a800:	00800074 	movhi	r2,1
    a804:	10877704 	addi	r2,r2,7644
    a808:	10800017 	ldw	r2,0(r2)
    a80c:	1005003a 	cmpeq	r2,r2,zero
    a810:	1000061e 	bne	r2,zero,a82c <alt_get_errno+0x3c>
    a814:	00800074 	movhi	r2,1
    a818:	10877704 	addi	r2,r2,7644
    a81c:	10800017 	ldw	r2,0(r2)
    a820:	103ee83a 	callr	r2
    a824:	e0bfff15 	stw	r2,-4(fp)
    a828:	00000306 	br	a838 <alt_get_errno+0x48>
    a82c:	00800074 	movhi	r2,1
    a830:	10878704 	addi	r2,r2,7708
    a834:	e0bfff15 	stw	r2,-4(fp)
    a838:	e0bfff17 	ldw	r2,-4(fp)
}
    a83c:	e037883a 	mov	sp,fp
    a840:	dfc00117 	ldw	ra,4(sp)
    a844:	df000017 	ldw	fp,0(sp)
    a848:	dec00204 	addi	sp,sp,8
    a84c:	f800283a 	ret

0000a850 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    a850:	defffd04 	addi	sp,sp,-12
    a854:	dfc00215 	stw	ra,8(sp)
    a858:	df000115 	stw	fp,4(sp)
    a85c:	df000104 	addi	fp,sp,4
    a860:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU1, cpu1);
    a864:	000c0b00 	call	c0b0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    a868:	00800044 	movi	r2,1
    a86c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    a870:	e037883a 	mov	sp,fp
    a874:	dfc00117 	ldw	ra,4(sp)
    a878:	df000017 	ldw	fp,0(sp)
    a87c:	dec00204 	addi	sp,sp,8
    a880:	f800283a 	ret

0000a884 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    a884:	defffe04 	addi	sp,sp,-8
    a888:	dfc00115 	stw	ra,4(sp)
    a88c:	df000015 	stw	fp,0(sp)
    a890:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    a894:	010000b4 	movhi	r4,2
    a898:	21240004 	addi	r4,r4,-28672
    a89c:	000b883a 	mov	r5,zero
    a8a0:	01800044 	movi	r6,1
    a8a4:	01c0fa04 	movi	r7,1000
    a8a8:	000b4340 	call	b434 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1, jtag_uart_1);
    a8ac:	01000074 	movhi	r4,1
    a8b0:	21035e04 	addi	r4,r4,3448
    a8b4:	000b883a 	mov	r5,zero
    a8b8:	01800404 	movi	r6,16
    a8bc:	000aa600 	call	aa60 <altera_avalon_jtag_uart_init>
    a8c0:	01000074 	movhi	r4,1
    a8c4:	21035404 	addi	r4,r4,3408
    a8c8:	000a8e00 	call	a8e0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
    a8cc:	e037883a 	mov	sp,fp
    a8d0:	dfc00117 	ldw	ra,4(sp)
    a8d4:	df000017 	ldw	fp,0(sp)
    a8d8:	dec00204 	addi	sp,sp,8
    a8dc:	f800283a 	ret

0000a8e0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    a8e0:	defffd04 	addi	sp,sp,-12
    a8e4:	dfc00215 	stw	ra,8(sp)
    a8e8:	df000115 	stw	fp,4(sp)
    a8ec:	df000104 	addi	fp,sp,4
    a8f0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    a8f4:	e13fff17 	ldw	r4,-4(fp)
    a8f8:	01400074 	movhi	r5,1
    a8fc:	29477404 	addi	r5,r5,7632
    a900:	000b6340 	call	b634 <alt_dev_llist_insert>
}
    a904:	e037883a 	mov	sp,fp
    a908:	dfc00117 	ldw	ra,4(sp)
    a90c:	df000017 	ldw	fp,0(sp)
    a910:	dec00204 	addi	sp,sp,8
    a914:	f800283a 	ret

0000a918 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    a918:	defffa04 	addi	sp,sp,-24
    a91c:	dfc00515 	stw	ra,20(sp)
    a920:	df000415 	stw	fp,16(sp)
    a924:	df000404 	addi	fp,sp,16
    a928:	e13ffd15 	stw	r4,-12(fp)
    a92c:	e17ffe15 	stw	r5,-8(fp)
    a930:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a934:	e0bffd17 	ldw	r2,-12(fp)
    a938:	10800017 	ldw	r2,0(r2)
    a93c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    a940:	e0bffc17 	ldw	r2,-16(fp)
    a944:	11000a04 	addi	r4,r2,40
    a948:	e0bffd17 	ldw	r2,-12(fp)
    a94c:	11c00217 	ldw	r7,8(r2)
    a950:	e17ffe17 	ldw	r5,-8(fp)
    a954:	e1bfff17 	ldw	r6,-4(fp)
    a958:	000af600 	call	af60 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    a95c:	e037883a 	mov	sp,fp
    a960:	dfc00117 	ldw	ra,4(sp)
    a964:	df000017 	ldw	fp,0(sp)
    a968:	dec00204 	addi	sp,sp,8
    a96c:	f800283a 	ret

0000a970 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    a970:	defffa04 	addi	sp,sp,-24
    a974:	dfc00515 	stw	ra,20(sp)
    a978:	df000415 	stw	fp,16(sp)
    a97c:	df000404 	addi	fp,sp,16
    a980:	e13ffd15 	stw	r4,-12(fp)
    a984:	e17ffe15 	stw	r5,-8(fp)
    a988:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a98c:	e0bffd17 	ldw	r2,-12(fp)
    a990:	10800017 	ldw	r2,0(r2)
    a994:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    a998:	e0bffc17 	ldw	r2,-16(fp)
    a99c:	11000a04 	addi	r4,r2,40
    a9a0:	e0bffd17 	ldw	r2,-12(fp)
    a9a4:	11c00217 	ldw	r7,8(r2)
    a9a8:	e17ffe17 	ldw	r5,-8(fp)
    a9ac:	e1bfff17 	ldw	r6,-4(fp)
    a9b0:	000b1840 	call	b184 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    a9b4:	e037883a 	mov	sp,fp
    a9b8:	dfc00117 	ldw	ra,4(sp)
    a9bc:	df000017 	ldw	fp,0(sp)
    a9c0:	dec00204 	addi	sp,sp,8
    a9c4:	f800283a 	ret

0000a9c8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    a9c8:	defffc04 	addi	sp,sp,-16
    a9cc:	dfc00315 	stw	ra,12(sp)
    a9d0:	df000215 	stw	fp,8(sp)
    a9d4:	df000204 	addi	fp,sp,8
    a9d8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a9dc:	e0bfff17 	ldw	r2,-4(fp)
    a9e0:	10800017 	ldw	r2,0(r2)
    a9e4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    a9e8:	e0bffe17 	ldw	r2,-8(fp)
    a9ec:	11000a04 	addi	r4,r2,40
    a9f0:	e0bfff17 	ldw	r2,-4(fp)
    a9f4:	11400217 	ldw	r5,8(r2)
    a9f8:	000adf80 	call	adf8 <altera_avalon_jtag_uart_close>
}
    a9fc:	e037883a 	mov	sp,fp
    aa00:	dfc00117 	ldw	ra,4(sp)
    aa04:	df000017 	ldw	fp,0(sp)
    aa08:	dec00204 	addi	sp,sp,8
    aa0c:	f800283a 	ret

0000aa10 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    aa10:	defffa04 	addi	sp,sp,-24
    aa14:	dfc00515 	stw	ra,20(sp)
    aa18:	df000415 	stw	fp,16(sp)
    aa1c:	df000404 	addi	fp,sp,16
    aa20:	e13ffd15 	stw	r4,-12(fp)
    aa24:	e17ffe15 	stw	r5,-8(fp)
    aa28:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    aa2c:	e0bffd17 	ldw	r2,-12(fp)
    aa30:	10800017 	ldw	r2,0(r2)
    aa34:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    aa38:	e0bffc17 	ldw	r2,-16(fp)
    aa3c:	11000a04 	addi	r4,r2,40
    aa40:	e17ffe17 	ldw	r5,-8(fp)
    aa44:	e1bfff17 	ldw	r6,-4(fp)
    aa48:	000ae6c0 	call	ae6c <altera_avalon_jtag_uart_ioctl>
}
    aa4c:	e037883a 	mov	sp,fp
    aa50:	dfc00117 	ldw	ra,4(sp)
    aa54:	df000017 	ldw	fp,0(sp)
    aa58:	dec00204 	addi	sp,sp,8
    aa5c:	f800283a 	ret

0000aa60 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    aa60:	defffa04 	addi	sp,sp,-24
    aa64:	dfc00515 	stw	ra,20(sp)
    aa68:	df000415 	stw	fp,16(sp)
    aa6c:	df000404 	addi	fp,sp,16
    aa70:	e13ffd15 	stw	r4,-12(fp)
    aa74:	e17ffe15 	stw	r5,-8(fp)
    aa78:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    aa7c:	e0fffd17 	ldw	r3,-12(fp)
    aa80:	00800044 	movi	r2,1
    aa84:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    aa88:	e0bffd17 	ldw	r2,-12(fp)
    aa8c:	10800017 	ldw	r2,0(r2)
    aa90:	11000104 	addi	r4,r2,4
    aa94:	e0bffd17 	ldw	r2,-12(fp)
    aa98:	10800817 	ldw	r2,32(r2)
    aa9c:	1007883a 	mov	r3,r2
    aaa0:	2005883a 	mov	r2,r4
    aaa4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    aaa8:	e13ffe17 	ldw	r4,-8(fp)
    aaac:	e17fff17 	ldw	r5,-4(fp)
    aab0:	d8000015 	stw	zero,0(sp)
    aab4:	01800074 	movhi	r6,1
    aab8:	31aac804 	addi	r6,r6,-21728
    aabc:	e1fffd17 	ldw	r7,-12(fp)
    aac0:	000b8400 	call	b840 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    aac4:	e0bffd17 	ldw	r2,-12(fp)
    aac8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    aacc:	e0bffd17 	ldw	r2,-12(fp)
    aad0:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    aad4:	00800074 	movhi	r2,1
    aad8:	10878c04 	addi	r2,r2,7728
    aadc:	10800017 	ldw	r2,0(r2)
    aae0:	100b883a 	mov	r5,r2
    aae4:	01800074 	movhi	r6,1
    aae8:	31ab5204 	addi	r6,r6,-21176
    aaec:	e1fffd17 	ldw	r7,-12(fp)
    aaf0:	000b4c40 	call	b4c4 <alt_alarm_start>
    aaf4:	1004403a 	cmpge	r2,r2,zero
    aaf8:	1000041e 	bne	r2,zero,ab0c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    aafc:	e0fffd17 	ldw	r3,-12(fp)
    ab00:	00a00034 	movhi	r2,32768
    ab04:	10bfffc4 	addi	r2,r2,-1
    ab08:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    ab0c:	e037883a 	mov	sp,fp
    ab10:	dfc00117 	ldw	ra,4(sp)
    ab14:	df000017 	ldw	fp,0(sp)
    ab18:	dec00204 	addi	sp,sp,8
    ab1c:	f800283a 	ret

0000ab20 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    ab20:	defff804 	addi	sp,sp,-32
    ab24:	df000715 	stw	fp,28(sp)
    ab28:	df000704 	addi	fp,sp,28
    ab2c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    ab30:	e0bfff17 	ldw	r2,-4(fp)
    ab34:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    ab38:	e0bffe17 	ldw	r2,-8(fp)
    ab3c:	10800017 	ldw	r2,0(r2)
    ab40:	e0bffd15 	stw	r2,-12(fp)
    ab44:	00000006 	br	ab48 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ab48:	e0bffd17 	ldw	r2,-12(fp)
    ab4c:	10800104 	addi	r2,r2,4
    ab50:	10800037 	ldwio	r2,0(r2)
    ab54:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    ab58:	e0bffc17 	ldw	r2,-16(fp)
    ab5c:	1080c00c 	andi	r2,r2,768
    ab60:	1005003a 	cmpeq	r2,r2,zero
    ab64:	1000741e 	bne	r2,zero,ad38 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    ab68:	e0bffc17 	ldw	r2,-16(fp)
    ab6c:	1080400c 	andi	r2,r2,256
    ab70:	1005003a 	cmpeq	r2,r2,zero
    ab74:	1000351e 	bne	r2,zero,ac4c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    ab78:	00800074 	movhi	r2,1
    ab7c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ab80:	e0bffe17 	ldw	r2,-8(fp)
    ab84:	10800a17 	ldw	r2,40(r2)
    ab88:	10800044 	addi	r2,r2,1
    ab8c:	1081ffcc 	andi	r2,r2,2047
    ab90:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    ab94:	e0bffe17 	ldw	r2,-8(fp)
    ab98:	10c00b17 	ldw	r3,44(r2)
    ab9c:	e0bffa17 	ldw	r2,-24(fp)
    aba0:	18801626 	beq	r3,r2,abfc <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    aba4:	e0bffd17 	ldw	r2,-12(fp)
    aba8:	10800037 	ldwio	r2,0(r2)
    abac:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    abb0:	e0bffb17 	ldw	r2,-20(fp)
    abb4:	10a0000c 	andi	r2,r2,32768
    abb8:	1005003a 	cmpeq	r2,r2,zero
    abbc:	10000f1e 	bne	r2,zero,abfc <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    abc0:	e0bffe17 	ldw	r2,-8(fp)
    abc4:	10c00a17 	ldw	r3,40(r2)
    abc8:	e0bffb17 	ldw	r2,-20(fp)
    abcc:	1009883a 	mov	r4,r2
    abd0:	e0bffe17 	ldw	r2,-8(fp)
    abd4:	1885883a 	add	r2,r3,r2
    abd8:	10800e04 	addi	r2,r2,56
    abdc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    abe0:	e0bffe17 	ldw	r2,-8(fp)
    abe4:	10800a17 	ldw	r2,40(r2)
    abe8:	10800044 	addi	r2,r2,1
    abec:	10c1ffcc 	andi	r3,r2,2047
    abf0:	e0bffe17 	ldw	r2,-8(fp)
    abf4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    abf8:	003fe106 	br	ab80 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    abfc:	e0bffb17 	ldw	r2,-20(fp)
    ac00:	10bfffec 	andhi	r2,r2,65535
    ac04:	1005003a 	cmpeq	r2,r2,zero
    ac08:	1000101e 	bne	r2,zero,ac4c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ac0c:	e0bffe17 	ldw	r2,-8(fp)
    ac10:	10c00817 	ldw	r3,32(r2)
    ac14:	00bfff84 	movi	r2,-2
    ac18:	1886703a 	and	r3,r3,r2
    ac1c:	e0bffe17 	ldw	r2,-8(fp)
    ac20:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    ac24:	e0bffd17 	ldw	r2,-12(fp)
    ac28:	11000104 	addi	r4,r2,4
    ac2c:	e0bffe17 	ldw	r2,-8(fp)
    ac30:	10800817 	ldw	r2,32(r2)
    ac34:	1007883a 	mov	r3,r2
    ac38:	2005883a 	mov	r2,r4
    ac3c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ac40:	e0bffd17 	ldw	r2,-12(fp)
    ac44:	10800104 	addi	r2,r2,4
    ac48:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    ac4c:	e0bffc17 	ldw	r2,-16(fp)
    ac50:	1080800c 	andi	r2,r2,512
    ac54:	1005003a 	cmpeq	r2,r2,zero
    ac58:	103fbb1e 	bne	r2,zero,ab48 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    ac5c:	e0bffc17 	ldw	r2,-16(fp)
    ac60:	10bfffec 	andhi	r2,r2,65535
    ac64:	1004d43a 	srli	r2,r2,16
    ac68:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    ac6c:	00001506 	br	acc4 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    ac70:	e13ffd17 	ldw	r4,-12(fp)
    ac74:	e0bffe17 	ldw	r2,-8(fp)
    ac78:	10c00d17 	ldw	r3,52(r2)
    ac7c:	e0bffe17 	ldw	r2,-8(fp)
    ac80:	1885883a 	add	r2,r3,r2
    ac84:	10820e04 	addi	r2,r2,2104
    ac88:	10800003 	ldbu	r2,0(r2)
    ac8c:	10c03fcc 	andi	r3,r2,255
    ac90:	18c0201c 	xori	r3,r3,128
    ac94:	18ffe004 	addi	r3,r3,-128
    ac98:	2005883a 	mov	r2,r4
    ac9c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    aca0:	e0bffe17 	ldw	r2,-8(fp)
    aca4:	10800d17 	ldw	r2,52(r2)
    aca8:	10800044 	addi	r2,r2,1
    acac:	10c1ffcc 	andi	r3,r2,2047
    acb0:	e0bffe17 	ldw	r2,-8(fp)
    acb4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    acb8:	e0bff917 	ldw	r2,-28(fp)
    acbc:	10bfffc4 	addi	r2,r2,-1
    acc0:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    acc4:	e0bff917 	ldw	r2,-28(fp)
    acc8:	1005003a 	cmpeq	r2,r2,zero
    accc:	1000051e 	bne	r2,zero,ace4 <altera_avalon_jtag_uart_irq+0x1c4>
    acd0:	e0bffe17 	ldw	r2,-8(fp)
    acd4:	10c00d17 	ldw	r3,52(r2)
    acd8:	e0bffe17 	ldw	r2,-8(fp)
    acdc:	10800c17 	ldw	r2,48(r2)
    ace0:	18bfe31e 	bne	r3,r2,ac70 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    ace4:	e0bff917 	ldw	r2,-28(fp)
    ace8:	1005003a 	cmpeq	r2,r2,zero
    acec:	103f961e 	bne	r2,zero,ab48 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    acf0:	e0bffe17 	ldw	r2,-8(fp)
    acf4:	10c00817 	ldw	r3,32(r2)
    acf8:	00bfff44 	movi	r2,-3
    acfc:	1886703a 	and	r3,r3,r2
    ad00:	e0bffe17 	ldw	r2,-8(fp)
    ad04:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ad08:	e0bffe17 	ldw	r2,-8(fp)
    ad0c:	10800017 	ldw	r2,0(r2)
    ad10:	11000104 	addi	r4,r2,4
    ad14:	e0bffe17 	ldw	r2,-8(fp)
    ad18:	10800817 	ldw	r2,32(r2)
    ad1c:	1007883a 	mov	r3,r2
    ad20:	2005883a 	mov	r2,r4
    ad24:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ad28:	e0bffd17 	ldw	r2,-12(fp)
    ad2c:	10800104 	addi	r2,r2,4
    ad30:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    ad34:	003f8406 	br	ab48 <altera_avalon_jtag_uart_irq+0x28>
}
    ad38:	e037883a 	mov	sp,fp
    ad3c:	df000017 	ldw	fp,0(sp)
    ad40:	dec00104 	addi	sp,sp,4
    ad44:	f800283a 	ret

0000ad48 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    ad48:	defffc04 	addi	sp,sp,-16
    ad4c:	df000315 	stw	fp,12(sp)
    ad50:	df000304 	addi	fp,sp,12
    ad54:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    ad58:	e0bfff17 	ldw	r2,-4(fp)
    ad5c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    ad60:	e0bffe17 	ldw	r2,-8(fp)
    ad64:	10800017 	ldw	r2,0(r2)
    ad68:	10800104 	addi	r2,r2,4
    ad6c:	10800037 	ldwio	r2,0(r2)
    ad70:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    ad74:	e0bffd17 	ldw	r2,-12(fp)
    ad78:	1081000c 	andi	r2,r2,1024
    ad7c:	1005003a 	cmpeq	r2,r2,zero
    ad80:	10000c1e 	bne	r2,zero,adb4 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    ad84:	e0bffe17 	ldw	r2,-8(fp)
    ad88:	10800017 	ldw	r2,0(r2)
    ad8c:	11000104 	addi	r4,r2,4
    ad90:	e0bffe17 	ldw	r2,-8(fp)
    ad94:	10800817 	ldw	r2,32(r2)
    ad98:	10810014 	ori	r2,r2,1024
    ad9c:	1007883a 	mov	r3,r2
    ada0:	2005883a 	mov	r2,r4
    ada4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    ada8:	e0bffe17 	ldw	r2,-8(fp)
    adac:	10000915 	stw	zero,36(r2)
    adb0:	00000a06 	br	addc <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    adb4:	e0bffe17 	ldw	r2,-8(fp)
    adb8:	10c00917 	ldw	r3,36(r2)
    adbc:	00a00034 	movhi	r2,32768
    adc0:	10bfff04 	addi	r2,r2,-4
    adc4:	10c00536 	bltu	r2,r3,addc <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    adc8:	e0bffe17 	ldw	r2,-8(fp)
    adcc:	10800917 	ldw	r2,36(r2)
    add0:	10c00044 	addi	r3,r2,1
    add4:	e0bffe17 	ldw	r2,-8(fp)
    add8:	10c00915 	stw	r3,36(r2)
    addc:	00800074 	movhi	r2,1
    ade0:	10878c04 	addi	r2,r2,7728
    ade4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    ade8:	e037883a 	mov	sp,fp
    adec:	df000017 	ldw	fp,0(sp)
    adf0:	dec00104 	addi	sp,sp,4
    adf4:	f800283a 	ret

0000adf8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    adf8:	defffc04 	addi	sp,sp,-16
    adfc:	df000315 	stw	fp,12(sp)
    ae00:	df000304 	addi	fp,sp,12
    ae04:	e13ffd15 	stw	r4,-12(fp)
    ae08:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ae0c:	00000706 	br	ae2c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    ae10:	e0bffe17 	ldw	r2,-8(fp)
    ae14:	1090000c 	andi	r2,r2,16384
    ae18:	1005003a 	cmpeq	r2,r2,zero
    ae1c:	1000031e 	bne	r2,zero,ae2c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    ae20:	00bffd44 	movi	r2,-11
    ae24:	e0bfff15 	stw	r2,-4(fp)
    ae28:	00000b06 	br	ae58 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ae2c:	e0bffd17 	ldw	r2,-12(fp)
    ae30:	10c00d17 	ldw	r3,52(r2)
    ae34:	e0bffd17 	ldw	r2,-12(fp)
    ae38:	10800c17 	ldw	r2,48(r2)
    ae3c:	18800526 	beq	r3,r2,ae54 <altera_avalon_jtag_uart_close+0x5c>
    ae40:	e0bffd17 	ldw	r2,-12(fp)
    ae44:	10c00917 	ldw	r3,36(r2)
    ae48:	e0bffd17 	ldw	r2,-12(fp)
    ae4c:	10800117 	ldw	r2,4(r2)
    ae50:	18bfef36 	bltu	r3,r2,ae10 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    ae54:	e03fff15 	stw	zero,-4(fp)
    ae58:	e0bfff17 	ldw	r2,-4(fp)
}
    ae5c:	e037883a 	mov	sp,fp
    ae60:	df000017 	ldw	fp,0(sp)
    ae64:	dec00104 	addi	sp,sp,4
    ae68:	f800283a 	ret

0000ae6c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    ae6c:	defff804 	addi	sp,sp,-32
    ae70:	df000715 	stw	fp,28(sp)
    ae74:	df000704 	addi	fp,sp,28
    ae78:	e13ffb15 	stw	r4,-20(fp)
    ae7c:	e17ffc15 	stw	r5,-16(fp)
    ae80:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    ae84:	00bff9c4 	movi	r2,-25
    ae88:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    ae8c:	e0bffc17 	ldw	r2,-16(fp)
    ae90:	e0bfff15 	stw	r2,-4(fp)
    ae94:	e0ffff17 	ldw	r3,-4(fp)
    ae98:	189a8060 	cmpeqi	r2,r3,27137
    ae9c:	1000041e 	bne	r2,zero,aeb0 <altera_avalon_jtag_uart_ioctl+0x44>
    aea0:	e0ffff17 	ldw	r3,-4(fp)
    aea4:	189a80a0 	cmpeqi	r2,r3,27138
    aea8:	10001b1e 	bne	r2,zero,af18 <altera_avalon_jtag_uart_ioctl+0xac>
    aeac:	00002706 	br	af4c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    aeb0:	e0bffb17 	ldw	r2,-20(fp)
    aeb4:	10c00117 	ldw	r3,4(r2)
    aeb8:	00a00034 	movhi	r2,32768
    aebc:	10bfffc4 	addi	r2,r2,-1
    aec0:	18802226 	beq	r3,r2,af4c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    aec4:	e0bffd17 	ldw	r2,-12(fp)
    aec8:	10800017 	ldw	r2,0(r2)
    aecc:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    aed0:	e0bff917 	ldw	r2,-28(fp)
    aed4:	10800090 	cmplti	r2,r2,2
    aed8:	1000071e 	bne	r2,zero,aef8 <altera_avalon_jtag_uart_ioctl+0x8c>
    aedc:	e0fff917 	ldw	r3,-28(fp)
    aee0:	00a00034 	movhi	r2,32768
    aee4:	10bfffc4 	addi	r2,r2,-1
    aee8:	18800326 	beq	r3,r2,aef8 <altera_avalon_jtag_uart_ioctl+0x8c>
    aeec:	e0bff917 	ldw	r2,-28(fp)
    aef0:	e0bffe15 	stw	r2,-8(fp)
    aef4:	00000306 	br	af04 <altera_avalon_jtag_uart_ioctl+0x98>
    aef8:	00e00034 	movhi	r3,32768
    aefc:	18ffff84 	addi	r3,r3,-2
    af00:	e0fffe15 	stw	r3,-8(fp)
    af04:	e0bffb17 	ldw	r2,-20(fp)
    af08:	e0fffe17 	ldw	r3,-8(fp)
    af0c:	10c00115 	stw	r3,4(r2)
      rc = 0;
    af10:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    af14:	00000d06 	br	af4c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    af18:	e0bffb17 	ldw	r2,-20(fp)
    af1c:	10c00117 	ldw	r3,4(r2)
    af20:	00a00034 	movhi	r2,32768
    af24:	10bfffc4 	addi	r2,r2,-1
    af28:	18800826 	beq	r3,r2,af4c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    af2c:	e13ffd17 	ldw	r4,-12(fp)
    af30:	e0bffb17 	ldw	r2,-20(fp)
    af34:	10c00917 	ldw	r3,36(r2)
    af38:	e0bffb17 	ldw	r2,-20(fp)
    af3c:	10800117 	ldw	r2,4(r2)
    af40:	1885803a 	cmpltu	r2,r3,r2
    af44:	20800015 	stw	r2,0(r4)
      rc = 0;
    af48:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    af4c:	e0bffa17 	ldw	r2,-24(fp)
}
    af50:	e037883a 	mov	sp,fp
    af54:	df000017 	ldw	fp,0(sp)
    af58:	dec00104 	addi	sp,sp,4
    af5c:	f800283a 	ret

0000af60 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    af60:	defff204 	addi	sp,sp,-56
    af64:	dfc00d15 	stw	ra,52(sp)
    af68:	df000c15 	stw	fp,48(sp)
    af6c:	df000c04 	addi	fp,sp,48
    af70:	e13ffb15 	stw	r4,-20(fp)
    af74:	e17ffc15 	stw	r5,-16(fp)
    af78:	e1bffd15 	stw	r6,-12(fp)
    af7c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    af80:	e0bffc17 	ldw	r2,-16(fp)
    af84:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    af88:	00004806 	br	b0ac <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    af8c:	e0bffb17 	ldw	r2,-20(fp)
    af90:	10800a17 	ldw	r2,40(r2)
    af94:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    af98:	e0bffb17 	ldw	r2,-20(fp)
    af9c:	10800b17 	ldw	r2,44(r2)
    afa0:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    afa4:	e0fff717 	ldw	r3,-36(fp)
    afa8:	e0bff617 	ldw	r2,-40(fp)
    afac:	18800536 	bltu	r3,r2,afc4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    afb0:	e0bff717 	ldw	r2,-36(fp)
    afb4:	e0fff617 	ldw	r3,-40(fp)
    afb8:	10c5c83a 	sub	r2,r2,r3
    afbc:	e0bff815 	stw	r2,-32(fp)
    afc0:	00000406 	br	afd4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    afc4:	00820004 	movi	r2,2048
    afc8:	e0fff617 	ldw	r3,-40(fp)
    afcc:	10c5c83a 	sub	r2,r2,r3
    afd0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    afd4:	e0bff817 	ldw	r2,-32(fp)
    afd8:	1005003a 	cmpeq	r2,r2,zero
    afdc:	10001f1e 	bne	r2,zero,b05c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    afe0:	e0fffd17 	ldw	r3,-12(fp)
    afe4:	e0bff817 	ldw	r2,-32(fp)
    afe8:	1880022e 	bgeu	r3,r2,aff4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    afec:	e0bffd17 	ldw	r2,-12(fp)
    aff0:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    aff4:	e0bffb17 	ldw	r2,-20(fp)
    aff8:	10c00e04 	addi	r3,r2,56
    affc:	e0bff617 	ldw	r2,-40(fp)
    b000:	1887883a 	add	r3,r3,r2
    b004:	e0bffa17 	ldw	r2,-24(fp)
    b008:	1009883a 	mov	r4,r2
    b00c:	180b883a 	mov	r5,r3
    b010:	e1bff817 	ldw	r6,-32(fp)
    b014:	00059c40 	call	59c4 <memcpy>
      ptr   += n;
    b018:	e0fff817 	ldw	r3,-32(fp)
    b01c:	e0bffa17 	ldw	r2,-24(fp)
    b020:	10c5883a 	add	r2,r2,r3
    b024:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    b028:	e0fffd17 	ldw	r3,-12(fp)
    b02c:	e0bff817 	ldw	r2,-32(fp)
    b030:	1885c83a 	sub	r2,r3,r2
    b034:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b038:	e0fff617 	ldw	r3,-40(fp)
    b03c:	e0bff817 	ldw	r2,-32(fp)
    b040:	1885883a 	add	r2,r3,r2
    b044:	10c1ffcc 	andi	r3,r2,2047
    b048:	e0bffb17 	ldw	r2,-20(fp)
    b04c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    b050:	e0bffd17 	ldw	r2,-12(fp)
    b054:	10800048 	cmpgei	r2,r2,1
    b058:	103fcc1e 	bne	r2,zero,af8c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    b05c:	e0fffa17 	ldw	r3,-24(fp)
    b060:	e0bffc17 	ldw	r2,-16(fp)
    b064:	1880141e 	bne	r3,r2,b0b8 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    b068:	e0bffe17 	ldw	r2,-8(fp)
    b06c:	1090000c 	andi	r2,r2,16384
    b070:	1004c03a 	cmpne	r2,r2,zero
    b074:	1000101e 	bne	r2,zero,b0b8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    b078:	e0bffb17 	ldw	r2,-20(fp)
    b07c:	10c00a17 	ldw	r3,40(r2)
    b080:	e0bff717 	ldw	r2,-36(fp)
    b084:	1880051e 	bne	r3,r2,b09c <altera_avalon_jtag_uart_read+0x13c>
    b088:	e0bffb17 	ldw	r2,-20(fp)
    b08c:	10c00917 	ldw	r3,36(r2)
    b090:	e0bffb17 	ldw	r2,-20(fp)
    b094:	10800117 	ldw	r2,4(r2)
    b098:	18bff736 	bltu	r3,r2,b078 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    b09c:	e0bffb17 	ldw	r2,-20(fp)
    b0a0:	10c00a17 	ldw	r3,40(r2)
    b0a4:	e0bff717 	ldw	r2,-36(fp)
    b0a8:	18800326 	beq	r3,r2,b0b8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    b0ac:	e0bffd17 	ldw	r2,-12(fp)
    b0b0:	10800048 	cmpgei	r2,r2,1
    b0b4:	103fb51e 	bne	r2,zero,af8c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    b0b8:	e0fffa17 	ldw	r3,-24(fp)
    b0bc:	e0bffc17 	ldw	r2,-16(fp)
    b0c0:	18801926 	beq	r3,r2,b128 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b0c4:	0005303a 	rdctl	r2,status
    b0c8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b0cc:	e0fff517 	ldw	r3,-44(fp)
    b0d0:	00bfff84 	movi	r2,-2
    b0d4:	1884703a 	and	r2,r3,r2
    b0d8:	1001703a 	wrctl	status,r2
  
  return context;
    b0dc:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    b0e0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b0e4:	e0bffb17 	ldw	r2,-20(fp)
    b0e8:	10800817 	ldw	r2,32(r2)
    b0ec:	10c00054 	ori	r3,r2,1
    b0f0:	e0bffb17 	ldw	r2,-20(fp)
    b0f4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b0f8:	e0bffb17 	ldw	r2,-20(fp)
    b0fc:	10800017 	ldw	r2,0(r2)
    b100:	11000104 	addi	r4,r2,4
    b104:	e0bffb17 	ldw	r2,-20(fp)
    b108:	10800817 	ldw	r2,32(r2)
    b10c:	1007883a 	mov	r3,r2
    b110:	2005883a 	mov	r2,r4
    b114:	10c00035 	stwio	r3,0(r2)
    b118:	e0bff917 	ldw	r2,-28(fp)
    b11c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b120:	e0bff417 	ldw	r2,-48(fp)
    b124:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    b128:	e0fffa17 	ldw	r3,-24(fp)
    b12c:	e0bffc17 	ldw	r2,-16(fp)
    b130:	18800526 	beq	r3,r2,b148 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    b134:	e0fffa17 	ldw	r3,-24(fp)
    b138:	e0bffc17 	ldw	r2,-16(fp)
    b13c:	1887c83a 	sub	r3,r3,r2
    b140:	e0ffff15 	stw	r3,-4(fp)
    b144:	00000906 	br	b16c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    b148:	e0bffe17 	ldw	r2,-8(fp)
    b14c:	1090000c 	andi	r2,r2,16384
    b150:	1005003a 	cmpeq	r2,r2,zero
    b154:	1000031e 	bne	r2,zero,b164 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    b158:	00bffd44 	movi	r2,-11
    b15c:	e0bfff15 	stw	r2,-4(fp)
    b160:	00000206 	br	b16c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    b164:	00bffec4 	movi	r2,-5
    b168:	e0bfff15 	stw	r2,-4(fp)
    b16c:	e0bfff17 	ldw	r2,-4(fp)
}
    b170:	e037883a 	mov	sp,fp
    b174:	dfc00117 	ldw	ra,4(sp)
    b178:	df000017 	ldw	fp,0(sp)
    b17c:	dec00204 	addi	sp,sp,8
    b180:	f800283a 	ret

0000b184 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    b184:	defff204 	addi	sp,sp,-56
    b188:	dfc00d15 	stw	ra,52(sp)
    b18c:	df000c15 	stw	fp,48(sp)
    b190:	df000c04 	addi	fp,sp,48
    b194:	e13ffb15 	stw	r4,-20(fp)
    b198:	e17ffc15 	stw	r5,-16(fp)
    b19c:	e1bffd15 	stw	r6,-12(fp)
    b1a0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    b1a4:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    b1a8:	e0bffc17 	ldw	r2,-16(fp)
    b1ac:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b1b0:	00003a06 	br	b29c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    b1b4:	e0bffb17 	ldw	r2,-20(fp)
    b1b8:	10800c17 	ldw	r2,48(r2)
    b1bc:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    b1c0:	e0bffb17 	ldw	r2,-20(fp)
    b1c4:	10800d17 	ldw	r2,52(r2)
    b1c8:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    b1cc:	e0fffa17 	ldw	r3,-24(fp)
    b1d0:	e0bff917 	ldw	r2,-28(fp)
    b1d4:	1880062e 	bgeu	r3,r2,b1f0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    b1d8:	e0fff917 	ldw	r3,-28(fp)
    b1dc:	e0bffa17 	ldw	r2,-24(fp)
    b1e0:	1885c83a 	sub	r2,r3,r2
    b1e4:	10bfffc4 	addi	r2,r2,-1
    b1e8:	e0bff815 	stw	r2,-32(fp)
    b1ec:	00000c06 	br	b220 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    b1f0:	e0bff917 	ldw	r2,-28(fp)
    b1f4:	1005003a 	cmpeq	r2,r2,zero
    b1f8:	1000051e 	bne	r2,zero,b210 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    b1fc:	00820004 	movi	r2,2048
    b200:	e0fffa17 	ldw	r3,-24(fp)
    b204:	10c5c83a 	sub	r2,r2,r3
    b208:	e0bff815 	stw	r2,-32(fp)
    b20c:	00000406 	br	b220 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    b210:	0081ffc4 	movi	r2,2047
    b214:	e0fffa17 	ldw	r3,-24(fp)
    b218:	10c5c83a 	sub	r2,r2,r3
    b21c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    b220:	e0bff817 	ldw	r2,-32(fp)
    b224:	1005003a 	cmpeq	r2,r2,zero
    b228:	10001f1e 	bne	r2,zero,b2a8 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    b22c:	e0fffd17 	ldw	r3,-12(fp)
    b230:	e0bff817 	ldw	r2,-32(fp)
    b234:	1880022e 	bgeu	r3,r2,b240 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    b238:	e0bffd17 	ldw	r2,-12(fp)
    b23c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    b240:	e0bffb17 	ldw	r2,-20(fp)
    b244:	10c20e04 	addi	r3,r2,2104
    b248:	e0bffa17 	ldw	r2,-24(fp)
    b24c:	1885883a 	add	r2,r3,r2
    b250:	e0fffc17 	ldw	r3,-16(fp)
    b254:	1009883a 	mov	r4,r2
    b258:	180b883a 	mov	r5,r3
    b25c:	e1bff817 	ldw	r6,-32(fp)
    b260:	00059c40 	call	59c4 <memcpy>
      ptr   += n;
    b264:	e0fff817 	ldw	r3,-32(fp)
    b268:	e0bffc17 	ldw	r2,-16(fp)
    b26c:	10c5883a 	add	r2,r2,r3
    b270:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    b274:	e0fffd17 	ldw	r3,-12(fp)
    b278:	e0bff817 	ldw	r2,-32(fp)
    b27c:	1885c83a 	sub	r2,r3,r2
    b280:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b284:	e0fffa17 	ldw	r3,-24(fp)
    b288:	e0bff817 	ldw	r2,-32(fp)
    b28c:	1885883a 	add	r2,r3,r2
    b290:	10c1ffcc 	andi	r3,r2,2047
    b294:	e0bffb17 	ldw	r2,-20(fp)
    b298:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b29c:	e0bffd17 	ldw	r2,-12(fp)
    b2a0:	10800048 	cmpgei	r2,r2,1
    b2a4:	103fc31e 	bne	r2,zero,b1b4 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b2a8:	0005303a 	rdctl	r2,status
    b2ac:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b2b0:	e0fff517 	ldw	r3,-44(fp)
    b2b4:	00bfff84 	movi	r2,-2
    b2b8:	1884703a 	and	r2,r3,r2
    b2bc:	1001703a 	wrctl	status,r2
  
  return context;
    b2c0:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    b2c4:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    b2c8:	e0bffb17 	ldw	r2,-20(fp)
    b2cc:	10800817 	ldw	r2,32(r2)
    b2d0:	10c00094 	ori	r3,r2,2
    b2d4:	e0bffb17 	ldw	r2,-20(fp)
    b2d8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b2dc:	e0bffb17 	ldw	r2,-20(fp)
    b2e0:	10800017 	ldw	r2,0(r2)
    b2e4:	11000104 	addi	r4,r2,4
    b2e8:	e0bffb17 	ldw	r2,-20(fp)
    b2ec:	10800817 	ldw	r2,32(r2)
    b2f0:	1007883a 	mov	r3,r2
    b2f4:	2005883a 	mov	r2,r4
    b2f8:	10c00035 	stwio	r3,0(r2)
    b2fc:	e0bff717 	ldw	r2,-36(fp)
    b300:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b304:	e0bff417 	ldw	r2,-48(fp)
    b308:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    b30c:	e0bffd17 	ldw	r2,-12(fp)
    b310:	10800050 	cmplti	r2,r2,1
    b314:	1000111e 	bne	r2,zero,b35c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    b318:	e0bffe17 	ldw	r2,-8(fp)
    b31c:	1090000c 	andi	r2,r2,16384
    b320:	1004c03a 	cmpne	r2,r2,zero
    b324:	1000101e 	bne	r2,zero,b368 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    b328:	e0bffb17 	ldw	r2,-20(fp)
    b32c:	10c00d17 	ldw	r3,52(r2)
    b330:	e0bff917 	ldw	r2,-28(fp)
    b334:	1880051e 	bne	r3,r2,b34c <altera_avalon_jtag_uart_write+0x1c8>
    b338:	e0bffb17 	ldw	r2,-20(fp)
    b33c:	10c00917 	ldw	r3,36(r2)
    b340:	e0bffb17 	ldw	r2,-20(fp)
    b344:	10800117 	ldw	r2,4(r2)
    b348:	18bff736 	bltu	r3,r2,b328 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    b34c:	e0bffb17 	ldw	r2,-20(fp)
    b350:	10c00d17 	ldw	r3,52(r2)
    b354:	e0bff917 	ldw	r2,-28(fp)
    b358:	18800326 	beq	r3,r2,b368 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    b35c:	e0bffd17 	ldw	r2,-12(fp)
    b360:	10800048 	cmpgei	r2,r2,1
    b364:	103fcd1e 	bne	r2,zero,b29c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    b368:	e0fffc17 	ldw	r3,-16(fp)
    b36c:	e0bff617 	ldw	r2,-40(fp)
    b370:	18800526 	beq	r3,r2,b388 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    b374:	e0fffc17 	ldw	r3,-16(fp)
    b378:	e0bff617 	ldw	r2,-40(fp)
    b37c:	1887c83a 	sub	r3,r3,r2
    b380:	e0ffff15 	stw	r3,-4(fp)
    b384:	00000906 	br	b3ac <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    b388:	e0bffe17 	ldw	r2,-8(fp)
    b38c:	1090000c 	andi	r2,r2,16384
    b390:	1005003a 	cmpeq	r2,r2,zero
    b394:	1000031e 	bne	r2,zero,b3a4 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    b398:	00bffd44 	movi	r2,-11
    b39c:	e0bfff15 	stw	r2,-4(fp)
    b3a0:	00000206 	br	b3ac <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    b3a4:	00bffec4 	movi	r2,-5
    b3a8:	e0bfff15 	stw	r2,-4(fp)
    b3ac:	e0bfff17 	ldw	r2,-4(fp)
}
    b3b0:	e037883a 	mov	sp,fp
    b3b4:	dfc00117 	ldw	ra,4(sp)
    b3b8:	df000017 	ldw	fp,0(sp)
    b3bc:	dec00204 	addi	sp,sp,8
    b3c0:	f800283a 	ret

0000b3c4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    b3c4:	defffa04 	addi	sp,sp,-24
    b3c8:	dfc00515 	stw	ra,20(sp)
    b3cc:	df000415 	stw	fp,16(sp)
    b3d0:	df000404 	addi	fp,sp,16
    b3d4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    b3d8:	e0bfff17 	ldw	r2,-4(fp)
    b3dc:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    b3e0:	e0bfff17 	ldw	r2,-4(fp)
    b3e4:	10800104 	addi	r2,r2,4
    b3e8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b3ec:	0005303a 	rdctl	r2,status
    b3f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b3f4:	e0fffd17 	ldw	r3,-12(fp)
    b3f8:	00bfff84 	movi	r2,-2
    b3fc:	1884703a 	and	r2,r3,r2
    b400:	1001703a 	wrctl	status,r2
  
  return context;
    b404:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    b408:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    b40c:	000bfa40 	call	bfa4 <alt_tick>
    b410:	e0bffe17 	ldw	r2,-8(fp)
    b414:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b418:	e0bffc17 	ldw	r2,-16(fp)
    b41c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    b420:	e037883a 	mov	sp,fp
    b424:	dfc00117 	ldw	ra,4(sp)
    b428:	df000017 	ldw	fp,0(sp)
    b42c:	dec00204 	addi	sp,sp,8
    b430:	f800283a 	ret

0000b434 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    b434:	defff804 	addi	sp,sp,-32
    b438:	dfc00715 	stw	ra,28(sp)
    b43c:	df000615 	stw	fp,24(sp)
    b440:	df000604 	addi	fp,sp,24
    b444:	e13ffc15 	stw	r4,-16(fp)
    b448:	e17ffd15 	stw	r5,-12(fp)
    b44c:	e1bffe15 	stw	r6,-8(fp)
    b450:	e1ffff15 	stw	r7,-4(fp)
    b454:	e0bfff17 	ldw	r2,-4(fp)
    b458:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    b45c:	00800074 	movhi	r2,1
    b460:	10878c04 	addi	r2,r2,7728
    b464:	10800017 	ldw	r2,0(r2)
    b468:	1004c03a 	cmpne	r2,r2,zero
    b46c:	1000041e 	bne	r2,zero,b480 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    b470:	00c00074 	movhi	r3,1
    b474:	18c78c04 	addi	r3,r3,7728
    b478:	e0bffb17 	ldw	r2,-20(fp)
    b47c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    b480:	e0bffc17 	ldw	r2,-16(fp)
    b484:	10800104 	addi	r2,r2,4
    b488:	1007883a 	mov	r3,r2
    b48c:	008001c4 	movi	r2,7
    b490:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    b494:	d8000015 	stw	zero,0(sp)
    b498:	e13ffd17 	ldw	r4,-12(fp)
    b49c:	e17ffe17 	ldw	r5,-8(fp)
    b4a0:	01800074 	movhi	r6,1
    b4a4:	31acf104 	addi	r6,r6,-19516
    b4a8:	e1fffc17 	ldw	r7,-16(fp)
    b4ac:	000b8400 	call	b840 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    b4b0:	e037883a 	mov	sp,fp
    b4b4:	dfc00117 	ldw	ra,4(sp)
    b4b8:	df000017 	ldw	fp,0(sp)
    b4bc:	dec00204 	addi	sp,sp,8
    b4c0:	f800283a 	ret

0000b4c4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    b4c4:	defff404 	addi	sp,sp,-48
    b4c8:	df000b15 	stw	fp,44(sp)
    b4cc:	df000b04 	addi	fp,sp,44
    b4d0:	e13ffb15 	stw	r4,-20(fp)
    b4d4:	e17ffc15 	stw	r5,-16(fp)
    b4d8:	e1bffd15 	stw	r6,-12(fp)
    b4dc:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    b4e0:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    b4e4:	00800074 	movhi	r2,1
    b4e8:	10878c04 	addi	r2,r2,7728
    b4ec:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    b4f0:	1005003a 	cmpeq	r2,r2,zero
    b4f4:	1000411e 	bne	r2,zero,b5fc <alt_alarm_start+0x138>
  {
    if (alarm)
    b4f8:	e0bffb17 	ldw	r2,-20(fp)
    b4fc:	1005003a 	cmpeq	r2,r2,zero
    b500:	10003b1e 	bne	r2,zero,b5f0 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    b504:	e0fffb17 	ldw	r3,-20(fp)
    b508:	e0bffd17 	ldw	r2,-12(fp)
    b50c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    b510:	e0fffb17 	ldw	r3,-20(fp)
    b514:	e0bffe17 	ldw	r2,-8(fp)
    b518:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b51c:	0005303a 	rdctl	r2,status
    b520:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b524:	e0fff817 	ldw	r3,-32(fp)
    b528:	00bfff84 	movi	r2,-2
    b52c:	1884703a 	and	r2,r3,r2
    b530:	1001703a 	wrctl	status,r2
  
  return context;
    b534:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    b538:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    b53c:	00800074 	movhi	r2,1
    b540:	10878d04 	addi	r2,r2,7732
    b544:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    b548:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    b54c:	e0fffc17 	ldw	r3,-16(fp)
    b550:	e0bff917 	ldw	r2,-28(fp)
    b554:	1885883a 	add	r2,r3,r2
    b558:	10c00044 	addi	r3,r2,1
    b55c:	e0bffb17 	ldw	r2,-20(fp)
    b560:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    b564:	e0bffb17 	ldw	r2,-20(fp)
    b568:	10c00217 	ldw	r3,8(r2)
    b56c:	e0bff917 	ldw	r2,-28(fp)
    b570:	1880042e 	bgeu	r3,r2,b584 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    b574:	e0fffb17 	ldw	r3,-20(fp)
    b578:	00800044 	movi	r2,1
    b57c:	18800405 	stb	r2,16(r3)
    b580:	00000206 	br	b58c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    b584:	e0bffb17 	ldw	r2,-20(fp)
    b588:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    b58c:	e0fffb17 	ldw	r3,-20(fp)
    b590:	00800074 	movhi	r2,1
    b594:	10877a04 	addi	r2,r2,7656
    b598:	e0bff615 	stw	r2,-40(fp)
    b59c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    b5a0:	e0fff717 	ldw	r3,-36(fp)
    b5a4:	e0bff617 	ldw	r2,-40(fp)
    b5a8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    b5ac:	e0bff617 	ldw	r2,-40(fp)
    b5b0:	10c00017 	ldw	r3,0(r2)
    b5b4:	e0bff717 	ldw	r2,-36(fp)
    b5b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    b5bc:	e0bff617 	ldw	r2,-40(fp)
    b5c0:	10c00017 	ldw	r3,0(r2)
    b5c4:	e0bff717 	ldw	r2,-36(fp)
    b5c8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    b5cc:	e0fff617 	ldw	r3,-40(fp)
    b5d0:	e0bff717 	ldw	r2,-36(fp)
    b5d4:	18800015 	stw	r2,0(r3)
    b5d8:	e0bffa17 	ldw	r2,-24(fp)
    b5dc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b5e0:	e0bff517 	ldw	r2,-44(fp)
    b5e4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    b5e8:	e03fff15 	stw	zero,-4(fp)
    b5ec:	00000506 	br	b604 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    b5f0:	00bffa84 	movi	r2,-22
    b5f4:	e0bfff15 	stw	r2,-4(fp)
    b5f8:	00000206 	br	b604 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    b5fc:	00bfde84 	movi	r2,-134
    b600:	e0bfff15 	stw	r2,-4(fp)
    b604:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    b608:	e037883a 	mov	sp,fp
    b60c:	df000017 	ldw	fp,0(sp)
    b610:	dec00104 	addi	sp,sp,4
    b614:	f800283a 	ret

0000b618 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    b618:	deffff04 	addi	sp,sp,-4
    b61c:	df000015 	stw	fp,0(sp)
    b620:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    b624:	e037883a 	mov	sp,fp
    b628:	df000017 	ldw	fp,0(sp)
    b62c:	dec00104 	addi	sp,sp,4
    b630:	f800283a 	ret

0000b634 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    b634:	defff904 	addi	sp,sp,-28
    b638:	dfc00615 	stw	ra,24(sp)
    b63c:	df000515 	stw	fp,20(sp)
    b640:	df000504 	addi	fp,sp,20
    b644:	e13ffd15 	stw	r4,-12(fp)
    b648:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    b64c:	e0bffd17 	ldw	r2,-12(fp)
    b650:	1005003a 	cmpeq	r2,r2,zero
    b654:	1000041e 	bne	r2,zero,b668 <alt_dev_llist_insert+0x34>
    b658:	e0bffd17 	ldw	r2,-12(fp)
    b65c:	10800217 	ldw	r2,8(r2)
    b660:	1004c03a 	cmpne	r2,r2,zero
    b664:	1000071e 	bne	r2,zero,b684 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    b668:	000b6e80 	call	b6e8 <alt_get_errno>
    b66c:	1007883a 	mov	r3,r2
    b670:	00800584 	movi	r2,22
    b674:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    b678:	00bffa84 	movi	r2,-22
    b67c:	e0bfff15 	stw	r2,-4(fp)
    b680:	00001306 	br	b6d0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    b684:	e0fffd17 	ldw	r3,-12(fp)
    b688:	e0bffe17 	ldw	r2,-8(fp)
    b68c:	e0bffb15 	stw	r2,-20(fp)
    b690:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    b694:	e0fffc17 	ldw	r3,-16(fp)
    b698:	e0bffb17 	ldw	r2,-20(fp)
    b69c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    b6a0:	e0bffb17 	ldw	r2,-20(fp)
    b6a4:	10c00017 	ldw	r3,0(r2)
    b6a8:	e0bffc17 	ldw	r2,-16(fp)
    b6ac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    b6b0:	e0bffb17 	ldw	r2,-20(fp)
    b6b4:	10c00017 	ldw	r3,0(r2)
    b6b8:	e0bffc17 	ldw	r2,-16(fp)
    b6bc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    b6c0:	e0fffb17 	ldw	r3,-20(fp)
    b6c4:	e0bffc17 	ldw	r2,-16(fp)
    b6c8:	18800015 	stw	r2,0(r3)

  return 0;  
    b6cc:	e03fff15 	stw	zero,-4(fp)
    b6d0:	e0bfff17 	ldw	r2,-4(fp)
}
    b6d4:	e037883a 	mov	sp,fp
    b6d8:	dfc00117 	ldw	ra,4(sp)
    b6dc:	df000017 	ldw	fp,0(sp)
    b6e0:	dec00204 	addi	sp,sp,8
    b6e4:	f800283a 	ret

0000b6e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b6e8:	defffd04 	addi	sp,sp,-12
    b6ec:	dfc00215 	stw	ra,8(sp)
    b6f0:	df000115 	stw	fp,4(sp)
    b6f4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b6f8:	00800074 	movhi	r2,1
    b6fc:	10877704 	addi	r2,r2,7644
    b700:	10800017 	ldw	r2,0(r2)
    b704:	1005003a 	cmpeq	r2,r2,zero
    b708:	1000061e 	bne	r2,zero,b724 <alt_get_errno+0x3c>
    b70c:	00800074 	movhi	r2,1
    b710:	10877704 	addi	r2,r2,7644
    b714:	10800017 	ldw	r2,0(r2)
    b718:	103ee83a 	callr	r2
    b71c:	e0bfff15 	stw	r2,-4(fp)
    b720:	00000306 	br	b730 <alt_get_errno+0x48>
    b724:	00800074 	movhi	r2,1
    b728:	10878704 	addi	r2,r2,7708
    b72c:	e0bfff15 	stw	r2,-4(fp)
    b730:	e0bfff17 	ldw	r2,-4(fp)
}
    b734:	e037883a 	mov	sp,fp
    b738:	dfc00117 	ldw	ra,4(sp)
    b73c:	df000017 	ldw	fp,0(sp)
    b740:	dec00204 	addi	sp,sp,8
    b744:	f800283a 	ret

0000b748 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    b748:	defffd04 	addi	sp,sp,-12
    b74c:	dfc00215 	stw	ra,8(sp)
    b750:	df000115 	stw	fp,4(sp)
    b754:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    b758:	00bfff04 	movi	r2,-4
    b75c:	00c00074 	movhi	r3,1
    b760:	18f1f604 	addi	r3,r3,-14376
    b764:	1885883a 	add	r2,r3,r2
    b768:	e0bfff15 	stw	r2,-4(fp)
    b76c:	00000606 	br	b788 <_do_ctors+0x40>
        (*ctor) (); 
    b770:	e0bfff17 	ldw	r2,-4(fp)
    b774:	10800017 	ldw	r2,0(r2)
    b778:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    b77c:	e0bfff17 	ldw	r2,-4(fp)
    b780:	10bfff04 	addi	r2,r2,-4
    b784:	e0bfff15 	stw	r2,-4(fp)
    b788:	e0ffff17 	ldw	r3,-4(fp)
    b78c:	00800074 	movhi	r2,1
    b790:	10b1f504 	addi	r2,r2,-14380
    b794:	18bff62e 	bgeu	r3,r2,b770 <_do_ctors+0x28>
        (*ctor) (); 
}
    b798:	e037883a 	mov	sp,fp
    b79c:	dfc00117 	ldw	ra,4(sp)
    b7a0:	df000017 	ldw	fp,0(sp)
    b7a4:	dec00204 	addi	sp,sp,8
    b7a8:	f800283a 	ret

0000b7ac <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    b7ac:	defffd04 	addi	sp,sp,-12
    b7b0:	dfc00215 	stw	ra,8(sp)
    b7b4:	df000115 	stw	fp,4(sp)
    b7b8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    b7bc:	00bfff04 	movi	r2,-4
    b7c0:	00c00074 	movhi	r3,1
    b7c4:	18f1f604 	addi	r3,r3,-14376
    b7c8:	1885883a 	add	r2,r3,r2
    b7cc:	e0bfff15 	stw	r2,-4(fp)
    b7d0:	00000606 	br	b7ec <_do_dtors+0x40>
        (*dtor) (); 
    b7d4:	e0bfff17 	ldw	r2,-4(fp)
    b7d8:	10800017 	ldw	r2,0(r2)
    b7dc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    b7e0:	e0bfff17 	ldw	r2,-4(fp)
    b7e4:	10bfff04 	addi	r2,r2,-4
    b7e8:	e0bfff15 	stw	r2,-4(fp)
    b7ec:	e0ffff17 	ldw	r3,-4(fp)
    b7f0:	00800074 	movhi	r2,1
    b7f4:	10b1f604 	addi	r2,r2,-14376
    b7f8:	18bff62e 	bgeu	r3,r2,b7d4 <_do_dtors+0x28>
        (*dtor) (); 
}
    b7fc:	e037883a 	mov	sp,fp
    b800:	dfc00117 	ldw	ra,4(sp)
    b804:	df000017 	ldw	fp,0(sp)
    b808:	dec00204 	addi	sp,sp,8
    b80c:	f800283a 	ret

0000b810 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    b810:	defffe04 	addi	sp,sp,-8
    b814:	dfc00115 	stw	ra,4(sp)
    b818:	df000015 	stw	fp,0(sp)
    b81c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    b820:	0009883a 	mov	r4,zero
    b824:	01440004 	movi	r5,4096
    b828:	000c33c0 	call	c33c <alt_icache_flush>
#endif
}
    b82c:	e037883a 	mov	sp,fp
    b830:	dfc00117 	ldw	ra,4(sp)
    b834:	df000017 	ldw	fp,0(sp)
    b838:	dec00204 	addi	sp,sp,8
    b83c:	f800283a 	ret

0000b840 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    b840:	defff904 	addi	sp,sp,-28
    b844:	dfc00615 	stw	ra,24(sp)
    b848:	df000515 	stw	fp,20(sp)
    b84c:	df000504 	addi	fp,sp,20
    b850:	e13ffc15 	stw	r4,-16(fp)
    b854:	e17ffd15 	stw	r5,-12(fp)
    b858:	e1bffe15 	stw	r6,-8(fp)
    b85c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    b860:	e0800217 	ldw	r2,8(fp)
    b864:	d8800015 	stw	r2,0(sp)
    b868:	e13ffc17 	ldw	r4,-16(fp)
    b86c:	e17ffd17 	ldw	r5,-12(fp)
    b870:	e1bffe17 	ldw	r6,-8(fp)
    b874:	e1ffff17 	ldw	r7,-4(fp)
    b878:	000ba140 	call	ba14 <alt_iic_isr_register>
}  
    b87c:	e037883a 	mov	sp,fp
    b880:	dfc00117 	ldw	ra,4(sp)
    b884:	df000017 	ldw	fp,0(sp)
    b888:	dec00204 	addi	sp,sp,8
    b88c:	f800283a 	ret

0000b890 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    b890:	defff904 	addi	sp,sp,-28
    b894:	df000615 	stw	fp,24(sp)
    b898:	df000604 	addi	fp,sp,24
    b89c:	e13ffe15 	stw	r4,-8(fp)
    b8a0:	e17fff15 	stw	r5,-4(fp)
    b8a4:	e0bfff17 	ldw	r2,-4(fp)
    b8a8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b8ac:	0005303a 	rdctl	r2,status
    b8b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b8b4:	e0fffb17 	ldw	r3,-20(fp)
    b8b8:	00bfff84 	movi	r2,-2
    b8bc:	1884703a 	and	r2,r3,r2
    b8c0:	1001703a 	wrctl	status,r2
  
  return context;
    b8c4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b8c8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    b8cc:	e0fffc17 	ldw	r3,-16(fp)
    b8d0:	00800044 	movi	r2,1
    b8d4:	10c4983a 	sll	r2,r2,r3
    b8d8:	1007883a 	mov	r3,r2
    b8dc:	00800074 	movhi	r2,1
    b8e0:	10878b04 	addi	r2,r2,7724
    b8e4:	10800017 	ldw	r2,0(r2)
    b8e8:	1886b03a 	or	r3,r3,r2
    b8ec:	00800074 	movhi	r2,1
    b8f0:	10878b04 	addi	r2,r2,7724
    b8f4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b8f8:	00800074 	movhi	r2,1
    b8fc:	10878b04 	addi	r2,r2,7724
    b900:	10800017 	ldw	r2,0(r2)
    b904:	100170fa 	wrctl	ienable,r2
    b908:	e0bffd17 	ldw	r2,-12(fp)
    b90c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b910:	e0bffa17 	ldw	r2,-24(fp)
    b914:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b918:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    b91c:	e037883a 	mov	sp,fp
    b920:	df000017 	ldw	fp,0(sp)
    b924:	dec00104 	addi	sp,sp,4
    b928:	f800283a 	ret

0000b92c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    b92c:	defff904 	addi	sp,sp,-28
    b930:	df000615 	stw	fp,24(sp)
    b934:	df000604 	addi	fp,sp,24
    b938:	e13ffe15 	stw	r4,-8(fp)
    b93c:	e17fff15 	stw	r5,-4(fp)
    b940:	e0bfff17 	ldw	r2,-4(fp)
    b944:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b948:	0005303a 	rdctl	r2,status
    b94c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b950:	e0fffb17 	ldw	r3,-20(fp)
    b954:	00bfff84 	movi	r2,-2
    b958:	1884703a 	and	r2,r3,r2
    b95c:	1001703a 	wrctl	status,r2
  
  return context;
    b960:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b964:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    b968:	e0fffc17 	ldw	r3,-16(fp)
    b96c:	00800044 	movi	r2,1
    b970:	10c4983a 	sll	r2,r2,r3
    b974:	0084303a 	nor	r2,zero,r2
    b978:	1007883a 	mov	r3,r2
    b97c:	00800074 	movhi	r2,1
    b980:	10878b04 	addi	r2,r2,7724
    b984:	10800017 	ldw	r2,0(r2)
    b988:	1886703a 	and	r3,r3,r2
    b98c:	00800074 	movhi	r2,1
    b990:	10878b04 	addi	r2,r2,7724
    b994:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b998:	00800074 	movhi	r2,1
    b99c:	10878b04 	addi	r2,r2,7724
    b9a0:	10800017 	ldw	r2,0(r2)
    b9a4:	100170fa 	wrctl	ienable,r2
    b9a8:	e0bffd17 	ldw	r2,-12(fp)
    b9ac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b9b0:	e0bffa17 	ldw	r2,-24(fp)
    b9b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b9b8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    b9bc:	e037883a 	mov	sp,fp
    b9c0:	df000017 	ldw	fp,0(sp)
    b9c4:	dec00104 	addi	sp,sp,4
    b9c8:	f800283a 	ret

0000b9cc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    b9cc:	defffc04 	addi	sp,sp,-16
    b9d0:	df000315 	stw	fp,12(sp)
    b9d4:	df000304 	addi	fp,sp,12
    b9d8:	e13ffe15 	stw	r4,-8(fp)
    b9dc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    b9e0:	000530fa 	rdctl	r2,ienable
    b9e4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    b9e8:	e0ffff17 	ldw	r3,-4(fp)
    b9ec:	00800044 	movi	r2,1
    b9f0:	10c4983a 	sll	r2,r2,r3
    b9f4:	1007883a 	mov	r3,r2
    b9f8:	e0bffd17 	ldw	r2,-12(fp)
    b9fc:	1884703a 	and	r2,r3,r2
    ba00:	1004c03a 	cmpne	r2,r2,zero
}
    ba04:	e037883a 	mov	sp,fp
    ba08:	df000017 	ldw	fp,0(sp)
    ba0c:	dec00104 	addi	sp,sp,4
    ba10:	f800283a 	ret

0000ba14 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    ba14:	defff404 	addi	sp,sp,-48
    ba18:	dfc00b15 	stw	ra,44(sp)
    ba1c:	df000a15 	stw	fp,40(sp)
    ba20:	df000a04 	addi	fp,sp,40
    ba24:	e13ffb15 	stw	r4,-20(fp)
    ba28:	e17ffc15 	stw	r5,-16(fp)
    ba2c:	e1bffd15 	stw	r6,-12(fp)
    ba30:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    ba34:	00bffa84 	movi	r2,-22
    ba38:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    ba3c:	e0bffc17 	ldw	r2,-16(fp)
    ba40:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    ba44:	e0bff917 	ldw	r2,-28(fp)
    ba48:	10800808 	cmpgei	r2,r2,32
    ba4c:	1000291e 	bne	r2,zero,baf4 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ba50:	0005303a 	rdctl	r2,status
    ba54:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ba58:	e0fff717 	ldw	r3,-36(fp)
    ba5c:	00bfff84 	movi	r2,-2
    ba60:	1884703a 	and	r2,r3,r2
    ba64:	1001703a 	wrctl	status,r2
  
  return context;
    ba68:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    ba6c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    ba70:	e0bff917 	ldw	r2,-28(fp)
    ba74:	00c00074 	movhi	r3,1
    ba78:	18c79804 	addi	r3,r3,7776
    ba7c:	100490fa 	slli	r2,r2,3
    ba80:	10c7883a 	add	r3,r2,r3
    ba84:	e0bffd17 	ldw	r2,-12(fp)
    ba88:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    ba8c:	e0bff917 	ldw	r2,-28(fp)
    ba90:	00c00074 	movhi	r3,1
    ba94:	18c79804 	addi	r3,r3,7776
    ba98:	100490fa 	slli	r2,r2,3
    ba9c:	10c5883a 	add	r2,r2,r3
    baa0:	10c00104 	addi	r3,r2,4
    baa4:	e0bffe17 	ldw	r2,-8(fp)
    baa8:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    baac:	e0bffd17 	ldw	r2,-12(fp)
    bab0:	1005003a 	cmpeq	r2,r2,zero
    bab4:	1000051e 	bne	r2,zero,bacc <alt_iic_isr_register+0xb8>
    bab8:	e17ff917 	ldw	r5,-28(fp)
    babc:	e13ffb17 	ldw	r4,-20(fp)
    bac0:	000b8900 	call	b890 <alt_ic_irq_enable>
    bac4:	e0bfff15 	stw	r2,-4(fp)
    bac8:	00000406 	br	badc <alt_iic_isr_register+0xc8>
    bacc:	e17ff917 	ldw	r5,-28(fp)
    bad0:	e13ffb17 	ldw	r4,-20(fp)
    bad4:	000b92c0 	call	b92c <alt_ic_irq_disable>
    bad8:	e0bfff15 	stw	r2,-4(fp)
    badc:	e0bfff17 	ldw	r2,-4(fp)
    bae0:	e0bffa15 	stw	r2,-24(fp)
    bae4:	e0bff817 	ldw	r2,-32(fp)
    bae8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    baec:	e0bff617 	ldw	r2,-40(fp)
    baf0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    baf4:	e0bffa17 	ldw	r2,-24(fp)
}
    baf8:	e037883a 	mov	sp,fp
    bafc:	dfc00117 	ldw	ra,4(sp)
    bb00:	df000017 	ldw	fp,0(sp)
    bb04:	dec00204 	addi	sp,sp,8
    bb08:	f800283a 	ret

0000bb0c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    bb0c:	defff904 	addi	sp,sp,-28
    bb10:	dfc00615 	stw	ra,24(sp)
    bb14:	df000515 	stw	fp,20(sp)
    bb18:	df000504 	addi	fp,sp,20
    bb1c:	e13ffc15 	stw	r4,-16(fp)
    bb20:	e17ffd15 	stw	r5,-12(fp)
    bb24:	e1bffe15 	stw	r6,-8(fp)
    bb28:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    bb2c:	e13ffd17 	ldw	r4,-12(fp)
    bb30:	e17ffe17 	ldw	r5,-8(fp)
    bb34:	e1bfff17 	ldw	r6,-4(fp)
    bb38:	000bd240 	call	bd24 <open>
    bb3c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    bb40:	e0bffb17 	ldw	r2,-20(fp)
    bb44:	1004803a 	cmplt	r2,r2,zero
    bb48:	10001c1e 	bne	r2,zero,bbbc <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    bb4c:	e0bffb17 	ldw	r2,-20(fp)
    bb50:	00c00074 	movhi	r3,1
    bb54:	18c2f404 	addi	r3,r3,3024
    bb58:	10800324 	muli	r2,r2,12
    bb5c:	10c5883a 	add	r2,r2,r3
    bb60:	10c00017 	ldw	r3,0(r2)
    bb64:	e0bffc17 	ldw	r2,-16(fp)
    bb68:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    bb6c:	e0bffb17 	ldw	r2,-20(fp)
    bb70:	00c00074 	movhi	r3,1
    bb74:	18c2f404 	addi	r3,r3,3024
    bb78:	10800324 	muli	r2,r2,12
    bb7c:	10c5883a 	add	r2,r2,r3
    bb80:	10800104 	addi	r2,r2,4
    bb84:	10c00017 	ldw	r3,0(r2)
    bb88:	e0bffc17 	ldw	r2,-16(fp)
    bb8c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    bb90:	e0bffb17 	ldw	r2,-20(fp)
    bb94:	00c00074 	movhi	r3,1
    bb98:	18c2f404 	addi	r3,r3,3024
    bb9c:	10800324 	muli	r2,r2,12
    bba0:	10c5883a 	add	r2,r2,r3
    bba4:	10800204 	addi	r2,r2,8
    bba8:	10c00017 	ldw	r3,0(r2)
    bbac:	e0bffc17 	ldw	r2,-16(fp)
    bbb0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    bbb4:	e13ffb17 	ldw	r4,-20(fp)
    bbb8:	000a5b40 	call	a5b4 <alt_release_fd>
  }
} 
    bbbc:	e037883a 	mov	sp,fp
    bbc0:	dfc00117 	ldw	ra,4(sp)
    bbc4:	df000017 	ldw	fp,0(sp)
    bbc8:	dec00204 	addi	sp,sp,8
    bbcc:	f800283a 	ret

0000bbd0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    bbd0:	defffb04 	addi	sp,sp,-20
    bbd4:	dfc00415 	stw	ra,16(sp)
    bbd8:	df000315 	stw	fp,12(sp)
    bbdc:	df000304 	addi	fp,sp,12
    bbe0:	e13ffd15 	stw	r4,-12(fp)
    bbe4:	e17ffe15 	stw	r5,-8(fp)
    bbe8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    bbec:	01000074 	movhi	r4,1
    bbf0:	2102f704 	addi	r4,r4,3036
    bbf4:	e17ffd17 	ldw	r5,-12(fp)
    bbf8:	01800044 	movi	r6,1
    bbfc:	01c07fc4 	movi	r7,511
    bc00:	000bb0c0 	call	bb0c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    bc04:	01000074 	movhi	r4,1
    bc08:	2102f404 	addi	r4,r4,3024
    bc0c:	e17ffe17 	ldw	r5,-8(fp)
    bc10:	000d883a 	mov	r6,zero
    bc14:	01c07fc4 	movi	r7,511
    bc18:	000bb0c0 	call	bb0c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    bc1c:	01000074 	movhi	r4,1
    bc20:	2102fa04 	addi	r4,r4,3048
    bc24:	e17fff17 	ldw	r5,-4(fp)
    bc28:	01800044 	movi	r6,1
    bc2c:	01c07fc4 	movi	r7,511
    bc30:	000bb0c0 	call	bb0c <alt_open_fd>
}  
    bc34:	e037883a 	mov	sp,fp
    bc38:	dfc00117 	ldw	ra,4(sp)
    bc3c:	df000017 	ldw	fp,0(sp)
    bc40:	dec00204 	addi	sp,sp,8
    bc44:	f800283a 	ret

0000bc48 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    bc48:	defffc04 	addi	sp,sp,-16
    bc4c:	df000315 	stw	fp,12(sp)
    bc50:	df000304 	addi	fp,sp,12
    bc54:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    bc58:	e0bffe17 	ldw	r2,-8(fp)
    bc5c:	10800217 	ldw	r2,8(r2)
    bc60:	10d00034 	orhi	r3,r2,16384
    bc64:	e0bffe17 	ldw	r2,-8(fp)
    bc68:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bc6c:	e03ffd15 	stw	zero,-12(fp)
    bc70:	00002006 	br	bcf4 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    bc74:	e0bffd17 	ldw	r2,-12(fp)
    bc78:	00c00074 	movhi	r3,1
    bc7c:	18c2f404 	addi	r3,r3,3024
    bc80:	10800324 	muli	r2,r2,12
    bc84:	10c5883a 	add	r2,r2,r3
    bc88:	10c00017 	ldw	r3,0(r2)
    bc8c:	e0bffe17 	ldw	r2,-8(fp)
    bc90:	10800017 	ldw	r2,0(r2)
    bc94:	1880141e 	bne	r3,r2,bce8 <alt_file_locked+0xa0>
    bc98:	e0bffd17 	ldw	r2,-12(fp)
    bc9c:	00c00074 	movhi	r3,1
    bca0:	18c2f404 	addi	r3,r3,3024
    bca4:	10800324 	muli	r2,r2,12
    bca8:	10c5883a 	add	r2,r2,r3
    bcac:	10800204 	addi	r2,r2,8
    bcb0:	10800017 	ldw	r2,0(r2)
    bcb4:	1004403a 	cmpge	r2,r2,zero
    bcb8:	10000b1e 	bne	r2,zero,bce8 <alt_file_locked+0xa0>
    bcbc:	e0bffd17 	ldw	r2,-12(fp)
    bcc0:	10800324 	muli	r2,r2,12
    bcc4:	1007883a 	mov	r3,r2
    bcc8:	00800074 	movhi	r2,1
    bccc:	1082f404 	addi	r2,r2,3024
    bcd0:	1887883a 	add	r3,r3,r2
    bcd4:	e0bffe17 	ldw	r2,-8(fp)
    bcd8:	18800326 	beq	r3,r2,bce8 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    bcdc:	00bffcc4 	movi	r2,-13
    bce0:	e0bfff15 	stw	r2,-4(fp)
    bce4:	00000a06 	br	bd10 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bce8:	e0bffd17 	ldw	r2,-12(fp)
    bcec:	10800044 	addi	r2,r2,1
    bcf0:	e0bffd15 	stw	r2,-12(fp)
    bcf4:	00800074 	movhi	r2,1
    bcf8:	10877604 	addi	r2,r2,7640
    bcfc:	10800017 	ldw	r2,0(r2)
    bd00:	1007883a 	mov	r3,r2
    bd04:	e0bffd17 	ldw	r2,-12(fp)
    bd08:	18bfda2e 	bgeu	r3,r2,bc74 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    bd0c:	e03fff15 	stw	zero,-4(fp)
    bd10:	e0bfff17 	ldw	r2,-4(fp)
}
    bd14:	e037883a 	mov	sp,fp
    bd18:	df000017 	ldw	fp,0(sp)
    bd1c:	dec00104 	addi	sp,sp,4
    bd20:	f800283a 	ret

0000bd24 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    bd24:	defff404 	addi	sp,sp,-48
    bd28:	dfc00b15 	stw	ra,44(sp)
    bd2c:	df000a15 	stw	fp,40(sp)
    bd30:	df000a04 	addi	fp,sp,40
    bd34:	e13ffb15 	stw	r4,-20(fp)
    bd38:	e17ffc15 	stw	r5,-16(fp)
    bd3c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    bd40:	00bfffc4 	movi	r2,-1
    bd44:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    bd48:	00bffb44 	movi	r2,-19
    bd4c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    bd50:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    bd54:	e13ffb17 	ldw	r4,-20(fp)
    bd58:	01400074 	movhi	r5,1
    bd5c:	29477404 	addi	r5,r5,7632
    bd60:	000c0d00 	call	c0d0 <alt_find_dev>
    bd64:	e0bffa15 	stw	r2,-24(fp)
    bd68:	e0bffa17 	ldw	r2,-24(fp)
    bd6c:	1004c03a 	cmpne	r2,r2,zero
    bd70:	1000051e 	bne	r2,zero,bd88 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    bd74:	e13ffb17 	ldw	r4,-20(fp)
    bd78:	000c1640 	call	c164 <alt_find_file>
    bd7c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    bd80:	00800044 	movi	r2,1
    bd84:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    bd88:	e0bffa17 	ldw	r2,-24(fp)
    bd8c:	1005003a 	cmpeq	r2,r2,zero
    bd90:	1000301e 	bne	r2,zero,be54 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    bd94:	e13ffa17 	ldw	r4,-24(fp)
    bd98:	000c2840 	call	c284 <alt_get_fd>
    bd9c:	e0bff815 	stw	r2,-32(fp)
    bda0:	e0bff817 	ldw	r2,-32(fp)
    bda4:	1004403a 	cmpge	r2,r2,zero
    bda8:	1000031e 	bne	r2,zero,bdb8 <open+0x94>
    {
      status = index;
    bdac:	e0bff817 	ldw	r2,-32(fp)
    bdb0:	e0bff715 	stw	r2,-36(fp)
    bdb4:	00002906 	br	be5c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    bdb8:	e0bff817 	ldw	r2,-32(fp)
    bdbc:	10800324 	muli	r2,r2,12
    bdc0:	1007883a 	mov	r3,r2
    bdc4:	00800074 	movhi	r2,1
    bdc8:	1082f404 	addi	r2,r2,3024
    bdcc:	1885883a 	add	r2,r3,r2
    bdd0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    bdd4:	e0fffc17 	ldw	r3,-16(fp)
    bdd8:	00900034 	movhi	r2,16384
    bddc:	10bfffc4 	addi	r2,r2,-1
    bde0:	1886703a 	and	r3,r3,r2
    bde4:	e0bff917 	ldw	r2,-28(fp)
    bde8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    bdec:	e0bff617 	ldw	r2,-40(fp)
    bdf0:	1004c03a 	cmpne	r2,r2,zero
    bdf4:	1000061e 	bne	r2,zero,be10 <open+0xec>
    bdf8:	e13ff917 	ldw	r4,-28(fp)
    bdfc:	000bc480 	call	bc48 <alt_file_locked>
    be00:	e0bff715 	stw	r2,-36(fp)
    be04:	e0bff717 	ldw	r2,-36(fp)
    be08:	1004803a 	cmplt	r2,r2,zero
    be0c:	1000131e 	bne	r2,zero,be5c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    be10:	e0bffa17 	ldw	r2,-24(fp)
    be14:	10800317 	ldw	r2,12(r2)
    be18:	1005003a 	cmpeq	r2,r2,zero
    be1c:	1000091e 	bne	r2,zero,be44 <open+0x120>
    be20:	e0bffa17 	ldw	r2,-24(fp)
    be24:	10800317 	ldw	r2,12(r2)
    be28:	e13ff917 	ldw	r4,-28(fp)
    be2c:	e17ffb17 	ldw	r5,-20(fp)
    be30:	e1bffc17 	ldw	r6,-16(fp)
    be34:	e1fffd17 	ldw	r7,-12(fp)
    be38:	103ee83a 	callr	r2
    be3c:	e0bfff15 	stw	r2,-4(fp)
    be40:	00000106 	br	be48 <open+0x124>
    be44:	e03fff15 	stw	zero,-4(fp)
    be48:	e0bfff17 	ldw	r2,-4(fp)
    be4c:	e0bff715 	stw	r2,-36(fp)
    be50:	00000206 	br	be5c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    be54:	00bffb44 	movi	r2,-19
    be58:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    be5c:	e0bff717 	ldw	r2,-36(fp)
    be60:	1004403a 	cmpge	r2,r2,zero
    be64:	1000091e 	bne	r2,zero,be8c <open+0x168>
  {
    alt_release_fd (index);  
    be68:	e13ff817 	ldw	r4,-32(fp)
    be6c:	000a5b40 	call	a5b4 <alt_release_fd>
    ALT_ERRNO = -status;
    be70:	000beac0 	call	beac <alt_get_errno>
    be74:	e0fff717 	ldw	r3,-36(fp)
    be78:	00c7c83a 	sub	r3,zero,r3
    be7c:	10c00015 	stw	r3,0(r2)
    return -1;
    be80:	00bfffc4 	movi	r2,-1
    be84:	e0bffe15 	stw	r2,-8(fp)
    be88:	00000206 	br	be94 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    be8c:	e0bff817 	ldw	r2,-32(fp)
    be90:	e0bffe15 	stw	r2,-8(fp)
    be94:	e0bffe17 	ldw	r2,-8(fp)
}
    be98:	e037883a 	mov	sp,fp
    be9c:	dfc00117 	ldw	ra,4(sp)
    bea0:	df000017 	ldw	fp,0(sp)
    bea4:	dec00204 	addi	sp,sp,8
    bea8:	f800283a 	ret

0000beac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    beac:	defffd04 	addi	sp,sp,-12
    beb0:	dfc00215 	stw	ra,8(sp)
    beb4:	df000115 	stw	fp,4(sp)
    beb8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bebc:	00800074 	movhi	r2,1
    bec0:	10877704 	addi	r2,r2,7644
    bec4:	10800017 	ldw	r2,0(r2)
    bec8:	1005003a 	cmpeq	r2,r2,zero
    becc:	1000061e 	bne	r2,zero,bee8 <alt_get_errno+0x3c>
    bed0:	00800074 	movhi	r2,1
    bed4:	10877704 	addi	r2,r2,7644
    bed8:	10800017 	ldw	r2,0(r2)
    bedc:	103ee83a 	callr	r2
    bee0:	e0bfff15 	stw	r2,-4(fp)
    bee4:	00000306 	br	bef4 <alt_get_errno+0x48>
    bee8:	00800074 	movhi	r2,1
    beec:	10878704 	addi	r2,r2,7708
    bef0:	e0bfff15 	stw	r2,-4(fp)
    bef4:	e0bfff17 	ldw	r2,-4(fp)
}
    bef8:	e037883a 	mov	sp,fp
    befc:	dfc00117 	ldw	ra,4(sp)
    bf00:	df000017 	ldw	fp,0(sp)
    bf04:	dec00204 	addi	sp,sp,8
    bf08:	f800283a 	ret

0000bf0c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    bf0c:	defffa04 	addi	sp,sp,-24
    bf10:	df000515 	stw	fp,20(sp)
    bf14:	df000504 	addi	fp,sp,20
    bf18:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bf1c:	0005303a 	rdctl	r2,status
    bf20:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bf24:	e0fffd17 	ldw	r3,-12(fp)
    bf28:	00bfff84 	movi	r2,-2
    bf2c:	1884703a 	and	r2,r3,r2
    bf30:	1001703a 	wrctl	status,r2
  
  return context;
    bf34:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    bf38:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    bf3c:	e0bfff17 	ldw	r2,-4(fp)
    bf40:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    bf44:	e0bffc17 	ldw	r2,-16(fp)
    bf48:	10c00017 	ldw	r3,0(r2)
    bf4c:	e0bffc17 	ldw	r2,-16(fp)
    bf50:	10800117 	ldw	r2,4(r2)
    bf54:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    bf58:	e0bffc17 	ldw	r2,-16(fp)
    bf5c:	10c00117 	ldw	r3,4(r2)
    bf60:	e0bffc17 	ldw	r2,-16(fp)
    bf64:	10800017 	ldw	r2,0(r2)
    bf68:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    bf6c:	e0fffc17 	ldw	r3,-16(fp)
    bf70:	e0bffc17 	ldw	r2,-16(fp)
    bf74:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    bf78:	e0fffc17 	ldw	r3,-16(fp)
    bf7c:	e0bffc17 	ldw	r2,-16(fp)
    bf80:	18800015 	stw	r2,0(r3)
    bf84:	e0bffe17 	ldw	r2,-8(fp)
    bf88:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bf8c:	e0bffb17 	ldw	r2,-20(fp)
    bf90:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    bf94:	e037883a 	mov	sp,fp
    bf98:	df000017 	ldw	fp,0(sp)
    bf9c:	dec00104 	addi	sp,sp,4
    bfa0:	f800283a 	ret

0000bfa4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    bfa4:	defffb04 	addi	sp,sp,-20
    bfa8:	dfc00415 	stw	ra,16(sp)
    bfac:	df000315 	stw	fp,12(sp)
    bfb0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    bfb4:	d0a00e17 	ldw	r2,-32712(gp)
    bfb8:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    bfbc:	d0a02117 	ldw	r2,-32636(gp)
    bfc0:	10800044 	addi	r2,r2,1
    bfc4:	d0a02115 	stw	r2,-32636(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    bfc8:	00003106 	br	c090 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    bfcc:	e0bffe17 	ldw	r2,-8(fp)
    bfd0:	10800017 	ldw	r2,0(r2)
    bfd4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    bfd8:	e0bffe17 	ldw	r2,-8(fp)
    bfdc:	10800403 	ldbu	r2,16(r2)
    bfe0:	10803fcc 	andi	r2,r2,255
    bfe4:	1005003a 	cmpeq	r2,r2,zero
    bfe8:	1000051e 	bne	r2,zero,c000 <alt_tick+0x5c>
    bfec:	d0a02117 	ldw	r2,-32636(gp)
    bff0:	1004c03a 	cmpne	r2,r2,zero
    bff4:	1000021e 	bne	r2,zero,c000 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    bff8:	e0bffe17 	ldw	r2,-8(fp)
    bffc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    c000:	e0bffe17 	ldw	r2,-8(fp)
    c004:	10c00217 	ldw	r3,8(r2)
    c008:	d0a02117 	ldw	r2,-32636(gp)
    c00c:	10c01e36 	bltu	r2,r3,c088 <alt_tick+0xe4>
    c010:	e0bffe17 	ldw	r2,-8(fp)
    c014:	10800403 	ldbu	r2,16(r2)
    c018:	10803fcc 	andi	r2,r2,255
    c01c:	1004c03a 	cmpne	r2,r2,zero
    c020:	1000191e 	bne	r2,zero,c088 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    c024:	e0bffe17 	ldw	r2,-8(fp)
    c028:	10c00317 	ldw	r3,12(r2)
    c02c:	e0bffe17 	ldw	r2,-8(fp)
    c030:	11000517 	ldw	r4,20(r2)
    c034:	183ee83a 	callr	r3
    c038:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    c03c:	e0bffd17 	ldw	r2,-12(fp)
    c040:	1004c03a 	cmpne	r2,r2,zero
    c044:	1000031e 	bne	r2,zero,c054 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    c048:	e13ffe17 	ldw	r4,-8(fp)
    c04c:	000bf0c0 	call	bf0c <alt_alarm_stop>
    c050:	00000d06 	br	c088 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    c054:	e0bffe17 	ldw	r2,-8(fp)
    c058:	10c00217 	ldw	r3,8(r2)
    c05c:	e0bffd17 	ldw	r2,-12(fp)
    c060:	1887883a 	add	r3,r3,r2
    c064:	e0bffe17 	ldw	r2,-8(fp)
    c068:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    c06c:	e0bffe17 	ldw	r2,-8(fp)
    c070:	10c00217 	ldw	r3,8(r2)
    c074:	d0a02117 	ldw	r2,-32636(gp)
    c078:	1880032e 	bgeu	r3,r2,c088 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    c07c:	e0fffe17 	ldw	r3,-8(fp)
    c080:	00800044 	movi	r2,1
    c084:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    c088:	e0bfff17 	ldw	r2,-4(fp)
    c08c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c090:	d0e00e04 	addi	r3,gp,-32712
    c094:	e0bffe17 	ldw	r2,-8(fp)
    c098:	10ffcc1e 	bne	r2,r3,bfcc <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    c09c:	e037883a 	mov	sp,fp
    c0a0:	dfc00117 	ldw	ra,4(sp)
    c0a4:	df000017 	ldw	fp,0(sp)
    c0a8:	dec00204 	addi	sp,sp,8
    c0ac:	f800283a 	ret

0000c0b0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    c0b0:	deffff04 	addi	sp,sp,-4
    c0b4:	df000015 	stw	fp,0(sp)
    c0b8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c0bc:	000170fa 	wrctl	ienable,zero
}
    c0c0:	e037883a 	mov	sp,fp
    c0c4:	df000017 	ldw	fp,0(sp)
    c0c8:	dec00104 	addi	sp,sp,4
    c0cc:	f800283a 	ret

0000c0d0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c0d0:	defff904 	addi	sp,sp,-28
    c0d4:	dfc00615 	stw	ra,24(sp)
    c0d8:	df000515 	stw	fp,20(sp)
    c0dc:	df000504 	addi	fp,sp,20
    c0e0:	e13ffd15 	stw	r4,-12(fp)
    c0e4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c0e8:	e0bffe17 	ldw	r2,-8(fp)
    c0ec:	10800017 	ldw	r2,0(r2)
    c0f0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c0f4:	e13ffd17 	ldw	r4,-12(fp)
    c0f8:	00007580 	call	758 <strlen>
    c0fc:	10800044 	addi	r2,r2,1
    c100:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c104:	00000d06 	br	c13c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c108:	e0bffc17 	ldw	r2,-16(fp)
    c10c:	11000217 	ldw	r4,8(r2)
    c110:	e1bffb17 	ldw	r6,-20(fp)
    c114:	e17ffd17 	ldw	r5,-12(fp)
    c118:	000c4180 	call	c418 <memcmp>
    c11c:	1004c03a 	cmpne	r2,r2,zero
    c120:	1000031e 	bne	r2,zero,c130 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c124:	e0bffc17 	ldw	r2,-16(fp)
    c128:	e0bfff15 	stw	r2,-4(fp)
    c12c:	00000706 	br	c14c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c130:	e0bffc17 	ldw	r2,-16(fp)
    c134:	10800017 	ldw	r2,0(r2)
    c138:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c13c:	e0fffe17 	ldw	r3,-8(fp)
    c140:	e0bffc17 	ldw	r2,-16(fp)
    c144:	10fff01e 	bne	r2,r3,c108 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    c148:	e03fff15 	stw	zero,-4(fp)
    c14c:	e0bfff17 	ldw	r2,-4(fp)
}
    c150:	e037883a 	mov	sp,fp
    c154:	dfc00117 	ldw	ra,4(sp)
    c158:	df000017 	ldw	fp,0(sp)
    c15c:	dec00204 	addi	sp,sp,8
    c160:	f800283a 	ret

0000c164 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    c164:	defffa04 	addi	sp,sp,-24
    c168:	dfc00515 	stw	ra,20(sp)
    c16c:	df000415 	stw	fp,16(sp)
    c170:	df000404 	addi	fp,sp,16
    c174:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    c178:	00800074 	movhi	r2,1
    c17c:	10877204 	addi	r2,r2,7624
    c180:	10800017 	ldw	r2,0(r2)
    c184:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c188:	00003306 	br	c258 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    c18c:	e0bffd17 	ldw	r2,-12(fp)
    c190:	11000217 	ldw	r4,8(r2)
    c194:	00007580 	call	758 <strlen>
    c198:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    c19c:	e0bffd17 	ldw	r2,-12(fp)
    c1a0:	10c00217 	ldw	r3,8(r2)
    c1a4:	e0bffc17 	ldw	r2,-16(fp)
    c1a8:	1885883a 	add	r2,r3,r2
    c1ac:	10bfffc4 	addi	r2,r2,-1
    c1b0:	10800003 	ldbu	r2,0(r2)
    c1b4:	10803fcc 	andi	r2,r2,255
    c1b8:	1080201c 	xori	r2,r2,128
    c1bc:	10bfe004 	addi	r2,r2,-128
    c1c0:	10800bd8 	cmpnei	r2,r2,47
    c1c4:	1000031e 	bne	r2,zero,c1d4 <alt_find_file+0x70>
    {
      len -= 1;
    c1c8:	e0bffc17 	ldw	r2,-16(fp)
    c1cc:	10bfffc4 	addi	r2,r2,-1
    c1d0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c1d4:	e0bffc17 	ldw	r2,-16(fp)
    c1d8:	1007883a 	mov	r3,r2
    c1dc:	e0bffe17 	ldw	r2,-8(fp)
    c1e0:	1885883a 	add	r2,r3,r2
    c1e4:	10800003 	ldbu	r2,0(r2)
    c1e8:	10803fcc 	andi	r2,r2,255
    c1ec:	1080201c 	xori	r2,r2,128
    c1f0:	10bfe004 	addi	r2,r2,-128
    c1f4:	10800be0 	cmpeqi	r2,r2,47
    c1f8:	10000a1e 	bne	r2,zero,c224 <alt_find_file+0xc0>
    c1fc:	e0bffc17 	ldw	r2,-16(fp)
    c200:	1007883a 	mov	r3,r2
    c204:	e0bffe17 	ldw	r2,-8(fp)
    c208:	1885883a 	add	r2,r3,r2
    c20c:	10800003 	ldbu	r2,0(r2)
    c210:	10803fcc 	andi	r2,r2,255
    c214:	1080201c 	xori	r2,r2,128
    c218:	10bfe004 	addi	r2,r2,-128
    c21c:	1004c03a 	cmpne	r2,r2,zero
    c220:	10000a1e 	bne	r2,zero,c24c <alt_find_file+0xe8>
    c224:	e0bffd17 	ldw	r2,-12(fp)
    c228:	11000217 	ldw	r4,8(r2)
    c22c:	e1bffc17 	ldw	r6,-16(fp)
    c230:	e17ffe17 	ldw	r5,-8(fp)
    c234:	000c4180 	call	c418 <memcmp>
    c238:	1004c03a 	cmpne	r2,r2,zero
    c23c:	1000031e 	bne	r2,zero,c24c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    c240:	e0bffd17 	ldw	r2,-12(fp)
    c244:	e0bfff15 	stw	r2,-4(fp)
    c248:	00000806 	br	c26c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    c24c:	e0bffd17 	ldw	r2,-12(fp)
    c250:	10800017 	ldw	r2,0(r2)
    c254:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c258:	00c00074 	movhi	r3,1
    c25c:	18c77204 	addi	r3,r3,7624
    c260:	e0bffd17 	ldw	r2,-12(fp)
    c264:	10ffc91e 	bne	r2,r3,c18c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    c268:	e03fff15 	stw	zero,-4(fp)
    c26c:	e0bfff17 	ldw	r2,-4(fp)
}
    c270:	e037883a 	mov	sp,fp
    c274:	dfc00117 	ldw	ra,4(sp)
    c278:	df000017 	ldw	fp,0(sp)
    c27c:	dec00204 	addi	sp,sp,8
    c280:	f800283a 	ret

0000c284 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    c284:	defffc04 	addi	sp,sp,-16
    c288:	df000315 	stw	fp,12(sp)
    c28c:	df000304 	addi	fp,sp,12
    c290:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    c294:	00bffa04 	movi	r2,-24
    c298:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c29c:	e03ffe15 	stw	zero,-8(fp)
    c2a0:	00001e06 	br	c31c <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    c2a4:	e0bffe17 	ldw	r2,-8(fp)
    c2a8:	00c00074 	movhi	r3,1
    c2ac:	18c2f404 	addi	r3,r3,3024
    c2b0:	10800324 	muli	r2,r2,12
    c2b4:	10c5883a 	add	r2,r2,r3
    c2b8:	10800017 	ldw	r2,0(r2)
    c2bc:	1004c03a 	cmpne	r2,r2,zero
    c2c0:	1000131e 	bne	r2,zero,c310 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    c2c4:	e0bffe17 	ldw	r2,-8(fp)
    c2c8:	00c00074 	movhi	r3,1
    c2cc:	18c2f404 	addi	r3,r3,3024
    c2d0:	10800324 	muli	r2,r2,12
    c2d4:	10c7883a 	add	r3,r2,r3
    c2d8:	e0bfff17 	ldw	r2,-4(fp)
    c2dc:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    c2e0:	00800074 	movhi	r2,1
    c2e4:	10877604 	addi	r2,r2,7640
    c2e8:	10c00017 	ldw	r3,0(r2)
    c2ec:	e0bffe17 	ldw	r2,-8(fp)
    c2f0:	1880040e 	bge	r3,r2,c304 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    c2f4:	00c00074 	movhi	r3,1
    c2f8:	18c77604 	addi	r3,r3,7640
    c2fc:	e0bffe17 	ldw	r2,-8(fp)
    c300:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    c304:	e0bffe17 	ldw	r2,-8(fp)
    c308:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    c30c:	00000606 	br	c328 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c310:	e0bffe17 	ldw	r2,-8(fp)
    c314:	10800044 	addi	r2,r2,1
    c318:	e0bffe15 	stw	r2,-8(fp)
    c31c:	e0bffe17 	ldw	r2,-8(fp)
    c320:	10800810 	cmplti	r2,r2,32
    c324:	103fdf1e 	bne	r2,zero,c2a4 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    c328:	e0bffd17 	ldw	r2,-12(fp)
}
    c32c:	e037883a 	mov	sp,fp
    c330:	df000017 	ldw	fp,0(sp)
    c334:	dec00104 	addi	sp,sp,4
    c338:	f800283a 	ret

0000c33c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    c33c:	defffb04 	addi	sp,sp,-20
    c340:	df000415 	stw	fp,16(sp)
    c344:	df000404 	addi	fp,sp,16
    c348:	e13ffe15 	stw	r4,-8(fp)
    c34c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    c350:	e0bfff17 	ldw	r2,-4(fp)
    c354:	10840070 	cmpltui	r2,r2,4097
    c358:	1000021e 	bne	r2,zero,c364 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    c35c:	00840004 	movi	r2,4096
    c360:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    c364:	e0fffe17 	ldw	r3,-8(fp)
    c368:	e0bfff17 	ldw	r2,-4(fp)
    c36c:	1885883a 	add	r2,r3,r2
    c370:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    c374:	e0bffe17 	ldw	r2,-8(fp)
    c378:	e0bffd15 	stw	r2,-12(fp)
    c37c:	00000506 	br	c394 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    c380:	e0bffd17 	ldw	r2,-12(fp)
    c384:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    c388:	e0bffd17 	ldw	r2,-12(fp)
    c38c:	10800804 	addi	r2,r2,32
    c390:	e0bffd15 	stw	r2,-12(fp)
    c394:	e0fffd17 	ldw	r3,-12(fp)
    c398:	e0bffc17 	ldw	r2,-16(fp)
    c39c:	18bff836 	bltu	r3,r2,c380 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    c3a0:	e0bffe17 	ldw	r2,-8(fp)
    c3a4:	108007cc 	andi	r2,r2,31
    c3a8:	1005003a 	cmpeq	r2,r2,zero
    c3ac:	1000021e 	bne	r2,zero,c3b8 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    c3b0:	e0bffd17 	ldw	r2,-12(fp)
    c3b4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    c3b8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    c3bc:	e037883a 	mov	sp,fp
    c3c0:	df000017 	ldw	fp,0(sp)
    c3c4:	dec00104 	addi	sp,sp,4
    c3c8:	f800283a 	ret

0000c3cc <atexit>:
    c3cc:	200b883a 	mov	r5,r4
    c3d0:	000d883a 	mov	r6,zero
    c3d4:	0009883a 	mov	r4,zero
    c3d8:	000f883a 	mov	r7,zero
    c3dc:	000c48c1 	jmpi	c48c <__register_exitproc>

0000c3e0 <exit>:
    c3e0:	defffe04 	addi	sp,sp,-8
    c3e4:	000b883a 	mov	r5,zero
    c3e8:	dc000015 	stw	r16,0(sp)
    c3ec:	dfc00115 	stw	ra,4(sp)
    c3f0:	2021883a 	mov	r16,r4
    c3f4:	000c5c40 	call	c5c4 <__call_exitprocs>
    c3f8:	00800074 	movhi	r2,1
    c3fc:	10876d04 	addi	r2,r2,7604
    c400:	11000017 	ldw	r4,0(r2)
    c404:	20800f17 	ldw	r2,60(r4)
    c408:	10000126 	beq	r2,zero,c410 <exit+0x30>
    c40c:	103ee83a 	callr	r2
    c410:	8009883a 	mov	r4,r16
    c414:	000c7b40 	call	c7b4 <_exit>

0000c418 <memcmp>:
    c418:	00c000c4 	movi	r3,3
    c41c:	1980032e 	bgeu	r3,r6,c42c <memcmp+0x14>
    c420:	2144b03a 	or	r2,r4,r5
    c424:	10c4703a 	and	r2,r2,r3
    c428:	10000f26 	beq	r2,zero,c468 <memcmp+0x50>
    c42c:	31ffffc4 	addi	r7,r6,-1
    c430:	3000061e 	bne	r6,zero,c44c <memcmp+0x34>
    c434:	00000a06 	br	c460 <memcmp+0x48>
    c438:	39ffffc4 	addi	r7,r7,-1
    c43c:	00bfffc4 	movi	r2,-1
    c440:	21000044 	addi	r4,r4,1
    c444:	29400044 	addi	r5,r5,1
    c448:	38800526 	beq	r7,r2,c460 <memcmp+0x48>
    c44c:	20c00003 	ldbu	r3,0(r4)
    c450:	28800003 	ldbu	r2,0(r5)
    c454:	18bff826 	beq	r3,r2,c438 <memcmp+0x20>
    c458:	1885c83a 	sub	r2,r3,r2
    c45c:	f800283a 	ret
    c460:	0005883a 	mov	r2,zero
    c464:	f800283a 	ret
    c468:	180f883a 	mov	r7,r3
    c46c:	20c00017 	ldw	r3,0(r4)
    c470:	28800017 	ldw	r2,0(r5)
    c474:	18bfed1e 	bne	r3,r2,c42c <memcmp+0x14>
    c478:	31bfff04 	addi	r6,r6,-4
    c47c:	21000104 	addi	r4,r4,4
    c480:	29400104 	addi	r5,r5,4
    c484:	39bff936 	bltu	r7,r6,c46c <memcmp+0x54>
    c488:	003fe806 	br	c42c <memcmp+0x14>

0000c48c <__register_exitproc>:
    c48c:	defffa04 	addi	sp,sp,-24
    c490:	00800074 	movhi	r2,1
    c494:	10876d04 	addi	r2,r2,7604
    c498:	dc000015 	stw	r16,0(sp)
    c49c:	14000017 	ldw	r16,0(r2)
    c4a0:	dd000415 	stw	r20,16(sp)
    c4a4:	2829883a 	mov	r20,r5
    c4a8:	81405217 	ldw	r5,328(r16)
    c4ac:	dcc00315 	stw	r19,12(sp)
    c4b0:	dc800215 	stw	r18,8(sp)
    c4b4:	dc400115 	stw	r17,4(sp)
    c4b8:	dfc00515 	stw	ra,20(sp)
    c4bc:	2023883a 	mov	r17,r4
    c4c0:	3027883a 	mov	r19,r6
    c4c4:	3825883a 	mov	r18,r7
    c4c8:	28002526 	beq	r5,zero,c560 <__register_exitproc+0xd4>
    c4cc:	29000117 	ldw	r4,4(r5)
    c4d0:	008007c4 	movi	r2,31
    c4d4:	11002716 	blt	r2,r4,c574 <__register_exitproc+0xe8>
    c4d8:	8800101e 	bne	r17,zero,c51c <__register_exitproc+0x90>
    c4dc:	2105883a 	add	r2,r4,r4
    c4e0:	1085883a 	add	r2,r2,r2
    c4e4:	20c00044 	addi	r3,r4,1
    c4e8:	1145883a 	add	r2,r2,r5
    c4ec:	0009883a 	mov	r4,zero
    c4f0:	15000215 	stw	r20,8(r2)
    c4f4:	28c00115 	stw	r3,4(r5)
    c4f8:	2005883a 	mov	r2,r4
    c4fc:	dfc00517 	ldw	ra,20(sp)
    c500:	dd000417 	ldw	r20,16(sp)
    c504:	dcc00317 	ldw	r19,12(sp)
    c508:	dc800217 	ldw	r18,8(sp)
    c50c:	dc400117 	ldw	r17,4(sp)
    c510:	dc000017 	ldw	r16,0(sp)
    c514:	dec00604 	addi	sp,sp,24
    c518:	f800283a 	ret
    c51c:	29802204 	addi	r6,r5,136
    c520:	00800044 	movi	r2,1
    c524:	110e983a 	sll	r7,r2,r4
    c528:	30c04017 	ldw	r3,256(r6)
    c52c:	2105883a 	add	r2,r4,r4
    c530:	1085883a 	add	r2,r2,r2
    c534:	1185883a 	add	r2,r2,r6
    c538:	19c6b03a 	or	r3,r3,r7
    c53c:	14802015 	stw	r18,128(r2)
    c540:	14c00015 	stw	r19,0(r2)
    c544:	00800084 	movi	r2,2
    c548:	30c04015 	stw	r3,256(r6)
    c54c:	88bfe31e 	bne	r17,r2,c4dc <__register_exitproc+0x50>
    c550:	30804117 	ldw	r2,260(r6)
    c554:	11c4b03a 	or	r2,r2,r7
    c558:	30804115 	stw	r2,260(r6)
    c55c:	003fdf06 	br	c4dc <__register_exitproc+0x50>
    c560:	00800074 	movhi	r2,1
    c564:	1087d804 	addi	r2,r2,8032
    c568:	100b883a 	mov	r5,r2
    c56c:	80805215 	stw	r2,328(r16)
    c570:	003fd606 	br	c4cc <__register_exitproc+0x40>
    c574:	00800034 	movhi	r2,0
    c578:	10800004 	addi	r2,r2,0
    c57c:	1000021e 	bne	r2,zero,c588 <__register_exitproc+0xfc>
    c580:	013fffc4 	movi	r4,-1
    c584:	003fdc06 	br	c4f8 <__register_exitproc+0x6c>
    c588:	01006404 	movi	r4,400
    c58c:	103ee83a 	callr	r2
    c590:	1007883a 	mov	r3,r2
    c594:	103ffa26 	beq	r2,zero,c580 <__register_exitproc+0xf4>
    c598:	80805217 	ldw	r2,328(r16)
    c59c:	180b883a 	mov	r5,r3
    c5a0:	18000115 	stw	zero,4(r3)
    c5a4:	18800015 	stw	r2,0(r3)
    c5a8:	80c05215 	stw	r3,328(r16)
    c5ac:	18006215 	stw	zero,392(r3)
    c5b0:	18006315 	stw	zero,396(r3)
    c5b4:	0009883a 	mov	r4,zero
    c5b8:	883fc826 	beq	r17,zero,c4dc <__register_exitproc+0x50>
    c5bc:	003fd706 	br	c51c <__register_exitproc+0x90>

0000c5c0 <register_fini>:
    c5c0:	f800283a 	ret

0000c5c4 <__call_exitprocs>:
    c5c4:	00800074 	movhi	r2,1
    c5c8:	10876d04 	addi	r2,r2,7604
    c5cc:	10800017 	ldw	r2,0(r2)
    c5d0:	defff304 	addi	sp,sp,-52
    c5d4:	df000b15 	stw	fp,44(sp)
    c5d8:	d8800115 	stw	r2,4(sp)
    c5dc:	00800034 	movhi	r2,0
    c5e0:	10800004 	addi	r2,r2,0
    c5e4:	1005003a 	cmpeq	r2,r2,zero
    c5e8:	d8800215 	stw	r2,8(sp)
    c5ec:	d8800117 	ldw	r2,4(sp)
    c5f0:	dd400815 	stw	r21,32(sp)
    c5f4:	dd000715 	stw	r20,28(sp)
    c5f8:	10805204 	addi	r2,r2,328
    c5fc:	dfc00c15 	stw	ra,48(sp)
    c600:	ddc00a15 	stw	r23,40(sp)
    c604:	dd800915 	stw	r22,36(sp)
    c608:	dcc00615 	stw	r19,24(sp)
    c60c:	dc800515 	stw	r18,20(sp)
    c610:	dc400415 	stw	r17,16(sp)
    c614:	dc000315 	stw	r16,12(sp)
    c618:	282b883a 	mov	r21,r5
    c61c:	2039883a 	mov	fp,r4
    c620:	d8800015 	stw	r2,0(sp)
    c624:	2829003a 	cmpeq	r20,r5,zero
    c628:	d8800117 	ldw	r2,4(sp)
    c62c:	14405217 	ldw	r17,328(r2)
    c630:	88001026 	beq	r17,zero,c674 <__call_exitprocs+0xb0>
    c634:	ddc00017 	ldw	r23,0(sp)
    c638:	88800117 	ldw	r2,4(r17)
    c63c:	8c802204 	addi	r18,r17,136
    c640:	143fffc4 	addi	r16,r2,-1
    c644:	80000916 	blt	r16,zero,c66c <__call_exitprocs+0xa8>
    c648:	05bfffc4 	movi	r22,-1
    c64c:	a000151e 	bne	r20,zero,c6a4 <__call_exitprocs+0xe0>
    c650:	8409883a 	add	r4,r16,r16
    c654:	2105883a 	add	r2,r4,r4
    c658:	1485883a 	add	r2,r2,r18
    c65c:	10c02017 	ldw	r3,128(r2)
    c660:	a8c01126 	beq	r21,r3,c6a8 <__call_exitprocs+0xe4>
    c664:	843fffc4 	addi	r16,r16,-1
    c668:	85bff81e 	bne	r16,r22,c64c <__call_exitprocs+0x88>
    c66c:	d8800217 	ldw	r2,8(sp)
    c670:	10003126 	beq	r2,zero,c738 <__call_exitprocs+0x174>
    c674:	dfc00c17 	ldw	ra,48(sp)
    c678:	df000b17 	ldw	fp,44(sp)
    c67c:	ddc00a17 	ldw	r23,40(sp)
    c680:	dd800917 	ldw	r22,36(sp)
    c684:	dd400817 	ldw	r21,32(sp)
    c688:	dd000717 	ldw	r20,28(sp)
    c68c:	dcc00617 	ldw	r19,24(sp)
    c690:	dc800517 	ldw	r18,20(sp)
    c694:	dc400417 	ldw	r17,16(sp)
    c698:	dc000317 	ldw	r16,12(sp)
    c69c:	dec00d04 	addi	sp,sp,52
    c6a0:	f800283a 	ret
    c6a4:	8409883a 	add	r4,r16,r16
    c6a8:	88c00117 	ldw	r3,4(r17)
    c6ac:	2105883a 	add	r2,r4,r4
    c6b0:	1445883a 	add	r2,r2,r17
    c6b4:	18ffffc4 	addi	r3,r3,-1
    c6b8:	11800217 	ldw	r6,8(r2)
    c6bc:	1c001526 	beq	r3,r16,c714 <__call_exitprocs+0x150>
    c6c0:	10000215 	stw	zero,8(r2)
    c6c4:	303fe726 	beq	r6,zero,c664 <__call_exitprocs+0xa0>
    c6c8:	00c00044 	movi	r3,1
    c6cc:	1c06983a 	sll	r3,r3,r16
    c6d0:	90804017 	ldw	r2,256(r18)
    c6d4:	8cc00117 	ldw	r19,4(r17)
    c6d8:	1884703a 	and	r2,r3,r2
    c6dc:	10001426 	beq	r2,zero,c730 <__call_exitprocs+0x16c>
    c6e0:	90804117 	ldw	r2,260(r18)
    c6e4:	1884703a 	and	r2,r3,r2
    c6e8:	10000c1e 	bne	r2,zero,c71c <__call_exitprocs+0x158>
    c6ec:	2105883a 	add	r2,r4,r4
    c6f0:	1485883a 	add	r2,r2,r18
    c6f4:	11400017 	ldw	r5,0(r2)
    c6f8:	e009883a 	mov	r4,fp
    c6fc:	303ee83a 	callr	r6
    c700:	88800117 	ldw	r2,4(r17)
    c704:	98bfc81e 	bne	r19,r2,c628 <__call_exitprocs+0x64>
    c708:	b8800017 	ldw	r2,0(r23)
    c70c:	147fd526 	beq	r2,r17,c664 <__call_exitprocs+0xa0>
    c710:	003fc506 	br	c628 <__call_exitprocs+0x64>
    c714:	8c000115 	stw	r16,4(r17)
    c718:	003fea06 	br	c6c4 <__call_exitprocs+0x100>
    c71c:	2105883a 	add	r2,r4,r4
    c720:	1485883a 	add	r2,r2,r18
    c724:	11000017 	ldw	r4,0(r2)
    c728:	303ee83a 	callr	r6
    c72c:	003ff406 	br	c700 <__call_exitprocs+0x13c>
    c730:	303ee83a 	callr	r6
    c734:	003ff206 	br	c700 <__call_exitprocs+0x13c>
    c738:	88800117 	ldw	r2,4(r17)
    c73c:	1000081e 	bne	r2,zero,c760 <__call_exitprocs+0x19c>
    c740:	89000017 	ldw	r4,0(r17)
    c744:	20000726 	beq	r4,zero,c764 <__call_exitprocs+0x1a0>
    c748:	b9000015 	stw	r4,0(r23)
    c74c:	8809883a 	mov	r4,r17
    c750:	00000000 	call	0 <__alt_mem_ins_mem1>
    c754:	bc400017 	ldw	r17,0(r23)
    c758:	883fb71e 	bne	r17,zero,c638 <__call_exitprocs+0x74>
    c75c:	003fc506 	br	c674 <__call_exitprocs+0xb0>
    c760:	89000017 	ldw	r4,0(r17)
    c764:	882f883a 	mov	r23,r17
    c768:	2023883a 	mov	r17,r4
    c76c:	883fb21e 	bne	r17,zero,c638 <__call_exitprocs+0x74>
    c770:	003fc006 	br	c674 <__call_exitprocs+0xb0>

0000c774 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    c774:	defffd04 	addi	sp,sp,-12
    c778:	df000215 	stw	fp,8(sp)
    c77c:	df000204 	addi	fp,sp,8
    c780:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    c784:	e0bfff17 	ldw	r2,-4(fp)
    c788:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    c78c:	e0bffe17 	ldw	r2,-8(fp)
    c790:	1005003a 	cmpeq	r2,r2,zero
    c794:	1000021e 	bne	r2,zero,c7a0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    c798:	002af070 	cmpltui	zero,zero,43969
    c79c:	00000106 	br	c7a4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    c7a0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    c7a4:	e037883a 	mov	sp,fp
    c7a8:	df000017 	ldw	fp,0(sp)
    c7ac:	dec00104 	addi	sp,sp,4
    c7b0:	f800283a 	ret

0000c7b4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    c7b4:	defffd04 	addi	sp,sp,-12
    c7b8:	dfc00215 	stw	ra,8(sp)
    c7bc:	df000115 	stw	fp,4(sp)
    c7c0:	df000104 	addi	fp,sp,4
    c7c4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    c7c8:	e13fff17 	ldw	r4,-4(fp)
    c7cc:	000c7740 	call	c774 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    c7d0:	003fff06 	br	c7d0 <_exit+0x1c>
    c7d4:	0000c5c0 	call	c5c <___vfprintf_internal_r+0x438>
