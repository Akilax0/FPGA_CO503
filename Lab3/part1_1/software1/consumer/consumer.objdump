
consumer.elf:     file format elf32-littlenios2
consumer.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000c7d8 memsz 0x0000c7d8 flags r-x
    LOAD off    0x0000e394 vaddr 0x00010394 paddr 0x0000c7f8 align 2**12
         filesz 0x00001a5c memsz 0x00001d5c flags rw-
    LOAD off    0x00010000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000394 memsz 0x00000394 flags r--

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c644  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000394  00010000  00010000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  00010394  0000c7f8  0000e394  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000300  00011df0  0000e254  0000fdf0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00010394  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000c98  00000000  00000000  000103b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000013ef  00000000  00000000  00011050  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000231a2  00000000  00000000  0001243f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007976  00000000  00000000  000355e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001355d  00000000  00000000  0003cf57  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000018a4  00000000  00000000  000504b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002154  00000000  00000000  00051d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000be16  00000000  00000000  00053eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0005fcc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  0005fce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00063681  2**0
                  CONTENTS, READONLY
 18 .cpu          00000004  00000000  00000000  00063684  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00063688  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00063689  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006368a  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006368e  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00063692  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00063696  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000636a1  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000636ac  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  000636b7  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000044  00000000  00000000  000636ba  2**0
                  CONTENTS, READONLY
 29 .jdi          00008508  00000000  00000000  000636fe  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00062901  00000000  00000000  0006bc06  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
00010000 l    d  .rodata	00000000 .rodata
00010394 l    d  .rwdata	00000000 .rwdata
00011df0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO_1.c
00000000 l    df *ABS*	00000000 consumer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000064c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000938 l     F .text	00000058 __sprint_r
000100c2 l     O .rodata	00000010 blanks.3452
000100b2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000299c l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004398 l     F .text	00000058 std
000044a4 l     F .text	00000008 __fp_lock
000044ac l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00010394 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00011dbc l     O .rwdata	00000004 charset
000100f8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00010240 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00008638 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00009e8c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00009eec l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00009fec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000a10c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000a1ec l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000a348 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000a574 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011de0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000a810 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010d50 l     O .rwdata	00001060 jtag_uart_1
0000a900 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000ab40 l     F .text	00000228 altera_avalon_jtag_uart_irq
0000ad68 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000b3e4 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000b708 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000bb2c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000bc68 l     F .text	000000dc alt_file_locked
0000becc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000c5e0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000c794 l     F .text	00000040 alt_sim_halt
00006154 g     F .text	00000094 _mprec_log10
00006240 g     F .text	00000088 __any_on
0000794c g     F .text	00000070 _isatty_r
00010218 g     O .rodata	00000028 __mprec_tinytens
0000a3a8 g     F .text	0000006c alt_main
00000000 g       *ABS*	00000000 __alt_mem_ins_mem1
00000810 g     F .text	000000a0 _puts_r
00011df0 g     O .bss	00000004 writep
00011e60 g     O .bss	00000100 alt_irq
000079bc g     F .text	00000078 _lseek_r
0000c7f8 g       *ABS*	00000000 __flash_rwdata_start
00009158 g     F .text	00000088 __eqdf2
000004c4 g     F .text	00000098 FIFO_1_INIT
000120f0 g       *ABS*	00000000 __alt_heap_start
00000798 g     F .text	00000044 printf
00007418 g     F .text	00000068 __sseek
00004400 g     F .text	000000a4 __sinit
000050d8 g     F .text	00000084 _setlocale_r
00004500 g     F .text	00000068 __sfmoreglue
0000a434 g     F .text	00000020 __malloc_unlock
00011df4 g     O .bss	00000004 readp
00005bd0 g     F .text	000000e0 memmove
000044f0 g     F .text	00000010 _cleanup
000062c8 g     F .text	000000bc _Balloc
00009268 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000078d8 g     F .text	00000074 _fstat_r
00011e1c g     O .bss	00000004 errno
00011e24 g     O .bss	00000004 alt_argv
00019db0 g       *ABS*	00000000 _gp
00010bd0 g     O .rwdata	00000180 alt_fd_list
0000c0f0 g     F .text	00000094 alt_find_dev
00005b30 g     F .text	000000a0 memcpy
000044e4 g     F .text	0000000c _cleanup_r
00009400 g     F .text	000000f8 __floatsidf
0000bbf0 g     F .text	00000078 alt_io_redirect
00009378 g     F .text	00000088 __ltdf2
0000c7f8 g       *ABS*	00000000 __DTOR_END__
000008b0 g     F .text	00000014 puts
000060a4 g     F .text	000000b0 __ratio
0000af80 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000007dc g     F .text	00000034 _printf_r
00000788 g     F .text	00000008 __udivsi3
0000a04c g     F .text	000000c0 isatty
00010128 g     O .rodata	000000c8 __mprec_tens
000050b4 g     F .text	00000008 __locale_charset
0000c35c g     F .text	00000090 alt_icache_flush
00011e10 g     O .bss	00000004 __malloc_top_pad
00011db8 g     O .rwdata	00000004 __mb_cur_max
000050bc g     F .text	0000000c _localeconv_r
000069c0 g     F .text	0000003c __i2b
00004a98 g     F .text	0000049c __sfvwrite_r
000073a0 g     F .text	00000070 _sbrk_r
00000574 g     F .text	00000094 consumer
00011df8 g     O .bss	00000004 fullp
00007a34 g     F .text	00000078 _read_r
00010794 g     O .rwdata	0000000c __lc_ctype
00011dd8 g     O .rwdata	00000004 alt_max_fd
00009b90 g     F .text	00000138 __unpack_d
000077b4 g     F .text	00000110 _fclose_r
00004364 g     F .text	00000034 fflush
00011e14 g     O .bss	00000004 __malloc_max_sbrked_mem
00008ac8 g     F .text	00000074 __adddf3
00005f84 g     F .text	00000120 __b2d
00008088 g     F .text	000005b0 __umoddi3
0000a258 g     F .text	000000f0 lseek
00011db4 g     O .rwdata	00000004 _global_impure_ptr
00006d3c g     F .text	000005f4 _realloc_r
000120f0 g       *ABS*	00000000 __bss_end
0000ba34 g     F .text	000000f8 alt_iic_isr_register
0000bfc4 g     F .text	0000010c alt_tick
00007aac g     F .text	000005dc __udivdi3
000101f0 g     O .rodata	00000028 __mprec_bigtens
00006c1c g     F .text	00000120 __s2b
000095d0 g     F .text	00000194 __floatunsidf
00005ea4 g     F .text	00000060 __mcmp
000044cc g     F .text	00000018 __fp_lock_all
0000b9ec g     F .text	00000048 alt_ic_irq_enabled
0000bf2c g     F .text	00000098 alt_alarm_stop
00011e2c g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
00010ba8 g     O .rwdata	00000028 alt_dev_null
0000b638 g     F .text	0000001c alt_dcache_flush_all
00005d70 g     F .text	00000070 __hi0bits
000094f8 g     F .text	000000d8 __fixdfsi
00011df0 g       *ABS*	00000000 __ram_rwdata_end
00011dd0 g     O .rwdata	00000008 alt_dev_list
0000a6f0 g     F .text	00000120 write
00010394 g       *ABS*	00000000 __ram_rodata_end
00009f18 g     F .text	000000d4 fstat
00006afc g     F .text	00000120 __pow5mult
00011e04 g     O .bss	00000004 __nlocale_changed
00000790 g     F .text	00000008 __umodsi3
000120f0 g       *ABS*	00000000 end
0000aa80 g     F .text	000000c0 altera_avalon_jtag_uart_init
0000c7f4 g       *ABS*	00000000 __CTOR_LIST__
00018000 g       *ABS*	00000000 __alt_stack_pointer
0000b454 g     F .text	00000090 alt_avalon_timer_sc_init
000097fc g     F .text	00000080 __clzsi2
0000b1a4 g     F .text	00000240 altera_avalon_jtag_uart_write
000043f0 g     F .text	00000004 __sfp_lock_acquire
00005a4c g     F .text	000000e4 memchr
00000990 g     F .text	00001eac ___vfprintf_internal_r
00004784 g     F .text	00000314 _free_r
0000c5e4 g     F .text	000001b0 __call_exitprocs
00011e08 g     O .bss	00000004 __mlocale_changed
00011dc4 g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000003c _start
00011e30 g     O .bss	00000004 _alt_tick_rate
0000668c g     F .text	0000014c __lshift
00011e34 g     O .bss	00000004 _alt_nticks
0000a454 g     F .text	00000120 read
0000a8a4 g     F .text	0000005c alt_sys_init
0000c4ac g     F .text	00000134 __register_exitproc
000067d8 g     F .text	000001e8 __multiply
0000ae18 g     F .text	00000074 altera_avalon_jtag_uart_close
00010394 g       *ABS*	00000000 __ram_rwdata_start
00010000 g       *ABS*	00000000 __ram_rodata_start
00011e38 g     O .bss	00000028 __malloc_current_mallinfo
00006384 g     F .text	0000017c __d2b
0000a938 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000c2a4 g     F .text	000000b8 alt_get_fd
00009cc8 g     F .text	000000c8 __fpcmp_parts_d
00007744 g     F .text	00000070 _close_r
0000c438 g     F .text	00000074 memcmp
0000a9e8 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
000120f0 g       *ABS*	00000000 __alt_stack_base
0000aa30 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00002860 g     F .text	0000013c __swsetup_r
00008f00 g     F .text	00000258 __divdf3
00004568 g     F .text	000000f0 __sfp
000061e8 g     F .text	00000058 __copybits
000107a0 g     O .rwdata	00000408 __malloc_av_
000043fc g     F .text	00000004 __sinit_lock_release
00008b3c g     F .text	000003c4 __muldf3
000074fc g     F .text	00000060 __sread
0000c184 g     F .text	00000120 alt_find_file
0000b654 g     F .text	000000b4 alt_dev_llist_insert
0000a414 g     F .text	00000020 __malloc_lock
0000a634 g     F .text	000000bc sbrk
00004168 g     F .text	000001fc _fflush_r
00007690 g     F .text	000000b4 _calloc_r
00011df0 g       *ABS*	00000000 __bss_start
00005cb0 g     F .text	00000098 memset
0000055c g     F .text	00000018 main
00011e28 g     O .bss	00000004 alt_envp
00011e18 g     O .bss	00000004 __malloc_max_total_mem
0000a990 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00007410 g     F .text	00000008 __sclose
00018000 g       *ABS*	00000000 __alt_heap_limit
000078c4 g     F .text	00000014 fclose
00010000 g       *ABS*	00000000 __alt_mem_data_mem1
00011f60 g     O .bss	00000190 _atexit0
00002bb4 g     F .text	000015b4 _dtoa_r
0000530c g     F .text	00000740 _malloc_r
00011ddc g     O .rwdata	00000004 alt_errno
00004ffc g     F .text	000000b8 _fwalk
000001f0 g     F .text	00000158 WRITE_FIFO_1
000006c8 g     F .text	00000060 __divsi3
0001024c g     O .rodata	00000014 __thenan_df
00004658 g     F .text	0000012c _malloc_trim_r
0000c7f8 g       *ABS*	00000000 __CTOR_END__
0000755c g     F .text	000000bc strcmp
00010000 g       *ABS*	00000000 __flash_rodata_start
0000c7f8 g       *ABS*	00000000 __DTOR_LIST__
00000608 g     F .text	00000044 delay
000091e0 g     F .text	00000088 __nedf2
0000a870 g     F .text	00000034 alt_irq_init
0000a5d4 g     F .text	00000060 alt_release_fd
00010260 g     O .rodata	00000100 __clz_tab
00011e0c g     O .bss	00000004 _PathLocale
0000c3ec g     F .text	00000014 atexit
00007618 g     F .text	00000078 _write_r
0000515c g     F .text	0000001c setlocale
00011db0 g     O .rwdata	00000004 _impure_ptr
00011e20 g     O .bss	00000004 alt_argc
0000b7cc g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00005f04 g     F .text	00000080 __ulp
00007330 g     F .text	00000040 __isinfd
000044b4 g     F .text	00000018 __fp_unlock_all
00011dc8 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
000050c8 g     F .text	00000010 localeconv
0000b860 g     F .text	00000050 alt_ic_isr_register
00011df0 g       *ABS*	00000000 _edata
000120f0 g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
0000ae8c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000b94c g     F .text	000000a0 alt_ic_irq_disable
00007480 g     F .text	0000007c __swrite
00011dc0 g     O .rwdata	00000004 __malloc_trim_threshold
0000c0d0 g     F .text	00000020 altera_nios2_qsys_irq_init
0000c400 g     F .text	00000038 exit
00004f34 g     F .text	000000c8 _fwalk_reent
00006500 g     F .text	0000018c __mdiff
00000728 g     F .text	00000060 __modsi3
00018000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000043f4 g     F .text	00000004 __sfp_lock_release
0000c7d4 g     F .text	00000020 _exit
00007370 g     F .text	00000030 __isnand
0000b4e4 g     F .text	00000154 alt_alarm_start
00009764 g     F .text	00000098 __muldi3
00005178 g     F .text	00000194 __smakebuf_r
000008c4 g     F .text	00000074 strlen
0000bd44 g     F .text	00000188 open
000092f0 g     F .text	00000088 __gedf2
00000348 g     F .text	0000017c READ_FIFO_1
0000b830 g     F .text	00000030 alt_icache_flush_all
00011de4 g     O .rwdata	00000004 alt_priority_mask
00011dfc g     O .bss	00000004 emptyp
0000b8b0 g     F .text	0000009c alt_ic_irq_enable
0000283c g     F .text	00000024 __vfprintf_internal
00008a48 g     F .text	00000080 __subdf3
00005de0 g     F .text	000000c4 __lo0bits
00011de8 g     O .rwdata	00000008 alt_alarm_list
0000b768 g     F .text	00000064 _do_ctors
00011e00 g     O .bss	00000004 countp
00009d90 g     F .text	000000fc close
0000a16c g     F .text	00000080 alt_load
0000987c g     F .text	00000314 __pack_d
00020000 g       *ABS*	00000000 __alt_mem_shared_mem
00000000  w      *UND*	00000000 free
000043f8 g     F .text	00000004 __sinit_lock_acquire
000069fc g     F .text	00000100 __multadd
00005d48 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18c79804 	addi	r3,r3,7776
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18c79804 	addi	r3,r3,7776
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	dee00014 	ori	sp,sp,32768

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c0:	d6a76c14 	ori	gp,gp,40368
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1c8:	10877c14 	ori	r2,r2,7664

    movhi r3, %hi(__bss_end)
     1cc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1d0:	18c83c14 	ori	r3,r3,8432

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e4:	000a16c0 	call	a16c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e8:	000a3a80 	call	a3a8 <alt_main>

000001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1ec:	003fff06 	br	1ec <alt_after_alt_main>

000001f0 <WRITE_FIFO_1>:


#include "FIFO_1.h"

void WRITE_FIFO_1(int *buffer)
{
     1f0:	defffe04 	addi	sp,sp,-8
     1f4:	df000115 	stw	fp,4(sp)
     1f8:	df000104 	addi	fp,sp,4
     1fc:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is full
	while(IORD_32DIRECT(MEM_BASE,fullp)==0x1){}
     200:	d0a01217 	ldw	r2,-32696(gp)
     204:	1007883a 	mov	r3,r2
     208:	008000b4 	movhi	r2,2
     20c:	10801204 	addi	r2,r2,72
     210:	1885883a 	add	r2,r3,r2
     214:	10800037 	ldwio	r2,0(r2)
     218:	10800060 	cmpeqi	r2,r2,1
     21c:	103ff81e 	bne	r2,zero,200 <WRITE_FIFO_1+0x10>

	// Write the data to FIFO
	IOWR_32DIRECT(MEM_BASE,writep,buffer);
     220:	d0a01017 	ldw	r2,-32704(gp)
     224:	1007883a 	mov	r3,r2
     228:	008000b4 	movhi	r2,2
     22c:	10801204 	addi	r2,r2,72
     230:	1885883a 	add	r2,r3,r2
     234:	e0ffff17 	ldw	r3,-4(fp)
     238:	10c00035 	stwio	r3,0(r2)

	// Update the write pointer
	writep += UNIT_SIZE;
     23c:	d0a01017 	ldw	r2,-32704(gp)
     240:	10800104 	addi	r2,r2,4
     244:	d0a01015 	stw	r2,-32704(gp)

	// Update "count" in shared mem
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE,countp) + 0x1);
     248:	d0a01417 	ldw	r2,-32688(gp)
     24c:	1007883a 	mov	r3,r2
     250:	008000b4 	movhi	r2,2
     254:	10801204 	addi	r2,r2,72
     258:	1889883a 	add	r4,r3,r2
     25c:	d0a01417 	ldw	r2,-32688(gp)
     260:	1007883a 	mov	r3,r2
     264:	008000b4 	movhi	r2,2
     268:	10801204 	addi	r2,r2,72
     26c:	1885883a 	add	r2,r3,r2
     270:	10800037 	ldwio	r2,0(r2)
     274:	10c00044 	addi	r3,r2,1
     278:	2005883a 	mov	r2,r4
     27c:	10c00035 	stwio	r3,0(r2)

	// Update the "full?" and "empty?" flags accordingly
	// Set the full flag if FIFO is now full
	// Reset the empty flag if FIFO now has 1 entry
	if(IORD_32DIRECT(MEM_BASE,countp)==CAPACITY){
     280:	d0a01417 	ldw	r2,-32688(gp)
     284:	1007883a 	mov	r3,r2
     288:	008000b4 	movhi	r2,2
     28c:	10801204 	addi	r2,r2,72
     290:	1885883a 	add	r2,r3,r2
     294:	10800037 	ldwio	r2,0(r2)
     298:	10800a18 	cmpnei	r2,r2,40
     29c:	1000091e 	bne	r2,zero,2c4 <WRITE_FIFO_1+0xd4>
		IOWR_32DIRECT(MEM_BASE,fullp,0x1);
     2a0:	d0a01217 	ldw	r2,-32696(gp)
     2a4:	1007883a 	mov	r3,r2
     2a8:	008000b4 	movhi	r2,2
     2ac:	10801204 	addi	r2,r2,72
     2b0:	1885883a 	add	r2,r3,r2
     2b4:	1007883a 	mov	r3,r2
     2b8:	00800044 	movi	r2,1
     2bc:	18800035 	stwio	r2,0(r3)
     2c0:	00000606 	br	2dc <WRITE_FIFO_1+0xec>
	}else{
		IOWR_32DIRECT(MEM_BASE,fullp,0x0);
     2c4:	d0a01217 	ldw	r2,-32696(gp)
     2c8:	1007883a 	mov	r3,r2
     2cc:	008000b4 	movhi	r2,2
     2d0:	10801204 	addi	r2,r2,72
     2d4:	1885883a 	add	r2,r3,r2
     2d8:	10000035 	stwio	zero,0(r2)
	}
	if(IORD_32DIRECT(MEM_BASE,countp)==0x0){
     2dc:	d0a01417 	ldw	r2,-32688(gp)
     2e0:	1007883a 	mov	r3,r2
     2e4:	008000b4 	movhi	r2,2
     2e8:	10801204 	addi	r2,r2,72
     2ec:	1885883a 	add	r2,r3,r2
     2f0:	10800037 	ldwio	r2,0(r2)
     2f4:	1004c03a 	cmpne	r2,r2,zero
     2f8:	1000091e 	bne	r2,zero,320 <WRITE_FIFO_1+0x130>
		IOWR_32DIRECT(MEM_BASE,emptyp,0x1);
     2fc:	d0a01317 	ldw	r2,-32692(gp)
     300:	1007883a 	mov	r3,r2
     304:	008000b4 	movhi	r2,2
     308:	10801204 	addi	r2,r2,72
     30c:	1885883a 	add	r2,r3,r2
     310:	1007883a 	mov	r3,r2
     314:	00800044 	movi	r2,1
     318:	18800035 	stwio	r2,0(r3)
     31c:	00000606 	br	338 <WRITE_FIFO_1+0x148>
	}else{
		IOWR_32DIRECT(MEM_BASE,emptyp,0x0);
     320:	d0a01317 	ldw	r2,-32692(gp)
     324:	1007883a 	mov	r3,r2
     328:	008000b4 	movhi	r2,2
     32c:	10801204 	addi	r2,r2,72
     330:	1885883a 	add	r2,r3,r2
     334:	10000035 	stwio	zero,0(r2)
	}
}
     338:	e037883a 	mov	sp,fp
     33c:	df000017 	ldw	fp,0(sp)
     340:	dec00104 	addi	sp,sp,4
     344:	f800283a 	ret

00000348 <READ_FIFO_1>:


void READ_FIFO_1(int *buffer)
{
     348:	defffd04 	addi	sp,sp,-12
     34c:	dfc00215 	stw	ra,8(sp)
     350:	df000115 	stw	fp,4(sp)
     354:	df000104 	addi	fp,sp,4
     358:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is empty
	while(IORD_32DIRECT(MEM_BASE,emptyp)==0x1){}
     35c:	d0a01317 	ldw	r2,-32692(gp)
     360:	1007883a 	mov	r3,r2
     364:	008000b4 	movhi	r2,2
     368:	10801204 	addi	r2,r2,72
     36c:	1885883a 	add	r2,r3,r2
     370:	10800037 	ldwio	r2,0(r2)
     374:	10800060 	cmpeqi	r2,r2,1
     378:	103ff81e 	bne	r2,zero,35c <READ_FIFO_1+0x14>

	// Read the data
	*buffer = IORD_32DIRECT(MEM_BASE,readp);
     37c:	d0a01117 	ldw	r2,-32700(gp)
     380:	1007883a 	mov	r3,r2
     384:	008000b4 	movhi	r2,2
     388:	10801204 	addi	r2,r2,72
     38c:	1885883a 	add	r2,r3,r2
     390:	10c00037 	ldwio	r3,0(r2)
     394:	e0bfff17 	ldw	r2,-4(fp)
     398:	10c00015 	stw	r3,0(r2)
	//printf("Buffer [%i]\n",&buffer);

	// Update the read pointer
	readp += UNIT_SIZE;
     39c:	d0a01117 	ldw	r2,-32700(gp)
     3a0:	10800104 	addi	r2,r2,4
     3a4:	d0a01115 	stw	r2,-32700(gp)
	readp = (readp%CAPACITY*UNIT_SIZE);
     3a8:	d1201117 	ldw	r4,-32700(gp)
     3ac:	01400a04 	movi	r5,40
     3b0:	00007280 	call	728 <__modsi3>
     3b4:	1085883a 	add	r2,r2,r2
     3b8:	1085883a 	add	r2,r2,r2
     3bc:	d0a01115 	stw	r2,-32700(gp)

	// Update "count" in shared mem
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE,countp) - 0x1);
     3c0:	d0a01417 	ldw	r2,-32688(gp)
     3c4:	1007883a 	mov	r3,r2
     3c8:	008000b4 	movhi	r2,2
     3cc:	10801204 	addi	r2,r2,72
     3d0:	1889883a 	add	r4,r3,r2
     3d4:	d0a01417 	ldw	r2,-32688(gp)
     3d8:	1007883a 	mov	r3,r2
     3dc:	008000b4 	movhi	r2,2
     3e0:	10801204 	addi	r2,r2,72
     3e4:	1885883a 	add	r2,r3,r2
     3e8:	10800037 	ldwio	r2,0(r2)
     3ec:	10ffffc4 	addi	r3,r2,-1
     3f0:	2005883a 	mov	r2,r4
     3f4:	10c00035 	stwio	r3,0(r2)

	// Update the "full?" and "empty?" flags accordingly
	// Set the empty flag if FIFO is now empty
	// Reset the full flag if FIFO now has 1 entry less than capacity
	if(IORD_32DIRECT(MEM_BASE,countp)==CAPACITY){
     3f8:	d0a01417 	ldw	r2,-32688(gp)
     3fc:	1007883a 	mov	r3,r2
     400:	008000b4 	movhi	r2,2
     404:	10801204 	addi	r2,r2,72
     408:	1885883a 	add	r2,r3,r2
     40c:	10800037 	ldwio	r2,0(r2)
     410:	10800a18 	cmpnei	r2,r2,40
     414:	1000091e 	bne	r2,zero,43c <READ_FIFO_1+0xf4>
		IOWR_32DIRECT(MEM_BASE,fullp,0x1);
     418:	d0a01217 	ldw	r2,-32696(gp)
     41c:	1007883a 	mov	r3,r2
     420:	008000b4 	movhi	r2,2
     424:	10801204 	addi	r2,r2,72
     428:	1885883a 	add	r2,r3,r2
     42c:	1007883a 	mov	r3,r2
     430:	00800044 	movi	r2,1
     434:	18800035 	stwio	r2,0(r3)
     438:	00000606 	br	454 <READ_FIFO_1+0x10c>
	}else{
		IOWR_32DIRECT(MEM_BASE,fullp,0x0);
     43c:	d0a01217 	ldw	r2,-32696(gp)
     440:	1007883a 	mov	r3,r2
     444:	008000b4 	movhi	r2,2
     448:	10801204 	addi	r2,r2,72
     44c:	1885883a 	add	r2,r3,r2
     450:	10000035 	stwio	zero,0(r2)
	}
	if(IORD_32DIRECT(MEM_BASE,countp)==0x0){
     454:	d0a01417 	ldw	r2,-32688(gp)
     458:	1007883a 	mov	r3,r2
     45c:	008000b4 	movhi	r2,2
     460:	10801204 	addi	r2,r2,72
     464:	1885883a 	add	r2,r3,r2
     468:	10800037 	ldwio	r2,0(r2)
     46c:	1004c03a 	cmpne	r2,r2,zero
     470:	1000091e 	bne	r2,zero,498 <READ_FIFO_1+0x150>
		IOWR_32DIRECT(MEM_BASE,emptyp,0x1);
     474:	d0a01317 	ldw	r2,-32692(gp)
     478:	1007883a 	mov	r3,r2
     47c:	008000b4 	movhi	r2,2
     480:	10801204 	addi	r2,r2,72
     484:	1885883a 	add	r2,r3,r2
     488:	1007883a 	mov	r3,r2
     48c:	00800044 	movi	r2,1
     490:	18800035 	stwio	r2,0(r3)
     494:	00000606 	br	4b0 <READ_FIFO_1+0x168>
	}else{
		IOWR_32DIRECT(MEM_BASE,emptyp,0x0);
     498:	d0a01317 	ldw	r2,-32692(gp)
     49c:	1007883a 	mov	r3,r2
     4a0:	008000b4 	movhi	r2,2
     4a4:	10801204 	addi	r2,r2,72
     4a8:	1885883a 	add	r2,r3,r2
     4ac:	10000035 	stwio	zero,0(r2)
	}
}
     4b0:	e037883a 	mov	sp,fp
     4b4:	dfc00117 	ldw	ra,4(sp)
     4b8:	df000017 	ldw	fp,0(sp)
     4bc:	dec00204 	addi	sp,sp,8
     4c0:	f800283a 	ret

000004c4 <FIFO_1_INIT>:

//Initialization
void FIFO_1_INIT()
{
     4c4:	deffff04 	addi	sp,sp,-4
     4c8:	df000015 	stw	fp,0(sp)
     4cc:	d839883a 	mov	fp,sp
	writep = STARTP; // Initially the FIFO is empty, so start writing at the first slot
     4d0:	00800304 	movi	r2,12
     4d4:	d0a01015 	stw	r2,-32704(gp)
	readp  = STARTP;
     4d8:	00800304 	movi	r2,12
     4dc:	d0a01115 	stw	r2,-32700(gp)
	fullp   = 0x0; // SET THIS OFFSET (If there are previous FIFOs in shared memory, use Prev Fifo's STARTP + Prev Fifo's size)
     4e0:	d0201215 	stw	zero,-32696(gp)
	emptyp   = fullp + UNIT_SIZE;
     4e4:	d0a01217 	ldw	r2,-32696(gp)
     4e8:	10800104 	addi	r2,r2,4
     4ec:	d0a01315 	stw	r2,-32692(gp)
	countp  = emptyp + UNIT_SIZE;
     4f0:	d0a01317 	ldw	r2,-32692(gp)
     4f4:	10800104 	addi	r2,r2,4
     4f8:	d0a01415 	stw	r2,-32688(gp)

	// Assigning values for the flags.
	IOWR_32DIRECT(MEM_BASE, fullp, 0x0);
     4fc:	d0a01217 	ldw	r2,-32696(gp)
     500:	1007883a 	mov	r3,r2
     504:	008000b4 	movhi	r2,2
     508:	10801204 	addi	r2,r2,72
     50c:	1885883a 	add	r2,r3,r2
     510:	10000035 	stwio	zero,0(r2)
	IOWR_32DIRECT(MEM_BASE, emptyp, 0x1); // The fifo is empty at the start
     514:	d0a01317 	ldw	r2,-32692(gp)
     518:	1007883a 	mov	r3,r2
     51c:	008000b4 	movhi	r2,2
     520:	10801204 	addi	r2,r2,72
     524:	1885883a 	add	r2,r3,r2
     528:	1007883a 	mov	r3,r2
     52c:	00800044 	movi	r2,1
     530:	18800035 	stwio	r2,0(r3)
	IOWR_32DIRECT(MEM_BASE, countp, 0x0); // The fifo is empty at the start
     534:	d0a01417 	ldw	r2,-32688(gp)
     538:	1007883a 	mov	r3,r2
     53c:	008000b4 	movhi	r2,2
     540:	10801204 	addi	r2,r2,72
     544:	1885883a 	add	r2,r3,r2
     548:	10000035 	stwio	zero,0(r2)
}
     54c:	e037883a 	mov	sp,fp
     550:	df000017 	ldw	fp,0(sp)
     554:	dec00104 	addi	sp,sp,4
     558:	f800283a 	ret

0000055c <main>:
void delay(int n);
int consumer();


int main()
{
     55c:	defffe04 	addi	sp,sp,-8
     560:	dfc00115 	stw	ra,4(sp)
     564:	df000015 	stw	fp,0(sp)
     568:	d839883a 	mov	fp,sp
	consumer();
     56c:	00005740 	call	574 <consumer>
	
	while(1) { }
     570:	003fff06 	br	570 <main+0x14>

00000574 <consumer>:
	return 0;
}


int consumer()
{
     574:	defffc04 	addi	sp,sp,-16
     578:	dfc00315 	stw	ra,12(sp)
     57c:	df000215 	stw	fp,8(sp)
     580:	df000204 	addi	fp,sp,8
	printf("Consumer starting..\n");
     584:	01000074 	movhi	r4,1
     588:	21000004 	addi	r4,r4,0
     58c:	00008b00 	call	8b0 <puts>

	FIFO_1_INIT(); // Initialize the producer-consumer fifo
     590:	00004c40 	call	4c4 <FIFO_1_INIT>

	int j = 0;
     594:	e03fff15 	stw	zero,-4(fp)
	int k = 5;
     598:	00800144 	movi	r2,5
     59c:	e0bffe15 	stw	r2,-8(fp)
	while(k<500)
     5a0:	00000d06 	br	5d8 <consumer+0x64>
	{
		READ_FIFO_1(&j);  // Read from the producer-consumer fifo
     5a4:	e13fff04 	addi	r4,fp,-4
     5a8:	00003480 	call	348 <READ_FIFO_1>
		if(j==k)
     5ac:	e0ffff17 	ldw	r3,-4(fp)
     5b0:	e0bffe17 	ldw	r2,-8(fp)
     5b4:	1880051e 	bne	r3,r2,5cc <consumer+0x58>
			printf("Consumer succefully received [%i]\t%x\n",j,readp);
     5b8:	e17fff17 	ldw	r5,-4(fp)
     5bc:	d1a01117 	ldw	r6,-32700(gp)
     5c0:	01000074 	movhi	r4,1
     5c4:	21000504 	addi	r4,r4,20
     5c8:	00007980 	call	798 <printf>

		k+=10;
     5cc:	e0bffe17 	ldw	r2,-8(fp)
     5d0:	10800284 	addi	r2,r2,10
     5d4:	e0bffe15 	stw	r2,-8(fp)

	FIFO_1_INIT(); // Initialize the producer-consumer fifo

	int j = 0;
	int k = 5;
	while(k<500)
     5d8:	e0bffe17 	ldw	r2,-8(fp)
     5dc:	10807d10 	cmplti	r2,r2,500
     5e0:	103ff01e 	bne	r2,zero,5a4 <consumer+0x30>
			printf("Consumer succefully received [%i]\t%x\n",j,readp);

		k+=10;
	}

	printf("Consumer finished..\n");
     5e4:	01000074 	movhi	r4,1
     5e8:	21000f04 	addi	r4,r4,60
     5ec:	00008b00 	call	8b0 <puts>
	return 0;
     5f0:	0005883a 	mov	r2,zero
}
     5f4:	e037883a 	mov	sp,fp
     5f8:	dfc00117 	ldw	ra,4(sp)
     5fc:	df000017 	ldw	fp,0(sp)
     600:	dec00204 	addi	sp,sp,8
     604:	f800283a 	ret

00000608 <delay>:


void delay(int n)
{
     608:	defffd04 	addi	sp,sp,-12
     60c:	df000215 	stw	fp,8(sp)
     610:	df000204 	addi	fp,sp,8
     614:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i=n; i>0; i--)
     618:	e0bfff17 	ldw	r2,-4(fp)
     61c:	e0bffe15 	stw	r2,-8(fp)
     620:	00000306 	br	630 <delay+0x28>
     624:	e0bffe17 	ldw	r2,-8(fp)
     628:	10bfffc4 	addi	r2,r2,-1
     62c:	e0bffe15 	stw	r2,-8(fp)
     630:	e0bffe17 	ldw	r2,-8(fp)
     634:	10800048 	cmpgei	r2,r2,1
     638:	103ffa1e 	bne	r2,zero,624 <delay+0x1c>
	{
		continue;
	}
}
     63c:	e037883a 	mov	sp,fp
     640:	df000017 	ldw	fp,0(sp)
     644:	dec00104 	addi	sp,sp,4
     648:	f800283a 	ret

0000064c <udivmodsi4>:
     64c:	29001b2e 	bgeu	r5,r4,6bc <udivmodsi4+0x70>
     650:	28001a16 	blt	r5,zero,6bc <udivmodsi4+0x70>
     654:	00800044 	movi	r2,1
     658:	0007883a 	mov	r3,zero
     65c:	01c007c4 	movi	r7,31
     660:	00000306 	br	670 <udivmodsi4+0x24>
     664:	19c01326 	beq	r3,r7,6b4 <udivmodsi4+0x68>
     668:	18c00044 	addi	r3,r3,1
     66c:	28000416 	blt	r5,zero,680 <udivmodsi4+0x34>
     670:	294b883a 	add	r5,r5,r5
     674:	1085883a 	add	r2,r2,r2
     678:	293ffa36 	bltu	r5,r4,664 <udivmodsi4+0x18>
     67c:	10000d26 	beq	r2,zero,6b4 <udivmodsi4+0x68>
     680:	0007883a 	mov	r3,zero
     684:	21400236 	bltu	r4,r5,690 <udivmodsi4+0x44>
     688:	2149c83a 	sub	r4,r4,r5
     68c:	1886b03a 	or	r3,r3,r2
     690:	1004d07a 	srli	r2,r2,1
     694:	280ad07a 	srli	r5,r5,1
     698:	103ffa1e 	bne	r2,zero,684 <udivmodsi4+0x38>
     69c:	30000226 	beq	r6,zero,6a8 <udivmodsi4+0x5c>
     6a0:	2005883a 	mov	r2,r4
     6a4:	f800283a 	ret
     6a8:	1809883a 	mov	r4,r3
     6ac:	2005883a 	mov	r2,r4
     6b0:	f800283a 	ret
     6b4:	0007883a 	mov	r3,zero
     6b8:	003ff806 	br	69c <udivmodsi4+0x50>
     6bc:	00800044 	movi	r2,1
     6c0:	0007883a 	mov	r3,zero
     6c4:	003fef06 	br	684 <udivmodsi4+0x38>

000006c8 <__divsi3>:
     6c8:	defffe04 	addi	sp,sp,-8
     6cc:	dc000015 	stw	r16,0(sp)
     6d0:	dfc00115 	stw	ra,4(sp)
     6d4:	0021883a 	mov	r16,zero
     6d8:	20000c16 	blt	r4,zero,70c <__divsi3+0x44>
     6dc:	000d883a 	mov	r6,zero
     6e0:	28000e16 	blt	r5,zero,71c <__divsi3+0x54>
     6e4:	000064c0 	call	64c <udivmodsi4>
     6e8:	1007883a 	mov	r3,r2
     6ec:	8005003a 	cmpeq	r2,r16,zero
     6f0:	1000011e 	bne	r2,zero,6f8 <__divsi3+0x30>
     6f4:	00c7c83a 	sub	r3,zero,r3
     6f8:	1805883a 	mov	r2,r3
     6fc:	dfc00117 	ldw	ra,4(sp)
     700:	dc000017 	ldw	r16,0(sp)
     704:	dec00204 	addi	sp,sp,8
     708:	f800283a 	ret
     70c:	0109c83a 	sub	r4,zero,r4
     710:	04000044 	movi	r16,1
     714:	000d883a 	mov	r6,zero
     718:	283ff20e 	bge	r5,zero,6e4 <__divsi3+0x1c>
     71c:	014bc83a 	sub	r5,zero,r5
     720:	8021003a 	cmpeq	r16,r16,zero
     724:	003fef06 	br	6e4 <__divsi3+0x1c>

00000728 <__modsi3>:
     728:	deffff04 	addi	sp,sp,-4
     72c:	dfc00015 	stw	ra,0(sp)
     730:	01800044 	movi	r6,1
     734:	2807883a 	mov	r3,r5
     738:	20000416 	blt	r4,zero,74c <__modsi3+0x24>
     73c:	28000c16 	blt	r5,zero,770 <__modsi3+0x48>
     740:	dfc00017 	ldw	ra,0(sp)
     744:	dec00104 	addi	sp,sp,4
     748:	000064c1 	jmpi	64c <udivmodsi4>
     74c:	0109c83a 	sub	r4,zero,r4
     750:	28000b16 	blt	r5,zero,780 <__modsi3+0x58>
     754:	180b883a 	mov	r5,r3
     758:	01800044 	movi	r6,1
     75c:	000064c0 	call	64c <udivmodsi4>
     760:	0085c83a 	sub	r2,zero,r2
     764:	dfc00017 	ldw	ra,0(sp)
     768:	dec00104 	addi	sp,sp,4
     76c:	f800283a 	ret
     770:	014bc83a 	sub	r5,zero,r5
     774:	dfc00017 	ldw	ra,0(sp)
     778:	dec00104 	addi	sp,sp,4
     77c:	000064c1 	jmpi	64c <udivmodsi4>
     780:	0147c83a 	sub	r3,zero,r5
     784:	003ff306 	br	754 <__modsi3+0x2c>

00000788 <__udivsi3>:
     788:	000d883a 	mov	r6,zero
     78c:	000064c1 	jmpi	64c <udivmodsi4>

00000790 <__umodsi3>:
     790:	01800044 	movi	r6,1
     794:	000064c1 	jmpi	64c <udivmodsi4>

00000798 <printf>:
     798:	defffb04 	addi	sp,sp,-20
     79c:	dfc00115 	stw	ra,4(sp)
     7a0:	d9400215 	stw	r5,8(sp)
     7a4:	d9800315 	stw	r6,12(sp)
     7a8:	d9c00415 	stw	r7,16(sp)
     7ac:	00800074 	movhi	r2,1
     7b0:	10876c04 	addi	r2,r2,7600
     7b4:	10c00017 	ldw	r3,0(r2)
     7b8:	200b883a 	mov	r5,r4
     7bc:	d8800204 	addi	r2,sp,8
     7c0:	19000217 	ldw	r4,8(r3)
     7c4:	100d883a 	mov	r6,r2
     7c8:	d8800015 	stw	r2,0(sp)
     7cc:	000283c0 	call	283c <__vfprintf_internal>
     7d0:	dfc00117 	ldw	ra,4(sp)
     7d4:	dec00504 	addi	sp,sp,20
     7d8:	f800283a 	ret

000007dc <_printf_r>:
     7dc:	defffc04 	addi	sp,sp,-16
     7e0:	dfc00115 	stw	ra,4(sp)
     7e4:	d9800215 	stw	r6,8(sp)
     7e8:	d9c00315 	stw	r7,12(sp)
     7ec:	280d883a 	mov	r6,r5
     7f0:	21400217 	ldw	r5,8(r4)
     7f4:	d8c00204 	addi	r3,sp,8
     7f8:	180f883a 	mov	r7,r3
     7fc:	d8c00015 	stw	r3,0(sp)
     800:	00009900 	call	990 <___vfprintf_internal_r>
     804:	dfc00117 	ldw	ra,4(sp)
     808:	dec00404 	addi	sp,sp,16
     80c:	f800283a 	ret

00000810 <_puts_r>:
     810:	defff604 	addi	sp,sp,-40
     814:	dc400715 	stw	r17,28(sp)
     818:	2023883a 	mov	r17,r4
     81c:	2809883a 	mov	r4,r5
     820:	dfc00915 	stw	ra,36(sp)
     824:	dcc00815 	stw	r19,32(sp)
     828:	2827883a 	mov	r19,r5
     82c:	00008c40 	call	8c4 <strlen>
     830:	89400217 	ldw	r5,8(r17)
     834:	00c00074 	movhi	r3,1
     838:	18c01404 	addi	r3,r3,80
     83c:	01c00044 	movi	r7,1
     840:	12000044 	addi	r8,r2,1
     844:	d8c00515 	stw	r3,20(sp)
     848:	d9c00615 	stw	r7,24(sp)
     84c:	d8c00304 	addi	r3,sp,12
     850:	01c00084 	movi	r7,2
     854:	8809883a 	mov	r4,r17
     858:	d80d883a 	mov	r6,sp
     85c:	d8c00015 	stw	r3,0(sp)
     860:	dcc00315 	stw	r19,12(sp)
     864:	da000215 	stw	r8,8(sp)
     868:	d9c00115 	stw	r7,4(sp)
     86c:	d8800415 	stw	r2,16(sp)
     870:	0004a980 	call	4a98 <__sfvwrite_r>
     874:	00ffffc4 	movi	r3,-1
     878:	10000626 	beq	r2,zero,894 <_puts_r+0x84>
     87c:	1805883a 	mov	r2,r3
     880:	dfc00917 	ldw	ra,36(sp)
     884:	dcc00817 	ldw	r19,32(sp)
     888:	dc400717 	ldw	r17,28(sp)
     88c:	dec00a04 	addi	sp,sp,40
     890:	f800283a 	ret
     894:	00c00284 	movi	r3,10
     898:	1805883a 	mov	r2,r3
     89c:	dfc00917 	ldw	ra,36(sp)
     8a0:	dcc00817 	ldw	r19,32(sp)
     8a4:	dc400717 	ldw	r17,28(sp)
     8a8:	dec00a04 	addi	sp,sp,40
     8ac:	f800283a 	ret

000008b0 <puts>:
     8b0:	00800074 	movhi	r2,1
     8b4:	10876c04 	addi	r2,r2,7600
     8b8:	200b883a 	mov	r5,r4
     8bc:	11000017 	ldw	r4,0(r2)
     8c0:	00008101 	jmpi	810 <_puts_r>

000008c4 <strlen>:
     8c4:	208000cc 	andi	r2,r4,3
     8c8:	2011883a 	mov	r8,r4
     8cc:	1000161e 	bne	r2,zero,928 <strlen+0x64>
     8d0:	20c00017 	ldw	r3,0(r4)
     8d4:	017fbff4 	movhi	r5,65279
     8d8:	297fbfc4 	addi	r5,r5,-257
     8dc:	01e02074 	movhi	r7,32897
     8e0:	39e02004 	addi	r7,r7,-32640
     8e4:	1945883a 	add	r2,r3,r5
     8e8:	11c4703a 	and	r2,r2,r7
     8ec:	00c6303a 	nor	r3,zero,r3
     8f0:	1886703a 	and	r3,r3,r2
     8f4:	18000c1e 	bne	r3,zero,928 <strlen+0x64>
     8f8:	280d883a 	mov	r6,r5
     8fc:	380b883a 	mov	r5,r7
     900:	21000104 	addi	r4,r4,4
     904:	20800017 	ldw	r2,0(r4)
     908:	1187883a 	add	r3,r2,r6
     90c:	1946703a 	and	r3,r3,r5
     910:	0084303a 	nor	r2,zero,r2
     914:	10c4703a 	and	r2,r2,r3
     918:	103ff926 	beq	r2,zero,900 <strlen+0x3c>
     91c:	20800007 	ldb	r2,0(r4)
     920:	10000326 	beq	r2,zero,930 <strlen+0x6c>
     924:	21000044 	addi	r4,r4,1
     928:	20800007 	ldb	r2,0(r4)
     92c:	103ffd1e 	bne	r2,zero,924 <strlen+0x60>
     930:	2205c83a 	sub	r2,r4,r8
     934:	f800283a 	ret

00000938 <__sprint_r>:
     938:	30800217 	ldw	r2,8(r6)
     93c:	defffe04 	addi	sp,sp,-8
     940:	dc000015 	stw	r16,0(sp)
     944:	dfc00115 	stw	ra,4(sp)
     948:	3021883a 	mov	r16,r6
     94c:	0007883a 	mov	r3,zero
     950:	1000061e 	bne	r2,zero,96c <__sprint_r+0x34>
     954:	1805883a 	mov	r2,r3
     958:	30000115 	stw	zero,4(r6)
     95c:	dfc00117 	ldw	ra,4(sp)
     960:	dc000017 	ldw	r16,0(sp)
     964:	dec00204 	addi	sp,sp,8
     968:	f800283a 	ret
     96c:	0004a980 	call	4a98 <__sfvwrite_r>
     970:	1007883a 	mov	r3,r2
     974:	1805883a 	mov	r2,r3
     978:	80000115 	stw	zero,4(r16)
     97c:	80000215 	stw	zero,8(r16)
     980:	dfc00117 	ldw	ra,4(sp)
     984:	dc000017 	ldw	r16,0(sp)
     988:	dec00204 	addi	sp,sp,8
     98c:	f800283a 	ret

00000990 <___vfprintf_internal_r>:
     990:	defea404 	addi	sp,sp,-1392
     994:	dd815815 	stw	r22,1376(sp)
     998:	dc015215 	stw	r16,1352(sp)
     99c:	d9c15115 	stw	r7,1348(sp)
     9a0:	dfc15b15 	stw	ra,1388(sp)
     9a4:	df015a15 	stw	fp,1384(sp)
     9a8:	ddc15915 	stw	r23,1380(sp)
     9ac:	dd415715 	stw	r21,1372(sp)
     9b0:	dd015615 	stw	r20,1368(sp)
     9b4:	dcc15515 	stw	r19,1364(sp)
     9b8:	dc815415 	stw	r18,1360(sp)
     9bc:	dc415315 	stw	r17,1356(sp)
     9c0:	282d883a 	mov	r22,r5
     9c4:	3021883a 	mov	r16,r6
     9c8:	d9014f15 	stw	r4,1340(sp)
     9cc:	00050bc0 	call	50bc <_localeconv_r>
     9d0:	10800017 	ldw	r2,0(r2)
     9d4:	d9c15117 	ldw	r7,1348(sp)
     9d8:	d8814915 	stw	r2,1316(sp)
     9dc:	d8814f17 	ldw	r2,1340(sp)
     9e0:	10000226 	beq	r2,zero,9ec <___vfprintf_internal_r+0x5c>
     9e4:	10800e17 	ldw	r2,56(r2)
     9e8:	10020d26 	beq	r2,zero,1220 <___vfprintf_internal_r+0x890>
     9ec:	b080030b 	ldhu	r2,12(r22)
     9f0:	1080020c 	andi	r2,r2,8
     9f4:	10020e26 	beq	r2,zero,1230 <___vfprintf_internal_r+0x8a0>
     9f8:	b0800417 	ldw	r2,16(r22)
     9fc:	10020c26 	beq	r2,zero,1230 <___vfprintf_internal_r+0x8a0>
     a00:	b200030b 	ldhu	r8,12(r22)
     a04:	00800284 	movi	r2,10
     a08:	40c0068c 	andi	r3,r8,26
     a0c:	18802f1e 	bne	r3,r2,acc <___vfprintf_internal_r+0x13c>
     a10:	b080038f 	ldh	r2,14(r22)
     a14:	10002d16 	blt	r2,zero,acc <___vfprintf_internal_r+0x13c>
     a18:	b240038b 	ldhu	r9,14(r22)
     a1c:	b2800717 	ldw	r10,28(r22)
     a20:	b2c00917 	ldw	r11,36(r22)
     a24:	d9014f17 	ldw	r4,1340(sp)
     a28:	dc402904 	addi	r17,sp,164
     a2c:	d8804004 	addi	r2,sp,256
     a30:	00c10004 	movi	r3,1024
     a34:	423fff4c 	andi	r8,r8,65533
     a38:	800d883a 	mov	r6,r16
     a3c:	880b883a 	mov	r5,r17
     a40:	da002c0d 	sth	r8,176(sp)
     a44:	da402c8d 	sth	r9,178(sp)
     a48:	da803015 	stw	r10,192(sp)
     a4c:	dac03215 	stw	r11,200(sp)
     a50:	d8802d15 	stw	r2,180(sp)
     a54:	d8c02e15 	stw	r3,184(sp)
     a58:	d8802915 	stw	r2,164(sp)
     a5c:	d8c02b15 	stw	r3,172(sp)
     a60:	d8002f15 	stw	zero,188(sp)
     a64:	00009900 	call	990 <___vfprintf_internal_r>
     a68:	d8814b15 	stw	r2,1324(sp)
     a6c:	10000416 	blt	r2,zero,a80 <___vfprintf_internal_r+0xf0>
     a70:	d9014f17 	ldw	r4,1340(sp)
     a74:	880b883a 	mov	r5,r17
     a78:	00041680 	call	4168 <_fflush_r>
     a7c:	1002321e 	bne	r2,zero,1348 <___vfprintf_internal_r+0x9b8>
     a80:	d8802c0b 	ldhu	r2,176(sp)
     a84:	1080100c 	andi	r2,r2,64
     a88:	10000326 	beq	r2,zero,a98 <___vfprintf_internal_r+0x108>
     a8c:	b080030b 	ldhu	r2,12(r22)
     a90:	10801014 	ori	r2,r2,64
     a94:	b080030d 	sth	r2,12(r22)
     a98:	d8814b17 	ldw	r2,1324(sp)
     a9c:	dfc15b17 	ldw	ra,1388(sp)
     aa0:	df015a17 	ldw	fp,1384(sp)
     aa4:	ddc15917 	ldw	r23,1380(sp)
     aa8:	dd815817 	ldw	r22,1376(sp)
     aac:	dd415717 	ldw	r21,1372(sp)
     ab0:	dd015617 	ldw	r20,1368(sp)
     ab4:	dcc15517 	ldw	r19,1364(sp)
     ab8:	dc815417 	ldw	r18,1360(sp)
     abc:	dc415317 	ldw	r17,1356(sp)
     ac0:	dc015217 	ldw	r16,1352(sp)
     ac4:	dec15c04 	addi	sp,sp,1392
     ac8:	f800283a 	ret
     acc:	0005883a 	mov	r2,zero
     ad0:	0007883a 	mov	r3,zero
     ad4:	dd401904 	addi	r21,sp,100
     ad8:	d8814215 	stw	r2,1288(sp)
     adc:	802f883a 	mov	r23,r16
     ae0:	d8c14315 	stw	r3,1292(sp)
     ae4:	d8014b15 	stw	zero,1324(sp)
     ae8:	d8014815 	stw	zero,1312(sp)
     aec:	d8014415 	stw	zero,1296(sp)
     af0:	d8014715 	stw	zero,1308(sp)
     af4:	dd400c15 	stw	r21,48(sp)
     af8:	d8000e15 	stw	zero,56(sp)
     afc:	d8000d15 	stw	zero,52(sp)
     b00:	b8800007 	ldb	r2,0(r23)
     b04:	10001926 	beq	r2,zero,b6c <___vfprintf_internal_r+0x1dc>
     b08:	00c00944 	movi	r3,37
     b0c:	10c01726 	beq	r2,r3,b6c <___vfprintf_internal_r+0x1dc>
     b10:	b821883a 	mov	r16,r23
     b14:	00000106 	br	b1c <___vfprintf_internal_r+0x18c>
     b18:	10c00326 	beq	r2,r3,b28 <___vfprintf_internal_r+0x198>
     b1c:	84000044 	addi	r16,r16,1
     b20:	80800007 	ldb	r2,0(r16)
     b24:	103ffc1e 	bne	r2,zero,b18 <___vfprintf_internal_r+0x188>
     b28:	85e7c83a 	sub	r19,r16,r23
     b2c:	98000e26 	beq	r19,zero,b68 <___vfprintf_internal_r+0x1d8>
     b30:	dc800e17 	ldw	r18,56(sp)
     b34:	dc400d17 	ldw	r17,52(sp)
     b38:	008001c4 	movi	r2,7
     b3c:	94e5883a 	add	r18,r18,r19
     b40:	8c400044 	addi	r17,r17,1
     b44:	adc00015 	stw	r23,0(r21)
     b48:	dc800e15 	stw	r18,56(sp)
     b4c:	acc00115 	stw	r19,4(r21)
     b50:	dc400d15 	stw	r17,52(sp)
     b54:	14428b16 	blt	r2,r17,1584 <___vfprintf_internal_r+0xbf4>
     b58:	ad400204 	addi	r21,r21,8
     b5c:	d9014b17 	ldw	r4,1324(sp)
     b60:	24c9883a 	add	r4,r4,r19
     b64:	d9014b15 	stw	r4,1324(sp)
     b68:	802f883a 	mov	r23,r16
     b6c:	b8800007 	ldb	r2,0(r23)
     b70:	10013c26 	beq	r2,zero,1064 <___vfprintf_internal_r+0x6d4>
     b74:	bdc00044 	addi	r23,r23,1
     b78:	d8000405 	stb	zero,16(sp)
     b7c:	b8c00007 	ldb	r3,0(r23)
     b80:	04ffffc4 	movi	r19,-1
     b84:	d8014c15 	stw	zero,1328(sp)
     b88:	d8014a15 	stw	zero,1320(sp)
     b8c:	d8c14d15 	stw	r3,1332(sp)
     b90:	bdc00044 	addi	r23,r23,1
     b94:	d9414d17 	ldw	r5,1332(sp)
     b98:	00801604 	movi	r2,88
     b9c:	28fff804 	addi	r3,r5,-32
     ba0:	10c06036 	bltu	r2,r3,d24 <___vfprintf_internal_r+0x394>
     ba4:	18c5883a 	add	r2,r3,r3
     ba8:	1085883a 	add	r2,r2,r2
     bac:	00c00034 	movhi	r3,0
     bb0:	18c2f004 	addi	r3,r3,3008
     bb4:	10c5883a 	add	r2,r2,r3
     bb8:	11000017 	ldw	r4,0(r2)
     bbc:	2000683a 	jmp	r4
     bc0:	00001b34 	movhi	zero,108
     bc4:	00000d24 	muli	zero,zero,52
     bc8:	00000d24 	muli	zero,zero,52
     bcc:	00001b20 	cmpeqi	zero,zero,108
     bd0:	00000d24 	muli	zero,zero,52
     bd4:	00000d24 	muli	zero,zero,52
     bd8:	00000d24 	muli	zero,zero,52
     bdc:	00000d24 	muli	zero,zero,52
     be0:	00000d24 	muli	zero,zero,52
     be4:	00000d24 	muli	zero,zero,52
     be8:	00001900 	call	190 <alt_irq_handler+0xa4>
     bec:	00001b10 	cmplti	zero,zero,108
     bf0:	00000d24 	muli	zero,zero,52
     bf4:	00001918 	cmpnei	zero,zero,100
     bf8:	00001bac 	andhi	zero,zero,110
     bfc:	00000d24 	muli	zero,zero,52
     c00:	00001b98 	cmpnei	zero,zero,110
     c04:	00001b60 	cmpeqi	zero,zero,109
     c08:	00001b60 	cmpeqi	zero,zero,109
     c0c:	00001b60 	cmpeqi	zero,zero,109
     c10:	00001b60 	cmpeqi	zero,zero,109
     c14:	00001b60 	cmpeqi	zero,zero,109
     c18:	00001b60 	cmpeqi	zero,zero,109
     c1c:	00001b60 	cmpeqi	zero,zero,109
     c20:	00001b60 	cmpeqi	zero,zero,109
     c24:	00001b60 	cmpeqi	zero,zero,109
     c28:	00000d24 	muli	zero,zero,52
     c2c:	00000d24 	muli	zero,zero,52
     c30:	00000d24 	muli	zero,zero,52
     c34:	00000d24 	muli	zero,zero,52
     c38:	00000d24 	muli	zero,zero,52
     c3c:	00000d24 	muli	zero,zero,52
     c40:	00000d24 	muli	zero,zero,52
     c44:	00000d24 	muli	zero,zero,52
     c48:	00000d24 	muli	zero,zero,52
     c4c:	00000d24 	muli	zero,zero,52
     c50:	0000137c 	xorhi	zero,zero,77
     c54:	000019e8 	cmpgeui	zero,zero,103
     c58:	00000d24 	muli	zero,zero,52
     c5c:	000019e8 	cmpgeui	zero,zero,103
     c60:	00000d24 	muli	zero,zero,52
     c64:	00000d24 	muli	zero,zero,52
     c68:	00000d24 	muli	zero,zero,52
     c6c:	00000d24 	muli	zero,zero,52
     c70:	00001b4c 	andi	zero,zero,109
     c74:	00000d24 	muli	zero,zero,52
     c78:	00000d24 	muli	zero,zero,52
     c7c:	00001430 	cmpltui	zero,zero,80
     c80:	00000d24 	muli	zero,zero,52
     c84:	00000d24 	muli	zero,zero,52
     c88:	00000d24 	muli	zero,zero,52
     c8c:	00000d24 	muli	zero,zero,52
     c90:	00000d24 	muli	zero,zero,52
     c94:	0000147c 	xorhi	zero,zero,81
     c98:	00000d24 	muli	zero,zero,52
     c9c:	00000d24 	muli	zero,zero,52
     ca0:	00001a9c 	xori	zero,zero,106
     ca4:	00000d24 	muli	zero,zero,52
     ca8:	00000d24 	muli	zero,zero,52
     cac:	00000d24 	muli	zero,zero,52
     cb0:	00000d24 	muli	zero,zero,52
     cb4:	00000d24 	muli	zero,zero,52
     cb8:	00000d24 	muli	zero,zero,52
     cbc:	00000d24 	muli	zero,zero,52
     cc0:	00000d24 	muli	zero,zero,52
     cc4:	00000d24 	muli	zero,zero,52
     cc8:	00000d24 	muli	zero,zero,52
     ccc:	00001a70 	cmpltui	zero,zero,105
     cd0:	00001388 	cmpgei	zero,zero,78
     cd4:	000019e8 	cmpgeui	zero,zero,103
     cd8:	000019e8 	cmpgeui	zero,zero,103
     cdc:	000019e8 	cmpgeui	zero,zero,103
     ce0:	000019d4 	movui	zero,103
     ce4:	00001388 	cmpgei	zero,zero,78
     ce8:	00000d24 	muli	zero,zero,52
     cec:	00000d24 	muli	zero,zero,52
     cf0:	0000195c 	xori	zero,zero,101
     cf4:	00000d24 	muli	zero,zero,52
     cf8:	0000192c 	andhi	zero,zero,100
     cfc:	0000143c 	xorhi	zero,zero,80
     d00:	0000198c 	andi	zero,zero,102
     d04:	00001978 	rdprs	zero,zero,101
     d08:	00000d24 	muli	zero,zero,52
     d0c:	00001c08 	cmpgei	zero,zero,112
     d10:	00000d24 	muli	zero,zero,52
     d14:	00001488 	cmpgei	zero,zero,82
     d18:	00000d24 	muli	zero,zero,52
     d1c:	00000d24 	muli	zero,zero,52
     d20:	00001b00 	call	1b0 <alt_irq_handler+0xc4>
     d24:	d9014d17 	ldw	r4,1332(sp)
     d28:	2000ce26 	beq	r4,zero,1064 <___vfprintf_internal_r+0x6d4>
     d2c:	01400044 	movi	r5,1
     d30:	d9800f04 	addi	r6,sp,60
     d34:	d9c14015 	stw	r7,1280(sp)
     d38:	d9414515 	stw	r5,1300(sp)
     d3c:	d9814115 	stw	r6,1284(sp)
     d40:	280f883a 	mov	r7,r5
     d44:	d9000f05 	stb	r4,60(sp)
     d48:	d8000405 	stb	zero,16(sp)
     d4c:	d8014615 	stw	zero,1304(sp)
     d50:	d8c14c17 	ldw	r3,1328(sp)
     d54:	1880008c 	andi	r2,r3,2
     d58:	1005003a 	cmpeq	r2,r2,zero
     d5c:	d8815015 	stw	r2,1344(sp)
     d60:	1000031e 	bne	r2,zero,d70 <___vfprintf_internal_r+0x3e0>
     d64:	d9014517 	ldw	r4,1300(sp)
     d68:	21000084 	addi	r4,r4,2
     d6c:	d9014515 	stw	r4,1300(sp)
     d70:	d9414c17 	ldw	r5,1328(sp)
     d74:	2940210c 	andi	r5,r5,132
     d78:	d9414e15 	stw	r5,1336(sp)
     d7c:	28002d1e 	bne	r5,zero,e34 <___vfprintf_internal_r+0x4a4>
     d80:	d9814a17 	ldw	r6,1320(sp)
     d84:	d8814517 	ldw	r2,1300(sp)
     d88:	30a1c83a 	sub	r16,r6,r2
     d8c:	0400290e 	bge	zero,r16,e34 <___vfprintf_internal_r+0x4a4>
     d90:	00800404 	movi	r2,16
     d94:	1404580e 	bge	r2,r16,1ef8 <___vfprintf_internal_r+0x1568>
     d98:	dc800e17 	ldw	r18,56(sp)
     d9c:	dc400d17 	ldw	r17,52(sp)
     da0:	1027883a 	mov	r19,r2
     da4:	07000074 	movhi	fp,1
     da8:	e7003084 	addi	fp,fp,194
     dac:	050001c4 	movi	r20,7
     db0:	00000306 	br	dc0 <___vfprintf_internal_r+0x430>
     db4:	843ffc04 	addi	r16,r16,-16
     db8:	ad400204 	addi	r21,r21,8
     dbc:	9c00130e 	bge	r19,r16,e0c <___vfprintf_internal_r+0x47c>
     dc0:	94800404 	addi	r18,r18,16
     dc4:	8c400044 	addi	r17,r17,1
     dc8:	af000015 	stw	fp,0(r21)
     dcc:	acc00115 	stw	r19,4(r21)
     dd0:	dc800e15 	stw	r18,56(sp)
     dd4:	dc400d15 	stw	r17,52(sp)
     dd8:	a47ff60e 	bge	r20,r17,db4 <___vfprintf_internal_r+0x424>
     ddc:	d9014f17 	ldw	r4,1340(sp)
     de0:	b00b883a 	mov	r5,r22
     de4:	d9800c04 	addi	r6,sp,48
     de8:	d9c15115 	stw	r7,1348(sp)
     dec:	00009380 	call	938 <__sprint_r>
     df0:	d9c15117 	ldw	r7,1348(sp)
     df4:	10009e1e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
     df8:	843ffc04 	addi	r16,r16,-16
     dfc:	dc800e17 	ldw	r18,56(sp)
     e00:	dc400d17 	ldw	r17,52(sp)
     e04:	dd401904 	addi	r21,sp,100
     e08:	9c3fed16 	blt	r19,r16,dc0 <___vfprintf_internal_r+0x430>
     e0c:	9425883a 	add	r18,r18,r16
     e10:	8c400044 	addi	r17,r17,1
     e14:	008001c4 	movi	r2,7
     e18:	af000015 	stw	fp,0(r21)
     e1c:	ac000115 	stw	r16,4(r21)
     e20:	dc800e15 	stw	r18,56(sp)
     e24:	dc400d15 	stw	r17,52(sp)
     e28:	1441f516 	blt	r2,r17,1600 <___vfprintf_internal_r+0xc70>
     e2c:	ad400204 	addi	r21,r21,8
     e30:	00000206 	br	e3c <___vfprintf_internal_r+0x4ac>
     e34:	dc800e17 	ldw	r18,56(sp)
     e38:	dc400d17 	ldw	r17,52(sp)
     e3c:	d8800407 	ldb	r2,16(sp)
     e40:	10000b26 	beq	r2,zero,e70 <___vfprintf_internal_r+0x4e0>
     e44:	00800044 	movi	r2,1
     e48:	94800044 	addi	r18,r18,1
     e4c:	8c400044 	addi	r17,r17,1
     e50:	a8800115 	stw	r2,4(r21)
     e54:	d8c00404 	addi	r3,sp,16
     e58:	008001c4 	movi	r2,7
     e5c:	a8c00015 	stw	r3,0(r21)
     e60:	dc800e15 	stw	r18,56(sp)
     e64:	dc400d15 	stw	r17,52(sp)
     e68:	1441da16 	blt	r2,r17,15d4 <___vfprintf_internal_r+0xc44>
     e6c:	ad400204 	addi	r21,r21,8
     e70:	d9015017 	ldw	r4,1344(sp)
     e74:	20000b1e 	bne	r4,zero,ea4 <___vfprintf_internal_r+0x514>
     e78:	d8800444 	addi	r2,sp,17
     e7c:	94800084 	addi	r18,r18,2
     e80:	8c400044 	addi	r17,r17,1
     e84:	a8800015 	stw	r2,0(r21)
     e88:	00c00084 	movi	r3,2
     e8c:	008001c4 	movi	r2,7
     e90:	a8c00115 	stw	r3,4(r21)
     e94:	dc800e15 	stw	r18,56(sp)
     e98:	dc400d15 	stw	r17,52(sp)
     e9c:	1441c216 	blt	r2,r17,15a8 <___vfprintf_internal_r+0xc18>
     ea0:	ad400204 	addi	r21,r21,8
     ea4:	d9414e17 	ldw	r5,1336(sp)
     ea8:	00802004 	movi	r2,128
     eac:	2880b126 	beq	r5,r2,1174 <___vfprintf_internal_r+0x7e4>
     eb0:	d8c14617 	ldw	r3,1304(sp)
     eb4:	19e1c83a 	sub	r16,r3,r7
     eb8:	0400260e 	bge	zero,r16,f54 <___vfprintf_internal_r+0x5c4>
     ebc:	00800404 	movi	r2,16
     ec0:	1403c90e 	bge	r2,r16,1de8 <___vfprintf_internal_r+0x1458>
     ec4:	1027883a 	mov	r19,r2
     ec8:	07000074 	movhi	fp,1
     ecc:	e7002c84 	addi	fp,fp,178
     ed0:	050001c4 	movi	r20,7
     ed4:	00000306 	br	ee4 <___vfprintf_internal_r+0x554>
     ed8:	843ffc04 	addi	r16,r16,-16
     edc:	ad400204 	addi	r21,r21,8
     ee0:	9c00130e 	bge	r19,r16,f30 <___vfprintf_internal_r+0x5a0>
     ee4:	94800404 	addi	r18,r18,16
     ee8:	8c400044 	addi	r17,r17,1
     eec:	af000015 	stw	fp,0(r21)
     ef0:	acc00115 	stw	r19,4(r21)
     ef4:	dc800e15 	stw	r18,56(sp)
     ef8:	dc400d15 	stw	r17,52(sp)
     efc:	a47ff60e 	bge	r20,r17,ed8 <___vfprintf_internal_r+0x548>
     f00:	d9014f17 	ldw	r4,1340(sp)
     f04:	b00b883a 	mov	r5,r22
     f08:	d9800c04 	addi	r6,sp,48
     f0c:	d9c15115 	stw	r7,1348(sp)
     f10:	00009380 	call	938 <__sprint_r>
     f14:	d9c15117 	ldw	r7,1348(sp)
     f18:	1000551e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
     f1c:	843ffc04 	addi	r16,r16,-16
     f20:	dc800e17 	ldw	r18,56(sp)
     f24:	dc400d17 	ldw	r17,52(sp)
     f28:	dd401904 	addi	r21,sp,100
     f2c:	9c3fed16 	blt	r19,r16,ee4 <___vfprintf_internal_r+0x554>
     f30:	9425883a 	add	r18,r18,r16
     f34:	8c400044 	addi	r17,r17,1
     f38:	008001c4 	movi	r2,7
     f3c:	af000015 	stw	fp,0(r21)
     f40:	ac000115 	stw	r16,4(r21)
     f44:	dc800e15 	stw	r18,56(sp)
     f48:	dc400d15 	stw	r17,52(sp)
     f4c:	14418216 	blt	r2,r17,1558 <___vfprintf_internal_r+0xbc8>
     f50:	ad400204 	addi	r21,r21,8
     f54:	d9014c17 	ldw	r4,1328(sp)
     f58:	2080400c 	andi	r2,r4,256
     f5c:	10004a1e 	bne	r2,zero,1088 <___vfprintf_internal_r+0x6f8>
     f60:	d9414117 	ldw	r5,1284(sp)
     f64:	91e5883a 	add	r18,r18,r7
     f68:	8c400044 	addi	r17,r17,1
     f6c:	008001c4 	movi	r2,7
     f70:	a9400015 	stw	r5,0(r21)
     f74:	a9c00115 	stw	r7,4(r21)
     f78:	dc800e15 	stw	r18,56(sp)
     f7c:	dc400d15 	stw	r17,52(sp)
     f80:	14416716 	blt	r2,r17,1520 <___vfprintf_internal_r+0xb90>
     f84:	a8c00204 	addi	r3,r21,8
     f88:	d9814c17 	ldw	r6,1328(sp)
     f8c:	3080010c 	andi	r2,r6,4
     f90:	10002826 	beq	r2,zero,1034 <___vfprintf_internal_r+0x6a4>
     f94:	d8814a17 	ldw	r2,1320(sp)
     f98:	d9014517 	ldw	r4,1300(sp)
     f9c:	1121c83a 	sub	r16,r2,r4
     fa0:	0400240e 	bge	zero,r16,1034 <___vfprintf_internal_r+0x6a4>
     fa4:	00800404 	movi	r2,16
     fa8:	14044f0e 	bge	r2,r16,20e8 <___vfprintf_internal_r+0x1758>
     fac:	dc400d17 	ldw	r17,52(sp)
     fb0:	1027883a 	mov	r19,r2
     fb4:	07000074 	movhi	fp,1
     fb8:	e7003084 	addi	fp,fp,194
     fbc:	050001c4 	movi	r20,7
     fc0:	00000306 	br	fd0 <___vfprintf_internal_r+0x640>
     fc4:	843ffc04 	addi	r16,r16,-16
     fc8:	18c00204 	addi	r3,r3,8
     fcc:	9c00110e 	bge	r19,r16,1014 <___vfprintf_internal_r+0x684>
     fd0:	94800404 	addi	r18,r18,16
     fd4:	8c400044 	addi	r17,r17,1
     fd8:	1f000015 	stw	fp,0(r3)
     fdc:	1cc00115 	stw	r19,4(r3)
     fe0:	dc800e15 	stw	r18,56(sp)
     fe4:	dc400d15 	stw	r17,52(sp)
     fe8:	a47ff60e 	bge	r20,r17,fc4 <___vfprintf_internal_r+0x634>
     fec:	d9014f17 	ldw	r4,1340(sp)
     ff0:	b00b883a 	mov	r5,r22
     ff4:	d9800c04 	addi	r6,sp,48
     ff8:	00009380 	call	938 <__sprint_r>
     ffc:	10001c1e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
    1000:	843ffc04 	addi	r16,r16,-16
    1004:	dc800e17 	ldw	r18,56(sp)
    1008:	dc400d17 	ldw	r17,52(sp)
    100c:	d8c01904 	addi	r3,sp,100
    1010:	9c3fef16 	blt	r19,r16,fd0 <___vfprintf_internal_r+0x640>
    1014:	9425883a 	add	r18,r18,r16
    1018:	8c400044 	addi	r17,r17,1
    101c:	008001c4 	movi	r2,7
    1020:	1f000015 	stw	fp,0(r3)
    1024:	1c000115 	stw	r16,4(r3)
    1028:	dc800e15 	stw	r18,56(sp)
    102c:	dc400d15 	stw	r17,52(sp)
    1030:	1440cb16 	blt	r2,r17,1360 <___vfprintf_internal_r+0x9d0>
    1034:	d8814a17 	ldw	r2,1320(sp)
    1038:	d9414517 	ldw	r5,1300(sp)
    103c:	1140010e 	bge	r2,r5,1044 <___vfprintf_internal_r+0x6b4>
    1040:	2805883a 	mov	r2,r5
    1044:	d9814b17 	ldw	r6,1324(sp)
    1048:	308d883a 	add	r6,r6,r2
    104c:	d9814b15 	stw	r6,1324(sp)
    1050:	90013b1e 	bne	r18,zero,1540 <___vfprintf_internal_r+0xbb0>
    1054:	d9c14017 	ldw	r7,1280(sp)
    1058:	dd401904 	addi	r21,sp,100
    105c:	d8000d15 	stw	zero,52(sp)
    1060:	003ea706 	br	b00 <___vfprintf_internal_r+0x170>
    1064:	d8800e17 	ldw	r2,56(sp)
    1068:	10053f1e 	bne	r2,zero,2568 <___vfprintf_internal_r+0x1bd8>
    106c:	d8000d15 	stw	zero,52(sp)
    1070:	b080030b 	ldhu	r2,12(r22)
    1074:	1080100c 	andi	r2,r2,64
    1078:	103e8726 	beq	r2,zero,a98 <___vfprintf_internal_r+0x108>
    107c:	00bfffc4 	movi	r2,-1
    1080:	d8814b15 	stw	r2,1324(sp)
    1084:	003e8406 	br	a98 <___vfprintf_internal_r+0x108>
    1088:	d9814d17 	ldw	r6,1332(sp)
    108c:	00801944 	movi	r2,101
    1090:	11806e16 	blt	r2,r6,124c <___vfprintf_internal_r+0x8bc>
    1094:	d9414717 	ldw	r5,1308(sp)
    1098:	00c00044 	movi	r3,1
    109c:	1943430e 	bge	r3,r5,1dac <___vfprintf_internal_r+0x141c>
    10a0:	d8814117 	ldw	r2,1284(sp)
    10a4:	94800044 	addi	r18,r18,1
    10a8:	8c400044 	addi	r17,r17,1
    10ac:	a8800015 	stw	r2,0(r21)
    10b0:	008001c4 	movi	r2,7
    10b4:	a8c00115 	stw	r3,4(r21)
    10b8:	dc800e15 	stw	r18,56(sp)
    10bc:	dc400d15 	stw	r17,52(sp)
    10c0:	1441ca16 	blt	r2,r17,17ec <___vfprintf_internal_r+0xe5c>
    10c4:	a8c00204 	addi	r3,r21,8
    10c8:	d9014917 	ldw	r4,1316(sp)
    10cc:	00800044 	movi	r2,1
    10d0:	94800044 	addi	r18,r18,1
    10d4:	8c400044 	addi	r17,r17,1
    10d8:	18800115 	stw	r2,4(r3)
    10dc:	008001c4 	movi	r2,7
    10e0:	19000015 	stw	r4,0(r3)
    10e4:	dc800e15 	stw	r18,56(sp)
    10e8:	dc400d15 	stw	r17,52(sp)
    10ec:	1441b616 	blt	r2,r17,17c8 <___vfprintf_internal_r+0xe38>
    10f0:	1cc00204 	addi	r19,r3,8
    10f4:	d9014217 	ldw	r4,1288(sp)
    10f8:	d9414317 	ldw	r5,1292(sp)
    10fc:	000d883a 	mov	r6,zero
    1100:	000f883a 	mov	r7,zero
    1104:	00091e00 	call	91e0 <__nedf2>
    1108:	10017426 	beq	r2,zero,16dc <___vfprintf_internal_r+0xd4c>
    110c:	d9414717 	ldw	r5,1308(sp)
    1110:	d9814117 	ldw	r6,1284(sp)
    1114:	8c400044 	addi	r17,r17,1
    1118:	2c85883a 	add	r2,r5,r18
    111c:	14bfffc4 	addi	r18,r2,-1
    1120:	28bfffc4 	addi	r2,r5,-1
    1124:	30c00044 	addi	r3,r6,1
    1128:	98800115 	stw	r2,4(r19)
    112c:	008001c4 	movi	r2,7
    1130:	98c00015 	stw	r3,0(r19)
    1134:	dc800e15 	stw	r18,56(sp)
    1138:	dc400d15 	stw	r17,52(sp)
    113c:	14418e16 	blt	r2,r17,1778 <___vfprintf_internal_r+0xde8>
    1140:	9cc00204 	addi	r19,r19,8
    1144:	d9414817 	ldw	r5,1312(sp)
    1148:	d8800804 	addi	r2,sp,32
    114c:	8c400044 	addi	r17,r17,1
    1150:	9165883a 	add	r18,r18,r5
    1154:	98800015 	stw	r2,0(r19)
    1158:	008001c4 	movi	r2,7
    115c:	99400115 	stw	r5,4(r19)
    1160:	dc800e15 	stw	r18,56(sp)
    1164:	dc400d15 	stw	r17,52(sp)
    1168:	1440ed16 	blt	r2,r17,1520 <___vfprintf_internal_r+0xb90>
    116c:	98c00204 	addi	r3,r19,8
    1170:	003f8506 	br	f88 <___vfprintf_internal_r+0x5f8>
    1174:	d9814a17 	ldw	r6,1320(sp)
    1178:	d8814517 	ldw	r2,1300(sp)
    117c:	30a1c83a 	sub	r16,r6,r2
    1180:	043f4b0e 	bge	zero,r16,eb0 <___vfprintf_internal_r+0x520>
    1184:	00800404 	movi	r2,16
    1188:	1404340e 	bge	r2,r16,225c <___vfprintf_internal_r+0x18cc>
    118c:	1027883a 	mov	r19,r2
    1190:	07000074 	movhi	fp,1
    1194:	e7002c84 	addi	fp,fp,178
    1198:	050001c4 	movi	r20,7
    119c:	00000306 	br	11ac <___vfprintf_internal_r+0x81c>
    11a0:	843ffc04 	addi	r16,r16,-16
    11a4:	ad400204 	addi	r21,r21,8
    11a8:	9c00130e 	bge	r19,r16,11f8 <___vfprintf_internal_r+0x868>
    11ac:	94800404 	addi	r18,r18,16
    11b0:	8c400044 	addi	r17,r17,1
    11b4:	af000015 	stw	fp,0(r21)
    11b8:	acc00115 	stw	r19,4(r21)
    11bc:	dc800e15 	stw	r18,56(sp)
    11c0:	dc400d15 	stw	r17,52(sp)
    11c4:	a47ff60e 	bge	r20,r17,11a0 <___vfprintf_internal_r+0x810>
    11c8:	d9014f17 	ldw	r4,1340(sp)
    11cc:	b00b883a 	mov	r5,r22
    11d0:	d9800c04 	addi	r6,sp,48
    11d4:	d9c15115 	stw	r7,1348(sp)
    11d8:	00009380 	call	938 <__sprint_r>
    11dc:	d9c15117 	ldw	r7,1348(sp)
    11e0:	103fa31e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
    11e4:	843ffc04 	addi	r16,r16,-16
    11e8:	dc800e17 	ldw	r18,56(sp)
    11ec:	dc400d17 	ldw	r17,52(sp)
    11f0:	dd401904 	addi	r21,sp,100
    11f4:	9c3fed16 	blt	r19,r16,11ac <___vfprintf_internal_r+0x81c>
    11f8:	9425883a 	add	r18,r18,r16
    11fc:	8c400044 	addi	r17,r17,1
    1200:	008001c4 	movi	r2,7
    1204:	af000015 	stw	fp,0(r21)
    1208:	ac000115 	stw	r16,4(r21)
    120c:	dc800e15 	stw	r18,56(sp)
    1210:	dc400d15 	stw	r17,52(sp)
    1214:	14416116 	blt	r2,r17,179c <___vfprintf_internal_r+0xe0c>
    1218:	ad400204 	addi	r21,r21,8
    121c:	003f2406 	br	eb0 <___vfprintf_internal_r+0x520>
    1220:	d9014f17 	ldw	r4,1340(sp)
    1224:	00044000 	call	4400 <__sinit>
    1228:	d9c15117 	ldw	r7,1348(sp)
    122c:	003def06 	br	9ec <___vfprintf_internal_r+0x5c>
    1230:	d9014f17 	ldw	r4,1340(sp)
    1234:	b00b883a 	mov	r5,r22
    1238:	d9c15115 	stw	r7,1348(sp)
    123c:	00028600 	call	2860 <__swsetup_r>
    1240:	d9c15117 	ldw	r7,1348(sp)
    1244:	103dee26 	beq	r2,zero,a00 <___vfprintf_internal_r+0x70>
    1248:	003f8c06 	br	107c <___vfprintf_internal_r+0x6ec>
    124c:	d9014217 	ldw	r4,1288(sp)
    1250:	d9414317 	ldw	r5,1292(sp)
    1254:	000d883a 	mov	r6,zero
    1258:	000f883a 	mov	r7,zero
    125c:	00091580 	call	9158 <__eqdf2>
    1260:	1000f21e 	bne	r2,zero,162c <___vfprintf_internal_r+0xc9c>
    1264:	00800074 	movhi	r2,1
    1268:	10802c04 	addi	r2,r2,176
    126c:	94800044 	addi	r18,r18,1
    1270:	8c400044 	addi	r17,r17,1
    1274:	a8800015 	stw	r2,0(r21)
    1278:	00c00044 	movi	r3,1
    127c:	008001c4 	movi	r2,7
    1280:	a8c00115 	stw	r3,4(r21)
    1284:	dc800e15 	stw	r18,56(sp)
    1288:	dc400d15 	stw	r17,52(sp)
    128c:	1442fa16 	blt	r2,r17,1e78 <___vfprintf_internal_r+0x14e8>
    1290:	a8c00204 	addi	r3,r21,8
    1294:	d8800517 	ldw	r2,20(sp)
    1298:	d9014717 	ldw	r4,1308(sp)
    129c:	11015c0e 	bge	r2,r4,1810 <___vfprintf_internal_r+0xe80>
    12a0:	dc400d17 	ldw	r17,52(sp)
    12a4:	d9814917 	ldw	r6,1316(sp)
    12a8:	00800044 	movi	r2,1
    12ac:	94800044 	addi	r18,r18,1
    12b0:	8c400044 	addi	r17,r17,1
    12b4:	18800115 	stw	r2,4(r3)
    12b8:	008001c4 	movi	r2,7
    12bc:	19800015 	stw	r6,0(r3)
    12c0:	dc800e15 	stw	r18,56(sp)
    12c4:	dc400d15 	stw	r17,52(sp)
    12c8:	14431016 	blt	r2,r17,1f0c <___vfprintf_internal_r+0x157c>
    12cc:	18c00204 	addi	r3,r3,8
    12d0:	d8814717 	ldw	r2,1308(sp)
    12d4:	143fffc4 	addi	r16,r2,-1
    12d8:	043f2b0e 	bge	zero,r16,f88 <___vfprintf_internal_r+0x5f8>
    12dc:	00800404 	movi	r2,16
    12e0:	1402a20e 	bge	r2,r16,1d6c <___vfprintf_internal_r+0x13dc>
    12e4:	dc400d17 	ldw	r17,52(sp)
    12e8:	1027883a 	mov	r19,r2
    12ec:	07000074 	movhi	fp,1
    12f0:	e7002c84 	addi	fp,fp,178
    12f4:	050001c4 	movi	r20,7
    12f8:	00000306 	br	1308 <___vfprintf_internal_r+0x978>
    12fc:	18c00204 	addi	r3,r3,8
    1300:	843ffc04 	addi	r16,r16,-16
    1304:	9c029c0e 	bge	r19,r16,1d78 <___vfprintf_internal_r+0x13e8>
    1308:	94800404 	addi	r18,r18,16
    130c:	8c400044 	addi	r17,r17,1
    1310:	1f000015 	stw	fp,0(r3)
    1314:	1cc00115 	stw	r19,4(r3)
    1318:	dc800e15 	stw	r18,56(sp)
    131c:	dc400d15 	stw	r17,52(sp)
    1320:	a47ff60e 	bge	r20,r17,12fc <___vfprintf_internal_r+0x96c>
    1324:	d9014f17 	ldw	r4,1340(sp)
    1328:	b00b883a 	mov	r5,r22
    132c:	d9800c04 	addi	r6,sp,48
    1330:	00009380 	call	938 <__sprint_r>
    1334:	103f4e1e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
    1338:	dc800e17 	ldw	r18,56(sp)
    133c:	dc400d17 	ldw	r17,52(sp)
    1340:	d8c01904 	addi	r3,sp,100
    1344:	003fee06 	br	1300 <___vfprintf_internal_r+0x970>
    1348:	d8802c0b 	ldhu	r2,176(sp)
    134c:	00ffffc4 	movi	r3,-1
    1350:	d8c14b15 	stw	r3,1324(sp)
    1354:	1080100c 	andi	r2,r2,64
    1358:	103dcc1e 	bne	r2,zero,a8c <___vfprintf_internal_r+0xfc>
    135c:	003dce06 	br	a98 <___vfprintf_internal_r+0x108>
    1360:	d9014f17 	ldw	r4,1340(sp)
    1364:	b00b883a 	mov	r5,r22
    1368:	d9800c04 	addi	r6,sp,48
    136c:	00009380 	call	938 <__sprint_r>
    1370:	103f3f1e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
    1374:	dc800e17 	ldw	r18,56(sp)
    1378:	003f2e06 	br	1034 <___vfprintf_internal_r+0x6a4>
    137c:	d9414c17 	ldw	r5,1328(sp)
    1380:	29400414 	ori	r5,r5,16
    1384:	d9414c15 	stw	r5,1328(sp)
    1388:	d9814c17 	ldw	r6,1328(sp)
    138c:	3080080c 	andi	r2,r6,32
    1390:	10014f1e 	bne	r2,zero,18d0 <___vfprintf_internal_r+0xf40>
    1394:	d8c14c17 	ldw	r3,1328(sp)
    1398:	1880040c 	andi	r2,r3,16
    139c:	1002ea1e 	bne	r2,zero,1f48 <___vfprintf_internal_r+0x15b8>
    13a0:	d9014c17 	ldw	r4,1328(sp)
    13a4:	2080100c 	andi	r2,r4,64
    13a8:	1002e726 	beq	r2,zero,1f48 <___vfprintf_internal_r+0x15b8>
    13ac:	3880000f 	ldh	r2,0(r7)
    13b0:	39c00104 	addi	r7,r7,4
    13b4:	d9c14015 	stw	r7,1280(sp)
    13b8:	1023d7fa 	srai	r17,r2,31
    13bc:	1021883a 	mov	r16,r2
    13c0:	88037216 	blt	r17,zero,218c <___vfprintf_internal_r+0x17fc>
    13c4:	01000044 	movi	r4,1
    13c8:	98000416 	blt	r19,zero,13dc <___vfprintf_internal_r+0xa4c>
    13cc:	d8c14c17 	ldw	r3,1328(sp)
    13d0:	00bfdfc4 	movi	r2,-129
    13d4:	1886703a 	and	r3,r3,r2
    13d8:	d8c14c15 	stw	r3,1328(sp)
    13dc:	8444b03a 	or	r2,r16,r17
    13e0:	1002261e 	bne	r2,zero,1c7c <___vfprintf_internal_r+0x12ec>
    13e4:	9802251e 	bne	r19,zero,1c7c <___vfprintf_internal_r+0x12ec>
    13e8:	20803fcc 	andi	r2,r4,255
    13ec:	10029b26 	beq	r2,zero,1e5c <___vfprintf_internal_r+0x14cc>
    13f0:	d8c01904 	addi	r3,sp,100
    13f4:	dd000f04 	addi	r20,sp,60
    13f8:	d8c14115 	stw	r3,1284(sp)
    13fc:	d8c14117 	ldw	r3,1284(sp)
    1400:	dcc14515 	stw	r19,1300(sp)
    1404:	a0c5c83a 	sub	r2,r20,r3
    1408:	11c00a04 	addi	r7,r2,40
    140c:	99c0010e 	bge	r19,r7,1414 <___vfprintf_internal_r+0xa84>
    1410:	d9c14515 	stw	r7,1300(sp)
    1414:	dcc14615 	stw	r19,1304(sp)
    1418:	d8800407 	ldb	r2,16(sp)
    141c:	103e4c26 	beq	r2,zero,d50 <___vfprintf_internal_r+0x3c0>
    1420:	d8814517 	ldw	r2,1300(sp)
    1424:	10800044 	addi	r2,r2,1
    1428:	d8814515 	stw	r2,1300(sp)
    142c:	003e4806 	br	d50 <___vfprintf_internal_r+0x3c0>
    1430:	d9814c17 	ldw	r6,1328(sp)
    1434:	31800414 	ori	r6,r6,16
    1438:	d9814c15 	stw	r6,1328(sp)
    143c:	d8c14c17 	ldw	r3,1328(sp)
    1440:	1880080c 	andi	r2,r3,32
    1444:	1001271e 	bne	r2,zero,18e4 <___vfprintf_internal_r+0xf54>
    1448:	d9414c17 	ldw	r5,1328(sp)
    144c:	2880040c 	andi	r2,r5,16
    1450:	1002b61e 	bne	r2,zero,1f2c <___vfprintf_internal_r+0x159c>
    1454:	d9814c17 	ldw	r6,1328(sp)
    1458:	3080100c 	andi	r2,r6,64
    145c:	1002b326 	beq	r2,zero,1f2c <___vfprintf_internal_r+0x159c>
    1460:	3c00000b 	ldhu	r16,0(r7)
    1464:	0009883a 	mov	r4,zero
    1468:	39c00104 	addi	r7,r7,4
    146c:	0023883a 	mov	r17,zero
    1470:	d9c14015 	stw	r7,1280(sp)
    1474:	d8000405 	stb	zero,16(sp)
    1478:	003fd306 	br	13c8 <___vfprintf_internal_r+0xa38>
    147c:	d9014c17 	ldw	r4,1328(sp)
    1480:	21000414 	ori	r4,r4,16
    1484:	d9014c15 	stw	r4,1328(sp)
    1488:	d9414c17 	ldw	r5,1328(sp)
    148c:	2880080c 	andi	r2,r5,32
    1490:	1001081e 	bne	r2,zero,18b4 <___vfprintf_internal_r+0xf24>
    1494:	d8c14c17 	ldw	r3,1328(sp)
    1498:	1880040c 	andi	r2,r3,16
    149c:	1002b01e 	bne	r2,zero,1f60 <___vfprintf_internal_r+0x15d0>
    14a0:	d9014c17 	ldw	r4,1328(sp)
    14a4:	2080100c 	andi	r2,r4,64
    14a8:	1002ad26 	beq	r2,zero,1f60 <___vfprintf_internal_r+0x15d0>
    14ac:	3c00000b 	ldhu	r16,0(r7)
    14b0:	01000044 	movi	r4,1
    14b4:	39c00104 	addi	r7,r7,4
    14b8:	0023883a 	mov	r17,zero
    14bc:	d9c14015 	stw	r7,1280(sp)
    14c0:	d8000405 	stb	zero,16(sp)
    14c4:	003fc006 	br	13c8 <___vfprintf_internal_r+0xa38>
    14c8:	d9014f17 	ldw	r4,1340(sp)
    14cc:	b00b883a 	mov	r5,r22
    14d0:	d9800c04 	addi	r6,sp,48
    14d4:	00009380 	call	938 <__sprint_r>
    14d8:	103ee51e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
    14dc:	dc800e17 	ldw	r18,56(sp)
    14e0:	d8c01904 	addi	r3,sp,100
    14e4:	d9814c17 	ldw	r6,1328(sp)
    14e8:	3080004c 	andi	r2,r6,1
    14ec:	1005003a 	cmpeq	r2,r2,zero
    14f0:	103ea51e 	bne	r2,zero,f88 <___vfprintf_internal_r+0x5f8>
    14f4:	00800044 	movi	r2,1
    14f8:	dc400d17 	ldw	r17,52(sp)
    14fc:	18800115 	stw	r2,4(r3)
    1500:	d8814917 	ldw	r2,1316(sp)
    1504:	94800044 	addi	r18,r18,1
    1508:	8c400044 	addi	r17,r17,1
    150c:	18800015 	stw	r2,0(r3)
    1510:	008001c4 	movi	r2,7
    1514:	dc800e15 	stw	r18,56(sp)
    1518:	dc400d15 	stw	r17,52(sp)
    151c:	14421e0e 	bge	r2,r17,1d98 <___vfprintf_internal_r+0x1408>
    1520:	d9014f17 	ldw	r4,1340(sp)
    1524:	b00b883a 	mov	r5,r22
    1528:	d9800c04 	addi	r6,sp,48
    152c:	00009380 	call	938 <__sprint_r>
    1530:	103ecf1e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
    1534:	dc800e17 	ldw	r18,56(sp)
    1538:	d8c01904 	addi	r3,sp,100
    153c:	003e9206 	br	f88 <___vfprintf_internal_r+0x5f8>
    1540:	d9014f17 	ldw	r4,1340(sp)
    1544:	b00b883a 	mov	r5,r22
    1548:	d9800c04 	addi	r6,sp,48
    154c:	00009380 	call	938 <__sprint_r>
    1550:	103ec026 	beq	r2,zero,1054 <___vfprintf_internal_r+0x6c4>
    1554:	003ec606 	br	1070 <___vfprintf_internal_r+0x6e0>
    1558:	d9014f17 	ldw	r4,1340(sp)
    155c:	b00b883a 	mov	r5,r22
    1560:	d9800c04 	addi	r6,sp,48
    1564:	d9c15115 	stw	r7,1348(sp)
    1568:	00009380 	call	938 <__sprint_r>
    156c:	d9c15117 	ldw	r7,1348(sp)
    1570:	103ebf1e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
    1574:	dc800e17 	ldw	r18,56(sp)
    1578:	dc400d17 	ldw	r17,52(sp)
    157c:	dd401904 	addi	r21,sp,100
    1580:	003e7406 	br	f54 <___vfprintf_internal_r+0x5c4>
    1584:	d9014f17 	ldw	r4,1340(sp)
    1588:	b00b883a 	mov	r5,r22
    158c:	d9800c04 	addi	r6,sp,48
    1590:	d9c15115 	stw	r7,1348(sp)
    1594:	00009380 	call	938 <__sprint_r>
    1598:	d9c15117 	ldw	r7,1348(sp)
    159c:	103eb41e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
    15a0:	dd401904 	addi	r21,sp,100
    15a4:	003d6d06 	br	b5c <___vfprintf_internal_r+0x1cc>
    15a8:	d9014f17 	ldw	r4,1340(sp)
    15ac:	b00b883a 	mov	r5,r22
    15b0:	d9800c04 	addi	r6,sp,48
    15b4:	d9c15115 	stw	r7,1348(sp)
    15b8:	00009380 	call	938 <__sprint_r>
    15bc:	d9c15117 	ldw	r7,1348(sp)
    15c0:	103eab1e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
    15c4:	dc800e17 	ldw	r18,56(sp)
    15c8:	dc400d17 	ldw	r17,52(sp)
    15cc:	dd401904 	addi	r21,sp,100
    15d0:	003e3406 	br	ea4 <___vfprintf_internal_r+0x514>
    15d4:	d9014f17 	ldw	r4,1340(sp)
    15d8:	b00b883a 	mov	r5,r22
    15dc:	d9800c04 	addi	r6,sp,48
    15e0:	d9c15115 	stw	r7,1348(sp)
    15e4:	00009380 	call	938 <__sprint_r>
    15e8:	d9c15117 	ldw	r7,1348(sp)
    15ec:	103ea01e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
    15f0:	dc800e17 	ldw	r18,56(sp)
    15f4:	dc400d17 	ldw	r17,52(sp)
    15f8:	dd401904 	addi	r21,sp,100
    15fc:	003e1c06 	br	e70 <___vfprintf_internal_r+0x4e0>
    1600:	d9014f17 	ldw	r4,1340(sp)
    1604:	b00b883a 	mov	r5,r22
    1608:	d9800c04 	addi	r6,sp,48
    160c:	d9c15115 	stw	r7,1348(sp)
    1610:	00009380 	call	938 <__sprint_r>
    1614:	d9c15117 	ldw	r7,1348(sp)
    1618:	103e951e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
    161c:	dc800e17 	ldw	r18,56(sp)
    1620:	dc400d17 	ldw	r17,52(sp)
    1624:	dd401904 	addi	r21,sp,100
    1628:	003e0406 	br	e3c <___vfprintf_internal_r+0x4ac>
    162c:	d9000517 	ldw	r4,20(sp)
    1630:	0102520e 	bge	zero,r4,1f7c <___vfprintf_internal_r+0x15ec>
    1634:	d9814717 	ldw	r6,1308(sp)
    1638:	21807a16 	blt	r4,r6,1824 <___vfprintf_internal_r+0xe94>
    163c:	d8814117 	ldw	r2,1284(sp)
    1640:	91a5883a 	add	r18,r18,r6
    1644:	8c400044 	addi	r17,r17,1
    1648:	a8800015 	stw	r2,0(r21)
    164c:	008001c4 	movi	r2,7
    1650:	a9800115 	stw	r6,4(r21)
    1654:	dc800e15 	stw	r18,56(sp)
    1658:	dc400d15 	stw	r17,52(sp)
    165c:	1442f616 	blt	r2,r17,2238 <___vfprintf_internal_r+0x18a8>
    1660:	a8c00204 	addi	r3,r21,8
    1664:	d9414717 	ldw	r5,1308(sp)
    1668:	2161c83a 	sub	r16,r4,r5
    166c:	043f9d0e 	bge	zero,r16,14e4 <___vfprintf_internal_r+0xb54>
    1670:	00800404 	movi	r2,16
    1674:	1402130e 	bge	r2,r16,1ec4 <___vfprintf_internal_r+0x1534>
    1678:	dc400d17 	ldw	r17,52(sp)
    167c:	1027883a 	mov	r19,r2
    1680:	07000074 	movhi	fp,1
    1684:	e7002c84 	addi	fp,fp,178
    1688:	050001c4 	movi	r20,7
    168c:	00000306 	br	169c <___vfprintf_internal_r+0xd0c>
    1690:	18c00204 	addi	r3,r3,8
    1694:	843ffc04 	addi	r16,r16,-16
    1698:	9c020d0e 	bge	r19,r16,1ed0 <___vfprintf_internal_r+0x1540>
    169c:	94800404 	addi	r18,r18,16
    16a0:	8c400044 	addi	r17,r17,1
    16a4:	1f000015 	stw	fp,0(r3)
    16a8:	1cc00115 	stw	r19,4(r3)
    16ac:	dc800e15 	stw	r18,56(sp)
    16b0:	dc400d15 	stw	r17,52(sp)
    16b4:	a47ff60e 	bge	r20,r17,1690 <___vfprintf_internal_r+0xd00>
    16b8:	d9014f17 	ldw	r4,1340(sp)
    16bc:	b00b883a 	mov	r5,r22
    16c0:	d9800c04 	addi	r6,sp,48
    16c4:	00009380 	call	938 <__sprint_r>
    16c8:	103e691e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
    16cc:	dc800e17 	ldw	r18,56(sp)
    16d0:	dc400d17 	ldw	r17,52(sp)
    16d4:	d8c01904 	addi	r3,sp,100
    16d8:	003fee06 	br	1694 <___vfprintf_internal_r+0xd04>
    16dc:	d8814717 	ldw	r2,1308(sp)
    16e0:	143fffc4 	addi	r16,r2,-1
    16e4:	043e970e 	bge	zero,r16,1144 <___vfprintf_internal_r+0x7b4>
    16e8:	00800404 	movi	r2,16
    16ec:	1400180e 	bge	r2,r16,1750 <___vfprintf_internal_r+0xdc0>
    16f0:	1029883a 	mov	r20,r2
    16f4:	07000074 	movhi	fp,1
    16f8:	e7002c84 	addi	fp,fp,178
    16fc:	054001c4 	movi	r21,7
    1700:	00000306 	br	1710 <___vfprintf_internal_r+0xd80>
    1704:	9cc00204 	addi	r19,r19,8
    1708:	843ffc04 	addi	r16,r16,-16
    170c:	a400120e 	bge	r20,r16,1758 <___vfprintf_internal_r+0xdc8>
    1710:	94800404 	addi	r18,r18,16
    1714:	8c400044 	addi	r17,r17,1
    1718:	9f000015 	stw	fp,0(r19)
    171c:	9d000115 	stw	r20,4(r19)
    1720:	dc800e15 	stw	r18,56(sp)
    1724:	dc400d15 	stw	r17,52(sp)
    1728:	ac7ff60e 	bge	r21,r17,1704 <___vfprintf_internal_r+0xd74>
    172c:	d9014f17 	ldw	r4,1340(sp)
    1730:	b00b883a 	mov	r5,r22
    1734:	d9800c04 	addi	r6,sp,48
    1738:	00009380 	call	938 <__sprint_r>
    173c:	103e4c1e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
    1740:	dc800e17 	ldw	r18,56(sp)
    1744:	dc400d17 	ldw	r17,52(sp)
    1748:	dcc01904 	addi	r19,sp,100
    174c:	003fee06 	br	1708 <___vfprintf_internal_r+0xd78>
    1750:	07000074 	movhi	fp,1
    1754:	e7002c84 	addi	fp,fp,178
    1758:	9425883a 	add	r18,r18,r16
    175c:	8c400044 	addi	r17,r17,1
    1760:	008001c4 	movi	r2,7
    1764:	9f000015 	stw	fp,0(r19)
    1768:	9c000115 	stw	r16,4(r19)
    176c:	dc800e15 	stw	r18,56(sp)
    1770:	dc400d15 	stw	r17,52(sp)
    1774:	147e720e 	bge	r2,r17,1140 <___vfprintf_internal_r+0x7b0>
    1778:	d9014f17 	ldw	r4,1340(sp)
    177c:	b00b883a 	mov	r5,r22
    1780:	d9800c04 	addi	r6,sp,48
    1784:	00009380 	call	938 <__sprint_r>
    1788:	103e391e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
    178c:	dc800e17 	ldw	r18,56(sp)
    1790:	dc400d17 	ldw	r17,52(sp)
    1794:	dcc01904 	addi	r19,sp,100
    1798:	003e6a06 	br	1144 <___vfprintf_internal_r+0x7b4>
    179c:	d9014f17 	ldw	r4,1340(sp)
    17a0:	b00b883a 	mov	r5,r22
    17a4:	d9800c04 	addi	r6,sp,48
    17a8:	d9c15115 	stw	r7,1348(sp)
    17ac:	00009380 	call	938 <__sprint_r>
    17b0:	d9c15117 	ldw	r7,1348(sp)
    17b4:	103e2e1e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
    17b8:	dc800e17 	ldw	r18,56(sp)
    17bc:	dc400d17 	ldw	r17,52(sp)
    17c0:	dd401904 	addi	r21,sp,100
    17c4:	003dba06 	br	eb0 <___vfprintf_internal_r+0x520>
    17c8:	d9014f17 	ldw	r4,1340(sp)
    17cc:	b00b883a 	mov	r5,r22
    17d0:	d9800c04 	addi	r6,sp,48
    17d4:	00009380 	call	938 <__sprint_r>
    17d8:	103e251e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
    17dc:	dc800e17 	ldw	r18,56(sp)
    17e0:	dc400d17 	ldw	r17,52(sp)
    17e4:	dcc01904 	addi	r19,sp,100
    17e8:	003e4206 	br	10f4 <___vfprintf_internal_r+0x764>
    17ec:	d9014f17 	ldw	r4,1340(sp)
    17f0:	b00b883a 	mov	r5,r22
    17f4:	d9800c04 	addi	r6,sp,48
    17f8:	00009380 	call	938 <__sprint_r>
    17fc:	103e1c1e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
    1800:	dc800e17 	ldw	r18,56(sp)
    1804:	dc400d17 	ldw	r17,52(sp)
    1808:	d8c01904 	addi	r3,sp,100
    180c:	003e2e06 	br	10c8 <___vfprintf_internal_r+0x738>
    1810:	d9414c17 	ldw	r5,1328(sp)
    1814:	2880004c 	andi	r2,r5,1
    1818:	1005003a 	cmpeq	r2,r2,zero
    181c:	103dda1e 	bne	r2,zero,f88 <___vfprintf_internal_r+0x5f8>
    1820:	003e9f06 	br	12a0 <___vfprintf_internal_r+0x910>
    1824:	d8c14117 	ldw	r3,1284(sp)
    1828:	9125883a 	add	r18,r18,r4
    182c:	8c400044 	addi	r17,r17,1
    1830:	008001c4 	movi	r2,7
    1834:	a8c00015 	stw	r3,0(r21)
    1838:	a9000115 	stw	r4,4(r21)
    183c:	dc800e15 	stw	r18,56(sp)
    1840:	dc400d15 	stw	r17,52(sp)
    1844:	14426616 	blt	r2,r17,21e0 <___vfprintf_internal_r+0x1850>
    1848:	a8c00204 	addi	r3,r21,8
    184c:	d9414917 	ldw	r5,1316(sp)
    1850:	00800044 	movi	r2,1
    1854:	94800044 	addi	r18,r18,1
    1858:	8c400044 	addi	r17,r17,1
    185c:	18800115 	stw	r2,4(r3)
    1860:	008001c4 	movi	r2,7
    1864:	19400015 	stw	r5,0(r3)
    1868:	dc800e15 	stw	r18,56(sp)
    186c:	dc400d15 	stw	r17,52(sp)
    1870:	2021883a 	mov	r16,r4
    1874:	14425016 	blt	r2,r17,21b8 <___vfprintf_internal_r+0x1828>
    1878:	19400204 	addi	r5,r3,8
    187c:	d9814717 	ldw	r6,1308(sp)
    1880:	8c400044 	addi	r17,r17,1
    1884:	dc400d15 	stw	r17,52(sp)
    1888:	3107c83a 	sub	r3,r6,r4
    188c:	d9014117 	ldw	r4,1284(sp)
    1890:	90e5883a 	add	r18,r18,r3
    1894:	28c00115 	stw	r3,4(r5)
    1898:	8105883a 	add	r2,r16,r4
    189c:	28800015 	stw	r2,0(r5)
    18a0:	008001c4 	movi	r2,7
    18a4:	dc800e15 	stw	r18,56(sp)
    18a8:	147f1d16 	blt	r2,r17,1520 <___vfprintf_internal_r+0xb90>
    18ac:	28c00204 	addi	r3,r5,8
    18b0:	003db506 	br	f88 <___vfprintf_internal_r+0x5f8>
    18b4:	3c000017 	ldw	r16,0(r7)
    18b8:	3c400117 	ldw	r17,4(r7)
    18bc:	39800204 	addi	r6,r7,8
    18c0:	01000044 	movi	r4,1
    18c4:	d9814015 	stw	r6,1280(sp)
    18c8:	d8000405 	stb	zero,16(sp)
    18cc:	003ebe06 	br	13c8 <___vfprintf_internal_r+0xa38>
    18d0:	3c000017 	ldw	r16,0(r7)
    18d4:	3c400117 	ldw	r17,4(r7)
    18d8:	38800204 	addi	r2,r7,8
    18dc:	d8814015 	stw	r2,1280(sp)
    18e0:	003eb706 	br	13c0 <___vfprintf_internal_r+0xa30>
    18e4:	3c000017 	ldw	r16,0(r7)
    18e8:	3c400117 	ldw	r17,4(r7)
    18ec:	39000204 	addi	r4,r7,8
    18f0:	d9014015 	stw	r4,1280(sp)
    18f4:	0009883a 	mov	r4,zero
    18f8:	d8000405 	stb	zero,16(sp)
    18fc:	003eb206 	br	13c8 <___vfprintf_internal_r+0xa38>
    1900:	38c00017 	ldw	r3,0(r7)
    1904:	39c00104 	addi	r7,r7,4
    1908:	d8c14a15 	stw	r3,1320(sp)
    190c:	1800d10e 	bge	r3,zero,1c54 <___vfprintf_internal_r+0x12c4>
    1910:	00c7c83a 	sub	r3,zero,r3
    1914:	d8c14a15 	stw	r3,1320(sp)
    1918:	d9014c17 	ldw	r4,1328(sp)
    191c:	b8c00007 	ldb	r3,0(r23)
    1920:	21000114 	ori	r4,r4,4
    1924:	d9014c15 	stw	r4,1328(sp)
    1928:	003c9806 	br	b8c <___vfprintf_internal_r+0x1fc>
    192c:	d9814c17 	ldw	r6,1328(sp)
    1930:	3080080c 	andi	r2,r6,32
    1934:	1001f026 	beq	r2,zero,20f8 <___vfprintf_internal_r+0x1768>
    1938:	d9014b17 	ldw	r4,1324(sp)
    193c:	38800017 	ldw	r2,0(r7)
    1940:	39c00104 	addi	r7,r7,4
    1944:	d9c14015 	stw	r7,1280(sp)
    1948:	2007d7fa 	srai	r3,r4,31
    194c:	d9c14017 	ldw	r7,1280(sp)
    1950:	11000015 	stw	r4,0(r2)
    1954:	10c00115 	stw	r3,4(r2)
    1958:	003c6906 	br	b00 <___vfprintf_internal_r+0x170>
    195c:	b8c00007 	ldb	r3,0(r23)
    1960:	00801b04 	movi	r2,108
    1964:	18824f26 	beq	r3,r2,22a4 <___vfprintf_internal_r+0x1914>
    1968:	d9414c17 	ldw	r5,1328(sp)
    196c:	29400414 	ori	r5,r5,16
    1970:	d9414c15 	stw	r5,1328(sp)
    1974:	003c8506 	br	b8c <___vfprintf_internal_r+0x1fc>
    1978:	d9814c17 	ldw	r6,1328(sp)
    197c:	b8c00007 	ldb	r3,0(r23)
    1980:	31800814 	ori	r6,r6,32
    1984:	d9814c15 	stw	r6,1328(sp)
    1988:	003c8006 	br	b8c <___vfprintf_internal_r+0x1fc>
    198c:	d8814c17 	ldw	r2,1328(sp)
    1990:	3c000017 	ldw	r16,0(r7)
    1994:	00c01e04 	movi	r3,120
    1998:	10800094 	ori	r2,r2,2
    199c:	d8814c15 	stw	r2,1328(sp)
    19a0:	39c00104 	addi	r7,r7,4
    19a4:	01400074 	movhi	r5,1
    19a8:	29401504 	addi	r5,r5,84
    19ac:	00800c04 	movi	r2,48
    19b0:	0023883a 	mov	r17,zero
    19b4:	01000084 	movi	r4,2
    19b8:	d9c14015 	stw	r7,1280(sp)
    19bc:	d8c14d15 	stw	r3,1332(sp)
    19c0:	d9414415 	stw	r5,1296(sp)
    19c4:	d8800445 	stb	r2,17(sp)
    19c8:	d8c00485 	stb	r3,18(sp)
    19cc:	d8000405 	stb	zero,16(sp)
    19d0:	003e7d06 	br	13c8 <___vfprintf_internal_r+0xa38>
    19d4:	d8814c17 	ldw	r2,1328(sp)
    19d8:	b8c00007 	ldb	r3,0(r23)
    19dc:	10801014 	ori	r2,r2,64
    19e0:	d8814c15 	stw	r2,1328(sp)
    19e4:	003c6906 	br	b8c <___vfprintf_internal_r+0x1fc>
    19e8:	d9414c17 	ldw	r5,1328(sp)
    19ec:	2880020c 	andi	r2,r5,8
    19f0:	1001df26 	beq	r2,zero,2170 <___vfprintf_internal_r+0x17e0>
    19f4:	39800017 	ldw	r6,0(r7)
    19f8:	38800204 	addi	r2,r7,8
    19fc:	d8814015 	stw	r2,1280(sp)
    1a00:	d9814215 	stw	r6,1288(sp)
    1a04:	39c00117 	ldw	r7,4(r7)
    1a08:	d9c14315 	stw	r7,1292(sp)
    1a0c:	d9014217 	ldw	r4,1288(sp)
    1a10:	d9414317 	ldw	r5,1292(sp)
    1a14:	00073300 	call	7330 <__isinfd>
    1a18:	10021726 	beq	r2,zero,2278 <___vfprintf_internal_r+0x18e8>
    1a1c:	d9014217 	ldw	r4,1288(sp)
    1a20:	d9414317 	ldw	r5,1292(sp)
    1a24:	000d883a 	mov	r6,zero
    1a28:	000f883a 	mov	r7,zero
    1a2c:	00093780 	call	9378 <__ltdf2>
    1a30:	1002ca16 	blt	r2,zero,255c <___vfprintf_internal_r+0x1bcc>
    1a34:	d9414d17 	ldw	r5,1332(sp)
    1a38:	008011c4 	movi	r2,71
    1a3c:	11420a16 	blt	r2,r5,2268 <___vfprintf_internal_r+0x18d8>
    1a40:	01800074 	movhi	r6,1
    1a44:	31801a04 	addi	r6,r6,104
    1a48:	d9814115 	stw	r6,1284(sp)
    1a4c:	d9014c17 	ldw	r4,1328(sp)
    1a50:	00c000c4 	movi	r3,3
    1a54:	00bfdfc4 	movi	r2,-129
    1a58:	2088703a 	and	r4,r4,r2
    1a5c:	180f883a 	mov	r7,r3
    1a60:	d8c14515 	stw	r3,1300(sp)
    1a64:	d9014c15 	stw	r4,1328(sp)
    1a68:	d8014615 	stw	zero,1304(sp)
    1a6c:	003e6a06 	br	1418 <___vfprintf_internal_r+0xa88>
    1a70:	38800017 	ldw	r2,0(r7)
    1a74:	00c00044 	movi	r3,1
    1a78:	39c00104 	addi	r7,r7,4
    1a7c:	d9c14015 	stw	r7,1280(sp)
    1a80:	d9000f04 	addi	r4,sp,60
    1a84:	180f883a 	mov	r7,r3
    1a88:	d8c14515 	stw	r3,1300(sp)
    1a8c:	d9014115 	stw	r4,1284(sp)
    1a90:	d8800f05 	stb	r2,60(sp)
    1a94:	d8000405 	stb	zero,16(sp)
    1a98:	003cac06 	br	d4c <___vfprintf_internal_r+0x3bc>
    1a9c:	01400074 	movhi	r5,1
    1aa0:	29402004 	addi	r5,r5,128
    1aa4:	d9414415 	stw	r5,1296(sp)
    1aa8:	d9814c17 	ldw	r6,1328(sp)
    1aac:	3080080c 	andi	r2,r6,32
    1ab0:	1000f926 	beq	r2,zero,1e98 <___vfprintf_internal_r+0x1508>
    1ab4:	3c000017 	ldw	r16,0(r7)
    1ab8:	3c400117 	ldw	r17,4(r7)
    1abc:	38800204 	addi	r2,r7,8
    1ac0:	d8814015 	stw	r2,1280(sp)
    1ac4:	d9414c17 	ldw	r5,1328(sp)
    1ac8:	2880004c 	andi	r2,r5,1
    1acc:	1005003a 	cmpeq	r2,r2,zero
    1ad0:	1000b31e 	bne	r2,zero,1da0 <___vfprintf_internal_r+0x1410>
    1ad4:	8444b03a 	or	r2,r16,r17
    1ad8:	1000b126 	beq	r2,zero,1da0 <___vfprintf_internal_r+0x1410>
    1adc:	d9814d17 	ldw	r6,1332(sp)
    1ae0:	29400094 	ori	r5,r5,2
    1ae4:	00800c04 	movi	r2,48
    1ae8:	01000084 	movi	r4,2
    1aec:	d9414c15 	stw	r5,1328(sp)
    1af0:	d8800445 	stb	r2,17(sp)
    1af4:	d9800485 	stb	r6,18(sp)
    1af8:	d8000405 	stb	zero,16(sp)
    1afc:	003e3206 	br	13c8 <___vfprintf_internal_r+0xa38>
    1b00:	01800074 	movhi	r6,1
    1b04:	31801504 	addi	r6,r6,84
    1b08:	d9814415 	stw	r6,1296(sp)
    1b0c:	003fe606 	br	1aa8 <___vfprintf_internal_r+0x1118>
    1b10:	00800ac4 	movi	r2,43
    1b14:	d8800405 	stb	r2,16(sp)
    1b18:	b8c00007 	ldb	r3,0(r23)
    1b1c:	003c1b06 	br	b8c <___vfprintf_internal_r+0x1fc>
    1b20:	d8814c17 	ldw	r2,1328(sp)
    1b24:	b8c00007 	ldb	r3,0(r23)
    1b28:	10800054 	ori	r2,r2,1
    1b2c:	d8814c15 	stw	r2,1328(sp)
    1b30:	003c1606 	br	b8c <___vfprintf_internal_r+0x1fc>
    1b34:	d8800407 	ldb	r2,16(sp)
    1b38:	1000461e 	bne	r2,zero,1c54 <___vfprintf_internal_r+0x12c4>
    1b3c:	00800804 	movi	r2,32
    1b40:	d8800405 	stb	r2,16(sp)
    1b44:	b8c00007 	ldb	r3,0(r23)
    1b48:	003c1006 	br	b8c <___vfprintf_internal_r+0x1fc>
    1b4c:	d9814c17 	ldw	r6,1328(sp)
    1b50:	b8c00007 	ldb	r3,0(r23)
    1b54:	31800214 	ori	r6,r6,8
    1b58:	d9814c15 	stw	r6,1328(sp)
    1b5c:	003c0b06 	br	b8c <___vfprintf_internal_r+0x1fc>
    1b60:	0007883a 	mov	r3,zero
    1b64:	01000244 	movi	r4,9
    1b68:	188002a4 	muli	r2,r3,10
    1b6c:	b8c00007 	ldb	r3,0(r23)
    1b70:	d9814d17 	ldw	r6,1332(sp)
    1b74:	bdc00044 	addi	r23,r23,1
    1b78:	d8c14d15 	stw	r3,1332(sp)
    1b7c:	d9414d17 	ldw	r5,1332(sp)
    1b80:	3085883a 	add	r2,r6,r2
    1b84:	10fff404 	addi	r3,r2,-48
    1b88:	28bff404 	addi	r2,r5,-48
    1b8c:	20bff62e 	bgeu	r4,r2,1b68 <___vfprintf_internal_r+0x11d8>
    1b90:	d8c14a15 	stw	r3,1320(sp)
    1b94:	003bff06 	br	b94 <___vfprintf_internal_r+0x204>
    1b98:	d9414c17 	ldw	r5,1328(sp)
    1b9c:	b8c00007 	ldb	r3,0(r23)
    1ba0:	29402014 	ori	r5,r5,128
    1ba4:	d9414c15 	stw	r5,1328(sp)
    1ba8:	003bf806 	br	b8c <___vfprintf_internal_r+0x1fc>
    1bac:	b8c00007 	ldb	r3,0(r23)
    1bb0:	00800a84 	movi	r2,42
    1bb4:	bdc00044 	addi	r23,r23,1
    1bb8:	18831526 	beq	r3,r2,2810 <___vfprintf_internal_r+0x1e80>
    1bbc:	d8c14d15 	stw	r3,1332(sp)
    1bc0:	18bff404 	addi	r2,r3,-48
    1bc4:	00c00244 	movi	r3,9
    1bc8:	18827836 	bltu	r3,r2,25ac <___vfprintf_internal_r+0x1c1c>
    1bcc:	000d883a 	mov	r6,zero
    1bd0:	308002a4 	muli	r2,r6,10
    1bd4:	b9800007 	ldb	r6,0(r23)
    1bd8:	d9414d17 	ldw	r5,1332(sp)
    1bdc:	bdc00044 	addi	r23,r23,1
    1be0:	d9814d15 	stw	r6,1332(sp)
    1be4:	d9014d17 	ldw	r4,1332(sp)
    1be8:	1145883a 	add	r2,r2,r5
    1bec:	11bff404 	addi	r6,r2,-48
    1bf0:	20bff404 	addi	r2,r4,-48
    1bf4:	18bff62e 	bgeu	r3,r2,1bd0 <___vfprintf_internal_r+0x1240>
    1bf8:	3027883a 	mov	r19,r6
    1bfc:	303be50e 	bge	r6,zero,b94 <___vfprintf_internal_r+0x204>
    1c00:	04ffffc4 	movi	r19,-1
    1c04:	003be306 	br	b94 <___vfprintf_internal_r+0x204>
    1c08:	d8000405 	stb	zero,16(sp)
    1c0c:	39800017 	ldw	r6,0(r7)
    1c10:	39c00104 	addi	r7,r7,4
    1c14:	d9c14015 	stw	r7,1280(sp)
    1c18:	d9814115 	stw	r6,1284(sp)
    1c1c:	3001c926 	beq	r6,zero,2344 <___vfprintf_internal_r+0x19b4>
    1c20:	98000e16 	blt	r19,zero,1c5c <___vfprintf_internal_r+0x12cc>
    1c24:	d9014117 	ldw	r4,1284(sp)
    1c28:	000b883a 	mov	r5,zero
    1c2c:	980d883a 	mov	r6,r19
    1c30:	0005a4c0 	call	5a4c <memchr>
    1c34:	10025926 	beq	r2,zero,259c <___vfprintf_internal_r+0x1c0c>
    1c38:	d8c14117 	ldw	r3,1284(sp)
    1c3c:	10cfc83a 	sub	r7,r2,r3
    1c40:	99c19e16 	blt	r19,r7,22bc <___vfprintf_internal_r+0x192c>
    1c44:	d9c14515 	stw	r7,1300(sp)
    1c48:	38000916 	blt	r7,zero,1c70 <___vfprintf_internal_r+0x12e0>
    1c4c:	d8014615 	stw	zero,1304(sp)
    1c50:	003df106 	br	1418 <___vfprintf_internal_r+0xa88>
    1c54:	b8c00007 	ldb	r3,0(r23)
    1c58:	003bcc06 	br	b8c <___vfprintf_internal_r+0x1fc>
    1c5c:	d9014117 	ldw	r4,1284(sp)
    1c60:	00008c40 	call	8c4 <strlen>
    1c64:	d8814515 	stw	r2,1300(sp)
    1c68:	100f883a 	mov	r7,r2
    1c6c:	103ff70e 	bge	r2,zero,1c4c <___vfprintf_internal_r+0x12bc>
    1c70:	d8014515 	stw	zero,1300(sp)
    1c74:	d8014615 	stw	zero,1304(sp)
    1c78:	003de706 	br	1418 <___vfprintf_internal_r+0xa88>
    1c7c:	20c03fcc 	andi	r3,r4,255
    1c80:	00800044 	movi	r2,1
    1c84:	18802d26 	beq	r3,r2,1d3c <___vfprintf_internal_r+0x13ac>
    1c88:	18800e36 	bltu	r3,r2,1cc4 <___vfprintf_internal_r+0x1334>
    1c8c:	00800084 	movi	r2,2
    1c90:	1880fa26 	beq	r3,r2,207c <___vfprintf_internal_r+0x16ec>
    1c94:	01000074 	movhi	r4,1
    1c98:	21002504 	addi	r4,r4,148
    1c9c:	00008c40 	call	8c4 <strlen>
    1ca0:	100f883a 	mov	r7,r2
    1ca4:	dcc14515 	stw	r19,1300(sp)
    1ca8:	9880010e 	bge	r19,r2,1cb0 <___vfprintf_internal_r+0x1320>
    1cac:	d8814515 	stw	r2,1300(sp)
    1cb0:	00800074 	movhi	r2,1
    1cb4:	10802504 	addi	r2,r2,148
    1cb8:	dcc14615 	stw	r19,1304(sp)
    1cbc:	d8814115 	stw	r2,1284(sp)
    1cc0:	003dd506 	br	1418 <___vfprintf_internal_r+0xa88>
    1cc4:	d9401904 	addi	r5,sp,100
    1cc8:	dd000f04 	addi	r20,sp,60
    1ccc:	d9414115 	stw	r5,1284(sp)
    1cd0:	880a977a 	slli	r5,r17,29
    1cd4:	d9814117 	ldw	r6,1284(sp)
    1cd8:	8004d0fa 	srli	r2,r16,3
    1cdc:	8806d0fa 	srli	r3,r17,3
    1ce0:	810001cc 	andi	r4,r16,7
    1ce4:	2884b03a 	or	r2,r5,r2
    1ce8:	31bfffc4 	addi	r6,r6,-1
    1cec:	21000c04 	addi	r4,r4,48
    1cf0:	d9814115 	stw	r6,1284(sp)
    1cf4:	10cab03a 	or	r5,r2,r3
    1cf8:	31000005 	stb	r4,0(r6)
    1cfc:	1021883a 	mov	r16,r2
    1d00:	1823883a 	mov	r17,r3
    1d04:	283ff21e 	bne	r5,zero,1cd0 <___vfprintf_internal_r+0x1340>
    1d08:	d8c14c17 	ldw	r3,1328(sp)
    1d0c:	1880004c 	andi	r2,r3,1
    1d10:	1005003a 	cmpeq	r2,r2,zero
    1d14:	103db91e 	bne	r2,zero,13fc <___vfprintf_internal_r+0xa6c>
    1d18:	20803fcc 	andi	r2,r4,255
    1d1c:	1080201c 	xori	r2,r2,128
    1d20:	10bfe004 	addi	r2,r2,-128
    1d24:	00c00c04 	movi	r3,48
    1d28:	10fdb426 	beq	r2,r3,13fc <___vfprintf_internal_r+0xa6c>
    1d2c:	31bfffc4 	addi	r6,r6,-1
    1d30:	d9814115 	stw	r6,1284(sp)
    1d34:	30c00005 	stb	r3,0(r6)
    1d38:	003db006 	br	13fc <___vfprintf_internal_r+0xa6c>
    1d3c:	88800068 	cmpgeui	r2,r17,1
    1d40:	10002c1e 	bne	r2,zero,1df4 <___vfprintf_internal_r+0x1464>
    1d44:	8800021e 	bne	r17,zero,1d50 <___vfprintf_internal_r+0x13c0>
    1d48:	00800244 	movi	r2,9
    1d4c:	14002936 	bltu	r2,r16,1df4 <___vfprintf_internal_r+0x1464>
    1d50:	d90018c4 	addi	r4,sp,99
    1d54:	dd000f04 	addi	r20,sp,60
    1d58:	d9014115 	stw	r4,1284(sp)
    1d5c:	d9014117 	ldw	r4,1284(sp)
    1d60:	80800c04 	addi	r2,r16,48
    1d64:	20800005 	stb	r2,0(r4)
    1d68:	003da406 	br	13fc <___vfprintf_internal_r+0xa6c>
    1d6c:	dc400d17 	ldw	r17,52(sp)
    1d70:	07000074 	movhi	fp,1
    1d74:	e7002c84 	addi	fp,fp,178
    1d78:	9425883a 	add	r18,r18,r16
    1d7c:	8c400044 	addi	r17,r17,1
    1d80:	008001c4 	movi	r2,7
    1d84:	1f000015 	stw	fp,0(r3)
    1d88:	1c000115 	stw	r16,4(r3)
    1d8c:	dc800e15 	stw	r18,56(sp)
    1d90:	dc400d15 	stw	r17,52(sp)
    1d94:	147de216 	blt	r2,r17,1520 <___vfprintf_internal_r+0xb90>
    1d98:	18c00204 	addi	r3,r3,8
    1d9c:	003c7a06 	br	f88 <___vfprintf_internal_r+0x5f8>
    1da0:	01000084 	movi	r4,2
    1da4:	d8000405 	stb	zero,16(sp)
    1da8:	003d8706 	br	13c8 <___vfprintf_internal_r+0xa38>
    1dac:	d9814c17 	ldw	r6,1328(sp)
    1db0:	30c4703a 	and	r2,r6,r3
    1db4:	1005003a 	cmpeq	r2,r2,zero
    1db8:	103cb926 	beq	r2,zero,10a0 <___vfprintf_internal_r+0x710>
    1dbc:	d9014117 	ldw	r4,1284(sp)
    1dc0:	94800044 	addi	r18,r18,1
    1dc4:	8c400044 	addi	r17,r17,1
    1dc8:	008001c4 	movi	r2,7
    1dcc:	a9000015 	stw	r4,0(r21)
    1dd0:	a8c00115 	stw	r3,4(r21)
    1dd4:	dc800e15 	stw	r18,56(sp)
    1dd8:	dc400d15 	stw	r17,52(sp)
    1ddc:	147e6616 	blt	r2,r17,1778 <___vfprintf_internal_r+0xde8>
    1de0:	acc00204 	addi	r19,r21,8
    1de4:	003cd706 	br	1144 <___vfprintf_internal_r+0x7b4>
    1de8:	07000074 	movhi	fp,1
    1dec:	e7002c84 	addi	fp,fp,178
    1df0:	003c4f06 	br	f30 <___vfprintf_internal_r+0x5a0>
    1df4:	dd000f04 	addi	r20,sp,60
    1df8:	dc801904 	addi	r18,sp,100
    1dfc:	8009883a 	mov	r4,r16
    1e00:	880b883a 	mov	r5,r17
    1e04:	01800284 	movi	r6,10
    1e08:	000f883a 	mov	r7,zero
    1e0c:	00080880 	call	8088 <__umoddi3>
    1e10:	12000c04 	addi	r8,r2,48
    1e14:	94bfffc4 	addi	r18,r18,-1
    1e18:	8009883a 	mov	r4,r16
    1e1c:	880b883a 	mov	r5,r17
    1e20:	01800284 	movi	r6,10
    1e24:	000f883a 	mov	r7,zero
    1e28:	92000005 	stb	r8,0(r18)
    1e2c:	0007aac0 	call	7aac <__udivdi3>
    1e30:	1009883a 	mov	r4,r2
    1e34:	1021883a 	mov	r16,r2
    1e38:	18800068 	cmpgeui	r2,r3,1
    1e3c:	1823883a 	mov	r17,r3
    1e40:	103fee1e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x146c>
    1e44:	1800021e 	bne	r3,zero,1e50 <___vfprintf_internal_r+0x14c0>
    1e48:	00800244 	movi	r2,9
    1e4c:	113feb36 	bltu	r2,r4,1dfc <___vfprintf_internal_r+0x146c>
    1e50:	94bfffc4 	addi	r18,r18,-1
    1e54:	dc814115 	stw	r18,1284(sp)
    1e58:	003fc006 	br	1d5c <___vfprintf_internal_r+0x13cc>
    1e5c:	d9014c17 	ldw	r4,1328(sp)
    1e60:	2080004c 	andi	r2,r4,1
    1e64:	10009a1e 	bne	r2,zero,20d0 <___vfprintf_internal_r+0x1740>
    1e68:	d9401904 	addi	r5,sp,100
    1e6c:	dd000f04 	addi	r20,sp,60
    1e70:	d9414115 	stw	r5,1284(sp)
    1e74:	003d6106 	br	13fc <___vfprintf_internal_r+0xa6c>
    1e78:	d9014f17 	ldw	r4,1340(sp)
    1e7c:	b00b883a 	mov	r5,r22
    1e80:	d9800c04 	addi	r6,sp,48
    1e84:	00009380 	call	938 <__sprint_r>
    1e88:	103c791e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
    1e8c:	dc800e17 	ldw	r18,56(sp)
    1e90:	d8c01904 	addi	r3,sp,100
    1e94:	003cff06 	br	1294 <___vfprintf_internal_r+0x904>
    1e98:	d8c14c17 	ldw	r3,1328(sp)
    1e9c:	1880040c 	andi	r2,r3,16
    1ea0:	1000711e 	bne	r2,zero,2068 <___vfprintf_internal_r+0x16d8>
    1ea4:	d9014c17 	ldw	r4,1328(sp)
    1ea8:	2080100c 	andi	r2,r4,64
    1eac:	10006e26 	beq	r2,zero,2068 <___vfprintf_internal_r+0x16d8>
    1eb0:	3c00000b 	ldhu	r16,0(r7)
    1eb4:	0023883a 	mov	r17,zero
    1eb8:	39c00104 	addi	r7,r7,4
    1ebc:	d9c14015 	stw	r7,1280(sp)
    1ec0:	003f0006 	br	1ac4 <___vfprintf_internal_r+0x1134>
    1ec4:	dc400d17 	ldw	r17,52(sp)
    1ec8:	07000074 	movhi	fp,1
    1ecc:	e7002c84 	addi	fp,fp,178
    1ed0:	9425883a 	add	r18,r18,r16
    1ed4:	8c400044 	addi	r17,r17,1
    1ed8:	008001c4 	movi	r2,7
    1edc:	1f000015 	stw	fp,0(r3)
    1ee0:	1c000115 	stw	r16,4(r3)
    1ee4:	dc800e15 	stw	r18,56(sp)
    1ee8:	dc400d15 	stw	r17,52(sp)
    1eec:	147d7616 	blt	r2,r17,14c8 <___vfprintf_internal_r+0xb38>
    1ef0:	18c00204 	addi	r3,r3,8
    1ef4:	003d7b06 	br	14e4 <___vfprintf_internal_r+0xb54>
    1ef8:	dc800e17 	ldw	r18,56(sp)
    1efc:	dc400d17 	ldw	r17,52(sp)
    1f00:	07000074 	movhi	fp,1
    1f04:	e7003084 	addi	fp,fp,194
    1f08:	003bc006 	br	e0c <___vfprintf_internal_r+0x47c>
    1f0c:	d9014f17 	ldw	r4,1340(sp)
    1f10:	b00b883a 	mov	r5,r22
    1f14:	d9800c04 	addi	r6,sp,48
    1f18:	00009380 	call	938 <__sprint_r>
    1f1c:	103c541e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
    1f20:	dc800e17 	ldw	r18,56(sp)
    1f24:	d8c01904 	addi	r3,sp,100
    1f28:	003ce906 	br	12d0 <___vfprintf_internal_r+0x940>
    1f2c:	3c000017 	ldw	r16,0(r7)
    1f30:	0009883a 	mov	r4,zero
    1f34:	39c00104 	addi	r7,r7,4
    1f38:	0023883a 	mov	r17,zero
    1f3c:	d9c14015 	stw	r7,1280(sp)
    1f40:	d8000405 	stb	zero,16(sp)
    1f44:	003d2006 	br	13c8 <___vfprintf_internal_r+0xa38>
    1f48:	38800017 	ldw	r2,0(r7)
    1f4c:	39c00104 	addi	r7,r7,4
    1f50:	d9c14015 	stw	r7,1280(sp)
    1f54:	1023d7fa 	srai	r17,r2,31
    1f58:	1021883a 	mov	r16,r2
    1f5c:	003d1806 	br	13c0 <___vfprintf_internal_r+0xa30>
    1f60:	3c000017 	ldw	r16,0(r7)
    1f64:	01000044 	movi	r4,1
    1f68:	39c00104 	addi	r7,r7,4
    1f6c:	0023883a 	mov	r17,zero
    1f70:	d9c14015 	stw	r7,1280(sp)
    1f74:	d8000405 	stb	zero,16(sp)
    1f78:	003d1306 	br	13c8 <___vfprintf_internal_r+0xa38>
    1f7c:	00800074 	movhi	r2,1
    1f80:	10802c04 	addi	r2,r2,176
    1f84:	94800044 	addi	r18,r18,1
    1f88:	8c400044 	addi	r17,r17,1
    1f8c:	a8800015 	stw	r2,0(r21)
    1f90:	00c00044 	movi	r3,1
    1f94:	008001c4 	movi	r2,7
    1f98:	a8c00115 	stw	r3,4(r21)
    1f9c:	dc800e15 	stw	r18,56(sp)
    1fa0:	dc400d15 	stw	r17,52(sp)
    1fa4:	1440ca16 	blt	r2,r17,22d0 <___vfprintf_internal_r+0x1940>
    1fa8:	a8c00204 	addi	r3,r21,8
    1fac:	2000061e 	bne	r4,zero,1fc8 <___vfprintf_internal_r+0x1638>
    1fb0:	d9414717 	ldw	r5,1308(sp)
    1fb4:	2800041e 	bne	r5,zero,1fc8 <___vfprintf_internal_r+0x1638>
    1fb8:	d9814c17 	ldw	r6,1328(sp)
    1fbc:	3080004c 	andi	r2,r6,1
    1fc0:	1005003a 	cmpeq	r2,r2,zero
    1fc4:	103bf01e 	bne	r2,zero,f88 <___vfprintf_internal_r+0x5f8>
    1fc8:	00800044 	movi	r2,1
    1fcc:	dc400d17 	ldw	r17,52(sp)
    1fd0:	18800115 	stw	r2,4(r3)
    1fd4:	d8814917 	ldw	r2,1316(sp)
    1fd8:	94800044 	addi	r18,r18,1
    1fdc:	8c400044 	addi	r17,r17,1
    1fe0:	18800015 	stw	r2,0(r3)
    1fe4:	008001c4 	movi	r2,7
    1fe8:	dc800e15 	stw	r18,56(sp)
    1fec:	dc400d15 	stw	r17,52(sp)
    1ff0:	1440ca16 	blt	r2,r17,231c <___vfprintf_internal_r+0x198c>
    1ff4:	18c00204 	addi	r3,r3,8
    1ff8:	0121c83a 	sub	r16,zero,r4
    1ffc:	0400500e 	bge	zero,r16,2140 <___vfprintf_internal_r+0x17b0>
    2000:	00800404 	movi	r2,16
    2004:	1400800e 	bge	r2,r16,2208 <___vfprintf_internal_r+0x1878>
    2008:	1027883a 	mov	r19,r2
    200c:	07000074 	movhi	fp,1
    2010:	e7002c84 	addi	fp,fp,178
    2014:	050001c4 	movi	r20,7
    2018:	00000306 	br	2028 <___vfprintf_internal_r+0x1698>
    201c:	18c00204 	addi	r3,r3,8
    2020:	843ffc04 	addi	r16,r16,-16
    2024:	9c007a0e 	bge	r19,r16,2210 <___vfprintf_internal_r+0x1880>
    2028:	94800404 	addi	r18,r18,16
    202c:	8c400044 	addi	r17,r17,1
    2030:	1f000015 	stw	fp,0(r3)
    2034:	1cc00115 	stw	r19,4(r3)
    2038:	dc800e15 	stw	r18,56(sp)
    203c:	dc400d15 	stw	r17,52(sp)
    2040:	a47ff60e 	bge	r20,r17,201c <___vfprintf_internal_r+0x168c>
    2044:	d9014f17 	ldw	r4,1340(sp)
    2048:	b00b883a 	mov	r5,r22
    204c:	d9800c04 	addi	r6,sp,48
    2050:	00009380 	call	938 <__sprint_r>
    2054:	103c061e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
    2058:	dc800e17 	ldw	r18,56(sp)
    205c:	dc400d17 	ldw	r17,52(sp)
    2060:	d8c01904 	addi	r3,sp,100
    2064:	003fee06 	br	2020 <___vfprintf_internal_r+0x1690>
    2068:	3c000017 	ldw	r16,0(r7)
    206c:	0023883a 	mov	r17,zero
    2070:	39c00104 	addi	r7,r7,4
    2074:	d9c14015 	stw	r7,1280(sp)
    2078:	003e9206 	br	1ac4 <___vfprintf_internal_r+0x1134>
    207c:	d9401904 	addi	r5,sp,100
    2080:	dd000f04 	addi	r20,sp,60
    2084:	d9414115 	stw	r5,1284(sp)
    2088:	d9814417 	ldw	r6,1296(sp)
    208c:	880a973a 	slli	r5,r17,28
    2090:	8004d13a 	srli	r2,r16,4
    2094:	810003cc 	andi	r4,r16,15
    2098:	3109883a 	add	r4,r6,r4
    209c:	2884b03a 	or	r2,r5,r2
    20a0:	21400003 	ldbu	r5,0(r4)
    20a4:	d9014117 	ldw	r4,1284(sp)
    20a8:	8806d13a 	srli	r3,r17,4
    20ac:	1021883a 	mov	r16,r2
    20b0:	213fffc4 	addi	r4,r4,-1
    20b4:	d9014115 	stw	r4,1284(sp)
    20b8:	d9814117 	ldw	r6,1284(sp)
    20bc:	10c8b03a 	or	r4,r2,r3
    20c0:	1823883a 	mov	r17,r3
    20c4:	31400005 	stb	r5,0(r6)
    20c8:	203fef1e 	bne	r4,zero,2088 <___vfprintf_internal_r+0x16f8>
    20cc:	003ccb06 	br	13fc <___vfprintf_internal_r+0xa6c>
    20d0:	00800c04 	movi	r2,48
    20d4:	d98018c4 	addi	r6,sp,99
    20d8:	dd000f04 	addi	r20,sp,60
    20dc:	d88018c5 	stb	r2,99(sp)
    20e0:	d9814115 	stw	r6,1284(sp)
    20e4:	003cc506 	br	13fc <___vfprintf_internal_r+0xa6c>
    20e8:	dc400d17 	ldw	r17,52(sp)
    20ec:	07000074 	movhi	fp,1
    20f0:	e7003084 	addi	fp,fp,194
    20f4:	003bc706 	br	1014 <___vfprintf_internal_r+0x684>
    20f8:	d9414c17 	ldw	r5,1328(sp)
    20fc:	2880040c 	andi	r2,r5,16
    2100:	10007c26 	beq	r2,zero,22f4 <___vfprintf_internal_r+0x1964>
    2104:	38800017 	ldw	r2,0(r7)
    2108:	39c00104 	addi	r7,r7,4
    210c:	d9c14015 	stw	r7,1280(sp)
    2110:	d9814b17 	ldw	r6,1324(sp)
    2114:	d9c14017 	ldw	r7,1280(sp)
    2118:	11800015 	stw	r6,0(r2)
    211c:	003a7806 	br	b00 <___vfprintf_internal_r+0x170>
    2120:	d9014f17 	ldw	r4,1340(sp)
    2124:	b00b883a 	mov	r5,r22
    2128:	d9800c04 	addi	r6,sp,48
    212c:	00009380 	call	938 <__sprint_r>
    2130:	103bcf1e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
    2134:	dc800e17 	ldw	r18,56(sp)
    2138:	dc400d17 	ldw	r17,52(sp)
    213c:	d8c01904 	addi	r3,sp,100
    2140:	d9014717 	ldw	r4,1308(sp)
    2144:	d9414117 	ldw	r5,1284(sp)
    2148:	8c400044 	addi	r17,r17,1
    214c:	9125883a 	add	r18,r18,r4
    2150:	008001c4 	movi	r2,7
    2154:	19400015 	stw	r5,0(r3)
    2158:	19000115 	stw	r4,4(r3)
    215c:	dc800e15 	stw	r18,56(sp)
    2160:	dc400d15 	stw	r17,52(sp)
    2164:	147cee16 	blt	r2,r17,1520 <___vfprintf_internal_r+0xb90>
    2168:	18c00204 	addi	r3,r3,8
    216c:	003b8606 	br	f88 <___vfprintf_internal_r+0x5f8>
    2170:	38c00017 	ldw	r3,0(r7)
    2174:	39000204 	addi	r4,r7,8
    2178:	d9014015 	stw	r4,1280(sp)
    217c:	d8c14215 	stw	r3,1288(sp)
    2180:	39c00117 	ldw	r7,4(r7)
    2184:	d9c14315 	stw	r7,1292(sp)
    2188:	003e2006 	br	1a0c <___vfprintf_internal_r+0x107c>
    218c:	0005883a 	mov	r2,zero
    2190:	1409c83a 	sub	r4,r2,r16
    2194:	1105803a 	cmpltu	r2,r2,r4
    2198:	044bc83a 	sub	r5,zero,r17
    219c:	2885c83a 	sub	r2,r5,r2
    21a0:	2021883a 	mov	r16,r4
    21a4:	1023883a 	mov	r17,r2
    21a8:	01000044 	movi	r4,1
    21ac:	00800b44 	movi	r2,45
    21b0:	d8800405 	stb	r2,16(sp)
    21b4:	003c8406 	br	13c8 <___vfprintf_internal_r+0xa38>
    21b8:	d9014f17 	ldw	r4,1340(sp)
    21bc:	b00b883a 	mov	r5,r22
    21c0:	d9800c04 	addi	r6,sp,48
    21c4:	00009380 	call	938 <__sprint_r>
    21c8:	103ba91e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
    21cc:	dc800e17 	ldw	r18,56(sp)
    21d0:	dc400d17 	ldw	r17,52(sp)
    21d4:	d9000517 	ldw	r4,20(sp)
    21d8:	d9401904 	addi	r5,sp,100
    21dc:	003da706 	br	187c <___vfprintf_internal_r+0xeec>
    21e0:	d9014f17 	ldw	r4,1340(sp)
    21e4:	b00b883a 	mov	r5,r22
    21e8:	d9800c04 	addi	r6,sp,48
    21ec:	00009380 	call	938 <__sprint_r>
    21f0:	103b9f1e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
    21f4:	dc800e17 	ldw	r18,56(sp)
    21f8:	dc400d17 	ldw	r17,52(sp)
    21fc:	d9000517 	ldw	r4,20(sp)
    2200:	d8c01904 	addi	r3,sp,100
    2204:	003d9106 	br	184c <___vfprintf_internal_r+0xebc>
    2208:	07000074 	movhi	fp,1
    220c:	e7002c84 	addi	fp,fp,178
    2210:	9425883a 	add	r18,r18,r16
    2214:	8c400044 	addi	r17,r17,1
    2218:	008001c4 	movi	r2,7
    221c:	1f000015 	stw	fp,0(r3)
    2220:	1c000115 	stw	r16,4(r3)
    2224:	dc800e15 	stw	r18,56(sp)
    2228:	dc400d15 	stw	r17,52(sp)
    222c:	147fbc16 	blt	r2,r17,2120 <___vfprintf_internal_r+0x1790>
    2230:	18c00204 	addi	r3,r3,8
    2234:	003fc206 	br	2140 <___vfprintf_internal_r+0x17b0>
    2238:	d9014f17 	ldw	r4,1340(sp)
    223c:	b00b883a 	mov	r5,r22
    2240:	d9800c04 	addi	r6,sp,48
    2244:	00009380 	call	938 <__sprint_r>
    2248:	103b891e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
    224c:	dc800e17 	ldw	r18,56(sp)
    2250:	d9000517 	ldw	r4,20(sp)
    2254:	d8c01904 	addi	r3,sp,100
    2258:	003d0206 	br	1664 <___vfprintf_internal_r+0xcd4>
    225c:	07000074 	movhi	fp,1
    2260:	e7002c84 	addi	fp,fp,178
    2264:	003be406 	br	11f8 <___vfprintf_internal_r+0x868>
    2268:	00800074 	movhi	r2,1
    226c:	10801b04 	addi	r2,r2,108
    2270:	d8814115 	stw	r2,1284(sp)
    2274:	003df506 	br	1a4c <___vfprintf_internal_r+0x10bc>
    2278:	d9014217 	ldw	r4,1288(sp)
    227c:	d9414317 	ldw	r5,1292(sp)
    2280:	00073700 	call	7370 <__isnand>
    2284:	10003926 	beq	r2,zero,236c <___vfprintf_internal_r+0x19dc>
    2288:	d9414d17 	ldw	r5,1332(sp)
    228c:	008011c4 	movi	r2,71
    2290:	1140ce16 	blt	r2,r5,25cc <___vfprintf_internal_r+0x1c3c>
    2294:	01800074 	movhi	r6,1
    2298:	31801c04 	addi	r6,r6,112
    229c:	d9814115 	stw	r6,1284(sp)
    22a0:	003dea06 	br	1a4c <___vfprintf_internal_r+0x10bc>
    22a4:	d9014c17 	ldw	r4,1328(sp)
    22a8:	bdc00044 	addi	r23,r23,1
    22ac:	b8c00007 	ldb	r3,0(r23)
    22b0:	21000814 	ori	r4,r4,32
    22b4:	d9014c15 	stw	r4,1328(sp)
    22b8:	003a3406 	br	b8c <___vfprintf_internal_r+0x1fc>
    22bc:	dcc14515 	stw	r19,1300(sp)
    22c0:	98011016 	blt	r19,zero,2704 <___vfprintf_internal_r+0x1d74>
    22c4:	980f883a 	mov	r7,r19
    22c8:	d8014615 	stw	zero,1304(sp)
    22cc:	003c5206 	br	1418 <___vfprintf_internal_r+0xa88>
    22d0:	d9014f17 	ldw	r4,1340(sp)
    22d4:	b00b883a 	mov	r5,r22
    22d8:	d9800c04 	addi	r6,sp,48
    22dc:	00009380 	call	938 <__sprint_r>
    22e0:	103b631e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
    22e4:	dc800e17 	ldw	r18,56(sp)
    22e8:	d9000517 	ldw	r4,20(sp)
    22ec:	d8c01904 	addi	r3,sp,100
    22f0:	003f2e06 	br	1fac <___vfprintf_internal_r+0x161c>
    22f4:	d8c14c17 	ldw	r3,1328(sp)
    22f8:	1880100c 	andi	r2,r3,64
    22fc:	1000a026 	beq	r2,zero,2580 <___vfprintf_internal_r+0x1bf0>
    2300:	38800017 	ldw	r2,0(r7)
    2304:	39c00104 	addi	r7,r7,4
    2308:	d9c14015 	stw	r7,1280(sp)
    230c:	d9014b17 	ldw	r4,1324(sp)
    2310:	d9c14017 	ldw	r7,1280(sp)
    2314:	1100000d 	sth	r4,0(r2)
    2318:	0039f906 	br	b00 <___vfprintf_internal_r+0x170>
    231c:	d9014f17 	ldw	r4,1340(sp)
    2320:	b00b883a 	mov	r5,r22
    2324:	d9800c04 	addi	r6,sp,48
    2328:	00009380 	call	938 <__sprint_r>
    232c:	103b501e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
    2330:	dc800e17 	ldw	r18,56(sp)
    2334:	dc400d17 	ldw	r17,52(sp)
    2338:	d9000517 	ldw	r4,20(sp)
    233c:	d8c01904 	addi	r3,sp,100
    2340:	003f2d06 	br	1ff8 <___vfprintf_internal_r+0x1668>
    2344:	00800184 	movi	r2,6
    2348:	14c09a36 	bltu	r2,r19,25b4 <___vfprintf_internal_r+0x1c24>
    234c:	dcc14515 	stw	r19,1300(sp)
    2350:	9800010e 	bge	r19,zero,2358 <___vfprintf_internal_r+0x19c8>
    2354:	d8014515 	stw	zero,1300(sp)
    2358:	00800074 	movhi	r2,1
    235c:	10801e04 	addi	r2,r2,120
    2360:	980f883a 	mov	r7,r19
    2364:	d8814115 	stw	r2,1284(sp)
    2368:	003a7806 	br	d4c <___vfprintf_internal_r+0x3bc>
    236c:	00bfffc4 	movi	r2,-1
    2370:	9880e226 	beq	r19,r2,26fc <___vfprintf_internal_r+0x1d6c>
    2374:	d9414d17 	ldw	r5,1332(sp)
    2378:	008019c4 	movi	r2,103
    237c:	2880dc26 	beq	r5,r2,26f0 <___vfprintf_internal_r+0x1d60>
    2380:	008011c4 	movi	r2,71
    2384:	2880da26 	beq	r5,r2,26f0 <___vfprintf_internal_r+0x1d60>
    2388:	d9414c17 	ldw	r5,1328(sp)
    238c:	d9014317 	ldw	r4,1292(sp)
    2390:	d9814217 	ldw	r6,1288(sp)
    2394:	29404014 	ori	r5,r5,256
    2398:	d9414c15 	stw	r5,1328(sp)
    239c:	2000cc16 	blt	r4,zero,26d0 <___vfprintf_internal_r+0x1d40>
    23a0:	3021883a 	mov	r16,r6
    23a4:	2023883a 	mov	r17,r4
    23a8:	0039883a 	mov	fp,zero
    23ac:	d9414d17 	ldw	r5,1332(sp)
    23b0:	00801984 	movi	r2,102
    23b4:	2880b726 	beq	r5,r2,2694 <___vfprintf_internal_r+0x1d04>
    23b8:	00801184 	movi	r2,70
    23bc:	2880b526 	beq	r5,r2,2694 <___vfprintf_internal_r+0x1d04>
    23c0:	00801944 	movi	r2,101
    23c4:	2880c826 	beq	r5,r2,26e8 <___vfprintf_internal_r+0x1d58>
    23c8:	00801144 	movi	r2,69
    23cc:	2880c626 	beq	r5,r2,26e8 <___vfprintf_internal_r+0x1d58>
    23d0:	9829883a 	mov	r20,r19
    23d4:	d9014f17 	ldw	r4,1340(sp)
    23d8:	d8800504 	addi	r2,sp,20
    23dc:	880d883a 	mov	r6,r17
    23e0:	d8800115 	stw	r2,4(sp)
    23e4:	d8c00604 	addi	r3,sp,24
    23e8:	d8800704 	addi	r2,sp,28
    23ec:	800b883a 	mov	r5,r16
    23f0:	01c00084 	movi	r7,2
    23f4:	d8c00215 	stw	r3,8(sp)
    23f8:	d8800315 	stw	r2,12(sp)
    23fc:	dd000015 	stw	r20,0(sp)
    2400:	0002bb40 	call	2bb4 <_dtoa_r>
    2404:	d9814d17 	ldw	r6,1332(sp)
    2408:	d8814115 	stw	r2,1284(sp)
    240c:	008019c4 	movi	r2,103
    2410:	30809526 	beq	r6,r2,2668 <___vfprintf_internal_r+0x1cd8>
    2414:	d8c14d17 	ldw	r3,1332(sp)
    2418:	008011c4 	movi	r2,71
    241c:	18809226 	beq	r3,r2,2668 <___vfprintf_internal_r+0x1cd8>
    2420:	d9414117 	ldw	r5,1284(sp)
    2424:	d9814d17 	ldw	r6,1332(sp)
    2428:	00801984 	movi	r2,102
    242c:	2d25883a 	add	r18,r5,r20
    2430:	30808626 	beq	r6,r2,264c <___vfprintf_internal_r+0x1cbc>
    2434:	00801184 	movi	r2,70
    2438:	30808426 	beq	r6,r2,264c <___vfprintf_internal_r+0x1cbc>
    243c:	000d883a 	mov	r6,zero
    2440:	000f883a 	mov	r7,zero
    2444:	880b883a 	mov	r5,r17
    2448:	8009883a 	mov	r4,r16
    244c:	00091580 	call	9158 <__eqdf2>
    2450:	1000751e 	bne	r2,zero,2628 <___vfprintf_internal_r+0x1c98>
    2454:	9005883a 	mov	r2,r18
    2458:	dc800715 	stw	r18,28(sp)
    245c:	d9014117 	ldw	r4,1284(sp)
    2460:	d9414d17 	ldw	r5,1332(sp)
    2464:	00c019c4 	movi	r3,103
    2468:	1125c83a 	sub	r18,r2,r4
    246c:	28c06826 	beq	r5,r3,2610 <___vfprintf_internal_r+0x1c80>
    2470:	008011c4 	movi	r2,71
    2474:	28806626 	beq	r5,r2,2610 <___vfprintf_internal_r+0x1c80>
    2478:	d9000517 	ldw	r4,20(sp)
    247c:	d8c14d17 	ldw	r3,1332(sp)
    2480:	00801944 	movi	r2,101
    2484:	10c05516 	blt	r2,r3,25dc <___vfprintf_internal_r+0x1c4c>
    2488:	213fffc4 	addi	r4,r4,-1
    248c:	d9000515 	stw	r4,20(sp)
    2490:	d8c00805 	stb	r3,32(sp)
    2494:	2021883a 	mov	r16,r4
    2498:	2000c116 	blt	r4,zero,27a0 <___vfprintf_internal_r+0x1e10>
    249c:	00800ac4 	movi	r2,43
    24a0:	d8800845 	stb	r2,33(sp)
    24a4:	00800244 	movi	r2,9
    24a8:	1400af0e 	bge	r2,r16,2768 <___vfprintf_internal_r+0x1dd8>
    24ac:	1027883a 	mov	r19,r2
    24b0:	dc400b84 	addi	r17,sp,46
    24b4:	8009883a 	mov	r4,r16
    24b8:	01400284 	movi	r5,10
    24bc:	00007280 	call	728 <__modsi3>
    24c0:	10800c04 	addi	r2,r2,48
    24c4:	8c7fffc4 	addi	r17,r17,-1
    24c8:	8009883a 	mov	r4,r16
    24cc:	01400284 	movi	r5,10
    24d0:	88800005 	stb	r2,0(r17)
    24d4:	00006c80 	call	6c8 <__divsi3>
    24d8:	1021883a 	mov	r16,r2
    24dc:	98bff516 	blt	r19,r2,24b4 <___vfprintf_internal_r+0x1b24>
    24e0:	10c00c04 	addi	r3,r2,48
    24e4:	d88009c4 	addi	r2,sp,39
    24e8:	108001c4 	addi	r2,r2,7
    24ec:	897fffc4 	addi	r5,r17,-1
    24f0:	88ffffc5 	stb	r3,-1(r17)
    24f4:	2880a72e 	bgeu	r5,r2,2794 <___vfprintf_internal_r+0x1e04>
    24f8:	1009883a 	mov	r4,r2
    24fc:	d9800804 	addi	r6,sp,32
    2500:	d8c00884 	addi	r3,sp,34
    2504:	28800003 	ldbu	r2,0(r5)
    2508:	29400044 	addi	r5,r5,1
    250c:	18800005 	stb	r2,0(r3)
    2510:	18c00044 	addi	r3,r3,1
    2514:	293ffb36 	bltu	r5,r4,2504 <___vfprintf_internal_r+0x1b74>
    2518:	1987c83a 	sub	r3,r3,r6
    251c:	00800044 	movi	r2,1
    2520:	d8c14815 	stw	r3,1312(sp)
    2524:	90cf883a 	add	r7,r18,r3
    2528:	1480960e 	bge	r2,r18,2784 <___vfprintf_internal_r+0x1df4>
    252c:	39c00044 	addi	r7,r7,1
    2530:	d9c14515 	stw	r7,1300(sp)
    2534:	38003416 	blt	r7,zero,2608 <___vfprintf_internal_r+0x1c78>
    2538:	e0803fcc 	andi	r2,fp,255
    253c:	1080201c 	xori	r2,r2,128
    2540:	10bfe004 	addi	r2,r2,-128
    2544:	10004e26 	beq	r2,zero,2680 <___vfprintf_internal_r+0x1cf0>
    2548:	00800b44 	movi	r2,45
    254c:	dc814715 	stw	r18,1308(sp)
    2550:	d8014615 	stw	zero,1304(sp)
    2554:	d8800405 	stb	r2,16(sp)
    2558:	003bb106 	br	1420 <___vfprintf_internal_r+0xa90>
    255c:	00800b44 	movi	r2,45
    2560:	d8800405 	stb	r2,16(sp)
    2564:	003d3306 	br	1a34 <___vfprintf_internal_r+0x10a4>
    2568:	d9014f17 	ldw	r4,1340(sp)
    256c:	b00b883a 	mov	r5,r22
    2570:	d9800c04 	addi	r6,sp,48
    2574:	00009380 	call	938 <__sprint_r>
    2578:	103abd1e 	bne	r2,zero,1070 <___vfprintf_internal_r+0x6e0>
    257c:	003abb06 	br	106c <___vfprintf_internal_r+0x6dc>
    2580:	38800017 	ldw	r2,0(r7)
    2584:	39c00104 	addi	r7,r7,4
    2588:	d9c14015 	stw	r7,1280(sp)
    258c:	d9414b17 	ldw	r5,1324(sp)
    2590:	d9c14017 	ldw	r7,1280(sp)
    2594:	11400015 	stw	r5,0(r2)
    2598:	00395906 	br	b00 <___vfprintf_internal_r+0x170>
    259c:	980f883a 	mov	r7,r19
    25a0:	dcc14515 	stw	r19,1300(sp)
    25a4:	d8014615 	stw	zero,1304(sp)
    25a8:	003b9b06 	br	1418 <___vfprintf_internal_r+0xa88>
    25ac:	0027883a 	mov	r19,zero
    25b0:	00397806 	br	b94 <___vfprintf_internal_r+0x204>
    25b4:	00c00074 	movhi	r3,1
    25b8:	18c01e04 	addi	r3,r3,120
    25bc:	100f883a 	mov	r7,r2
    25c0:	d8814515 	stw	r2,1300(sp)
    25c4:	d8c14115 	stw	r3,1284(sp)
    25c8:	0039e006 	br	d4c <___vfprintf_internal_r+0x3bc>
    25cc:	00800074 	movhi	r2,1
    25d0:	10801d04 	addi	r2,r2,116
    25d4:	d8814115 	stw	r2,1284(sp)
    25d8:	003d1c06 	br	1a4c <___vfprintf_internal_r+0x10bc>
    25dc:	d9414d17 	ldw	r5,1332(sp)
    25e0:	00801984 	movi	r2,102
    25e4:	28804926 	beq	r5,r2,270c <___vfprintf_internal_r+0x1d7c>
    25e8:	200f883a 	mov	r7,r4
    25ec:	24805716 	blt	r4,r18,274c <___vfprintf_internal_r+0x1dbc>
    25f0:	d9414c17 	ldw	r5,1328(sp)
    25f4:	2880004c 	andi	r2,r5,1
    25f8:	10000126 	beq	r2,zero,2600 <___vfprintf_internal_r+0x1c70>
    25fc:	21c00044 	addi	r7,r4,1
    2600:	d9c14515 	stw	r7,1300(sp)
    2604:	383fcc0e 	bge	r7,zero,2538 <___vfprintf_internal_r+0x1ba8>
    2608:	d8014515 	stw	zero,1300(sp)
    260c:	003fca06 	br	2538 <___vfprintf_internal_r+0x1ba8>
    2610:	d9000517 	ldw	r4,20(sp)
    2614:	00bfff04 	movi	r2,-4
    2618:	1100480e 	bge	r2,r4,273c <___vfprintf_internal_r+0x1dac>
    261c:	99004716 	blt	r19,r4,273c <___vfprintf_internal_r+0x1dac>
    2620:	d8c14d15 	stw	r3,1332(sp)
    2624:	003ff006 	br	25e8 <___vfprintf_internal_r+0x1c58>
    2628:	d8800717 	ldw	r2,28(sp)
    262c:	14bf8b2e 	bgeu	r2,r18,245c <___vfprintf_internal_r+0x1acc>
    2630:	9007883a 	mov	r3,r18
    2634:	01000c04 	movi	r4,48
    2638:	11000005 	stb	r4,0(r2)
    263c:	10800044 	addi	r2,r2,1
    2640:	d8800715 	stw	r2,28(sp)
    2644:	18bffc1e 	bne	r3,r2,2638 <___vfprintf_internal_r+0x1ca8>
    2648:	003f8406 	br	245c <___vfprintf_internal_r+0x1acc>
    264c:	d8814117 	ldw	r2,1284(sp)
    2650:	10c00007 	ldb	r3,0(r2)
    2654:	00800c04 	movi	r2,48
    2658:	18805b26 	beq	r3,r2,27c8 <___vfprintf_internal_r+0x1e38>
    265c:	d9000517 	ldw	r4,20(sp)
    2660:	9125883a 	add	r18,r18,r4
    2664:	003f7506 	br	243c <___vfprintf_internal_r+0x1aac>
    2668:	d9014c17 	ldw	r4,1328(sp)
    266c:	2080004c 	andi	r2,r4,1
    2670:	1005003a 	cmpeq	r2,r2,zero
    2674:	103f6a26 	beq	r2,zero,2420 <___vfprintf_internal_r+0x1a90>
    2678:	d8800717 	ldw	r2,28(sp)
    267c:	003f7706 	br	245c <___vfprintf_internal_r+0x1acc>
    2680:	d9c14515 	stw	r7,1300(sp)
    2684:	38004d16 	blt	r7,zero,27bc <___vfprintf_internal_r+0x1e2c>
    2688:	dc814715 	stw	r18,1308(sp)
    268c:	d8014615 	stw	zero,1304(sp)
    2690:	003b6106 	br	1418 <___vfprintf_internal_r+0xa88>
    2694:	d9014f17 	ldw	r4,1340(sp)
    2698:	d8800504 	addi	r2,sp,20
    269c:	d8800115 	stw	r2,4(sp)
    26a0:	d8c00604 	addi	r3,sp,24
    26a4:	d8800704 	addi	r2,sp,28
    26a8:	800b883a 	mov	r5,r16
    26ac:	880d883a 	mov	r6,r17
    26b0:	01c000c4 	movi	r7,3
    26b4:	d8c00215 	stw	r3,8(sp)
    26b8:	d8800315 	stw	r2,12(sp)
    26bc:	dcc00015 	stw	r19,0(sp)
    26c0:	9829883a 	mov	r20,r19
    26c4:	0002bb40 	call	2bb4 <_dtoa_r>
    26c8:	d8814115 	stw	r2,1284(sp)
    26cc:	003f5106 	br	2414 <___vfprintf_internal_r+0x1a84>
    26d0:	d8c14217 	ldw	r3,1288(sp)
    26d4:	d9014317 	ldw	r4,1292(sp)
    26d8:	07000b44 	movi	fp,45
    26dc:	1821883a 	mov	r16,r3
    26e0:	2460003c 	xorhi	r17,r4,32768
    26e4:	003f3106 	br	23ac <___vfprintf_internal_r+0x1a1c>
    26e8:	9d000044 	addi	r20,r19,1
    26ec:	003f3906 	br	23d4 <___vfprintf_internal_r+0x1a44>
    26f0:	983f251e 	bne	r19,zero,2388 <___vfprintf_internal_r+0x19f8>
    26f4:	04c00044 	movi	r19,1
    26f8:	003f2306 	br	2388 <___vfprintf_internal_r+0x19f8>
    26fc:	04c00184 	movi	r19,6
    2700:	003f2106 	br	2388 <___vfprintf_internal_r+0x19f8>
    2704:	d8014515 	stw	zero,1300(sp)
    2708:	003eee06 	br	22c4 <___vfprintf_internal_r+0x1934>
    270c:	200f883a 	mov	r7,r4
    2710:	0100370e 	bge	zero,r4,27f0 <___vfprintf_internal_r+0x1e60>
    2714:	9800031e 	bne	r19,zero,2724 <___vfprintf_internal_r+0x1d94>
    2718:	d9814c17 	ldw	r6,1328(sp)
    271c:	3080004c 	andi	r2,r6,1
    2720:	103fb726 	beq	r2,zero,2600 <___vfprintf_internal_r+0x1c70>
    2724:	20800044 	addi	r2,r4,1
    2728:	98a7883a 	add	r19,r19,r2
    272c:	dcc14515 	stw	r19,1300(sp)
    2730:	980f883a 	mov	r7,r19
    2734:	983f800e 	bge	r19,zero,2538 <___vfprintf_internal_r+0x1ba8>
    2738:	003fb306 	br	2608 <___vfprintf_internal_r+0x1c78>
    273c:	d9814d17 	ldw	r6,1332(sp)
    2740:	31bfff84 	addi	r6,r6,-2
    2744:	d9814d15 	stw	r6,1332(sp)
    2748:	003f4c06 	br	247c <___vfprintf_internal_r+0x1aec>
    274c:	0100180e 	bge	zero,r4,27b0 <___vfprintf_internal_r+0x1e20>
    2750:	00800044 	movi	r2,1
    2754:	1485883a 	add	r2,r2,r18
    2758:	d8814515 	stw	r2,1300(sp)
    275c:	100f883a 	mov	r7,r2
    2760:	103f750e 	bge	r2,zero,2538 <___vfprintf_internal_r+0x1ba8>
    2764:	003fa806 	br	2608 <___vfprintf_internal_r+0x1c78>
    2768:	80c00c04 	addi	r3,r16,48
    276c:	00800c04 	movi	r2,48
    2770:	d8c008c5 	stb	r3,35(sp)
    2774:	d9800804 	addi	r6,sp,32
    2778:	d8c00904 	addi	r3,sp,36
    277c:	d8800885 	stb	r2,34(sp)
    2780:	003f6506 	br	2518 <___vfprintf_internal_r+0x1b88>
    2784:	d9014c17 	ldw	r4,1328(sp)
    2788:	2084703a 	and	r2,r4,r2
    278c:	103f9c26 	beq	r2,zero,2600 <___vfprintf_internal_r+0x1c70>
    2790:	003f6606 	br	252c <___vfprintf_internal_r+0x1b9c>
    2794:	d9800804 	addi	r6,sp,32
    2798:	d8c00884 	addi	r3,sp,34
    279c:	003f5e06 	br	2518 <___vfprintf_internal_r+0x1b88>
    27a0:	00800b44 	movi	r2,45
    27a4:	0121c83a 	sub	r16,zero,r4
    27a8:	d8800845 	stb	r2,33(sp)
    27ac:	003f3d06 	br	24a4 <___vfprintf_internal_r+0x1b14>
    27b0:	00800084 	movi	r2,2
    27b4:	1105c83a 	sub	r2,r2,r4
    27b8:	003fe606 	br	2754 <___vfprintf_internal_r+0x1dc4>
    27bc:	d8014515 	stw	zero,1300(sp)
    27c0:	dc814715 	stw	r18,1308(sp)
    27c4:	003fb106 	br	268c <___vfprintf_internal_r+0x1cfc>
    27c8:	000d883a 	mov	r6,zero
    27cc:	000f883a 	mov	r7,zero
    27d0:	8009883a 	mov	r4,r16
    27d4:	880b883a 	mov	r5,r17
    27d8:	00091e00 	call	91e0 <__nedf2>
    27dc:	103f9f26 	beq	r2,zero,265c <___vfprintf_internal_r+0x1ccc>
    27e0:	00800044 	movi	r2,1
    27e4:	1509c83a 	sub	r4,r2,r20
    27e8:	d9000515 	stw	r4,20(sp)
    27ec:	003f9b06 	br	265c <___vfprintf_internal_r+0x1ccc>
    27f0:	98000d1e 	bne	r19,zero,2828 <___vfprintf_internal_r+0x1e98>
    27f4:	d8c14c17 	ldw	r3,1328(sp)
    27f8:	1880004c 	andi	r2,r3,1
    27fc:	10000a1e 	bne	r2,zero,2828 <___vfprintf_internal_r+0x1e98>
    2800:	01000044 	movi	r4,1
    2804:	200f883a 	mov	r7,r4
    2808:	d9014515 	stw	r4,1300(sp)
    280c:	003f4a06 	br	2538 <___vfprintf_internal_r+0x1ba8>
    2810:	3cc00017 	ldw	r19,0(r7)
    2814:	39c00104 	addi	r7,r7,4
    2818:	983d0e0e 	bge	r19,zero,1c54 <___vfprintf_internal_r+0x12c4>
    281c:	b8c00007 	ldb	r3,0(r23)
    2820:	04ffffc4 	movi	r19,-1
    2824:	0038d906 	br	b8c <___vfprintf_internal_r+0x1fc>
    2828:	9cc00084 	addi	r19,r19,2
    282c:	dcc14515 	stw	r19,1300(sp)
    2830:	980f883a 	mov	r7,r19
    2834:	983f400e 	bge	r19,zero,2538 <___vfprintf_internal_r+0x1ba8>
    2838:	003f7306 	br	2608 <___vfprintf_internal_r+0x1c78>

0000283c <__vfprintf_internal>:
    283c:	00800074 	movhi	r2,1
    2840:	10876c04 	addi	r2,r2,7600
    2844:	2013883a 	mov	r9,r4
    2848:	11000017 	ldw	r4,0(r2)
    284c:	2805883a 	mov	r2,r5
    2850:	300f883a 	mov	r7,r6
    2854:	480b883a 	mov	r5,r9
    2858:	100d883a 	mov	r6,r2
    285c:	00009901 	jmpi	990 <___vfprintf_internal_r>

00002860 <__swsetup_r>:
    2860:	00800074 	movhi	r2,1
    2864:	10876c04 	addi	r2,r2,7600
    2868:	10c00017 	ldw	r3,0(r2)
    286c:	defffd04 	addi	sp,sp,-12
    2870:	dc400115 	stw	r17,4(sp)
    2874:	dc000015 	stw	r16,0(sp)
    2878:	dfc00215 	stw	ra,8(sp)
    287c:	2023883a 	mov	r17,r4
    2880:	2821883a 	mov	r16,r5
    2884:	18000226 	beq	r3,zero,2890 <__swsetup_r+0x30>
    2888:	18800e17 	ldw	r2,56(r3)
    288c:	10001f26 	beq	r2,zero,290c <__swsetup_r+0xac>
    2890:	8100030b 	ldhu	r4,12(r16)
    2894:	2080020c 	andi	r2,r4,8
    2898:	10002826 	beq	r2,zero,293c <__swsetup_r+0xdc>
    289c:	81400417 	ldw	r5,16(r16)
    28a0:	28001d26 	beq	r5,zero,2918 <__swsetup_r+0xb8>
    28a4:	2080004c 	andi	r2,r4,1
    28a8:	1005003a 	cmpeq	r2,r2,zero
    28ac:	10000b26 	beq	r2,zero,28dc <__swsetup_r+0x7c>
    28b0:	2080008c 	andi	r2,r4,2
    28b4:	10001226 	beq	r2,zero,2900 <__swsetup_r+0xa0>
    28b8:	0005883a 	mov	r2,zero
    28bc:	80800215 	stw	r2,8(r16)
    28c0:	28000b26 	beq	r5,zero,28f0 <__swsetup_r+0x90>
    28c4:	0005883a 	mov	r2,zero
    28c8:	dfc00217 	ldw	ra,8(sp)
    28cc:	dc400117 	ldw	r17,4(sp)
    28d0:	dc000017 	ldw	r16,0(sp)
    28d4:	dec00304 	addi	sp,sp,12
    28d8:	f800283a 	ret
    28dc:	80800517 	ldw	r2,20(r16)
    28e0:	80000215 	stw	zero,8(r16)
    28e4:	0085c83a 	sub	r2,zero,r2
    28e8:	80800615 	stw	r2,24(r16)
    28ec:	283ff51e 	bne	r5,zero,28c4 <__swsetup_r+0x64>
    28f0:	2080200c 	andi	r2,r4,128
    28f4:	103ff326 	beq	r2,zero,28c4 <__swsetup_r+0x64>
    28f8:	00bfffc4 	movi	r2,-1
    28fc:	003ff206 	br	28c8 <__swsetup_r+0x68>
    2900:	80800517 	ldw	r2,20(r16)
    2904:	80800215 	stw	r2,8(r16)
    2908:	003fed06 	br	28c0 <__swsetup_r+0x60>
    290c:	1809883a 	mov	r4,r3
    2910:	00044000 	call	4400 <__sinit>
    2914:	003fde06 	br	2890 <__swsetup_r+0x30>
    2918:	20c0a00c 	andi	r3,r4,640
    291c:	00808004 	movi	r2,512
    2920:	18bfe026 	beq	r3,r2,28a4 <__swsetup_r+0x44>
    2924:	8809883a 	mov	r4,r17
    2928:	800b883a 	mov	r5,r16
    292c:	00051780 	call	5178 <__smakebuf_r>
    2930:	8100030b 	ldhu	r4,12(r16)
    2934:	81400417 	ldw	r5,16(r16)
    2938:	003fda06 	br	28a4 <__swsetup_r+0x44>
    293c:	2080040c 	andi	r2,r4,16
    2940:	103fed26 	beq	r2,zero,28f8 <__swsetup_r+0x98>
    2944:	2080010c 	andi	r2,r4,4
    2948:	10001226 	beq	r2,zero,2994 <__swsetup_r+0x134>
    294c:	81400c17 	ldw	r5,48(r16)
    2950:	28000526 	beq	r5,zero,2968 <__swsetup_r+0x108>
    2954:	80801004 	addi	r2,r16,64
    2958:	28800226 	beq	r5,r2,2964 <__swsetup_r+0x104>
    295c:	8809883a 	mov	r4,r17
    2960:	00047840 	call	4784 <_free_r>
    2964:	80000c15 	stw	zero,48(r16)
    2968:	8080030b 	ldhu	r2,12(r16)
    296c:	81400417 	ldw	r5,16(r16)
    2970:	80000115 	stw	zero,4(r16)
    2974:	10bff6cc 	andi	r2,r2,65499
    2978:	8080030d 	sth	r2,12(r16)
    297c:	81400015 	stw	r5,0(r16)
    2980:	8080030b 	ldhu	r2,12(r16)
    2984:	10800214 	ori	r2,r2,8
    2988:	113fffcc 	andi	r4,r2,65535
    298c:	8080030d 	sth	r2,12(r16)
    2990:	003fc306 	br	28a0 <__swsetup_r+0x40>
    2994:	81400417 	ldw	r5,16(r16)
    2998:	003ff906 	br	2980 <__swsetup_r+0x120>

0000299c <quorem>:
    299c:	28c00417 	ldw	r3,16(r5)
    29a0:	20800417 	ldw	r2,16(r4)
    29a4:	defff604 	addi	sp,sp,-40
    29a8:	ddc00715 	stw	r23,28(sp)
    29ac:	dd400515 	stw	r21,20(sp)
    29b0:	dfc00915 	stw	ra,36(sp)
    29b4:	df000815 	stw	fp,32(sp)
    29b8:	dd800615 	stw	r22,24(sp)
    29bc:	dd000415 	stw	r20,16(sp)
    29c0:	dcc00315 	stw	r19,12(sp)
    29c4:	dc800215 	stw	r18,8(sp)
    29c8:	dc400115 	stw	r17,4(sp)
    29cc:	dc000015 	stw	r16,0(sp)
    29d0:	202f883a 	mov	r23,r4
    29d4:	282b883a 	mov	r21,r5
    29d8:	10c07416 	blt	r2,r3,2bac <quorem+0x210>
    29dc:	1c7fffc4 	addi	r17,r3,-1
    29e0:	8c45883a 	add	r2,r17,r17
    29e4:	1085883a 	add	r2,r2,r2
    29e8:	2c000504 	addi	r16,r5,20
    29ec:	24c00504 	addi	r19,r4,20
    29f0:	14ed883a 	add	r22,r2,r19
    29f4:	80a5883a 	add	r18,r16,r2
    29f8:	b7000017 	ldw	fp,0(r22)
    29fc:	91400017 	ldw	r5,0(r18)
    2a00:	e009883a 	mov	r4,fp
    2a04:	29400044 	addi	r5,r5,1
    2a08:	00007880 	call	788 <__udivsi3>
    2a0c:	1029883a 	mov	r20,r2
    2a10:	10003c1e 	bne	r2,zero,2b04 <quorem+0x168>
    2a14:	a80b883a 	mov	r5,r21
    2a18:	b809883a 	mov	r4,r23
    2a1c:	0005ea40 	call	5ea4 <__mcmp>
    2a20:	10002b16 	blt	r2,zero,2ad0 <quorem+0x134>
    2a24:	a5000044 	addi	r20,r20,1
    2a28:	980f883a 	mov	r7,r19
    2a2c:	0011883a 	mov	r8,zero
    2a30:	0009883a 	mov	r4,zero
    2a34:	81400017 	ldw	r5,0(r16)
    2a38:	38c00017 	ldw	r3,0(r7)
    2a3c:	84000104 	addi	r16,r16,4
    2a40:	28bfffcc 	andi	r2,r5,65535
    2a44:	2085883a 	add	r2,r4,r2
    2a48:	11bfffcc 	andi	r6,r2,65535
    2a4c:	193fffcc 	andi	r4,r3,65535
    2a50:	1004d43a 	srli	r2,r2,16
    2a54:	280ad43a 	srli	r5,r5,16
    2a58:	2189c83a 	sub	r4,r4,r6
    2a5c:	2209883a 	add	r4,r4,r8
    2a60:	1806d43a 	srli	r3,r3,16
    2a64:	288b883a 	add	r5,r5,r2
    2a68:	200dd43a 	srai	r6,r4,16
    2a6c:	28bfffcc 	andi	r2,r5,65535
    2a70:	1887c83a 	sub	r3,r3,r2
    2a74:	1987883a 	add	r3,r3,r6
    2a78:	3900000d 	sth	r4,0(r7)
    2a7c:	38c0008d 	sth	r3,2(r7)
    2a80:	2808d43a 	srli	r4,r5,16
    2a84:	39c00104 	addi	r7,r7,4
    2a88:	1811d43a 	srai	r8,r3,16
    2a8c:	943fe92e 	bgeu	r18,r16,2a34 <quorem+0x98>
    2a90:	8c45883a 	add	r2,r17,r17
    2a94:	1085883a 	add	r2,r2,r2
    2a98:	9885883a 	add	r2,r19,r2
    2a9c:	10c00017 	ldw	r3,0(r2)
    2aa0:	18000b1e 	bne	r3,zero,2ad0 <quorem+0x134>
    2aa4:	113fff04 	addi	r4,r2,-4
    2aa8:	9900082e 	bgeu	r19,r4,2acc <quorem+0x130>
    2aac:	10bfff17 	ldw	r2,-4(r2)
    2ab0:	10000326 	beq	r2,zero,2ac0 <quorem+0x124>
    2ab4:	00000506 	br	2acc <quorem+0x130>
    2ab8:	20800017 	ldw	r2,0(r4)
    2abc:	1000031e 	bne	r2,zero,2acc <quorem+0x130>
    2ac0:	213fff04 	addi	r4,r4,-4
    2ac4:	8c7fffc4 	addi	r17,r17,-1
    2ac8:	993ffb36 	bltu	r19,r4,2ab8 <quorem+0x11c>
    2acc:	bc400415 	stw	r17,16(r23)
    2ad0:	a005883a 	mov	r2,r20
    2ad4:	dfc00917 	ldw	ra,36(sp)
    2ad8:	df000817 	ldw	fp,32(sp)
    2adc:	ddc00717 	ldw	r23,28(sp)
    2ae0:	dd800617 	ldw	r22,24(sp)
    2ae4:	dd400517 	ldw	r21,20(sp)
    2ae8:	dd000417 	ldw	r20,16(sp)
    2aec:	dcc00317 	ldw	r19,12(sp)
    2af0:	dc800217 	ldw	r18,8(sp)
    2af4:	dc400117 	ldw	r17,4(sp)
    2af8:	dc000017 	ldw	r16,0(sp)
    2afc:	dec00a04 	addi	sp,sp,40
    2b00:	f800283a 	ret
    2b04:	980f883a 	mov	r7,r19
    2b08:	8011883a 	mov	r8,r16
    2b0c:	0013883a 	mov	r9,zero
    2b10:	000d883a 	mov	r6,zero
    2b14:	40c00017 	ldw	r3,0(r8)
    2b18:	39000017 	ldw	r4,0(r7)
    2b1c:	42000104 	addi	r8,r8,4
    2b20:	18bfffcc 	andi	r2,r3,65535
    2b24:	a085383a 	mul	r2,r20,r2
    2b28:	1806d43a 	srli	r3,r3,16
    2b2c:	217fffcc 	andi	r5,r4,65535
    2b30:	3085883a 	add	r2,r6,r2
    2b34:	11bfffcc 	andi	r6,r2,65535
    2b38:	a0c7383a 	mul	r3,r20,r3
    2b3c:	1004d43a 	srli	r2,r2,16
    2b40:	298bc83a 	sub	r5,r5,r6
    2b44:	2a4b883a 	add	r5,r5,r9
    2b48:	2008d43a 	srli	r4,r4,16
    2b4c:	1887883a 	add	r3,r3,r2
    2b50:	280dd43a 	srai	r6,r5,16
    2b54:	18bfffcc 	andi	r2,r3,65535
    2b58:	2089c83a 	sub	r4,r4,r2
    2b5c:	2189883a 	add	r4,r4,r6
    2b60:	3900008d 	sth	r4,2(r7)
    2b64:	3940000d 	sth	r5,0(r7)
    2b68:	180cd43a 	srli	r6,r3,16
    2b6c:	39c00104 	addi	r7,r7,4
    2b70:	2013d43a 	srai	r9,r4,16
    2b74:	923fe72e 	bgeu	r18,r8,2b14 <quorem+0x178>
    2b78:	e03fa61e 	bne	fp,zero,2a14 <quorem+0x78>
    2b7c:	b0ffff04 	addi	r3,r22,-4
    2b80:	98c0082e 	bgeu	r19,r3,2ba4 <quorem+0x208>
    2b84:	b0bfff17 	ldw	r2,-4(r22)
    2b88:	10000326 	beq	r2,zero,2b98 <quorem+0x1fc>
    2b8c:	00000506 	br	2ba4 <quorem+0x208>
    2b90:	18800017 	ldw	r2,0(r3)
    2b94:	1000031e 	bne	r2,zero,2ba4 <quorem+0x208>
    2b98:	18ffff04 	addi	r3,r3,-4
    2b9c:	8c7fffc4 	addi	r17,r17,-1
    2ba0:	98fffb36 	bltu	r19,r3,2b90 <quorem+0x1f4>
    2ba4:	bc400415 	stw	r17,16(r23)
    2ba8:	003f9a06 	br	2a14 <quorem+0x78>
    2bac:	0005883a 	mov	r2,zero
    2bb0:	003fc806 	br	2ad4 <quorem+0x138>

00002bb4 <_dtoa_r>:
    2bb4:	22001017 	ldw	r8,64(r4)
    2bb8:	deffda04 	addi	sp,sp,-152
    2bbc:	dd402115 	stw	r21,132(sp)
    2bc0:	dd002015 	stw	r20,128(sp)
    2bc4:	dc801e15 	stw	r18,120(sp)
    2bc8:	dc401d15 	stw	r17,116(sp)
    2bcc:	dfc02515 	stw	ra,148(sp)
    2bd0:	df002415 	stw	fp,144(sp)
    2bd4:	ddc02315 	stw	r23,140(sp)
    2bd8:	dd802215 	stw	r22,136(sp)
    2bdc:	dcc01f15 	stw	r19,124(sp)
    2be0:	dc001c15 	stw	r16,112(sp)
    2be4:	d9001615 	stw	r4,88(sp)
    2be8:	3023883a 	mov	r17,r6
    2bec:	2829883a 	mov	r20,r5
    2bf0:	d9c01715 	stw	r7,92(sp)
    2bf4:	dc802817 	ldw	r18,160(sp)
    2bf8:	302b883a 	mov	r21,r6
    2bfc:	40000a26 	beq	r8,zero,2c28 <_dtoa_r+0x74>
    2c00:	20801117 	ldw	r2,68(r4)
    2c04:	400b883a 	mov	r5,r8
    2c08:	40800115 	stw	r2,4(r8)
    2c0c:	20c01117 	ldw	r3,68(r4)
    2c10:	00800044 	movi	r2,1
    2c14:	10c4983a 	sll	r2,r2,r3
    2c18:	40800215 	stw	r2,8(r8)
    2c1c:	0005d480 	call	5d48 <_Bfree>
    2c20:	d8c01617 	ldw	r3,88(sp)
    2c24:	18001015 	stw	zero,64(r3)
    2c28:	8800a316 	blt	r17,zero,2eb8 <_dtoa_r+0x304>
    2c2c:	90000015 	stw	zero,0(r18)
    2c30:	a8dffc2c 	andhi	r3,r21,32752
    2c34:	009ffc34 	movhi	r2,32752
    2c38:	18809126 	beq	r3,r2,2e80 <_dtoa_r+0x2cc>
    2c3c:	000d883a 	mov	r6,zero
    2c40:	000f883a 	mov	r7,zero
    2c44:	a009883a 	mov	r4,r20
    2c48:	a80b883a 	mov	r5,r21
    2c4c:	dd001215 	stw	r20,72(sp)
    2c50:	dd401315 	stw	r21,76(sp)
    2c54:	00091e00 	call	91e0 <__nedf2>
    2c58:	1000171e 	bne	r2,zero,2cb8 <_dtoa_r+0x104>
    2c5c:	d9802717 	ldw	r6,156(sp)
    2c60:	00800044 	movi	r2,1
    2c64:	30800015 	stw	r2,0(r6)
    2c68:	d8802917 	ldw	r2,164(sp)
    2c6c:	10029b26 	beq	r2,zero,36dc <_dtoa_r+0xb28>
    2c70:	d9002917 	ldw	r4,164(sp)
    2c74:	00800074 	movhi	r2,1
    2c78:	10802c44 	addi	r2,r2,177
    2c7c:	10ffffc4 	addi	r3,r2,-1
    2c80:	20800015 	stw	r2,0(r4)
    2c84:	1805883a 	mov	r2,r3
    2c88:	dfc02517 	ldw	ra,148(sp)
    2c8c:	df002417 	ldw	fp,144(sp)
    2c90:	ddc02317 	ldw	r23,140(sp)
    2c94:	dd802217 	ldw	r22,136(sp)
    2c98:	dd402117 	ldw	r21,132(sp)
    2c9c:	dd002017 	ldw	r20,128(sp)
    2ca0:	dcc01f17 	ldw	r19,124(sp)
    2ca4:	dc801e17 	ldw	r18,120(sp)
    2ca8:	dc401d17 	ldw	r17,116(sp)
    2cac:	dc001c17 	ldw	r16,112(sp)
    2cb0:	dec02604 	addi	sp,sp,152
    2cb4:	f800283a 	ret
    2cb8:	d9001617 	ldw	r4,88(sp)
    2cbc:	d9401217 	ldw	r5,72(sp)
    2cc0:	d8800104 	addi	r2,sp,4
    2cc4:	a80d883a 	mov	r6,r21
    2cc8:	d9c00204 	addi	r7,sp,8
    2ccc:	d8800015 	stw	r2,0(sp)
    2cd0:	00063840 	call	6384 <__d2b>
    2cd4:	d8800715 	stw	r2,28(sp)
    2cd8:	a804d53a 	srli	r2,r21,20
    2cdc:	1101ffcc 	andi	r4,r2,2047
    2ce0:	20008626 	beq	r4,zero,2efc <_dtoa_r+0x348>
    2ce4:	d8c01217 	ldw	r3,72(sp)
    2ce8:	00800434 	movhi	r2,16
    2cec:	10bfffc4 	addi	r2,r2,-1
    2cf0:	ddc00117 	ldw	r23,4(sp)
    2cf4:	a884703a 	and	r2,r21,r2
    2cf8:	1811883a 	mov	r8,r3
    2cfc:	124ffc34 	orhi	r9,r2,16368
    2d00:	25bf0044 	addi	r22,r4,-1023
    2d04:	d8000815 	stw	zero,32(sp)
    2d08:	0005883a 	mov	r2,zero
    2d0c:	00cffe34 	movhi	r3,16376
    2d10:	480b883a 	mov	r5,r9
    2d14:	4009883a 	mov	r4,r8
    2d18:	180f883a 	mov	r7,r3
    2d1c:	100d883a 	mov	r6,r2
    2d20:	0008a480 	call	8a48 <__subdf3>
    2d24:	0218dbf4 	movhi	r8,25455
    2d28:	4210d844 	addi	r8,r8,17249
    2d2c:	024ff4f4 	movhi	r9,16339
    2d30:	4a61e9c4 	addi	r9,r9,-30809
    2d34:	480f883a 	mov	r7,r9
    2d38:	400d883a 	mov	r6,r8
    2d3c:	180b883a 	mov	r5,r3
    2d40:	1009883a 	mov	r4,r2
    2d44:	0008b3c0 	call	8b3c <__muldf3>
    2d48:	0222d874 	movhi	r8,35681
    2d4c:	42322cc4 	addi	r8,r8,-14157
    2d50:	024ff1f4 	movhi	r9,16327
    2d54:	4a628a04 	addi	r9,r9,-30168
    2d58:	480f883a 	mov	r7,r9
    2d5c:	400d883a 	mov	r6,r8
    2d60:	180b883a 	mov	r5,r3
    2d64:	1009883a 	mov	r4,r2
    2d68:	0008ac80 	call	8ac8 <__adddf3>
    2d6c:	b009883a 	mov	r4,r22
    2d70:	1021883a 	mov	r16,r2
    2d74:	1823883a 	mov	r17,r3
    2d78:	00094000 	call	9400 <__floatsidf>
    2d7c:	021427f4 	movhi	r8,20639
    2d80:	421e7ec4 	addi	r8,r8,31227
    2d84:	024ff4f4 	movhi	r9,16339
    2d88:	4a5104c4 	addi	r9,r9,17427
    2d8c:	480f883a 	mov	r7,r9
    2d90:	400d883a 	mov	r6,r8
    2d94:	180b883a 	mov	r5,r3
    2d98:	1009883a 	mov	r4,r2
    2d9c:	0008b3c0 	call	8b3c <__muldf3>
    2da0:	180f883a 	mov	r7,r3
    2da4:	880b883a 	mov	r5,r17
    2da8:	100d883a 	mov	r6,r2
    2dac:	8009883a 	mov	r4,r16
    2db0:	0008ac80 	call	8ac8 <__adddf3>
    2db4:	1009883a 	mov	r4,r2
    2db8:	180b883a 	mov	r5,r3
    2dbc:	1021883a 	mov	r16,r2
    2dc0:	1823883a 	mov	r17,r3
    2dc4:	00094f80 	call	94f8 <__fixdfsi>
    2dc8:	000d883a 	mov	r6,zero
    2dcc:	000f883a 	mov	r7,zero
    2dd0:	8009883a 	mov	r4,r16
    2dd4:	880b883a 	mov	r5,r17
    2dd8:	d8800d15 	stw	r2,52(sp)
    2ddc:	00093780 	call	9378 <__ltdf2>
    2de0:	10031716 	blt	r2,zero,3a40 <_dtoa_r+0xe8c>
    2de4:	d8c00d17 	ldw	r3,52(sp)
    2de8:	00800584 	movi	r2,22
    2dec:	10c1482e 	bgeu	r2,r3,3310 <_dtoa_r+0x75c>
    2df0:	01000044 	movi	r4,1
    2df4:	d9000c15 	stw	r4,48(sp)
    2df8:	bd85c83a 	sub	r2,r23,r22
    2dfc:	11bfffc4 	addi	r6,r2,-1
    2e00:	30030b16 	blt	r6,zero,3a30 <_dtoa_r+0xe7c>
    2e04:	d9800a15 	stw	r6,40(sp)
    2e08:	d8001115 	stw	zero,68(sp)
    2e0c:	d8c00d17 	ldw	r3,52(sp)
    2e10:	1802ff16 	blt	r3,zero,3a10 <_dtoa_r+0xe5c>
    2e14:	d9000a17 	ldw	r4,40(sp)
    2e18:	d8c00915 	stw	r3,36(sp)
    2e1c:	d8001015 	stw	zero,64(sp)
    2e20:	20c9883a 	add	r4,r4,r3
    2e24:	d9000a15 	stw	r4,40(sp)
    2e28:	d9001717 	ldw	r4,92(sp)
    2e2c:	00800244 	movi	r2,9
    2e30:	11004636 	bltu	r2,r4,2f4c <_dtoa_r+0x398>
    2e34:	00800144 	movi	r2,5
    2e38:	11020416 	blt	r2,r4,364c <_dtoa_r+0xa98>
    2e3c:	04400044 	movi	r17,1
    2e40:	d8c01717 	ldw	r3,92(sp)
    2e44:	00800144 	movi	r2,5
    2e48:	10c1ed36 	bltu	r2,r3,3600 <_dtoa_r+0xa4c>
    2e4c:	18c5883a 	add	r2,r3,r3
    2e50:	1085883a 	add	r2,r2,r2
    2e54:	00c00034 	movhi	r3,0
    2e58:	18cb9a04 	addi	r3,r3,11880
    2e5c:	10c5883a 	add	r2,r2,r3
    2e60:	11000017 	ldw	r4,0(r2)
    2e64:	2000683a 	jmp	r4
    2e68:	00002f54 	movui	zero,189
    2e6c:	00002f54 	movui	zero,189
    2e70:	00003954 	movui	zero,229
    2e74:	0000392c 	andhi	zero,zero,228
    2e78:	00003970 	cmpltui	zero,zero,229
    2e7c:	0000397c 	xorhi	zero,zero,229
    2e80:	d9002717 	ldw	r4,156(sp)
    2e84:	0089c3c4 	movi	r2,9999
    2e88:	20800015 	stw	r2,0(r4)
    2e8c:	a0001026 	beq	r20,zero,2ed0 <_dtoa_r+0x31c>
    2e90:	00c00074 	movhi	r3,1
    2e94:	18c03804 	addi	r3,r3,224
    2e98:	d9802917 	ldw	r6,164(sp)
    2e9c:	303f7926 	beq	r6,zero,2c84 <_dtoa_r+0xd0>
    2ea0:	188000c7 	ldb	r2,3(r3)
    2ea4:	190000c4 	addi	r4,r3,3
    2ea8:	1000101e 	bne	r2,zero,2eec <_dtoa_r+0x338>
    2eac:	d8802917 	ldw	r2,164(sp)
    2eb0:	11000015 	stw	r4,0(r2)
    2eb4:	003f7306 	br	2c84 <_dtoa_r+0xd0>
    2eb8:	00a00034 	movhi	r2,32768
    2ebc:	10bfffc4 	addi	r2,r2,-1
    2ec0:	00c00044 	movi	r3,1
    2ec4:	88aa703a 	and	r21,r17,r2
    2ec8:	90c00015 	stw	r3,0(r18)
    2ecc:	003f5806 	br	2c30 <_dtoa_r+0x7c>
    2ed0:	00800434 	movhi	r2,16
    2ed4:	10bfffc4 	addi	r2,r2,-1
    2ed8:	a884703a 	and	r2,r21,r2
    2edc:	103fec1e 	bne	r2,zero,2e90 <_dtoa_r+0x2dc>
    2ee0:	00c00074 	movhi	r3,1
    2ee4:	18c03504 	addi	r3,r3,212
    2ee8:	003feb06 	br	2e98 <_dtoa_r+0x2e4>
    2eec:	d8802917 	ldw	r2,164(sp)
    2ef0:	19000204 	addi	r4,r3,8
    2ef4:	11000015 	stw	r4,0(r2)
    2ef8:	003f6206 	br	2c84 <_dtoa_r+0xd0>
    2efc:	ddc00117 	ldw	r23,4(sp)
    2f00:	d8800217 	ldw	r2,8(sp)
    2f04:	01000804 	movi	r4,32
    2f08:	b8c10c84 	addi	r3,r23,1074
    2f0c:	18a3883a 	add	r17,r3,r2
    2f10:	2441b80e 	bge	r4,r17,35f4 <_dtoa_r+0xa40>
    2f14:	00c01004 	movi	r3,64
    2f18:	1c47c83a 	sub	r3,r3,r17
    2f1c:	88bff804 	addi	r2,r17,-32
    2f20:	a8c6983a 	sll	r3,r21,r3
    2f24:	a084d83a 	srl	r2,r20,r2
    2f28:	1888b03a 	or	r4,r3,r2
    2f2c:	00095d00 	call	95d0 <__floatunsidf>
    2f30:	1011883a 	mov	r8,r2
    2f34:	00bf8434 	movhi	r2,65040
    2f38:	01000044 	movi	r4,1
    2f3c:	10d3883a 	add	r9,r2,r3
    2f40:	8dbef344 	addi	r22,r17,-1075
    2f44:	d9000815 	stw	r4,32(sp)
    2f48:	003f6f06 	br	2d08 <_dtoa_r+0x154>
    2f4c:	d8001715 	stw	zero,92(sp)
    2f50:	04400044 	movi	r17,1
    2f54:	00bfffc4 	movi	r2,-1
    2f58:	00c00044 	movi	r3,1
    2f5c:	d8800e15 	stw	r2,56(sp)
    2f60:	d8002615 	stw	zero,152(sp)
    2f64:	d8800f15 	stw	r2,60(sp)
    2f68:	d8c00b15 	stw	r3,44(sp)
    2f6c:	1021883a 	mov	r16,r2
    2f70:	d8801617 	ldw	r2,88(sp)
    2f74:	10001115 	stw	zero,68(r2)
    2f78:	d8801617 	ldw	r2,88(sp)
    2f7c:	11401117 	ldw	r5,68(r2)
    2f80:	1009883a 	mov	r4,r2
    2f84:	00062c80 	call	62c8 <_Balloc>
    2f88:	d8c01617 	ldw	r3,88(sp)
    2f8c:	d8800515 	stw	r2,20(sp)
    2f90:	18801015 	stw	r2,64(r3)
    2f94:	00800384 	movi	r2,14
    2f98:	14006836 	bltu	r2,r16,313c <_dtoa_r+0x588>
    2f9c:	8805003a 	cmpeq	r2,r17,zero
    2fa0:	1000661e 	bne	r2,zero,313c <_dtoa_r+0x588>
    2fa4:	d9000d17 	ldw	r4,52(sp)
    2fa8:	0102300e 	bge	zero,r4,386c <_dtoa_r+0xcb8>
    2fac:	208003cc 	andi	r2,r4,15
    2fb0:	100490fa 	slli	r2,r2,3
    2fb4:	2025d13a 	srai	r18,r4,4
    2fb8:	00c00074 	movhi	r3,1
    2fbc:	18c04a04 	addi	r3,r3,296
    2fc0:	10c5883a 	add	r2,r2,r3
    2fc4:	90c0040c 	andi	r3,r18,16
    2fc8:	14000017 	ldw	r16,0(r2)
    2fcc:	14400117 	ldw	r17,4(r2)
    2fd0:	18036a1e 	bne	r3,zero,3d7c <_dtoa_r+0x11c8>
    2fd4:	05800084 	movi	r22,2
    2fd8:	90001026 	beq	r18,zero,301c <_dtoa_r+0x468>
    2fdc:	04c00074 	movhi	r19,1
    2fe0:	9cc07c04 	addi	r19,r19,496
    2fe4:	9080004c 	andi	r2,r18,1
    2fe8:	1005003a 	cmpeq	r2,r2,zero
    2fec:	1000081e 	bne	r2,zero,3010 <_dtoa_r+0x45c>
    2ff0:	99800017 	ldw	r6,0(r19)
    2ff4:	99c00117 	ldw	r7,4(r19)
    2ff8:	880b883a 	mov	r5,r17
    2ffc:	8009883a 	mov	r4,r16
    3000:	0008b3c0 	call	8b3c <__muldf3>
    3004:	1021883a 	mov	r16,r2
    3008:	b5800044 	addi	r22,r22,1
    300c:	1823883a 	mov	r17,r3
    3010:	9025d07a 	srai	r18,r18,1
    3014:	9cc00204 	addi	r19,r19,8
    3018:	903ff21e 	bne	r18,zero,2fe4 <_dtoa_r+0x430>
    301c:	a80b883a 	mov	r5,r21
    3020:	a009883a 	mov	r4,r20
    3024:	880f883a 	mov	r7,r17
    3028:	800d883a 	mov	r6,r16
    302c:	0008f000 	call	8f00 <__divdf3>
    3030:	1029883a 	mov	r20,r2
    3034:	182b883a 	mov	r21,r3
    3038:	d8c00c17 	ldw	r3,48(sp)
    303c:	1805003a 	cmpeq	r2,r3,zero
    3040:	1000081e 	bne	r2,zero,3064 <_dtoa_r+0x4b0>
    3044:	0005883a 	mov	r2,zero
    3048:	00cffc34 	movhi	r3,16368
    304c:	180f883a 	mov	r7,r3
    3050:	a009883a 	mov	r4,r20
    3054:	a80b883a 	mov	r5,r21
    3058:	100d883a 	mov	r6,r2
    305c:	00093780 	call	9378 <__ltdf2>
    3060:	1003fe16 	blt	r2,zero,405c <_dtoa_r+0x14a8>
    3064:	b009883a 	mov	r4,r22
    3068:	00094000 	call	9400 <__floatsidf>
    306c:	180b883a 	mov	r5,r3
    3070:	1009883a 	mov	r4,r2
    3074:	a00d883a 	mov	r6,r20
    3078:	a80f883a 	mov	r7,r21
    307c:	0008b3c0 	call	8b3c <__muldf3>
    3080:	0011883a 	mov	r8,zero
    3084:	02500734 	movhi	r9,16412
    3088:	1009883a 	mov	r4,r2
    308c:	180b883a 	mov	r5,r3
    3090:	480f883a 	mov	r7,r9
    3094:	400d883a 	mov	r6,r8
    3098:	0008ac80 	call	8ac8 <__adddf3>
    309c:	d9000f17 	ldw	r4,60(sp)
    30a0:	102d883a 	mov	r22,r2
    30a4:	00bf3034 	movhi	r2,64704
    30a8:	18b9883a 	add	fp,r3,r2
    30ac:	e02f883a 	mov	r23,fp
    30b0:	20028f1e 	bne	r4,zero,3af0 <_dtoa_r+0xf3c>
    30b4:	0005883a 	mov	r2,zero
    30b8:	00d00534 	movhi	r3,16404
    30bc:	a009883a 	mov	r4,r20
    30c0:	a80b883a 	mov	r5,r21
    30c4:	180f883a 	mov	r7,r3
    30c8:	100d883a 	mov	r6,r2
    30cc:	0008a480 	call	8a48 <__subdf3>
    30d0:	1009883a 	mov	r4,r2
    30d4:	e00f883a 	mov	r7,fp
    30d8:	180b883a 	mov	r5,r3
    30dc:	b00d883a 	mov	r6,r22
    30e0:	1025883a 	mov	r18,r2
    30e4:	1827883a 	mov	r19,r3
    30e8:	00092680 	call	9268 <__gtdf2>
    30ec:	00834f16 	blt	zero,r2,3e2c <_dtoa_r+0x1278>
    30f0:	e0e0003c 	xorhi	r3,fp,32768
    30f4:	9009883a 	mov	r4,r18
    30f8:	980b883a 	mov	r5,r19
    30fc:	180f883a 	mov	r7,r3
    3100:	b00d883a 	mov	r6,r22
    3104:	00093780 	call	9378 <__ltdf2>
    3108:	1000080e 	bge	r2,zero,312c <_dtoa_r+0x578>
    310c:	0027883a 	mov	r19,zero
    3110:	0025883a 	mov	r18,zero
    3114:	d8802617 	ldw	r2,152(sp)
    3118:	df000517 	ldw	fp,20(sp)
    311c:	d8000615 	stw	zero,24(sp)
    3120:	0084303a 	nor	r2,zero,r2
    3124:	d8800d15 	stw	r2,52(sp)
    3128:	00019b06 	br	3798 <_dtoa_r+0xbe4>
    312c:	d9801217 	ldw	r6,72(sp)
    3130:	d8801317 	ldw	r2,76(sp)
    3134:	3029883a 	mov	r20,r6
    3138:	102b883a 	mov	r21,r2
    313c:	d8c00217 	ldw	r3,8(sp)
    3140:	18008516 	blt	r3,zero,3358 <_dtoa_r+0x7a4>
    3144:	d9000d17 	ldw	r4,52(sp)
    3148:	00800384 	movi	r2,14
    314c:	11008216 	blt	r2,r4,3358 <_dtoa_r+0x7a4>
    3150:	200490fa 	slli	r2,r4,3
    3154:	d9802617 	ldw	r6,152(sp)
    3158:	00c00074 	movhi	r3,1
    315c:	18c04a04 	addi	r3,r3,296
    3160:	10c5883a 	add	r2,r2,r3
    3164:	14800017 	ldw	r18,0(r2)
    3168:	14c00117 	ldw	r19,4(r2)
    316c:	30031e16 	blt	r6,zero,3de8 <_dtoa_r+0x1234>
    3170:	d9000517 	ldw	r4,20(sp)
    3174:	d8c00f17 	ldw	r3,60(sp)
    3178:	a823883a 	mov	r17,r21
    317c:	a021883a 	mov	r16,r20
    3180:	192b883a 	add	r21,r3,r4
    3184:	2039883a 	mov	fp,r4
    3188:	00000f06 	br	31c8 <_dtoa_r+0x614>
    318c:	0005883a 	mov	r2,zero
    3190:	00d00934 	movhi	r3,16420
    3194:	5009883a 	mov	r4,r10
    3198:	580b883a 	mov	r5,r11
    319c:	180f883a 	mov	r7,r3
    31a0:	100d883a 	mov	r6,r2
    31a4:	0008b3c0 	call	8b3c <__muldf3>
    31a8:	180b883a 	mov	r5,r3
    31ac:	000d883a 	mov	r6,zero
    31b0:	000f883a 	mov	r7,zero
    31b4:	1009883a 	mov	r4,r2
    31b8:	1021883a 	mov	r16,r2
    31bc:	1823883a 	mov	r17,r3
    31c0:	00091e00 	call	91e0 <__nedf2>
    31c4:	10004526 	beq	r2,zero,32dc <_dtoa_r+0x728>
    31c8:	900d883a 	mov	r6,r18
    31cc:	980f883a 	mov	r7,r19
    31d0:	8009883a 	mov	r4,r16
    31d4:	880b883a 	mov	r5,r17
    31d8:	0008f000 	call	8f00 <__divdf3>
    31dc:	180b883a 	mov	r5,r3
    31e0:	1009883a 	mov	r4,r2
    31e4:	00094f80 	call	94f8 <__fixdfsi>
    31e8:	1009883a 	mov	r4,r2
    31ec:	1029883a 	mov	r20,r2
    31f0:	00094000 	call	9400 <__floatsidf>
    31f4:	180f883a 	mov	r7,r3
    31f8:	9009883a 	mov	r4,r18
    31fc:	980b883a 	mov	r5,r19
    3200:	100d883a 	mov	r6,r2
    3204:	0008b3c0 	call	8b3c <__muldf3>
    3208:	180f883a 	mov	r7,r3
    320c:	880b883a 	mov	r5,r17
    3210:	8009883a 	mov	r4,r16
    3214:	100d883a 	mov	r6,r2
    3218:	0008a480 	call	8a48 <__subdf3>
    321c:	1015883a 	mov	r10,r2
    3220:	a0800c04 	addi	r2,r20,48
    3224:	e0800005 	stb	r2,0(fp)
    3228:	e7000044 	addi	fp,fp,1
    322c:	1817883a 	mov	r11,r3
    3230:	e57fd61e 	bne	fp,r21,318c <_dtoa_r+0x5d8>
    3234:	500d883a 	mov	r6,r10
    3238:	180f883a 	mov	r7,r3
    323c:	5009883a 	mov	r4,r10
    3240:	180b883a 	mov	r5,r3
    3244:	0008ac80 	call	8ac8 <__adddf3>
    3248:	100d883a 	mov	r6,r2
    324c:	9009883a 	mov	r4,r18
    3250:	980b883a 	mov	r5,r19
    3254:	180f883a 	mov	r7,r3
    3258:	1021883a 	mov	r16,r2
    325c:	1823883a 	mov	r17,r3
    3260:	00093780 	call	9378 <__ltdf2>
    3264:	10000816 	blt	r2,zero,3288 <_dtoa_r+0x6d4>
    3268:	980b883a 	mov	r5,r19
    326c:	800d883a 	mov	r6,r16
    3270:	880f883a 	mov	r7,r17
    3274:	9009883a 	mov	r4,r18
    3278:	00091580 	call	9158 <__eqdf2>
    327c:	1000171e 	bne	r2,zero,32dc <_dtoa_r+0x728>
    3280:	a080004c 	andi	r2,r20,1
    3284:	10001526 	beq	r2,zero,32dc <_dtoa_r+0x728>
    3288:	d8800d17 	ldw	r2,52(sp)
    328c:	d8800415 	stw	r2,16(sp)
    3290:	e009883a 	mov	r4,fp
    3294:	213fffc4 	addi	r4,r4,-1
    3298:	20c00007 	ldb	r3,0(r4)
    329c:	00800e44 	movi	r2,57
    32a0:	1880081e 	bne	r3,r2,32c4 <_dtoa_r+0x710>
    32a4:	d8800517 	ldw	r2,20(sp)
    32a8:	113ffa1e 	bne	r2,r4,3294 <_dtoa_r+0x6e0>
    32ac:	d8c00417 	ldw	r3,16(sp)
    32b0:	d9800517 	ldw	r6,20(sp)
    32b4:	00800c04 	movi	r2,48
    32b8:	18c00044 	addi	r3,r3,1
    32bc:	d8c00415 	stw	r3,16(sp)
    32c0:	30800005 	stb	r2,0(r6)
    32c4:	20800003 	ldbu	r2,0(r4)
    32c8:	d8c00417 	ldw	r3,16(sp)
    32cc:	27000044 	addi	fp,r4,1
    32d0:	10800044 	addi	r2,r2,1
    32d4:	d8c00d15 	stw	r3,52(sp)
    32d8:	20800005 	stb	r2,0(r4)
    32dc:	d9001617 	ldw	r4,88(sp)
    32e0:	d9400717 	ldw	r5,28(sp)
    32e4:	0005d480 	call	5d48 <_Bfree>
    32e8:	e0000005 	stb	zero,0(fp)
    32ec:	d9800d17 	ldw	r6,52(sp)
    32f0:	d8c02717 	ldw	r3,156(sp)
    32f4:	d9002917 	ldw	r4,164(sp)
    32f8:	30800044 	addi	r2,r6,1
    32fc:	18800015 	stw	r2,0(r3)
    3300:	20029c26 	beq	r4,zero,3d74 <_dtoa_r+0x11c0>
    3304:	d8c00517 	ldw	r3,20(sp)
    3308:	27000015 	stw	fp,0(r4)
    330c:	003e5d06 	br	2c84 <_dtoa_r+0xd0>
    3310:	d9800d17 	ldw	r6,52(sp)
    3314:	00c00074 	movhi	r3,1
    3318:	18c04a04 	addi	r3,r3,296
    331c:	d9001217 	ldw	r4,72(sp)
    3320:	300490fa 	slli	r2,r6,3
    3324:	d9401317 	ldw	r5,76(sp)
    3328:	10c5883a 	add	r2,r2,r3
    332c:	12000017 	ldw	r8,0(r2)
    3330:	12400117 	ldw	r9,4(r2)
    3334:	400d883a 	mov	r6,r8
    3338:	480f883a 	mov	r7,r9
    333c:	00093780 	call	9378 <__ltdf2>
    3340:	1000030e 	bge	r2,zero,3350 <_dtoa_r+0x79c>
    3344:	d8800d17 	ldw	r2,52(sp)
    3348:	10bfffc4 	addi	r2,r2,-1
    334c:	d8800d15 	stw	r2,52(sp)
    3350:	d8000c15 	stw	zero,48(sp)
    3354:	003ea806 	br	2df8 <_dtoa_r+0x244>
    3358:	d9000b17 	ldw	r4,44(sp)
    335c:	202cc03a 	cmpne	r22,r4,zero
    3360:	b000c71e 	bne	r22,zero,3680 <_dtoa_r+0xacc>
    3364:	dc001117 	ldw	r16,68(sp)
    3368:	dc801017 	ldw	r18,64(sp)
    336c:	0027883a 	mov	r19,zero
    3370:	04000b0e 	bge	zero,r16,33a0 <_dtoa_r+0x7ec>
    3374:	d8c00a17 	ldw	r3,40(sp)
    3378:	00c0090e 	bge	zero,r3,33a0 <_dtoa_r+0x7ec>
    337c:	8005883a 	mov	r2,r16
    3380:	1c011316 	blt	r3,r16,37d0 <_dtoa_r+0xc1c>
    3384:	d9000a17 	ldw	r4,40(sp)
    3388:	d9801117 	ldw	r6,68(sp)
    338c:	80a1c83a 	sub	r16,r16,r2
    3390:	2089c83a 	sub	r4,r4,r2
    3394:	308dc83a 	sub	r6,r6,r2
    3398:	d9000a15 	stw	r4,40(sp)
    339c:	d9801115 	stw	r6,68(sp)
    33a0:	d8801017 	ldw	r2,64(sp)
    33a4:	0080150e 	bge	zero,r2,33fc <_dtoa_r+0x848>
    33a8:	d8c00b17 	ldw	r3,44(sp)
    33ac:	1805003a 	cmpeq	r2,r3,zero
    33b0:	1001c91e 	bne	r2,zero,3ad8 <_dtoa_r+0xf24>
    33b4:	04800e0e 	bge	zero,r18,33f0 <_dtoa_r+0x83c>
    33b8:	d9001617 	ldw	r4,88(sp)
    33bc:	980b883a 	mov	r5,r19
    33c0:	900d883a 	mov	r6,r18
    33c4:	0006afc0 	call	6afc <__pow5mult>
    33c8:	d9001617 	ldw	r4,88(sp)
    33cc:	d9800717 	ldw	r6,28(sp)
    33d0:	100b883a 	mov	r5,r2
    33d4:	1027883a 	mov	r19,r2
    33d8:	00067d80 	call	67d8 <__multiply>
    33dc:	d9001617 	ldw	r4,88(sp)
    33e0:	d9400717 	ldw	r5,28(sp)
    33e4:	1023883a 	mov	r17,r2
    33e8:	0005d480 	call	5d48 <_Bfree>
    33ec:	dc400715 	stw	r17,28(sp)
    33f0:	d9001017 	ldw	r4,64(sp)
    33f4:	248dc83a 	sub	r6,r4,r18
    33f8:	30010e1e 	bne	r6,zero,3834 <_dtoa_r+0xc80>
    33fc:	d9001617 	ldw	r4,88(sp)
    3400:	04400044 	movi	r17,1
    3404:	880b883a 	mov	r5,r17
    3408:	00069c00 	call	69c0 <__i2b>
    340c:	d9800917 	ldw	r6,36(sp)
    3410:	1025883a 	mov	r18,r2
    3414:	0180040e 	bge	zero,r6,3428 <_dtoa_r+0x874>
    3418:	d9001617 	ldw	r4,88(sp)
    341c:	100b883a 	mov	r5,r2
    3420:	0006afc0 	call	6afc <__pow5mult>
    3424:	1025883a 	mov	r18,r2
    3428:	d8801717 	ldw	r2,92(sp)
    342c:	8880f30e 	bge	r17,r2,37fc <_dtoa_r+0xc48>
    3430:	0023883a 	mov	r17,zero
    3434:	d9800917 	ldw	r6,36(sp)
    3438:	30019e1e 	bne	r6,zero,3ab4 <_dtoa_r+0xf00>
    343c:	00c00044 	movi	r3,1
    3440:	d9000a17 	ldw	r4,40(sp)
    3444:	20c5883a 	add	r2,r4,r3
    3448:	10c007cc 	andi	r3,r2,31
    344c:	1800841e 	bne	r3,zero,3660 <_dtoa_r+0xaac>
    3450:	00800704 	movi	r2,28
    3454:	d9000a17 	ldw	r4,40(sp)
    3458:	d9801117 	ldw	r6,68(sp)
    345c:	80a1883a 	add	r16,r16,r2
    3460:	2089883a 	add	r4,r4,r2
    3464:	308d883a 	add	r6,r6,r2
    3468:	d9000a15 	stw	r4,40(sp)
    346c:	d9801115 	stw	r6,68(sp)
    3470:	d8801117 	ldw	r2,68(sp)
    3474:	0080050e 	bge	zero,r2,348c <_dtoa_r+0x8d8>
    3478:	d9400717 	ldw	r5,28(sp)
    347c:	d9001617 	ldw	r4,88(sp)
    3480:	100d883a 	mov	r6,r2
    3484:	000668c0 	call	668c <__lshift>
    3488:	d8800715 	stw	r2,28(sp)
    348c:	d8c00a17 	ldw	r3,40(sp)
    3490:	00c0050e 	bge	zero,r3,34a8 <_dtoa_r+0x8f4>
    3494:	d9001617 	ldw	r4,88(sp)
    3498:	900b883a 	mov	r5,r18
    349c:	180d883a 	mov	r6,r3
    34a0:	000668c0 	call	668c <__lshift>
    34a4:	1025883a 	mov	r18,r2
    34a8:	d9000c17 	ldw	r4,48(sp)
    34ac:	2005003a 	cmpeq	r2,r4,zero
    34b0:	10016f26 	beq	r2,zero,3a70 <_dtoa_r+0xebc>
    34b4:	d9000f17 	ldw	r4,60(sp)
    34b8:	0102170e 	bge	zero,r4,3d18 <_dtoa_r+0x1164>
    34bc:	d9800b17 	ldw	r6,44(sp)
    34c0:	3005003a 	cmpeq	r2,r6,zero
    34c4:	1000881e 	bne	r2,zero,36e8 <_dtoa_r+0xb34>
    34c8:	0400050e 	bge	zero,r16,34e0 <_dtoa_r+0x92c>
    34cc:	d9001617 	ldw	r4,88(sp)
    34d0:	980b883a 	mov	r5,r19
    34d4:	800d883a 	mov	r6,r16
    34d8:	000668c0 	call	668c <__lshift>
    34dc:	1027883a 	mov	r19,r2
    34e0:	8804c03a 	cmpne	r2,r17,zero
    34e4:	1002541e 	bne	r2,zero,3e38 <_dtoa_r+0x1284>
    34e8:	980b883a 	mov	r5,r19
    34ec:	dd800517 	ldw	r22,20(sp)
    34f0:	dcc00615 	stw	r19,24(sp)
    34f4:	a700004c 	andi	fp,r20,1
    34f8:	2827883a 	mov	r19,r5
    34fc:	d9000717 	ldw	r4,28(sp)
    3500:	900b883a 	mov	r5,r18
    3504:	000299c0 	call	299c <quorem>
    3508:	d9000717 	ldw	r4,28(sp)
    350c:	d9400617 	ldw	r5,24(sp)
    3510:	1023883a 	mov	r17,r2
    3514:	8dc00c04 	addi	r23,r17,48
    3518:	0005ea40 	call	5ea4 <__mcmp>
    351c:	d9001617 	ldw	r4,88(sp)
    3520:	900b883a 	mov	r5,r18
    3524:	980d883a 	mov	r6,r19
    3528:	1029883a 	mov	r20,r2
    352c:	00065000 	call	6500 <__mdiff>
    3530:	102b883a 	mov	r21,r2
    3534:	10800317 	ldw	r2,12(r2)
    3538:	1001281e 	bne	r2,zero,39dc <_dtoa_r+0xe28>
    353c:	d9000717 	ldw	r4,28(sp)
    3540:	a80b883a 	mov	r5,r21
    3544:	0005ea40 	call	5ea4 <__mcmp>
    3548:	d9001617 	ldw	r4,88(sp)
    354c:	1021883a 	mov	r16,r2
    3550:	a80b883a 	mov	r5,r21
    3554:	0005d480 	call	5d48 <_Bfree>
    3558:	8000041e 	bne	r16,zero,356c <_dtoa_r+0x9b8>
    355c:	d8801717 	ldw	r2,92(sp)
    3560:	1000021e 	bne	r2,zero,356c <_dtoa_r+0x9b8>
    3564:	e004c03a 	cmpne	r2,fp,zero
    3568:	10011726 	beq	r2,zero,39c8 <_dtoa_r+0xe14>
    356c:	a0010616 	blt	r20,zero,3988 <_dtoa_r+0xdd4>
    3570:	a000041e 	bne	r20,zero,3584 <_dtoa_r+0x9d0>
    3574:	d8c01717 	ldw	r3,92(sp)
    3578:	1800021e 	bne	r3,zero,3584 <_dtoa_r+0x9d0>
    357c:	e004c03a 	cmpne	r2,fp,zero
    3580:	10010126 	beq	r2,zero,3988 <_dtoa_r+0xdd4>
    3584:	04023d16 	blt	zero,r16,3e7c <_dtoa_r+0x12c8>
    3588:	b5c00005 	stb	r23,0(r22)
    358c:	d9800517 	ldw	r6,20(sp)
    3590:	d9000f17 	ldw	r4,60(sp)
    3594:	b5800044 	addi	r22,r22,1
    3598:	3105883a 	add	r2,r6,r4
    359c:	b0806526 	beq	r22,r2,3734 <_dtoa_r+0xb80>
    35a0:	d9400717 	ldw	r5,28(sp)
    35a4:	d9001617 	ldw	r4,88(sp)
    35a8:	01800284 	movi	r6,10
    35ac:	000f883a 	mov	r7,zero
    35b0:	00069fc0 	call	69fc <__multadd>
    35b4:	d8800715 	stw	r2,28(sp)
    35b8:	d8800617 	ldw	r2,24(sp)
    35bc:	14c10c26 	beq	r2,r19,39f0 <_dtoa_r+0xe3c>
    35c0:	d9400617 	ldw	r5,24(sp)
    35c4:	d9001617 	ldw	r4,88(sp)
    35c8:	01800284 	movi	r6,10
    35cc:	000f883a 	mov	r7,zero
    35d0:	00069fc0 	call	69fc <__multadd>
    35d4:	d9001617 	ldw	r4,88(sp)
    35d8:	980b883a 	mov	r5,r19
    35dc:	01800284 	movi	r6,10
    35e0:	000f883a 	mov	r7,zero
    35e4:	d8800615 	stw	r2,24(sp)
    35e8:	00069fc0 	call	69fc <__multadd>
    35ec:	1027883a 	mov	r19,r2
    35f0:	003fc206 	br	34fc <_dtoa_r+0x948>
    35f4:	2445c83a 	sub	r2,r4,r17
    35f8:	a088983a 	sll	r4,r20,r2
    35fc:	003e4b06 	br	2f2c <_dtoa_r+0x378>
    3600:	01bfffc4 	movi	r6,-1
    3604:	00800044 	movi	r2,1
    3608:	d9800e15 	stw	r6,56(sp)
    360c:	d9800f15 	stw	r6,60(sp)
    3610:	d8800b15 	stw	r2,44(sp)
    3614:	d8c01617 	ldw	r3,88(sp)
    3618:	008005c4 	movi	r2,23
    361c:	18001115 	stw	zero,68(r3)
    3620:	1580082e 	bgeu	r2,r22,3644 <_dtoa_r+0xa90>
    3624:	00c00104 	movi	r3,4
    3628:	0009883a 	mov	r4,zero
    362c:	18c7883a 	add	r3,r3,r3
    3630:	18800504 	addi	r2,r3,20
    3634:	21000044 	addi	r4,r4,1
    3638:	b0bffc2e 	bgeu	r22,r2,362c <_dtoa_r+0xa78>
    363c:	d9801617 	ldw	r6,88(sp)
    3640:	31001115 	stw	r4,68(r6)
    3644:	dc000f17 	ldw	r16,60(sp)
    3648:	003e4b06 	br	2f78 <_dtoa_r+0x3c4>
    364c:	d9801717 	ldw	r6,92(sp)
    3650:	0023883a 	mov	r17,zero
    3654:	31bfff04 	addi	r6,r6,-4
    3658:	d9801715 	stw	r6,92(sp)
    365c:	003df806 	br	2e40 <_dtoa_r+0x28c>
    3660:	00800804 	movi	r2,32
    3664:	10c9c83a 	sub	r4,r2,r3
    3668:	00c00104 	movi	r3,4
    366c:	19005a16 	blt	r3,r4,37d8 <_dtoa_r+0xc24>
    3670:	008000c4 	movi	r2,3
    3674:	113f7e16 	blt	r2,r4,3470 <_dtoa_r+0x8bc>
    3678:	20800704 	addi	r2,r4,28
    367c:	003f7506 	br	3454 <_dtoa_r+0x8a0>
    3680:	d9801717 	ldw	r6,92(sp)
    3684:	00800044 	movi	r2,1
    3688:	1180a10e 	bge	r2,r6,3910 <_dtoa_r+0xd5c>
    368c:	d9800f17 	ldw	r6,60(sp)
    3690:	d8c01017 	ldw	r3,64(sp)
    3694:	30bfffc4 	addi	r2,r6,-1
    3698:	1881c616 	blt	r3,r2,3db4 <_dtoa_r+0x1200>
    369c:	18a5c83a 	sub	r18,r3,r2
    36a0:	d8800f17 	ldw	r2,60(sp)
    36a4:	10026216 	blt	r2,zero,4030 <_dtoa_r+0x147c>
    36a8:	dc001117 	ldw	r16,68(sp)
    36ac:	1007883a 	mov	r3,r2
    36b0:	d9800a17 	ldw	r6,40(sp)
    36b4:	d8801117 	ldw	r2,68(sp)
    36b8:	d9001617 	ldw	r4,88(sp)
    36bc:	30cd883a 	add	r6,r6,r3
    36c0:	10c5883a 	add	r2,r2,r3
    36c4:	01400044 	movi	r5,1
    36c8:	d9800a15 	stw	r6,40(sp)
    36cc:	d8801115 	stw	r2,68(sp)
    36d0:	00069c00 	call	69c0 <__i2b>
    36d4:	1027883a 	mov	r19,r2
    36d8:	003f2506 	br	3370 <_dtoa_r+0x7bc>
    36dc:	00c00074 	movhi	r3,1
    36e0:	18c02c04 	addi	r3,r3,176
    36e4:	003d6706 	br	2c84 <_dtoa_r+0xd0>
    36e8:	dd800517 	ldw	r22,20(sp)
    36ec:	04000044 	movi	r16,1
    36f0:	00000706 	br	3710 <_dtoa_r+0xb5c>
    36f4:	d9400717 	ldw	r5,28(sp)
    36f8:	d9001617 	ldw	r4,88(sp)
    36fc:	01800284 	movi	r6,10
    3700:	000f883a 	mov	r7,zero
    3704:	00069fc0 	call	69fc <__multadd>
    3708:	d8800715 	stw	r2,28(sp)
    370c:	84000044 	addi	r16,r16,1
    3710:	d9000717 	ldw	r4,28(sp)
    3714:	900b883a 	mov	r5,r18
    3718:	000299c0 	call	299c <quorem>
    371c:	15c00c04 	addi	r23,r2,48
    3720:	b5c00005 	stb	r23,0(r22)
    3724:	d8c00f17 	ldw	r3,60(sp)
    3728:	b5800044 	addi	r22,r22,1
    372c:	80fff116 	blt	r16,r3,36f4 <_dtoa_r+0xb40>
    3730:	d8000615 	stw	zero,24(sp)
    3734:	d9400717 	ldw	r5,28(sp)
    3738:	d9001617 	ldw	r4,88(sp)
    373c:	01800044 	movi	r6,1
    3740:	000668c0 	call	668c <__lshift>
    3744:	1009883a 	mov	r4,r2
    3748:	900b883a 	mov	r5,r18
    374c:	d8800715 	stw	r2,28(sp)
    3750:	0005ea40 	call	5ea4 <__mcmp>
    3754:	00803c0e 	bge	zero,r2,3848 <_dtoa_r+0xc94>
    3758:	b009883a 	mov	r4,r22
    375c:	213fffc4 	addi	r4,r4,-1
    3760:	21400003 	ldbu	r5,0(r4)
    3764:	00800e44 	movi	r2,57
    3768:	28c03fcc 	andi	r3,r5,255
    376c:	18c0201c 	xori	r3,r3,128
    3770:	18ffe004 	addi	r3,r3,-128
    3774:	1881981e 	bne	r3,r2,3dd8 <_dtoa_r+0x1224>
    3778:	d9800517 	ldw	r6,20(sp)
    377c:	21bff71e 	bne	r4,r6,375c <_dtoa_r+0xba8>
    3780:	d8800d17 	ldw	r2,52(sp)
    3784:	37000044 	addi	fp,r6,1
    3788:	10800044 	addi	r2,r2,1
    378c:	d8800d15 	stw	r2,52(sp)
    3790:	00800c44 	movi	r2,49
    3794:	30800005 	stb	r2,0(r6)
    3798:	d9001617 	ldw	r4,88(sp)
    379c:	900b883a 	mov	r5,r18
    37a0:	0005d480 	call	5d48 <_Bfree>
    37a4:	983ecd26 	beq	r19,zero,32dc <_dtoa_r+0x728>
    37a8:	d8c00617 	ldw	r3,24(sp)
    37ac:	18000426 	beq	r3,zero,37c0 <_dtoa_r+0xc0c>
    37b0:	1cc00326 	beq	r3,r19,37c0 <_dtoa_r+0xc0c>
    37b4:	d9001617 	ldw	r4,88(sp)
    37b8:	180b883a 	mov	r5,r3
    37bc:	0005d480 	call	5d48 <_Bfree>
    37c0:	d9001617 	ldw	r4,88(sp)
    37c4:	980b883a 	mov	r5,r19
    37c8:	0005d480 	call	5d48 <_Bfree>
    37cc:	003ec306 	br	32dc <_dtoa_r+0x728>
    37d0:	1805883a 	mov	r2,r3
    37d4:	003eeb06 	br	3384 <_dtoa_r+0x7d0>
    37d8:	d9800a17 	ldw	r6,40(sp)
    37dc:	d8c01117 	ldw	r3,68(sp)
    37e0:	20bfff04 	addi	r2,r4,-4
    37e4:	308d883a 	add	r6,r6,r2
    37e8:	1887883a 	add	r3,r3,r2
    37ec:	80a1883a 	add	r16,r16,r2
    37f0:	d9800a15 	stw	r6,40(sp)
    37f4:	d8c01115 	stw	r3,68(sp)
    37f8:	003f1d06 	br	3470 <_dtoa_r+0x8bc>
    37fc:	a03f0c1e 	bne	r20,zero,3430 <_dtoa_r+0x87c>
    3800:	00800434 	movhi	r2,16
    3804:	10bfffc4 	addi	r2,r2,-1
    3808:	a884703a 	and	r2,r21,r2
    380c:	103f081e 	bne	r2,zero,3430 <_dtoa_r+0x87c>
    3810:	a89ffc2c 	andhi	r2,r21,32752
    3814:	103f0626 	beq	r2,zero,3430 <_dtoa_r+0x87c>
    3818:	d8c01117 	ldw	r3,68(sp)
    381c:	d9000a17 	ldw	r4,40(sp)
    3820:	18c00044 	addi	r3,r3,1
    3824:	21000044 	addi	r4,r4,1
    3828:	d8c01115 	stw	r3,68(sp)
    382c:	d9000a15 	stw	r4,40(sp)
    3830:	003f0006 	br	3434 <_dtoa_r+0x880>
    3834:	d9400717 	ldw	r5,28(sp)
    3838:	d9001617 	ldw	r4,88(sp)
    383c:	0006afc0 	call	6afc <__pow5mult>
    3840:	d8800715 	stw	r2,28(sp)
    3844:	003eed06 	br	33fc <_dtoa_r+0x848>
    3848:	1000021e 	bne	r2,zero,3854 <_dtoa_r+0xca0>
    384c:	b880004c 	andi	r2,r23,1
    3850:	103fc11e 	bne	r2,zero,3758 <_dtoa_r+0xba4>
    3854:	b5bfffc4 	addi	r22,r22,-1
    3858:	b0c00007 	ldb	r3,0(r22)
    385c:	00800c04 	movi	r2,48
    3860:	18bffc26 	beq	r3,r2,3854 <_dtoa_r+0xca0>
    3864:	b7000044 	addi	fp,r22,1
    3868:	003fcb06 	br	3798 <_dtoa_r+0xbe4>
    386c:	d9800d17 	ldw	r6,52(sp)
    3870:	018fc83a 	sub	r7,zero,r6
    3874:	3801f726 	beq	r7,zero,4054 <_dtoa_r+0x14a0>
    3878:	398003cc 	andi	r6,r7,15
    387c:	300c90fa 	slli	r6,r6,3
    3880:	01400074 	movhi	r5,1
    3884:	29404a04 	addi	r5,r5,296
    3888:	d9001217 	ldw	r4,72(sp)
    388c:	314d883a 	add	r6,r6,r5
    3890:	30c00117 	ldw	r3,4(r6)
    3894:	30800017 	ldw	r2,0(r6)
    3898:	d9401317 	ldw	r5,76(sp)
    389c:	3821d13a 	srai	r16,r7,4
    38a0:	100d883a 	mov	r6,r2
    38a4:	180f883a 	mov	r7,r3
    38a8:	0008b3c0 	call	8b3c <__muldf3>
    38ac:	1011883a 	mov	r8,r2
    38b0:	1813883a 	mov	r9,r3
    38b4:	1029883a 	mov	r20,r2
    38b8:	182b883a 	mov	r21,r3
    38bc:	8001e526 	beq	r16,zero,4054 <_dtoa_r+0x14a0>
    38c0:	05800084 	movi	r22,2
    38c4:	04400074 	movhi	r17,1
    38c8:	8c407c04 	addi	r17,r17,496
    38cc:	8080004c 	andi	r2,r16,1
    38d0:	1005003a 	cmpeq	r2,r2,zero
    38d4:	1000081e 	bne	r2,zero,38f8 <_dtoa_r+0xd44>
    38d8:	89800017 	ldw	r6,0(r17)
    38dc:	89c00117 	ldw	r7,4(r17)
    38e0:	480b883a 	mov	r5,r9
    38e4:	4009883a 	mov	r4,r8
    38e8:	0008b3c0 	call	8b3c <__muldf3>
    38ec:	1011883a 	mov	r8,r2
    38f0:	b5800044 	addi	r22,r22,1
    38f4:	1813883a 	mov	r9,r3
    38f8:	8021d07a 	srai	r16,r16,1
    38fc:	8c400204 	addi	r17,r17,8
    3900:	803ff21e 	bne	r16,zero,38cc <_dtoa_r+0xd18>
    3904:	4029883a 	mov	r20,r8
    3908:	482b883a 	mov	r21,r9
    390c:	003dca06 	br	3038 <_dtoa_r+0x484>
    3910:	d9000817 	ldw	r4,32(sp)
    3914:	2005003a 	cmpeq	r2,r4,zero
    3918:	1001f61e 	bne	r2,zero,40f4 <_dtoa_r+0x1540>
    391c:	dc001117 	ldw	r16,68(sp)
    3920:	dc801017 	ldw	r18,64(sp)
    3924:	18c10cc4 	addi	r3,r3,1075
    3928:	003f6106 	br	36b0 <_dtoa_r+0xafc>
    392c:	d8000b15 	stw	zero,44(sp)
    3930:	d9802617 	ldw	r6,152(sp)
    3934:	d8c00d17 	ldw	r3,52(sp)
    3938:	30800044 	addi	r2,r6,1
    393c:	18ad883a 	add	r22,r3,r2
    3940:	b13fffc4 	addi	r4,r22,-1
    3944:	d9000e15 	stw	r4,56(sp)
    3948:	0581f60e 	bge	zero,r22,4124 <_dtoa_r+0x1570>
    394c:	dd800f15 	stw	r22,60(sp)
    3950:	003f3006 	br	3614 <_dtoa_r+0xa60>
    3954:	d8000b15 	stw	zero,44(sp)
    3958:	d9002617 	ldw	r4,152(sp)
    395c:	0101eb0e 	bge	zero,r4,410c <_dtoa_r+0x1558>
    3960:	202d883a 	mov	r22,r4
    3964:	d9000e15 	stw	r4,56(sp)
    3968:	d9000f15 	stw	r4,60(sp)
    396c:	003f2906 	br	3614 <_dtoa_r+0xa60>
    3970:	01800044 	movi	r6,1
    3974:	d9800b15 	stw	r6,44(sp)
    3978:	003ff706 	br	3958 <_dtoa_r+0xda4>
    397c:	01000044 	movi	r4,1
    3980:	d9000b15 	stw	r4,44(sp)
    3984:	003fea06 	br	3930 <_dtoa_r+0xd7c>
    3988:	04000c0e 	bge	zero,r16,39bc <_dtoa_r+0xe08>
    398c:	d9400717 	ldw	r5,28(sp)
    3990:	d9001617 	ldw	r4,88(sp)
    3994:	01800044 	movi	r6,1
    3998:	000668c0 	call	668c <__lshift>
    399c:	1009883a 	mov	r4,r2
    39a0:	900b883a 	mov	r5,r18
    39a4:	d8800715 	stw	r2,28(sp)
    39a8:	0005ea40 	call	5ea4 <__mcmp>
    39ac:	0081e00e 	bge	zero,r2,4130 <_dtoa_r+0x157c>
    39b0:	bdc00044 	addi	r23,r23,1
    39b4:	00800e84 	movi	r2,58
    39b8:	b881a226 	beq	r23,r2,4044 <_dtoa_r+0x1490>
    39bc:	b7000044 	addi	fp,r22,1
    39c0:	b5c00005 	stb	r23,0(r22)
    39c4:	003f7406 	br	3798 <_dtoa_r+0xbe4>
    39c8:	00800e44 	movi	r2,57
    39cc:	b8819d26 	beq	r23,r2,4044 <_dtoa_r+0x1490>
    39d0:	053ffa0e 	bge	zero,r20,39bc <_dtoa_r+0xe08>
    39d4:	8dc00c44 	addi	r23,r17,49
    39d8:	003ff806 	br	39bc <_dtoa_r+0xe08>
    39dc:	d9001617 	ldw	r4,88(sp)
    39e0:	a80b883a 	mov	r5,r21
    39e4:	04000044 	movi	r16,1
    39e8:	0005d480 	call	5d48 <_Bfree>
    39ec:	003edf06 	br	356c <_dtoa_r+0x9b8>
    39f0:	d9001617 	ldw	r4,88(sp)
    39f4:	980b883a 	mov	r5,r19
    39f8:	01800284 	movi	r6,10
    39fc:	000f883a 	mov	r7,zero
    3a00:	00069fc0 	call	69fc <__multadd>
    3a04:	1027883a 	mov	r19,r2
    3a08:	d8800615 	stw	r2,24(sp)
    3a0c:	003ebb06 	br	34fc <_dtoa_r+0x948>
    3a10:	d9801117 	ldw	r6,68(sp)
    3a14:	d8800d17 	ldw	r2,52(sp)
    3a18:	d8000915 	stw	zero,36(sp)
    3a1c:	308dc83a 	sub	r6,r6,r2
    3a20:	0087c83a 	sub	r3,zero,r2
    3a24:	d9801115 	stw	r6,68(sp)
    3a28:	d8c01015 	stw	r3,64(sp)
    3a2c:	003cfe06 	br	2e28 <_dtoa_r+0x274>
    3a30:	018dc83a 	sub	r6,zero,r6
    3a34:	d9801115 	stw	r6,68(sp)
    3a38:	d8000a15 	stw	zero,40(sp)
    3a3c:	003cf306 	br	2e0c <_dtoa_r+0x258>
    3a40:	d9000d17 	ldw	r4,52(sp)
    3a44:	00094000 	call	9400 <__floatsidf>
    3a48:	880b883a 	mov	r5,r17
    3a4c:	8009883a 	mov	r4,r16
    3a50:	180f883a 	mov	r7,r3
    3a54:	100d883a 	mov	r6,r2
    3a58:	00091e00 	call	91e0 <__nedf2>
    3a5c:	103ce126 	beq	r2,zero,2de4 <_dtoa_r+0x230>
    3a60:	d9800d17 	ldw	r6,52(sp)
    3a64:	31bfffc4 	addi	r6,r6,-1
    3a68:	d9800d15 	stw	r6,52(sp)
    3a6c:	003cdd06 	br	2de4 <_dtoa_r+0x230>
    3a70:	d9000717 	ldw	r4,28(sp)
    3a74:	900b883a 	mov	r5,r18
    3a78:	0005ea40 	call	5ea4 <__mcmp>
    3a7c:	103e8d0e 	bge	r2,zero,34b4 <_dtoa_r+0x900>
    3a80:	d9400717 	ldw	r5,28(sp)
    3a84:	d9001617 	ldw	r4,88(sp)
    3a88:	01800284 	movi	r6,10
    3a8c:	000f883a 	mov	r7,zero
    3a90:	00069fc0 	call	69fc <__multadd>
    3a94:	d9800d17 	ldw	r6,52(sp)
    3a98:	d8800715 	stw	r2,28(sp)
    3a9c:	31bfffc4 	addi	r6,r6,-1
    3aa0:	d9800d15 	stw	r6,52(sp)
    3aa4:	b001a71e 	bne	r22,zero,4144 <_dtoa_r+0x1590>
    3aa8:	d8800e17 	ldw	r2,56(sp)
    3aac:	d8800f15 	stw	r2,60(sp)
    3ab0:	003e8006 	br	34b4 <_dtoa_r+0x900>
    3ab4:	90800417 	ldw	r2,16(r18)
    3ab8:	1085883a 	add	r2,r2,r2
    3abc:	1085883a 	add	r2,r2,r2
    3ac0:	1485883a 	add	r2,r2,r18
    3ac4:	11000417 	ldw	r4,16(r2)
    3ac8:	0005d700 	call	5d70 <__hi0bits>
    3acc:	00c00804 	movi	r3,32
    3ad0:	1887c83a 	sub	r3,r3,r2
    3ad4:	003e5a06 	br	3440 <_dtoa_r+0x88c>
    3ad8:	d9400717 	ldw	r5,28(sp)
    3adc:	d9801017 	ldw	r6,64(sp)
    3ae0:	d9001617 	ldw	r4,88(sp)
    3ae4:	0006afc0 	call	6afc <__pow5mult>
    3ae8:	d8800715 	stw	r2,28(sp)
    3aec:	003e4306 	br	33fc <_dtoa_r+0x848>
    3af0:	d9800f17 	ldw	r6,60(sp)
    3af4:	d8800d17 	ldw	r2,52(sp)
    3af8:	d9800315 	stw	r6,12(sp)
    3afc:	d8800415 	stw	r2,16(sp)
    3b00:	d8c00b17 	ldw	r3,44(sp)
    3b04:	1805003a 	cmpeq	r2,r3,zero
    3b08:	1000e21e 	bne	r2,zero,3e94 <_dtoa_r+0x12e0>
    3b0c:	d9000317 	ldw	r4,12(sp)
    3b10:	0005883a 	mov	r2,zero
    3b14:	00cff834 	movhi	r3,16352
    3b18:	200c90fa 	slli	r6,r4,3
    3b1c:	01000074 	movhi	r4,1
    3b20:	21004a04 	addi	r4,r4,296
    3b24:	180b883a 	mov	r5,r3
    3b28:	310d883a 	add	r6,r6,r4
    3b2c:	327fff17 	ldw	r9,-4(r6)
    3b30:	323ffe17 	ldw	r8,-8(r6)
    3b34:	1009883a 	mov	r4,r2
    3b38:	480f883a 	mov	r7,r9
    3b3c:	400d883a 	mov	r6,r8
    3b40:	0008f000 	call	8f00 <__divdf3>
    3b44:	180b883a 	mov	r5,r3
    3b48:	b00d883a 	mov	r6,r22
    3b4c:	b80f883a 	mov	r7,r23
    3b50:	1009883a 	mov	r4,r2
    3b54:	0008a480 	call	8a48 <__subdf3>
    3b58:	a80b883a 	mov	r5,r21
    3b5c:	a009883a 	mov	r4,r20
    3b60:	d8c01915 	stw	r3,100(sp)
    3b64:	d8801815 	stw	r2,96(sp)
    3b68:	00094f80 	call	94f8 <__fixdfsi>
    3b6c:	1009883a 	mov	r4,r2
    3b70:	1027883a 	mov	r19,r2
    3b74:	00094000 	call	9400 <__floatsidf>
    3b78:	a80b883a 	mov	r5,r21
    3b7c:	a009883a 	mov	r4,r20
    3b80:	180f883a 	mov	r7,r3
    3b84:	100d883a 	mov	r6,r2
    3b88:	0008a480 	call	8a48 <__subdf3>
    3b8c:	d9801817 	ldw	r6,96(sp)
    3b90:	1823883a 	mov	r17,r3
    3b94:	d8801415 	stw	r2,80(sp)
    3b98:	302d883a 	mov	r22,r6
    3b9c:	d9800517 	ldw	r6,20(sp)
    3ba0:	9cc00c04 	addi	r19,r19,48
    3ba4:	dc401515 	stw	r17,84(sp)
    3ba8:	d8c01917 	ldw	r3,100(sp)
    3bac:	34c00005 	stb	r19,0(r6)
    3bb0:	d8800517 	ldw	r2,20(sp)
    3bb4:	d9401917 	ldw	r5,100(sp)
    3bb8:	d9801417 	ldw	r6,80(sp)
    3bbc:	b009883a 	mov	r4,r22
    3bc0:	880f883a 	mov	r7,r17
    3bc4:	182f883a 	mov	r23,r3
    3bc8:	17000044 	addi	fp,r2,1
    3bcc:	00092680 	call	9268 <__gtdf2>
    3bd0:	00804e16 	blt	zero,r2,3d0c <_dtoa_r+0x1158>
    3bd4:	d9801417 	ldw	r6,80(sp)
    3bd8:	0005883a 	mov	r2,zero
    3bdc:	00cffc34 	movhi	r3,16368
    3be0:	180b883a 	mov	r5,r3
    3be4:	880f883a 	mov	r7,r17
    3be8:	1009883a 	mov	r4,r2
    3bec:	0008a480 	call	8a48 <__subdf3>
    3bf0:	d9401917 	ldw	r5,100(sp)
    3bf4:	180f883a 	mov	r7,r3
    3bf8:	b009883a 	mov	r4,r22
    3bfc:	100d883a 	mov	r6,r2
    3c00:	00092680 	call	9268 <__gtdf2>
    3c04:	00bda216 	blt	zero,r2,3290 <_dtoa_r+0x6dc>
    3c08:	d8c00317 	ldw	r3,12(sp)
    3c0c:	00800044 	movi	r2,1
    3c10:	10c01216 	blt	r2,r3,3c5c <_dtoa_r+0x10a8>
    3c14:	003d4506 	br	312c <_dtoa_r+0x578>
    3c18:	d9801417 	ldw	r6,80(sp)
    3c1c:	0005883a 	mov	r2,zero
    3c20:	00cffc34 	movhi	r3,16368
    3c24:	180b883a 	mov	r5,r3
    3c28:	880f883a 	mov	r7,r17
    3c2c:	1009883a 	mov	r4,r2
    3c30:	0008a480 	call	8a48 <__subdf3>
    3c34:	d9c01b17 	ldw	r7,108(sp)
    3c38:	180b883a 	mov	r5,r3
    3c3c:	1009883a 	mov	r4,r2
    3c40:	b00d883a 	mov	r6,r22
    3c44:	00093780 	call	9378 <__ltdf2>
    3c48:	103d9116 	blt	r2,zero,3290 <_dtoa_r+0x6dc>
    3c4c:	d9800517 	ldw	r6,20(sp)
    3c50:	d9000317 	ldw	r4,12(sp)
    3c54:	3105883a 	add	r2,r6,r4
    3c58:	e0bd3426 	beq	fp,r2,312c <_dtoa_r+0x578>
    3c5c:	04500934 	movhi	r17,16420
    3c60:	0021883a 	mov	r16,zero
    3c64:	b80b883a 	mov	r5,r23
    3c68:	b009883a 	mov	r4,r22
    3c6c:	800d883a 	mov	r6,r16
    3c70:	880f883a 	mov	r7,r17
    3c74:	0008b3c0 	call	8b3c <__muldf3>
    3c78:	d9401517 	ldw	r5,84(sp)
    3c7c:	d9001417 	ldw	r4,80(sp)
    3c80:	880f883a 	mov	r7,r17
    3c84:	000d883a 	mov	r6,zero
    3c88:	d8801a15 	stw	r2,104(sp)
    3c8c:	d8c01b15 	stw	r3,108(sp)
    3c90:	0008b3c0 	call	8b3c <__muldf3>
    3c94:	180b883a 	mov	r5,r3
    3c98:	1009883a 	mov	r4,r2
    3c9c:	1823883a 	mov	r17,r3
    3ca0:	1021883a 	mov	r16,r2
    3ca4:	00094f80 	call	94f8 <__fixdfsi>
    3ca8:	1009883a 	mov	r4,r2
    3cac:	102b883a 	mov	r21,r2
    3cb0:	00094000 	call	9400 <__floatsidf>
    3cb4:	880b883a 	mov	r5,r17
    3cb8:	8009883a 	mov	r4,r16
    3cbc:	180f883a 	mov	r7,r3
    3cc0:	100d883a 	mov	r6,r2
    3cc4:	0008a480 	call	8a48 <__subdf3>
    3cc8:	1021883a 	mov	r16,r2
    3ccc:	d9001b17 	ldw	r4,108(sp)
    3cd0:	1823883a 	mov	r17,r3
    3cd4:	dc001415 	stw	r16,80(sp)
    3cd8:	ad400c04 	addi	r21,r21,48
    3cdc:	dc401515 	stw	r17,84(sp)
    3ce0:	d8801a17 	ldw	r2,104(sp)
    3ce4:	e5400005 	stb	r21,0(fp)
    3ce8:	202f883a 	mov	r23,r4
    3cec:	d9c01b17 	ldw	r7,108(sp)
    3cf0:	d9001417 	ldw	r4,80(sp)
    3cf4:	880b883a 	mov	r5,r17
    3cf8:	100d883a 	mov	r6,r2
    3cfc:	102d883a 	mov	r22,r2
    3d00:	e7000044 	addi	fp,fp,1
    3d04:	00093780 	call	9378 <__ltdf2>
    3d08:	103fc30e 	bge	r2,zero,3c18 <_dtoa_r+0x1064>
    3d0c:	d9000417 	ldw	r4,16(sp)
    3d10:	d9000d15 	stw	r4,52(sp)
    3d14:	003d7106 	br	32dc <_dtoa_r+0x728>
    3d18:	d9801717 	ldw	r6,92(sp)
    3d1c:	00800084 	movi	r2,2
    3d20:	11bde60e 	bge	r2,r6,34bc <_dtoa_r+0x908>
    3d24:	203cfb1e 	bne	r4,zero,3114 <_dtoa_r+0x560>
    3d28:	d9001617 	ldw	r4,88(sp)
    3d2c:	900b883a 	mov	r5,r18
    3d30:	01800144 	movi	r6,5
    3d34:	000f883a 	mov	r7,zero
    3d38:	00069fc0 	call	69fc <__multadd>
    3d3c:	d9000717 	ldw	r4,28(sp)
    3d40:	100b883a 	mov	r5,r2
    3d44:	1025883a 	mov	r18,r2
    3d48:	0005ea40 	call	5ea4 <__mcmp>
    3d4c:	00bcf10e 	bge	zero,r2,3114 <_dtoa_r+0x560>
    3d50:	d8c00d17 	ldw	r3,52(sp)
    3d54:	d9000517 	ldw	r4,20(sp)
    3d58:	d8000615 	stw	zero,24(sp)
    3d5c:	18c00044 	addi	r3,r3,1
    3d60:	d8c00d15 	stw	r3,52(sp)
    3d64:	00800c44 	movi	r2,49
    3d68:	27000044 	addi	fp,r4,1
    3d6c:	20800005 	stb	r2,0(r4)
    3d70:	003e8906 	br	3798 <_dtoa_r+0xbe4>
    3d74:	d8c00517 	ldw	r3,20(sp)
    3d78:	003bc206 	br	2c84 <_dtoa_r+0xd0>
    3d7c:	01800074 	movhi	r6,1
    3d80:	31807c04 	addi	r6,r6,496
    3d84:	30c00917 	ldw	r3,36(r6)
    3d88:	30800817 	ldw	r2,32(r6)
    3d8c:	d9001217 	ldw	r4,72(sp)
    3d90:	d9401317 	ldw	r5,76(sp)
    3d94:	180f883a 	mov	r7,r3
    3d98:	100d883a 	mov	r6,r2
    3d9c:	0008f000 	call	8f00 <__divdf3>
    3da0:	948003cc 	andi	r18,r18,15
    3da4:	058000c4 	movi	r22,3
    3da8:	1029883a 	mov	r20,r2
    3dac:	182b883a 	mov	r21,r3
    3db0:	003c8906 	br	2fd8 <_dtoa_r+0x424>
    3db4:	d9001017 	ldw	r4,64(sp)
    3db8:	d9800917 	ldw	r6,36(sp)
    3dbc:	0025883a 	mov	r18,zero
    3dc0:	1105c83a 	sub	r2,r2,r4
    3dc4:	2089883a 	add	r4,r4,r2
    3dc8:	308d883a 	add	r6,r6,r2
    3dcc:	d9001015 	stw	r4,64(sp)
    3dd0:	d9800915 	stw	r6,36(sp)
    3dd4:	003e3206 	br	36a0 <_dtoa_r+0xaec>
    3dd8:	28800044 	addi	r2,r5,1
    3ddc:	27000044 	addi	fp,r4,1
    3de0:	20800005 	stb	r2,0(r4)
    3de4:	003e6c06 	br	3798 <_dtoa_r+0xbe4>
    3de8:	d8800f17 	ldw	r2,60(sp)
    3dec:	00bce016 	blt	zero,r2,3170 <_dtoa_r+0x5bc>
    3df0:	d9800f17 	ldw	r6,60(sp)
    3df4:	303cc51e 	bne	r6,zero,310c <_dtoa_r+0x558>
    3df8:	0005883a 	mov	r2,zero
    3dfc:	00d00534 	movhi	r3,16404
    3e00:	980b883a 	mov	r5,r19
    3e04:	180f883a 	mov	r7,r3
    3e08:	9009883a 	mov	r4,r18
    3e0c:	100d883a 	mov	r6,r2
    3e10:	0008b3c0 	call	8b3c <__muldf3>
    3e14:	180b883a 	mov	r5,r3
    3e18:	a80f883a 	mov	r7,r21
    3e1c:	1009883a 	mov	r4,r2
    3e20:	a00d883a 	mov	r6,r20
    3e24:	00092f00 	call	92f0 <__gedf2>
    3e28:	103cb80e 	bge	r2,zero,310c <_dtoa_r+0x558>
    3e2c:	0027883a 	mov	r19,zero
    3e30:	0025883a 	mov	r18,zero
    3e34:	003fc606 	br	3d50 <_dtoa_r+0x119c>
    3e38:	99400117 	ldw	r5,4(r19)
    3e3c:	d9001617 	ldw	r4,88(sp)
    3e40:	00062c80 	call	62c8 <_Balloc>
    3e44:	99800417 	ldw	r6,16(r19)
    3e48:	11000304 	addi	r4,r2,12
    3e4c:	99400304 	addi	r5,r19,12
    3e50:	318d883a 	add	r6,r6,r6
    3e54:	318d883a 	add	r6,r6,r6
    3e58:	31800204 	addi	r6,r6,8
    3e5c:	1023883a 	mov	r17,r2
    3e60:	0005b300 	call	5b30 <memcpy>
    3e64:	d9001617 	ldw	r4,88(sp)
    3e68:	880b883a 	mov	r5,r17
    3e6c:	01800044 	movi	r6,1
    3e70:	000668c0 	call	668c <__lshift>
    3e74:	100b883a 	mov	r5,r2
    3e78:	003d9c06 	br	34ec <_dtoa_r+0x938>
    3e7c:	00800e44 	movi	r2,57
    3e80:	b8807026 	beq	r23,r2,4044 <_dtoa_r+0x1490>
    3e84:	b8800044 	addi	r2,r23,1
    3e88:	b7000044 	addi	fp,r22,1
    3e8c:	b0800005 	stb	r2,0(r22)
    3e90:	003e4106 	br	3798 <_dtoa_r+0xbe4>
    3e94:	d8800317 	ldw	r2,12(sp)
    3e98:	01800074 	movhi	r6,1
    3e9c:	31804a04 	addi	r6,r6,296
    3ea0:	b009883a 	mov	r4,r22
    3ea4:	100e90fa 	slli	r7,r2,3
    3ea8:	b80b883a 	mov	r5,r23
    3eac:	398f883a 	add	r7,r7,r6
    3eb0:	38bffe17 	ldw	r2,-8(r7)
    3eb4:	d9800517 	ldw	r6,20(sp)
    3eb8:	38ffff17 	ldw	r3,-4(r7)
    3ebc:	37000044 	addi	fp,r6,1
    3ec0:	180f883a 	mov	r7,r3
    3ec4:	100d883a 	mov	r6,r2
    3ec8:	0008b3c0 	call	8b3c <__muldf3>
    3ecc:	a80b883a 	mov	r5,r21
    3ed0:	a009883a 	mov	r4,r20
    3ed4:	182f883a 	mov	r23,r3
    3ed8:	102d883a 	mov	r22,r2
    3edc:	00094f80 	call	94f8 <__fixdfsi>
    3ee0:	1009883a 	mov	r4,r2
    3ee4:	1027883a 	mov	r19,r2
    3ee8:	00094000 	call	9400 <__floatsidf>
    3eec:	a80b883a 	mov	r5,r21
    3ef0:	a009883a 	mov	r4,r20
    3ef4:	180f883a 	mov	r7,r3
    3ef8:	100d883a 	mov	r6,r2
    3efc:	0008a480 	call	8a48 <__subdf3>
    3f00:	180b883a 	mov	r5,r3
    3f04:	d8c00517 	ldw	r3,20(sp)
    3f08:	9cc00c04 	addi	r19,r19,48
    3f0c:	1009883a 	mov	r4,r2
    3f10:	1cc00005 	stb	r19,0(r3)
    3f14:	2021883a 	mov	r16,r4
    3f18:	d9000317 	ldw	r4,12(sp)
    3f1c:	00800044 	movi	r2,1
    3f20:	2823883a 	mov	r17,r5
    3f24:	20802226 	beq	r4,r2,3fb0 <_dtoa_r+0x13fc>
    3f28:	1029883a 	mov	r20,r2
    3f2c:	0005883a 	mov	r2,zero
    3f30:	00d00934 	movhi	r3,16420
    3f34:	180f883a 	mov	r7,r3
    3f38:	100d883a 	mov	r6,r2
    3f3c:	880b883a 	mov	r5,r17
    3f40:	8009883a 	mov	r4,r16
    3f44:	0008b3c0 	call	8b3c <__muldf3>
    3f48:	180b883a 	mov	r5,r3
    3f4c:	1009883a 	mov	r4,r2
    3f50:	1823883a 	mov	r17,r3
    3f54:	1021883a 	mov	r16,r2
    3f58:	00094f80 	call	94f8 <__fixdfsi>
    3f5c:	1009883a 	mov	r4,r2
    3f60:	102b883a 	mov	r21,r2
    3f64:	00094000 	call	9400 <__floatsidf>
    3f68:	880b883a 	mov	r5,r17
    3f6c:	8009883a 	mov	r4,r16
    3f70:	180f883a 	mov	r7,r3
    3f74:	100d883a 	mov	r6,r2
    3f78:	0008a480 	call	8a48 <__subdf3>
    3f7c:	180b883a 	mov	r5,r3
    3f80:	d8c00517 	ldw	r3,20(sp)
    3f84:	1009883a 	mov	r4,r2
    3f88:	ad400c04 	addi	r21,r21,48
    3f8c:	1d05883a 	add	r2,r3,r20
    3f90:	15400005 	stb	r21,0(r2)
    3f94:	2021883a 	mov	r16,r4
    3f98:	d9000317 	ldw	r4,12(sp)
    3f9c:	a5000044 	addi	r20,r20,1
    3fa0:	2823883a 	mov	r17,r5
    3fa4:	a13fe11e 	bne	r20,r4,3f2c <_dtoa_r+0x1378>
    3fa8:	e505883a 	add	r2,fp,r20
    3fac:	173fffc4 	addi	fp,r2,-1
    3fb0:	0025883a 	mov	r18,zero
    3fb4:	04cff834 	movhi	r19,16352
    3fb8:	b009883a 	mov	r4,r22
    3fbc:	b80b883a 	mov	r5,r23
    3fc0:	900d883a 	mov	r6,r18
    3fc4:	980f883a 	mov	r7,r19
    3fc8:	0008ac80 	call	8ac8 <__adddf3>
    3fcc:	180b883a 	mov	r5,r3
    3fd0:	1009883a 	mov	r4,r2
    3fd4:	800d883a 	mov	r6,r16
    3fd8:	880f883a 	mov	r7,r17
    3fdc:	00093780 	call	9378 <__ltdf2>
    3fe0:	103cab16 	blt	r2,zero,3290 <_dtoa_r+0x6dc>
    3fe4:	0009883a 	mov	r4,zero
    3fe8:	980b883a 	mov	r5,r19
    3fec:	b80f883a 	mov	r7,r23
    3ff0:	b00d883a 	mov	r6,r22
    3ff4:	0008a480 	call	8a48 <__subdf3>
    3ff8:	180b883a 	mov	r5,r3
    3ffc:	880f883a 	mov	r7,r17
    4000:	1009883a 	mov	r4,r2
    4004:	800d883a 	mov	r6,r16
    4008:	00092680 	call	9268 <__gtdf2>
    400c:	00bc470e 	bge	zero,r2,312c <_dtoa_r+0x578>
    4010:	00c00c04 	movi	r3,48
    4014:	e73fffc4 	addi	fp,fp,-1
    4018:	e0800007 	ldb	r2,0(fp)
    401c:	10fffd26 	beq	r2,r3,4014 <_dtoa_r+0x1460>
    4020:	d9800417 	ldw	r6,16(sp)
    4024:	e7000044 	addi	fp,fp,1
    4028:	d9800d15 	stw	r6,52(sp)
    402c:	003cab06 	br	32dc <_dtoa_r+0x728>
    4030:	d8c00f17 	ldw	r3,60(sp)
    4034:	d9001117 	ldw	r4,68(sp)
    4038:	20e1c83a 	sub	r16,r4,r3
    403c:	0007883a 	mov	r3,zero
    4040:	003d9b06 	br	36b0 <_dtoa_r+0xafc>
    4044:	00800e44 	movi	r2,57
    4048:	b0800005 	stb	r2,0(r22)
    404c:	b5800044 	addi	r22,r22,1
    4050:	003dc106 	br	3758 <_dtoa_r+0xba4>
    4054:	05800084 	movi	r22,2
    4058:	003bf706 	br	3038 <_dtoa_r+0x484>
    405c:	d9000f17 	ldw	r4,60(sp)
    4060:	013c000e 	bge	zero,r4,3064 <_dtoa_r+0x4b0>
    4064:	d9800e17 	ldw	r6,56(sp)
    4068:	01bc300e 	bge	zero,r6,312c <_dtoa_r+0x578>
    406c:	0005883a 	mov	r2,zero
    4070:	00d00934 	movhi	r3,16420
    4074:	a80b883a 	mov	r5,r21
    4078:	180f883a 	mov	r7,r3
    407c:	a009883a 	mov	r4,r20
    4080:	100d883a 	mov	r6,r2
    4084:	0008b3c0 	call	8b3c <__muldf3>
    4088:	b1000044 	addi	r4,r22,1
    408c:	1021883a 	mov	r16,r2
    4090:	1823883a 	mov	r17,r3
    4094:	00094000 	call	9400 <__floatsidf>
    4098:	880b883a 	mov	r5,r17
    409c:	8009883a 	mov	r4,r16
    40a0:	180f883a 	mov	r7,r3
    40a4:	100d883a 	mov	r6,r2
    40a8:	0008b3c0 	call	8b3c <__muldf3>
    40ac:	0011883a 	mov	r8,zero
    40b0:	02500734 	movhi	r9,16412
    40b4:	180b883a 	mov	r5,r3
    40b8:	480f883a 	mov	r7,r9
    40bc:	1009883a 	mov	r4,r2
    40c0:	400d883a 	mov	r6,r8
    40c4:	0008ac80 	call	8ac8 <__adddf3>
    40c8:	102d883a 	mov	r22,r2
    40cc:	00bf3034 	movhi	r2,64704
    40d0:	10ef883a 	add	r23,r2,r3
    40d4:	d8800d17 	ldw	r2,52(sp)
    40d8:	d8c00e17 	ldw	r3,56(sp)
    40dc:	8029883a 	mov	r20,r16
    40e0:	10bfffc4 	addi	r2,r2,-1
    40e4:	882b883a 	mov	r21,r17
    40e8:	d8800415 	stw	r2,16(sp)
    40ec:	d8c00315 	stw	r3,12(sp)
    40f0:	003e8306 	br	3b00 <_dtoa_r+0xf4c>
    40f4:	d8800117 	ldw	r2,4(sp)
    40f8:	dc001117 	ldw	r16,68(sp)
    40fc:	dc801017 	ldw	r18,64(sp)
    4100:	00c00d84 	movi	r3,54
    4104:	1887c83a 	sub	r3,r3,r2
    4108:	003d6906 	br	36b0 <_dtoa_r+0xafc>
    410c:	01800044 	movi	r6,1
    4110:	3021883a 	mov	r16,r6
    4114:	d9800f15 	stw	r6,60(sp)
    4118:	d9802615 	stw	r6,152(sp)
    411c:	d9800e15 	stw	r6,56(sp)
    4120:	003b9306 	br	2f70 <_dtoa_r+0x3bc>
    4124:	b021883a 	mov	r16,r22
    4128:	dd800f15 	stw	r22,60(sp)
    412c:	003b9006 	br	2f70 <_dtoa_r+0x3bc>
    4130:	103e221e 	bne	r2,zero,39bc <_dtoa_r+0xe08>
    4134:	b880004c 	andi	r2,r23,1
    4138:	1005003a 	cmpeq	r2,r2,zero
    413c:	103e1f1e 	bne	r2,zero,39bc <_dtoa_r+0xe08>
    4140:	003e1b06 	br	39b0 <_dtoa_r+0xdfc>
    4144:	d9001617 	ldw	r4,88(sp)
    4148:	980b883a 	mov	r5,r19
    414c:	01800284 	movi	r6,10
    4150:	000f883a 	mov	r7,zero
    4154:	00069fc0 	call	69fc <__multadd>
    4158:	d8c00e17 	ldw	r3,56(sp)
    415c:	1027883a 	mov	r19,r2
    4160:	d8c00f15 	stw	r3,60(sp)
    4164:	003cd306 	br	34b4 <_dtoa_r+0x900>

00004168 <_fflush_r>:
    4168:	defffb04 	addi	sp,sp,-20
    416c:	dcc00315 	stw	r19,12(sp)
    4170:	dc800215 	stw	r18,8(sp)
    4174:	dfc00415 	stw	ra,16(sp)
    4178:	dc400115 	stw	r17,4(sp)
    417c:	dc000015 	stw	r16,0(sp)
    4180:	2027883a 	mov	r19,r4
    4184:	2825883a 	mov	r18,r5
    4188:	20000226 	beq	r4,zero,4194 <_fflush_r+0x2c>
    418c:	20800e17 	ldw	r2,56(r4)
    4190:	10005626 	beq	r2,zero,42ec <_fflush_r+0x184>
    4194:	9100030b 	ldhu	r4,12(r18)
    4198:	20ffffcc 	andi	r3,r4,65535
    419c:	18e0001c 	xori	r3,r3,32768
    41a0:	18e00004 	addi	r3,r3,-32768
    41a4:	1880020c 	andi	r2,r3,8
    41a8:	1000261e 	bne	r2,zero,4244 <_fflush_r+0xdc>
    41ac:	90c00117 	ldw	r3,4(r18)
    41b0:	20820014 	ori	r2,r4,2048
    41b4:	9080030d 	sth	r2,12(r18)
    41b8:	1009883a 	mov	r4,r2
    41bc:	00c0400e 	bge	zero,r3,42c0 <_fflush_r+0x158>
    41c0:	92000a17 	ldw	r8,40(r18)
    41c4:	40004026 	beq	r8,zero,42c8 <_fflush_r+0x160>
    41c8:	2084000c 	andi	r2,r4,4096
    41cc:	10005326 	beq	r2,zero,431c <_fflush_r+0x1b4>
    41d0:	94001417 	ldw	r16,80(r18)
    41d4:	9080030b 	ldhu	r2,12(r18)
    41d8:	1080010c 	andi	r2,r2,4
    41dc:	1000481e 	bne	r2,zero,4300 <_fflush_r+0x198>
    41e0:	91400717 	ldw	r5,28(r18)
    41e4:	9809883a 	mov	r4,r19
    41e8:	800d883a 	mov	r6,r16
    41ec:	000f883a 	mov	r7,zero
    41f0:	403ee83a 	callr	r8
    41f4:	8080261e 	bne	r16,r2,4290 <_fflush_r+0x128>
    41f8:	9080030b 	ldhu	r2,12(r18)
    41fc:	91000417 	ldw	r4,16(r18)
    4200:	90000115 	stw	zero,4(r18)
    4204:	10bdffcc 	andi	r2,r2,63487
    4208:	10ffffcc 	andi	r3,r2,65535
    420c:	18c4000c 	andi	r3,r3,4096
    4210:	9080030d 	sth	r2,12(r18)
    4214:	91000015 	stw	r4,0(r18)
    4218:	18002b26 	beq	r3,zero,42c8 <_fflush_r+0x160>
    421c:	0007883a 	mov	r3,zero
    4220:	1805883a 	mov	r2,r3
    4224:	94001415 	stw	r16,80(r18)
    4228:	dfc00417 	ldw	ra,16(sp)
    422c:	dcc00317 	ldw	r19,12(sp)
    4230:	dc800217 	ldw	r18,8(sp)
    4234:	dc400117 	ldw	r17,4(sp)
    4238:	dc000017 	ldw	r16,0(sp)
    423c:	dec00504 	addi	sp,sp,20
    4240:	f800283a 	ret
    4244:	94400417 	ldw	r17,16(r18)
    4248:	88001f26 	beq	r17,zero,42c8 <_fflush_r+0x160>
    424c:	90800017 	ldw	r2,0(r18)
    4250:	18c000cc 	andi	r3,r3,3
    4254:	94400015 	stw	r17,0(r18)
    4258:	1461c83a 	sub	r16,r2,r17
    425c:	18002526 	beq	r3,zero,42f4 <_fflush_r+0x18c>
    4260:	0005883a 	mov	r2,zero
    4264:	90800215 	stw	r2,8(r18)
    4268:	0400170e 	bge	zero,r16,42c8 <_fflush_r+0x160>
    426c:	90c00917 	ldw	r3,36(r18)
    4270:	91400717 	ldw	r5,28(r18)
    4274:	880d883a 	mov	r6,r17
    4278:	800f883a 	mov	r7,r16
    427c:	9809883a 	mov	r4,r19
    4280:	183ee83a 	callr	r3
    4284:	88a3883a 	add	r17,r17,r2
    4288:	80a1c83a 	sub	r16,r16,r2
    428c:	00bff616 	blt	zero,r2,4268 <_fflush_r+0x100>
    4290:	9080030b 	ldhu	r2,12(r18)
    4294:	00ffffc4 	movi	r3,-1
    4298:	10801014 	ori	r2,r2,64
    429c:	9080030d 	sth	r2,12(r18)
    42a0:	1805883a 	mov	r2,r3
    42a4:	dfc00417 	ldw	ra,16(sp)
    42a8:	dcc00317 	ldw	r19,12(sp)
    42ac:	dc800217 	ldw	r18,8(sp)
    42b0:	dc400117 	ldw	r17,4(sp)
    42b4:	dc000017 	ldw	r16,0(sp)
    42b8:	dec00504 	addi	sp,sp,20
    42bc:	f800283a 	ret
    42c0:	90800f17 	ldw	r2,60(r18)
    42c4:	00bfbe16 	blt	zero,r2,41c0 <_fflush_r+0x58>
    42c8:	0007883a 	mov	r3,zero
    42cc:	1805883a 	mov	r2,r3
    42d0:	dfc00417 	ldw	ra,16(sp)
    42d4:	dcc00317 	ldw	r19,12(sp)
    42d8:	dc800217 	ldw	r18,8(sp)
    42dc:	dc400117 	ldw	r17,4(sp)
    42e0:	dc000017 	ldw	r16,0(sp)
    42e4:	dec00504 	addi	sp,sp,20
    42e8:	f800283a 	ret
    42ec:	00044000 	call	4400 <__sinit>
    42f0:	003fa806 	br	4194 <_fflush_r+0x2c>
    42f4:	90800517 	ldw	r2,20(r18)
    42f8:	90800215 	stw	r2,8(r18)
    42fc:	003fda06 	br	4268 <_fflush_r+0x100>
    4300:	90800117 	ldw	r2,4(r18)
    4304:	90c00c17 	ldw	r3,48(r18)
    4308:	80a1c83a 	sub	r16,r16,r2
    430c:	183fb426 	beq	r3,zero,41e0 <_fflush_r+0x78>
    4310:	90800f17 	ldw	r2,60(r18)
    4314:	80a1c83a 	sub	r16,r16,r2
    4318:	003fb106 	br	41e0 <_fflush_r+0x78>
    431c:	91400717 	ldw	r5,28(r18)
    4320:	9809883a 	mov	r4,r19
    4324:	000d883a 	mov	r6,zero
    4328:	01c00044 	movi	r7,1
    432c:	403ee83a 	callr	r8
    4330:	1021883a 	mov	r16,r2
    4334:	00bfffc4 	movi	r2,-1
    4338:	80800226 	beq	r16,r2,4344 <_fflush_r+0x1dc>
    433c:	92000a17 	ldw	r8,40(r18)
    4340:	003fa406 	br	41d4 <_fflush_r+0x6c>
    4344:	98c00017 	ldw	r3,0(r19)
    4348:	00800744 	movi	r2,29
    434c:	18bfde26 	beq	r3,r2,42c8 <_fflush_r+0x160>
    4350:	9080030b 	ldhu	r2,12(r18)
    4354:	8007883a 	mov	r3,r16
    4358:	10801014 	ori	r2,r2,64
    435c:	9080030d 	sth	r2,12(r18)
    4360:	003fcf06 	br	42a0 <_fflush_r+0x138>

00004364 <fflush>:
    4364:	01400034 	movhi	r5,0
    4368:	29505a04 	addi	r5,r5,16744
    436c:	2007883a 	mov	r3,r4
    4370:	20000526 	beq	r4,zero,4388 <fflush+0x24>
    4374:	00800074 	movhi	r2,1
    4378:	10876c04 	addi	r2,r2,7600
    437c:	11000017 	ldw	r4,0(r2)
    4380:	180b883a 	mov	r5,r3
    4384:	00041681 	jmpi	4168 <_fflush_r>
    4388:	00800074 	movhi	r2,1
    438c:	10876d04 	addi	r2,r2,7604
    4390:	11000017 	ldw	r4,0(r2)
    4394:	0004f341 	jmpi	4f34 <_fwalk_reent>

00004398 <std>:
    4398:	00800034 	movhi	r2,0
    439c:	109d0404 	addi	r2,r2,29712
    43a0:	20800b15 	stw	r2,44(r4)
    43a4:	00800034 	movhi	r2,0
    43a8:	109d3f04 	addi	r2,r2,29948
    43ac:	20800815 	stw	r2,32(r4)
    43b0:	00c00034 	movhi	r3,0
    43b4:	18dd2004 	addi	r3,r3,29824
    43b8:	00800034 	movhi	r2,0
    43bc:	109d0604 	addi	r2,r2,29720
    43c0:	2140030d 	sth	r5,12(r4)
    43c4:	2180038d 	sth	r6,14(r4)
    43c8:	20c00915 	stw	r3,36(r4)
    43cc:	20800a15 	stw	r2,40(r4)
    43d0:	20000015 	stw	zero,0(r4)
    43d4:	20000115 	stw	zero,4(r4)
    43d8:	20000215 	stw	zero,8(r4)
    43dc:	20000415 	stw	zero,16(r4)
    43e0:	20000515 	stw	zero,20(r4)
    43e4:	20000615 	stw	zero,24(r4)
    43e8:	21000715 	stw	r4,28(r4)
    43ec:	f800283a 	ret

000043f0 <__sfp_lock_acquire>:
    43f0:	f800283a 	ret

000043f4 <__sfp_lock_release>:
    43f4:	f800283a 	ret

000043f8 <__sinit_lock_acquire>:
    43f8:	f800283a 	ret

000043fc <__sinit_lock_release>:
    43fc:	f800283a 	ret

00004400 <__sinit>:
    4400:	20800e17 	ldw	r2,56(r4)
    4404:	defffd04 	addi	sp,sp,-12
    4408:	dc400115 	stw	r17,4(sp)
    440c:	dc000015 	stw	r16,0(sp)
    4410:	dfc00215 	stw	ra,8(sp)
    4414:	04400044 	movi	r17,1
    4418:	01400104 	movi	r5,4
    441c:	000d883a 	mov	r6,zero
    4420:	2021883a 	mov	r16,r4
    4424:	2200bb04 	addi	r8,r4,748
    4428:	200f883a 	mov	r7,r4
    442c:	10000526 	beq	r2,zero,4444 <__sinit+0x44>
    4430:	dfc00217 	ldw	ra,8(sp)
    4434:	dc400117 	ldw	r17,4(sp)
    4438:	dc000017 	ldw	r16,0(sp)
    443c:	dec00304 	addi	sp,sp,12
    4440:	f800283a 	ret
    4444:	21000117 	ldw	r4,4(r4)
    4448:	00800034 	movhi	r2,0
    444c:	10913904 	addi	r2,r2,17636
    4450:	00c000c4 	movi	r3,3
    4454:	80800f15 	stw	r2,60(r16)
    4458:	80c0b915 	stw	r3,740(r16)
    445c:	8200ba15 	stw	r8,744(r16)
    4460:	84400e15 	stw	r17,56(r16)
    4464:	8000b815 	stw	zero,736(r16)
    4468:	00043980 	call	4398 <std>
    446c:	81000217 	ldw	r4,8(r16)
    4470:	880d883a 	mov	r6,r17
    4474:	800f883a 	mov	r7,r16
    4478:	01400284 	movi	r5,10
    447c:	00043980 	call	4398 <std>
    4480:	81000317 	ldw	r4,12(r16)
    4484:	800f883a 	mov	r7,r16
    4488:	01400484 	movi	r5,18
    448c:	01800084 	movi	r6,2
    4490:	dfc00217 	ldw	ra,8(sp)
    4494:	dc400117 	ldw	r17,4(sp)
    4498:	dc000017 	ldw	r16,0(sp)
    449c:	dec00304 	addi	sp,sp,12
    44a0:	00043981 	jmpi	4398 <std>

000044a4 <__fp_lock>:
    44a4:	0005883a 	mov	r2,zero
    44a8:	f800283a 	ret

000044ac <__fp_unlock>:
    44ac:	0005883a 	mov	r2,zero
    44b0:	f800283a 	ret

000044b4 <__fp_unlock_all>:
    44b4:	00800074 	movhi	r2,1
    44b8:	10876c04 	addi	r2,r2,7600
    44bc:	11000017 	ldw	r4,0(r2)
    44c0:	01400034 	movhi	r5,0
    44c4:	29512b04 	addi	r5,r5,17580
    44c8:	0004ffc1 	jmpi	4ffc <_fwalk>

000044cc <__fp_lock_all>:
    44cc:	00800074 	movhi	r2,1
    44d0:	10876c04 	addi	r2,r2,7600
    44d4:	11000017 	ldw	r4,0(r2)
    44d8:	01400034 	movhi	r5,0
    44dc:	29512904 	addi	r5,r5,17572
    44e0:	0004ffc1 	jmpi	4ffc <_fwalk>

000044e4 <_cleanup_r>:
    44e4:	01400034 	movhi	r5,0
    44e8:	295e3104 	addi	r5,r5,30916
    44ec:	0004ffc1 	jmpi	4ffc <_fwalk>

000044f0 <_cleanup>:
    44f0:	00800074 	movhi	r2,1
    44f4:	10876d04 	addi	r2,r2,7604
    44f8:	11000017 	ldw	r4,0(r2)
    44fc:	00044e41 	jmpi	44e4 <_cleanup_r>

00004500 <__sfmoreglue>:
    4500:	defffc04 	addi	sp,sp,-16
    4504:	dc400115 	stw	r17,4(sp)
    4508:	2c401724 	muli	r17,r5,92
    450c:	dc800215 	stw	r18,8(sp)
    4510:	2825883a 	mov	r18,r5
    4514:	89400304 	addi	r5,r17,12
    4518:	dc000015 	stw	r16,0(sp)
    451c:	dfc00315 	stw	ra,12(sp)
    4520:	000530c0 	call	530c <_malloc_r>
    4524:	0021883a 	mov	r16,zero
    4528:	880d883a 	mov	r6,r17
    452c:	000b883a 	mov	r5,zero
    4530:	10000626 	beq	r2,zero,454c <__sfmoreglue+0x4c>
    4534:	11000304 	addi	r4,r2,12
    4538:	14800115 	stw	r18,4(r2)
    453c:	10000015 	stw	zero,0(r2)
    4540:	11000215 	stw	r4,8(r2)
    4544:	1021883a 	mov	r16,r2
    4548:	0005cb00 	call	5cb0 <memset>
    454c:	8005883a 	mov	r2,r16
    4550:	dfc00317 	ldw	ra,12(sp)
    4554:	dc800217 	ldw	r18,8(sp)
    4558:	dc400117 	ldw	r17,4(sp)
    455c:	dc000017 	ldw	r16,0(sp)
    4560:	dec00404 	addi	sp,sp,16
    4564:	f800283a 	ret

00004568 <__sfp>:
    4568:	defffd04 	addi	sp,sp,-12
    456c:	00800074 	movhi	r2,1
    4570:	10876d04 	addi	r2,r2,7604
    4574:	dc000015 	stw	r16,0(sp)
    4578:	14000017 	ldw	r16,0(r2)
    457c:	dc400115 	stw	r17,4(sp)
    4580:	dfc00215 	stw	ra,8(sp)
    4584:	80800e17 	ldw	r2,56(r16)
    4588:	2023883a 	mov	r17,r4
    458c:	10002626 	beq	r2,zero,4628 <__sfp+0xc0>
    4590:	8400b804 	addi	r16,r16,736
    4594:	80800117 	ldw	r2,4(r16)
    4598:	81000217 	ldw	r4,8(r16)
    459c:	10ffffc4 	addi	r3,r2,-1
    45a0:	18000916 	blt	r3,zero,45c8 <__sfp+0x60>
    45a4:	2080030f 	ldh	r2,12(r4)
    45a8:	10000b26 	beq	r2,zero,45d8 <__sfp+0x70>
    45ac:	017fffc4 	movi	r5,-1
    45b0:	00000206 	br	45bc <__sfp+0x54>
    45b4:	2080030f 	ldh	r2,12(r4)
    45b8:	10000726 	beq	r2,zero,45d8 <__sfp+0x70>
    45bc:	18ffffc4 	addi	r3,r3,-1
    45c0:	21001704 	addi	r4,r4,92
    45c4:	197ffb1e 	bne	r3,r5,45b4 <__sfp+0x4c>
    45c8:	80800017 	ldw	r2,0(r16)
    45cc:	10001926 	beq	r2,zero,4634 <__sfp+0xcc>
    45d0:	1021883a 	mov	r16,r2
    45d4:	003fef06 	br	4594 <__sfp+0x2c>
    45d8:	00bfffc4 	movi	r2,-1
    45dc:	00c00044 	movi	r3,1
    45e0:	2080038d 	sth	r2,14(r4)
    45e4:	20c0030d 	sth	r3,12(r4)
    45e8:	20000015 	stw	zero,0(r4)
    45ec:	20000215 	stw	zero,8(r4)
    45f0:	20000115 	stw	zero,4(r4)
    45f4:	20000415 	stw	zero,16(r4)
    45f8:	20000515 	stw	zero,20(r4)
    45fc:	20000615 	stw	zero,24(r4)
    4600:	20000c15 	stw	zero,48(r4)
    4604:	20000d15 	stw	zero,52(r4)
    4608:	20001115 	stw	zero,68(r4)
    460c:	20001215 	stw	zero,72(r4)
    4610:	2005883a 	mov	r2,r4
    4614:	dfc00217 	ldw	ra,8(sp)
    4618:	dc400117 	ldw	r17,4(sp)
    461c:	dc000017 	ldw	r16,0(sp)
    4620:	dec00304 	addi	sp,sp,12
    4624:	f800283a 	ret
    4628:	8009883a 	mov	r4,r16
    462c:	00044000 	call	4400 <__sinit>
    4630:	003fd706 	br	4590 <__sfp+0x28>
    4634:	8809883a 	mov	r4,r17
    4638:	01400104 	movi	r5,4
    463c:	00045000 	call	4500 <__sfmoreglue>
    4640:	80800015 	stw	r2,0(r16)
    4644:	103fe21e 	bne	r2,zero,45d0 <__sfp+0x68>
    4648:	00800304 	movi	r2,12
    464c:	0009883a 	mov	r4,zero
    4650:	88800015 	stw	r2,0(r17)
    4654:	003fee06 	br	4610 <__sfp+0xa8>

00004658 <_malloc_trim_r>:
    4658:	defffb04 	addi	sp,sp,-20
    465c:	dcc00315 	stw	r19,12(sp)
    4660:	04c00074 	movhi	r19,1
    4664:	9cc1e804 	addi	r19,r19,1952
    4668:	dc800215 	stw	r18,8(sp)
    466c:	dc400115 	stw	r17,4(sp)
    4670:	dc000015 	stw	r16,0(sp)
    4674:	2823883a 	mov	r17,r5
    4678:	2025883a 	mov	r18,r4
    467c:	dfc00415 	stw	ra,16(sp)
    4680:	000a4140 	call	a414 <__malloc_lock>
    4684:	98800217 	ldw	r2,8(r19)
    4688:	9009883a 	mov	r4,r18
    468c:	000b883a 	mov	r5,zero
    4690:	10c00117 	ldw	r3,4(r2)
    4694:	00bfff04 	movi	r2,-4
    4698:	18a0703a 	and	r16,r3,r2
    469c:	8463c83a 	sub	r17,r16,r17
    46a0:	8c43fbc4 	addi	r17,r17,4079
    46a4:	8822d33a 	srli	r17,r17,12
    46a8:	0083ffc4 	movi	r2,4095
    46ac:	8c7fffc4 	addi	r17,r17,-1
    46b0:	8822933a 	slli	r17,r17,12
    46b4:	1440060e 	bge	r2,r17,46d0 <_malloc_trim_r+0x78>
    46b8:	00073a00 	call	73a0 <_sbrk_r>
    46bc:	98c00217 	ldw	r3,8(r19)
    46c0:	9009883a 	mov	r4,r18
    46c4:	044bc83a 	sub	r5,zero,r17
    46c8:	80c7883a 	add	r3,r16,r3
    46cc:	10c00926 	beq	r2,r3,46f4 <_malloc_trim_r+0x9c>
    46d0:	000a4340 	call	a434 <__malloc_unlock>
    46d4:	0005883a 	mov	r2,zero
    46d8:	dfc00417 	ldw	ra,16(sp)
    46dc:	dcc00317 	ldw	r19,12(sp)
    46e0:	dc800217 	ldw	r18,8(sp)
    46e4:	dc400117 	ldw	r17,4(sp)
    46e8:	dc000017 	ldw	r16,0(sp)
    46ec:	dec00504 	addi	sp,sp,20
    46f0:	f800283a 	ret
    46f4:	9009883a 	mov	r4,r18
    46f8:	00073a00 	call	73a0 <_sbrk_r>
    46fc:	844dc83a 	sub	r6,r16,r17
    4700:	00ffffc4 	movi	r3,-1
    4704:	9009883a 	mov	r4,r18
    4708:	000b883a 	mov	r5,zero
    470c:	01c00074 	movhi	r7,1
    4710:	39c78e04 	addi	r7,r7,7736
    4714:	31800054 	ori	r6,r6,1
    4718:	10c00926 	beq	r2,r3,4740 <_malloc_trim_r+0xe8>
    471c:	38800017 	ldw	r2,0(r7)
    4720:	98c00217 	ldw	r3,8(r19)
    4724:	9009883a 	mov	r4,r18
    4728:	1445c83a 	sub	r2,r2,r17
    472c:	38800015 	stw	r2,0(r7)
    4730:	19800115 	stw	r6,4(r3)
    4734:	000a4340 	call	a434 <__malloc_unlock>
    4738:	00800044 	movi	r2,1
    473c:	003fe606 	br	46d8 <_malloc_trim_r+0x80>
    4740:	00073a00 	call	73a0 <_sbrk_r>
    4744:	99800217 	ldw	r6,8(r19)
    4748:	100f883a 	mov	r7,r2
    474c:	9009883a 	mov	r4,r18
    4750:	1187c83a 	sub	r3,r2,r6
    4754:	008003c4 	movi	r2,15
    4758:	19400054 	ori	r5,r3,1
    475c:	10ffdc0e 	bge	r2,r3,46d0 <_malloc_trim_r+0x78>
    4760:	00800074 	movhi	r2,1
    4764:	10877104 	addi	r2,r2,7620
    4768:	10c00017 	ldw	r3,0(r2)
    476c:	00800074 	movhi	r2,1
    4770:	10878e04 	addi	r2,r2,7736
    4774:	31400115 	stw	r5,4(r6)
    4778:	38c7c83a 	sub	r3,r7,r3
    477c:	10c00015 	stw	r3,0(r2)
    4780:	003fd306 	br	46d0 <_malloc_trim_r+0x78>

00004784 <_free_r>:
    4784:	defffd04 	addi	sp,sp,-12
    4788:	dc400115 	stw	r17,4(sp)
    478c:	dc000015 	stw	r16,0(sp)
    4790:	dfc00215 	stw	ra,8(sp)
    4794:	2821883a 	mov	r16,r5
    4798:	2023883a 	mov	r17,r4
    479c:	28005a26 	beq	r5,zero,4908 <_free_r+0x184>
    47a0:	000a4140 	call	a414 <__malloc_lock>
    47a4:	823ffe04 	addi	r8,r16,-8
    47a8:	41400117 	ldw	r5,4(r8)
    47ac:	00bfff84 	movi	r2,-2
    47b0:	02800074 	movhi	r10,1
    47b4:	5281e804 	addi	r10,r10,1952
    47b8:	288e703a 	and	r7,r5,r2
    47bc:	41cd883a 	add	r6,r8,r7
    47c0:	30c00117 	ldw	r3,4(r6)
    47c4:	51000217 	ldw	r4,8(r10)
    47c8:	00bfff04 	movi	r2,-4
    47cc:	1892703a 	and	r9,r3,r2
    47d0:	5017883a 	mov	r11,r10
    47d4:	31006726 	beq	r6,r4,4974 <_free_r+0x1f0>
    47d8:	2880004c 	andi	r2,r5,1
    47dc:	1005003a 	cmpeq	r2,r2,zero
    47e0:	32400115 	stw	r9,4(r6)
    47e4:	10001a1e 	bne	r2,zero,4850 <_free_r+0xcc>
    47e8:	000b883a 	mov	r5,zero
    47ec:	3247883a 	add	r3,r6,r9
    47f0:	18800117 	ldw	r2,4(r3)
    47f4:	1080004c 	andi	r2,r2,1
    47f8:	1000231e 	bne	r2,zero,4888 <_free_r+0x104>
    47fc:	280ac03a 	cmpne	r5,r5,zero
    4800:	3a4f883a 	add	r7,r7,r9
    4804:	2800451e 	bne	r5,zero,491c <_free_r+0x198>
    4808:	31000217 	ldw	r4,8(r6)
    480c:	00800074 	movhi	r2,1
    4810:	1081ea04 	addi	r2,r2,1960
    4814:	20807b26 	beq	r4,r2,4a04 <_free_r+0x280>
    4818:	30800317 	ldw	r2,12(r6)
    481c:	3a07883a 	add	r3,r7,r8
    4820:	19c00015 	stw	r7,0(r3)
    4824:	11000215 	stw	r4,8(r2)
    4828:	20800315 	stw	r2,12(r4)
    482c:	38800054 	ori	r2,r7,1
    4830:	40800115 	stw	r2,4(r8)
    4834:	28001a26 	beq	r5,zero,48a0 <_free_r+0x11c>
    4838:	8809883a 	mov	r4,r17
    483c:	dfc00217 	ldw	ra,8(sp)
    4840:	dc400117 	ldw	r17,4(sp)
    4844:	dc000017 	ldw	r16,0(sp)
    4848:	dec00304 	addi	sp,sp,12
    484c:	000a4341 	jmpi	a434 <__malloc_unlock>
    4850:	80bffe17 	ldw	r2,-8(r16)
    4854:	50c00204 	addi	r3,r10,8
    4858:	4091c83a 	sub	r8,r8,r2
    485c:	41000217 	ldw	r4,8(r8)
    4860:	388f883a 	add	r7,r7,r2
    4864:	20c06126 	beq	r4,r3,49ec <_free_r+0x268>
    4868:	40800317 	ldw	r2,12(r8)
    486c:	3247883a 	add	r3,r6,r9
    4870:	000b883a 	mov	r5,zero
    4874:	11000215 	stw	r4,8(r2)
    4878:	20800315 	stw	r2,12(r4)
    487c:	18800117 	ldw	r2,4(r3)
    4880:	1080004c 	andi	r2,r2,1
    4884:	103fdd26 	beq	r2,zero,47fc <_free_r+0x78>
    4888:	38800054 	ori	r2,r7,1
    488c:	3a07883a 	add	r3,r7,r8
    4890:	280ac03a 	cmpne	r5,r5,zero
    4894:	40800115 	stw	r2,4(r8)
    4898:	19c00015 	stw	r7,0(r3)
    489c:	283fe61e 	bne	r5,zero,4838 <_free_r+0xb4>
    48a0:	00807fc4 	movi	r2,511
    48a4:	11c01f2e 	bgeu	r2,r7,4924 <_free_r+0x1a0>
    48a8:	3806d27a 	srli	r3,r7,9
    48ac:	1800481e 	bne	r3,zero,49d0 <_free_r+0x24c>
    48b0:	3804d0fa 	srli	r2,r7,3
    48b4:	100690fa 	slli	r3,r2,3
    48b8:	1acd883a 	add	r6,r3,r11
    48bc:	31400217 	ldw	r5,8(r6)
    48c0:	31405926 	beq	r6,r5,4a28 <_free_r+0x2a4>
    48c4:	28800117 	ldw	r2,4(r5)
    48c8:	00ffff04 	movi	r3,-4
    48cc:	10c4703a 	and	r2,r2,r3
    48d0:	3880022e 	bgeu	r7,r2,48dc <_free_r+0x158>
    48d4:	29400217 	ldw	r5,8(r5)
    48d8:	317ffa1e 	bne	r6,r5,48c4 <_free_r+0x140>
    48dc:	29800317 	ldw	r6,12(r5)
    48e0:	41800315 	stw	r6,12(r8)
    48e4:	41400215 	stw	r5,8(r8)
    48e8:	8809883a 	mov	r4,r17
    48ec:	2a000315 	stw	r8,12(r5)
    48f0:	32000215 	stw	r8,8(r6)
    48f4:	dfc00217 	ldw	ra,8(sp)
    48f8:	dc400117 	ldw	r17,4(sp)
    48fc:	dc000017 	ldw	r16,0(sp)
    4900:	dec00304 	addi	sp,sp,12
    4904:	000a4341 	jmpi	a434 <__malloc_unlock>
    4908:	dfc00217 	ldw	ra,8(sp)
    490c:	dc400117 	ldw	r17,4(sp)
    4910:	dc000017 	ldw	r16,0(sp)
    4914:	dec00304 	addi	sp,sp,12
    4918:	f800283a 	ret
    491c:	31000217 	ldw	r4,8(r6)
    4920:	003fbd06 	br	4818 <_free_r+0x94>
    4924:	3806d0fa 	srli	r3,r7,3
    4928:	00800044 	movi	r2,1
    492c:	51400117 	ldw	r5,4(r10)
    4930:	180890fa 	slli	r4,r3,3
    4934:	1807d0ba 	srai	r3,r3,2
    4938:	22c9883a 	add	r4,r4,r11
    493c:	21800217 	ldw	r6,8(r4)
    4940:	10c4983a 	sll	r2,r2,r3
    4944:	41000315 	stw	r4,12(r8)
    4948:	41800215 	stw	r6,8(r8)
    494c:	288ab03a 	or	r5,r5,r2
    4950:	22000215 	stw	r8,8(r4)
    4954:	8809883a 	mov	r4,r17
    4958:	51400115 	stw	r5,4(r10)
    495c:	32000315 	stw	r8,12(r6)
    4960:	dfc00217 	ldw	ra,8(sp)
    4964:	dc400117 	ldw	r17,4(sp)
    4968:	dc000017 	ldw	r16,0(sp)
    496c:	dec00304 	addi	sp,sp,12
    4970:	000a4341 	jmpi	a434 <__malloc_unlock>
    4974:	2880004c 	andi	r2,r5,1
    4978:	3a4d883a 	add	r6,r7,r9
    497c:	1000071e 	bne	r2,zero,499c <_free_r+0x218>
    4980:	80bffe17 	ldw	r2,-8(r16)
    4984:	4091c83a 	sub	r8,r8,r2
    4988:	41000317 	ldw	r4,12(r8)
    498c:	40c00217 	ldw	r3,8(r8)
    4990:	308d883a 	add	r6,r6,r2
    4994:	20c00215 	stw	r3,8(r4)
    4998:	19000315 	stw	r4,12(r3)
    499c:	00800074 	movhi	r2,1
    49a0:	10877004 	addi	r2,r2,7616
    49a4:	11000017 	ldw	r4,0(r2)
    49a8:	30c00054 	ori	r3,r6,1
    49ac:	52000215 	stw	r8,8(r10)
    49b0:	40c00115 	stw	r3,4(r8)
    49b4:	313fa036 	bltu	r6,r4,4838 <_free_r+0xb4>
    49b8:	00800074 	movhi	r2,1
    49bc:	10878404 	addi	r2,r2,7696
    49c0:	11400017 	ldw	r5,0(r2)
    49c4:	8809883a 	mov	r4,r17
    49c8:	00046580 	call	4658 <_malloc_trim_r>
    49cc:	003f9a06 	br	4838 <_free_r+0xb4>
    49d0:	00800104 	movi	r2,4
    49d4:	10c0072e 	bgeu	r2,r3,49f4 <_free_r+0x270>
    49d8:	00800504 	movi	r2,20
    49dc:	10c01936 	bltu	r2,r3,4a44 <_free_r+0x2c0>
    49e0:	188016c4 	addi	r2,r3,91
    49e4:	100690fa 	slli	r3,r2,3
    49e8:	003fb306 	br	48b8 <_free_r+0x134>
    49ec:	01400044 	movi	r5,1
    49f0:	003f7e06 	br	47ec <_free_r+0x68>
    49f4:	3804d1ba 	srli	r2,r7,6
    49f8:	10800e04 	addi	r2,r2,56
    49fc:	100690fa 	slli	r3,r2,3
    4a00:	003fad06 	br	48b8 <_free_r+0x134>
    4a04:	22000315 	stw	r8,12(r4)
    4a08:	22000215 	stw	r8,8(r4)
    4a0c:	3a05883a 	add	r2,r7,r8
    4a10:	38c00054 	ori	r3,r7,1
    4a14:	11c00015 	stw	r7,0(r2)
    4a18:	41000215 	stw	r4,8(r8)
    4a1c:	40c00115 	stw	r3,4(r8)
    4a20:	41000315 	stw	r4,12(r8)
    4a24:	003f8406 	br	4838 <_free_r+0xb4>
    4a28:	1005d0ba 	srai	r2,r2,2
    4a2c:	00c00044 	movi	r3,1
    4a30:	51000117 	ldw	r4,4(r10)
    4a34:	1886983a 	sll	r3,r3,r2
    4a38:	20c8b03a 	or	r4,r4,r3
    4a3c:	51000115 	stw	r4,4(r10)
    4a40:	003fa706 	br	48e0 <_free_r+0x15c>
    4a44:	00801504 	movi	r2,84
    4a48:	10c00436 	bltu	r2,r3,4a5c <_free_r+0x2d8>
    4a4c:	3804d33a 	srli	r2,r7,12
    4a50:	10801b84 	addi	r2,r2,110
    4a54:	100690fa 	slli	r3,r2,3
    4a58:	003f9706 	br	48b8 <_free_r+0x134>
    4a5c:	00805504 	movi	r2,340
    4a60:	10c00436 	bltu	r2,r3,4a74 <_free_r+0x2f0>
    4a64:	3804d3fa 	srli	r2,r7,15
    4a68:	10801dc4 	addi	r2,r2,119
    4a6c:	100690fa 	slli	r3,r2,3
    4a70:	003f9106 	br	48b8 <_free_r+0x134>
    4a74:	00815504 	movi	r2,1364
    4a78:	10c0032e 	bgeu	r2,r3,4a88 <_free_r+0x304>
    4a7c:	00801f84 	movi	r2,126
    4a80:	00c0fc04 	movi	r3,1008
    4a84:	003f8c06 	br	48b8 <_free_r+0x134>
    4a88:	3804d4ba 	srli	r2,r7,18
    4a8c:	10801f04 	addi	r2,r2,124
    4a90:	100690fa 	slli	r3,r2,3
    4a94:	003f8806 	br	48b8 <_free_r+0x134>

00004a98 <__sfvwrite_r>:
    4a98:	30800217 	ldw	r2,8(r6)
    4a9c:	defff504 	addi	sp,sp,-44
    4aa0:	df000915 	stw	fp,36(sp)
    4aa4:	dd800715 	stw	r22,28(sp)
    4aa8:	dc800315 	stw	r18,12(sp)
    4aac:	dfc00a15 	stw	ra,40(sp)
    4ab0:	ddc00815 	stw	r23,32(sp)
    4ab4:	dd400615 	stw	r21,24(sp)
    4ab8:	dd000515 	stw	r20,20(sp)
    4abc:	dcc00415 	stw	r19,16(sp)
    4ac0:	dc400215 	stw	r17,8(sp)
    4ac4:	dc000115 	stw	r16,4(sp)
    4ac8:	302d883a 	mov	r22,r6
    4acc:	2039883a 	mov	fp,r4
    4ad0:	2825883a 	mov	r18,r5
    4ad4:	10001c26 	beq	r2,zero,4b48 <__sfvwrite_r+0xb0>
    4ad8:	29c0030b 	ldhu	r7,12(r5)
    4adc:	3880020c 	andi	r2,r7,8
    4ae0:	10002726 	beq	r2,zero,4b80 <__sfvwrite_r+0xe8>
    4ae4:	28800417 	ldw	r2,16(r5)
    4ae8:	10002526 	beq	r2,zero,4b80 <__sfvwrite_r+0xe8>
    4aec:	3880008c 	andi	r2,r7,2
    4af0:	b5400017 	ldw	r21,0(r22)
    4af4:	10002826 	beq	r2,zero,4b98 <__sfvwrite_r+0x100>
    4af8:	0021883a 	mov	r16,zero
    4afc:	0023883a 	mov	r17,zero
    4b00:	880d883a 	mov	r6,r17
    4b04:	e009883a 	mov	r4,fp
    4b08:	00810004 	movi	r2,1024
    4b0c:	80006e26 	beq	r16,zero,4cc8 <__sfvwrite_r+0x230>
    4b10:	800f883a 	mov	r7,r16
    4b14:	91400717 	ldw	r5,28(r18)
    4b18:	1400012e 	bgeu	r2,r16,4b20 <__sfvwrite_r+0x88>
    4b1c:	100f883a 	mov	r7,r2
    4b20:	90c00917 	ldw	r3,36(r18)
    4b24:	183ee83a 	callr	r3
    4b28:	1007883a 	mov	r3,r2
    4b2c:	80a1c83a 	sub	r16,r16,r2
    4b30:	88a3883a 	add	r17,r17,r2
    4b34:	00806d0e 	bge	zero,r2,4cec <__sfvwrite_r+0x254>
    4b38:	b0800217 	ldw	r2,8(r22)
    4b3c:	10c5c83a 	sub	r2,r2,r3
    4b40:	b0800215 	stw	r2,8(r22)
    4b44:	103fee1e 	bne	r2,zero,4b00 <__sfvwrite_r+0x68>
    4b48:	0009883a 	mov	r4,zero
    4b4c:	2005883a 	mov	r2,r4
    4b50:	dfc00a17 	ldw	ra,40(sp)
    4b54:	df000917 	ldw	fp,36(sp)
    4b58:	ddc00817 	ldw	r23,32(sp)
    4b5c:	dd800717 	ldw	r22,28(sp)
    4b60:	dd400617 	ldw	r21,24(sp)
    4b64:	dd000517 	ldw	r20,20(sp)
    4b68:	dcc00417 	ldw	r19,16(sp)
    4b6c:	dc800317 	ldw	r18,12(sp)
    4b70:	dc400217 	ldw	r17,8(sp)
    4b74:	dc000117 	ldw	r16,4(sp)
    4b78:	dec00b04 	addi	sp,sp,44
    4b7c:	f800283a 	ret
    4b80:	00028600 	call	2860 <__swsetup_r>
    4b84:	1000e41e 	bne	r2,zero,4f18 <__sfvwrite_r+0x480>
    4b88:	91c0030b 	ldhu	r7,12(r18)
    4b8c:	b5400017 	ldw	r21,0(r22)
    4b90:	3880008c 	andi	r2,r7,2
    4b94:	103fd81e 	bne	r2,zero,4af8 <__sfvwrite_r+0x60>
    4b98:	3880004c 	andi	r2,r7,1
    4b9c:	1005003a 	cmpeq	r2,r2,zero
    4ba0:	10005726 	beq	r2,zero,4d00 <__sfvwrite_r+0x268>
    4ba4:	0029883a 	mov	r20,zero
    4ba8:	002f883a 	mov	r23,zero
    4bac:	a0004226 	beq	r20,zero,4cb8 <__sfvwrite_r+0x220>
    4bb0:	3880800c 	andi	r2,r7,512
    4bb4:	94000217 	ldw	r16,8(r18)
    4bb8:	10008b26 	beq	r2,zero,4de8 <__sfvwrite_r+0x350>
    4bbc:	800d883a 	mov	r6,r16
    4bc0:	a400a536 	bltu	r20,r16,4e58 <__sfvwrite_r+0x3c0>
    4bc4:	3881200c 	andi	r2,r7,1152
    4bc8:	10002726 	beq	r2,zero,4c68 <__sfvwrite_r+0x1d0>
    4bcc:	90800517 	ldw	r2,20(r18)
    4bd0:	92000417 	ldw	r8,16(r18)
    4bd4:	91400017 	ldw	r5,0(r18)
    4bd8:	1087883a 	add	r3,r2,r2
    4bdc:	1887883a 	add	r3,r3,r2
    4be0:	1808d7fa 	srli	r4,r3,31
    4be4:	2a21c83a 	sub	r16,r5,r8
    4be8:	80800044 	addi	r2,r16,1
    4bec:	20c9883a 	add	r4,r4,r3
    4bf0:	2027d07a 	srai	r19,r4,1
    4bf4:	a085883a 	add	r2,r20,r2
    4bf8:	980d883a 	mov	r6,r19
    4bfc:	9880022e 	bgeu	r19,r2,4c08 <__sfvwrite_r+0x170>
    4c00:	1027883a 	mov	r19,r2
    4c04:	100d883a 	mov	r6,r2
    4c08:	3881000c 	andi	r2,r7,1024
    4c0c:	1000b826 	beq	r2,zero,4ef0 <__sfvwrite_r+0x458>
    4c10:	300b883a 	mov	r5,r6
    4c14:	e009883a 	mov	r4,fp
    4c18:	000530c0 	call	530c <_malloc_r>
    4c1c:	10003126 	beq	r2,zero,4ce4 <__sfvwrite_r+0x24c>
    4c20:	91400417 	ldw	r5,16(r18)
    4c24:	1009883a 	mov	r4,r2
    4c28:	800d883a 	mov	r6,r16
    4c2c:	1023883a 	mov	r17,r2
    4c30:	0005b300 	call	5b30 <memcpy>
    4c34:	90c0030b 	ldhu	r3,12(r18)
    4c38:	00beffc4 	movi	r2,-1025
    4c3c:	1886703a 	and	r3,r3,r2
    4c40:	18c02014 	ori	r3,r3,128
    4c44:	90c0030d 	sth	r3,12(r18)
    4c48:	9c07c83a 	sub	r3,r19,r16
    4c4c:	8c05883a 	add	r2,r17,r16
    4c50:	a00d883a 	mov	r6,r20
    4c54:	a021883a 	mov	r16,r20
    4c58:	90800015 	stw	r2,0(r18)
    4c5c:	90c00215 	stw	r3,8(r18)
    4c60:	94400415 	stw	r17,16(r18)
    4c64:	94c00515 	stw	r19,20(r18)
    4c68:	91000017 	ldw	r4,0(r18)
    4c6c:	b80b883a 	mov	r5,r23
    4c70:	a023883a 	mov	r17,r20
    4c74:	0005bd00 	call	5bd0 <memmove>
    4c78:	90c00217 	ldw	r3,8(r18)
    4c7c:	90800017 	ldw	r2,0(r18)
    4c80:	a027883a 	mov	r19,r20
    4c84:	1c07c83a 	sub	r3,r3,r16
    4c88:	1405883a 	add	r2,r2,r16
    4c8c:	90c00215 	stw	r3,8(r18)
    4c90:	a021883a 	mov	r16,r20
    4c94:	90800015 	stw	r2,0(r18)
    4c98:	b0800217 	ldw	r2,8(r22)
    4c9c:	1405c83a 	sub	r2,r2,r16
    4ca0:	b0800215 	stw	r2,8(r22)
    4ca4:	103fa826 	beq	r2,zero,4b48 <__sfvwrite_r+0xb0>
    4ca8:	a469c83a 	sub	r20,r20,r17
    4cac:	91c0030b 	ldhu	r7,12(r18)
    4cb0:	bcef883a 	add	r23,r23,r19
    4cb4:	a03fbe1e 	bne	r20,zero,4bb0 <__sfvwrite_r+0x118>
    4cb8:	adc00017 	ldw	r23,0(r21)
    4cbc:	ad000117 	ldw	r20,4(r21)
    4cc0:	ad400204 	addi	r21,r21,8
    4cc4:	003fb906 	br	4bac <__sfvwrite_r+0x114>
    4cc8:	ac400017 	ldw	r17,0(r21)
    4ccc:	ac000117 	ldw	r16,4(r21)
    4cd0:	ad400204 	addi	r21,r21,8
    4cd4:	003f8a06 	br	4b00 <__sfvwrite_r+0x68>
    4cd8:	91400417 	ldw	r5,16(r18)
    4cdc:	e009883a 	mov	r4,fp
    4ce0:	00047840 	call	4784 <_free_r>
    4ce4:	00800304 	movi	r2,12
    4ce8:	e0800015 	stw	r2,0(fp)
    4cec:	9080030b 	ldhu	r2,12(r18)
    4cf0:	013fffc4 	movi	r4,-1
    4cf4:	10801014 	ori	r2,r2,64
    4cf8:	9080030d 	sth	r2,12(r18)
    4cfc:	003f9306 	br	4b4c <__sfvwrite_r+0xb4>
    4d00:	0027883a 	mov	r19,zero
    4d04:	002f883a 	mov	r23,zero
    4d08:	d8000015 	stw	zero,0(sp)
    4d0c:	0029883a 	mov	r20,zero
    4d10:	98001e26 	beq	r19,zero,4d8c <__sfvwrite_r+0x2f4>
    4d14:	d8c00017 	ldw	r3,0(sp)
    4d18:	1804c03a 	cmpne	r2,r3,zero
    4d1c:	10005e26 	beq	r2,zero,4e98 <__sfvwrite_r+0x400>
    4d20:	9821883a 	mov	r16,r19
    4d24:	a4c0012e 	bgeu	r20,r19,4d2c <__sfvwrite_r+0x294>
    4d28:	a021883a 	mov	r16,r20
    4d2c:	91000017 	ldw	r4,0(r18)
    4d30:	90800417 	ldw	r2,16(r18)
    4d34:	91800217 	ldw	r6,8(r18)
    4d38:	91c00517 	ldw	r7,20(r18)
    4d3c:	1100022e 	bgeu	r2,r4,4d48 <__sfvwrite_r+0x2b0>
    4d40:	31e3883a 	add	r17,r6,r7
    4d44:	8c001616 	blt	r17,r16,4da0 <__sfvwrite_r+0x308>
    4d48:	81c03816 	blt	r16,r7,4e2c <__sfvwrite_r+0x394>
    4d4c:	90c00917 	ldw	r3,36(r18)
    4d50:	91400717 	ldw	r5,28(r18)
    4d54:	e009883a 	mov	r4,fp
    4d58:	b80d883a 	mov	r6,r23
    4d5c:	183ee83a 	callr	r3
    4d60:	1023883a 	mov	r17,r2
    4d64:	00bfe10e 	bge	zero,r2,4cec <__sfvwrite_r+0x254>
    4d68:	a469c83a 	sub	r20,r20,r17
    4d6c:	a0001826 	beq	r20,zero,4dd0 <__sfvwrite_r+0x338>
    4d70:	b0800217 	ldw	r2,8(r22)
    4d74:	1445c83a 	sub	r2,r2,r17
    4d78:	b0800215 	stw	r2,8(r22)
    4d7c:	103f7226 	beq	r2,zero,4b48 <__sfvwrite_r+0xb0>
    4d80:	9c67c83a 	sub	r19,r19,r17
    4d84:	bc6f883a 	add	r23,r23,r17
    4d88:	983fe21e 	bne	r19,zero,4d14 <__sfvwrite_r+0x27c>
    4d8c:	adc00017 	ldw	r23,0(r21)
    4d90:	acc00117 	ldw	r19,4(r21)
    4d94:	ad400204 	addi	r21,r21,8
    4d98:	d8000015 	stw	zero,0(sp)
    4d9c:	003fdc06 	br	4d10 <__sfvwrite_r+0x278>
    4da0:	b80b883a 	mov	r5,r23
    4da4:	880d883a 	mov	r6,r17
    4da8:	0005bd00 	call	5bd0 <memmove>
    4dac:	90c00017 	ldw	r3,0(r18)
    4db0:	e009883a 	mov	r4,fp
    4db4:	900b883a 	mov	r5,r18
    4db8:	1c47883a 	add	r3,r3,r17
    4dbc:	90c00015 	stw	r3,0(r18)
    4dc0:	00041680 	call	4168 <_fflush_r>
    4dc4:	103fc91e 	bne	r2,zero,4cec <__sfvwrite_r+0x254>
    4dc8:	a469c83a 	sub	r20,r20,r17
    4dcc:	a03fe81e 	bne	r20,zero,4d70 <__sfvwrite_r+0x2d8>
    4dd0:	e009883a 	mov	r4,fp
    4dd4:	900b883a 	mov	r5,r18
    4dd8:	00041680 	call	4168 <_fflush_r>
    4ddc:	103fc31e 	bne	r2,zero,4cec <__sfvwrite_r+0x254>
    4de0:	d8000015 	stw	zero,0(sp)
    4de4:	003fe206 	br	4d70 <__sfvwrite_r+0x2d8>
    4de8:	91000017 	ldw	r4,0(r18)
    4dec:	90800417 	ldw	r2,16(r18)
    4df0:	1100022e 	bgeu	r2,r4,4dfc <__sfvwrite_r+0x364>
    4df4:	8023883a 	mov	r17,r16
    4df8:	85003136 	bltu	r16,r20,4ec0 <__sfvwrite_r+0x428>
    4dfc:	91c00517 	ldw	r7,20(r18)
    4e00:	a1c01836 	bltu	r20,r7,4e64 <__sfvwrite_r+0x3cc>
    4e04:	90c00917 	ldw	r3,36(r18)
    4e08:	91400717 	ldw	r5,28(r18)
    4e0c:	e009883a 	mov	r4,fp
    4e10:	b80d883a 	mov	r6,r23
    4e14:	183ee83a 	callr	r3
    4e18:	1021883a 	mov	r16,r2
    4e1c:	00bfb30e 	bge	zero,r2,4cec <__sfvwrite_r+0x254>
    4e20:	1023883a 	mov	r17,r2
    4e24:	1027883a 	mov	r19,r2
    4e28:	003f9b06 	br	4c98 <__sfvwrite_r+0x200>
    4e2c:	b80b883a 	mov	r5,r23
    4e30:	800d883a 	mov	r6,r16
    4e34:	0005bd00 	call	5bd0 <memmove>
    4e38:	90c00217 	ldw	r3,8(r18)
    4e3c:	90800017 	ldw	r2,0(r18)
    4e40:	8023883a 	mov	r17,r16
    4e44:	1c07c83a 	sub	r3,r3,r16
    4e48:	1405883a 	add	r2,r2,r16
    4e4c:	90c00215 	stw	r3,8(r18)
    4e50:	90800015 	stw	r2,0(r18)
    4e54:	003fc406 	br	4d68 <__sfvwrite_r+0x2d0>
    4e58:	a00d883a 	mov	r6,r20
    4e5c:	a021883a 	mov	r16,r20
    4e60:	003f8106 	br	4c68 <__sfvwrite_r+0x1d0>
    4e64:	b80b883a 	mov	r5,r23
    4e68:	a00d883a 	mov	r6,r20
    4e6c:	0005bd00 	call	5bd0 <memmove>
    4e70:	90c00217 	ldw	r3,8(r18)
    4e74:	90800017 	ldw	r2,0(r18)
    4e78:	a021883a 	mov	r16,r20
    4e7c:	1d07c83a 	sub	r3,r3,r20
    4e80:	1505883a 	add	r2,r2,r20
    4e84:	a023883a 	mov	r17,r20
    4e88:	a027883a 	mov	r19,r20
    4e8c:	90c00215 	stw	r3,8(r18)
    4e90:	90800015 	stw	r2,0(r18)
    4e94:	003f8006 	br	4c98 <__sfvwrite_r+0x200>
    4e98:	b809883a 	mov	r4,r23
    4e9c:	01400284 	movi	r5,10
    4ea0:	980d883a 	mov	r6,r19
    4ea4:	0005a4c0 	call	5a4c <memchr>
    4ea8:	10001726 	beq	r2,zero,4f08 <__sfvwrite_r+0x470>
    4eac:	15c5c83a 	sub	r2,r2,r23
    4eb0:	15000044 	addi	r20,r2,1
    4eb4:	00800044 	movi	r2,1
    4eb8:	d8800015 	stw	r2,0(sp)
    4ebc:	003f9806 	br	4d20 <__sfvwrite_r+0x288>
    4ec0:	b80b883a 	mov	r5,r23
    4ec4:	800d883a 	mov	r6,r16
    4ec8:	0005bd00 	call	5bd0 <memmove>
    4ecc:	90c00017 	ldw	r3,0(r18)
    4ed0:	e009883a 	mov	r4,fp
    4ed4:	900b883a 	mov	r5,r18
    4ed8:	1c07883a 	add	r3,r3,r16
    4edc:	90c00015 	stw	r3,0(r18)
    4ee0:	8027883a 	mov	r19,r16
    4ee4:	00041680 	call	4168 <_fflush_r>
    4ee8:	103f6b26 	beq	r2,zero,4c98 <__sfvwrite_r+0x200>
    4eec:	003f7f06 	br	4cec <__sfvwrite_r+0x254>
    4ef0:	400b883a 	mov	r5,r8
    4ef4:	e009883a 	mov	r4,fp
    4ef8:	0006d3c0 	call	6d3c <_realloc_r>
    4efc:	103f7626 	beq	r2,zero,4cd8 <__sfvwrite_r+0x240>
    4f00:	1023883a 	mov	r17,r2
    4f04:	003f5006 	br	4c48 <__sfvwrite_r+0x1b0>
    4f08:	00c00044 	movi	r3,1
    4f0c:	9d000044 	addi	r20,r19,1
    4f10:	d8c00015 	stw	r3,0(sp)
    4f14:	003f8206 	br	4d20 <__sfvwrite_r+0x288>
    4f18:	9080030b 	ldhu	r2,12(r18)
    4f1c:	00c00244 	movi	r3,9
    4f20:	013fffc4 	movi	r4,-1
    4f24:	10801014 	ori	r2,r2,64
    4f28:	9080030d 	sth	r2,12(r18)
    4f2c:	e0c00015 	stw	r3,0(fp)
    4f30:	003f0606 	br	4b4c <__sfvwrite_r+0xb4>

00004f34 <_fwalk_reent>:
    4f34:	defff704 	addi	sp,sp,-36
    4f38:	dcc00315 	stw	r19,12(sp)
    4f3c:	24c0b804 	addi	r19,r4,736
    4f40:	dd800615 	stw	r22,24(sp)
    4f44:	dd400515 	stw	r21,20(sp)
    4f48:	dfc00815 	stw	ra,32(sp)
    4f4c:	ddc00715 	stw	r23,28(sp)
    4f50:	dd000415 	stw	r20,16(sp)
    4f54:	dc800215 	stw	r18,8(sp)
    4f58:	dc400115 	stw	r17,4(sp)
    4f5c:	dc000015 	stw	r16,0(sp)
    4f60:	202b883a 	mov	r21,r4
    4f64:	282d883a 	mov	r22,r5
    4f68:	00043f00 	call	43f0 <__sfp_lock_acquire>
    4f6c:	98002126 	beq	r19,zero,4ff4 <_fwalk_reent+0xc0>
    4f70:	002f883a 	mov	r23,zero
    4f74:	9c800117 	ldw	r18,4(r19)
    4f78:	9c000217 	ldw	r16,8(r19)
    4f7c:	90bfffc4 	addi	r2,r18,-1
    4f80:	10000d16 	blt	r2,zero,4fb8 <_fwalk_reent+0x84>
    4f84:	0023883a 	mov	r17,zero
    4f88:	053fffc4 	movi	r20,-1
    4f8c:	8080030f 	ldh	r2,12(r16)
    4f90:	8c400044 	addi	r17,r17,1
    4f94:	10000626 	beq	r2,zero,4fb0 <_fwalk_reent+0x7c>
    4f98:	8080038f 	ldh	r2,14(r16)
    4f9c:	800b883a 	mov	r5,r16
    4fa0:	a809883a 	mov	r4,r21
    4fa4:	15000226 	beq	r2,r20,4fb0 <_fwalk_reent+0x7c>
    4fa8:	b03ee83a 	callr	r22
    4fac:	b8aeb03a 	or	r23,r23,r2
    4fb0:	84001704 	addi	r16,r16,92
    4fb4:	947ff51e 	bne	r18,r17,4f8c <_fwalk_reent+0x58>
    4fb8:	9cc00017 	ldw	r19,0(r19)
    4fbc:	983fed1e 	bne	r19,zero,4f74 <_fwalk_reent+0x40>
    4fc0:	00043f40 	call	43f4 <__sfp_lock_release>
    4fc4:	b805883a 	mov	r2,r23
    4fc8:	dfc00817 	ldw	ra,32(sp)
    4fcc:	ddc00717 	ldw	r23,28(sp)
    4fd0:	dd800617 	ldw	r22,24(sp)
    4fd4:	dd400517 	ldw	r21,20(sp)
    4fd8:	dd000417 	ldw	r20,16(sp)
    4fdc:	dcc00317 	ldw	r19,12(sp)
    4fe0:	dc800217 	ldw	r18,8(sp)
    4fe4:	dc400117 	ldw	r17,4(sp)
    4fe8:	dc000017 	ldw	r16,0(sp)
    4fec:	dec00904 	addi	sp,sp,36
    4ff0:	f800283a 	ret
    4ff4:	002f883a 	mov	r23,zero
    4ff8:	003ff106 	br	4fc0 <_fwalk_reent+0x8c>

00004ffc <_fwalk>:
    4ffc:	defff804 	addi	sp,sp,-32
    5000:	dcc00315 	stw	r19,12(sp)
    5004:	24c0b804 	addi	r19,r4,736
    5008:	dd400515 	stw	r21,20(sp)
    500c:	dfc00715 	stw	ra,28(sp)
    5010:	dd800615 	stw	r22,24(sp)
    5014:	dd000415 	stw	r20,16(sp)
    5018:	dc800215 	stw	r18,8(sp)
    501c:	dc400115 	stw	r17,4(sp)
    5020:	dc000015 	stw	r16,0(sp)
    5024:	282b883a 	mov	r21,r5
    5028:	00043f00 	call	43f0 <__sfp_lock_acquire>
    502c:	98001f26 	beq	r19,zero,50ac <_fwalk+0xb0>
    5030:	002d883a 	mov	r22,zero
    5034:	9c800117 	ldw	r18,4(r19)
    5038:	9c000217 	ldw	r16,8(r19)
    503c:	90bfffc4 	addi	r2,r18,-1
    5040:	10000c16 	blt	r2,zero,5074 <_fwalk+0x78>
    5044:	0023883a 	mov	r17,zero
    5048:	053fffc4 	movi	r20,-1
    504c:	8080030f 	ldh	r2,12(r16)
    5050:	8c400044 	addi	r17,r17,1
    5054:	10000526 	beq	r2,zero,506c <_fwalk+0x70>
    5058:	8080038f 	ldh	r2,14(r16)
    505c:	8009883a 	mov	r4,r16
    5060:	15000226 	beq	r2,r20,506c <_fwalk+0x70>
    5064:	a83ee83a 	callr	r21
    5068:	b0acb03a 	or	r22,r22,r2
    506c:	84001704 	addi	r16,r16,92
    5070:	947ff61e 	bne	r18,r17,504c <_fwalk+0x50>
    5074:	9cc00017 	ldw	r19,0(r19)
    5078:	983fee1e 	bne	r19,zero,5034 <_fwalk+0x38>
    507c:	00043f40 	call	43f4 <__sfp_lock_release>
    5080:	b005883a 	mov	r2,r22
    5084:	dfc00717 	ldw	ra,28(sp)
    5088:	dd800617 	ldw	r22,24(sp)
    508c:	dd400517 	ldw	r21,20(sp)
    5090:	dd000417 	ldw	r20,16(sp)
    5094:	dcc00317 	ldw	r19,12(sp)
    5098:	dc800217 	ldw	r18,8(sp)
    509c:	dc400117 	ldw	r17,4(sp)
    50a0:	dc000017 	ldw	r16,0(sp)
    50a4:	dec00804 	addi	sp,sp,32
    50a8:	f800283a 	ret
    50ac:	002d883a 	mov	r22,zero
    50b0:	003ff206 	br	507c <_fwalk+0x80>

000050b4 <__locale_charset>:
    50b4:	d0a00317 	ldw	r2,-32756(gp)
    50b8:	f800283a 	ret

000050bc <_localeconv_r>:
    50bc:	00800074 	movhi	r2,1
    50c0:	10803e04 	addi	r2,r2,248
    50c4:	f800283a 	ret

000050c8 <localeconv>:
    50c8:	00800074 	movhi	r2,1
    50cc:	10876c04 	addi	r2,r2,7600
    50d0:	11000017 	ldw	r4,0(r2)
    50d4:	00050bc1 	jmpi	50bc <_localeconv_r>

000050d8 <_setlocale_r>:
    50d8:	defffc04 	addi	sp,sp,-16
    50dc:	00c00074 	movhi	r3,1
    50e0:	18c03904 	addi	r3,r3,228
    50e4:	dc800215 	stw	r18,8(sp)
    50e8:	dc400115 	stw	r17,4(sp)
    50ec:	dc000015 	stw	r16,0(sp)
    50f0:	2023883a 	mov	r17,r4
    50f4:	2825883a 	mov	r18,r5
    50f8:	dfc00315 	stw	ra,12(sp)
    50fc:	3021883a 	mov	r16,r6
    5100:	3009883a 	mov	r4,r6
    5104:	180b883a 	mov	r5,r3
    5108:	30000926 	beq	r6,zero,5130 <_setlocale_r+0x58>
    510c:	000755c0 	call	755c <strcmp>
    5110:	8009883a 	mov	r4,r16
    5114:	01400074 	movhi	r5,1
    5118:	29402404 	addi	r5,r5,144
    511c:	10000b1e 	bne	r2,zero,514c <_setlocale_r+0x74>
    5120:	8c000d15 	stw	r16,52(r17)
    5124:	8c800c15 	stw	r18,48(r17)
    5128:	00c00074 	movhi	r3,1
    512c:	18c03904 	addi	r3,r3,228
    5130:	1805883a 	mov	r2,r3
    5134:	dfc00317 	ldw	ra,12(sp)
    5138:	dc800217 	ldw	r18,8(sp)
    513c:	dc400117 	ldw	r17,4(sp)
    5140:	dc000017 	ldw	r16,0(sp)
    5144:	dec00404 	addi	sp,sp,16
    5148:	f800283a 	ret
    514c:	000755c0 	call	755c <strcmp>
    5150:	0007883a 	mov	r3,zero
    5154:	103ff226 	beq	r2,zero,5120 <_setlocale_r+0x48>
    5158:	003ff506 	br	5130 <_setlocale_r+0x58>

0000515c <setlocale>:
    515c:	01800074 	movhi	r6,1
    5160:	31876c04 	addi	r6,r6,7600
    5164:	2007883a 	mov	r3,r4
    5168:	31000017 	ldw	r4,0(r6)
    516c:	280d883a 	mov	r6,r5
    5170:	180b883a 	mov	r5,r3
    5174:	00050d81 	jmpi	50d8 <_setlocale_r>

00005178 <__smakebuf_r>:
    5178:	2880030b 	ldhu	r2,12(r5)
    517c:	deffed04 	addi	sp,sp,-76
    5180:	dc401015 	stw	r17,64(sp)
    5184:	1080008c 	andi	r2,r2,2
    5188:	dc000f15 	stw	r16,60(sp)
    518c:	dfc01215 	stw	ra,72(sp)
    5190:	dc801115 	stw	r18,68(sp)
    5194:	2821883a 	mov	r16,r5
    5198:	2023883a 	mov	r17,r4
    519c:	10000b26 	beq	r2,zero,51cc <__smakebuf_r+0x54>
    51a0:	28c010c4 	addi	r3,r5,67
    51a4:	00800044 	movi	r2,1
    51a8:	28800515 	stw	r2,20(r5)
    51ac:	28c00415 	stw	r3,16(r5)
    51b0:	28c00015 	stw	r3,0(r5)
    51b4:	dfc01217 	ldw	ra,72(sp)
    51b8:	dc801117 	ldw	r18,68(sp)
    51bc:	dc401017 	ldw	r17,64(sp)
    51c0:	dc000f17 	ldw	r16,60(sp)
    51c4:	dec01304 	addi	sp,sp,76
    51c8:	f800283a 	ret
    51cc:	2940038f 	ldh	r5,14(r5)
    51d0:	28002116 	blt	r5,zero,5258 <__smakebuf_r+0xe0>
    51d4:	d80d883a 	mov	r6,sp
    51d8:	00078d80 	call	78d8 <_fstat_r>
    51dc:	10001e16 	blt	r2,zero,5258 <__smakebuf_r+0xe0>
    51e0:	d8800117 	ldw	r2,4(sp)
    51e4:	00e00014 	movui	r3,32768
    51e8:	113c000c 	andi	r4,r2,61440
    51ec:	20c03126 	beq	r4,r3,52b4 <__smakebuf_r+0x13c>
    51f0:	8080030b 	ldhu	r2,12(r16)
    51f4:	00c80004 	movi	r3,8192
    51f8:	10820014 	ori	r2,r2,2048
    51fc:	8080030d 	sth	r2,12(r16)
    5200:	20c01e26 	beq	r4,r3,527c <__smakebuf_r+0x104>
    5204:	04810004 	movi	r18,1024
    5208:	8809883a 	mov	r4,r17
    520c:	900b883a 	mov	r5,r18
    5210:	000530c0 	call	530c <_malloc_r>
    5214:	1009883a 	mov	r4,r2
    5218:	10003126 	beq	r2,zero,52e0 <__smakebuf_r+0x168>
    521c:	80c0030b 	ldhu	r3,12(r16)
    5220:	00800034 	movhi	r2,0
    5224:	10913904 	addi	r2,r2,17636
    5228:	88800f15 	stw	r2,60(r17)
    522c:	18c02014 	ori	r3,r3,128
    5230:	84800515 	stw	r18,20(r16)
    5234:	80c0030d 	sth	r3,12(r16)
    5238:	81000415 	stw	r4,16(r16)
    523c:	81000015 	stw	r4,0(r16)
    5240:	dfc01217 	ldw	ra,72(sp)
    5244:	dc801117 	ldw	r18,68(sp)
    5248:	dc401017 	ldw	r17,64(sp)
    524c:	dc000f17 	ldw	r16,60(sp)
    5250:	dec01304 	addi	sp,sp,76
    5254:	f800283a 	ret
    5258:	80c0030b 	ldhu	r3,12(r16)
    525c:	1880200c 	andi	r2,r3,128
    5260:	10000426 	beq	r2,zero,5274 <__smakebuf_r+0xfc>
    5264:	04801004 	movi	r18,64
    5268:	18820014 	ori	r2,r3,2048
    526c:	8080030d 	sth	r2,12(r16)
    5270:	003fe506 	br	5208 <__smakebuf_r+0x90>
    5274:	04810004 	movi	r18,1024
    5278:	003ffb06 	br	5268 <__smakebuf_r+0xf0>
    527c:	8140038f 	ldh	r5,14(r16)
    5280:	8809883a 	mov	r4,r17
    5284:	000794c0 	call	794c <_isatty_r>
    5288:	103fde26 	beq	r2,zero,5204 <__smakebuf_r+0x8c>
    528c:	8080030b 	ldhu	r2,12(r16)
    5290:	80c010c4 	addi	r3,r16,67
    5294:	04810004 	movi	r18,1024
    5298:	10800054 	ori	r2,r2,1
    529c:	8080030d 	sth	r2,12(r16)
    52a0:	00800044 	movi	r2,1
    52a4:	80c00415 	stw	r3,16(r16)
    52a8:	80800515 	stw	r2,20(r16)
    52ac:	80c00015 	stw	r3,0(r16)
    52b0:	003fd506 	br	5208 <__smakebuf_r+0x90>
    52b4:	80c00a17 	ldw	r3,40(r16)
    52b8:	00800034 	movhi	r2,0
    52bc:	109d0604 	addi	r2,r2,29720
    52c0:	18bfcb1e 	bne	r3,r2,51f0 <__smakebuf_r+0x78>
    52c4:	8080030b 	ldhu	r2,12(r16)
    52c8:	00c10004 	movi	r3,1024
    52cc:	1825883a 	mov	r18,r3
    52d0:	10c4b03a 	or	r2,r2,r3
    52d4:	8080030d 	sth	r2,12(r16)
    52d8:	80c01315 	stw	r3,76(r16)
    52dc:	003fca06 	br	5208 <__smakebuf_r+0x90>
    52e0:	8100030b 	ldhu	r4,12(r16)
    52e4:	2080800c 	andi	r2,r4,512
    52e8:	103fb21e 	bne	r2,zero,51b4 <__smakebuf_r+0x3c>
    52ec:	80c010c4 	addi	r3,r16,67
    52f0:	21000094 	ori	r4,r4,2
    52f4:	00800044 	movi	r2,1
    52f8:	80800515 	stw	r2,20(r16)
    52fc:	8100030d 	sth	r4,12(r16)
    5300:	80c00415 	stw	r3,16(r16)
    5304:	80c00015 	stw	r3,0(r16)
    5308:	003faa06 	br	51b4 <__smakebuf_r+0x3c>

0000530c <_malloc_r>:
    530c:	defff604 	addi	sp,sp,-40
    5310:	28c002c4 	addi	r3,r5,11
    5314:	00800584 	movi	r2,22
    5318:	dc800215 	stw	r18,8(sp)
    531c:	dfc00915 	stw	ra,36(sp)
    5320:	df000815 	stw	fp,32(sp)
    5324:	ddc00715 	stw	r23,28(sp)
    5328:	dd800615 	stw	r22,24(sp)
    532c:	dd400515 	stw	r21,20(sp)
    5330:	dd000415 	stw	r20,16(sp)
    5334:	dcc00315 	stw	r19,12(sp)
    5338:	dc400115 	stw	r17,4(sp)
    533c:	dc000015 	stw	r16,0(sp)
    5340:	2025883a 	mov	r18,r4
    5344:	10c01236 	bltu	r2,r3,5390 <_malloc_r+0x84>
    5348:	04400404 	movi	r17,16
    534c:	8940142e 	bgeu	r17,r5,53a0 <_malloc_r+0x94>
    5350:	00800304 	movi	r2,12
    5354:	0007883a 	mov	r3,zero
    5358:	90800015 	stw	r2,0(r18)
    535c:	1805883a 	mov	r2,r3
    5360:	dfc00917 	ldw	ra,36(sp)
    5364:	df000817 	ldw	fp,32(sp)
    5368:	ddc00717 	ldw	r23,28(sp)
    536c:	dd800617 	ldw	r22,24(sp)
    5370:	dd400517 	ldw	r21,20(sp)
    5374:	dd000417 	ldw	r20,16(sp)
    5378:	dcc00317 	ldw	r19,12(sp)
    537c:	dc800217 	ldw	r18,8(sp)
    5380:	dc400117 	ldw	r17,4(sp)
    5384:	dc000017 	ldw	r16,0(sp)
    5388:	dec00a04 	addi	sp,sp,40
    538c:	f800283a 	ret
    5390:	00bffe04 	movi	r2,-8
    5394:	18a2703a 	and	r17,r3,r2
    5398:	883fed16 	blt	r17,zero,5350 <_malloc_r+0x44>
    539c:	897fec36 	bltu	r17,r5,5350 <_malloc_r+0x44>
    53a0:	9009883a 	mov	r4,r18
    53a4:	000a4140 	call	a414 <__malloc_lock>
    53a8:	00807dc4 	movi	r2,503
    53ac:	14402b2e 	bgeu	r2,r17,545c <_malloc_r+0x150>
    53b0:	8806d27a 	srli	r3,r17,9
    53b4:	18003f1e 	bne	r3,zero,54b4 <_malloc_r+0x1a8>
    53b8:	880cd0fa 	srli	r6,r17,3
    53bc:	300490fa 	slli	r2,r6,3
    53c0:	02c00074 	movhi	r11,1
    53c4:	5ac1e804 	addi	r11,r11,1952
    53c8:	12cb883a 	add	r5,r2,r11
    53cc:	2c000317 	ldw	r16,12(r5)
    53d0:	580f883a 	mov	r7,r11
    53d4:	2c00041e 	bne	r5,r16,53e8 <_malloc_r+0xdc>
    53d8:	00000a06 	br	5404 <_malloc_r+0xf8>
    53dc:	1800860e 	bge	r3,zero,55f8 <_malloc_r+0x2ec>
    53e0:	84000317 	ldw	r16,12(r16)
    53e4:	2c000726 	beq	r5,r16,5404 <_malloc_r+0xf8>
    53e8:	80800117 	ldw	r2,4(r16)
    53ec:	00ffff04 	movi	r3,-4
    53f0:	10c8703a 	and	r4,r2,r3
    53f4:	2447c83a 	sub	r3,r4,r17
    53f8:	008003c4 	movi	r2,15
    53fc:	10fff70e 	bge	r2,r3,53dc <_malloc_r+0xd0>
    5400:	31bfffc4 	addi	r6,r6,-1
    5404:	32400044 	addi	r9,r6,1
    5408:	02800074 	movhi	r10,1
    540c:	5281ea04 	addi	r10,r10,1960
    5410:	54000217 	ldw	r16,8(r10)
    5414:	8280a026 	beq	r16,r10,5698 <_malloc_r+0x38c>
    5418:	80800117 	ldw	r2,4(r16)
    541c:	00ffff04 	movi	r3,-4
    5420:	10ca703a 	and	r5,r2,r3
    5424:	2c4dc83a 	sub	r6,r5,r17
    5428:	008003c4 	movi	r2,15
    542c:	11808316 	blt	r2,r6,563c <_malloc_r+0x330>
    5430:	52800315 	stw	r10,12(r10)
    5434:	52800215 	stw	r10,8(r10)
    5438:	30002916 	blt	r6,zero,54e0 <_malloc_r+0x1d4>
    543c:	8147883a 	add	r3,r16,r5
    5440:	18800117 	ldw	r2,4(r3)
    5444:	9009883a 	mov	r4,r18
    5448:	10800054 	ori	r2,r2,1
    544c:	18800115 	stw	r2,4(r3)
    5450:	000a4340 	call	a434 <__malloc_unlock>
    5454:	80c00204 	addi	r3,r16,8
    5458:	003fc006 	br	535c <_malloc_r+0x50>
    545c:	02c00074 	movhi	r11,1
    5460:	5ac1e804 	addi	r11,r11,1952
    5464:	8ac5883a 	add	r2,r17,r11
    5468:	14000317 	ldw	r16,12(r2)
    546c:	580f883a 	mov	r7,r11
    5470:	8806d0fa 	srli	r3,r17,3
    5474:	14006c26 	beq	r2,r16,5628 <_malloc_r+0x31c>
    5478:	80c00117 	ldw	r3,4(r16)
    547c:	00bfff04 	movi	r2,-4
    5480:	81800317 	ldw	r6,12(r16)
    5484:	1886703a 	and	r3,r3,r2
    5488:	80c7883a 	add	r3,r16,r3
    548c:	18800117 	ldw	r2,4(r3)
    5490:	81400217 	ldw	r5,8(r16)
    5494:	9009883a 	mov	r4,r18
    5498:	10800054 	ori	r2,r2,1
    549c:	18800115 	stw	r2,4(r3)
    54a0:	31400215 	stw	r5,8(r6)
    54a4:	29800315 	stw	r6,12(r5)
    54a8:	000a4340 	call	a434 <__malloc_unlock>
    54ac:	80c00204 	addi	r3,r16,8
    54b0:	003faa06 	br	535c <_malloc_r+0x50>
    54b4:	00800104 	movi	r2,4
    54b8:	10c0052e 	bgeu	r2,r3,54d0 <_malloc_r+0x1c4>
    54bc:	00800504 	movi	r2,20
    54c0:	10c07836 	bltu	r2,r3,56a4 <_malloc_r+0x398>
    54c4:	198016c4 	addi	r6,r3,91
    54c8:	300490fa 	slli	r2,r6,3
    54cc:	003fbc06 	br	53c0 <_malloc_r+0xb4>
    54d0:	8804d1ba 	srli	r2,r17,6
    54d4:	11800e04 	addi	r6,r2,56
    54d8:	300490fa 	slli	r2,r6,3
    54dc:	003fb806 	br	53c0 <_malloc_r+0xb4>
    54e0:	00807fc4 	movi	r2,511
    54e4:	1140bb36 	bltu	r2,r5,57d4 <_malloc_r+0x4c8>
    54e8:	2806d0fa 	srli	r3,r5,3
    54ec:	573ffe04 	addi	fp,r10,-8
    54f0:	00800044 	movi	r2,1
    54f4:	180890fa 	slli	r4,r3,3
    54f8:	1807d0ba 	srai	r3,r3,2
    54fc:	e1c00117 	ldw	r7,4(fp)
    5500:	5909883a 	add	r4,r11,r4
    5504:	21400217 	ldw	r5,8(r4)
    5508:	10c4983a 	sll	r2,r2,r3
    550c:	81000315 	stw	r4,12(r16)
    5510:	81400215 	stw	r5,8(r16)
    5514:	388eb03a 	or	r7,r7,r2
    5518:	2c000315 	stw	r16,12(r5)
    551c:	24000215 	stw	r16,8(r4)
    5520:	e1c00115 	stw	r7,4(fp)
    5524:	4807883a 	mov	r3,r9
    5528:	4800cd16 	blt	r9,zero,5860 <_malloc_r+0x554>
    552c:	1807d0ba 	srai	r3,r3,2
    5530:	00800044 	movi	r2,1
    5534:	10c8983a 	sll	r4,r2,r3
    5538:	39004436 	bltu	r7,r4,564c <_malloc_r+0x340>
    553c:	21c4703a 	and	r2,r4,r7
    5540:	10000a1e 	bne	r2,zero,556c <_malloc_r+0x260>
    5544:	2109883a 	add	r4,r4,r4
    5548:	00bfff04 	movi	r2,-4
    554c:	4884703a 	and	r2,r9,r2
    5550:	3906703a 	and	r3,r7,r4
    5554:	12400104 	addi	r9,r2,4
    5558:	1800041e 	bne	r3,zero,556c <_malloc_r+0x260>
    555c:	2109883a 	add	r4,r4,r4
    5560:	3904703a 	and	r2,r7,r4
    5564:	4a400104 	addi	r9,r9,4
    5568:	103ffc26 	beq	r2,zero,555c <_malloc_r+0x250>
    556c:	480490fa 	slli	r2,r9,3
    5570:	4819883a 	mov	r12,r9
    5574:	023fff04 	movi	r8,-4
    5578:	589b883a 	add	r13,r11,r2
    557c:	6807883a 	mov	r3,r13
    5580:	014003c4 	movi	r5,15
    5584:	1c000317 	ldw	r16,12(r3)
    5588:	1c00041e 	bne	r3,r16,559c <_malloc_r+0x290>
    558c:	0000a706 	br	582c <_malloc_r+0x520>
    5590:	3000ab0e 	bge	r6,zero,5840 <_malloc_r+0x534>
    5594:	84000317 	ldw	r16,12(r16)
    5598:	1c00a426 	beq	r3,r16,582c <_malloc_r+0x520>
    559c:	80800117 	ldw	r2,4(r16)
    55a0:	1204703a 	and	r2,r2,r8
    55a4:	144dc83a 	sub	r6,r2,r17
    55a8:	29bff90e 	bge	r5,r6,5590 <_malloc_r+0x284>
    55ac:	81000317 	ldw	r4,12(r16)
    55b0:	80c00217 	ldw	r3,8(r16)
    55b4:	89400054 	ori	r5,r17,1
    55b8:	8445883a 	add	r2,r16,r17
    55bc:	20c00215 	stw	r3,8(r4)
    55c0:	19000315 	stw	r4,12(r3)
    55c4:	81400115 	stw	r5,4(r16)
    55c8:	1187883a 	add	r3,r2,r6
    55cc:	31000054 	ori	r4,r6,1
    55d0:	50800315 	stw	r2,12(r10)
    55d4:	50800215 	stw	r2,8(r10)
    55d8:	19800015 	stw	r6,0(r3)
    55dc:	11000115 	stw	r4,4(r2)
    55e0:	12800215 	stw	r10,8(r2)
    55e4:	12800315 	stw	r10,12(r2)
    55e8:	9009883a 	mov	r4,r18
    55ec:	000a4340 	call	a434 <__malloc_unlock>
    55f0:	80c00204 	addi	r3,r16,8
    55f4:	003f5906 	br	535c <_malloc_r+0x50>
    55f8:	8109883a 	add	r4,r16,r4
    55fc:	20800117 	ldw	r2,4(r4)
    5600:	80c00217 	ldw	r3,8(r16)
    5604:	81400317 	ldw	r5,12(r16)
    5608:	10800054 	ori	r2,r2,1
    560c:	20800115 	stw	r2,4(r4)
    5610:	28c00215 	stw	r3,8(r5)
    5614:	19400315 	stw	r5,12(r3)
    5618:	9009883a 	mov	r4,r18
    561c:	000a4340 	call	a434 <__malloc_unlock>
    5620:	80c00204 	addi	r3,r16,8
    5624:	003f4d06 	br	535c <_malloc_r+0x50>
    5628:	80800204 	addi	r2,r16,8
    562c:	14000317 	ldw	r16,12(r2)
    5630:	143f911e 	bne	r2,r16,5478 <_malloc_r+0x16c>
    5634:	1a400084 	addi	r9,r3,2
    5638:	003f7306 	br	5408 <_malloc_r+0xfc>
    563c:	88c00054 	ori	r3,r17,1
    5640:	8445883a 	add	r2,r16,r17
    5644:	80c00115 	stw	r3,4(r16)
    5648:	003fdf06 	br	55c8 <_malloc_r+0x2bc>
    564c:	e4000217 	ldw	r16,8(fp)
    5650:	00bfff04 	movi	r2,-4
    5654:	80c00117 	ldw	r3,4(r16)
    5658:	802d883a 	mov	r22,r16
    565c:	18aa703a 	and	r21,r3,r2
    5660:	ac401636 	bltu	r21,r17,56bc <_malloc_r+0x3b0>
    5664:	ac49c83a 	sub	r4,r21,r17
    5668:	008003c4 	movi	r2,15
    566c:	1100130e 	bge	r2,r4,56bc <_malloc_r+0x3b0>
    5670:	88800054 	ori	r2,r17,1
    5674:	8447883a 	add	r3,r16,r17
    5678:	80800115 	stw	r2,4(r16)
    567c:	20800054 	ori	r2,r4,1
    5680:	18800115 	stw	r2,4(r3)
    5684:	e0c00215 	stw	r3,8(fp)
    5688:	9009883a 	mov	r4,r18
    568c:	000a4340 	call	a434 <__malloc_unlock>
    5690:	80c00204 	addi	r3,r16,8
    5694:	003f3106 	br	535c <_malloc_r+0x50>
    5698:	39c00117 	ldw	r7,4(r7)
    569c:	573ffe04 	addi	fp,r10,-8
    56a0:	003fa006 	br	5524 <_malloc_r+0x218>
    56a4:	00801504 	movi	r2,84
    56a8:	10c06736 	bltu	r2,r3,5848 <_malloc_r+0x53c>
    56ac:	8804d33a 	srli	r2,r17,12
    56b0:	11801b84 	addi	r6,r2,110
    56b4:	300490fa 	slli	r2,r6,3
    56b8:	003f4106 	br	53c0 <_malloc_r+0xb4>
    56bc:	d0a01817 	ldw	r2,-32672(gp)
    56c0:	d0e00517 	ldw	r3,-32748(gp)
    56c4:	053fffc4 	movi	r20,-1
    56c8:	10800404 	addi	r2,r2,16
    56cc:	88a7883a 	add	r19,r17,r2
    56d0:	1d000326 	beq	r3,r20,56e0 <_malloc_r+0x3d4>
    56d4:	98c3ffc4 	addi	r3,r19,4095
    56d8:	00bc0004 	movi	r2,-4096
    56dc:	18a6703a 	and	r19,r3,r2
    56e0:	9009883a 	mov	r4,r18
    56e4:	980b883a 	mov	r5,r19
    56e8:	00073a00 	call	73a0 <_sbrk_r>
    56ec:	1009883a 	mov	r4,r2
    56f0:	15000426 	beq	r2,r20,5704 <_malloc_r+0x3f8>
    56f4:	854b883a 	add	r5,r16,r21
    56f8:	1029883a 	mov	r20,r2
    56fc:	11405a2e 	bgeu	r2,r5,5868 <_malloc_r+0x55c>
    5700:	87000c26 	beq	r16,fp,5734 <_malloc_r+0x428>
    5704:	e4000217 	ldw	r16,8(fp)
    5708:	80c00117 	ldw	r3,4(r16)
    570c:	00bfff04 	movi	r2,-4
    5710:	1884703a 	and	r2,r3,r2
    5714:	14400336 	bltu	r2,r17,5724 <_malloc_r+0x418>
    5718:	1449c83a 	sub	r4,r2,r17
    571c:	008003c4 	movi	r2,15
    5720:	113fd316 	blt	r2,r4,5670 <_malloc_r+0x364>
    5724:	9009883a 	mov	r4,r18
    5728:	000a4340 	call	a434 <__malloc_unlock>
    572c:	0007883a 	mov	r3,zero
    5730:	003f0a06 	br	535c <_malloc_r+0x50>
    5734:	05c00074 	movhi	r23,1
    5738:	bdc78e04 	addi	r23,r23,7736
    573c:	b8800017 	ldw	r2,0(r23)
    5740:	988d883a 	add	r6,r19,r2
    5744:	b9800015 	stw	r6,0(r23)
    5748:	d0e00517 	ldw	r3,-32748(gp)
    574c:	00bfffc4 	movi	r2,-1
    5750:	18808e26 	beq	r3,r2,598c <_malloc_r+0x680>
    5754:	2145c83a 	sub	r2,r4,r5
    5758:	3085883a 	add	r2,r6,r2
    575c:	b8800015 	stw	r2,0(r23)
    5760:	20c001cc 	andi	r3,r4,7
    5764:	18005f1e 	bne	r3,zero,58e4 <_malloc_r+0x5d8>
    5768:	000b883a 	mov	r5,zero
    576c:	a4c5883a 	add	r2,r20,r19
    5770:	1083ffcc 	andi	r2,r2,4095
    5774:	00c40004 	movi	r3,4096
    5778:	1887c83a 	sub	r3,r3,r2
    577c:	28e7883a 	add	r19,r5,r3
    5780:	9009883a 	mov	r4,r18
    5784:	980b883a 	mov	r5,r19
    5788:	00073a00 	call	73a0 <_sbrk_r>
    578c:	1007883a 	mov	r3,r2
    5790:	00bfffc4 	movi	r2,-1
    5794:	18807a26 	beq	r3,r2,5980 <_malloc_r+0x674>
    5798:	1d05c83a 	sub	r2,r3,r20
    579c:	9885883a 	add	r2,r19,r2
    57a0:	10c00054 	ori	r3,r2,1
    57a4:	b8800017 	ldw	r2,0(r23)
    57a8:	a021883a 	mov	r16,r20
    57ac:	a0c00115 	stw	r3,4(r20)
    57b0:	9885883a 	add	r2,r19,r2
    57b4:	b8800015 	stw	r2,0(r23)
    57b8:	e5000215 	stw	r20,8(fp)
    57bc:	b7003626 	beq	r22,fp,5898 <_malloc_r+0x58c>
    57c0:	018003c4 	movi	r6,15
    57c4:	35404b36 	bltu	r6,r21,58f4 <_malloc_r+0x5e8>
    57c8:	00800044 	movi	r2,1
    57cc:	a0800115 	stw	r2,4(r20)
    57d0:	003fcd06 	br	5708 <_malloc_r+0x3fc>
    57d4:	2808d27a 	srli	r4,r5,9
    57d8:	2000371e 	bne	r4,zero,58b8 <_malloc_r+0x5ac>
    57dc:	2808d0fa 	srli	r4,r5,3
    57e0:	200690fa 	slli	r3,r4,3
    57e4:	1ad1883a 	add	r8,r3,r11
    57e8:	41800217 	ldw	r6,8(r8)
    57ec:	41805b26 	beq	r8,r6,595c <_malloc_r+0x650>
    57f0:	30800117 	ldw	r2,4(r6)
    57f4:	00ffff04 	movi	r3,-4
    57f8:	10c4703a 	and	r2,r2,r3
    57fc:	2880022e 	bgeu	r5,r2,5808 <_malloc_r+0x4fc>
    5800:	31800217 	ldw	r6,8(r6)
    5804:	41bffa1e 	bne	r8,r6,57f0 <_malloc_r+0x4e4>
    5808:	32000317 	ldw	r8,12(r6)
    580c:	39c00117 	ldw	r7,4(r7)
    5810:	82000315 	stw	r8,12(r16)
    5814:	81800215 	stw	r6,8(r16)
    5818:	07000074 	movhi	fp,1
    581c:	e701e804 	addi	fp,fp,1952
    5820:	34000315 	stw	r16,12(r6)
    5824:	44000215 	stw	r16,8(r8)
    5828:	003f3e06 	br	5524 <_malloc_r+0x218>
    582c:	63000044 	addi	r12,r12,1
    5830:	608000cc 	andi	r2,r12,3
    5834:	10005d26 	beq	r2,zero,59ac <_malloc_r+0x6a0>
    5838:	18c00204 	addi	r3,r3,8
    583c:	003f5106 	br	5584 <_malloc_r+0x278>
    5840:	8089883a 	add	r4,r16,r2
    5844:	003f6d06 	br	55fc <_malloc_r+0x2f0>
    5848:	00805504 	movi	r2,340
    584c:	10c02036 	bltu	r2,r3,58d0 <_malloc_r+0x5c4>
    5850:	8804d3fa 	srli	r2,r17,15
    5854:	11801dc4 	addi	r6,r2,119
    5858:	300490fa 	slli	r2,r6,3
    585c:	003ed806 	br	53c0 <_malloc_r+0xb4>
    5860:	48c000c4 	addi	r3,r9,3
    5864:	003f3106 	br	552c <_malloc_r+0x220>
    5868:	05c00074 	movhi	r23,1
    586c:	bdc78e04 	addi	r23,r23,7736
    5870:	b8800017 	ldw	r2,0(r23)
    5874:	988d883a 	add	r6,r19,r2
    5878:	b9800015 	stw	r6,0(r23)
    587c:	293fb21e 	bne	r5,r4,5748 <_malloc_r+0x43c>
    5880:	2083ffcc 	andi	r2,r4,4095
    5884:	103fb01e 	bne	r2,zero,5748 <_malloc_r+0x43c>
    5888:	e4000217 	ldw	r16,8(fp)
    588c:	9d45883a 	add	r2,r19,r21
    5890:	10800054 	ori	r2,r2,1
    5894:	80800115 	stw	r2,4(r16)
    5898:	b8c00017 	ldw	r3,0(r23)
    589c:	d0a01917 	ldw	r2,-32668(gp)
    58a0:	10c0012e 	bgeu	r2,r3,58a8 <_malloc_r+0x59c>
    58a4:	d0e01915 	stw	r3,-32668(gp)
    58a8:	d0a01a17 	ldw	r2,-32664(gp)
    58ac:	10ff962e 	bgeu	r2,r3,5708 <_malloc_r+0x3fc>
    58b0:	d0e01a15 	stw	r3,-32664(gp)
    58b4:	003f9406 	br	5708 <_malloc_r+0x3fc>
    58b8:	00800104 	movi	r2,4
    58bc:	11001e36 	bltu	r2,r4,5938 <_malloc_r+0x62c>
    58c0:	2804d1ba 	srli	r2,r5,6
    58c4:	11000e04 	addi	r4,r2,56
    58c8:	200690fa 	slli	r3,r4,3
    58cc:	003fc506 	br	57e4 <_malloc_r+0x4d8>
    58d0:	00815504 	movi	r2,1364
    58d4:	10c01d2e 	bgeu	r2,r3,594c <_malloc_r+0x640>
    58d8:	01801f84 	movi	r6,126
    58dc:	0080fc04 	movi	r2,1008
    58e0:	003eb706 	br	53c0 <_malloc_r+0xb4>
    58e4:	00800204 	movi	r2,8
    58e8:	10cbc83a 	sub	r5,r2,r3
    58ec:	2169883a 	add	r20,r4,r5
    58f0:	003f9e06 	br	576c <_malloc_r+0x460>
    58f4:	00bffe04 	movi	r2,-8
    58f8:	a93ffd04 	addi	r4,r21,-12
    58fc:	2088703a 	and	r4,r4,r2
    5900:	b10b883a 	add	r5,r22,r4
    5904:	00c00144 	movi	r3,5
    5908:	28c00215 	stw	r3,8(r5)
    590c:	28c00115 	stw	r3,4(r5)
    5910:	b0800117 	ldw	r2,4(r22)
    5914:	1080004c 	andi	r2,r2,1
    5918:	2084b03a 	or	r2,r4,r2
    591c:	b0800115 	stw	r2,4(r22)
    5920:	313fdd2e 	bgeu	r6,r4,5898 <_malloc_r+0x58c>
    5924:	b1400204 	addi	r5,r22,8
    5928:	9009883a 	mov	r4,r18
    592c:	00047840 	call	4784 <_free_r>
    5930:	e4000217 	ldw	r16,8(fp)
    5934:	003fd806 	br	5898 <_malloc_r+0x58c>
    5938:	00800504 	movi	r2,20
    593c:	11001536 	bltu	r2,r4,5994 <_malloc_r+0x688>
    5940:	210016c4 	addi	r4,r4,91
    5944:	200690fa 	slli	r3,r4,3
    5948:	003fa606 	br	57e4 <_malloc_r+0x4d8>
    594c:	8804d4ba 	srli	r2,r17,18
    5950:	11801f04 	addi	r6,r2,124
    5954:	300490fa 	slli	r2,r6,3
    5958:	003e9906 	br	53c0 <_malloc_r+0xb4>
    595c:	2009d0ba 	srai	r4,r4,2
    5960:	01400074 	movhi	r5,1
    5964:	2941e804 	addi	r5,r5,1952
    5968:	00c00044 	movi	r3,1
    596c:	28800117 	ldw	r2,4(r5)
    5970:	1906983a 	sll	r3,r3,r4
    5974:	10c4b03a 	or	r2,r2,r3
    5978:	28800115 	stw	r2,4(r5)
    597c:	003fa306 	br	580c <_malloc_r+0x500>
    5980:	0027883a 	mov	r19,zero
    5984:	00c00044 	movi	r3,1
    5988:	003f8606 	br	57a4 <_malloc_r+0x498>
    598c:	d1200515 	stw	r4,-32748(gp)
    5990:	003f7306 	br	5760 <_malloc_r+0x454>
    5994:	00801504 	movi	r2,84
    5998:	11001936 	bltu	r2,r4,5a00 <_malloc_r+0x6f4>
    599c:	2804d33a 	srli	r2,r5,12
    59a0:	11001b84 	addi	r4,r2,110
    59a4:	200690fa 	slli	r3,r4,3
    59a8:	003f8e06 	br	57e4 <_malloc_r+0x4d8>
    59ac:	480b883a 	mov	r5,r9
    59b0:	6807883a 	mov	r3,r13
    59b4:	288000cc 	andi	r2,r5,3
    59b8:	18fffe04 	addi	r3,r3,-8
    59bc:	297fffc4 	addi	r5,r5,-1
    59c0:	10001526 	beq	r2,zero,5a18 <_malloc_r+0x70c>
    59c4:	18800217 	ldw	r2,8(r3)
    59c8:	10fffa26 	beq	r2,r3,59b4 <_malloc_r+0x6a8>
    59cc:	2109883a 	add	r4,r4,r4
    59d0:	393f1e36 	bltu	r7,r4,564c <_malloc_r+0x340>
    59d4:	203f1d26 	beq	r4,zero,564c <_malloc_r+0x340>
    59d8:	21c4703a 	and	r2,r4,r7
    59dc:	10000226 	beq	r2,zero,59e8 <_malloc_r+0x6dc>
    59e0:	6013883a 	mov	r9,r12
    59e4:	003ee106 	br	556c <_malloc_r+0x260>
    59e8:	2109883a 	add	r4,r4,r4
    59ec:	3904703a 	and	r2,r7,r4
    59f0:	63000104 	addi	r12,r12,4
    59f4:	103ffc26 	beq	r2,zero,59e8 <_malloc_r+0x6dc>
    59f8:	6013883a 	mov	r9,r12
    59fc:	003edb06 	br	556c <_malloc_r+0x260>
    5a00:	00805504 	movi	r2,340
    5a04:	11000836 	bltu	r2,r4,5a28 <_malloc_r+0x71c>
    5a08:	2804d3fa 	srli	r2,r5,15
    5a0c:	11001dc4 	addi	r4,r2,119
    5a10:	200690fa 	slli	r3,r4,3
    5a14:	003f7306 	br	57e4 <_malloc_r+0x4d8>
    5a18:	0104303a 	nor	r2,zero,r4
    5a1c:	388e703a 	and	r7,r7,r2
    5a20:	e1c00115 	stw	r7,4(fp)
    5a24:	003fe906 	br	59cc <_malloc_r+0x6c0>
    5a28:	00815504 	movi	r2,1364
    5a2c:	1100032e 	bgeu	r2,r4,5a3c <_malloc_r+0x730>
    5a30:	01001f84 	movi	r4,126
    5a34:	00c0fc04 	movi	r3,1008
    5a38:	003f6a06 	br	57e4 <_malloc_r+0x4d8>
    5a3c:	2804d4ba 	srli	r2,r5,18
    5a40:	11001f04 	addi	r4,r2,124
    5a44:	200690fa 	slli	r3,r4,3
    5a48:	003f6606 	br	57e4 <_malloc_r+0x4d8>

00005a4c <memchr>:
    5a4c:	008000c4 	movi	r2,3
    5a50:	29403fcc 	andi	r5,r5,255
    5a54:	2007883a 	mov	r3,r4
    5a58:	1180022e 	bgeu	r2,r6,5a64 <memchr+0x18>
    5a5c:	2084703a 	and	r2,r4,r2
    5a60:	10000b26 	beq	r2,zero,5a90 <memchr+0x44>
    5a64:	313fffc4 	addi	r4,r6,-1
    5a68:	3000051e 	bne	r6,zero,5a80 <memchr+0x34>
    5a6c:	00002c06 	br	5b20 <memchr+0xd4>
    5a70:	213fffc4 	addi	r4,r4,-1
    5a74:	00bfffc4 	movi	r2,-1
    5a78:	18c00044 	addi	r3,r3,1
    5a7c:	20802826 	beq	r4,r2,5b20 <memchr+0xd4>
    5a80:	18800003 	ldbu	r2,0(r3)
    5a84:	28bffa1e 	bne	r5,r2,5a70 <memchr+0x24>
    5a88:	1805883a 	mov	r2,r3
    5a8c:	f800283a 	ret
    5a90:	0011883a 	mov	r8,zero
    5a94:	0007883a 	mov	r3,zero
    5a98:	01c00104 	movi	r7,4
    5a9c:	4004923a 	slli	r2,r8,8
    5aa0:	18c00044 	addi	r3,r3,1
    5aa4:	1151883a 	add	r8,r2,r5
    5aa8:	19fffc1e 	bne	r3,r7,5a9c <memchr+0x50>
    5aac:	02bfbff4 	movhi	r10,65279
    5ab0:	52bfbfc4 	addi	r10,r10,-257
    5ab4:	02602074 	movhi	r9,32897
    5ab8:	4a602004 	addi	r9,r9,-32640
    5abc:	02c000c4 	movi	r11,3
    5ac0:	20800017 	ldw	r2,0(r4)
    5ac4:	31bfff04 	addi	r6,r6,-4
    5ac8:	200f883a 	mov	r7,r4
    5acc:	1204f03a 	xor	r2,r2,r8
    5ad0:	1287883a 	add	r3,r2,r10
    5ad4:	1a46703a 	and	r3,r3,r9
    5ad8:	0084303a 	nor	r2,zero,r2
    5adc:	10c4703a 	and	r2,r2,r3
    5ae0:	10000b26 	beq	r2,zero,5b10 <memchr+0xc4>
    5ae4:	20800003 	ldbu	r2,0(r4)
    5ae8:	28800f26 	beq	r5,r2,5b28 <memchr+0xdc>
    5aec:	20800043 	ldbu	r2,1(r4)
    5af0:	21c00044 	addi	r7,r4,1
    5af4:	28800c26 	beq	r5,r2,5b28 <memchr+0xdc>
    5af8:	20800083 	ldbu	r2,2(r4)
    5afc:	21c00084 	addi	r7,r4,2
    5b00:	28800926 	beq	r5,r2,5b28 <memchr+0xdc>
    5b04:	208000c3 	ldbu	r2,3(r4)
    5b08:	21c000c4 	addi	r7,r4,3
    5b0c:	28800626 	beq	r5,r2,5b28 <memchr+0xdc>
    5b10:	21000104 	addi	r4,r4,4
    5b14:	59bfea36 	bltu	r11,r6,5ac0 <memchr+0x74>
    5b18:	2007883a 	mov	r3,r4
    5b1c:	003fd106 	br	5a64 <memchr+0x18>
    5b20:	0005883a 	mov	r2,zero
    5b24:	f800283a 	ret
    5b28:	3805883a 	mov	r2,r7
    5b2c:	f800283a 	ret

00005b30 <memcpy>:
    5b30:	01c003c4 	movi	r7,15
    5b34:	2007883a 	mov	r3,r4
    5b38:	3980032e 	bgeu	r7,r6,5b48 <memcpy+0x18>
    5b3c:	2904b03a 	or	r2,r5,r4
    5b40:	108000cc 	andi	r2,r2,3
    5b44:	10000926 	beq	r2,zero,5b6c <memcpy+0x3c>
    5b48:	30000626 	beq	r6,zero,5b64 <memcpy+0x34>
    5b4c:	30cd883a 	add	r6,r6,r3
    5b50:	28800003 	ldbu	r2,0(r5)
    5b54:	29400044 	addi	r5,r5,1
    5b58:	18800005 	stb	r2,0(r3)
    5b5c:	18c00044 	addi	r3,r3,1
    5b60:	30fffb1e 	bne	r6,r3,5b50 <memcpy+0x20>
    5b64:	2005883a 	mov	r2,r4
    5b68:	f800283a 	ret
    5b6c:	3811883a 	mov	r8,r7
    5b70:	200f883a 	mov	r7,r4
    5b74:	28c00017 	ldw	r3,0(r5)
    5b78:	31bffc04 	addi	r6,r6,-16
    5b7c:	38c00015 	stw	r3,0(r7)
    5b80:	28800117 	ldw	r2,4(r5)
    5b84:	38800115 	stw	r2,4(r7)
    5b88:	28c00217 	ldw	r3,8(r5)
    5b8c:	38c00215 	stw	r3,8(r7)
    5b90:	28800317 	ldw	r2,12(r5)
    5b94:	29400404 	addi	r5,r5,16
    5b98:	38800315 	stw	r2,12(r7)
    5b9c:	39c00404 	addi	r7,r7,16
    5ba0:	41bff436 	bltu	r8,r6,5b74 <memcpy+0x44>
    5ba4:	008000c4 	movi	r2,3
    5ba8:	1180072e 	bgeu	r2,r6,5bc8 <memcpy+0x98>
    5bac:	1007883a 	mov	r3,r2
    5bb0:	28800017 	ldw	r2,0(r5)
    5bb4:	31bfff04 	addi	r6,r6,-4
    5bb8:	29400104 	addi	r5,r5,4
    5bbc:	38800015 	stw	r2,0(r7)
    5bc0:	39c00104 	addi	r7,r7,4
    5bc4:	19bffa36 	bltu	r3,r6,5bb0 <memcpy+0x80>
    5bc8:	3807883a 	mov	r3,r7
    5bcc:	003fde06 	br	5b48 <memcpy+0x18>

00005bd0 <memmove>:
    5bd0:	2807883a 	mov	r3,r5
    5bd4:	2011883a 	mov	r8,r4
    5bd8:	29000c2e 	bgeu	r5,r4,5c0c <memmove+0x3c>
    5bdc:	298f883a 	add	r7,r5,r6
    5be0:	21c00a2e 	bgeu	r4,r7,5c0c <memmove+0x3c>
    5be4:	30000726 	beq	r6,zero,5c04 <memmove+0x34>
    5be8:	2187883a 	add	r3,r4,r6
    5bec:	198dc83a 	sub	r6,r3,r6
    5bf0:	39ffffc4 	addi	r7,r7,-1
    5bf4:	38800003 	ldbu	r2,0(r7)
    5bf8:	18ffffc4 	addi	r3,r3,-1
    5bfc:	18800005 	stb	r2,0(r3)
    5c00:	19bffb1e 	bne	r3,r6,5bf0 <memmove+0x20>
    5c04:	2005883a 	mov	r2,r4
    5c08:	f800283a 	ret
    5c0c:	01c003c4 	movi	r7,15
    5c10:	39800a36 	bltu	r7,r6,5c3c <memmove+0x6c>
    5c14:	303ffb26 	beq	r6,zero,5c04 <memmove+0x34>
    5c18:	400f883a 	mov	r7,r8
    5c1c:	320d883a 	add	r6,r6,r8
    5c20:	28800003 	ldbu	r2,0(r5)
    5c24:	29400044 	addi	r5,r5,1
    5c28:	38800005 	stb	r2,0(r7)
    5c2c:	39c00044 	addi	r7,r7,1
    5c30:	39bffb1e 	bne	r7,r6,5c20 <memmove+0x50>
    5c34:	2005883a 	mov	r2,r4
    5c38:	f800283a 	ret
    5c3c:	1904b03a 	or	r2,r3,r4
    5c40:	108000cc 	andi	r2,r2,3
    5c44:	103ff31e 	bne	r2,zero,5c14 <memmove+0x44>
    5c48:	3811883a 	mov	r8,r7
    5c4c:	180b883a 	mov	r5,r3
    5c50:	200f883a 	mov	r7,r4
    5c54:	28c00017 	ldw	r3,0(r5)
    5c58:	31bffc04 	addi	r6,r6,-16
    5c5c:	38c00015 	stw	r3,0(r7)
    5c60:	28800117 	ldw	r2,4(r5)
    5c64:	38800115 	stw	r2,4(r7)
    5c68:	28c00217 	ldw	r3,8(r5)
    5c6c:	38c00215 	stw	r3,8(r7)
    5c70:	28800317 	ldw	r2,12(r5)
    5c74:	29400404 	addi	r5,r5,16
    5c78:	38800315 	stw	r2,12(r7)
    5c7c:	39c00404 	addi	r7,r7,16
    5c80:	41bff436 	bltu	r8,r6,5c54 <memmove+0x84>
    5c84:	008000c4 	movi	r2,3
    5c88:	1180072e 	bgeu	r2,r6,5ca8 <memmove+0xd8>
    5c8c:	1007883a 	mov	r3,r2
    5c90:	28800017 	ldw	r2,0(r5)
    5c94:	31bfff04 	addi	r6,r6,-4
    5c98:	29400104 	addi	r5,r5,4
    5c9c:	38800015 	stw	r2,0(r7)
    5ca0:	39c00104 	addi	r7,r7,4
    5ca4:	19bffa36 	bltu	r3,r6,5c90 <memmove+0xc0>
    5ca8:	3811883a 	mov	r8,r7
    5cac:	003fd906 	br	5c14 <memmove+0x44>

00005cb0 <memset>:
    5cb0:	008000c4 	movi	r2,3
    5cb4:	29403fcc 	andi	r5,r5,255
    5cb8:	2007883a 	mov	r3,r4
    5cbc:	1180022e 	bgeu	r2,r6,5cc8 <memset+0x18>
    5cc0:	2084703a 	and	r2,r4,r2
    5cc4:	10000826 	beq	r2,zero,5ce8 <memset+0x38>
    5cc8:	30000526 	beq	r6,zero,5ce0 <memset+0x30>
    5ccc:	2805883a 	mov	r2,r5
    5cd0:	30cd883a 	add	r6,r6,r3
    5cd4:	18800005 	stb	r2,0(r3)
    5cd8:	18c00044 	addi	r3,r3,1
    5cdc:	19bffd1e 	bne	r3,r6,5cd4 <memset+0x24>
    5ce0:	2005883a 	mov	r2,r4
    5ce4:	f800283a 	ret
    5ce8:	2804923a 	slli	r2,r5,8
    5cec:	020003c4 	movi	r8,15
    5cf0:	200f883a 	mov	r7,r4
    5cf4:	2884b03a 	or	r2,r5,r2
    5cf8:	1006943a 	slli	r3,r2,16
    5cfc:	10c6b03a 	or	r3,r2,r3
    5d00:	41800a2e 	bgeu	r8,r6,5d2c <memset+0x7c>
    5d04:	4005883a 	mov	r2,r8
    5d08:	31bffc04 	addi	r6,r6,-16
    5d0c:	38c00015 	stw	r3,0(r7)
    5d10:	38c00115 	stw	r3,4(r7)
    5d14:	38c00215 	stw	r3,8(r7)
    5d18:	38c00315 	stw	r3,12(r7)
    5d1c:	39c00404 	addi	r7,r7,16
    5d20:	11bff936 	bltu	r2,r6,5d08 <memset+0x58>
    5d24:	008000c4 	movi	r2,3
    5d28:	1180052e 	bgeu	r2,r6,5d40 <memset+0x90>
    5d2c:	31bfff04 	addi	r6,r6,-4
    5d30:	008000c4 	movi	r2,3
    5d34:	38c00015 	stw	r3,0(r7)
    5d38:	39c00104 	addi	r7,r7,4
    5d3c:	11bffb36 	bltu	r2,r6,5d2c <memset+0x7c>
    5d40:	3807883a 	mov	r3,r7
    5d44:	003fe006 	br	5cc8 <memset+0x18>

00005d48 <_Bfree>:
    5d48:	28000826 	beq	r5,zero,5d6c <_Bfree+0x24>
    5d4c:	28800117 	ldw	r2,4(r5)
    5d50:	21001317 	ldw	r4,76(r4)
    5d54:	1085883a 	add	r2,r2,r2
    5d58:	1085883a 	add	r2,r2,r2
    5d5c:	1105883a 	add	r2,r2,r4
    5d60:	10c00017 	ldw	r3,0(r2)
    5d64:	28c00015 	stw	r3,0(r5)
    5d68:	11400015 	stw	r5,0(r2)
    5d6c:	f800283a 	ret

00005d70 <__hi0bits>:
    5d70:	20bfffec 	andhi	r2,r4,65535
    5d74:	10001426 	beq	r2,zero,5dc8 <__hi0bits+0x58>
    5d78:	0007883a 	mov	r3,zero
    5d7c:	20bfc02c 	andhi	r2,r4,65280
    5d80:	1000021e 	bne	r2,zero,5d8c <__hi0bits+0x1c>
    5d84:	2008923a 	slli	r4,r4,8
    5d88:	18c00204 	addi	r3,r3,8
    5d8c:	20bc002c 	andhi	r2,r4,61440
    5d90:	1000021e 	bne	r2,zero,5d9c <__hi0bits+0x2c>
    5d94:	2008913a 	slli	r4,r4,4
    5d98:	18c00104 	addi	r3,r3,4
    5d9c:	20b0002c 	andhi	r2,r4,49152
    5da0:	1000031e 	bne	r2,zero,5db0 <__hi0bits+0x40>
    5da4:	2105883a 	add	r2,r4,r4
    5da8:	18c00084 	addi	r3,r3,2
    5dac:	1089883a 	add	r4,r2,r2
    5db0:	20000316 	blt	r4,zero,5dc0 <__hi0bits+0x50>
    5db4:	2090002c 	andhi	r2,r4,16384
    5db8:	10000626 	beq	r2,zero,5dd4 <__hi0bits+0x64>
    5dbc:	18c00044 	addi	r3,r3,1
    5dc0:	1805883a 	mov	r2,r3
    5dc4:	f800283a 	ret
    5dc8:	2008943a 	slli	r4,r4,16
    5dcc:	00c00404 	movi	r3,16
    5dd0:	003fea06 	br	5d7c <__hi0bits+0xc>
    5dd4:	00c00804 	movi	r3,32
    5dd8:	1805883a 	mov	r2,r3
    5ddc:	f800283a 	ret

00005de0 <__lo0bits>:
    5de0:	20c00017 	ldw	r3,0(r4)
    5de4:	188001cc 	andi	r2,r3,7
    5de8:	10000a26 	beq	r2,zero,5e14 <__lo0bits+0x34>
    5dec:	1880004c 	andi	r2,r3,1
    5df0:	1005003a 	cmpeq	r2,r2,zero
    5df4:	10002126 	beq	r2,zero,5e7c <__lo0bits+0x9c>
    5df8:	1880008c 	andi	r2,r3,2
    5dfc:	1000251e 	bne	r2,zero,5e94 <__lo0bits+0xb4>
    5e00:	1804d0ba 	srli	r2,r3,2
    5e04:	01400084 	movi	r5,2
    5e08:	20800015 	stw	r2,0(r4)
    5e0c:	2805883a 	mov	r2,r5
    5e10:	f800283a 	ret
    5e14:	18bfffcc 	andi	r2,r3,65535
    5e18:	10001526 	beq	r2,zero,5e70 <__lo0bits+0x90>
    5e1c:	000b883a 	mov	r5,zero
    5e20:	18803fcc 	andi	r2,r3,255
    5e24:	1000021e 	bne	r2,zero,5e30 <__lo0bits+0x50>
    5e28:	1806d23a 	srli	r3,r3,8
    5e2c:	29400204 	addi	r5,r5,8
    5e30:	188003cc 	andi	r2,r3,15
    5e34:	1000021e 	bne	r2,zero,5e40 <__lo0bits+0x60>
    5e38:	1806d13a 	srli	r3,r3,4
    5e3c:	29400104 	addi	r5,r5,4
    5e40:	188000cc 	andi	r2,r3,3
    5e44:	1000021e 	bne	r2,zero,5e50 <__lo0bits+0x70>
    5e48:	1806d0ba 	srli	r3,r3,2
    5e4c:	29400084 	addi	r5,r5,2
    5e50:	1880004c 	andi	r2,r3,1
    5e54:	1000031e 	bne	r2,zero,5e64 <__lo0bits+0x84>
    5e58:	1806d07a 	srli	r3,r3,1
    5e5c:	18000a26 	beq	r3,zero,5e88 <__lo0bits+0xa8>
    5e60:	29400044 	addi	r5,r5,1
    5e64:	2805883a 	mov	r2,r5
    5e68:	20c00015 	stw	r3,0(r4)
    5e6c:	f800283a 	ret
    5e70:	1806d43a 	srli	r3,r3,16
    5e74:	01400404 	movi	r5,16
    5e78:	003fe906 	br	5e20 <__lo0bits+0x40>
    5e7c:	000b883a 	mov	r5,zero
    5e80:	2805883a 	mov	r2,r5
    5e84:	f800283a 	ret
    5e88:	01400804 	movi	r5,32
    5e8c:	2805883a 	mov	r2,r5
    5e90:	f800283a 	ret
    5e94:	1804d07a 	srli	r2,r3,1
    5e98:	01400044 	movi	r5,1
    5e9c:	20800015 	stw	r2,0(r4)
    5ea0:	003fda06 	br	5e0c <__lo0bits+0x2c>

00005ea4 <__mcmp>:
    5ea4:	20800417 	ldw	r2,16(r4)
    5ea8:	28c00417 	ldw	r3,16(r5)
    5eac:	10cfc83a 	sub	r7,r2,r3
    5eb0:	38000c1e 	bne	r7,zero,5ee4 <__mcmp+0x40>
    5eb4:	18c5883a 	add	r2,r3,r3
    5eb8:	1085883a 	add	r2,r2,r2
    5ebc:	10c00504 	addi	r3,r2,20
    5ec0:	21000504 	addi	r4,r4,20
    5ec4:	28cb883a 	add	r5,r5,r3
    5ec8:	2085883a 	add	r2,r4,r2
    5ecc:	10bfff04 	addi	r2,r2,-4
    5ed0:	297fff04 	addi	r5,r5,-4
    5ed4:	11800017 	ldw	r6,0(r2)
    5ed8:	28c00017 	ldw	r3,0(r5)
    5edc:	30c0031e 	bne	r6,r3,5eec <__mcmp+0x48>
    5ee0:	20bffa36 	bltu	r4,r2,5ecc <__mcmp+0x28>
    5ee4:	3805883a 	mov	r2,r7
    5ee8:	f800283a 	ret
    5eec:	30c00336 	bltu	r6,r3,5efc <__mcmp+0x58>
    5ef0:	01c00044 	movi	r7,1
    5ef4:	3805883a 	mov	r2,r7
    5ef8:	f800283a 	ret
    5efc:	01ffffc4 	movi	r7,-1
    5f00:	003ff806 	br	5ee4 <__mcmp+0x40>

00005f04 <__ulp>:
    5f04:	295ffc2c 	andhi	r5,r5,32752
    5f08:	013f3034 	movhi	r4,64704
    5f0c:	290b883a 	add	r5,r5,r4
    5f10:	0145c83a 	sub	r2,zero,r5
    5f14:	1007d53a 	srai	r3,r2,20
    5f18:	000d883a 	mov	r6,zero
    5f1c:	0140040e 	bge	zero,r5,5f30 <__ulp+0x2c>
    5f20:	280f883a 	mov	r7,r5
    5f24:	3807883a 	mov	r3,r7
    5f28:	3005883a 	mov	r2,r6
    5f2c:	f800283a 	ret
    5f30:	008004c4 	movi	r2,19
    5f34:	193ffb04 	addi	r4,r3,-20
    5f38:	10c00c0e 	bge	r2,r3,5f6c <__ulp+0x68>
    5f3c:	008007c4 	movi	r2,31
    5f40:	1107c83a 	sub	r3,r2,r4
    5f44:	00800784 	movi	r2,30
    5f48:	01400044 	movi	r5,1
    5f4c:	11000216 	blt	r2,r4,5f58 <__ulp+0x54>
    5f50:	00800044 	movi	r2,1
    5f54:	10ca983a 	sll	r5,r2,r3
    5f58:	000f883a 	mov	r7,zero
    5f5c:	280d883a 	mov	r6,r5
    5f60:	3807883a 	mov	r3,r7
    5f64:	3005883a 	mov	r2,r6
    5f68:	f800283a 	ret
    5f6c:	00800234 	movhi	r2,8
    5f70:	10cfd83a 	sra	r7,r2,r3
    5f74:	000d883a 	mov	r6,zero
    5f78:	3005883a 	mov	r2,r6
    5f7c:	3807883a 	mov	r3,r7
    5f80:	f800283a 	ret

00005f84 <__b2d>:
    5f84:	20800417 	ldw	r2,16(r4)
    5f88:	defff904 	addi	sp,sp,-28
    5f8c:	dd000415 	stw	r20,16(sp)
    5f90:	1085883a 	add	r2,r2,r2
    5f94:	25000504 	addi	r20,r4,20
    5f98:	1085883a 	add	r2,r2,r2
    5f9c:	dc000015 	stw	r16,0(sp)
    5fa0:	a0a1883a 	add	r16,r20,r2
    5fa4:	dd400515 	stw	r21,20(sp)
    5fa8:	857fff17 	ldw	r21,-4(r16)
    5fac:	dc400115 	stw	r17,4(sp)
    5fb0:	dfc00615 	stw	ra,24(sp)
    5fb4:	a809883a 	mov	r4,r21
    5fb8:	2823883a 	mov	r17,r5
    5fbc:	dcc00315 	stw	r19,12(sp)
    5fc0:	dc800215 	stw	r18,8(sp)
    5fc4:	0005d700 	call	5d70 <__hi0bits>
    5fc8:	100b883a 	mov	r5,r2
    5fcc:	00800804 	movi	r2,32
    5fd0:	1145c83a 	sub	r2,r2,r5
    5fd4:	88800015 	stw	r2,0(r17)
    5fd8:	00800284 	movi	r2,10
    5fdc:	80ffff04 	addi	r3,r16,-4
    5fe0:	11401416 	blt	r2,r5,6034 <__b2d+0xb0>
    5fe4:	008002c4 	movi	r2,11
    5fe8:	1149c83a 	sub	r4,r2,r5
    5fec:	a0c02736 	bltu	r20,r3,608c <__b2d+0x108>
    5ff0:	000d883a 	mov	r6,zero
    5ff4:	28800544 	addi	r2,r5,21
    5ff8:	a906d83a 	srl	r3,r21,r4
    5ffc:	a884983a 	sll	r2,r21,r2
    6000:	1ccffc34 	orhi	r19,r3,16368
    6004:	11a4b03a 	or	r18,r2,r6
    6008:	9005883a 	mov	r2,r18
    600c:	9807883a 	mov	r3,r19
    6010:	dfc00617 	ldw	ra,24(sp)
    6014:	dd400517 	ldw	r21,20(sp)
    6018:	dd000417 	ldw	r20,16(sp)
    601c:	dcc00317 	ldw	r19,12(sp)
    6020:	dc800217 	ldw	r18,8(sp)
    6024:	dc400117 	ldw	r17,4(sp)
    6028:	dc000017 	ldw	r16,0(sp)
    602c:	dec00704 	addi	sp,sp,28
    6030:	f800283a 	ret
    6034:	a0c00e36 	bltu	r20,r3,6070 <__b2d+0xec>
    6038:	293ffd44 	addi	r4,r5,-11
    603c:	000d883a 	mov	r6,zero
    6040:	20000f26 	beq	r4,zero,6080 <__b2d+0xfc>
    6044:	00800804 	movi	r2,32
    6048:	110bc83a 	sub	r5,r2,r4
    604c:	a0c01236 	bltu	r20,r3,6098 <__b2d+0x114>
    6050:	000f883a 	mov	r7,zero
    6054:	a904983a 	sll	r2,r21,r4
    6058:	3146d83a 	srl	r3,r6,r5
    605c:	3108983a 	sll	r4,r6,r4
    6060:	108ffc34 	orhi	r2,r2,16368
    6064:	18a6b03a 	or	r19,r3,r2
    6068:	3924b03a 	or	r18,r7,r4
    606c:	003fe606 	br	6008 <__b2d+0x84>
    6070:	293ffd44 	addi	r4,r5,-11
    6074:	81bffe17 	ldw	r6,-8(r16)
    6078:	80fffe04 	addi	r3,r16,-8
    607c:	203ff11e 	bne	r4,zero,6044 <__b2d+0xc0>
    6080:	accffc34 	orhi	r19,r21,16368
    6084:	3025883a 	mov	r18,r6
    6088:	003fdf06 	br	6008 <__b2d+0x84>
    608c:	18bfff17 	ldw	r2,-4(r3)
    6090:	110cd83a 	srl	r6,r2,r4
    6094:	003fd706 	br	5ff4 <__b2d+0x70>
    6098:	18bfff17 	ldw	r2,-4(r3)
    609c:	114ed83a 	srl	r7,r2,r5
    60a0:	003fec06 	br	6054 <__b2d+0xd0>

000060a4 <__ratio>:
    60a4:	defff904 	addi	sp,sp,-28
    60a8:	dc400215 	stw	r17,8(sp)
    60ac:	2823883a 	mov	r17,r5
    60b0:	d80b883a 	mov	r5,sp
    60b4:	dfc00615 	stw	ra,24(sp)
    60b8:	dd000515 	stw	r20,20(sp)
    60bc:	dcc00415 	stw	r19,16(sp)
    60c0:	dc800315 	stw	r18,12(sp)
    60c4:	2025883a 	mov	r18,r4
    60c8:	0005f840 	call	5f84 <__b2d>
    60cc:	8809883a 	mov	r4,r17
    60d0:	d9400104 	addi	r5,sp,4
    60d4:	1027883a 	mov	r19,r2
    60d8:	1829883a 	mov	r20,r3
    60dc:	0005f840 	call	5f84 <__b2d>
    60e0:	89000417 	ldw	r4,16(r17)
    60e4:	91c00417 	ldw	r7,16(r18)
    60e8:	d9800117 	ldw	r6,4(sp)
    60ec:	180b883a 	mov	r5,r3
    60f0:	390fc83a 	sub	r7,r7,r4
    60f4:	1009883a 	mov	r4,r2
    60f8:	d8800017 	ldw	r2,0(sp)
    60fc:	380e917a 	slli	r7,r7,5
    6100:	2011883a 	mov	r8,r4
    6104:	1185c83a 	sub	r2,r2,r6
    6108:	11c5883a 	add	r2,r2,r7
    610c:	1006953a 	slli	r3,r2,20
    6110:	2813883a 	mov	r9,r5
    6114:	00800d0e 	bge	zero,r2,614c <__ratio+0xa8>
    6118:	1d29883a 	add	r20,r3,r20
    611c:	a00b883a 	mov	r5,r20
    6120:	480f883a 	mov	r7,r9
    6124:	9809883a 	mov	r4,r19
    6128:	400d883a 	mov	r6,r8
    612c:	0008f000 	call	8f00 <__divdf3>
    6130:	dfc00617 	ldw	ra,24(sp)
    6134:	dd000517 	ldw	r20,20(sp)
    6138:	dcc00417 	ldw	r19,16(sp)
    613c:	dc800317 	ldw	r18,12(sp)
    6140:	dc400217 	ldw	r17,8(sp)
    6144:	dec00704 	addi	sp,sp,28
    6148:	f800283a 	ret
    614c:	28d3c83a 	sub	r9,r5,r3
    6150:	003ff206 	br	611c <__ratio+0x78>

00006154 <_mprec_log10>:
    6154:	defffe04 	addi	sp,sp,-8
    6158:	008005c4 	movi	r2,23
    615c:	dc000015 	stw	r16,0(sp)
    6160:	dfc00115 	stw	ra,4(sp)
    6164:	2021883a 	mov	r16,r4
    6168:	11000c16 	blt	r2,r4,619c <_mprec_log10+0x48>
    616c:	200490fa 	slli	r2,r4,3
    6170:	00c00074 	movhi	r3,1
    6174:	18c04a04 	addi	r3,r3,296
    6178:	10c5883a 	add	r2,r2,r3
    617c:	12400117 	ldw	r9,4(r2)
    6180:	12000017 	ldw	r8,0(r2)
    6184:	4807883a 	mov	r3,r9
    6188:	4005883a 	mov	r2,r8
    618c:	dfc00117 	ldw	ra,4(sp)
    6190:	dc000017 	ldw	r16,0(sp)
    6194:	dec00204 	addi	sp,sp,8
    6198:	f800283a 	ret
    619c:	0011883a 	mov	r8,zero
    61a0:	024ffc34 	movhi	r9,16368
    61a4:	0005883a 	mov	r2,zero
    61a8:	00d00934 	movhi	r3,16420
    61ac:	480b883a 	mov	r5,r9
    61b0:	4009883a 	mov	r4,r8
    61b4:	180f883a 	mov	r7,r3
    61b8:	100d883a 	mov	r6,r2
    61bc:	0008b3c0 	call	8b3c <__muldf3>
    61c0:	843fffc4 	addi	r16,r16,-1
    61c4:	1011883a 	mov	r8,r2
    61c8:	1813883a 	mov	r9,r3
    61cc:	803ff51e 	bne	r16,zero,61a4 <_mprec_log10+0x50>
    61d0:	4005883a 	mov	r2,r8
    61d4:	4807883a 	mov	r3,r9
    61d8:	dfc00117 	ldw	ra,4(sp)
    61dc:	dc000017 	ldw	r16,0(sp)
    61e0:	dec00204 	addi	sp,sp,8
    61e4:	f800283a 	ret

000061e8 <__copybits>:
    61e8:	297fffc4 	addi	r5,r5,-1
    61ec:	30800417 	ldw	r2,16(r6)
    61f0:	280bd17a 	srai	r5,r5,5
    61f4:	31800504 	addi	r6,r6,20
    61f8:	1085883a 	add	r2,r2,r2
    61fc:	294b883a 	add	r5,r5,r5
    6200:	294b883a 	add	r5,r5,r5
    6204:	1085883a 	add	r2,r2,r2
    6208:	290b883a 	add	r5,r5,r4
    620c:	3087883a 	add	r3,r6,r2
    6210:	29400104 	addi	r5,r5,4
    6214:	30c0052e 	bgeu	r6,r3,622c <__copybits+0x44>
    6218:	30800017 	ldw	r2,0(r6)
    621c:	31800104 	addi	r6,r6,4
    6220:	20800015 	stw	r2,0(r4)
    6224:	21000104 	addi	r4,r4,4
    6228:	30fffb36 	bltu	r6,r3,6218 <__copybits+0x30>
    622c:	2140032e 	bgeu	r4,r5,623c <__copybits+0x54>
    6230:	20000015 	stw	zero,0(r4)
    6234:	21000104 	addi	r4,r4,4
    6238:	217ffd36 	bltu	r4,r5,6230 <__copybits+0x48>
    623c:	f800283a 	ret

00006240 <__any_on>:
    6240:	20800417 	ldw	r2,16(r4)
    6244:	2807d17a 	srai	r3,r5,5
    6248:	21000504 	addi	r4,r4,20
    624c:	10c00d0e 	bge	r2,r3,6284 <__any_on+0x44>
    6250:	1085883a 	add	r2,r2,r2
    6254:	1085883a 	add	r2,r2,r2
    6258:	208d883a 	add	r6,r4,r2
    625c:	2180182e 	bgeu	r4,r6,62c0 <__any_on+0x80>
    6260:	30bfff17 	ldw	r2,-4(r6)
    6264:	30ffff04 	addi	r3,r6,-4
    6268:	1000041e 	bne	r2,zero,627c <__any_on+0x3c>
    626c:	20c0142e 	bgeu	r4,r3,62c0 <__any_on+0x80>
    6270:	18ffff04 	addi	r3,r3,-4
    6274:	18800017 	ldw	r2,0(r3)
    6278:	103ffc26 	beq	r2,zero,626c <__any_on+0x2c>
    627c:	00800044 	movi	r2,1
    6280:	f800283a 	ret
    6284:	18800a0e 	bge	r3,r2,62b0 <__any_on+0x70>
    6288:	294007cc 	andi	r5,r5,31
    628c:	28000826 	beq	r5,zero,62b0 <__any_on+0x70>
    6290:	18c5883a 	add	r2,r3,r3
    6294:	1085883a 	add	r2,r2,r2
    6298:	208d883a 	add	r6,r4,r2
    629c:	30c00017 	ldw	r3,0(r6)
    62a0:	1944d83a 	srl	r2,r3,r5
    62a4:	1144983a 	sll	r2,r2,r5
    62a8:	18bff41e 	bne	r3,r2,627c <__any_on+0x3c>
    62ac:	003feb06 	br	625c <__any_on+0x1c>
    62b0:	18c5883a 	add	r2,r3,r3
    62b4:	1085883a 	add	r2,r2,r2
    62b8:	208d883a 	add	r6,r4,r2
    62bc:	003fe706 	br	625c <__any_on+0x1c>
    62c0:	0005883a 	mov	r2,zero
    62c4:	f800283a 	ret

000062c8 <_Balloc>:
    62c8:	20c01317 	ldw	r3,76(r4)
    62cc:	defffb04 	addi	sp,sp,-20
    62d0:	dcc00315 	stw	r19,12(sp)
    62d4:	dc800215 	stw	r18,8(sp)
    62d8:	dfc00415 	stw	ra,16(sp)
    62dc:	2825883a 	mov	r18,r5
    62e0:	dc400115 	stw	r17,4(sp)
    62e4:	dc000015 	stw	r16,0(sp)
    62e8:	2027883a 	mov	r19,r4
    62ec:	01800404 	movi	r6,16
    62f0:	01400104 	movi	r5,4
    62f4:	18001726 	beq	r3,zero,6354 <_Balloc+0x8c>
    62f8:	01400044 	movi	r5,1
    62fc:	9485883a 	add	r2,r18,r18
    6300:	2ca2983a 	sll	r17,r5,r18
    6304:	1085883a 	add	r2,r2,r2
    6308:	10c7883a 	add	r3,r2,r3
    630c:	1c000017 	ldw	r16,0(r3)
    6310:	8c4d883a 	add	r6,r17,r17
    6314:	318d883a 	add	r6,r6,r6
    6318:	9809883a 	mov	r4,r19
    631c:	31800504 	addi	r6,r6,20
    6320:	80001226 	beq	r16,zero,636c <_Balloc+0xa4>
    6324:	80800017 	ldw	r2,0(r16)
    6328:	18800015 	stw	r2,0(r3)
    632c:	80000415 	stw	zero,16(r16)
    6330:	80000315 	stw	zero,12(r16)
    6334:	8005883a 	mov	r2,r16
    6338:	dfc00417 	ldw	ra,16(sp)
    633c:	dcc00317 	ldw	r19,12(sp)
    6340:	dc800217 	ldw	r18,8(sp)
    6344:	dc400117 	ldw	r17,4(sp)
    6348:	dc000017 	ldw	r16,0(sp)
    634c:	dec00504 	addi	sp,sp,20
    6350:	f800283a 	ret
    6354:	00076900 	call	7690 <_calloc_r>
    6358:	1007883a 	mov	r3,r2
    635c:	0021883a 	mov	r16,zero
    6360:	98801315 	stw	r2,76(r19)
    6364:	103fe41e 	bne	r2,zero,62f8 <_Balloc+0x30>
    6368:	003ff206 	br	6334 <_Balloc+0x6c>
    636c:	00076900 	call	7690 <_calloc_r>
    6370:	103ff026 	beq	r2,zero,6334 <_Balloc+0x6c>
    6374:	1021883a 	mov	r16,r2
    6378:	14800115 	stw	r18,4(r2)
    637c:	14400215 	stw	r17,8(r2)
    6380:	003fea06 	br	632c <_Balloc+0x64>

00006384 <__d2b>:
    6384:	defff504 	addi	sp,sp,-44
    6388:	dcc00515 	stw	r19,20(sp)
    638c:	04c00044 	movi	r19,1
    6390:	dc000215 	stw	r16,8(sp)
    6394:	2821883a 	mov	r16,r5
    6398:	980b883a 	mov	r5,r19
    639c:	ddc00915 	stw	r23,36(sp)
    63a0:	dd800815 	stw	r22,32(sp)
    63a4:	dd400715 	stw	r21,28(sp)
    63a8:	dd000615 	stw	r20,24(sp)
    63ac:	dc800415 	stw	r18,16(sp)
    63b0:	dc400315 	stw	r17,12(sp)
    63b4:	dfc00a15 	stw	ra,40(sp)
    63b8:	3023883a 	mov	r17,r6
    63bc:	382d883a 	mov	r22,r7
    63c0:	ddc00b17 	ldw	r23,44(sp)
    63c4:	00062c80 	call	62c8 <_Balloc>
    63c8:	1025883a 	mov	r18,r2
    63cc:	00a00034 	movhi	r2,32768
    63d0:	10bfffc4 	addi	r2,r2,-1
    63d4:	8888703a 	and	r4,r17,r2
    63d8:	202ad53a 	srli	r21,r4,20
    63dc:	00800434 	movhi	r2,16
    63e0:	10bfffc4 	addi	r2,r2,-1
    63e4:	8886703a 	and	r3,r17,r2
    63e8:	a829003a 	cmpeq	r20,r21,zero
    63ec:	800b883a 	mov	r5,r16
    63f0:	d8c00115 	stw	r3,4(sp)
    63f4:	94000504 	addi	r16,r18,20
    63f8:	a000021e 	bne	r20,zero,6404 <__d2b+0x80>
    63fc:	18c00434 	orhi	r3,r3,16
    6400:	d8c00115 	stw	r3,4(sp)
    6404:	28002726 	beq	r5,zero,64a4 <__d2b+0x120>
    6408:	d809883a 	mov	r4,sp
    640c:	d9400015 	stw	r5,0(sp)
    6410:	0005de00 	call	5de0 <__lo0bits>
    6414:	100d883a 	mov	r6,r2
    6418:	10003526 	beq	r2,zero,64f0 <__d2b+0x16c>
    641c:	d8c00117 	ldw	r3,4(sp)
    6420:	00800804 	movi	r2,32
    6424:	1185c83a 	sub	r2,r2,r6
    6428:	d9000017 	ldw	r4,0(sp)
    642c:	1886983a 	sll	r3,r3,r2
    6430:	1906b03a 	or	r3,r3,r4
    6434:	90c00515 	stw	r3,20(r18)
    6438:	d8c00117 	ldw	r3,4(sp)
    643c:	1986d83a 	srl	r3,r3,r6
    6440:	d8c00115 	stw	r3,4(sp)
    6444:	180b003a 	cmpeq	r5,r3,zero
    6448:	00800084 	movi	r2,2
    644c:	114bc83a 	sub	r5,r2,r5
    6450:	80c00115 	stw	r3,4(r16)
    6454:	91400415 	stw	r5,16(r18)
    6458:	a0001a1e 	bne	r20,zero,64c4 <__d2b+0x140>
    645c:	3545883a 	add	r2,r6,r21
    6460:	10bef344 	addi	r2,r2,-1075
    6464:	00c00d44 	movi	r3,53
    6468:	b0800015 	stw	r2,0(r22)
    646c:	1987c83a 	sub	r3,r3,r6
    6470:	b8c00015 	stw	r3,0(r23)
    6474:	9005883a 	mov	r2,r18
    6478:	dfc00a17 	ldw	ra,40(sp)
    647c:	ddc00917 	ldw	r23,36(sp)
    6480:	dd800817 	ldw	r22,32(sp)
    6484:	dd400717 	ldw	r21,28(sp)
    6488:	dd000617 	ldw	r20,24(sp)
    648c:	dcc00517 	ldw	r19,20(sp)
    6490:	dc800417 	ldw	r18,16(sp)
    6494:	dc400317 	ldw	r17,12(sp)
    6498:	dc000217 	ldw	r16,8(sp)
    649c:	dec00b04 	addi	sp,sp,44
    64a0:	f800283a 	ret
    64a4:	d9000104 	addi	r4,sp,4
    64a8:	0005de00 	call	5de0 <__lo0bits>
    64ac:	11800804 	addi	r6,r2,32
    64b0:	d8800117 	ldw	r2,4(sp)
    64b4:	94c00415 	stw	r19,16(r18)
    64b8:	980b883a 	mov	r5,r19
    64bc:	90800515 	stw	r2,20(r18)
    64c0:	a03fe626 	beq	r20,zero,645c <__d2b+0xd8>
    64c4:	2945883a 	add	r2,r5,r5
    64c8:	1085883a 	add	r2,r2,r2
    64cc:	1405883a 	add	r2,r2,r16
    64d0:	113fff17 	ldw	r4,-4(r2)
    64d4:	30fef384 	addi	r3,r6,-1074
    64d8:	2820917a 	slli	r16,r5,5
    64dc:	b0c00015 	stw	r3,0(r22)
    64e0:	0005d700 	call	5d70 <__hi0bits>
    64e4:	80a1c83a 	sub	r16,r16,r2
    64e8:	bc000015 	stw	r16,0(r23)
    64ec:	003fe106 	br	6474 <__d2b+0xf0>
    64f0:	d8800017 	ldw	r2,0(sp)
    64f4:	90800515 	stw	r2,20(r18)
    64f8:	d8c00117 	ldw	r3,4(sp)
    64fc:	003fd106 	br	6444 <__d2b+0xc0>

00006500 <__mdiff>:
    6500:	defffb04 	addi	sp,sp,-20
    6504:	dc000015 	stw	r16,0(sp)
    6508:	2821883a 	mov	r16,r5
    650c:	dc800215 	stw	r18,8(sp)
    6510:	300b883a 	mov	r5,r6
    6514:	2025883a 	mov	r18,r4
    6518:	8009883a 	mov	r4,r16
    651c:	dc400115 	stw	r17,4(sp)
    6520:	dfc00415 	stw	ra,16(sp)
    6524:	dcc00315 	stw	r19,12(sp)
    6528:	3023883a 	mov	r17,r6
    652c:	0005ea40 	call	5ea4 <__mcmp>
    6530:	10004226 	beq	r2,zero,663c <__mdiff+0x13c>
    6534:	10005016 	blt	r2,zero,6678 <__mdiff+0x178>
    6538:	0027883a 	mov	r19,zero
    653c:	81400117 	ldw	r5,4(r16)
    6540:	9009883a 	mov	r4,r18
    6544:	00062c80 	call	62c8 <_Balloc>
    6548:	1019883a 	mov	r12,r2
    654c:	82800417 	ldw	r10,16(r16)
    6550:	88800417 	ldw	r2,16(r17)
    6554:	81800504 	addi	r6,r16,20
    6558:	5287883a 	add	r3,r10,r10
    655c:	1085883a 	add	r2,r2,r2
    6560:	18c7883a 	add	r3,r3,r3
    6564:	1085883a 	add	r2,r2,r2
    6568:	8a000504 	addi	r8,r17,20
    656c:	64c00315 	stw	r19,12(r12)
    6570:	30db883a 	add	r13,r6,r3
    6574:	4097883a 	add	r11,r8,r2
    6578:	61c00504 	addi	r7,r12,20
    657c:	0013883a 	mov	r9,zero
    6580:	31000017 	ldw	r4,0(r6)
    6584:	41400017 	ldw	r5,0(r8)
    6588:	42000104 	addi	r8,r8,4
    658c:	20bfffcc 	andi	r2,r4,65535
    6590:	28ffffcc 	andi	r3,r5,65535
    6594:	10c5c83a 	sub	r2,r2,r3
    6598:	1245883a 	add	r2,r2,r9
    659c:	2008d43a 	srli	r4,r4,16
    65a0:	280ad43a 	srli	r5,r5,16
    65a4:	1007d43a 	srai	r3,r2,16
    65a8:	3880000d 	sth	r2,0(r7)
    65ac:	2149c83a 	sub	r4,r4,r5
    65b0:	20c9883a 	add	r4,r4,r3
    65b4:	3900008d 	sth	r4,2(r7)
    65b8:	31800104 	addi	r6,r6,4
    65bc:	39c00104 	addi	r7,r7,4
    65c0:	2013d43a 	srai	r9,r4,16
    65c4:	42ffee36 	bltu	r8,r11,6580 <__mdiff+0x80>
    65c8:	33400c2e 	bgeu	r6,r13,65fc <__mdiff+0xfc>
    65cc:	30800017 	ldw	r2,0(r6)
    65d0:	31800104 	addi	r6,r6,4
    65d4:	10ffffcc 	andi	r3,r2,65535
    65d8:	1a47883a 	add	r3,r3,r9
    65dc:	1004d43a 	srli	r2,r2,16
    65e0:	1809d43a 	srai	r4,r3,16
    65e4:	38c0000d 	sth	r3,0(r7)
    65e8:	1105883a 	add	r2,r2,r4
    65ec:	3880008d 	sth	r2,2(r7)
    65f0:	1013d43a 	srai	r9,r2,16
    65f4:	39c00104 	addi	r7,r7,4
    65f8:	337ff436 	bltu	r6,r13,65cc <__mdiff+0xcc>
    65fc:	38bfff17 	ldw	r2,-4(r7)
    6600:	38ffff04 	addi	r3,r7,-4
    6604:	1000041e 	bne	r2,zero,6618 <__mdiff+0x118>
    6608:	18ffff04 	addi	r3,r3,-4
    660c:	18800017 	ldw	r2,0(r3)
    6610:	52bfffc4 	addi	r10,r10,-1
    6614:	103ffc26 	beq	r2,zero,6608 <__mdiff+0x108>
    6618:	6005883a 	mov	r2,r12
    661c:	62800415 	stw	r10,16(r12)
    6620:	dfc00417 	ldw	ra,16(sp)
    6624:	dcc00317 	ldw	r19,12(sp)
    6628:	dc800217 	ldw	r18,8(sp)
    662c:	dc400117 	ldw	r17,4(sp)
    6630:	dc000017 	ldw	r16,0(sp)
    6634:	dec00504 	addi	sp,sp,20
    6638:	f800283a 	ret
    663c:	9009883a 	mov	r4,r18
    6640:	000b883a 	mov	r5,zero
    6644:	00062c80 	call	62c8 <_Balloc>
    6648:	1019883a 	mov	r12,r2
    664c:	00800044 	movi	r2,1
    6650:	60800415 	stw	r2,16(r12)
    6654:	6005883a 	mov	r2,r12
    6658:	60000515 	stw	zero,20(r12)
    665c:	dfc00417 	ldw	ra,16(sp)
    6660:	dcc00317 	ldw	r19,12(sp)
    6664:	dc800217 	ldw	r18,8(sp)
    6668:	dc400117 	ldw	r17,4(sp)
    666c:	dc000017 	ldw	r16,0(sp)
    6670:	dec00504 	addi	sp,sp,20
    6674:	f800283a 	ret
    6678:	880d883a 	mov	r6,r17
    667c:	04c00044 	movi	r19,1
    6680:	8023883a 	mov	r17,r16
    6684:	3021883a 	mov	r16,r6
    6688:	003fac06 	br	653c <__mdiff+0x3c>

0000668c <__lshift>:
    668c:	defff904 	addi	sp,sp,-28
    6690:	28800417 	ldw	r2,16(r5)
    6694:	dc000015 	stw	r16,0(sp)
    6698:	3021d17a 	srai	r16,r6,5
    669c:	28c00217 	ldw	r3,8(r5)
    66a0:	10800044 	addi	r2,r2,1
    66a4:	dc400115 	stw	r17,4(sp)
    66a8:	80a3883a 	add	r17,r16,r2
    66ac:	dd400515 	stw	r21,20(sp)
    66b0:	dd000415 	stw	r20,16(sp)
    66b4:	dc800215 	stw	r18,8(sp)
    66b8:	dfc00615 	stw	ra,24(sp)
    66bc:	2825883a 	mov	r18,r5
    66c0:	dcc00315 	stw	r19,12(sp)
    66c4:	3029883a 	mov	r20,r6
    66c8:	202b883a 	mov	r21,r4
    66cc:	29400117 	ldw	r5,4(r5)
    66d0:	1c40030e 	bge	r3,r17,66e0 <__lshift+0x54>
    66d4:	18c7883a 	add	r3,r3,r3
    66d8:	29400044 	addi	r5,r5,1
    66dc:	1c7ffd16 	blt	r3,r17,66d4 <__lshift+0x48>
    66e0:	a809883a 	mov	r4,r21
    66e4:	00062c80 	call	62c8 <_Balloc>
    66e8:	1027883a 	mov	r19,r2
    66ec:	11400504 	addi	r5,r2,20
    66f0:	0400090e 	bge	zero,r16,6718 <__lshift+0x8c>
    66f4:	2805883a 	mov	r2,r5
    66f8:	0007883a 	mov	r3,zero
    66fc:	18c00044 	addi	r3,r3,1
    6700:	10000015 	stw	zero,0(r2)
    6704:	10800104 	addi	r2,r2,4
    6708:	80fffc1e 	bne	r16,r3,66fc <__lshift+0x70>
    670c:	8405883a 	add	r2,r16,r16
    6710:	1085883a 	add	r2,r2,r2
    6714:	288b883a 	add	r5,r5,r2
    6718:	90800417 	ldw	r2,16(r18)
    671c:	91000504 	addi	r4,r18,20
    6720:	a18007cc 	andi	r6,r20,31
    6724:	1085883a 	add	r2,r2,r2
    6728:	1085883a 	add	r2,r2,r2
    672c:	208f883a 	add	r7,r4,r2
    6730:	30001e26 	beq	r6,zero,67ac <__lshift+0x120>
    6734:	00800804 	movi	r2,32
    6738:	1191c83a 	sub	r8,r2,r6
    673c:	0007883a 	mov	r3,zero
    6740:	20800017 	ldw	r2,0(r4)
    6744:	1184983a 	sll	r2,r2,r6
    6748:	1884b03a 	or	r2,r3,r2
    674c:	28800015 	stw	r2,0(r5)
    6750:	20c00017 	ldw	r3,0(r4)
    6754:	21000104 	addi	r4,r4,4
    6758:	29400104 	addi	r5,r5,4
    675c:	1a06d83a 	srl	r3,r3,r8
    6760:	21fff736 	bltu	r4,r7,6740 <__lshift+0xb4>
    6764:	28c00015 	stw	r3,0(r5)
    6768:	18000126 	beq	r3,zero,6770 <__lshift+0xe4>
    676c:	8c400044 	addi	r17,r17,1
    6770:	88bfffc4 	addi	r2,r17,-1
    6774:	98800415 	stw	r2,16(r19)
    6778:	a809883a 	mov	r4,r21
    677c:	900b883a 	mov	r5,r18
    6780:	0005d480 	call	5d48 <_Bfree>
    6784:	9805883a 	mov	r2,r19
    6788:	dfc00617 	ldw	ra,24(sp)
    678c:	dd400517 	ldw	r21,20(sp)
    6790:	dd000417 	ldw	r20,16(sp)
    6794:	dcc00317 	ldw	r19,12(sp)
    6798:	dc800217 	ldw	r18,8(sp)
    679c:	dc400117 	ldw	r17,4(sp)
    67a0:	dc000017 	ldw	r16,0(sp)
    67a4:	dec00704 	addi	sp,sp,28
    67a8:	f800283a 	ret
    67ac:	20800017 	ldw	r2,0(r4)
    67b0:	21000104 	addi	r4,r4,4
    67b4:	28800015 	stw	r2,0(r5)
    67b8:	29400104 	addi	r5,r5,4
    67bc:	21ffec2e 	bgeu	r4,r7,6770 <__lshift+0xe4>
    67c0:	20800017 	ldw	r2,0(r4)
    67c4:	21000104 	addi	r4,r4,4
    67c8:	28800015 	stw	r2,0(r5)
    67cc:	29400104 	addi	r5,r5,4
    67d0:	21fff636 	bltu	r4,r7,67ac <__lshift+0x120>
    67d4:	003fe606 	br	6770 <__lshift+0xe4>

000067d8 <__multiply>:
    67d8:	defff904 	addi	sp,sp,-28
    67dc:	dcc00315 	stw	r19,12(sp)
    67e0:	dc800215 	stw	r18,8(sp)
    67e4:	2cc00417 	ldw	r19,16(r5)
    67e8:	34800417 	ldw	r18,16(r6)
    67ec:	dd000415 	stw	r20,16(sp)
    67f0:	dc400115 	stw	r17,4(sp)
    67f4:	dfc00615 	stw	ra,24(sp)
    67f8:	dd400515 	stw	r21,20(sp)
    67fc:	dc000015 	stw	r16,0(sp)
    6800:	2823883a 	mov	r17,r5
    6804:	3029883a 	mov	r20,r6
    6808:	9c80040e 	bge	r19,r18,681c <__multiply+0x44>
    680c:	9027883a 	mov	r19,r18
    6810:	2c800417 	ldw	r18,16(r5)
    6814:	2829883a 	mov	r20,r5
    6818:	3023883a 	mov	r17,r6
    681c:	88800217 	ldw	r2,8(r17)
    6820:	9ca1883a 	add	r16,r19,r18
    6824:	89400117 	ldw	r5,4(r17)
    6828:	1400010e 	bge	r2,r16,6830 <__multiply+0x58>
    682c:	29400044 	addi	r5,r5,1
    6830:	00062c80 	call	62c8 <_Balloc>
    6834:	102b883a 	mov	r21,r2
    6838:	8405883a 	add	r2,r16,r16
    683c:	1085883a 	add	r2,r2,r2
    6840:	a9000504 	addi	r4,r21,20
    6844:	209d883a 	add	r14,r4,r2
    6848:	2380042e 	bgeu	r4,r14,685c <__multiply+0x84>
    684c:	2005883a 	mov	r2,r4
    6850:	10000015 	stw	zero,0(r2)
    6854:	10800104 	addi	r2,r2,4
    6858:	13bffd36 	bltu	r2,r14,6850 <__multiply+0x78>
    685c:	9485883a 	add	r2,r18,r18
    6860:	9cc7883a 	add	r3,r19,r19
    6864:	a1800504 	addi	r6,r20,20
    6868:	1085883a 	add	r2,r2,r2
    686c:	8b400504 	addi	r13,r17,20
    6870:	18c7883a 	add	r3,r3,r3
    6874:	309f883a 	add	r15,r6,r2
    6878:	68d7883a 	add	r11,r13,r3
    687c:	33c03b2e 	bgeu	r6,r15,696c <__multiply+0x194>
    6880:	2019883a 	mov	r12,r4
    6884:	30800017 	ldw	r2,0(r6)
    6888:	127fffcc 	andi	r9,r2,65535
    688c:	48001826 	beq	r9,zero,68f0 <__multiply+0x118>
    6890:	6811883a 	mov	r8,r13
    6894:	600f883a 	mov	r7,r12
    6898:	0015883a 	mov	r10,zero
    689c:	40c00017 	ldw	r3,0(r8)
    68a0:	39400017 	ldw	r5,0(r7)
    68a4:	42000104 	addi	r8,r8,4
    68a8:	193fffcc 	andi	r4,r3,65535
    68ac:	4909383a 	mul	r4,r9,r4
    68b0:	1806d43a 	srli	r3,r3,16
    68b4:	28bfffcc 	andi	r2,r5,65535
    68b8:	5085883a 	add	r2,r10,r2
    68bc:	2089883a 	add	r4,r4,r2
    68c0:	48c7383a 	mul	r3,r9,r3
    68c4:	280ad43a 	srli	r5,r5,16
    68c8:	2004d43a 	srli	r2,r4,16
    68cc:	3900000d 	sth	r4,0(r7)
    68d0:	1947883a 	add	r3,r3,r5
    68d4:	10c5883a 	add	r2,r2,r3
    68d8:	3880008d 	sth	r2,2(r7)
    68dc:	1014d43a 	srli	r10,r2,16
    68e0:	39c00104 	addi	r7,r7,4
    68e4:	42ffed36 	bltu	r8,r11,689c <__multiply+0xc4>
    68e8:	3a800015 	stw	r10,0(r7)
    68ec:	30800017 	ldw	r2,0(r6)
    68f0:	1012d43a 	srli	r9,r2,16
    68f4:	48001926 	beq	r9,zero,695c <__multiply+0x184>
    68f8:	60800017 	ldw	r2,0(r12)
    68fc:	6811883a 	mov	r8,r13
    6900:	600f883a 	mov	r7,r12
    6904:	0015883a 	mov	r10,zero
    6908:	100b883a 	mov	r5,r2
    690c:	41000017 	ldw	r4,0(r8)
    6910:	2806d43a 	srli	r3,r5,16
    6914:	3880000d 	sth	r2,0(r7)
    6918:	20bfffcc 	andi	r2,r4,65535
    691c:	4885383a 	mul	r2,r9,r2
    6920:	50c7883a 	add	r3,r10,r3
    6924:	2008d43a 	srli	r4,r4,16
    6928:	10c5883a 	add	r2,r2,r3
    692c:	3880008d 	sth	r2,2(r7)
    6930:	39c00104 	addi	r7,r7,4
    6934:	39400017 	ldw	r5,0(r7)
    6938:	4909383a 	mul	r4,r9,r4
    693c:	1004d43a 	srli	r2,r2,16
    6940:	28ffffcc 	andi	r3,r5,65535
    6944:	20c9883a 	add	r4,r4,r3
    6948:	1105883a 	add	r2,r2,r4
    694c:	42000104 	addi	r8,r8,4
    6950:	1014d43a 	srli	r10,r2,16
    6954:	42ffed36 	bltu	r8,r11,690c <__multiply+0x134>
    6958:	38800015 	stw	r2,0(r7)
    695c:	31800104 	addi	r6,r6,4
    6960:	33c0022e 	bgeu	r6,r15,696c <__multiply+0x194>
    6964:	63000104 	addi	r12,r12,4
    6968:	003fc606 	br	6884 <__multiply+0xac>
    696c:	0400090e 	bge	zero,r16,6994 <__multiply+0x1bc>
    6970:	70bfff17 	ldw	r2,-4(r14)
    6974:	70ffff04 	addi	r3,r14,-4
    6978:	10000326 	beq	r2,zero,6988 <__multiply+0x1b0>
    697c:	00000506 	br	6994 <__multiply+0x1bc>
    6980:	18800017 	ldw	r2,0(r3)
    6984:	1000031e 	bne	r2,zero,6994 <__multiply+0x1bc>
    6988:	843fffc4 	addi	r16,r16,-1
    698c:	18ffff04 	addi	r3,r3,-4
    6990:	803ffb1e 	bne	r16,zero,6980 <__multiply+0x1a8>
    6994:	a805883a 	mov	r2,r21
    6998:	ac000415 	stw	r16,16(r21)
    699c:	dfc00617 	ldw	ra,24(sp)
    69a0:	dd400517 	ldw	r21,20(sp)
    69a4:	dd000417 	ldw	r20,16(sp)
    69a8:	dcc00317 	ldw	r19,12(sp)
    69ac:	dc800217 	ldw	r18,8(sp)
    69b0:	dc400117 	ldw	r17,4(sp)
    69b4:	dc000017 	ldw	r16,0(sp)
    69b8:	dec00704 	addi	sp,sp,28
    69bc:	f800283a 	ret

000069c0 <__i2b>:
    69c0:	defffd04 	addi	sp,sp,-12
    69c4:	dc000015 	stw	r16,0(sp)
    69c8:	04000044 	movi	r16,1
    69cc:	dc800115 	stw	r18,4(sp)
    69d0:	2825883a 	mov	r18,r5
    69d4:	800b883a 	mov	r5,r16
    69d8:	dfc00215 	stw	ra,8(sp)
    69dc:	00062c80 	call	62c8 <_Balloc>
    69e0:	14000415 	stw	r16,16(r2)
    69e4:	14800515 	stw	r18,20(r2)
    69e8:	dfc00217 	ldw	ra,8(sp)
    69ec:	dc800117 	ldw	r18,4(sp)
    69f0:	dc000017 	ldw	r16,0(sp)
    69f4:	dec00304 	addi	sp,sp,12
    69f8:	f800283a 	ret

000069fc <__multadd>:
    69fc:	defffa04 	addi	sp,sp,-24
    6a00:	dc800215 	stw	r18,8(sp)
    6a04:	2c800417 	ldw	r18,16(r5)
    6a08:	dd000415 	stw	r20,16(sp)
    6a0c:	dcc00315 	stw	r19,12(sp)
    6a10:	dc000015 	stw	r16,0(sp)
    6a14:	dfc00515 	stw	ra,20(sp)
    6a18:	3821883a 	mov	r16,r7
    6a1c:	dc400115 	stw	r17,4(sp)
    6a20:	2827883a 	mov	r19,r5
    6a24:	2029883a 	mov	r20,r4
    6a28:	2a000504 	addi	r8,r5,20
    6a2c:	000f883a 	mov	r7,zero
    6a30:	40800017 	ldw	r2,0(r8)
    6a34:	39c00044 	addi	r7,r7,1
    6a38:	10ffffcc 	andi	r3,r2,65535
    6a3c:	1987383a 	mul	r3,r3,r6
    6a40:	1004d43a 	srli	r2,r2,16
    6a44:	1c07883a 	add	r3,r3,r16
    6a48:	180ad43a 	srli	r5,r3,16
    6a4c:	1185383a 	mul	r2,r2,r6
    6a50:	18ffffcc 	andi	r3,r3,65535
    6a54:	1145883a 	add	r2,r2,r5
    6a58:	1008943a 	slli	r4,r2,16
    6a5c:	1020d43a 	srli	r16,r2,16
    6a60:	20c9883a 	add	r4,r4,r3
    6a64:	41000015 	stw	r4,0(r8)
    6a68:	42000104 	addi	r8,r8,4
    6a6c:	3cbff016 	blt	r7,r18,6a30 <__multadd+0x34>
    6a70:	80000826 	beq	r16,zero,6a94 <__multadd+0x98>
    6a74:	98800217 	ldw	r2,8(r19)
    6a78:	90800f0e 	bge	r18,r2,6ab8 <__multadd+0xbc>
    6a7c:	9485883a 	add	r2,r18,r18
    6a80:	1085883a 	add	r2,r2,r2
    6a84:	14c5883a 	add	r2,r2,r19
    6a88:	90c00044 	addi	r3,r18,1
    6a8c:	14000515 	stw	r16,20(r2)
    6a90:	98c00415 	stw	r3,16(r19)
    6a94:	9805883a 	mov	r2,r19
    6a98:	dfc00517 	ldw	ra,20(sp)
    6a9c:	dd000417 	ldw	r20,16(sp)
    6aa0:	dcc00317 	ldw	r19,12(sp)
    6aa4:	dc800217 	ldw	r18,8(sp)
    6aa8:	dc400117 	ldw	r17,4(sp)
    6aac:	dc000017 	ldw	r16,0(sp)
    6ab0:	dec00604 	addi	sp,sp,24
    6ab4:	f800283a 	ret
    6ab8:	99400117 	ldw	r5,4(r19)
    6abc:	a009883a 	mov	r4,r20
    6ac0:	29400044 	addi	r5,r5,1
    6ac4:	00062c80 	call	62c8 <_Balloc>
    6ac8:	99800417 	ldw	r6,16(r19)
    6acc:	99400304 	addi	r5,r19,12
    6ad0:	11000304 	addi	r4,r2,12
    6ad4:	318d883a 	add	r6,r6,r6
    6ad8:	318d883a 	add	r6,r6,r6
    6adc:	31800204 	addi	r6,r6,8
    6ae0:	1023883a 	mov	r17,r2
    6ae4:	0005b300 	call	5b30 <memcpy>
    6ae8:	980b883a 	mov	r5,r19
    6aec:	a009883a 	mov	r4,r20
    6af0:	0005d480 	call	5d48 <_Bfree>
    6af4:	8827883a 	mov	r19,r17
    6af8:	003fe006 	br	6a7c <__multadd+0x80>

00006afc <__pow5mult>:
    6afc:	defffa04 	addi	sp,sp,-24
    6b00:	308000cc 	andi	r2,r6,3
    6b04:	dd000415 	stw	r20,16(sp)
    6b08:	dcc00315 	stw	r19,12(sp)
    6b0c:	dc000015 	stw	r16,0(sp)
    6b10:	dfc00515 	stw	ra,20(sp)
    6b14:	dc800215 	stw	r18,8(sp)
    6b18:	dc400115 	stw	r17,4(sp)
    6b1c:	3021883a 	mov	r16,r6
    6b20:	2027883a 	mov	r19,r4
    6b24:	2829883a 	mov	r20,r5
    6b28:	10002b1e 	bne	r2,zero,6bd8 <__pow5mult+0xdc>
    6b2c:	8025d0ba 	srai	r18,r16,2
    6b30:	90001b26 	beq	r18,zero,6ba0 <__pow5mult+0xa4>
    6b34:	9c001217 	ldw	r16,72(r19)
    6b38:	8000081e 	bne	r16,zero,6b5c <__pow5mult+0x60>
    6b3c:	00003006 	br	6c00 <__pow5mult+0x104>
    6b40:	800b883a 	mov	r5,r16
    6b44:	800d883a 	mov	r6,r16
    6b48:	9809883a 	mov	r4,r19
    6b4c:	90001426 	beq	r18,zero,6ba0 <__pow5mult+0xa4>
    6b50:	80800017 	ldw	r2,0(r16)
    6b54:	10001b26 	beq	r2,zero,6bc4 <__pow5mult+0xc8>
    6b58:	1021883a 	mov	r16,r2
    6b5c:	9080004c 	andi	r2,r18,1
    6b60:	1005003a 	cmpeq	r2,r2,zero
    6b64:	9025d07a 	srai	r18,r18,1
    6b68:	800d883a 	mov	r6,r16
    6b6c:	9809883a 	mov	r4,r19
    6b70:	a00b883a 	mov	r5,r20
    6b74:	103ff21e 	bne	r2,zero,6b40 <__pow5mult+0x44>
    6b78:	00067d80 	call	67d8 <__multiply>
    6b7c:	a00b883a 	mov	r5,r20
    6b80:	9809883a 	mov	r4,r19
    6b84:	1023883a 	mov	r17,r2
    6b88:	0005d480 	call	5d48 <_Bfree>
    6b8c:	8829883a 	mov	r20,r17
    6b90:	800b883a 	mov	r5,r16
    6b94:	800d883a 	mov	r6,r16
    6b98:	9809883a 	mov	r4,r19
    6b9c:	903fec1e 	bne	r18,zero,6b50 <__pow5mult+0x54>
    6ba0:	a005883a 	mov	r2,r20
    6ba4:	dfc00517 	ldw	ra,20(sp)
    6ba8:	dd000417 	ldw	r20,16(sp)
    6bac:	dcc00317 	ldw	r19,12(sp)
    6bb0:	dc800217 	ldw	r18,8(sp)
    6bb4:	dc400117 	ldw	r17,4(sp)
    6bb8:	dc000017 	ldw	r16,0(sp)
    6bbc:	dec00604 	addi	sp,sp,24
    6bc0:	f800283a 	ret
    6bc4:	00067d80 	call	67d8 <__multiply>
    6bc8:	80800015 	stw	r2,0(r16)
    6bcc:	1021883a 	mov	r16,r2
    6bd0:	10000015 	stw	zero,0(r2)
    6bd4:	003fe106 	br	6b5c <__pow5mult+0x60>
    6bd8:	1085883a 	add	r2,r2,r2
    6bdc:	00c00074 	movhi	r3,1
    6be0:	18c09004 	addi	r3,r3,576
    6be4:	1085883a 	add	r2,r2,r2
    6be8:	10c5883a 	add	r2,r2,r3
    6bec:	11bfff17 	ldw	r6,-4(r2)
    6bf0:	000f883a 	mov	r7,zero
    6bf4:	00069fc0 	call	69fc <__multadd>
    6bf8:	1029883a 	mov	r20,r2
    6bfc:	003fcb06 	br	6b2c <__pow5mult+0x30>
    6c00:	9809883a 	mov	r4,r19
    6c04:	01409c44 	movi	r5,625
    6c08:	00069c00 	call	69c0 <__i2b>
    6c0c:	98801215 	stw	r2,72(r19)
    6c10:	1021883a 	mov	r16,r2
    6c14:	10000015 	stw	zero,0(r2)
    6c18:	003fd006 	br	6b5c <__pow5mult+0x60>

00006c1c <__s2b>:
    6c1c:	defff904 	addi	sp,sp,-28
    6c20:	dcc00315 	stw	r19,12(sp)
    6c24:	dc800215 	stw	r18,8(sp)
    6c28:	2827883a 	mov	r19,r5
    6c2c:	2025883a 	mov	r18,r4
    6c30:	01400244 	movi	r5,9
    6c34:	39000204 	addi	r4,r7,8
    6c38:	dd000415 	stw	r20,16(sp)
    6c3c:	dc400115 	stw	r17,4(sp)
    6c40:	dfc00615 	stw	ra,24(sp)
    6c44:	dd400515 	stw	r21,20(sp)
    6c48:	dc000015 	stw	r16,0(sp)
    6c4c:	3829883a 	mov	r20,r7
    6c50:	3023883a 	mov	r17,r6
    6c54:	00006c80 	call	6c8 <__divsi3>
    6c58:	00c00044 	movi	r3,1
    6c5c:	1880350e 	bge	r3,r2,6d34 <__s2b+0x118>
    6c60:	000b883a 	mov	r5,zero
    6c64:	18c7883a 	add	r3,r3,r3
    6c68:	29400044 	addi	r5,r5,1
    6c6c:	18bffd16 	blt	r3,r2,6c64 <__s2b+0x48>
    6c70:	9009883a 	mov	r4,r18
    6c74:	00062c80 	call	62c8 <_Balloc>
    6c78:	1011883a 	mov	r8,r2
    6c7c:	d8800717 	ldw	r2,28(sp)
    6c80:	00c00044 	movi	r3,1
    6c84:	01800244 	movi	r6,9
    6c88:	40800515 	stw	r2,20(r8)
    6c8c:	40c00415 	stw	r3,16(r8)
    6c90:	3440260e 	bge	r6,r17,6d2c <__s2b+0x110>
    6c94:	3021883a 	mov	r16,r6
    6c98:	99ab883a 	add	r21,r19,r6
    6c9c:	9c05883a 	add	r2,r19,r16
    6ca0:	11c00007 	ldb	r7,0(r2)
    6ca4:	400b883a 	mov	r5,r8
    6ca8:	9009883a 	mov	r4,r18
    6cac:	39fff404 	addi	r7,r7,-48
    6cb0:	01800284 	movi	r6,10
    6cb4:	00069fc0 	call	69fc <__multadd>
    6cb8:	84000044 	addi	r16,r16,1
    6cbc:	1011883a 	mov	r8,r2
    6cc0:	8c3ff61e 	bne	r17,r16,6c9c <__s2b+0x80>
    6cc4:	ac45883a 	add	r2,r21,r17
    6cc8:	117ffe04 	addi	r5,r2,-8
    6ccc:	880d883a 	mov	r6,r17
    6cd0:	35000c0e 	bge	r6,r20,6d04 <__s2b+0xe8>
    6cd4:	a185c83a 	sub	r2,r20,r6
    6cd8:	2821883a 	mov	r16,r5
    6cdc:	28a3883a 	add	r17,r5,r2
    6ce0:	81c00007 	ldb	r7,0(r16)
    6ce4:	400b883a 	mov	r5,r8
    6ce8:	9009883a 	mov	r4,r18
    6cec:	39fff404 	addi	r7,r7,-48
    6cf0:	01800284 	movi	r6,10
    6cf4:	00069fc0 	call	69fc <__multadd>
    6cf8:	84000044 	addi	r16,r16,1
    6cfc:	1011883a 	mov	r8,r2
    6d00:	847ff71e 	bne	r16,r17,6ce0 <__s2b+0xc4>
    6d04:	4005883a 	mov	r2,r8
    6d08:	dfc00617 	ldw	ra,24(sp)
    6d0c:	dd400517 	ldw	r21,20(sp)
    6d10:	dd000417 	ldw	r20,16(sp)
    6d14:	dcc00317 	ldw	r19,12(sp)
    6d18:	dc800217 	ldw	r18,8(sp)
    6d1c:	dc400117 	ldw	r17,4(sp)
    6d20:	dc000017 	ldw	r16,0(sp)
    6d24:	dec00704 	addi	sp,sp,28
    6d28:	f800283a 	ret
    6d2c:	99400284 	addi	r5,r19,10
    6d30:	003fe706 	br	6cd0 <__s2b+0xb4>
    6d34:	000b883a 	mov	r5,zero
    6d38:	003fcd06 	br	6c70 <__s2b+0x54>

00006d3c <_realloc_r>:
    6d3c:	defff404 	addi	sp,sp,-48
    6d40:	dd800815 	stw	r22,32(sp)
    6d44:	dc800415 	stw	r18,16(sp)
    6d48:	dc400315 	stw	r17,12(sp)
    6d4c:	dfc00b15 	stw	ra,44(sp)
    6d50:	df000a15 	stw	fp,40(sp)
    6d54:	ddc00915 	stw	r23,36(sp)
    6d58:	dd400715 	stw	r21,28(sp)
    6d5c:	dd000615 	stw	r20,24(sp)
    6d60:	dcc00515 	stw	r19,20(sp)
    6d64:	dc000215 	stw	r16,8(sp)
    6d68:	2825883a 	mov	r18,r5
    6d6c:	3023883a 	mov	r17,r6
    6d70:	202d883a 	mov	r22,r4
    6d74:	2800c926 	beq	r5,zero,709c <_realloc_r+0x360>
    6d78:	000a4140 	call	a414 <__malloc_lock>
    6d7c:	943ffe04 	addi	r16,r18,-8
    6d80:	88c002c4 	addi	r3,r17,11
    6d84:	00800584 	movi	r2,22
    6d88:	82000117 	ldw	r8,4(r16)
    6d8c:	10c01b2e 	bgeu	r2,r3,6dfc <_realloc_r+0xc0>
    6d90:	00bffe04 	movi	r2,-8
    6d94:	188e703a 	and	r7,r3,r2
    6d98:	3839883a 	mov	fp,r7
    6d9c:	38001a16 	blt	r7,zero,6e08 <_realloc_r+0xcc>
    6da0:	e4401936 	bltu	fp,r17,6e08 <_realloc_r+0xcc>
    6da4:	013fff04 	movi	r4,-4
    6da8:	4126703a 	and	r19,r8,r4
    6dac:	99c02616 	blt	r19,r7,6e48 <_realloc_r+0x10c>
    6db0:	802b883a 	mov	r21,r16
    6db4:	9829883a 	mov	r20,r19
    6db8:	84000204 	addi	r16,r16,8
    6dbc:	a80f883a 	mov	r7,r21
    6dc0:	a70dc83a 	sub	r6,r20,fp
    6dc4:	008003c4 	movi	r2,15
    6dc8:	1180c136 	bltu	r2,r6,70d0 <_realloc_r+0x394>
    6dcc:	38800117 	ldw	r2,4(r7)
    6dd0:	a549883a 	add	r4,r20,r21
    6dd4:	1080004c 	andi	r2,r2,1
    6dd8:	a084b03a 	or	r2,r20,r2
    6ddc:	38800115 	stw	r2,4(r7)
    6de0:	20c00117 	ldw	r3,4(r4)
    6de4:	18c00054 	ori	r3,r3,1
    6de8:	20c00115 	stw	r3,4(r4)
    6dec:	b009883a 	mov	r4,r22
    6df0:	000a4340 	call	a434 <__malloc_unlock>
    6df4:	8023883a 	mov	r17,r16
    6df8:	00000606 	br	6e14 <_realloc_r+0xd8>
    6dfc:	01c00404 	movi	r7,16
    6e00:	3839883a 	mov	fp,r7
    6e04:	e47fe72e 	bgeu	fp,r17,6da4 <_realloc_r+0x68>
    6e08:	00800304 	movi	r2,12
    6e0c:	0023883a 	mov	r17,zero
    6e10:	b0800015 	stw	r2,0(r22)
    6e14:	8805883a 	mov	r2,r17
    6e18:	dfc00b17 	ldw	ra,44(sp)
    6e1c:	df000a17 	ldw	fp,40(sp)
    6e20:	ddc00917 	ldw	r23,36(sp)
    6e24:	dd800817 	ldw	r22,32(sp)
    6e28:	dd400717 	ldw	r21,28(sp)
    6e2c:	dd000617 	ldw	r20,24(sp)
    6e30:	dcc00517 	ldw	r19,20(sp)
    6e34:	dc800417 	ldw	r18,16(sp)
    6e38:	dc400317 	ldw	r17,12(sp)
    6e3c:	dc000217 	ldw	r16,8(sp)
    6e40:	dec00c04 	addi	sp,sp,48
    6e44:	f800283a 	ret
    6e48:	00800074 	movhi	r2,1
    6e4c:	1081e804 	addi	r2,r2,1952
    6e50:	12400217 	ldw	r9,8(r2)
    6e54:	84cd883a 	add	r6,r16,r19
    6e58:	802b883a 	mov	r21,r16
    6e5c:	3240b926 	beq	r6,r9,7144 <_realloc_r+0x408>
    6e60:	31400117 	ldw	r5,4(r6)
    6e64:	00bfff84 	movi	r2,-2
    6e68:	2884703a 	and	r2,r5,r2
    6e6c:	1185883a 	add	r2,r2,r6
    6e70:	10c00117 	ldw	r3,4(r2)
    6e74:	18c0004c 	andi	r3,r3,1
    6e78:	1807003a 	cmpeq	r3,r3,zero
    6e7c:	1800a326 	beq	r3,zero,710c <_realloc_r+0x3d0>
    6e80:	2908703a 	and	r4,r5,r4
    6e84:	9929883a 	add	r20,r19,r4
    6e88:	a1c0a30e 	bge	r20,r7,7118 <_realloc_r+0x3dc>
    6e8c:	4080004c 	andi	r2,r8,1
    6e90:	1000551e 	bne	r2,zero,6fe8 <_realloc_r+0x2ac>
    6e94:	80800017 	ldw	r2,0(r16)
    6e98:	80afc83a 	sub	r23,r16,r2
    6e9c:	b8c00117 	ldw	r3,4(r23)
    6ea0:	00bfff04 	movi	r2,-4
    6ea4:	1884703a 	and	r2,r3,r2
    6ea8:	30002e26 	beq	r6,zero,6f64 <_realloc_r+0x228>
    6eac:	3240b926 	beq	r6,r9,7194 <_realloc_r+0x458>
    6eb0:	98a9883a 	add	r20,r19,r2
    6eb4:	2509883a 	add	r4,r4,r20
    6eb8:	d9000015 	stw	r4,0(sp)
    6ebc:	21c02a16 	blt	r4,r7,6f68 <_realloc_r+0x22c>
    6ec0:	30800317 	ldw	r2,12(r6)
    6ec4:	30c00217 	ldw	r3,8(r6)
    6ec8:	01400904 	movi	r5,36
    6ecc:	99bfff04 	addi	r6,r19,-4
    6ed0:	18800315 	stw	r2,12(r3)
    6ed4:	10c00215 	stw	r3,8(r2)
    6ed8:	b9000317 	ldw	r4,12(r23)
    6edc:	b8800217 	ldw	r2,8(r23)
    6ee0:	b82b883a 	mov	r21,r23
    6ee4:	bc000204 	addi	r16,r23,8
    6ee8:	20800215 	stw	r2,8(r4)
    6eec:	11000315 	stw	r4,12(r2)
    6ef0:	2980e436 	bltu	r5,r6,7284 <_realloc_r+0x548>
    6ef4:	008004c4 	movi	r2,19
    6ef8:	9009883a 	mov	r4,r18
    6efc:	8011883a 	mov	r8,r16
    6f00:	11800f2e 	bgeu	r2,r6,6f40 <_realloc_r+0x204>
    6f04:	90800017 	ldw	r2,0(r18)
    6f08:	ba000404 	addi	r8,r23,16
    6f0c:	91000204 	addi	r4,r18,8
    6f10:	b8800215 	stw	r2,8(r23)
    6f14:	90c00117 	ldw	r3,4(r18)
    6f18:	008006c4 	movi	r2,27
    6f1c:	b8c00315 	stw	r3,12(r23)
    6f20:	1180072e 	bgeu	r2,r6,6f40 <_realloc_r+0x204>
    6f24:	90c00217 	ldw	r3,8(r18)
    6f28:	ba000604 	addi	r8,r23,24
    6f2c:	91000404 	addi	r4,r18,16
    6f30:	b8c00415 	stw	r3,16(r23)
    6f34:	90800317 	ldw	r2,12(r18)
    6f38:	b8800515 	stw	r2,20(r23)
    6f3c:	3140e726 	beq	r6,r5,72dc <_realloc_r+0x5a0>
    6f40:	20800017 	ldw	r2,0(r4)
    6f44:	dd000017 	ldw	r20,0(sp)
    6f48:	b80f883a 	mov	r7,r23
    6f4c:	40800015 	stw	r2,0(r8)
    6f50:	20c00117 	ldw	r3,4(r4)
    6f54:	40c00115 	stw	r3,4(r8)
    6f58:	20800217 	ldw	r2,8(r4)
    6f5c:	40800215 	stw	r2,8(r8)
    6f60:	003f9706 	br	6dc0 <_realloc_r+0x84>
    6f64:	98a9883a 	add	r20,r19,r2
    6f68:	a1c01f16 	blt	r20,r7,6fe8 <_realloc_r+0x2ac>
    6f6c:	b8c00317 	ldw	r3,12(r23)
    6f70:	b8800217 	ldw	r2,8(r23)
    6f74:	99bfff04 	addi	r6,r19,-4
    6f78:	01400904 	movi	r5,36
    6f7c:	b82b883a 	mov	r21,r23
    6f80:	18800215 	stw	r2,8(r3)
    6f84:	10c00315 	stw	r3,12(r2)
    6f88:	bc000204 	addi	r16,r23,8
    6f8c:	2980c336 	bltu	r5,r6,729c <_realloc_r+0x560>
    6f90:	008004c4 	movi	r2,19
    6f94:	9009883a 	mov	r4,r18
    6f98:	8011883a 	mov	r8,r16
    6f9c:	11800f2e 	bgeu	r2,r6,6fdc <_realloc_r+0x2a0>
    6fa0:	90800017 	ldw	r2,0(r18)
    6fa4:	ba000404 	addi	r8,r23,16
    6fa8:	91000204 	addi	r4,r18,8
    6fac:	b8800215 	stw	r2,8(r23)
    6fb0:	90c00117 	ldw	r3,4(r18)
    6fb4:	008006c4 	movi	r2,27
    6fb8:	b8c00315 	stw	r3,12(r23)
    6fbc:	1180072e 	bgeu	r2,r6,6fdc <_realloc_r+0x2a0>
    6fc0:	90c00217 	ldw	r3,8(r18)
    6fc4:	ba000604 	addi	r8,r23,24
    6fc8:	91000404 	addi	r4,r18,16
    6fcc:	b8c00415 	stw	r3,16(r23)
    6fd0:	90800317 	ldw	r2,12(r18)
    6fd4:	b8800515 	stw	r2,20(r23)
    6fd8:	3140c726 	beq	r6,r5,72f8 <_realloc_r+0x5bc>
    6fdc:	20800017 	ldw	r2,0(r4)
    6fe0:	b80f883a 	mov	r7,r23
    6fe4:	003fd906 	br	6f4c <_realloc_r+0x210>
    6fe8:	880b883a 	mov	r5,r17
    6fec:	b009883a 	mov	r4,r22
    6ff0:	000530c0 	call	530c <_malloc_r>
    6ff4:	1023883a 	mov	r17,r2
    6ff8:	10002526 	beq	r2,zero,7090 <_realloc_r+0x354>
    6ffc:	80800117 	ldw	r2,4(r16)
    7000:	00ffff84 	movi	r3,-2
    7004:	893ffe04 	addi	r4,r17,-8
    7008:	10c4703a 	and	r2,r2,r3
    700c:	8085883a 	add	r2,r16,r2
    7010:	20809526 	beq	r4,r2,7268 <_realloc_r+0x52c>
    7014:	99bfff04 	addi	r6,r19,-4
    7018:	01c00904 	movi	r7,36
    701c:	39804536 	bltu	r7,r6,7134 <_realloc_r+0x3f8>
    7020:	008004c4 	movi	r2,19
    7024:	9009883a 	mov	r4,r18
    7028:	880b883a 	mov	r5,r17
    702c:	11800f2e 	bgeu	r2,r6,706c <_realloc_r+0x330>
    7030:	90800017 	ldw	r2,0(r18)
    7034:	89400204 	addi	r5,r17,8
    7038:	91000204 	addi	r4,r18,8
    703c:	88800015 	stw	r2,0(r17)
    7040:	90c00117 	ldw	r3,4(r18)
    7044:	008006c4 	movi	r2,27
    7048:	88c00115 	stw	r3,4(r17)
    704c:	1180072e 	bgeu	r2,r6,706c <_realloc_r+0x330>
    7050:	90c00217 	ldw	r3,8(r18)
    7054:	89400404 	addi	r5,r17,16
    7058:	91000404 	addi	r4,r18,16
    705c:	88c00215 	stw	r3,8(r17)
    7060:	90800317 	ldw	r2,12(r18)
    7064:	88800315 	stw	r2,12(r17)
    7068:	31c09126 	beq	r6,r7,72b0 <_realloc_r+0x574>
    706c:	20800017 	ldw	r2,0(r4)
    7070:	28800015 	stw	r2,0(r5)
    7074:	20c00117 	ldw	r3,4(r4)
    7078:	28c00115 	stw	r3,4(r5)
    707c:	20800217 	ldw	r2,8(r4)
    7080:	28800215 	stw	r2,8(r5)
    7084:	900b883a 	mov	r5,r18
    7088:	b009883a 	mov	r4,r22
    708c:	00047840 	call	4784 <_free_r>
    7090:	b009883a 	mov	r4,r22
    7094:	000a4340 	call	a434 <__malloc_unlock>
    7098:	003f5e06 	br	6e14 <_realloc_r+0xd8>
    709c:	300b883a 	mov	r5,r6
    70a0:	dfc00b17 	ldw	ra,44(sp)
    70a4:	df000a17 	ldw	fp,40(sp)
    70a8:	ddc00917 	ldw	r23,36(sp)
    70ac:	dd800817 	ldw	r22,32(sp)
    70b0:	dd400717 	ldw	r21,28(sp)
    70b4:	dd000617 	ldw	r20,24(sp)
    70b8:	dcc00517 	ldw	r19,20(sp)
    70bc:	dc800417 	ldw	r18,16(sp)
    70c0:	dc400317 	ldw	r17,12(sp)
    70c4:	dc000217 	ldw	r16,8(sp)
    70c8:	dec00c04 	addi	sp,sp,48
    70cc:	000530c1 	jmpi	530c <_malloc_r>
    70d0:	38800117 	ldw	r2,4(r7)
    70d4:	e54b883a 	add	r5,fp,r21
    70d8:	31000054 	ori	r4,r6,1
    70dc:	1080004c 	andi	r2,r2,1
    70e0:	1704b03a 	or	r2,r2,fp
    70e4:	38800115 	stw	r2,4(r7)
    70e8:	29000115 	stw	r4,4(r5)
    70ec:	2987883a 	add	r3,r5,r6
    70f0:	18800117 	ldw	r2,4(r3)
    70f4:	29400204 	addi	r5,r5,8
    70f8:	b009883a 	mov	r4,r22
    70fc:	10800054 	ori	r2,r2,1
    7100:	18800115 	stw	r2,4(r3)
    7104:	00047840 	call	4784 <_free_r>
    7108:	003f3806 	br	6dec <_realloc_r+0xb0>
    710c:	000d883a 	mov	r6,zero
    7110:	0009883a 	mov	r4,zero
    7114:	003f5d06 	br	6e8c <_realloc_r+0x150>
    7118:	30c00217 	ldw	r3,8(r6)
    711c:	30800317 	ldw	r2,12(r6)
    7120:	800f883a 	mov	r7,r16
    7124:	84000204 	addi	r16,r16,8
    7128:	10c00215 	stw	r3,8(r2)
    712c:	18800315 	stw	r2,12(r3)
    7130:	003f2306 	br	6dc0 <_realloc_r+0x84>
    7134:	8809883a 	mov	r4,r17
    7138:	900b883a 	mov	r5,r18
    713c:	0005bd00 	call	5bd0 <memmove>
    7140:	003fd006 	br	7084 <_realloc_r+0x348>
    7144:	30800117 	ldw	r2,4(r6)
    7148:	e0c00404 	addi	r3,fp,16
    714c:	1108703a 	and	r4,r2,r4
    7150:	9905883a 	add	r2,r19,r4
    7154:	10ff4d16 	blt	r2,r3,6e8c <_realloc_r+0x150>
    7158:	1705c83a 	sub	r2,r2,fp
    715c:	870b883a 	add	r5,r16,fp
    7160:	10800054 	ori	r2,r2,1
    7164:	28800115 	stw	r2,4(r5)
    7168:	80c00117 	ldw	r3,4(r16)
    716c:	00800074 	movhi	r2,1
    7170:	1081e804 	addi	r2,r2,1952
    7174:	b009883a 	mov	r4,r22
    7178:	18c0004c 	andi	r3,r3,1
    717c:	e0c6b03a 	or	r3,fp,r3
    7180:	11400215 	stw	r5,8(r2)
    7184:	80c00115 	stw	r3,4(r16)
    7188:	000a4340 	call	a434 <__malloc_unlock>
    718c:	84400204 	addi	r17,r16,8
    7190:	003f2006 	br	6e14 <_realloc_r+0xd8>
    7194:	98a9883a 	add	r20,r19,r2
    7198:	2509883a 	add	r4,r4,r20
    719c:	e0800404 	addi	r2,fp,16
    71a0:	d9000115 	stw	r4,4(sp)
    71a4:	20bf7016 	blt	r4,r2,6f68 <_realloc_r+0x22c>
    71a8:	b8c00317 	ldw	r3,12(r23)
    71ac:	b8800217 	ldw	r2,8(r23)
    71b0:	99bfff04 	addi	r6,r19,-4
    71b4:	01400904 	movi	r5,36
    71b8:	18800215 	stw	r2,8(r3)
    71bc:	10c00315 	stw	r3,12(r2)
    71c0:	bc400204 	addi	r17,r23,8
    71c4:	29804136 	bltu	r5,r6,72cc <_realloc_r+0x590>
    71c8:	008004c4 	movi	r2,19
    71cc:	9009883a 	mov	r4,r18
    71d0:	880f883a 	mov	r7,r17
    71d4:	11800f2e 	bgeu	r2,r6,7214 <_realloc_r+0x4d8>
    71d8:	90800017 	ldw	r2,0(r18)
    71dc:	b9c00404 	addi	r7,r23,16
    71e0:	91000204 	addi	r4,r18,8
    71e4:	b8800215 	stw	r2,8(r23)
    71e8:	90c00117 	ldw	r3,4(r18)
    71ec:	008006c4 	movi	r2,27
    71f0:	b8c00315 	stw	r3,12(r23)
    71f4:	1180072e 	bgeu	r2,r6,7214 <_realloc_r+0x4d8>
    71f8:	90c00217 	ldw	r3,8(r18)
    71fc:	b9c00604 	addi	r7,r23,24
    7200:	91000404 	addi	r4,r18,16
    7204:	b8c00415 	stw	r3,16(r23)
    7208:	90800317 	ldw	r2,12(r18)
    720c:	b8800515 	stw	r2,20(r23)
    7210:	31404026 	beq	r6,r5,7314 <_realloc_r+0x5d8>
    7214:	20800017 	ldw	r2,0(r4)
    7218:	38800015 	stw	r2,0(r7)
    721c:	20c00117 	ldw	r3,4(r4)
    7220:	38c00115 	stw	r3,4(r7)
    7224:	20800217 	ldw	r2,8(r4)
    7228:	38800215 	stw	r2,8(r7)
    722c:	d8c00117 	ldw	r3,4(sp)
    7230:	bf0b883a 	add	r5,r23,fp
    7234:	b009883a 	mov	r4,r22
    7238:	1f05c83a 	sub	r2,r3,fp
    723c:	10800054 	ori	r2,r2,1
    7240:	28800115 	stw	r2,4(r5)
    7244:	b8c00117 	ldw	r3,4(r23)
    7248:	00800074 	movhi	r2,1
    724c:	1081e804 	addi	r2,r2,1952
    7250:	11400215 	stw	r5,8(r2)
    7254:	18c0004c 	andi	r3,r3,1
    7258:	e0c6b03a 	or	r3,fp,r3
    725c:	b8c00115 	stw	r3,4(r23)
    7260:	000a4340 	call	a434 <__malloc_unlock>
    7264:	003eeb06 	br	6e14 <_realloc_r+0xd8>
    7268:	20800117 	ldw	r2,4(r4)
    726c:	00ffff04 	movi	r3,-4
    7270:	800f883a 	mov	r7,r16
    7274:	10c4703a 	and	r2,r2,r3
    7278:	98a9883a 	add	r20,r19,r2
    727c:	84000204 	addi	r16,r16,8
    7280:	003ecf06 	br	6dc0 <_realloc_r+0x84>
    7284:	900b883a 	mov	r5,r18
    7288:	8009883a 	mov	r4,r16
    728c:	0005bd00 	call	5bd0 <memmove>
    7290:	dd000017 	ldw	r20,0(sp)
    7294:	b80f883a 	mov	r7,r23
    7298:	003ec906 	br	6dc0 <_realloc_r+0x84>
    729c:	900b883a 	mov	r5,r18
    72a0:	8009883a 	mov	r4,r16
    72a4:	0005bd00 	call	5bd0 <memmove>
    72a8:	b80f883a 	mov	r7,r23
    72ac:	003ec406 	br	6dc0 <_realloc_r+0x84>
    72b0:	90c00417 	ldw	r3,16(r18)
    72b4:	89400604 	addi	r5,r17,24
    72b8:	91000604 	addi	r4,r18,24
    72bc:	88c00415 	stw	r3,16(r17)
    72c0:	90800517 	ldw	r2,20(r18)
    72c4:	88800515 	stw	r2,20(r17)
    72c8:	003f6806 	br	706c <_realloc_r+0x330>
    72cc:	900b883a 	mov	r5,r18
    72d0:	8809883a 	mov	r4,r17
    72d4:	0005bd00 	call	5bd0 <memmove>
    72d8:	003fd406 	br	722c <_realloc_r+0x4f0>
    72dc:	90c00417 	ldw	r3,16(r18)
    72e0:	91000604 	addi	r4,r18,24
    72e4:	ba000804 	addi	r8,r23,32
    72e8:	b8c00615 	stw	r3,24(r23)
    72ec:	90800517 	ldw	r2,20(r18)
    72f0:	b8800715 	stw	r2,28(r23)
    72f4:	003f1206 	br	6f40 <_realloc_r+0x204>
    72f8:	90c00417 	ldw	r3,16(r18)
    72fc:	91000604 	addi	r4,r18,24
    7300:	ba000804 	addi	r8,r23,32
    7304:	b8c00615 	stw	r3,24(r23)
    7308:	90800517 	ldw	r2,20(r18)
    730c:	b8800715 	stw	r2,28(r23)
    7310:	003f3206 	br	6fdc <_realloc_r+0x2a0>
    7314:	90c00417 	ldw	r3,16(r18)
    7318:	91000604 	addi	r4,r18,24
    731c:	b9c00804 	addi	r7,r23,32
    7320:	b8c00615 	stw	r3,24(r23)
    7324:	90800517 	ldw	r2,20(r18)
    7328:	b8800715 	stw	r2,28(r23)
    732c:	003fb906 	br	7214 <_realloc_r+0x4d8>

00007330 <__isinfd>:
    7330:	200d883a 	mov	r6,r4
    7334:	0109c83a 	sub	r4,zero,r4
    7338:	2188b03a 	or	r4,r4,r6
    733c:	2008d7fa 	srli	r4,r4,31
    7340:	00a00034 	movhi	r2,32768
    7344:	10bfffc4 	addi	r2,r2,-1
    7348:	1144703a 	and	r2,r2,r5
    734c:	2088b03a 	or	r4,r4,r2
    7350:	009ffc34 	movhi	r2,32752
    7354:	1105c83a 	sub	r2,r2,r4
    7358:	0087c83a 	sub	r3,zero,r2
    735c:	10c4b03a 	or	r2,r2,r3
    7360:	1004d7fa 	srli	r2,r2,31
    7364:	00c00044 	movi	r3,1
    7368:	1885c83a 	sub	r2,r3,r2
    736c:	f800283a 	ret

00007370 <__isnand>:
    7370:	200d883a 	mov	r6,r4
    7374:	0109c83a 	sub	r4,zero,r4
    7378:	2188b03a 	or	r4,r4,r6
    737c:	2008d7fa 	srli	r4,r4,31
    7380:	00a00034 	movhi	r2,32768
    7384:	10bfffc4 	addi	r2,r2,-1
    7388:	1144703a 	and	r2,r2,r5
    738c:	2088b03a 	or	r4,r4,r2
    7390:	009ffc34 	movhi	r2,32752
    7394:	1105c83a 	sub	r2,r2,r4
    7398:	1004d7fa 	srli	r2,r2,31
    739c:	f800283a 	ret

000073a0 <_sbrk_r>:
    73a0:	defffd04 	addi	sp,sp,-12
    73a4:	dc000015 	stw	r16,0(sp)
    73a8:	04000074 	movhi	r16,1
    73ac:	84078704 	addi	r16,r16,7708
    73b0:	dc400115 	stw	r17,4(sp)
    73b4:	80000015 	stw	zero,0(r16)
    73b8:	2023883a 	mov	r17,r4
    73bc:	2809883a 	mov	r4,r5
    73c0:	dfc00215 	stw	ra,8(sp)
    73c4:	000a6340 	call	a634 <sbrk>
    73c8:	1007883a 	mov	r3,r2
    73cc:	00bfffc4 	movi	r2,-1
    73d0:	18800626 	beq	r3,r2,73ec <_sbrk_r+0x4c>
    73d4:	1805883a 	mov	r2,r3
    73d8:	dfc00217 	ldw	ra,8(sp)
    73dc:	dc400117 	ldw	r17,4(sp)
    73e0:	dc000017 	ldw	r16,0(sp)
    73e4:	dec00304 	addi	sp,sp,12
    73e8:	f800283a 	ret
    73ec:	80800017 	ldw	r2,0(r16)
    73f0:	103ff826 	beq	r2,zero,73d4 <_sbrk_r+0x34>
    73f4:	88800015 	stw	r2,0(r17)
    73f8:	1805883a 	mov	r2,r3
    73fc:	dfc00217 	ldw	ra,8(sp)
    7400:	dc400117 	ldw	r17,4(sp)
    7404:	dc000017 	ldw	r16,0(sp)
    7408:	dec00304 	addi	sp,sp,12
    740c:	f800283a 	ret

00007410 <__sclose>:
    7410:	2940038f 	ldh	r5,14(r5)
    7414:	00077441 	jmpi	7744 <_close_r>

00007418 <__sseek>:
    7418:	defffe04 	addi	sp,sp,-8
    741c:	dc000015 	stw	r16,0(sp)
    7420:	2821883a 	mov	r16,r5
    7424:	2940038f 	ldh	r5,14(r5)
    7428:	dfc00115 	stw	ra,4(sp)
    742c:	00079bc0 	call	79bc <_lseek_r>
    7430:	1007883a 	mov	r3,r2
    7434:	00bfffc4 	movi	r2,-1
    7438:	18800926 	beq	r3,r2,7460 <__sseek+0x48>
    743c:	8080030b 	ldhu	r2,12(r16)
    7440:	80c01415 	stw	r3,80(r16)
    7444:	10840014 	ori	r2,r2,4096
    7448:	8080030d 	sth	r2,12(r16)
    744c:	1805883a 	mov	r2,r3
    7450:	dfc00117 	ldw	ra,4(sp)
    7454:	dc000017 	ldw	r16,0(sp)
    7458:	dec00204 	addi	sp,sp,8
    745c:	f800283a 	ret
    7460:	8080030b 	ldhu	r2,12(r16)
    7464:	10bbffcc 	andi	r2,r2,61439
    7468:	8080030d 	sth	r2,12(r16)
    746c:	1805883a 	mov	r2,r3
    7470:	dfc00117 	ldw	ra,4(sp)
    7474:	dc000017 	ldw	r16,0(sp)
    7478:	dec00204 	addi	sp,sp,8
    747c:	f800283a 	ret

00007480 <__swrite>:
    7480:	2880030b 	ldhu	r2,12(r5)
    7484:	defffb04 	addi	sp,sp,-20
    7488:	dcc00315 	stw	r19,12(sp)
    748c:	1080400c 	andi	r2,r2,256
    7490:	dc800215 	stw	r18,8(sp)
    7494:	dc400115 	stw	r17,4(sp)
    7498:	dc000015 	stw	r16,0(sp)
    749c:	3027883a 	mov	r19,r6
    74a0:	3825883a 	mov	r18,r7
    74a4:	dfc00415 	stw	ra,16(sp)
    74a8:	2821883a 	mov	r16,r5
    74ac:	000d883a 	mov	r6,zero
    74b0:	01c00084 	movi	r7,2
    74b4:	2023883a 	mov	r17,r4
    74b8:	10000226 	beq	r2,zero,74c4 <__swrite+0x44>
    74bc:	2940038f 	ldh	r5,14(r5)
    74c0:	00079bc0 	call	79bc <_lseek_r>
    74c4:	8080030b 	ldhu	r2,12(r16)
    74c8:	8140038f 	ldh	r5,14(r16)
    74cc:	8809883a 	mov	r4,r17
    74d0:	10bbffcc 	andi	r2,r2,61439
    74d4:	980d883a 	mov	r6,r19
    74d8:	900f883a 	mov	r7,r18
    74dc:	8080030d 	sth	r2,12(r16)
    74e0:	dfc00417 	ldw	ra,16(sp)
    74e4:	dcc00317 	ldw	r19,12(sp)
    74e8:	dc800217 	ldw	r18,8(sp)
    74ec:	dc400117 	ldw	r17,4(sp)
    74f0:	dc000017 	ldw	r16,0(sp)
    74f4:	dec00504 	addi	sp,sp,20
    74f8:	00076181 	jmpi	7618 <_write_r>

000074fc <__sread>:
    74fc:	defffe04 	addi	sp,sp,-8
    7500:	dc000015 	stw	r16,0(sp)
    7504:	2821883a 	mov	r16,r5
    7508:	2940038f 	ldh	r5,14(r5)
    750c:	dfc00115 	stw	ra,4(sp)
    7510:	0007a340 	call	7a34 <_read_r>
    7514:	1007883a 	mov	r3,r2
    7518:	10000816 	blt	r2,zero,753c <__sread+0x40>
    751c:	80801417 	ldw	r2,80(r16)
    7520:	10c5883a 	add	r2,r2,r3
    7524:	80801415 	stw	r2,80(r16)
    7528:	1805883a 	mov	r2,r3
    752c:	dfc00117 	ldw	ra,4(sp)
    7530:	dc000017 	ldw	r16,0(sp)
    7534:	dec00204 	addi	sp,sp,8
    7538:	f800283a 	ret
    753c:	8080030b 	ldhu	r2,12(r16)
    7540:	10bbffcc 	andi	r2,r2,61439
    7544:	8080030d 	sth	r2,12(r16)
    7548:	1805883a 	mov	r2,r3
    754c:	dfc00117 	ldw	ra,4(sp)
    7550:	dc000017 	ldw	r16,0(sp)
    7554:	dec00204 	addi	sp,sp,8
    7558:	f800283a 	ret

0000755c <strcmp>:
    755c:	2144b03a 	or	r2,r4,r5
    7560:	108000cc 	andi	r2,r2,3
    7564:	10001d1e 	bne	r2,zero,75dc <strcmp+0x80>
    7568:	200f883a 	mov	r7,r4
    756c:	28800017 	ldw	r2,0(r5)
    7570:	21000017 	ldw	r4,0(r4)
    7574:	280d883a 	mov	r6,r5
    7578:	2080161e 	bne	r4,r2,75d4 <strcmp+0x78>
    757c:	023fbff4 	movhi	r8,65279
    7580:	423fbfc4 	addi	r8,r8,-257
    7584:	2207883a 	add	r3,r4,r8
    7588:	01602074 	movhi	r5,32897
    758c:	29602004 	addi	r5,r5,-32640
    7590:	1946703a 	and	r3,r3,r5
    7594:	0104303a 	nor	r2,zero,r4
    7598:	10c4703a 	and	r2,r2,r3
    759c:	10001c1e 	bne	r2,zero,7610 <strcmp+0xb4>
    75a0:	4013883a 	mov	r9,r8
    75a4:	2811883a 	mov	r8,r5
    75a8:	00000106 	br	75b0 <strcmp+0x54>
    75ac:	1800181e 	bne	r3,zero,7610 <strcmp+0xb4>
    75b0:	39c00104 	addi	r7,r7,4
    75b4:	39000017 	ldw	r4,0(r7)
    75b8:	31800104 	addi	r6,r6,4
    75bc:	31400017 	ldw	r5,0(r6)
    75c0:	2245883a 	add	r2,r4,r9
    75c4:	1204703a 	and	r2,r2,r8
    75c8:	0106303a 	nor	r3,zero,r4
    75cc:	1886703a 	and	r3,r3,r2
    75d0:	217ff626 	beq	r4,r5,75ac <strcmp+0x50>
    75d4:	3809883a 	mov	r4,r7
    75d8:	300b883a 	mov	r5,r6
    75dc:	20c00007 	ldb	r3,0(r4)
    75e0:	1800051e 	bne	r3,zero,75f8 <strcmp+0x9c>
    75e4:	00000606 	br	7600 <strcmp+0xa4>
    75e8:	21000044 	addi	r4,r4,1
    75ec:	20c00007 	ldb	r3,0(r4)
    75f0:	29400044 	addi	r5,r5,1
    75f4:	18000226 	beq	r3,zero,7600 <strcmp+0xa4>
    75f8:	28800007 	ldb	r2,0(r5)
    75fc:	18bffa26 	beq	r3,r2,75e8 <strcmp+0x8c>
    7600:	20c00003 	ldbu	r3,0(r4)
    7604:	28800003 	ldbu	r2,0(r5)
    7608:	1885c83a 	sub	r2,r3,r2
    760c:	f800283a 	ret
    7610:	0005883a 	mov	r2,zero
    7614:	f800283a 	ret

00007618 <_write_r>:
    7618:	defffd04 	addi	sp,sp,-12
    761c:	dc000015 	stw	r16,0(sp)
    7620:	04000074 	movhi	r16,1
    7624:	84078704 	addi	r16,r16,7708
    7628:	dc400115 	stw	r17,4(sp)
    762c:	80000015 	stw	zero,0(r16)
    7630:	2023883a 	mov	r17,r4
    7634:	2809883a 	mov	r4,r5
    7638:	300b883a 	mov	r5,r6
    763c:	380d883a 	mov	r6,r7
    7640:	dfc00215 	stw	ra,8(sp)
    7644:	000a6f00 	call	a6f0 <write>
    7648:	1007883a 	mov	r3,r2
    764c:	00bfffc4 	movi	r2,-1
    7650:	18800626 	beq	r3,r2,766c <_write_r+0x54>
    7654:	1805883a 	mov	r2,r3
    7658:	dfc00217 	ldw	ra,8(sp)
    765c:	dc400117 	ldw	r17,4(sp)
    7660:	dc000017 	ldw	r16,0(sp)
    7664:	dec00304 	addi	sp,sp,12
    7668:	f800283a 	ret
    766c:	80800017 	ldw	r2,0(r16)
    7670:	103ff826 	beq	r2,zero,7654 <_write_r+0x3c>
    7674:	88800015 	stw	r2,0(r17)
    7678:	1805883a 	mov	r2,r3
    767c:	dfc00217 	ldw	ra,8(sp)
    7680:	dc400117 	ldw	r17,4(sp)
    7684:	dc000017 	ldw	r16,0(sp)
    7688:	dec00304 	addi	sp,sp,12
    768c:	f800283a 	ret

00007690 <_calloc_r>:
    7690:	298b383a 	mul	r5,r5,r6
    7694:	defffe04 	addi	sp,sp,-8
    7698:	dc000015 	stw	r16,0(sp)
    769c:	dfc00115 	stw	ra,4(sp)
    76a0:	000530c0 	call	530c <_malloc_r>
    76a4:	1021883a 	mov	r16,r2
    76a8:	01c00904 	movi	r7,36
    76ac:	10000d26 	beq	r2,zero,76e4 <_calloc_r+0x54>
    76b0:	10ffff17 	ldw	r3,-4(r2)
    76b4:	1009883a 	mov	r4,r2
    76b8:	00bfff04 	movi	r2,-4
    76bc:	1886703a 	and	r3,r3,r2
    76c0:	1887883a 	add	r3,r3,r2
    76c4:	180d883a 	mov	r6,r3
    76c8:	000b883a 	mov	r5,zero
    76cc:	38c01736 	bltu	r7,r3,772c <_calloc_r+0x9c>
    76d0:	008004c4 	movi	r2,19
    76d4:	10c00836 	bltu	r2,r3,76f8 <_calloc_r+0x68>
    76d8:	20000215 	stw	zero,8(r4)
    76dc:	20000015 	stw	zero,0(r4)
    76e0:	20000115 	stw	zero,4(r4)
    76e4:	8005883a 	mov	r2,r16
    76e8:	dfc00117 	ldw	ra,4(sp)
    76ec:	dc000017 	ldw	r16,0(sp)
    76f0:	dec00204 	addi	sp,sp,8
    76f4:	f800283a 	ret
    76f8:	008006c4 	movi	r2,27
    76fc:	80000015 	stw	zero,0(r16)
    7700:	80000115 	stw	zero,4(r16)
    7704:	81000204 	addi	r4,r16,8
    7708:	10fff32e 	bgeu	r2,r3,76d8 <_calloc_r+0x48>
    770c:	80000215 	stw	zero,8(r16)
    7710:	80000315 	stw	zero,12(r16)
    7714:	81000404 	addi	r4,r16,16
    7718:	19ffef1e 	bne	r3,r7,76d8 <_calloc_r+0x48>
    771c:	81000604 	addi	r4,r16,24
    7720:	80000415 	stw	zero,16(r16)
    7724:	80000515 	stw	zero,20(r16)
    7728:	003feb06 	br	76d8 <_calloc_r+0x48>
    772c:	0005cb00 	call	5cb0 <memset>
    7730:	8005883a 	mov	r2,r16
    7734:	dfc00117 	ldw	ra,4(sp)
    7738:	dc000017 	ldw	r16,0(sp)
    773c:	dec00204 	addi	sp,sp,8
    7740:	f800283a 	ret

00007744 <_close_r>:
    7744:	defffd04 	addi	sp,sp,-12
    7748:	dc000015 	stw	r16,0(sp)
    774c:	04000074 	movhi	r16,1
    7750:	84078704 	addi	r16,r16,7708
    7754:	dc400115 	stw	r17,4(sp)
    7758:	80000015 	stw	zero,0(r16)
    775c:	2023883a 	mov	r17,r4
    7760:	2809883a 	mov	r4,r5
    7764:	dfc00215 	stw	ra,8(sp)
    7768:	0009d900 	call	9d90 <close>
    776c:	1007883a 	mov	r3,r2
    7770:	00bfffc4 	movi	r2,-1
    7774:	18800626 	beq	r3,r2,7790 <_close_r+0x4c>
    7778:	1805883a 	mov	r2,r3
    777c:	dfc00217 	ldw	ra,8(sp)
    7780:	dc400117 	ldw	r17,4(sp)
    7784:	dc000017 	ldw	r16,0(sp)
    7788:	dec00304 	addi	sp,sp,12
    778c:	f800283a 	ret
    7790:	80800017 	ldw	r2,0(r16)
    7794:	103ff826 	beq	r2,zero,7778 <_close_r+0x34>
    7798:	88800015 	stw	r2,0(r17)
    779c:	1805883a 	mov	r2,r3
    77a0:	dfc00217 	ldw	ra,8(sp)
    77a4:	dc400117 	ldw	r17,4(sp)
    77a8:	dc000017 	ldw	r16,0(sp)
    77ac:	dec00304 	addi	sp,sp,12
    77b0:	f800283a 	ret

000077b4 <_fclose_r>:
    77b4:	defffc04 	addi	sp,sp,-16
    77b8:	dc400115 	stw	r17,4(sp)
    77bc:	dc000015 	stw	r16,0(sp)
    77c0:	dfc00315 	stw	ra,12(sp)
    77c4:	dc800215 	stw	r18,8(sp)
    77c8:	2821883a 	mov	r16,r5
    77cc:	2023883a 	mov	r17,r4
    77d0:	28002926 	beq	r5,zero,7878 <_fclose_r+0xc4>
    77d4:	00043f00 	call	43f0 <__sfp_lock_acquire>
    77d8:	88000226 	beq	r17,zero,77e4 <_fclose_r+0x30>
    77dc:	88800e17 	ldw	r2,56(r17)
    77e0:	10002d26 	beq	r2,zero,7898 <_fclose_r+0xe4>
    77e4:	8080030f 	ldh	r2,12(r16)
    77e8:	10002226 	beq	r2,zero,7874 <_fclose_r+0xc0>
    77ec:	8809883a 	mov	r4,r17
    77f0:	800b883a 	mov	r5,r16
    77f4:	00041680 	call	4168 <_fflush_r>
    77f8:	1025883a 	mov	r18,r2
    77fc:	80800b17 	ldw	r2,44(r16)
    7800:	10000426 	beq	r2,zero,7814 <_fclose_r+0x60>
    7804:	81400717 	ldw	r5,28(r16)
    7808:	8809883a 	mov	r4,r17
    780c:	103ee83a 	callr	r2
    7810:	10002a16 	blt	r2,zero,78bc <_fclose_r+0x108>
    7814:	8080030b 	ldhu	r2,12(r16)
    7818:	1080200c 	andi	r2,r2,128
    781c:	1000231e 	bne	r2,zero,78ac <_fclose_r+0xf8>
    7820:	81400c17 	ldw	r5,48(r16)
    7824:	28000526 	beq	r5,zero,783c <_fclose_r+0x88>
    7828:	80801004 	addi	r2,r16,64
    782c:	28800226 	beq	r5,r2,7838 <_fclose_r+0x84>
    7830:	8809883a 	mov	r4,r17
    7834:	00047840 	call	4784 <_free_r>
    7838:	80000c15 	stw	zero,48(r16)
    783c:	81401117 	ldw	r5,68(r16)
    7840:	28000326 	beq	r5,zero,7850 <_fclose_r+0x9c>
    7844:	8809883a 	mov	r4,r17
    7848:	00047840 	call	4784 <_free_r>
    784c:	80001115 	stw	zero,68(r16)
    7850:	8000030d 	sth	zero,12(r16)
    7854:	00043f40 	call	43f4 <__sfp_lock_release>
    7858:	9005883a 	mov	r2,r18
    785c:	dfc00317 	ldw	ra,12(sp)
    7860:	dc800217 	ldw	r18,8(sp)
    7864:	dc400117 	ldw	r17,4(sp)
    7868:	dc000017 	ldw	r16,0(sp)
    786c:	dec00404 	addi	sp,sp,16
    7870:	f800283a 	ret
    7874:	00043f40 	call	43f4 <__sfp_lock_release>
    7878:	0025883a 	mov	r18,zero
    787c:	9005883a 	mov	r2,r18
    7880:	dfc00317 	ldw	ra,12(sp)
    7884:	dc800217 	ldw	r18,8(sp)
    7888:	dc400117 	ldw	r17,4(sp)
    788c:	dc000017 	ldw	r16,0(sp)
    7890:	dec00404 	addi	sp,sp,16
    7894:	f800283a 	ret
    7898:	8809883a 	mov	r4,r17
    789c:	00044000 	call	4400 <__sinit>
    78a0:	8080030f 	ldh	r2,12(r16)
    78a4:	103fd11e 	bne	r2,zero,77ec <_fclose_r+0x38>
    78a8:	003ff206 	br	7874 <_fclose_r+0xc0>
    78ac:	81400417 	ldw	r5,16(r16)
    78b0:	8809883a 	mov	r4,r17
    78b4:	00047840 	call	4784 <_free_r>
    78b8:	003fd906 	br	7820 <_fclose_r+0x6c>
    78bc:	04bfffc4 	movi	r18,-1
    78c0:	003fd406 	br	7814 <_fclose_r+0x60>

000078c4 <fclose>:
    78c4:	00800074 	movhi	r2,1
    78c8:	10876c04 	addi	r2,r2,7600
    78cc:	200b883a 	mov	r5,r4
    78d0:	11000017 	ldw	r4,0(r2)
    78d4:	00077b41 	jmpi	77b4 <_fclose_r>

000078d8 <_fstat_r>:
    78d8:	defffd04 	addi	sp,sp,-12
    78dc:	dc000015 	stw	r16,0(sp)
    78e0:	04000074 	movhi	r16,1
    78e4:	84078704 	addi	r16,r16,7708
    78e8:	dc400115 	stw	r17,4(sp)
    78ec:	80000015 	stw	zero,0(r16)
    78f0:	2023883a 	mov	r17,r4
    78f4:	2809883a 	mov	r4,r5
    78f8:	300b883a 	mov	r5,r6
    78fc:	dfc00215 	stw	ra,8(sp)
    7900:	0009f180 	call	9f18 <fstat>
    7904:	1007883a 	mov	r3,r2
    7908:	00bfffc4 	movi	r2,-1
    790c:	18800626 	beq	r3,r2,7928 <_fstat_r+0x50>
    7910:	1805883a 	mov	r2,r3
    7914:	dfc00217 	ldw	ra,8(sp)
    7918:	dc400117 	ldw	r17,4(sp)
    791c:	dc000017 	ldw	r16,0(sp)
    7920:	dec00304 	addi	sp,sp,12
    7924:	f800283a 	ret
    7928:	80800017 	ldw	r2,0(r16)
    792c:	103ff826 	beq	r2,zero,7910 <_fstat_r+0x38>
    7930:	88800015 	stw	r2,0(r17)
    7934:	1805883a 	mov	r2,r3
    7938:	dfc00217 	ldw	ra,8(sp)
    793c:	dc400117 	ldw	r17,4(sp)
    7940:	dc000017 	ldw	r16,0(sp)
    7944:	dec00304 	addi	sp,sp,12
    7948:	f800283a 	ret

0000794c <_isatty_r>:
    794c:	defffd04 	addi	sp,sp,-12
    7950:	dc000015 	stw	r16,0(sp)
    7954:	04000074 	movhi	r16,1
    7958:	84078704 	addi	r16,r16,7708
    795c:	dc400115 	stw	r17,4(sp)
    7960:	80000015 	stw	zero,0(r16)
    7964:	2023883a 	mov	r17,r4
    7968:	2809883a 	mov	r4,r5
    796c:	dfc00215 	stw	ra,8(sp)
    7970:	000a04c0 	call	a04c <isatty>
    7974:	1007883a 	mov	r3,r2
    7978:	00bfffc4 	movi	r2,-1
    797c:	18800626 	beq	r3,r2,7998 <_isatty_r+0x4c>
    7980:	1805883a 	mov	r2,r3
    7984:	dfc00217 	ldw	ra,8(sp)
    7988:	dc400117 	ldw	r17,4(sp)
    798c:	dc000017 	ldw	r16,0(sp)
    7990:	dec00304 	addi	sp,sp,12
    7994:	f800283a 	ret
    7998:	80800017 	ldw	r2,0(r16)
    799c:	103ff826 	beq	r2,zero,7980 <_isatty_r+0x34>
    79a0:	88800015 	stw	r2,0(r17)
    79a4:	1805883a 	mov	r2,r3
    79a8:	dfc00217 	ldw	ra,8(sp)
    79ac:	dc400117 	ldw	r17,4(sp)
    79b0:	dc000017 	ldw	r16,0(sp)
    79b4:	dec00304 	addi	sp,sp,12
    79b8:	f800283a 	ret

000079bc <_lseek_r>:
    79bc:	defffd04 	addi	sp,sp,-12
    79c0:	dc000015 	stw	r16,0(sp)
    79c4:	04000074 	movhi	r16,1
    79c8:	84078704 	addi	r16,r16,7708
    79cc:	dc400115 	stw	r17,4(sp)
    79d0:	80000015 	stw	zero,0(r16)
    79d4:	2023883a 	mov	r17,r4
    79d8:	2809883a 	mov	r4,r5
    79dc:	300b883a 	mov	r5,r6
    79e0:	380d883a 	mov	r6,r7
    79e4:	dfc00215 	stw	ra,8(sp)
    79e8:	000a2580 	call	a258 <lseek>
    79ec:	1007883a 	mov	r3,r2
    79f0:	00bfffc4 	movi	r2,-1
    79f4:	18800626 	beq	r3,r2,7a10 <_lseek_r+0x54>
    79f8:	1805883a 	mov	r2,r3
    79fc:	dfc00217 	ldw	ra,8(sp)
    7a00:	dc400117 	ldw	r17,4(sp)
    7a04:	dc000017 	ldw	r16,0(sp)
    7a08:	dec00304 	addi	sp,sp,12
    7a0c:	f800283a 	ret
    7a10:	80800017 	ldw	r2,0(r16)
    7a14:	103ff826 	beq	r2,zero,79f8 <_lseek_r+0x3c>
    7a18:	88800015 	stw	r2,0(r17)
    7a1c:	1805883a 	mov	r2,r3
    7a20:	dfc00217 	ldw	ra,8(sp)
    7a24:	dc400117 	ldw	r17,4(sp)
    7a28:	dc000017 	ldw	r16,0(sp)
    7a2c:	dec00304 	addi	sp,sp,12
    7a30:	f800283a 	ret

00007a34 <_read_r>:
    7a34:	defffd04 	addi	sp,sp,-12
    7a38:	dc000015 	stw	r16,0(sp)
    7a3c:	04000074 	movhi	r16,1
    7a40:	84078704 	addi	r16,r16,7708
    7a44:	dc400115 	stw	r17,4(sp)
    7a48:	80000015 	stw	zero,0(r16)
    7a4c:	2023883a 	mov	r17,r4
    7a50:	2809883a 	mov	r4,r5
    7a54:	300b883a 	mov	r5,r6
    7a58:	380d883a 	mov	r6,r7
    7a5c:	dfc00215 	stw	ra,8(sp)
    7a60:	000a4540 	call	a454 <read>
    7a64:	1007883a 	mov	r3,r2
    7a68:	00bfffc4 	movi	r2,-1
    7a6c:	18800626 	beq	r3,r2,7a88 <_read_r+0x54>
    7a70:	1805883a 	mov	r2,r3
    7a74:	dfc00217 	ldw	ra,8(sp)
    7a78:	dc400117 	ldw	r17,4(sp)
    7a7c:	dc000017 	ldw	r16,0(sp)
    7a80:	dec00304 	addi	sp,sp,12
    7a84:	f800283a 	ret
    7a88:	80800017 	ldw	r2,0(r16)
    7a8c:	103ff826 	beq	r2,zero,7a70 <_read_r+0x3c>
    7a90:	88800015 	stw	r2,0(r17)
    7a94:	1805883a 	mov	r2,r3
    7a98:	dfc00217 	ldw	ra,8(sp)
    7a9c:	dc400117 	ldw	r17,4(sp)
    7aa0:	dc000017 	ldw	r16,0(sp)
    7aa4:	dec00304 	addi	sp,sp,12
    7aa8:	f800283a 	ret

00007aac <__udivdi3>:
    7aac:	defff004 	addi	sp,sp,-64
    7ab0:	2005883a 	mov	r2,r4
    7ab4:	3011883a 	mov	r8,r6
    7ab8:	df000e15 	stw	fp,56(sp)
    7abc:	dd000a15 	stw	r20,40(sp)
    7ac0:	dc000615 	stw	r16,24(sp)
    7ac4:	dfc00f15 	stw	ra,60(sp)
    7ac8:	ddc00d15 	stw	r23,52(sp)
    7acc:	dd800c15 	stw	r22,48(sp)
    7ad0:	dd400b15 	stw	r21,44(sp)
    7ad4:	dcc00915 	stw	r19,36(sp)
    7ad8:	dc800815 	stw	r18,32(sp)
    7adc:	dc400715 	stw	r17,28(sp)
    7ae0:	4021883a 	mov	r16,r8
    7ae4:	1039883a 	mov	fp,r2
    7ae8:	2829883a 	mov	r20,r5
    7aec:	38003b1e 	bne	r7,zero,7bdc <__udivdi3+0x130>
    7af0:	2a005c36 	bltu	r5,r8,7c64 <__udivdi3+0x1b8>
    7af4:	4000a626 	beq	r8,zero,7d90 <__udivdi3+0x2e4>
    7af8:	00bfffd4 	movui	r2,65535
    7afc:	14009e36 	bltu	r2,r16,7d78 <__udivdi3+0x2cc>
    7b00:	00803fc4 	movi	r2,255
    7b04:	14013d36 	bltu	r2,r16,7ffc <__udivdi3+0x550>
    7b08:	000b883a 	mov	r5,zero
    7b0c:	0005883a 	mov	r2,zero
    7b10:	8084d83a 	srl	r2,r16,r2
    7b14:	01000074 	movhi	r4,1
    7b18:	21009804 	addi	r4,r4,608
    7b1c:	01800804 	movi	r6,32
    7b20:	1105883a 	add	r2,r2,r4
    7b24:	10c00003 	ldbu	r3,0(r2)
    7b28:	28c7883a 	add	r3,r5,r3
    7b2c:	30edc83a 	sub	r22,r6,r3
    7b30:	b000ee1e 	bne	r22,zero,7eec <__udivdi3+0x440>
    7b34:	802ad43a 	srli	r21,r16,16
    7b38:	00800044 	movi	r2,1
    7b3c:	a423c83a 	sub	r17,r20,r16
    7b40:	85ffffcc 	andi	r23,r16,65535
    7b44:	d8800315 	stw	r2,12(sp)
    7b48:	8809883a 	mov	r4,r17
    7b4c:	a80b883a 	mov	r5,r21
    7b50:	00007880 	call	788 <__udivsi3>
    7b54:	8809883a 	mov	r4,r17
    7b58:	a80b883a 	mov	r5,r21
    7b5c:	102d883a 	mov	r22,r2
    7b60:	00007900 	call	790 <__umodsi3>
    7b64:	1004943a 	slli	r2,r2,16
    7b68:	e006d43a 	srli	r3,fp,16
    7b6c:	bda3383a 	mul	r17,r23,r22
    7b70:	10c4b03a 	or	r2,r2,r3
    7b74:	1440042e 	bgeu	r2,r17,7b88 <__udivdi3+0xdc>
    7b78:	1405883a 	add	r2,r2,r16
    7b7c:	b5bfffc4 	addi	r22,r22,-1
    7b80:	14000136 	bltu	r2,r16,7b88 <__udivdi3+0xdc>
    7b84:	14413d36 	bltu	r2,r17,807c <__udivdi3+0x5d0>
    7b88:	1463c83a 	sub	r17,r2,r17
    7b8c:	8809883a 	mov	r4,r17
    7b90:	a80b883a 	mov	r5,r21
    7b94:	00007880 	call	788 <__udivsi3>
    7b98:	8809883a 	mov	r4,r17
    7b9c:	a80b883a 	mov	r5,r21
    7ba0:	1029883a 	mov	r20,r2
    7ba4:	00007900 	call	790 <__umodsi3>
    7ba8:	1004943a 	slli	r2,r2,16
    7bac:	bd09383a 	mul	r4,r23,r20
    7bb0:	e0ffffcc 	andi	r3,fp,65535
    7bb4:	10c4b03a 	or	r2,r2,r3
    7bb8:	1100042e 	bgeu	r2,r4,7bcc <__udivdi3+0x120>
    7bbc:	8085883a 	add	r2,r16,r2
    7bc0:	a53fffc4 	addi	r20,r20,-1
    7bc4:	14000136 	bltu	r2,r16,7bcc <__udivdi3+0x120>
    7bc8:	11012036 	bltu	r2,r4,804c <__udivdi3+0x5a0>
    7bcc:	b004943a 	slli	r2,r22,16
    7bd0:	d9000317 	ldw	r4,12(sp)
    7bd4:	a084b03a 	or	r2,r20,r2
    7bd8:	00001506 	br	7c30 <__udivdi3+0x184>
    7bdc:	380d883a 	mov	r6,r7
    7be0:	29c06236 	bltu	r5,r7,7d6c <__udivdi3+0x2c0>
    7be4:	00bfffd4 	movui	r2,65535
    7be8:	11c05a36 	bltu	r2,r7,7d54 <__udivdi3+0x2a8>
    7bec:	00803fc4 	movi	r2,255
    7bf0:	11c0fc36 	bltu	r2,r7,7fe4 <__udivdi3+0x538>
    7bf4:	000b883a 	mov	r5,zero
    7bf8:	0005883a 	mov	r2,zero
    7bfc:	3084d83a 	srl	r2,r6,r2
    7c00:	01000074 	movhi	r4,1
    7c04:	21009804 	addi	r4,r4,608
    7c08:	01c00804 	movi	r7,32
    7c0c:	1105883a 	add	r2,r2,r4
    7c10:	10c00003 	ldbu	r3,0(r2)
    7c14:	28c7883a 	add	r3,r5,r3
    7c18:	38efc83a 	sub	r23,r7,r3
    7c1c:	b800691e 	bne	r23,zero,7dc4 <__udivdi3+0x318>
    7c20:	35000136 	bltu	r6,r20,7c28 <__udivdi3+0x17c>
    7c24:	e4005136 	bltu	fp,r16,7d6c <__udivdi3+0x2c0>
    7c28:	00800044 	movi	r2,1
    7c2c:	0009883a 	mov	r4,zero
    7c30:	2007883a 	mov	r3,r4
    7c34:	dfc00f17 	ldw	ra,60(sp)
    7c38:	df000e17 	ldw	fp,56(sp)
    7c3c:	ddc00d17 	ldw	r23,52(sp)
    7c40:	dd800c17 	ldw	r22,48(sp)
    7c44:	dd400b17 	ldw	r21,44(sp)
    7c48:	dd000a17 	ldw	r20,40(sp)
    7c4c:	dcc00917 	ldw	r19,36(sp)
    7c50:	dc800817 	ldw	r18,32(sp)
    7c54:	dc400717 	ldw	r17,28(sp)
    7c58:	dc000617 	ldw	r16,24(sp)
    7c5c:	dec01004 	addi	sp,sp,64
    7c60:	f800283a 	ret
    7c64:	00bfffd4 	movui	r2,65535
    7c68:	12005036 	bltu	r2,r8,7dac <__udivdi3+0x300>
    7c6c:	00803fc4 	movi	r2,255
    7c70:	1200e836 	bltu	r2,r8,8014 <__udivdi3+0x568>
    7c74:	000b883a 	mov	r5,zero
    7c78:	0005883a 	mov	r2,zero
    7c7c:	8084d83a 	srl	r2,r16,r2
    7c80:	01000074 	movhi	r4,1
    7c84:	21009804 	addi	r4,r4,608
    7c88:	01800804 	movi	r6,32
    7c8c:	1105883a 	add	r2,r2,r4
    7c90:	10c00003 	ldbu	r3,0(r2)
    7c94:	28c7883a 	add	r3,r5,r3
    7c98:	30cbc83a 	sub	r5,r6,r3
    7c9c:	28000626 	beq	r5,zero,7cb8 <__udivdi3+0x20c>
    7ca0:	3145c83a 	sub	r2,r6,r5
    7ca4:	e084d83a 	srl	r2,fp,r2
    7ca8:	a146983a 	sll	r3,r20,r5
    7cac:	e178983a 	sll	fp,fp,r5
    7cb0:	8160983a 	sll	r16,r16,r5
    7cb4:	18a8b03a 	or	r20,r3,r2
    7cb8:	802ad43a 	srli	r21,r16,16
    7cbc:	a009883a 	mov	r4,r20
    7cc0:	85ffffcc 	andi	r23,r16,65535
    7cc4:	a80b883a 	mov	r5,r21
    7cc8:	00007880 	call	788 <__udivsi3>
    7ccc:	a009883a 	mov	r4,r20
    7cd0:	a80b883a 	mov	r5,r21
    7cd4:	102d883a 	mov	r22,r2
    7cd8:	00007900 	call	790 <__umodsi3>
    7cdc:	1004943a 	slli	r2,r2,16
    7ce0:	e006d43a 	srli	r3,fp,16
    7ce4:	bda3383a 	mul	r17,r23,r22
    7ce8:	10c4b03a 	or	r2,r2,r3
    7cec:	1440042e 	bgeu	r2,r17,7d00 <__udivdi3+0x254>
    7cf0:	1405883a 	add	r2,r2,r16
    7cf4:	b5bfffc4 	addi	r22,r22,-1
    7cf8:	14000136 	bltu	r2,r16,7d00 <__udivdi3+0x254>
    7cfc:	1440d536 	bltu	r2,r17,8054 <__udivdi3+0x5a8>
    7d00:	1463c83a 	sub	r17,r2,r17
    7d04:	8809883a 	mov	r4,r17
    7d08:	a80b883a 	mov	r5,r21
    7d0c:	00007880 	call	788 <__udivsi3>
    7d10:	8809883a 	mov	r4,r17
    7d14:	a80b883a 	mov	r5,r21
    7d18:	1029883a 	mov	r20,r2
    7d1c:	00007900 	call	790 <__umodsi3>
    7d20:	1004943a 	slli	r2,r2,16
    7d24:	bd09383a 	mul	r4,r23,r20
    7d28:	e0ffffcc 	andi	r3,fp,65535
    7d2c:	10c4b03a 	or	r2,r2,r3
    7d30:	1100042e 	bgeu	r2,r4,7d44 <__udivdi3+0x298>
    7d34:	8085883a 	add	r2,r16,r2
    7d38:	a53fffc4 	addi	r20,r20,-1
    7d3c:	14000136 	bltu	r2,r16,7d44 <__udivdi3+0x298>
    7d40:	1100c736 	bltu	r2,r4,8060 <__udivdi3+0x5b4>
    7d44:	b004943a 	slli	r2,r22,16
    7d48:	0009883a 	mov	r4,zero
    7d4c:	a084b03a 	or	r2,r20,r2
    7d50:	003fb706 	br	7c30 <__udivdi3+0x184>
    7d54:	00804034 	movhi	r2,256
    7d58:	10bfffc4 	addi	r2,r2,-1
    7d5c:	11c0a436 	bltu	r2,r7,7ff0 <__udivdi3+0x544>
    7d60:	01400404 	movi	r5,16
    7d64:	2805883a 	mov	r2,r5
    7d68:	003fa406 	br	7bfc <__udivdi3+0x150>
    7d6c:	0005883a 	mov	r2,zero
    7d70:	0009883a 	mov	r4,zero
    7d74:	003fae06 	br	7c30 <__udivdi3+0x184>
    7d78:	00804034 	movhi	r2,256
    7d7c:	10bfffc4 	addi	r2,r2,-1
    7d80:	1400a136 	bltu	r2,r16,8008 <__udivdi3+0x55c>
    7d84:	01400404 	movi	r5,16
    7d88:	2805883a 	mov	r2,r5
    7d8c:	003f6006 	br	7b10 <__udivdi3+0x64>
    7d90:	01000044 	movi	r4,1
    7d94:	000b883a 	mov	r5,zero
    7d98:	00007880 	call	788 <__udivsi3>
    7d9c:	1021883a 	mov	r16,r2
    7da0:	00bfffd4 	movui	r2,65535
    7da4:	143ff436 	bltu	r2,r16,7d78 <__udivdi3+0x2cc>
    7da8:	003f5506 	br	7b00 <__udivdi3+0x54>
    7dac:	00804034 	movhi	r2,256
    7db0:	10bfffc4 	addi	r2,r2,-1
    7db4:	12009a36 	bltu	r2,r8,8020 <__udivdi3+0x574>
    7db8:	01400404 	movi	r5,16
    7dbc:	2805883a 	mov	r2,r5
    7dc0:	003fae06 	br	7c7c <__udivdi3+0x1d0>
    7dc4:	3dc5c83a 	sub	r2,r7,r23
    7dc8:	35c8983a 	sll	r4,r6,r23
    7dcc:	8086d83a 	srl	r3,r16,r2
    7dd0:	a0a2d83a 	srl	r17,r20,r2
    7dd4:	e084d83a 	srl	r2,fp,r2
    7dd8:	20eab03a 	or	r21,r4,r3
    7ddc:	a82cd43a 	srli	r22,r21,16
    7de0:	a5c6983a 	sll	r3,r20,r23
    7de4:	8809883a 	mov	r4,r17
    7de8:	b00b883a 	mov	r5,r22
    7dec:	1886b03a 	or	r3,r3,r2
    7df0:	d8c00215 	stw	r3,8(sp)
    7df4:	00007880 	call	788 <__udivsi3>
    7df8:	8809883a 	mov	r4,r17
    7dfc:	b00b883a 	mov	r5,r22
    7e00:	1029883a 	mov	r20,r2
    7e04:	00007900 	call	790 <__umodsi3>
    7e08:	a8ffffcc 	andi	r3,r21,65535
    7e0c:	d8c00515 	stw	r3,20(sp)
    7e10:	d9000217 	ldw	r4,8(sp)
    7e14:	d9400517 	ldw	r5,20(sp)
    7e18:	1004943a 	slli	r2,r2,16
    7e1c:	2006d43a 	srli	r3,r4,16
    7e20:	85e0983a 	sll	r16,r16,r23
    7e24:	2d23383a 	mul	r17,r5,r20
    7e28:	10c4b03a 	or	r2,r2,r3
    7e2c:	dc000015 	stw	r16,0(sp)
    7e30:	1440032e 	bgeu	r2,r17,7e40 <__udivdi3+0x394>
    7e34:	1545883a 	add	r2,r2,r21
    7e38:	a53fffc4 	addi	r20,r20,-1
    7e3c:	15407f2e 	bgeu	r2,r21,803c <__udivdi3+0x590>
    7e40:	1463c83a 	sub	r17,r2,r17
    7e44:	8809883a 	mov	r4,r17
    7e48:	b00b883a 	mov	r5,r22
    7e4c:	00007880 	call	788 <__udivsi3>
    7e50:	8809883a 	mov	r4,r17
    7e54:	b00b883a 	mov	r5,r22
    7e58:	1021883a 	mov	r16,r2
    7e5c:	00007900 	call	790 <__umodsi3>
    7e60:	d8c00517 	ldw	r3,20(sp)
    7e64:	d9000217 	ldw	r4,8(sp)
    7e68:	1004943a 	slli	r2,r2,16
    7e6c:	1c0f383a 	mul	r7,r3,r16
    7e70:	20ffffcc 	andi	r3,r4,65535
    7e74:	10e2b03a 	or	r17,r2,r3
    7e78:	89c0032e 	bgeu	r17,r7,7e88 <__udivdi3+0x3dc>
    7e7c:	8d63883a 	add	r17,r17,r21
    7e80:	843fffc4 	addi	r16,r16,-1
    7e84:	8d40692e 	bgeu	r17,r21,802c <__udivdi3+0x580>
    7e88:	a008943a 	slli	r4,r20,16
    7e8c:	d9400017 	ldw	r5,0(sp)
    7e90:	89e3c83a 	sub	r17,r17,r7
    7e94:	8110b03a 	or	r8,r16,r4
    7e98:	280cd43a 	srli	r6,r5,16
    7e9c:	28ffffcc 	andi	r3,r5,65535
    7ea0:	40bfffcc 	andi	r2,r8,65535
    7ea4:	400ad43a 	srli	r5,r8,16
    7ea8:	10d3383a 	mul	r9,r2,r3
    7eac:	1185383a 	mul	r2,r2,r6
    7eb0:	28c7383a 	mul	r3,r5,r3
    7eb4:	4808d43a 	srli	r4,r9,16
    7eb8:	298b383a 	mul	r5,r5,r6
    7ebc:	10c5883a 	add	r2,r2,r3
    7ec0:	2089883a 	add	r4,r4,r2
    7ec4:	20c0022e 	bgeu	r4,r3,7ed0 <__udivdi3+0x424>
    7ec8:	00800074 	movhi	r2,1
    7ecc:	288b883a 	add	r5,r5,r2
    7ed0:	2004d43a 	srli	r2,r4,16
    7ed4:	288b883a 	add	r5,r5,r2
    7ed8:	89403f36 	bltu	r17,r5,7fd8 <__udivdi3+0x52c>
    7edc:	89403926 	beq	r17,r5,7fc4 <__udivdi3+0x518>
    7ee0:	4005883a 	mov	r2,r8
    7ee4:	0009883a 	mov	r4,zero
    7ee8:	003f5106 	br	7c30 <__udivdi3+0x184>
    7eec:	85a0983a 	sll	r16,r16,r22
    7ef0:	3585c83a 	sub	r2,r6,r22
    7ef4:	a0a2d83a 	srl	r17,r20,r2
    7ef8:	802ad43a 	srli	r21,r16,16
    7efc:	e084d83a 	srl	r2,fp,r2
    7f00:	a586983a 	sll	r3,r20,r22
    7f04:	8809883a 	mov	r4,r17
    7f08:	a80b883a 	mov	r5,r21
    7f0c:	1886b03a 	or	r3,r3,r2
    7f10:	d8c00115 	stw	r3,4(sp)
    7f14:	00007880 	call	788 <__udivsi3>
    7f18:	8809883a 	mov	r4,r17
    7f1c:	a80b883a 	mov	r5,r21
    7f20:	d8800415 	stw	r2,16(sp)
    7f24:	00007900 	call	790 <__umodsi3>
    7f28:	d9000117 	ldw	r4,4(sp)
    7f2c:	d9400417 	ldw	r5,16(sp)
    7f30:	1004943a 	slli	r2,r2,16
    7f34:	85ffffcc 	andi	r23,r16,65535
    7f38:	2006d43a 	srli	r3,r4,16
    7f3c:	b963383a 	mul	r17,r23,r5
    7f40:	10c4b03a 	or	r2,r2,r3
    7f44:	1440042e 	bgeu	r2,r17,7f58 <__udivdi3+0x4ac>
    7f48:	297fffc4 	addi	r5,r5,-1
    7f4c:	1405883a 	add	r2,r2,r16
    7f50:	d9400415 	stw	r5,16(sp)
    7f54:	1400442e 	bgeu	r2,r16,8068 <__udivdi3+0x5bc>
    7f58:	1463c83a 	sub	r17,r2,r17
    7f5c:	8809883a 	mov	r4,r17
    7f60:	a80b883a 	mov	r5,r21
    7f64:	00007880 	call	788 <__udivsi3>
    7f68:	8809883a 	mov	r4,r17
    7f6c:	a80b883a 	mov	r5,r21
    7f70:	1029883a 	mov	r20,r2
    7f74:	00007900 	call	790 <__umodsi3>
    7f78:	d9400117 	ldw	r5,4(sp)
    7f7c:	1004943a 	slli	r2,r2,16
    7f80:	bd09383a 	mul	r4,r23,r20
    7f84:	28ffffcc 	andi	r3,r5,65535
    7f88:	10c6b03a 	or	r3,r2,r3
    7f8c:	1900062e 	bgeu	r3,r4,7fa8 <__udivdi3+0x4fc>
    7f90:	1c07883a 	add	r3,r3,r16
    7f94:	a53fffc4 	addi	r20,r20,-1
    7f98:	1c000336 	bltu	r3,r16,7fa8 <__udivdi3+0x4fc>
    7f9c:	1900022e 	bgeu	r3,r4,7fa8 <__udivdi3+0x4fc>
    7fa0:	a53fffc4 	addi	r20,r20,-1
    7fa4:	1c07883a 	add	r3,r3,r16
    7fa8:	d9400417 	ldw	r5,16(sp)
    7fac:	e5b8983a 	sll	fp,fp,r22
    7fb0:	1923c83a 	sub	r17,r3,r4
    7fb4:	2804943a 	slli	r2,r5,16
    7fb8:	a0a8b03a 	or	r20,r20,r2
    7fbc:	dd000315 	stw	r20,12(sp)
    7fc0:	003ee106 	br	7b48 <__udivdi3+0x9c>
    7fc4:	2004943a 	slli	r2,r4,16
    7fc8:	e5c8983a 	sll	r4,fp,r23
    7fcc:	48ffffcc 	andi	r3,r9,65535
    7fd0:	10c5883a 	add	r2,r2,r3
    7fd4:	20bfc22e 	bgeu	r4,r2,7ee0 <__udivdi3+0x434>
    7fd8:	40bfffc4 	addi	r2,r8,-1
    7fdc:	0009883a 	mov	r4,zero
    7fe0:	003f1306 	br	7c30 <__udivdi3+0x184>
    7fe4:	01400204 	movi	r5,8
    7fe8:	2805883a 	mov	r2,r5
    7fec:	003f0306 	br	7bfc <__udivdi3+0x150>
    7ff0:	01400604 	movi	r5,24
    7ff4:	2805883a 	mov	r2,r5
    7ff8:	003f0006 	br	7bfc <__udivdi3+0x150>
    7ffc:	01400204 	movi	r5,8
    8000:	2805883a 	mov	r2,r5
    8004:	003ec206 	br	7b10 <__udivdi3+0x64>
    8008:	01400604 	movi	r5,24
    800c:	2805883a 	mov	r2,r5
    8010:	003ebf06 	br	7b10 <__udivdi3+0x64>
    8014:	01400204 	movi	r5,8
    8018:	2805883a 	mov	r2,r5
    801c:	003f1706 	br	7c7c <__udivdi3+0x1d0>
    8020:	01400604 	movi	r5,24
    8024:	2805883a 	mov	r2,r5
    8028:	003f1406 	br	7c7c <__udivdi3+0x1d0>
    802c:	89ff962e 	bgeu	r17,r7,7e88 <__udivdi3+0x3dc>
    8030:	8d63883a 	add	r17,r17,r21
    8034:	843fffc4 	addi	r16,r16,-1
    8038:	003f9306 	br	7e88 <__udivdi3+0x3dc>
    803c:	147f802e 	bgeu	r2,r17,7e40 <__udivdi3+0x394>
    8040:	a53fffc4 	addi	r20,r20,-1
    8044:	1545883a 	add	r2,r2,r21
    8048:	003f7d06 	br	7e40 <__udivdi3+0x394>
    804c:	a53fffc4 	addi	r20,r20,-1
    8050:	003ede06 	br	7bcc <__udivdi3+0x120>
    8054:	b5bfffc4 	addi	r22,r22,-1
    8058:	1405883a 	add	r2,r2,r16
    805c:	003f2806 	br	7d00 <__udivdi3+0x254>
    8060:	a53fffc4 	addi	r20,r20,-1
    8064:	003f3706 	br	7d44 <__udivdi3+0x298>
    8068:	147fbb2e 	bgeu	r2,r17,7f58 <__udivdi3+0x4ac>
    806c:	297fffc4 	addi	r5,r5,-1
    8070:	1405883a 	add	r2,r2,r16
    8074:	d9400415 	stw	r5,16(sp)
    8078:	003fb706 	br	7f58 <__udivdi3+0x4ac>
    807c:	b5bfffc4 	addi	r22,r22,-1
    8080:	1405883a 	add	r2,r2,r16
    8084:	003ec006 	br	7b88 <__udivdi3+0xdc>

00008088 <__umoddi3>:
    8088:	defff104 	addi	sp,sp,-60
    808c:	dd800b15 	stw	r22,44(sp)
    8090:	dd000915 	stw	r20,36(sp)
    8094:	dc000515 	stw	r16,20(sp)
    8098:	dfc00e15 	stw	ra,56(sp)
    809c:	df000d15 	stw	fp,52(sp)
    80a0:	ddc00c15 	stw	r23,48(sp)
    80a4:	dd400a15 	stw	r21,40(sp)
    80a8:	dcc00815 	stw	r19,32(sp)
    80ac:	dc800715 	stw	r18,28(sp)
    80b0:	dc400615 	stw	r17,24(sp)
    80b4:	3021883a 	mov	r16,r6
    80b8:	202d883a 	mov	r22,r4
    80bc:	2829883a 	mov	r20,r5
    80c0:	38002b1e 	bne	r7,zero,8170 <__umoddi3+0xe8>
    80c4:	29805036 	bltu	r5,r6,8208 <__umoddi3+0x180>
    80c8:	30008a26 	beq	r6,zero,82f4 <__umoddi3+0x26c>
    80cc:	00bfffd4 	movui	r2,65535
    80d0:	14008236 	bltu	r2,r16,82dc <__umoddi3+0x254>
    80d4:	00803fc4 	movi	r2,255
    80d8:	14013636 	bltu	r2,r16,85b4 <__umoddi3+0x52c>
    80dc:	000b883a 	mov	r5,zero
    80e0:	0005883a 	mov	r2,zero
    80e4:	8084d83a 	srl	r2,r16,r2
    80e8:	01000074 	movhi	r4,1
    80ec:	21009804 	addi	r4,r4,608
    80f0:	01800804 	movi	r6,32
    80f4:	1105883a 	add	r2,r2,r4
    80f8:	10c00003 	ldbu	r3,0(r2)
    80fc:	28c7883a 	add	r3,r5,r3
    8100:	30efc83a 	sub	r23,r6,r3
    8104:	b800941e 	bne	r23,zero,8358 <__umoddi3+0x2d0>
    8108:	802ad43a 	srli	r21,r16,16
    810c:	a423c83a 	sub	r17,r20,r16
    8110:	0039883a 	mov	fp,zero
    8114:	853fffcc 	andi	r20,r16,65535
    8118:	8809883a 	mov	r4,r17
    811c:	a80b883a 	mov	r5,r21
    8120:	00007880 	call	788 <__udivsi3>
    8124:	8809883a 	mov	r4,r17
    8128:	a80b883a 	mov	r5,r21
    812c:	a0a3383a 	mul	r17,r20,r2
    8130:	00007900 	call	790 <__umodsi3>
    8134:	1004943a 	slli	r2,r2,16
    8138:	b006d43a 	srli	r3,r22,16
    813c:	10c4b03a 	or	r2,r2,r3
    8140:	1440032e 	bgeu	r2,r17,8150 <__umoddi3+0xc8>
    8144:	1405883a 	add	r2,r2,r16
    8148:	14000136 	bltu	r2,r16,8150 <__umoddi3+0xc8>
    814c:	14413536 	bltu	r2,r17,8624 <__umoddi3+0x59c>
    8150:	1463c83a 	sub	r17,r2,r17
    8154:	8809883a 	mov	r4,r17
    8158:	a80b883a 	mov	r5,r21
    815c:	00007880 	call	788 <__udivsi3>
    8160:	8809883a 	mov	r4,r17
    8164:	a0a3383a 	mul	r17,r20,r2
    8168:	a80b883a 	mov	r5,r21
    816c:	00004d06 	br	82a4 <__umoddi3+0x21c>
    8170:	380d883a 	mov	r6,r7
    8174:	29c0102e 	bgeu	r5,r7,81b8 <__umoddi3+0x130>
    8178:	2011883a 	mov	r8,r4
    817c:	2813883a 	mov	r9,r5
    8180:	4005883a 	mov	r2,r8
    8184:	4807883a 	mov	r3,r9
    8188:	dfc00e17 	ldw	ra,56(sp)
    818c:	df000d17 	ldw	fp,52(sp)
    8190:	ddc00c17 	ldw	r23,48(sp)
    8194:	dd800b17 	ldw	r22,44(sp)
    8198:	dd400a17 	ldw	r21,40(sp)
    819c:	dd000917 	ldw	r20,36(sp)
    81a0:	dcc00817 	ldw	r19,32(sp)
    81a4:	dc800717 	ldw	r18,28(sp)
    81a8:	dc400617 	ldw	r17,24(sp)
    81ac:	dc000517 	ldw	r16,20(sp)
    81b0:	dec00f04 	addi	sp,sp,60
    81b4:	f800283a 	ret
    81b8:	00bfffd4 	movui	r2,65535
    81bc:	11c05a36 	bltu	r2,r7,8328 <__umoddi3+0x2a0>
    81c0:	00803fc4 	movi	r2,255
    81c4:	11c0fe36 	bltu	r2,r7,85c0 <__umoddi3+0x538>
    81c8:	000b883a 	mov	r5,zero
    81cc:	0005883a 	mov	r2,zero
    81d0:	3084d83a 	srl	r2,r6,r2
    81d4:	01000074 	movhi	r4,1
    81d8:	21009804 	addi	r4,r4,608
    81dc:	01c00804 	movi	r7,32
    81e0:	1105883a 	add	r2,r2,r4
    81e4:	10c00003 	ldbu	r3,0(r2)
    81e8:	28c7883a 	add	r3,r5,r3
    81ec:	38ebc83a 	sub	r21,r7,r3
    81f0:	a800851e 	bne	r21,zero,8408 <__umoddi3+0x380>
    81f4:	35005236 	bltu	r6,r20,8340 <__umoddi3+0x2b8>
    81f8:	b400512e 	bgeu	r22,r16,8340 <__umoddi3+0x2b8>
    81fc:	b011883a 	mov	r8,r22
    8200:	a013883a 	mov	r9,r20
    8204:	003fde06 	br	8180 <__umoddi3+0xf8>
    8208:	00bfffd4 	movui	r2,65535
    820c:	11804036 	bltu	r2,r6,8310 <__umoddi3+0x288>
    8210:	00803fc4 	movi	r2,255
    8214:	1180ed36 	bltu	r2,r6,85cc <__umoddi3+0x544>
    8218:	000b883a 	mov	r5,zero
    821c:	0005883a 	mov	r2,zero
    8220:	8084d83a 	srl	r2,r16,r2
    8224:	01000074 	movhi	r4,1
    8228:	21009804 	addi	r4,r4,608
    822c:	01800804 	movi	r6,32
    8230:	1105883a 	add	r2,r2,r4
    8234:	10c00003 	ldbu	r3,0(r2)
    8238:	28c7883a 	add	r3,r5,r3
    823c:	30c7c83a 	sub	r3,r6,r3
    8240:	1800bf1e 	bne	r3,zero,8540 <__umoddi3+0x4b8>
    8244:	0039883a 	mov	fp,zero
    8248:	802ad43a 	srli	r21,r16,16
    824c:	a009883a 	mov	r4,r20
    8250:	85ffffcc 	andi	r23,r16,65535
    8254:	a80b883a 	mov	r5,r21
    8258:	00007880 	call	788 <__udivsi3>
    825c:	a009883a 	mov	r4,r20
    8260:	a80b883a 	mov	r5,r21
    8264:	b8a3383a 	mul	r17,r23,r2
    8268:	00007900 	call	790 <__umodsi3>
    826c:	1004943a 	slli	r2,r2,16
    8270:	b006d43a 	srli	r3,r22,16
    8274:	10c4b03a 	or	r2,r2,r3
    8278:	1440032e 	bgeu	r2,r17,8288 <__umoddi3+0x200>
    827c:	1405883a 	add	r2,r2,r16
    8280:	14000136 	bltu	r2,r16,8288 <__umoddi3+0x200>
    8284:	1440e536 	bltu	r2,r17,861c <__umoddi3+0x594>
    8288:	1463c83a 	sub	r17,r2,r17
    828c:	8809883a 	mov	r4,r17
    8290:	a80b883a 	mov	r5,r21
    8294:	00007880 	call	788 <__udivsi3>
    8298:	8809883a 	mov	r4,r17
    829c:	b8a3383a 	mul	r17,r23,r2
    82a0:	a80b883a 	mov	r5,r21
    82a4:	00007900 	call	790 <__umodsi3>
    82a8:	1004943a 	slli	r2,r2,16
    82ac:	b0ffffcc 	andi	r3,r22,65535
    82b0:	10c4b03a 	or	r2,r2,r3
    82b4:	1440042e 	bgeu	r2,r17,82c8 <__umoddi3+0x240>
    82b8:	1405883a 	add	r2,r2,r16
    82bc:	14000236 	bltu	r2,r16,82c8 <__umoddi3+0x240>
    82c0:	1440012e 	bgeu	r2,r17,82c8 <__umoddi3+0x240>
    82c4:	1405883a 	add	r2,r2,r16
    82c8:	1445c83a 	sub	r2,r2,r17
    82cc:	1724d83a 	srl	r18,r2,fp
    82d0:	0013883a 	mov	r9,zero
    82d4:	9011883a 	mov	r8,r18
    82d8:	003fa906 	br	8180 <__umoddi3+0xf8>
    82dc:	00804034 	movhi	r2,256
    82e0:	10bfffc4 	addi	r2,r2,-1
    82e4:	1400b036 	bltu	r2,r16,85a8 <__umoddi3+0x520>
    82e8:	01400404 	movi	r5,16
    82ec:	2805883a 	mov	r2,r5
    82f0:	003f7c06 	br	80e4 <__umoddi3+0x5c>
    82f4:	01000044 	movi	r4,1
    82f8:	000b883a 	mov	r5,zero
    82fc:	00007880 	call	788 <__udivsi3>
    8300:	1021883a 	mov	r16,r2
    8304:	00bfffd4 	movui	r2,65535
    8308:	143ff436 	bltu	r2,r16,82dc <__umoddi3+0x254>
    830c:	003f7106 	br	80d4 <__umoddi3+0x4c>
    8310:	00804034 	movhi	r2,256
    8314:	10bfffc4 	addi	r2,r2,-1
    8318:	1180af36 	bltu	r2,r6,85d8 <__umoddi3+0x550>
    831c:	01400404 	movi	r5,16
    8320:	2805883a 	mov	r2,r5
    8324:	003fbe06 	br	8220 <__umoddi3+0x198>
    8328:	00804034 	movhi	r2,256
    832c:	10bfffc4 	addi	r2,r2,-1
    8330:	11c0ac36 	bltu	r2,r7,85e4 <__umoddi3+0x55c>
    8334:	01400404 	movi	r5,16
    8338:	2805883a 	mov	r2,r5
    833c:	003fa406 	br	81d0 <__umoddi3+0x148>
    8340:	b409c83a 	sub	r4,r22,r16
    8344:	b105803a 	cmpltu	r2,r22,r4
    8348:	a187c83a 	sub	r3,r20,r6
    834c:	18a9c83a 	sub	r20,r3,r2
    8350:	202d883a 	mov	r22,r4
    8354:	003fa906 	br	81fc <__umoddi3+0x174>
    8358:	85e0983a 	sll	r16,r16,r23
    835c:	35c5c83a 	sub	r2,r6,r23
    8360:	a0a2d83a 	srl	r17,r20,r2
    8364:	802ad43a 	srli	r21,r16,16
    8368:	b084d83a 	srl	r2,r22,r2
    836c:	a5c6983a 	sll	r3,r20,r23
    8370:	8809883a 	mov	r4,r17
    8374:	a80b883a 	mov	r5,r21
    8378:	1886b03a 	or	r3,r3,r2
    837c:	d8c00115 	stw	r3,4(sp)
    8380:	853fffcc 	andi	r20,r16,65535
    8384:	00007880 	call	788 <__udivsi3>
    8388:	8809883a 	mov	r4,r17
    838c:	a80b883a 	mov	r5,r21
    8390:	a0a3383a 	mul	r17,r20,r2
    8394:	00007900 	call	790 <__umodsi3>
    8398:	d9000117 	ldw	r4,4(sp)
    839c:	1004943a 	slli	r2,r2,16
    83a0:	b839883a 	mov	fp,r23
    83a4:	2006d43a 	srli	r3,r4,16
    83a8:	10c4b03a 	or	r2,r2,r3
    83ac:	1440022e 	bgeu	r2,r17,83b8 <__umoddi3+0x330>
    83b0:	1405883a 	add	r2,r2,r16
    83b4:	1400962e 	bgeu	r2,r16,8610 <__umoddi3+0x588>
    83b8:	1463c83a 	sub	r17,r2,r17
    83bc:	8809883a 	mov	r4,r17
    83c0:	a80b883a 	mov	r5,r21
    83c4:	00007880 	call	788 <__udivsi3>
    83c8:	8809883a 	mov	r4,r17
    83cc:	a80b883a 	mov	r5,r21
    83d0:	a0a3383a 	mul	r17,r20,r2
    83d4:	00007900 	call	790 <__umodsi3>
    83d8:	d9400117 	ldw	r5,4(sp)
    83dc:	1004943a 	slli	r2,r2,16
    83e0:	28ffffcc 	andi	r3,r5,65535
    83e4:	10c4b03a 	or	r2,r2,r3
    83e8:	1440042e 	bgeu	r2,r17,83fc <__umoddi3+0x374>
    83ec:	1405883a 	add	r2,r2,r16
    83f0:	14000236 	bltu	r2,r16,83fc <__umoddi3+0x374>
    83f4:	1440012e 	bgeu	r2,r17,83fc <__umoddi3+0x374>
    83f8:	1405883a 	add	r2,r2,r16
    83fc:	b5ec983a 	sll	r22,r22,r23
    8400:	1463c83a 	sub	r17,r2,r17
    8404:	003f4406 	br	8118 <__umoddi3+0x90>
    8408:	3d4fc83a 	sub	r7,r7,r21
    840c:	3546983a 	sll	r3,r6,r21
    8410:	81c4d83a 	srl	r2,r16,r7
    8414:	a1e2d83a 	srl	r17,r20,r7
    8418:	a54c983a 	sll	r6,r20,r21
    841c:	18aeb03a 	or	r23,r3,r2
    8420:	b828d43a 	srli	r20,r23,16
    8424:	b1c4d83a 	srl	r2,r22,r7
    8428:	8809883a 	mov	r4,r17
    842c:	a00b883a 	mov	r5,r20
    8430:	308cb03a 	or	r6,r6,r2
    8434:	d9c00315 	stw	r7,12(sp)
    8438:	d9800215 	stw	r6,8(sp)
    843c:	00007880 	call	788 <__udivsi3>
    8440:	8809883a 	mov	r4,r17
    8444:	a00b883a 	mov	r5,r20
    8448:	1039883a 	mov	fp,r2
    844c:	00007900 	call	790 <__umodsi3>
    8450:	b8ffffcc 	andi	r3,r23,65535
    8454:	d8c00415 	stw	r3,16(sp)
    8458:	d9000217 	ldw	r4,8(sp)
    845c:	d9400417 	ldw	r5,16(sp)
    8460:	1004943a 	slli	r2,r2,16
    8464:	2006d43a 	srli	r3,r4,16
    8468:	8560983a 	sll	r16,r16,r21
    846c:	2f23383a 	mul	r17,r5,fp
    8470:	10c4b03a 	or	r2,r2,r3
    8474:	dc000015 	stw	r16,0(sp)
    8478:	b56c983a 	sll	r22,r22,r21
    847c:	1440032e 	bgeu	r2,r17,848c <__umoddi3+0x404>
    8480:	15c5883a 	add	r2,r2,r23
    8484:	e73fffc4 	addi	fp,fp,-1
    8488:	15c05d2e 	bgeu	r2,r23,8600 <__umoddi3+0x578>
    848c:	1463c83a 	sub	r17,r2,r17
    8490:	8809883a 	mov	r4,r17
    8494:	a00b883a 	mov	r5,r20
    8498:	00007880 	call	788 <__udivsi3>
    849c:	8809883a 	mov	r4,r17
    84a0:	a00b883a 	mov	r5,r20
    84a4:	1021883a 	mov	r16,r2
    84a8:	00007900 	call	790 <__umodsi3>
    84ac:	d8c00417 	ldw	r3,16(sp)
    84b0:	d9000217 	ldw	r4,8(sp)
    84b4:	1004943a 	slli	r2,r2,16
    84b8:	1c23383a 	mul	r17,r3,r16
    84bc:	20ffffcc 	andi	r3,r4,65535
    84c0:	10ceb03a 	or	r7,r2,r3
    84c4:	3c40032e 	bgeu	r7,r17,84d4 <__umoddi3+0x44c>
    84c8:	3dcf883a 	add	r7,r7,r23
    84cc:	843fffc4 	addi	r16,r16,-1
    84d0:	3dc0472e 	bgeu	r7,r23,85f0 <__umoddi3+0x568>
    84d4:	e004943a 	slli	r2,fp,16
    84d8:	d9400017 	ldw	r5,0(sp)
    84dc:	3c4fc83a 	sub	r7,r7,r17
    84e0:	8084b03a 	or	r2,r16,r2
    84e4:	28ffffcc 	andi	r3,r5,65535
    84e8:	280cd43a 	srli	r6,r5,16
    84ec:	100ad43a 	srli	r5,r2,16
    84f0:	10bfffcc 	andi	r2,r2,65535
    84f4:	10d1383a 	mul	r8,r2,r3
    84f8:	28c7383a 	mul	r3,r5,r3
    84fc:	1185383a 	mul	r2,r2,r6
    8500:	4008d43a 	srli	r4,r8,16
    8504:	298b383a 	mul	r5,r5,r6
    8508:	10c5883a 	add	r2,r2,r3
    850c:	2089883a 	add	r4,r4,r2
    8510:	20c0022e 	bgeu	r4,r3,851c <__umoddi3+0x494>
    8514:	00800074 	movhi	r2,1
    8518:	288b883a 	add	r5,r5,r2
    851c:	2004d43a 	srli	r2,r4,16
    8520:	2008943a 	slli	r4,r4,16
    8524:	40ffffcc 	andi	r3,r8,65535
    8528:	288b883a 	add	r5,r5,r2
    852c:	20c9883a 	add	r4,r4,r3
    8530:	39400b36 	bltu	r7,r5,8560 <__umoddi3+0x4d8>
    8534:	39403d26 	beq	r7,r5,862c <__umoddi3+0x5a4>
    8538:	394bc83a 	sub	r5,r7,r5
    853c:	00000f06 	br	857c <__umoddi3+0x4f4>
    8540:	30c5c83a 	sub	r2,r6,r3
    8544:	1839883a 	mov	fp,r3
    8548:	b084d83a 	srl	r2,r22,r2
    854c:	a0c6983a 	sll	r3,r20,r3
    8550:	8720983a 	sll	r16,r16,fp
    8554:	b72c983a 	sll	r22,r22,fp
    8558:	18a8b03a 	or	r20,r3,r2
    855c:	003f3a06 	br	8248 <__umoddi3+0x1c0>
    8560:	d8c00017 	ldw	r3,0(sp)
    8564:	20c5c83a 	sub	r2,r4,r3
    8568:	2089803a 	cmpltu	r4,r4,r2
    856c:	2dc7c83a 	sub	r3,r5,r23
    8570:	1907c83a 	sub	r3,r3,r4
    8574:	38cbc83a 	sub	r5,r7,r3
    8578:	1009883a 	mov	r4,r2
    857c:	b105c83a 	sub	r2,r22,r4
    8580:	b087803a 	cmpltu	r3,r22,r2
    8584:	28c7c83a 	sub	r3,r5,r3
    8588:	d9400317 	ldw	r5,12(sp)
    858c:	1544d83a 	srl	r2,r2,r21
    8590:	1948983a 	sll	r4,r3,r5
    8594:	1d46d83a 	srl	r3,r3,r21
    8598:	20a4b03a 	or	r18,r4,r2
    859c:	9011883a 	mov	r8,r18
    85a0:	1813883a 	mov	r9,r3
    85a4:	003ef606 	br	8180 <__umoddi3+0xf8>
    85a8:	01400604 	movi	r5,24
    85ac:	2805883a 	mov	r2,r5
    85b0:	003ecc06 	br	80e4 <__umoddi3+0x5c>
    85b4:	01400204 	movi	r5,8
    85b8:	2805883a 	mov	r2,r5
    85bc:	003ec906 	br	80e4 <__umoddi3+0x5c>
    85c0:	01400204 	movi	r5,8
    85c4:	2805883a 	mov	r2,r5
    85c8:	003f0106 	br	81d0 <__umoddi3+0x148>
    85cc:	01400204 	movi	r5,8
    85d0:	2805883a 	mov	r2,r5
    85d4:	003f1206 	br	8220 <__umoddi3+0x198>
    85d8:	01400604 	movi	r5,24
    85dc:	2805883a 	mov	r2,r5
    85e0:	003f0f06 	br	8220 <__umoddi3+0x198>
    85e4:	01400604 	movi	r5,24
    85e8:	2805883a 	mov	r2,r5
    85ec:	003ef806 	br	81d0 <__umoddi3+0x148>
    85f0:	3c7fb82e 	bgeu	r7,r17,84d4 <__umoddi3+0x44c>
    85f4:	843fffc4 	addi	r16,r16,-1
    85f8:	3dcf883a 	add	r7,r7,r23
    85fc:	003fb506 	br	84d4 <__umoddi3+0x44c>
    8600:	147fa22e 	bgeu	r2,r17,848c <__umoddi3+0x404>
    8604:	e73fffc4 	addi	fp,fp,-1
    8608:	15c5883a 	add	r2,r2,r23
    860c:	003f9f06 	br	848c <__umoddi3+0x404>
    8610:	147f692e 	bgeu	r2,r17,83b8 <__umoddi3+0x330>
    8614:	1405883a 	add	r2,r2,r16
    8618:	003f6706 	br	83b8 <__umoddi3+0x330>
    861c:	1405883a 	add	r2,r2,r16
    8620:	003f1906 	br	8288 <__umoddi3+0x200>
    8624:	1405883a 	add	r2,r2,r16
    8628:	003ec906 	br	8150 <__umoddi3+0xc8>
    862c:	b13fcc36 	bltu	r22,r4,8560 <__umoddi3+0x4d8>
    8630:	000b883a 	mov	r5,zero
    8634:	003fd106 	br	857c <__umoddi3+0x4f4>

00008638 <_fpadd_parts>:
    8638:	defff804 	addi	sp,sp,-32
    863c:	dcc00315 	stw	r19,12(sp)
    8640:	2027883a 	mov	r19,r4
    8644:	21000017 	ldw	r4,0(r4)
    8648:	00c00044 	movi	r3,1
    864c:	dd400515 	stw	r21,20(sp)
    8650:	dd000415 	stw	r20,16(sp)
    8654:	ddc00715 	stw	r23,28(sp)
    8658:	dd800615 	stw	r22,24(sp)
    865c:	dc800215 	stw	r18,8(sp)
    8660:	dc400115 	stw	r17,4(sp)
    8664:	dc000015 	stw	r16,0(sp)
    8668:	282b883a 	mov	r21,r5
    866c:	3029883a 	mov	r20,r6
    8670:	1900632e 	bgeu	r3,r4,8800 <_fpadd_parts+0x1c8>
    8674:	28800017 	ldw	r2,0(r5)
    8678:	1880812e 	bgeu	r3,r2,8880 <_fpadd_parts+0x248>
    867c:	00c00104 	movi	r3,4
    8680:	20c0dc26 	beq	r4,r3,89f4 <_fpadd_parts+0x3bc>
    8684:	10c07e26 	beq	r2,r3,8880 <_fpadd_parts+0x248>
    8688:	00c00084 	movi	r3,2
    868c:	10c06726 	beq	r2,r3,882c <_fpadd_parts+0x1f4>
    8690:	20c07b26 	beq	r4,r3,8880 <_fpadd_parts+0x248>
    8694:	9dc00217 	ldw	r23,8(r19)
    8698:	28c00217 	ldw	r3,8(r5)
    869c:	9c400317 	ldw	r17,12(r19)
    86a0:	2bc00317 	ldw	r15,12(r5)
    86a4:	b8cdc83a 	sub	r6,r23,r3
    86a8:	9c800417 	ldw	r18,16(r19)
    86ac:	2c000417 	ldw	r16,16(r5)
    86b0:	3009883a 	mov	r4,r6
    86b4:	30009716 	blt	r6,zero,8914 <_fpadd_parts+0x2dc>
    86b8:	00800fc4 	movi	r2,63
    86bc:	11806b16 	blt	r2,r6,886c <_fpadd_parts+0x234>
    86c0:	0100a40e 	bge	zero,r4,8954 <_fpadd_parts+0x31c>
    86c4:	35bff804 	addi	r22,r6,-32
    86c8:	b000bc16 	blt	r22,zero,89bc <_fpadd_parts+0x384>
    86cc:	8596d83a 	srl	r11,r16,r22
    86d0:	0019883a 	mov	r12,zero
    86d4:	0013883a 	mov	r9,zero
    86d8:	01000044 	movi	r4,1
    86dc:	0015883a 	mov	r10,zero
    86e0:	b000be16 	blt	r22,zero,89dc <_fpadd_parts+0x3a4>
    86e4:	2590983a 	sll	r8,r4,r22
    86e8:	000f883a 	mov	r7,zero
    86ec:	00bfffc4 	movi	r2,-1
    86f0:	3889883a 	add	r4,r7,r2
    86f4:	408b883a 	add	r5,r8,r2
    86f8:	21cd803a 	cmpltu	r6,r4,r7
    86fc:	314b883a 	add	r5,r6,r5
    8700:	7904703a 	and	r2,r15,r4
    8704:	8146703a 	and	r3,r16,r5
    8708:	10c4b03a 	or	r2,r2,r3
    870c:	10000226 	beq	r2,zero,8718 <_fpadd_parts+0xe0>
    8710:	02400044 	movi	r9,1
    8714:	0015883a 	mov	r10,zero
    8718:	5a5eb03a 	or	r15,r11,r9
    871c:	62a0b03a 	or	r16,r12,r10
    8720:	99400117 	ldw	r5,4(r19)
    8724:	a8800117 	ldw	r2,4(r21)
    8728:	28806e26 	beq	r5,r2,88e4 <_fpadd_parts+0x2ac>
    872c:	28006626 	beq	r5,zero,88c8 <_fpadd_parts+0x290>
    8730:	7c45c83a 	sub	r2,r15,r17
    8734:	7889803a 	cmpltu	r4,r15,r2
    8738:	8487c83a 	sub	r3,r16,r18
    873c:	1909c83a 	sub	r4,r3,r4
    8740:	100d883a 	mov	r6,r2
    8744:	200f883a 	mov	r7,r4
    8748:	38007716 	blt	r7,zero,8928 <_fpadd_parts+0x2f0>
    874c:	a5c00215 	stw	r23,8(r20)
    8750:	a1c00415 	stw	r7,16(r20)
    8754:	a0000115 	stw	zero,4(r20)
    8758:	a1800315 	stw	r6,12(r20)
    875c:	a2000317 	ldw	r8,12(r20)
    8760:	a2400417 	ldw	r9,16(r20)
    8764:	00bfffc4 	movi	r2,-1
    8768:	408b883a 	add	r5,r8,r2
    876c:	2a09803a 	cmpltu	r4,r5,r8
    8770:	488d883a 	add	r6,r9,r2
    8774:	01c40034 	movhi	r7,4096
    8778:	39ffffc4 	addi	r7,r7,-1
    877c:	218d883a 	add	r6,r4,r6
    8780:	39801736 	bltu	r7,r6,87e0 <_fpadd_parts+0x1a8>
    8784:	31c06526 	beq	r6,r7,891c <_fpadd_parts+0x2e4>
    8788:	a3000217 	ldw	r12,8(r20)
    878c:	4209883a 	add	r4,r8,r8
    8790:	00bfffc4 	movi	r2,-1
    8794:	220f803a 	cmpltu	r7,r4,r8
    8798:	4a4b883a 	add	r5,r9,r9
    879c:	394f883a 	add	r7,r7,r5
    87a0:	2095883a 	add	r10,r4,r2
    87a4:	3897883a 	add	r11,r7,r2
    87a8:	510d803a 	cmpltu	r6,r10,r4
    87ac:	6099883a 	add	r12,r12,r2
    87b0:	32d7883a 	add	r11,r6,r11
    87b4:	00840034 	movhi	r2,4096
    87b8:	10bfffc4 	addi	r2,r2,-1
    87bc:	2011883a 	mov	r8,r4
    87c0:	3813883a 	mov	r9,r7
    87c4:	a1000315 	stw	r4,12(r20)
    87c8:	a1c00415 	stw	r7,16(r20)
    87cc:	a3000215 	stw	r12,8(r20)
    87d0:	12c00336 	bltu	r2,r11,87e0 <_fpadd_parts+0x1a8>
    87d4:	58bfed1e 	bne	r11,r2,878c <_fpadd_parts+0x154>
    87d8:	00bfff84 	movi	r2,-2
    87dc:	12bfeb2e 	bgeu	r2,r10,878c <_fpadd_parts+0x154>
    87e0:	a2800417 	ldw	r10,16(r20)
    87e4:	008000c4 	movi	r2,3
    87e8:	00c80034 	movhi	r3,8192
    87ec:	18ffffc4 	addi	r3,r3,-1
    87f0:	a2400317 	ldw	r9,12(r20)
    87f4:	a0800015 	stw	r2,0(r20)
    87f8:	1a802336 	bltu	r3,r10,8888 <_fpadd_parts+0x250>
    87fc:	a027883a 	mov	r19,r20
    8800:	9805883a 	mov	r2,r19
    8804:	ddc00717 	ldw	r23,28(sp)
    8808:	dd800617 	ldw	r22,24(sp)
    880c:	dd400517 	ldw	r21,20(sp)
    8810:	dd000417 	ldw	r20,16(sp)
    8814:	dcc00317 	ldw	r19,12(sp)
    8818:	dc800217 	ldw	r18,8(sp)
    881c:	dc400117 	ldw	r17,4(sp)
    8820:	dc000017 	ldw	r16,0(sp)
    8824:	dec00804 	addi	sp,sp,32
    8828:	f800283a 	ret
    882c:	20fff41e 	bne	r4,r3,8800 <_fpadd_parts+0x1c8>
    8830:	31000015 	stw	r4,0(r6)
    8834:	98800117 	ldw	r2,4(r19)
    8838:	30800115 	stw	r2,4(r6)
    883c:	98c00217 	ldw	r3,8(r19)
    8840:	30c00215 	stw	r3,8(r6)
    8844:	98800317 	ldw	r2,12(r19)
    8848:	30800315 	stw	r2,12(r6)
    884c:	98c00417 	ldw	r3,16(r19)
    8850:	30c00415 	stw	r3,16(r6)
    8854:	98800117 	ldw	r2,4(r19)
    8858:	28c00117 	ldw	r3,4(r5)
    885c:	3027883a 	mov	r19,r6
    8860:	10c4703a 	and	r2,r2,r3
    8864:	30800115 	stw	r2,4(r6)
    8868:	003fe506 	br	8800 <_fpadd_parts+0x1c8>
    886c:	1dc02616 	blt	r3,r23,8908 <_fpadd_parts+0x2d0>
    8870:	0023883a 	mov	r17,zero
    8874:	182f883a 	mov	r23,r3
    8878:	0025883a 	mov	r18,zero
    887c:	003fa806 	br	8720 <_fpadd_parts+0xe8>
    8880:	a827883a 	mov	r19,r21
    8884:	003fde06 	br	8800 <_fpadd_parts+0x1c8>
    8888:	01800044 	movi	r6,1
    888c:	500497fa 	slli	r2,r10,31
    8890:	4808d07a 	srli	r4,r9,1
    8894:	518ad83a 	srl	r5,r10,r6
    8898:	a2000217 	ldw	r8,8(r20)
    889c:	1108b03a 	or	r4,r2,r4
    88a0:	0007883a 	mov	r3,zero
    88a4:	4984703a 	and	r2,r9,r6
    88a8:	208cb03a 	or	r6,r4,r2
    88ac:	28ceb03a 	or	r7,r5,r3
    88b0:	42000044 	addi	r8,r8,1
    88b4:	a027883a 	mov	r19,r20
    88b8:	a1c00415 	stw	r7,16(r20)
    88bc:	a2000215 	stw	r8,8(r20)
    88c0:	a1800315 	stw	r6,12(r20)
    88c4:	003fce06 	br	8800 <_fpadd_parts+0x1c8>
    88c8:	8bc5c83a 	sub	r2,r17,r15
    88cc:	8889803a 	cmpltu	r4,r17,r2
    88d0:	9407c83a 	sub	r3,r18,r16
    88d4:	1909c83a 	sub	r4,r3,r4
    88d8:	100d883a 	mov	r6,r2
    88dc:	200f883a 	mov	r7,r4
    88e0:	003f9906 	br	8748 <_fpadd_parts+0x110>
    88e4:	7c45883a 	add	r2,r15,r17
    88e8:	13c9803a 	cmpltu	r4,r2,r15
    88ec:	8487883a 	add	r3,r16,r18
    88f0:	20c9883a 	add	r4,r4,r3
    88f4:	a1400115 	stw	r5,4(r20)
    88f8:	a5c00215 	stw	r23,8(r20)
    88fc:	a0800315 	stw	r2,12(r20)
    8900:	a1000415 	stw	r4,16(r20)
    8904:	003fb606 	br	87e0 <_fpadd_parts+0x1a8>
    8908:	001f883a 	mov	r15,zero
    890c:	0021883a 	mov	r16,zero
    8910:	003f8306 	br	8720 <_fpadd_parts+0xe8>
    8914:	018dc83a 	sub	r6,zero,r6
    8918:	003f6706 	br	86b8 <_fpadd_parts+0x80>
    891c:	00bfff84 	movi	r2,-2
    8920:	117faf36 	bltu	r2,r5,87e0 <_fpadd_parts+0x1a8>
    8924:	003f9806 	br	8788 <_fpadd_parts+0x150>
    8928:	0005883a 	mov	r2,zero
    892c:	1189c83a 	sub	r4,r2,r6
    8930:	1105803a 	cmpltu	r2,r2,r4
    8934:	01cbc83a 	sub	r5,zero,r7
    8938:	2885c83a 	sub	r2,r5,r2
    893c:	01800044 	movi	r6,1
    8940:	a1800115 	stw	r6,4(r20)
    8944:	a5c00215 	stw	r23,8(r20)
    8948:	a1000315 	stw	r4,12(r20)
    894c:	a0800415 	stw	r2,16(r20)
    8950:	003f8206 	br	875c <_fpadd_parts+0x124>
    8954:	203f7226 	beq	r4,zero,8720 <_fpadd_parts+0xe8>
    8958:	35bff804 	addi	r22,r6,-32
    895c:	b9af883a 	add	r23,r23,r6
    8960:	b0003116 	blt	r22,zero,8a28 <_fpadd_parts+0x3f0>
    8964:	959ad83a 	srl	r13,r18,r22
    8968:	001d883a 	mov	r14,zero
    896c:	000f883a 	mov	r7,zero
    8970:	01000044 	movi	r4,1
    8974:	0011883a 	mov	r8,zero
    8978:	b0002516 	blt	r22,zero,8a10 <_fpadd_parts+0x3d8>
    897c:	2594983a 	sll	r10,r4,r22
    8980:	0013883a 	mov	r9,zero
    8984:	00bfffc4 	movi	r2,-1
    8988:	4889883a 	add	r4,r9,r2
    898c:	508b883a 	add	r5,r10,r2
    8990:	224d803a 	cmpltu	r6,r4,r9
    8994:	314b883a 	add	r5,r6,r5
    8998:	8904703a 	and	r2,r17,r4
    899c:	9146703a 	and	r3,r18,r5
    89a0:	10c4b03a 	or	r2,r2,r3
    89a4:	10000226 	beq	r2,zero,89b0 <_fpadd_parts+0x378>
    89a8:	01c00044 	movi	r7,1
    89ac:	0011883a 	mov	r8,zero
    89b0:	69e2b03a 	or	r17,r13,r7
    89b4:	7224b03a 	or	r18,r14,r8
    89b8:	003f5906 	br	8720 <_fpadd_parts+0xe8>
    89bc:	8407883a 	add	r3,r16,r16
    89c0:	008007c4 	movi	r2,31
    89c4:	1185c83a 	sub	r2,r2,r6
    89c8:	1886983a 	sll	r3,r3,r2
    89cc:	7996d83a 	srl	r11,r15,r6
    89d0:	8198d83a 	srl	r12,r16,r6
    89d4:	1ad6b03a 	or	r11,r3,r11
    89d8:	003f3e06 	br	86d4 <_fpadd_parts+0x9c>
    89dc:	2006d07a 	srli	r3,r4,1
    89e0:	008007c4 	movi	r2,31
    89e4:	1185c83a 	sub	r2,r2,r6
    89e8:	1890d83a 	srl	r8,r3,r2
    89ec:	218e983a 	sll	r7,r4,r6
    89f0:	003f3e06 	br	86ec <_fpadd_parts+0xb4>
    89f4:	113f821e 	bne	r2,r4,8800 <_fpadd_parts+0x1c8>
    89f8:	28c00117 	ldw	r3,4(r5)
    89fc:	98800117 	ldw	r2,4(r19)
    8a00:	10ff7f26 	beq	r2,r3,8800 <_fpadd_parts+0x1c8>
    8a04:	04c00074 	movhi	r19,1
    8a08:	9cc09304 	addi	r19,r19,588
    8a0c:	003f7c06 	br	8800 <_fpadd_parts+0x1c8>
    8a10:	2006d07a 	srli	r3,r4,1
    8a14:	008007c4 	movi	r2,31
    8a18:	1185c83a 	sub	r2,r2,r6
    8a1c:	1894d83a 	srl	r10,r3,r2
    8a20:	2192983a 	sll	r9,r4,r6
    8a24:	003fd706 	br	8984 <_fpadd_parts+0x34c>
    8a28:	9487883a 	add	r3,r18,r18
    8a2c:	008007c4 	movi	r2,31
    8a30:	1185c83a 	sub	r2,r2,r6
    8a34:	1886983a 	sll	r3,r3,r2
    8a38:	899ad83a 	srl	r13,r17,r6
    8a3c:	919cd83a 	srl	r14,r18,r6
    8a40:	1b5ab03a 	or	r13,r3,r13
    8a44:	003fc906 	br	896c <_fpadd_parts+0x334>

00008a48 <__subdf3>:
    8a48:	deffea04 	addi	sp,sp,-88
    8a4c:	dcc01415 	stw	r19,80(sp)
    8a50:	dcc00404 	addi	r19,sp,16
    8a54:	2011883a 	mov	r8,r4
    8a58:	2813883a 	mov	r9,r5
    8a5c:	dc401315 	stw	r17,76(sp)
    8a60:	d809883a 	mov	r4,sp
    8a64:	980b883a 	mov	r5,r19
    8a68:	dc400904 	addi	r17,sp,36
    8a6c:	dfc01515 	stw	ra,84(sp)
    8a70:	da400115 	stw	r9,4(sp)
    8a74:	d9c00315 	stw	r7,12(sp)
    8a78:	da000015 	stw	r8,0(sp)
    8a7c:	d9800215 	stw	r6,8(sp)
    8a80:	0009b900 	call	9b90 <__unpack_d>
    8a84:	d9000204 	addi	r4,sp,8
    8a88:	880b883a 	mov	r5,r17
    8a8c:	0009b900 	call	9b90 <__unpack_d>
    8a90:	d8800a17 	ldw	r2,40(sp)
    8a94:	880b883a 	mov	r5,r17
    8a98:	9809883a 	mov	r4,r19
    8a9c:	d9800e04 	addi	r6,sp,56
    8aa0:	1080005c 	xori	r2,r2,1
    8aa4:	d8800a15 	stw	r2,40(sp)
    8aa8:	00086380 	call	8638 <_fpadd_parts>
    8aac:	1009883a 	mov	r4,r2
    8ab0:	000987c0 	call	987c <__pack_d>
    8ab4:	dfc01517 	ldw	ra,84(sp)
    8ab8:	dcc01417 	ldw	r19,80(sp)
    8abc:	dc401317 	ldw	r17,76(sp)
    8ac0:	dec01604 	addi	sp,sp,88
    8ac4:	f800283a 	ret

00008ac8 <__adddf3>:
    8ac8:	deffea04 	addi	sp,sp,-88
    8acc:	dcc01415 	stw	r19,80(sp)
    8ad0:	dcc00404 	addi	r19,sp,16
    8ad4:	2011883a 	mov	r8,r4
    8ad8:	2813883a 	mov	r9,r5
    8adc:	dc401315 	stw	r17,76(sp)
    8ae0:	d809883a 	mov	r4,sp
    8ae4:	980b883a 	mov	r5,r19
    8ae8:	dc400904 	addi	r17,sp,36
    8aec:	dfc01515 	stw	ra,84(sp)
    8af0:	da400115 	stw	r9,4(sp)
    8af4:	d9c00315 	stw	r7,12(sp)
    8af8:	da000015 	stw	r8,0(sp)
    8afc:	d9800215 	stw	r6,8(sp)
    8b00:	0009b900 	call	9b90 <__unpack_d>
    8b04:	d9000204 	addi	r4,sp,8
    8b08:	880b883a 	mov	r5,r17
    8b0c:	0009b900 	call	9b90 <__unpack_d>
    8b10:	d9800e04 	addi	r6,sp,56
    8b14:	9809883a 	mov	r4,r19
    8b18:	880b883a 	mov	r5,r17
    8b1c:	00086380 	call	8638 <_fpadd_parts>
    8b20:	1009883a 	mov	r4,r2
    8b24:	000987c0 	call	987c <__pack_d>
    8b28:	dfc01517 	ldw	ra,84(sp)
    8b2c:	dcc01417 	ldw	r19,80(sp)
    8b30:	dc401317 	ldw	r17,76(sp)
    8b34:	dec01604 	addi	sp,sp,88
    8b38:	f800283a 	ret

00008b3c <__muldf3>:
    8b3c:	deffe004 	addi	sp,sp,-128
    8b40:	dc401815 	stw	r17,96(sp)
    8b44:	dc400404 	addi	r17,sp,16
    8b48:	2011883a 	mov	r8,r4
    8b4c:	2813883a 	mov	r9,r5
    8b50:	dc001715 	stw	r16,92(sp)
    8b54:	d809883a 	mov	r4,sp
    8b58:	880b883a 	mov	r5,r17
    8b5c:	dc000904 	addi	r16,sp,36
    8b60:	dfc01f15 	stw	ra,124(sp)
    8b64:	da400115 	stw	r9,4(sp)
    8b68:	d9c00315 	stw	r7,12(sp)
    8b6c:	da000015 	stw	r8,0(sp)
    8b70:	d9800215 	stw	r6,8(sp)
    8b74:	ddc01e15 	stw	r23,120(sp)
    8b78:	dd801d15 	stw	r22,116(sp)
    8b7c:	dd401c15 	stw	r21,112(sp)
    8b80:	dd001b15 	stw	r20,108(sp)
    8b84:	dcc01a15 	stw	r19,104(sp)
    8b88:	dc801915 	stw	r18,100(sp)
    8b8c:	0009b900 	call	9b90 <__unpack_d>
    8b90:	d9000204 	addi	r4,sp,8
    8b94:	800b883a 	mov	r5,r16
    8b98:	0009b900 	call	9b90 <__unpack_d>
    8b9c:	d9000417 	ldw	r4,16(sp)
    8ba0:	00800044 	movi	r2,1
    8ba4:	1100102e 	bgeu	r2,r4,8be8 <__muldf3+0xac>
    8ba8:	d8c00917 	ldw	r3,36(sp)
    8bac:	10c0062e 	bgeu	r2,r3,8bc8 <__muldf3+0x8c>
    8bb0:	00800104 	movi	r2,4
    8bb4:	20800a26 	beq	r4,r2,8be0 <__muldf3+0xa4>
    8bb8:	1880cc26 	beq	r3,r2,8eec <__muldf3+0x3b0>
    8bbc:	00800084 	movi	r2,2
    8bc0:	20800926 	beq	r4,r2,8be8 <__muldf3+0xac>
    8bc4:	1880191e 	bne	r3,r2,8c2c <__muldf3+0xf0>
    8bc8:	d8c00a17 	ldw	r3,40(sp)
    8bcc:	d8800517 	ldw	r2,20(sp)
    8bd0:	8009883a 	mov	r4,r16
    8bd4:	10c4c03a 	cmpne	r2,r2,r3
    8bd8:	d8800a15 	stw	r2,40(sp)
    8bdc:	00000706 	br	8bfc <__muldf3+0xc0>
    8be0:	00800084 	movi	r2,2
    8be4:	1880c326 	beq	r3,r2,8ef4 <__muldf3+0x3b8>
    8be8:	d8800517 	ldw	r2,20(sp)
    8bec:	d8c00a17 	ldw	r3,40(sp)
    8bf0:	8809883a 	mov	r4,r17
    8bf4:	10c4c03a 	cmpne	r2,r2,r3
    8bf8:	d8800515 	stw	r2,20(sp)
    8bfc:	000987c0 	call	987c <__pack_d>
    8c00:	dfc01f17 	ldw	ra,124(sp)
    8c04:	ddc01e17 	ldw	r23,120(sp)
    8c08:	dd801d17 	ldw	r22,116(sp)
    8c0c:	dd401c17 	ldw	r21,112(sp)
    8c10:	dd001b17 	ldw	r20,108(sp)
    8c14:	dcc01a17 	ldw	r19,104(sp)
    8c18:	dc801917 	ldw	r18,100(sp)
    8c1c:	dc401817 	ldw	r17,96(sp)
    8c20:	dc001717 	ldw	r16,92(sp)
    8c24:	dec02004 	addi	sp,sp,128
    8c28:	f800283a 	ret
    8c2c:	dd800717 	ldw	r22,28(sp)
    8c30:	dc800c17 	ldw	r18,48(sp)
    8c34:	002b883a 	mov	r21,zero
    8c38:	0023883a 	mov	r17,zero
    8c3c:	a80b883a 	mov	r5,r21
    8c40:	b00d883a 	mov	r6,r22
    8c44:	880f883a 	mov	r7,r17
    8c48:	ddc00817 	ldw	r23,32(sp)
    8c4c:	dcc00d17 	ldw	r19,52(sp)
    8c50:	9009883a 	mov	r4,r18
    8c54:	00097640 	call	9764 <__muldi3>
    8c58:	001b883a 	mov	r13,zero
    8c5c:	680f883a 	mov	r7,r13
    8c60:	b009883a 	mov	r4,r22
    8c64:	000b883a 	mov	r5,zero
    8c68:	980d883a 	mov	r6,r19
    8c6c:	b82d883a 	mov	r22,r23
    8c70:	002f883a 	mov	r23,zero
    8c74:	db401615 	stw	r13,88(sp)
    8c78:	d8801315 	stw	r2,76(sp)
    8c7c:	d8c01415 	stw	r3,80(sp)
    8c80:	dcc01515 	stw	r19,84(sp)
    8c84:	00097640 	call	9764 <__muldi3>
    8c88:	b00d883a 	mov	r6,r22
    8c8c:	000b883a 	mov	r5,zero
    8c90:	9009883a 	mov	r4,r18
    8c94:	b80f883a 	mov	r7,r23
    8c98:	1021883a 	mov	r16,r2
    8c9c:	1823883a 	mov	r17,r3
    8ca0:	00097640 	call	9764 <__muldi3>
    8ca4:	8085883a 	add	r2,r16,r2
    8ca8:	140d803a 	cmpltu	r6,r2,r16
    8cac:	88c7883a 	add	r3,r17,r3
    8cb0:	30cd883a 	add	r6,r6,r3
    8cb4:	1029883a 	mov	r20,r2
    8cb8:	302b883a 	mov	r21,r6
    8cbc:	da801317 	ldw	r10,76(sp)
    8cc0:	dac01417 	ldw	r11,80(sp)
    8cc4:	db001517 	ldw	r12,84(sp)
    8cc8:	db401617 	ldw	r13,88(sp)
    8ccc:	3440612e 	bgeu	r6,r17,8e54 <__muldf3+0x318>
    8cd0:	0009883a 	mov	r4,zero
    8cd4:	5105883a 	add	r2,r10,r4
    8cd8:	128d803a 	cmpltu	r6,r2,r10
    8cdc:	5d07883a 	add	r3,r11,r20
    8ce0:	30cd883a 	add	r6,r6,r3
    8ce4:	0021883a 	mov	r16,zero
    8ce8:	04400044 	movi	r17,1
    8cec:	1025883a 	mov	r18,r2
    8cf0:	3027883a 	mov	r19,r6
    8cf4:	32c06236 	bltu	r6,r11,8e80 <__muldf3+0x344>
    8cf8:	59807a26 	beq	r11,r6,8ee4 <__muldf3+0x3a8>
    8cfc:	680b883a 	mov	r5,r13
    8d00:	b80f883a 	mov	r7,r23
    8d04:	6009883a 	mov	r4,r12
    8d08:	b00d883a 	mov	r6,r22
    8d0c:	00097640 	call	9764 <__muldi3>
    8d10:	1009883a 	mov	r4,r2
    8d14:	000f883a 	mov	r7,zero
    8d18:	1545883a 	add	r2,r2,r21
    8d1c:	1111803a 	cmpltu	r8,r2,r4
    8d20:	19c7883a 	add	r3,r3,r7
    8d24:	40c7883a 	add	r3,r8,r3
    8d28:	88cb883a 	add	r5,r17,r3
    8d2c:	d8c00617 	ldw	r3,24(sp)
    8d30:	8089883a 	add	r4,r16,r2
    8d34:	d8800b17 	ldw	r2,44(sp)
    8d38:	18c00104 	addi	r3,r3,4
    8d3c:	240d803a 	cmpltu	r6,r4,r16
    8d40:	10c7883a 	add	r3,r2,r3
    8d44:	2013883a 	mov	r9,r4
    8d48:	d8800a17 	ldw	r2,40(sp)
    8d4c:	d9000517 	ldw	r4,20(sp)
    8d50:	314d883a 	add	r6,r6,r5
    8d54:	3015883a 	mov	r10,r6
    8d58:	2088c03a 	cmpne	r4,r4,r2
    8d5c:	00880034 	movhi	r2,8192
    8d60:	10bfffc4 	addi	r2,r2,-1
    8d64:	d9000f15 	stw	r4,60(sp)
    8d68:	d8c01015 	stw	r3,64(sp)
    8d6c:	1180162e 	bgeu	r2,r6,8dc8 <__muldf3+0x28c>
    8d70:	1811883a 	mov	r8,r3
    8d74:	101f883a 	mov	r15,r2
    8d78:	980497fa 	slli	r2,r19,31
    8d7c:	9016d07a 	srli	r11,r18,1
    8d80:	500697fa 	slli	r3,r10,31
    8d84:	480cd07a 	srli	r6,r9,1
    8d88:	500ed07a 	srli	r7,r10,1
    8d8c:	12d6b03a 	or	r11,r2,r11
    8d90:	00800044 	movi	r2,1
    8d94:	198cb03a 	or	r6,r3,r6
    8d98:	4888703a 	and	r4,r9,r2
    8d9c:	9818d07a 	srli	r12,r19,1
    8da0:	001b883a 	mov	r13,zero
    8da4:	03a00034 	movhi	r14,32768
    8da8:	3013883a 	mov	r9,r6
    8dac:	3815883a 	mov	r10,r7
    8db0:	4091883a 	add	r8,r8,r2
    8db4:	20000226 	beq	r4,zero,8dc0 <__muldf3+0x284>
    8db8:	5b64b03a 	or	r18,r11,r13
    8dbc:	63a6b03a 	or	r19,r12,r14
    8dc0:	7abfed36 	bltu	r15,r10,8d78 <__muldf3+0x23c>
    8dc4:	da001015 	stw	r8,64(sp)
    8dc8:	00840034 	movhi	r2,4096
    8dcc:	10bfffc4 	addi	r2,r2,-1
    8dd0:	12801436 	bltu	r2,r10,8e24 <__muldf3+0x2e8>
    8dd4:	da001017 	ldw	r8,64(sp)
    8dd8:	101f883a 	mov	r15,r2
    8ddc:	4a45883a 	add	r2,r9,r9
    8de0:	124d803a 	cmpltu	r6,r2,r9
    8de4:	5287883a 	add	r3,r10,r10
    8de8:	9497883a 	add	r11,r18,r18
    8dec:	5c8f803a 	cmpltu	r7,r11,r18
    8df0:	9cd9883a 	add	r12,r19,r19
    8df4:	01000044 	movi	r4,1
    8df8:	30cd883a 	add	r6,r6,r3
    8dfc:	3b0f883a 	add	r7,r7,r12
    8e00:	423fffc4 	addi	r8,r8,-1
    8e04:	1013883a 	mov	r9,r2
    8e08:	3015883a 	mov	r10,r6
    8e0c:	111ab03a 	or	r13,r2,r4
    8e10:	98003016 	blt	r19,zero,8ed4 <__muldf3+0x398>
    8e14:	5825883a 	mov	r18,r11
    8e18:	3827883a 	mov	r19,r7
    8e1c:	7abfef2e 	bgeu	r15,r10,8ddc <__muldf3+0x2a0>
    8e20:	da001015 	stw	r8,64(sp)
    8e24:	00803fc4 	movi	r2,255
    8e28:	488e703a 	and	r7,r9,r2
    8e2c:	00802004 	movi	r2,128
    8e30:	0007883a 	mov	r3,zero
    8e34:	0011883a 	mov	r8,zero
    8e38:	38801826 	beq	r7,r2,8e9c <__muldf3+0x360>
    8e3c:	008000c4 	movi	r2,3
    8e40:	d9000e04 	addi	r4,sp,56
    8e44:	da801215 	stw	r10,72(sp)
    8e48:	d8800e15 	stw	r2,56(sp)
    8e4c:	da401115 	stw	r9,68(sp)
    8e50:	003f6a06 	br	8bfc <__muldf3+0xc0>
    8e54:	89802126 	beq	r17,r6,8edc <__muldf3+0x3a0>
    8e58:	0009883a 	mov	r4,zero
    8e5c:	5105883a 	add	r2,r10,r4
    8e60:	128d803a 	cmpltu	r6,r2,r10
    8e64:	5d07883a 	add	r3,r11,r20
    8e68:	30cd883a 	add	r6,r6,r3
    8e6c:	0021883a 	mov	r16,zero
    8e70:	0023883a 	mov	r17,zero
    8e74:	1025883a 	mov	r18,r2
    8e78:	3027883a 	mov	r19,r6
    8e7c:	32ff9e2e 	bgeu	r6,r11,8cf8 <__muldf3+0x1bc>
    8e80:	00800044 	movi	r2,1
    8e84:	8089883a 	add	r4,r16,r2
    8e88:	240d803a 	cmpltu	r6,r4,r16
    8e8c:	344d883a 	add	r6,r6,r17
    8e90:	2021883a 	mov	r16,r4
    8e94:	3023883a 	mov	r17,r6
    8e98:	003f9806 	br	8cfc <__muldf3+0x1c0>
    8e9c:	403fe71e 	bne	r8,zero,8e3c <__muldf3+0x300>
    8ea0:	01004004 	movi	r4,256
    8ea4:	4904703a 	and	r2,r9,r4
    8ea8:	10c4b03a 	or	r2,r2,r3
    8eac:	103fe31e 	bne	r2,zero,8e3c <__muldf3+0x300>
    8eb0:	94c4b03a 	or	r2,r18,r19
    8eb4:	103fe126 	beq	r2,zero,8e3c <__muldf3+0x300>
    8eb8:	49c5883a 	add	r2,r9,r7
    8ebc:	1251803a 	cmpltu	r8,r2,r9
    8ec0:	4291883a 	add	r8,r8,r10
    8ec4:	013fc004 	movi	r4,-256
    8ec8:	1112703a 	and	r9,r2,r4
    8ecc:	4015883a 	mov	r10,r8
    8ed0:	003fda06 	br	8e3c <__muldf3+0x300>
    8ed4:	6813883a 	mov	r9,r13
    8ed8:	003fce06 	br	8e14 <__muldf3+0x2d8>
    8edc:	143f7c36 	bltu	r2,r16,8cd0 <__muldf3+0x194>
    8ee0:	003fdd06 	br	8e58 <__muldf3+0x31c>
    8ee4:	12bf852e 	bgeu	r2,r10,8cfc <__muldf3+0x1c0>
    8ee8:	003fe506 	br	8e80 <__muldf3+0x344>
    8eec:	00800084 	movi	r2,2
    8ef0:	20bf351e 	bne	r4,r2,8bc8 <__muldf3+0x8c>
    8ef4:	01000074 	movhi	r4,1
    8ef8:	21009304 	addi	r4,r4,588
    8efc:	003f3f06 	br	8bfc <__muldf3+0xc0>

00008f00 <__divdf3>:
    8f00:	deffed04 	addi	sp,sp,-76
    8f04:	dcc01115 	stw	r19,68(sp)
    8f08:	dcc00404 	addi	r19,sp,16
    8f0c:	2011883a 	mov	r8,r4
    8f10:	2813883a 	mov	r9,r5
    8f14:	dc000e15 	stw	r16,56(sp)
    8f18:	d809883a 	mov	r4,sp
    8f1c:	980b883a 	mov	r5,r19
    8f20:	dc000904 	addi	r16,sp,36
    8f24:	dfc01215 	stw	ra,72(sp)
    8f28:	da400115 	stw	r9,4(sp)
    8f2c:	d9c00315 	stw	r7,12(sp)
    8f30:	da000015 	stw	r8,0(sp)
    8f34:	d9800215 	stw	r6,8(sp)
    8f38:	dc801015 	stw	r18,64(sp)
    8f3c:	dc400f15 	stw	r17,60(sp)
    8f40:	0009b900 	call	9b90 <__unpack_d>
    8f44:	d9000204 	addi	r4,sp,8
    8f48:	800b883a 	mov	r5,r16
    8f4c:	0009b900 	call	9b90 <__unpack_d>
    8f50:	d9000417 	ldw	r4,16(sp)
    8f54:	00800044 	movi	r2,1
    8f58:	11000b2e 	bgeu	r2,r4,8f88 <__divdf3+0x88>
    8f5c:	d9400917 	ldw	r5,36(sp)
    8f60:	1140762e 	bgeu	r2,r5,913c <__divdf3+0x23c>
    8f64:	d8800517 	ldw	r2,20(sp)
    8f68:	d8c00a17 	ldw	r3,40(sp)
    8f6c:	01800104 	movi	r6,4
    8f70:	10c4f03a 	xor	r2,r2,r3
    8f74:	d8800515 	stw	r2,20(sp)
    8f78:	21800226 	beq	r4,r6,8f84 <__divdf3+0x84>
    8f7c:	00800084 	movi	r2,2
    8f80:	2080141e 	bne	r4,r2,8fd4 <__divdf3+0xd4>
    8f84:	29000926 	beq	r5,r4,8fac <__divdf3+0xac>
    8f88:	9809883a 	mov	r4,r19
    8f8c:	000987c0 	call	987c <__pack_d>
    8f90:	dfc01217 	ldw	ra,72(sp)
    8f94:	dcc01117 	ldw	r19,68(sp)
    8f98:	dc801017 	ldw	r18,64(sp)
    8f9c:	dc400f17 	ldw	r17,60(sp)
    8fa0:	dc000e17 	ldw	r16,56(sp)
    8fa4:	dec01304 	addi	sp,sp,76
    8fa8:	f800283a 	ret
    8fac:	01000074 	movhi	r4,1
    8fb0:	21009304 	addi	r4,r4,588
    8fb4:	000987c0 	call	987c <__pack_d>
    8fb8:	dfc01217 	ldw	ra,72(sp)
    8fbc:	dcc01117 	ldw	r19,68(sp)
    8fc0:	dc801017 	ldw	r18,64(sp)
    8fc4:	dc400f17 	ldw	r17,60(sp)
    8fc8:	dc000e17 	ldw	r16,56(sp)
    8fcc:	dec01304 	addi	sp,sp,76
    8fd0:	f800283a 	ret
    8fd4:	29805b26 	beq	r5,r6,9144 <__divdf3+0x244>
    8fd8:	28802d26 	beq	r5,r2,9090 <__divdf3+0x190>
    8fdc:	d8c00617 	ldw	r3,24(sp)
    8fe0:	d8800b17 	ldw	r2,44(sp)
    8fe4:	d9c00817 	ldw	r7,32(sp)
    8fe8:	dc400d17 	ldw	r17,52(sp)
    8fec:	188bc83a 	sub	r5,r3,r2
    8ff0:	d9800717 	ldw	r6,28(sp)
    8ff4:	dc000c17 	ldw	r16,48(sp)
    8ff8:	d9400615 	stw	r5,24(sp)
    8ffc:	3c403836 	bltu	r7,r17,90e0 <__divdf3+0x1e0>
    9000:	89c03626 	beq	r17,r7,90dc <__divdf3+0x1dc>
    9004:	0015883a 	mov	r10,zero
    9008:	001d883a 	mov	r14,zero
    900c:	02c40034 	movhi	r11,4096
    9010:	001f883a 	mov	r15,zero
    9014:	003f883a 	mov	ra,zero
    9018:	04800f44 	movi	r18,61
    901c:	00000f06 	br	905c <__divdf3+0x15c>
    9020:	601d883a 	mov	r14,r12
    9024:	681f883a 	mov	r15,r13
    9028:	400d883a 	mov	r6,r8
    902c:	100f883a 	mov	r7,r2
    9030:	3191883a 	add	r8,r6,r6
    9034:	5808d07a 	srli	r4,r11,1
    9038:	4185803a 	cmpltu	r2,r8,r6
    903c:	39d3883a 	add	r9,r7,r7
    9040:	28c6b03a 	or	r3,r5,r3
    9044:	1245883a 	add	r2,r2,r9
    9048:	1815883a 	mov	r10,r3
    904c:	2017883a 	mov	r11,r4
    9050:	400d883a 	mov	r6,r8
    9054:	100f883a 	mov	r7,r2
    9058:	fc801726 	beq	ra,r18,90b8 <__divdf3+0x1b8>
    905c:	580a97fa 	slli	r5,r11,31
    9060:	5006d07a 	srli	r3,r10,1
    9064:	ffc00044 	addi	ra,ra,1
    9068:	3c7ff136 	bltu	r7,r17,9030 <__divdf3+0x130>
    906c:	3411c83a 	sub	r8,r6,r16
    9070:	3205803a 	cmpltu	r2,r6,r8
    9074:	3c53c83a 	sub	r9,r7,r17
    9078:	7298b03a 	or	r12,r14,r10
    907c:	7adab03a 	or	r13,r15,r11
    9080:	4885c83a 	sub	r2,r9,r2
    9084:	89ffe61e 	bne	r17,r7,9020 <__divdf3+0x120>
    9088:	343fe936 	bltu	r6,r16,9030 <__divdf3+0x130>
    908c:	003fe406 	br	9020 <__divdf3+0x120>
    9090:	9809883a 	mov	r4,r19
    9094:	d9800415 	stw	r6,16(sp)
    9098:	000987c0 	call	987c <__pack_d>
    909c:	dfc01217 	ldw	ra,72(sp)
    90a0:	dcc01117 	ldw	r19,68(sp)
    90a4:	dc801017 	ldw	r18,64(sp)
    90a8:	dc400f17 	ldw	r17,60(sp)
    90ac:	dc000e17 	ldw	r16,56(sp)
    90b0:	dec01304 	addi	sp,sp,76
    90b4:	f800283a 	ret
    90b8:	00803fc4 	movi	r2,255
    90bc:	7090703a 	and	r8,r14,r2
    90c0:	00802004 	movi	r2,128
    90c4:	0007883a 	mov	r3,zero
    90c8:	0013883a 	mov	r9,zero
    90cc:	40800d26 	beq	r8,r2,9104 <__divdf3+0x204>
    90d0:	dbc00815 	stw	r15,32(sp)
    90d4:	db800715 	stw	r14,28(sp)
    90d8:	003fab06 	br	8f88 <__divdf3+0x88>
    90dc:	343fc92e 	bgeu	r6,r16,9004 <__divdf3+0x104>
    90e0:	3185883a 	add	r2,r6,r6
    90e4:	1189803a 	cmpltu	r4,r2,r6
    90e8:	39c7883a 	add	r3,r7,r7
    90ec:	20c9883a 	add	r4,r4,r3
    90f0:	297fffc4 	addi	r5,r5,-1
    90f4:	100d883a 	mov	r6,r2
    90f8:	200f883a 	mov	r7,r4
    90fc:	d9400615 	stw	r5,24(sp)
    9100:	003fc006 	br	9004 <__divdf3+0x104>
    9104:	483ff21e 	bne	r9,zero,90d0 <__divdf3+0x1d0>
    9108:	01004004 	movi	r4,256
    910c:	7104703a 	and	r2,r14,r4
    9110:	10c4b03a 	or	r2,r2,r3
    9114:	103fee1e 	bne	r2,zero,90d0 <__divdf3+0x1d0>
    9118:	31c4b03a 	or	r2,r6,r7
    911c:	103fec26 	beq	r2,zero,90d0 <__divdf3+0x1d0>
    9120:	7205883a 	add	r2,r14,r8
    9124:	1391803a 	cmpltu	r8,r2,r14
    9128:	43d1883a 	add	r8,r8,r15
    912c:	013fc004 	movi	r4,-256
    9130:	111c703a 	and	r14,r2,r4
    9134:	401f883a 	mov	r15,r8
    9138:	003fe506 	br	90d0 <__divdf3+0x1d0>
    913c:	8009883a 	mov	r4,r16
    9140:	003f9206 	br	8f8c <__divdf3+0x8c>
    9144:	9809883a 	mov	r4,r19
    9148:	d8000715 	stw	zero,28(sp)
    914c:	d8000815 	stw	zero,32(sp)
    9150:	d8000615 	stw	zero,24(sp)
    9154:	003f8d06 	br	8f8c <__divdf3+0x8c>

00009158 <__eqdf2>:
    9158:	deffef04 	addi	sp,sp,-68
    915c:	dc400f15 	stw	r17,60(sp)
    9160:	dc400404 	addi	r17,sp,16
    9164:	2005883a 	mov	r2,r4
    9168:	2807883a 	mov	r3,r5
    916c:	dc000e15 	stw	r16,56(sp)
    9170:	d809883a 	mov	r4,sp
    9174:	880b883a 	mov	r5,r17
    9178:	dc000904 	addi	r16,sp,36
    917c:	d8c00115 	stw	r3,4(sp)
    9180:	d8800015 	stw	r2,0(sp)
    9184:	d9800215 	stw	r6,8(sp)
    9188:	dfc01015 	stw	ra,64(sp)
    918c:	d9c00315 	stw	r7,12(sp)
    9190:	0009b900 	call	9b90 <__unpack_d>
    9194:	d9000204 	addi	r4,sp,8
    9198:	800b883a 	mov	r5,r16
    919c:	0009b900 	call	9b90 <__unpack_d>
    91a0:	d8800417 	ldw	r2,16(sp)
    91a4:	00c00044 	movi	r3,1
    91a8:	180d883a 	mov	r6,r3
    91ac:	1880062e 	bgeu	r3,r2,91c8 <__eqdf2+0x70>
    91b0:	d8800917 	ldw	r2,36(sp)
    91b4:	8809883a 	mov	r4,r17
    91b8:	800b883a 	mov	r5,r16
    91bc:	1880022e 	bgeu	r3,r2,91c8 <__eqdf2+0x70>
    91c0:	0009cc80 	call	9cc8 <__fpcmp_parts_d>
    91c4:	100d883a 	mov	r6,r2
    91c8:	3005883a 	mov	r2,r6
    91cc:	dfc01017 	ldw	ra,64(sp)
    91d0:	dc400f17 	ldw	r17,60(sp)
    91d4:	dc000e17 	ldw	r16,56(sp)
    91d8:	dec01104 	addi	sp,sp,68
    91dc:	f800283a 	ret

000091e0 <__nedf2>:
    91e0:	deffef04 	addi	sp,sp,-68
    91e4:	dc400f15 	stw	r17,60(sp)
    91e8:	dc400404 	addi	r17,sp,16
    91ec:	2005883a 	mov	r2,r4
    91f0:	2807883a 	mov	r3,r5
    91f4:	dc000e15 	stw	r16,56(sp)
    91f8:	d809883a 	mov	r4,sp
    91fc:	880b883a 	mov	r5,r17
    9200:	dc000904 	addi	r16,sp,36
    9204:	d8c00115 	stw	r3,4(sp)
    9208:	d8800015 	stw	r2,0(sp)
    920c:	d9800215 	stw	r6,8(sp)
    9210:	dfc01015 	stw	ra,64(sp)
    9214:	d9c00315 	stw	r7,12(sp)
    9218:	0009b900 	call	9b90 <__unpack_d>
    921c:	d9000204 	addi	r4,sp,8
    9220:	800b883a 	mov	r5,r16
    9224:	0009b900 	call	9b90 <__unpack_d>
    9228:	d8800417 	ldw	r2,16(sp)
    922c:	00c00044 	movi	r3,1
    9230:	180d883a 	mov	r6,r3
    9234:	1880062e 	bgeu	r3,r2,9250 <__nedf2+0x70>
    9238:	d8800917 	ldw	r2,36(sp)
    923c:	8809883a 	mov	r4,r17
    9240:	800b883a 	mov	r5,r16
    9244:	1880022e 	bgeu	r3,r2,9250 <__nedf2+0x70>
    9248:	0009cc80 	call	9cc8 <__fpcmp_parts_d>
    924c:	100d883a 	mov	r6,r2
    9250:	3005883a 	mov	r2,r6
    9254:	dfc01017 	ldw	ra,64(sp)
    9258:	dc400f17 	ldw	r17,60(sp)
    925c:	dc000e17 	ldw	r16,56(sp)
    9260:	dec01104 	addi	sp,sp,68
    9264:	f800283a 	ret

00009268 <__gtdf2>:
    9268:	deffef04 	addi	sp,sp,-68
    926c:	dc400f15 	stw	r17,60(sp)
    9270:	dc400404 	addi	r17,sp,16
    9274:	2005883a 	mov	r2,r4
    9278:	2807883a 	mov	r3,r5
    927c:	dc000e15 	stw	r16,56(sp)
    9280:	d809883a 	mov	r4,sp
    9284:	880b883a 	mov	r5,r17
    9288:	dc000904 	addi	r16,sp,36
    928c:	d8c00115 	stw	r3,4(sp)
    9290:	d8800015 	stw	r2,0(sp)
    9294:	d9800215 	stw	r6,8(sp)
    9298:	dfc01015 	stw	ra,64(sp)
    929c:	d9c00315 	stw	r7,12(sp)
    92a0:	0009b900 	call	9b90 <__unpack_d>
    92a4:	d9000204 	addi	r4,sp,8
    92a8:	800b883a 	mov	r5,r16
    92ac:	0009b900 	call	9b90 <__unpack_d>
    92b0:	d8800417 	ldw	r2,16(sp)
    92b4:	00c00044 	movi	r3,1
    92b8:	01bfffc4 	movi	r6,-1
    92bc:	1880062e 	bgeu	r3,r2,92d8 <__gtdf2+0x70>
    92c0:	d8800917 	ldw	r2,36(sp)
    92c4:	8809883a 	mov	r4,r17
    92c8:	800b883a 	mov	r5,r16
    92cc:	1880022e 	bgeu	r3,r2,92d8 <__gtdf2+0x70>
    92d0:	0009cc80 	call	9cc8 <__fpcmp_parts_d>
    92d4:	100d883a 	mov	r6,r2
    92d8:	3005883a 	mov	r2,r6
    92dc:	dfc01017 	ldw	ra,64(sp)
    92e0:	dc400f17 	ldw	r17,60(sp)
    92e4:	dc000e17 	ldw	r16,56(sp)
    92e8:	dec01104 	addi	sp,sp,68
    92ec:	f800283a 	ret

000092f0 <__gedf2>:
    92f0:	deffef04 	addi	sp,sp,-68
    92f4:	dc400f15 	stw	r17,60(sp)
    92f8:	dc400404 	addi	r17,sp,16
    92fc:	2005883a 	mov	r2,r4
    9300:	2807883a 	mov	r3,r5
    9304:	dc000e15 	stw	r16,56(sp)
    9308:	d809883a 	mov	r4,sp
    930c:	880b883a 	mov	r5,r17
    9310:	dc000904 	addi	r16,sp,36
    9314:	d8c00115 	stw	r3,4(sp)
    9318:	d8800015 	stw	r2,0(sp)
    931c:	d9800215 	stw	r6,8(sp)
    9320:	dfc01015 	stw	ra,64(sp)
    9324:	d9c00315 	stw	r7,12(sp)
    9328:	0009b900 	call	9b90 <__unpack_d>
    932c:	d9000204 	addi	r4,sp,8
    9330:	800b883a 	mov	r5,r16
    9334:	0009b900 	call	9b90 <__unpack_d>
    9338:	d8800417 	ldw	r2,16(sp)
    933c:	00c00044 	movi	r3,1
    9340:	01bfffc4 	movi	r6,-1
    9344:	1880062e 	bgeu	r3,r2,9360 <__gedf2+0x70>
    9348:	d8800917 	ldw	r2,36(sp)
    934c:	8809883a 	mov	r4,r17
    9350:	800b883a 	mov	r5,r16
    9354:	1880022e 	bgeu	r3,r2,9360 <__gedf2+0x70>
    9358:	0009cc80 	call	9cc8 <__fpcmp_parts_d>
    935c:	100d883a 	mov	r6,r2
    9360:	3005883a 	mov	r2,r6
    9364:	dfc01017 	ldw	ra,64(sp)
    9368:	dc400f17 	ldw	r17,60(sp)
    936c:	dc000e17 	ldw	r16,56(sp)
    9370:	dec01104 	addi	sp,sp,68
    9374:	f800283a 	ret

00009378 <__ltdf2>:
    9378:	deffef04 	addi	sp,sp,-68
    937c:	dc400f15 	stw	r17,60(sp)
    9380:	dc400404 	addi	r17,sp,16
    9384:	2005883a 	mov	r2,r4
    9388:	2807883a 	mov	r3,r5
    938c:	dc000e15 	stw	r16,56(sp)
    9390:	d809883a 	mov	r4,sp
    9394:	880b883a 	mov	r5,r17
    9398:	dc000904 	addi	r16,sp,36
    939c:	d8c00115 	stw	r3,4(sp)
    93a0:	d8800015 	stw	r2,0(sp)
    93a4:	d9800215 	stw	r6,8(sp)
    93a8:	dfc01015 	stw	ra,64(sp)
    93ac:	d9c00315 	stw	r7,12(sp)
    93b0:	0009b900 	call	9b90 <__unpack_d>
    93b4:	d9000204 	addi	r4,sp,8
    93b8:	800b883a 	mov	r5,r16
    93bc:	0009b900 	call	9b90 <__unpack_d>
    93c0:	d8800417 	ldw	r2,16(sp)
    93c4:	00c00044 	movi	r3,1
    93c8:	180d883a 	mov	r6,r3
    93cc:	1880062e 	bgeu	r3,r2,93e8 <__ltdf2+0x70>
    93d0:	d8800917 	ldw	r2,36(sp)
    93d4:	8809883a 	mov	r4,r17
    93d8:	800b883a 	mov	r5,r16
    93dc:	1880022e 	bgeu	r3,r2,93e8 <__ltdf2+0x70>
    93e0:	0009cc80 	call	9cc8 <__fpcmp_parts_d>
    93e4:	100d883a 	mov	r6,r2
    93e8:	3005883a 	mov	r2,r6
    93ec:	dfc01017 	ldw	ra,64(sp)
    93f0:	dc400f17 	ldw	r17,60(sp)
    93f4:	dc000e17 	ldw	r16,56(sp)
    93f8:	dec01104 	addi	sp,sp,68
    93fc:	f800283a 	ret

00009400 <__floatsidf>:
    9400:	2006d7fa 	srli	r3,r4,31
    9404:	defff604 	addi	sp,sp,-40
    9408:	008000c4 	movi	r2,3
    940c:	dfc00915 	stw	ra,36(sp)
    9410:	dcc00815 	stw	r19,32(sp)
    9414:	dc800715 	stw	r18,28(sp)
    9418:	dc400615 	stw	r17,24(sp)
    941c:	dc000515 	stw	r16,20(sp)
    9420:	d8800015 	stw	r2,0(sp)
    9424:	d8c00115 	stw	r3,4(sp)
    9428:	20000f1e 	bne	r4,zero,9468 <__floatsidf+0x68>
    942c:	00800084 	movi	r2,2
    9430:	d8800015 	stw	r2,0(sp)
    9434:	d809883a 	mov	r4,sp
    9438:	000987c0 	call	987c <__pack_d>
    943c:	1009883a 	mov	r4,r2
    9440:	180b883a 	mov	r5,r3
    9444:	2005883a 	mov	r2,r4
    9448:	2807883a 	mov	r3,r5
    944c:	dfc00917 	ldw	ra,36(sp)
    9450:	dcc00817 	ldw	r19,32(sp)
    9454:	dc800717 	ldw	r18,28(sp)
    9458:	dc400617 	ldw	r17,24(sp)
    945c:	dc000517 	ldw	r16,20(sp)
    9460:	dec00a04 	addi	sp,sp,40
    9464:	f800283a 	ret
    9468:	00800f04 	movi	r2,60
    946c:	1807003a 	cmpeq	r3,r3,zero
    9470:	d8800215 	stw	r2,8(sp)
    9474:	18001126 	beq	r3,zero,94bc <__floatsidf+0xbc>
    9478:	0027883a 	mov	r19,zero
    947c:	2025883a 	mov	r18,r4
    9480:	d9000315 	stw	r4,12(sp)
    9484:	dcc00415 	stw	r19,16(sp)
    9488:	00097fc0 	call	97fc <__clzsi2>
    948c:	11000744 	addi	r4,r2,29
    9490:	013fe80e 	bge	zero,r4,9434 <__floatsidf+0x34>
    9494:	10bfff44 	addi	r2,r2,-3
    9498:	10000c16 	blt	r2,zero,94cc <__floatsidf+0xcc>
    949c:	90a2983a 	sll	r17,r18,r2
    94a0:	0021883a 	mov	r16,zero
    94a4:	d8800217 	ldw	r2,8(sp)
    94a8:	dc400415 	stw	r17,16(sp)
    94ac:	dc000315 	stw	r16,12(sp)
    94b0:	1105c83a 	sub	r2,r2,r4
    94b4:	d8800215 	stw	r2,8(sp)
    94b8:	003fde06 	br	9434 <__floatsidf+0x34>
    94bc:	00a00034 	movhi	r2,32768
    94c0:	20800a26 	beq	r4,r2,94ec <__floatsidf+0xec>
    94c4:	0109c83a 	sub	r4,zero,r4
    94c8:	003feb06 	br	9478 <__floatsidf+0x78>
    94cc:	9006d07a 	srli	r3,r18,1
    94d0:	008007c4 	movi	r2,31
    94d4:	1105c83a 	sub	r2,r2,r4
    94d8:	1886d83a 	srl	r3,r3,r2
    94dc:	9922983a 	sll	r17,r19,r4
    94e0:	9120983a 	sll	r16,r18,r4
    94e4:	1c62b03a 	or	r17,r3,r17
    94e8:	003fee06 	br	94a4 <__floatsidf+0xa4>
    94ec:	0009883a 	mov	r4,zero
    94f0:	01707834 	movhi	r5,49632
    94f4:	003fd306 	br	9444 <__floatsidf+0x44>

000094f8 <__fixdfsi>:
    94f8:	defff804 	addi	sp,sp,-32
    94fc:	2005883a 	mov	r2,r4
    9500:	2807883a 	mov	r3,r5
    9504:	d809883a 	mov	r4,sp
    9508:	d9400204 	addi	r5,sp,8
    950c:	d8c00115 	stw	r3,4(sp)
    9510:	d8800015 	stw	r2,0(sp)
    9514:	dfc00715 	stw	ra,28(sp)
    9518:	0009b900 	call	9b90 <__unpack_d>
    951c:	d8c00217 	ldw	r3,8(sp)
    9520:	00800084 	movi	r2,2
    9524:	1880051e 	bne	r3,r2,953c <__fixdfsi+0x44>
    9528:	0007883a 	mov	r3,zero
    952c:	1805883a 	mov	r2,r3
    9530:	dfc00717 	ldw	ra,28(sp)
    9534:	dec00804 	addi	sp,sp,32
    9538:	f800283a 	ret
    953c:	00800044 	movi	r2,1
    9540:	10fff92e 	bgeu	r2,r3,9528 <__fixdfsi+0x30>
    9544:	00800104 	movi	r2,4
    9548:	18800426 	beq	r3,r2,955c <__fixdfsi+0x64>
    954c:	d8c00417 	ldw	r3,16(sp)
    9550:	183ff516 	blt	r3,zero,9528 <__fixdfsi+0x30>
    9554:	00800784 	movi	r2,30
    9558:	10c0080e 	bge	r2,r3,957c <__fixdfsi+0x84>
    955c:	d8800317 	ldw	r2,12(sp)
    9560:	1000121e 	bne	r2,zero,95ac <__fixdfsi+0xb4>
    9564:	00e00034 	movhi	r3,32768
    9568:	18ffffc4 	addi	r3,r3,-1
    956c:	1805883a 	mov	r2,r3
    9570:	dfc00717 	ldw	ra,28(sp)
    9574:	dec00804 	addi	sp,sp,32
    9578:	f800283a 	ret
    957c:	00800f04 	movi	r2,60
    9580:	10d1c83a 	sub	r8,r2,r3
    9584:	40bff804 	addi	r2,r8,-32
    9588:	d9800517 	ldw	r6,20(sp)
    958c:	d9c00617 	ldw	r7,24(sp)
    9590:	10000816 	blt	r2,zero,95b4 <__fixdfsi+0xbc>
    9594:	3888d83a 	srl	r4,r7,r2
    9598:	d8800317 	ldw	r2,12(sp)
    959c:	2007883a 	mov	r3,r4
    95a0:	103fe226 	beq	r2,zero,952c <__fixdfsi+0x34>
    95a4:	0107c83a 	sub	r3,zero,r4
    95a8:	003fe006 	br	952c <__fixdfsi+0x34>
    95ac:	00e00034 	movhi	r3,32768
    95b0:	003fde06 	br	952c <__fixdfsi+0x34>
    95b4:	39c7883a 	add	r3,r7,r7
    95b8:	008007c4 	movi	r2,31
    95bc:	1205c83a 	sub	r2,r2,r8
    95c0:	1886983a 	sll	r3,r3,r2
    95c4:	3208d83a 	srl	r4,r6,r8
    95c8:	1908b03a 	or	r4,r3,r4
    95cc:	003ff206 	br	9598 <__fixdfsi+0xa0>

000095d0 <__floatunsidf>:
    95d0:	defff204 	addi	sp,sp,-56
    95d4:	dfc00d15 	stw	ra,52(sp)
    95d8:	ddc00c15 	stw	r23,48(sp)
    95dc:	dd800b15 	stw	r22,44(sp)
    95e0:	dd400a15 	stw	r21,40(sp)
    95e4:	dd000915 	stw	r20,36(sp)
    95e8:	dcc00815 	stw	r19,32(sp)
    95ec:	dc800715 	stw	r18,28(sp)
    95f0:	dc400615 	stw	r17,24(sp)
    95f4:	dc000515 	stw	r16,20(sp)
    95f8:	d8000115 	stw	zero,4(sp)
    95fc:	20000f1e 	bne	r4,zero,963c <__floatunsidf+0x6c>
    9600:	00800084 	movi	r2,2
    9604:	d8800015 	stw	r2,0(sp)
    9608:	d809883a 	mov	r4,sp
    960c:	000987c0 	call	987c <__pack_d>
    9610:	dfc00d17 	ldw	ra,52(sp)
    9614:	ddc00c17 	ldw	r23,48(sp)
    9618:	dd800b17 	ldw	r22,44(sp)
    961c:	dd400a17 	ldw	r21,40(sp)
    9620:	dd000917 	ldw	r20,36(sp)
    9624:	dcc00817 	ldw	r19,32(sp)
    9628:	dc800717 	ldw	r18,28(sp)
    962c:	dc400617 	ldw	r17,24(sp)
    9630:	dc000517 	ldw	r16,20(sp)
    9634:	dec00e04 	addi	sp,sp,56
    9638:	f800283a 	ret
    963c:	008000c4 	movi	r2,3
    9640:	00c00f04 	movi	r3,60
    9644:	002f883a 	mov	r23,zero
    9648:	202d883a 	mov	r22,r4
    964c:	d8800015 	stw	r2,0(sp)
    9650:	d8c00215 	stw	r3,8(sp)
    9654:	d9000315 	stw	r4,12(sp)
    9658:	ddc00415 	stw	r23,16(sp)
    965c:	00097fc0 	call	97fc <__clzsi2>
    9660:	12400744 	addi	r9,r2,29
    9664:	48000b16 	blt	r9,zero,9694 <__floatunsidf+0xc4>
    9668:	483fe726 	beq	r9,zero,9608 <__floatunsidf+0x38>
    966c:	10bfff44 	addi	r2,r2,-3
    9670:	10002e16 	blt	r2,zero,972c <__floatunsidf+0x15c>
    9674:	b0a2983a 	sll	r17,r22,r2
    9678:	0021883a 	mov	r16,zero
    967c:	d8800217 	ldw	r2,8(sp)
    9680:	dc400415 	stw	r17,16(sp)
    9684:	dc000315 	stw	r16,12(sp)
    9688:	1245c83a 	sub	r2,r2,r9
    968c:	d8800215 	stw	r2,8(sp)
    9690:	003fdd06 	br	9608 <__floatunsidf+0x38>
    9694:	0255c83a 	sub	r10,zero,r9
    9698:	51bff804 	addi	r6,r10,-32
    969c:	30001b16 	blt	r6,zero,970c <__floatunsidf+0x13c>
    96a0:	b9a8d83a 	srl	r20,r23,r6
    96a4:	002b883a 	mov	r21,zero
    96a8:	000f883a 	mov	r7,zero
    96ac:	01000044 	movi	r4,1
    96b0:	0011883a 	mov	r8,zero
    96b4:	30002516 	blt	r6,zero,974c <__floatunsidf+0x17c>
    96b8:	21a6983a 	sll	r19,r4,r6
    96bc:	0025883a 	mov	r18,zero
    96c0:	00bfffc4 	movi	r2,-1
    96c4:	9089883a 	add	r4,r18,r2
    96c8:	988b883a 	add	r5,r19,r2
    96cc:	248d803a 	cmpltu	r6,r4,r18
    96d0:	314b883a 	add	r5,r6,r5
    96d4:	b104703a 	and	r2,r22,r4
    96d8:	b946703a 	and	r3,r23,r5
    96dc:	10c4b03a 	or	r2,r2,r3
    96e0:	10000226 	beq	r2,zero,96ec <__floatunsidf+0x11c>
    96e4:	01c00044 	movi	r7,1
    96e8:	0011883a 	mov	r8,zero
    96ec:	d9000217 	ldw	r4,8(sp)
    96f0:	a1c4b03a 	or	r2,r20,r7
    96f4:	aa06b03a 	or	r3,r21,r8
    96f8:	2249c83a 	sub	r4,r4,r9
    96fc:	d8c00415 	stw	r3,16(sp)
    9700:	d9000215 	stw	r4,8(sp)
    9704:	d8800315 	stw	r2,12(sp)
    9708:	003fbf06 	br	9608 <__floatunsidf+0x38>
    970c:	bdc7883a 	add	r3,r23,r23
    9710:	008007c4 	movi	r2,31
    9714:	1285c83a 	sub	r2,r2,r10
    9718:	1886983a 	sll	r3,r3,r2
    971c:	b2a8d83a 	srl	r20,r22,r10
    9720:	baaad83a 	srl	r21,r23,r10
    9724:	1d28b03a 	or	r20,r3,r20
    9728:	003fdf06 	br	96a8 <__floatunsidf+0xd8>
    972c:	b006d07a 	srli	r3,r22,1
    9730:	008007c4 	movi	r2,31
    9734:	1245c83a 	sub	r2,r2,r9
    9738:	1886d83a 	srl	r3,r3,r2
    973c:	ba62983a 	sll	r17,r23,r9
    9740:	b260983a 	sll	r16,r22,r9
    9744:	1c62b03a 	or	r17,r3,r17
    9748:	003fcc06 	br	967c <__floatunsidf+0xac>
    974c:	2006d07a 	srli	r3,r4,1
    9750:	008007c4 	movi	r2,31
    9754:	1285c83a 	sub	r2,r2,r10
    9758:	18a6d83a 	srl	r19,r3,r2
    975c:	22a4983a 	sll	r18,r4,r10
    9760:	003fd706 	br	96c0 <__floatunsidf+0xf0>

00009764 <__muldi3>:
    9764:	2011883a 	mov	r8,r4
    9768:	427fffcc 	andi	r9,r8,65535
    976c:	4018d43a 	srli	r12,r8,16
    9770:	32bfffcc 	andi	r10,r6,65535
    9774:	3016d43a 	srli	r11,r6,16
    9778:	4a85383a 	mul	r2,r9,r10
    977c:	6295383a 	mul	r10,r12,r10
    9780:	4ad3383a 	mul	r9,r9,r11
    9784:	113fffcc 	andi	r4,r2,65535
    9788:	1004d43a 	srli	r2,r2,16
    978c:	4a93883a 	add	r9,r9,r10
    9790:	3807883a 	mov	r3,r7
    9794:	1245883a 	add	r2,r2,r9
    9798:	280f883a 	mov	r7,r5
    979c:	180b883a 	mov	r5,r3
    97a0:	1006943a 	slli	r3,r2,16
    97a4:	defffd04 	addi	sp,sp,-12
    97a8:	dc800215 	stw	r18,8(sp)
    97ac:	1907883a 	add	r3,r3,r4
    97b0:	dc400115 	stw	r17,4(sp)
    97b4:	dc000015 	stw	r16,0(sp)
    97b8:	4165383a 	mul	r18,r8,r5
    97bc:	31e3383a 	mul	r17,r6,r7
    97c0:	1012d43a 	srli	r9,r2,16
    97c4:	62d9383a 	mul	r12,r12,r11
    97c8:	181f883a 	mov	r15,r3
    97cc:	1280022e 	bgeu	r2,r10,97d8 <__muldi3+0x74>
    97d0:	00800074 	movhi	r2,1
    97d4:	6099883a 	add	r12,r12,r2
    97d8:	624d883a 	add	r6,r12,r9
    97dc:	9187883a 	add	r3,r18,r6
    97e0:	88c7883a 	add	r3,r17,r3
    97e4:	7805883a 	mov	r2,r15
    97e8:	dc800217 	ldw	r18,8(sp)
    97ec:	dc400117 	ldw	r17,4(sp)
    97f0:	dc000017 	ldw	r16,0(sp)
    97f4:	dec00304 	addi	sp,sp,12
    97f8:	f800283a 	ret

000097fc <__clzsi2>:
    97fc:	00bfffd4 	movui	r2,65535
    9800:	11000e36 	bltu	r2,r4,983c <__clzsi2+0x40>
    9804:	00803fc4 	movi	r2,255
    9808:	01400204 	movi	r5,8
    980c:	0007883a 	mov	r3,zero
    9810:	11001036 	bltu	r2,r4,9854 <__clzsi2+0x58>
    9814:	000b883a 	mov	r5,zero
    9818:	20c6d83a 	srl	r3,r4,r3
    981c:	00800074 	movhi	r2,1
    9820:	10809804 	addi	r2,r2,608
    9824:	1887883a 	add	r3,r3,r2
    9828:	18800003 	ldbu	r2,0(r3)
    982c:	00c00804 	movi	r3,32
    9830:	2885883a 	add	r2,r5,r2
    9834:	1885c83a 	sub	r2,r3,r2
    9838:	f800283a 	ret
    983c:	01400404 	movi	r5,16
    9840:	00804034 	movhi	r2,256
    9844:	10bfffc4 	addi	r2,r2,-1
    9848:	2807883a 	mov	r3,r5
    984c:	113ff22e 	bgeu	r2,r4,9818 <__clzsi2+0x1c>
    9850:	01400604 	movi	r5,24
    9854:	2807883a 	mov	r3,r5
    9858:	20c6d83a 	srl	r3,r4,r3
    985c:	00800074 	movhi	r2,1
    9860:	10809804 	addi	r2,r2,608
    9864:	1887883a 	add	r3,r3,r2
    9868:	18800003 	ldbu	r2,0(r3)
    986c:	00c00804 	movi	r3,32
    9870:	2885883a 	add	r2,r5,r2
    9874:	1885c83a 	sub	r2,r3,r2
    9878:	f800283a 	ret

0000987c <__pack_d>:
    987c:	20c00017 	ldw	r3,0(r4)
    9880:	defffd04 	addi	sp,sp,-12
    9884:	dc000015 	stw	r16,0(sp)
    9888:	dc800215 	stw	r18,8(sp)
    988c:	dc400115 	stw	r17,4(sp)
    9890:	00800044 	movi	r2,1
    9894:	22000317 	ldw	r8,12(r4)
    9898:	001f883a 	mov	r15,zero
    989c:	22400417 	ldw	r9,16(r4)
    98a0:	24000117 	ldw	r16,4(r4)
    98a4:	10c0552e 	bgeu	r2,r3,99fc <__pack_d+0x180>
    98a8:	00800104 	movi	r2,4
    98ac:	18804f26 	beq	r3,r2,99ec <__pack_d+0x170>
    98b0:	00800084 	movi	r2,2
    98b4:	18800226 	beq	r3,r2,98c0 <__pack_d+0x44>
    98b8:	4244b03a 	or	r2,r8,r9
    98bc:	10001a1e 	bne	r2,zero,9928 <__pack_d+0xac>
    98c0:	000d883a 	mov	r6,zero
    98c4:	000f883a 	mov	r7,zero
    98c8:	0011883a 	mov	r8,zero
    98cc:	00800434 	movhi	r2,16
    98d0:	10bfffc4 	addi	r2,r2,-1
    98d4:	301d883a 	mov	r14,r6
    98d8:	3884703a 	and	r2,r7,r2
    98dc:	400a953a 	slli	r5,r8,20
    98e0:	79bffc2c 	andhi	r6,r15,65520
    98e4:	308cb03a 	or	r6,r6,r2
    98e8:	00e00434 	movhi	r3,32784
    98ec:	18ffffc4 	addi	r3,r3,-1
    98f0:	800497fa 	slli	r2,r16,31
    98f4:	30c6703a 	and	r3,r6,r3
    98f8:	1946b03a 	or	r3,r3,r5
    98fc:	01600034 	movhi	r5,32768
    9900:	297fffc4 	addi	r5,r5,-1
    9904:	194a703a 	and	r5,r3,r5
    9908:	288ab03a 	or	r5,r5,r2
    990c:	2807883a 	mov	r3,r5
    9910:	7005883a 	mov	r2,r14
    9914:	dc800217 	ldw	r18,8(sp)
    9918:	dc400117 	ldw	r17,4(sp)
    991c:	dc000017 	ldw	r16,0(sp)
    9920:	dec00304 	addi	sp,sp,12
    9924:	f800283a 	ret
    9928:	21000217 	ldw	r4,8(r4)
    992c:	00bf0084 	movi	r2,-1022
    9930:	20803f16 	blt	r4,r2,9a30 <__pack_d+0x1b4>
    9934:	0080ffc4 	movi	r2,1023
    9938:	11002c16 	blt	r2,r4,99ec <__pack_d+0x170>
    993c:	00803fc4 	movi	r2,255
    9940:	408c703a 	and	r6,r8,r2
    9944:	00802004 	movi	r2,128
    9948:	0007883a 	mov	r3,zero
    994c:	000f883a 	mov	r7,zero
    9950:	2280ffc4 	addi	r10,r4,1023
    9954:	30801e26 	beq	r6,r2,99d0 <__pack_d+0x154>
    9958:	00801fc4 	movi	r2,127
    995c:	4089883a 	add	r4,r8,r2
    9960:	220d803a 	cmpltu	r6,r4,r8
    9964:	324d883a 	add	r6,r6,r9
    9968:	2011883a 	mov	r8,r4
    996c:	3013883a 	mov	r9,r6
    9970:	00880034 	movhi	r2,8192
    9974:	10bfffc4 	addi	r2,r2,-1
    9978:	12400d36 	bltu	r2,r9,99b0 <__pack_d+0x134>
    997c:	4804963a 	slli	r2,r9,24
    9980:	400cd23a 	srli	r6,r8,8
    9984:	480ed23a 	srli	r7,r9,8
    9988:	013fffc4 	movi	r4,-1
    998c:	118cb03a 	or	r6,r2,r6
    9990:	01400434 	movhi	r5,16
    9994:	297fffc4 	addi	r5,r5,-1
    9998:	3104703a 	and	r2,r6,r4
    999c:	3946703a 	and	r3,r7,r5
    99a0:	5201ffcc 	andi	r8,r10,2047
    99a4:	100d883a 	mov	r6,r2
    99a8:	180f883a 	mov	r7,r3
    99ac:	003fc706 	br	98cc <__pack_d+0x50>
    99b0:	480897fa 	slli	r4,r9,31
    99b4:	4004d07a 	srli	r2,r8,1
    99b8:	4806d07a 	srli	r3,r9,1
    99bc:	52800044 	addi	r10,r10,1
    99c0:	2084b03a 	or	r2,r4,r2
    99c4:	1011883a 	mov	r8,r2
    99c8:	1813883a 	mov	r9,r3
    99cc:	003feb06 	br	997c <__pack_d+0x100>
    99d0:	383fe11e 	bne	r7,zero,9958 <__pack_d+0xdc>
    99d4:	01004004 	movi	r4,256
    99d8:	4104703a 	and	r2,r8,r4
    99dc:	10c4b03a 	or	r2,r2,r3
    99e0:	103fe326 	beq	r2,zero,9970 <__pack_d+0xf4>
    99e4:	3005883a 	mov	r2,r6
    99e8:	003fdc06 	br	995c <__pack_d+0xe0>
    99ec:	000d883a 	mov	r6,zero
    99f0:	000f883a 	mov	r7,zero
    99f4:	0201ffc4 	movi	r8,2047
    99f8:	003fb406 	br	98cc <__pack_d+0x50>
    99fc:	0005883a 	mov	r2,zero
    9a00:	00c00234 	movhi	r3,8
    9a04:	408cb03a 	or	r6,r8,r2
    9a08:	48ceb03a 	or	r7,r9,r3
    9a0c:	013fffc4 	movi	r4,-1
    9a10:	01400434 	movhi	r5,16
    9a14:	297fffc4 	addi	r5,r5,-1
    9a18:	3104703a 	and	r2,r6,r4
    9a1c:	3946703a 	and	r3,r7,r5
    9a20:	100d883a 	mov	r6,r2
    9a24:	180f883a 	mov	r7,r3
    9a28:	0201ffc4 	movi	r8,2047
    9a2c:	003fa706 	br	98cc <__pack_d+0x50>
    9a30:	1109c83a 	sub	r4,r2,r4
    9a34:	00800e04 	movi	r2,56
    9a38:	11004316 	blt	r2,r4,9b48 <__pack_d+0x2cc>
    9a3c:	21fff804 	addi	r7,r4,-32
    9a40:	38004516 	blt	r7,zero,9b58 <__pack_d+0x2dc>
    9a44:	49d8d83a 	srl	r12,r9,r7
    9a48:	001b883a 	mov	r13,zero
    9a4c:	0023883a 	mov	r17,zero
    9a50:	01400044 	movi	r5,1
    9a54:	0025883a 	mov	r18,zero
    9a58:	38004716 	blt	r7,zero,9b78 <__pack_d+0x2fc>
    9a5c:	29d6983a 	sll	r11,r5,r7
    9a60:	0015883a 	mov	r10,zero
    9a64:	00bfffc4 	movi	r2,-1
    9a68:	5089883a 	add	r4,r10,r2
    9a6c:	588b883a 	add	r5,r11,r2
    9a70:	228d803a 	cmpltu	r6,r4,r10
    9a74:	314b883a 	add	r5,r6,r5
    9a78:	4104703a 	and	r2,r8,r4
    9a7c:	4946703a 	and	r3,r9,r5
    9a80:	10c4b03a 	or	r2,r2,r3
    9a84:	10000226 	beq	r2,zero,9a90 <__pack_d+0x214>
    9a88:	04400044 	movi	r17,1
    9a8c:	0025883a 	mov	r18,zero
    9a90:	00803fc4 	movi	r2,255
    9a94:	644eb03a 	or	r7,r12,r17
    9a98:	3892703a 	and	r9,r7,r2
    9a9c:	00802004 	movi	r2,128
    9aa0:	6c90b03a 	or	r8,r13,r18
    9aa4:	0015883a 	mov	r10,zero
    9aa8:	48801626 	beq	r9,r2,9b04 <__pack_d+0x288>
    9aac:	01001fc4 	movi	r4,127
    9ab0:	3905883a 	add	r2,r7,r4
    9ab4:	11cd803a 	cmpltu	r6,r2,r7
    9ab8:	320d883a 	add	r6,r6,r8
    9abc:	100f883a 	mov	r7,r2
    9ac0:	00840034 	movhi	r2,4096
    9ac4:	10bfffc4 	addi	r2,r2,-1
    9ac8:	3011883a 	mov	r8,r6
    9acc:	0007883a 	mov	r3,zero
    9ad0:	11801b36 	bltu	r2,r6,9b40 <__pack_d+0x2c4>
    9ad4:	4004963a 	slli	r2,r8,24
    9ad8:	3808d23a 	srli	r4,r7,8
    9adc:	400ad23a 	srli	r5,r8,8
    9ae0:	1813883a 	mov	r9,r3
    9ae4:	1108b03a 	or	r4,r2,r4
    9ae8:	00bfffc4 	movi	r2,-1
    9aec:	00c00434 	movhi	r3,16
    9af0:	18ffffc4 	addi	r3,r3,-1
    9af4:	208c703a 	and	r6,r4,r2
    9af8:	28ce703a 	and	r7,r5,r3
    9afc:	4a01ffcc 	andi	r8,r9,2047
    9b00:	003f7206 	br	98cc <__pack_d+0x50>
    9b04:	503fe91e 	bne	r10,zero,9aac <__pack_d+0x230>
    9b08:	01004004 	movi	r4,256
    9b0c:	3904703a 	and	r2,r7,r4
    9b10:	0007883a 	mov	r3,zero
    9b14:	10c4b03a 	or	r2,r2,r3
    9b18:	10000626 	beq	r2,zero,9b34 <__pack_d+0x2b8>
    9b1c:	3a45883a 	add	r2,r7,r9
    9b20:	11cd803a 	cmpltu	r6,r2,r7
    9b24:	320d883a 	add	r6,r6,r8
    9b28:	100f883a 	mov	r7,r2
    9b2c:	3011883a 	mov	r8,r6
    9b30:	0007883a 	mov	r3,zero
    9b34:	00840034 	movhi	r2,4096
    9b38:	10bfffc4 	addi	r2,r2,-1
    9b3c:	123fe52e 	bgeu	r2,r8,9ad4 <__pack_d+0x258>
    9b40:	00c00044 	movi	r3,1
    9b44:	003fe306 	br	9ad4 <__pack_d+0x258>
    9b48:	0009883a 	mov	r4,zero
    9b4c:	0013883a 	mov	r9,zero
    9b50:	000b883a 	mov	r5,zero
    9b54:	003fe406 	br	9ae8 <__pack_d+0x26c>
    9b58:	4a47883a 	add	r3,r9,r9
    9b5c:	008007c4 	movi	r2,31
    9b60:	1105c83a 	sub	r2,r2,r4
    9b64:	1886983a 	sll	r3,r3,r2
    9b68:	4118d83a 	srl	r12,r8,r4
    9b6c:	491ad83a 	srl	r13,r9,r4
    9b70:	1b18b03a 	or	r12,r3,r12
    9b74:	003fb506 	br	9a4c <__pack_d+0x1d0>
    9b78:	2806d07a 	srli	r3,r5,1
    9b7c:	008007c4 	movi	r2,31
    9b80:	1105c83a 	sub	r2,r2,r4
    9b84:	1896d83a 	srl	r11,r3,r2
    9b88:	2914983a 	sll	r10,r5,r4
    9b8c:	003fb506 	br	9a64 <__pack_d+0x1e8>

00009b90 <__unpack_d>:
    9b90:	20c00117 	ldw	r3,4(r4)
    9b94:	22400017 	ldw	r9,0(r4)
    9b98:	00800434 	movhi	r2,16
    9b9c:	10bfffc4 	addi	r2,r2,-1
    9ba0:	1808d53a 	srli	r4,r3,20
    9ba4:	180cd7fa 	srli	r6,r3,31
    9ba8:	1894703a 	and	r10,r3,r2
    9bac:	2201ffcc 	andi	r8,r4,2047
    9bb0:	281b883a 	mov	r13,r5
    9bb4:	4817883a 	mov	r11,r9
    9bb8:	29800115 	stw	r6,4(r5)
    9bbc:	5019883a 	mov	r12,r10
    9bc0:	40001e1e 	bne	r8,zero,9c3c <__unpack_d+0xac>
    9bc4:	4a84b03a 	or	r2,r9,r10
    9bc8:	10001926 	beq	r2,zero,9c30 <__unpack_d+0xa0>
    9bcc:	4804d63a 	srli	r2,r9,24
    9bd0:	500c923a 	slli	r6,r10,8
    9bd4:	013f0084 	movi	r4,-1022
    9bd8:	00c40034 	movhi	r3,4096
    9bdc:	18ffffc4 	addi	r3,r3,-1
    9be0:	118cb03a 	or	r6,r2,r6
    9be4:	008000c4 	movi	r2,3
    9be8:	480a923a 	slli	r5,r9,8
    9bec:	68800015 	stw	r2,0(r13)
    9bf0:	69000215 	stw	r4,8(r13)
    9bf4:	19800b36 	bltu	r3,r6,9c24 <__unpack_d+0x94>
    9bf8:	200f883a 	mov	r7,r4
    9bfc:	1811883a 	mov	r8,r3
    9c00:	2945883a 	add	r2,r5,r5
    9c04:	1149803a 	cmpltu	r4,r2,r5
    9c08:	3187883a 	add	r3,r6,r6
    9c0c:	20c9883a 	add	r4,r4,r3
    9c10:	100b883a 	mov	r5,r2
    9c14:	200d883a 	mov	r6,r4
    9c18:	39ffffc4 	addi	r7,r7,-1
    9c1c:	413ff82e 	bgeu	r8,r4,9c00 <__unpack_d+0x70>
    9c20:	69c00215 	stw	r7,8(r13)
    9c24:	69800415 	stw	r6,16(r13)
    9c28:	69400315 	stw	r5,12(r13)
    9c2c:	f800283a 	ret
    9c30:	00800084 	movi	r2,2
    9c34:	28800015 	stw	r2,0(r5)
    9c38:	f800283a 	ret
    9c3c:	0081ffc4 	movi	r2,2047
    9c40:	40800f26 	beq	r8,r2,9c80 <__unpack_d+0xf0>
    9c44:	480cd63a 	srli	r6,r9,24
    9c48:	5006923a 	slli	r3,r10,8
    9c4c:	4804923a 	slli	r2,r9,8
    9c50:	0009883a 	mov	r4,zero
    9c54:	30c6b03a 	or	r3,r6,r3
    9c58:	01440034 	movhi	r5,4096
    9c5c:	110cb03a 	or	r6,r2,r4
    9c60:	423f0044 	addi	r8,r8,-1023
    9c64:	194eb03a 	or	r7,r3,r5
    9c68:	008000c4 	movi	r2,3
    9c6c:	69c00415 	stw	r7,16(r13)
    9c70:	6a000215 	stw	r8,8(r13)
    9c74:	68800015 	stw	r2,0(r13)
    9c78:	69800315 	stw	r6,12(r13)
    9c7c:	f800283a 	ret
    9c80:	4a84b03a 	or	r2,r9,r10
    9c84:	1000031e 	bne	r2,zero,9c94 <__unpack_d+0x104>
    9c88:	00800104 	movi	r2,4
    9c8c:	28800015 	stw	r2,0(r5)
    9c90:	f800283a 	ret
    9c94:	0009883a 	mov	r4,zero
    9c98:	01400234 	movhi	r5,8
    9c9c:	4904703a 	and	r2,r9,r4
    9ca0:	5146703a 	and	r3,r10,r5
    9ca4:	10c4b03a 	or	r2,r2,r3
    9ca8:	10000526 	beq	r2,zero,9cc0 <__unpack_d+0x130>
    9cac:	00800044 	movi	r2,1
    9cb0:	68800015 	stw	r2,0(r13)
    9cb4:	6b000415 	stw	r12,16(r13)
    9cb8:	6ac00315 	stw	r11,12(r13)
    9cbc:	f800283a 	ret
    9cc0:	68000015 	stw	zero,0(r13)
    9cc4:	003ffb06 	br	9cb4 <__unpack_d+0x124>

00009cc8 <__fpcmp_parts_d>:
    9cc8:	21800017 	ldw	r6,0(r4)
    9ccc:	00c00044 	movi	r3,1
    9cd0:	19800a2e 	bgeu	r3,r6,9cfc <__fpcmp_parts_d+0x34>
    9cd4:	28800017 	ldw	r2,0(r5)
    9cd8:	1880082e 	bgeu	r3,r2,9cfc <__fpcmp_parts_d+0x34>
    9cdc:	00c00104 	movi	r3,4
    9ce0:	30c02626 	beq	r6,r3,9d7c <__fpcmp_parts_d+0xb4>
    9ce4:	10c02226 	beq	r2,r3,9d70 <__fpcmp_parts_d+0xa8>
    9ce8:	00c00084 	movi	r3,2
    9cec:	30c00526 	beq	r6,r3,9d04 <__fpcmp_parts_d+0x3c>
    9cf0:	10c0071e 	bne	r2,r3,9d10 <__fpcmp_parts_d+0x48>
    9cf4:	20800117 	ldw	r2,4(r4)
    9cf8:	1000091e 	bne	r2,zero,9d20 <__fpcmp_parts_d+0x58>
    9cfc:	00800044 	movi	r2,1
    9d00:	f800283a 	ret
    9d04:	10c01a1e 	bne	r2,r3,9d70 <__fpcmp_parts_d+0xa8>
    9d08:	0005883a 	mov	r2,zero
    9d0c:	f800283a 	ret
    9d10:	22000117 	ldw	r8,4(r4)
    9d14:	28800117 	ldw	r2,4(r5)
    9d18:	40800326 	beq	r8,r2,9d28 <__fpcmp_parts_d+0x60>
    9d1c:	403ff726 	beq	r8,zero,9cfc <__fpcmp_parts_d+0x34>
    9d20:	00bfffc4 	movi	r2,-1
    9d24:	f800283a 	ret
    9d28:	20c00217 	ldw	r3,8(r4)
    9d2c:	28800217 	ldw	r2,8(r5)
    9d30:	10fffa16 	blt	r2,r3,9d1c <__fpcmp_parts_d+0x54>
    9d34:	18800916 	blt	r3,r2,9d5c <__fpcmp_parts_d+0x94>
    9d38:	21c00417 	ldw	r7,16(r4)
    9d3c:	28c00417 	ldw	r3,16(r5)
    9d40:	21800317 	ldw	r6,12(r4)
    9d44:	28800317 	ldw	r2,12(r5)
    9d48:	19fff436 	bltu	r3,r7,9d1c <__fpcmp_parts_d+0x54>
    9d4c:	38c00526 	beq	r7,r3,9d64 <__fpcmp_parts_d+0x9c>
    9d50:	38c00236 	bltu	r7,r3,9d5c <__fpcmp_parts_d+0x94>
    9d54:	19ffec1e 	bne	r3,r7,9d08 <__fpcmp_parts_d+0x40>
    9d58:	30bfeb2e 	bgeu	r6,r2,9d08 <__fpcmp_parts_d+0x40>
    9d5c:	403fe71e 	bne	r8,zero,9cfc <__fpcmp_parts_d+0x34>
    9d60:	003fef06 	br	9d20 <__fpcmp_parts_d+0x58>
    9d64:	11bffa2e 	bgeu	r2,r6,9d50 <__fpcmp_parts_d+0x88>
    9d68:	403fe426 	beq	r8,zero,9cfc <__fpcmp_parts_d+0x34>
    9d6c:	003fec06 	br	9d20 <__fpcmp_parts_d+0x58>
    9d70:	28800117 	ldw	r2,4(r5)
    9d74:	103fe11e 	bne	r2,zero,9cfc <__fpcmp_parts_d+0x34>
    9d78:	003fe906 	br	9d20 <__fpcmp_parts_d+0x58>
    9d7c:	11bfdd1e 	bne	r2,r6,9cf4 <__fpcmp_parts_d+0x2c>
    9d80:	28c00117 	ldw	r3,4(r5)
    9d84:	20800117 	ldw	r2,4(r4)
    9d88:	1885c83a 	sub	r2,r3,r2
    9d8c:	f800283a 	ret

00009d90 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9d90:	defff804 	addi	sp,sp,-32
    9d94:	dfc00715 	stw	ra,28(sp)
    9d98:	df000615 	stw	fp,24(sp)
    9d9c:	df000604 	addi	fp,sp,24
    9da0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9da4:	e0bffc17 	ldw	r2,-16(fp)
    9da8:	1004803a 	cmplt	r2,r2,zero
    9dac:	1000081e 	bne	r2,zero,9dd0 <close+0x40>
    9db0:	e0bffc17 	ldw	r2,-16(fp)
    9db4:	10800324 	muli	r2,r2,12
    9db8:	1007883a 	mov	r3,r2
    9dbc:	00800074 	movhi	r2,1
    9dc0:	1082f404 	addi	r2,r2,3024
    9dc4:	1887883a 	add	r3,r3,r2
    9dc8:	e0ffff15 	stw	r3,-4(fp)
    9dcc:	00000106 	br	9dd4 <close+0x44>
    9dd0:	e03fff15 	stw	zero,-4(fp)
    9dd4:	e0bfff17 	ldw	r2,-4(fp)
    9dd8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    9ddc:	e0bffb17 	ldw	r2,-20(fp)
    9de0:	1005003a 	cmpeq	r2,r2,zero
    9de4:	10001d1e 	bne	r2,zero,9e5c <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9de8:	e0bffb17 	ldw	r2,-20(fp)
    9dec:	10800017 	ldw	r2,0(r2)
    9df0:	10800417 	ldw	r2,16(r2)
    9df4:	1005003a 	cmpeq	r2,r2,zero
    9df8:	1000071e 	bne	r2,zero,9e18 <close+0x88>
    9dfc:	e0bffb17 	ldw	r2,-20(fp)
    9e00:	10800017 	ldw	r2,0(r2)
    9e04:	10800417 	ldw	r2,16(r2)
    9e08:	e13ffb17 	ldw	r4,-20(fp)
    9e0c:	103ee83a 	callr	r2
    9e10:	e0bffe15 	stw	r2,-8(fp)
    9e14:	00000106 	br	9e1c <close+0x8c>
    9e18:	e03ffe15 	stw	zero,-8(fp)
    9e1c:	e0bffe17 	ldw	r2,-8(fp)
    9e20:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9e24:	e13ffc17 	ldw	r4,-16(fp)
    9e28:	000a5d40 	call	a5d4 <alt_release_fd>
    if (rval < 0)
    9e2c:	e0bffa17 	ldw	r2,-24(fp)
    9e30:	1004403a 	cmpge	r2,r2,zero
    9e34:	1000071e 	bne	r2,zero,9e54 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    9e38:	0009e8c0 	call	9e8c <alt_get_errno>
    9e3c:	e0fffa17 	ldw	r3,-24(fp)
    9e40:	00c7c83a 	sub	r3,zero,r3
    9e44:	10c00015 	stw	r3,0(r2)
      return -1;
    9e48:	00bfffc4 	movi	r2,-1
    9e4c:	e0bffd15 	stw	r2,-12(fp)
    9e50:	00000806 	br	9e74 <close+0xe4>
    }
    return 0;
    9e54:	e03ffd15 	stw	zero,-12(fp)
    9e58:	00000606 	br	9e74 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9e5c:	0009e8c0 	call	9e8c <alt_get_errno>
    9e60:	1007883a 	mov	r3,r2
    9e64:	00801444 	movi	r2,81
    9e68:	18800015 	stw	r2,0(r3)
    return -1;
    9e6c:	00bfffc4 	movi	r2,-1
    9e70:	e0bffd15 	stw	r2,-12(fp)
    9e74:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    9e78:	e037883a 	mov	sp,fp
    9e7c:	dfc00117 	ldw	ra,4(sp)
    9e80:	df000017 	ldw	fp,0(sp)
    9e84:	dec00204 	addi	sp,sp,8
    9e88:	f800283a 	ret

00009e8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9e8c:	defffd04 	addi	sp,sp,-12
    9e90:	dfc00215 	stw	ra,8(sp)
    9e94:	df000115 	stw	fp,4(sp)
    9e98:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9e9c:	00800074 	movhi	r2,1
    9ea0:	10877704 	addi	r2,r2,7644
    9ea4:	10800017 	ldw	r2,0(r2)
    9ea8:	1005003a 	cmpeq	r2,r2,zero
    9eac:	1000061e 	bne	r2,zero,9ec8 <alt_get_errno+0x3c>
    9eb0:	00800074 	movhi	r2,1
    9eb4:	10877704 	addi	r2,r2,7644
    9eb8:	10800017 	ldw	r2,0(r2)
    9ebc:	103ee83a 	callr	r2
    9ec0:	e0bfff15 	stw	r2,-4(fp)
    9ec4:	00000306 	br	9ed4 <alt_get_errno+0x48>
    9ec8:	00800074 	movhi	r2,1
    9ecc:	10878704 	addi	r2,r2,7708
    9ed0:	e0bfff15 	stw	r2,-4(fp)
    9ed4:	e0bfff17 	ldw	r2,-4(fp)
}
    9ed8:	e037883a 	mov	sp,fp
    9edc:	dfc00117 	ldw	ra,4(sp)
    9ee0:	df000017 	ldw	fp,0(sp)
    9ee4:	dec00204 	addi	sp,sp,8
    9ee8:	f800283a 	ret

00009eec <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9eec:	defffc04 	addi	sp,sp,-16
    9ef0:	df000315 	stw	fp,12(sp)
    9ef4:	df000304 	addi	fp,sp,12
    9ef8:	e13ffd15 	stw	r4,-12(fp)
    9efc:	e17ffe15 	stw	r5,-8(fp)
    9f00:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9f04:	e0bfff17 	ldw	r2,-4(fp)
}
    9f08:	e037883a 	mov	sp,fp
    9f0c:	df000017 	ldw	fp,0(sp)
    9f10:	dec00104 	addi	sp,sp,4
    9f14:	f800283a 	ret

00009f18 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    9f18:	defff904 	addi	sp,sp,-28
    9f1c:	dfc00615 	stw	ra,24(sp)
    9f20:	df000515 	stw	fp,20(sp)
    9f24:	df000504 	addi	fp,sp,20
    9f28:	e13ffc15 	stw	r4,-16(fp)
    9f2c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9f30:	e0bffc17 	ldw	r2,-16(fp)
    9f34:	1004803a 	cmplt	r2,r2,zero
    9f38:	1000081e 	bne	r2,zero,9f5c <fstat+0x44>
    9f3c:	e0bffc17 	ldw	r2,-16(fp)
    9f40:	10800324 	muli	r2,r2,12
    9f44:	1007883a 	mov	r3,r2
    9f48:	00800074 	movhi	r2,1
    9f4c:	1082f404 	addi	r2,r2,3024
    9f50:	1887883a 	add	r3,r3,r2
    9f54:	e0ffff15 	stw	r3,-4(fp)
    9f58:	00000106 	br	9f60 <fstat+0x48>
    9f5c:	e03fff15 	stw	zero,-4(fp)
    9f60:	e0bfff17 	ldw	r2,-4(fp)
    9f64:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    9f68:	e0bffb17 	ldw	r2,-20(fp)
    9f6c:	1005003a 	cmpeq	r2,r2,zero
    9f70:	1000121e 	bne	r2,zero,9fbc <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    9f74:	e0bffb17 	ldw	r2,-20(fp)
    9f78:	10800017 	ldw	r2,0(r2)
    9f7c:	10800817 	ldw	r2,32(r2)
    9f80:	1005003a 	cmpeq	r2,r2,zero
    9f84:	1000081e 	bne	r2,zero,9fa8 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    9f88:	e0bffb17 	ldw	r2,-20(fp)
    9f8c:	10800017 	ldw	r2,0(r2)
    9f90:	10800817 	ldw	r2,32(r2)
    9f94:	e13ffb17 	ldw	r4,-20(fp)
    9f98:	e17ffd17 	ldw	r5,-12(fp)
    9f9c:	103ee83a 	callr	r2
    9fa0:	e0bffe15 	stw	r2,-8(fp)
    9fa4:	00000b06 	br	9fd4 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    9fa8:	e0fffd17 	ldw	r3,-12(fp)
    9fac:	00880004 	movi	r2,8192
    9fb0:	18800115 	stw	r2,4(r3)
      return 0;
    9fb4:	e03ffe15 	stw	zero,-8(fp)
    9fb8:	00000606 	br	9fd4 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9fbc:	0009fec0 	call	9fec <alt_get_errno>
    9fc0:	1007883a 	mov	r3,r2
    9fc4:	00801444 	movi	r2,81
    9fc8:	18800015 	stw	r2,0(r3)
    return -1;
    9fcc:	00bfffc4 	movi	r2,-1
    9fd0:	e0bffe15 	stw	r2,-8(fp)
    9fd4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    9fd8:	e037883a 	mov	sp,fp
    9fdc:	dfc00117 	ldw	ra,4(sp)
    9fe0:	df000017 	ldw	fp,0(sp)
    9fe4:	dec00204 	addi	sp,sp,8
    9fe8:	f800283a 	ret

00009fec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9fec:	defffd04 	addi	sp,sp,-12
    9ff0:	dfc00215 	stw	ra,8(sp)
    9ff4:	df000115 	stw	fp,4(sp)
    9ff8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9ffc:	00800074 	movhi	r2,1
    a000:	10877704 	addi	r2,r2,7644
    a004:	10800017 	ldw	r2,0(r2)
    a008:	1005003a 	cmpeq	r2,r2,zero
    a00c:	1000061e 	bne	r2,zero,a028 <alt_get_errno+0x3c>
    a010:	00800074 	movhi	r2,1
    a014:	10877704 	addi	r2,r2,7644
    a018:	10800017 	ldw	r2,0(r2)
    a01c:	103ee83a 	callr	r2
    a020:	e0bfff15 	stw	r2,-4(fp)
    a024:	00000306 	br	a034 <alt_get_errno+0x48>
    a028:	00800074 	movhi	r2,1
    a02c:	10878704 	addi	r2,r2,7708
    a030:	e0bfff15 	stw	r2,-4(fp)
    a034:	e0bfff17 	ldw	r2,-4(fp)
}
    a038:	e037883a 	mov	sp,fp
    a03c:	dfc00117 	ldw	ra,4(sp)
    a040:	df000017 	ldw	fp,0(sp)
    a044:	dec00204 	addi	sp,sp,8
    a048:	f800283a 	ret

0000a04c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    a04c:	deffeb04 	addi	sp,sp,-84
    a050:	dfc01415 	stw	ra,80(sp)
    a054:	df001315 	stw	fp,76(sp)
    a058:	df001304 	addi	fp,sp,76
    a05c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a060:	e0bffd17 	ldw	r2,-12(fp)
    a064:	1004803a 	cmplt	r2,r2,zero
    a068:	1000081e 	bne	r2,zero,a08c <isatty+0x40>
    a06c:	e0bffd17 	ldw	r2,-12(fp)
    a070:	10800324 	muli	r2,r2,12
    a074:	1007883a 	mov	r3,r2
    a078:	00800074 	movhi	r2,1
    a07c:	1082f404 	addi	r2,r2,3024
    a080:	1887883a 	add	r3,r3,r2
    a084:	e0ffff15 	stw	r3,-4(fp)
    a088:	00000106 	br	a090 <isatty+0x44>
    a08c:	e03fff15 	stw	zero,-4(fp)
    a090:	e0bfff17 	ldw	r2,-4(fp)
    a094:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    a098:	e0bfed17 	ldw	r2,-76(fp)
    a09c:	1005003a 	cmpeq	r2,r2,zero
    a0a0:	10000f1e 	bne	r2,zero,a0e0 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    a0a4:	e0bfed17 	ldw	r2,-76(fp)
    a0a8:	10800017 	ldw	r2,0(r2)
    a0ac:	10800817 	ldw	r2,32(r2)
    a0b0:	1004c03a 	cmpne	r2,r2,zero
    a0b4:	1000031e 	bne	r2,zero,a0c4 <isatty+0x78>
    {
      return 1;
    a0b8:	00800044 	movi	r2,1
    a0bc:	e0bffe15 	stw	r2,-8(fp)
    a0c0:	00000c06 	br	a0f4 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    a0c4:	e17fee04 	addi	r5,fp,-72
    a0c8:	e13ffd17 	ldw	r4,-12(fp)
    a0cc:	0009f180 	call	9f18 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    a0d0:	e0bfef17 	ldw	r2,-68(fp)
    a0d4:	10880020 	cmpeqi	r2,r2,8192
    a0d8:	e0bffe15 	stw	r2,-8(fp)
    a0dc:	00000506 	br	a0f4 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a0e0:	000a10c0 	call	a10c <alt_get_errno>
    a0e4:	1007883a 	mov	r3,r2
    a0e8:	00801444 	movi	r2,81
    a0ec:	18800015 	stw	r2,0(r3)
    return 0;
    a0f0:	e03ffe15 	stw	zero,-8(fp)
    a0f4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    a0f8:	e037883a 	mov	sp,fp
    a0fc:	dfc00117 	ldw	ra,4(sp)
    a100:	df000017 	ldw	fp,0(sp)
    a104:	dec00204 	addi	sp,sp,8
    a108:	f800283a 	ret

0000a10c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a10c:	defffd04 	addi	sp,sp,-12
    a110:	dfc00215 	stw	ra,8(sp)
    a114:	df000115 	stw	fp,4(sp)
    a118:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a11c:	00800074 	movhi	r2,1
    a120:	10877704 	addi	r2,r2,7644
    a124:	10800017 	ldw	r2,0(r2)
    a128:	1005003a 	cmpeq	r2,r2,zero
    a12c:	1000061e 	bne	r2,zero,a148 <alt_get_errno+0x3c>
    a130:	00800074 	movhi	r2,1
    a134:	10877704 	addi	r2,r2,7644
    a138:	10800017 	ldw	r2,0(r2)
    a13c:	103ee83a 	callr	r2
    a140:	e0bfff15 	stw	r2,-4(fp)
    a144:	00000306 	br	a154 <alt_get_errno+0x48>
    a148:	00800074 	movhi	r2,1
    a14c:	10878704 	addi	r2,r2,7708
    a150:	e0bfff15 	stw	r2,-4(fp)
    a154:	e0bfff17 	ldw	r2,-4(fp)
}
    a158:	e037883a 	mov	sp,fp
    a15c:	dfc00117 	ldw	ra,4(sp)
    a160:	df000017 	ldw	fp,0(sp)
    a164:	dec00204 	addi	sp,sp,8
    a168:	f800283a 	ret

0000a16c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    a16c:	defffe04 	addi	sp,sp,-8
    a170:	dfc00115 	stw	ra,4(sp)
    a174:	df000015 	stw	fp,0(sp)
    a178:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    a17c:	01000074 	movhi	r4,1
    a180:	2131fe04 	addi	r4,r4,-14344
    a184:	01400074 	movhi	r5,1
    a188:	2940e504 	addi	r5,r5,916
    a18c:	01800074 	movhi	r6,1
    a190:	31877c04 	addi	r6,r6,7664
    a194:	000a1ec0 	call	a1ec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    a198:	01000034 	movhi	r4,0
    a19c:	21000804 	addi	r4,r4,32
    a1a0:	01400034 	movhi	r5,0
    a1a4:	29400804 	addi	r5,r5,32
    a1a8:	01800034 	movhi	r6,0
    a1ac:	31806d04 	addi	r6,r6,436
    a1b0:	000a1ec0 	call	a1ec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    a1b4:	01000074 	movhi	r4,1
    a1b8:	21000004 	addi	r4,r4,0
    a1bc:	01400074 	movhi	r5,1
    a1c0:	29400004 	addi	r5,r5,0
    a1c4:	01800074 	movhi	r6,1
    a1c8:	3180e504 	addi	r6,r6,916
    a1cc:	000a1ec0 	call	a1ec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    a1d0:	000b6380 	call	b638 <alt_dcache_flush_all>
  alt_icache_flush_all();
    a1d4:	000b8300 	call	b830 <alt_icache_flush_all>
}
    a1d8:	e037883a 	mov	sp,fp
    a1dc:	dfc00117 	ldw	ra,4(sp)
    a1e0:	df000017 	ldw	fp,0(sp)
    a1e4:	dec00204 	addi	sp,sp,8
    a1e8:	f800283a 	ret

0000a1ec <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    a1ec:	defffc04 	addi	sp,sp,-16
    a1f0:	df000315 	stw	fp,12(sp)
    a1f4:	df000304 	addi	fp,sp,12
    a1f8:	e13ffd15 	stw	r4,-12(fp)
    a1fc:	e17ffe15 	stw	r5,-8(fp)
    a200:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    a204:	e0fffe17 	ldw	r3,-8(fp)
    a208:	e0bffd17 	ldw	r2,-12(fp)
    a20c:	18800e26 	beq	r3,r2,a248 <alt_load_section+0x5c>
  {
    while( to != end )
    a210:	00000a06 	br	a23c <alt_load_section+0x50>
    {
      *to++ = *from++;
    a214:	e0bffd17 	ldw	r2,-12(fp)
    a218:	10c00017 	ldw	r3,0(r2)
    a21c:	e0bffe17 	ldw	r2,-8(fp)
    a220:	10c00015 	stw	r3,0(r2)
    a224:	e0bffe17 	ldw	r2,-8(fp)
    a228:	10800104 	addi	r2,r2,4
    a22c:	e0bffe15 	stw	r2,-8(fp)
    a230:	e0bffd17 	ldw	r2,-12(fp)
    a234:	10800104 	addi	r2,r2,4
    a238:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    a23c:	e0fffe17 	ldw	r3,-8(fp)
    a240:	e0bfff17 	ldw	r2,-4(fp)
    a244:	18bff31e 	bne	r3,r2,a214 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    a248:	e037883a 	mov	sp,fp
    a24c:	df000017 	ldw	fp,0(sp)
    a250:	dec00104 	addi	sp,sp,4
    a254:	f800283a 	ret

0000a258 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    a258:	defff804 	addi	sp,sp,-32
    a25c:	dfc00715 	stw	ra,28(sp)
    a260:	df000615 	stw	fp,24(sp)
    a264:	df000604 	addi	fp,sp,24
    a268:	e13ffc15 	stw	r4,-16(fp)
    a26c:	e17ffd15 	stw	r5,-12(fp)
    a270:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    a274:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a278:	e0bffc17 	ldw	r2,-16(fp)
    a27c:	1004803a 	cmplt	r2,r2,zero
    a280:	1000081e 	bne	r2,zero,a2a4 <lseek+0x4c>
    a284:	e0bffc17 	ldw	r2,-16(fp)
    a288:	10800324 	muli	r2,r2,12
    a28c:	1007883a 	mov	r3,r2
    a290:	00800074 	movhi	r2,1
    a294:	1082f404 	addi	r2,r2,3024
    a298:	1887883a 	add	r3,r3,r2
    a29c:	e0ffff15 	stw	r3,-4(fp)
    a2a0:	00000106 	br	a2a8 <lseek+0x50>
    a2a4:	e03fff15 	stw	zero,-4(fp)
    a2a8:	e0bfff17 	ldw	r2,-4(fp)
    a2ac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    a2b0:	e0bffb17 	ldw	r2,-20(fp)
    a2b4:	1005003a 	cmpeq	r2,r2,zero
    a2b8:	1000111e 	bne	r2,zero,a300 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    a2bc:	e0bffb17 	ldw	r2,-20(fp)
    a2c0:	10800017 	ldw	r2,0(r2)
    a2c4:	10800717 	ldw	r2,28(r2)
    a2c8:	1005003a 	cmpeq	r2,r2,zero
    a2cc:	1000091e 	bne	r2,zero,a2f4 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    a2d0:	e0bffb17 	ldw	r2,-20(fp)
    a2d4:	10800017 	ldw	r2,0(r2)
    a2d8:	10800717 	ldw	r2,28(r2)
    a2dc:	e13ffb17 	ldw	r4,-20(fp)
    a2e0:	e17ffd17 	ldw	r5,-12(fp)
    a2e4:	e1bffe17 	ldw	r6,-8(fp)
    a2e8:	103ee83a 	callr	r2
    a2ec:	e0bffa15 	stw	r2,-24(fp)
    a2f0:	00000506 	br	a308 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    a2f4:	00bfde84 	movi	r2,-134
    a2f8:	e0bffa15 	stw	r2,-24(fp)
    a2fc:	00000206 	br	a308 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    a300:	00bfebc4 	movi	r2,-81
    a304:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    a308:	e0bffa17 	ldw	r2,-24(fp)
    a30c:	1004403a 	cmpge	r2,r2,zero
    a310:	1000071e 	bne	r2,zero,a330 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    a314:	000a3480 	call	a348 <alt_get_errno>
    a318:	1007883a 	mov	r3,r2
    a31c:	e0bffa17 	ldw	r2,-24(fp)
    a320:	0085c83a 	sub	r2,zero,r2
    a324:	18800015 	stw	r2,0(r3)
    rc = -1;
    a328:	00bfffc4 	movi	r2,-1
    a32c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    a330:	e0bffa17 	ldw	r2,-24(fp)
}
    a334:	e037883a 	mov	sp,fp
    a338:	dfc00117 	ldw	ra,4(sp)
    a33c:	df000017 	ldw	fp,0(sp)
    a340:	dec00204 	addi	sp,sp,8
    a344:	f800283a 	ret

0000a348 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a348:	defffd04 	addi	sp,sp,-12
    a34c:	dfc00215 	stw	ra,8(sp)
    a350:	df000115 	stw	fp,4(sp)
    a354:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a358:	00800074 	movhi	r2,1
    a35c:	10877704 	addi	r2,r2,7644
    a360:	10800017 	ldw	r2,0(r2)
    a364:	1005003a 	cmpeq	r2,r2,zero
    a368:	1000061e 	bne	r2,zero,a384 <alt_get_errno+0x3c>
    a36c:	00800074 	movhi	r2,1
    a370:	10877704 	addi	r2,r2,7644
    a374:	10800017 	ldw	r2,0(r2)
    a378:	103ee83a 	callr	r2
    a37c:	e0bfff15 	stw	r2,-4(fp)
    a380:	00000306 	br	a390 <alt_get_errno+0x48>
    a384:	00800074 	movhi	r2,1
    a388:	10878704 	addi	r2,r2,7708
    a38c:	e0bfff15 	stw	r2,-4(fp)
    a390:	e0bfff17 	ldw	r2,-4(fp)
}
    a394:	e037883a 	mov	sp,fp
    a398:	dfc00117 	ldw	ra,4(sp)
    a39c:	df000017 	ldw	fp,0(sp)
    a3a0:	dec00204 	addi	sp,sp,8
    a3a4:	f800283a 	ret

0000a3a8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    a3a8:	defffd04 	addi	sp,sp,-12
    a3ac:	dfc00215 	stw	ra,8(sp)
    a3b0:	df000115 	stw	fp,4(sp)
    a3b4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    a3b8:	0009883a 	mov	r4,zero
    a3bc:	000a8700 	call	a870 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    a3c0:	000a8a40 	call	a8a4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    a3c4:	01000074 	movhi	r4,1
    a3c8:	2100db04 	addi	r4,r4,876
    a3cc:	01400074 	movhi	r5,1
    a3d0:	2940db04 	addi	r5,r5,876
    a3d4:	01800074 	movhi	r6,1
    a3d8:	3180db04 	addi	r6,r6,876
    a3dc:	000bbf00 	call	bbf0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    a3e0:	000b7680 	call	b768 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    a3e4:	01000074 	movhi	r4,1
    a3e8:	212df304 	addi	r4,r4,-18484
    a3ec:	000c3ec0 	call	c3ec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    a3f0:	d1201c17 	ldw	r4,-32656(gp)
    a3f4:	d1601d17 	ldw	r5,-32652(gp)
    a3f8:	d1a01e17 	ldw	r6,-32648(gp)
    a3fc:	000055c0 	call	55c <main>
    a400:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    a404:	01000044 	movi	r4,1
    a408:	0009d900 	call	9d90 <close>
  exit (result);
    a40c:	e13fff17 	ldw	r4,-4(fp)
    a410:	000c4000 	call	c400 <exit>

0000a414 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    a414:	defffe04 	addi	sp,sp,-8
    a418:	df000115 	stw	fp,4(sp)
    a41c:	df000104 	addi	fp,sp,4
    a420:	e13fff15 	stw	r4,-4(fp)
}
    a424:	e037883a 	mov	sp,fp
    a428:	df000017 	ldw	fp,0(sp)
    a42c:	dec00104 	addi	sp,sp,4
    a430:	f800283a 	ret

0000a434 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    a434:	defffe04 	addi	sp,sp,-8
    a438:	df000115 	stw	fp,4(sp)
    a43c:	df000104 	addi	fp,sp,4
    a440:	e13fff15 	stw	r4,-4(fp)
}
    a444:	e037883a 	mov	sp,fp
    a448:	df000017 	ldw	fp,0(sp)
    a44c:	dec00104 	addi	sp,sp,4
    a450:	f800283a 	ret

0000a454 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    a454:	defff704 	addi	sp,sp,-36
    a458:	dfc00815 	stw	ra,32(sp)
    a45c:	df000715 	stw	fp,28(sp)
    a460:	df000704 	addi	fp,sp,28
    a464:	e13ffb15 	stw	r4,-20(fp)
    a468:	e17ffc15 	stw	r5,-16(fp)
    a46c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a470:	e0bffb17 	ldw	r2,-20(fp)
    a474:	1004803a 	cmplt	r2,r2,zero
    a478:	1000081e 	bne	r2,zero,a49c <read+0x48>
    a47c:	e0bffb17 	ldw	r2,-20(fp)
    a480:	10800324 	muli	r2,r2,12
    a484:	1007883a 	mov	r3,r2
    a488:	00800074 	movhi	r2,1
    a48c:	1082f404 	addi	r2,r2,3024
    a490:	1887883a 	add	r3,r3,r2
    a494:	e0ffff15 	stw	r3,-4(fp)
    a498:	00000106 	br	a4a0 <read+0x4c>
    a49c:	e03fff15 	stw	zero,-4(fp)
    a4a0:	e0bfff17 	ldw	r2,-4(fp)
    a4a4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    a4a8:	e0bffa17 	ldw	r2,-24(fp)
    a4ac:	1005003a 	cmpeq	r2,r2,zero
    a4b0:	1000241e 	bne	r2,zero,a544 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    a4b4:	e0bffa17 	ldw	r2,-24(fp)
    a4b8:	10800217 	ldw	r2,8(r2)
    a4bc:	108000cc 	andi	r2,r2,3
    a4c0:	10800060 	cmpeqi	r2,r2,1
    a4c4:	10001a1e 	bne	r2,zero,a530 <read+0xdc>
    a4c8:	e0bffa17 	ldw	r2,-24(fp)
    a4cc:	10800017 	ldw	r2,0(r2)
    a4d0:	10800517 	ldw	r2,20(r2)
    a4d4:	1005003a 	cmpeq	r2,r2,zero
    a4d8:	1000151e 	bne	r2,zero,a530 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    a4dc:	e0bffa17 	ldw	r2,-24(fp)
    a4e0:	10800017 	ldw	r2,0(r2)
    a4e4:	10800517 	ldw	r2,20(r2)
    a4e8:	e17ffc17 	ldw	r5,-16(fp)
    a4ec:	e1bffd17 	ldw	r6,-12(fp)
    a4f0:	e13ffa17 	ldw	r4,-24(fp)
    a4f4:	103ee83a 	callr	r2
    a4f8:	e0bff915 	stw	r2,-28(fp)
    a4fc:	e0bff917 	ldw	r2,-28(fp)
    a500:	1004403a 	cmpge	r2,r2,zero
    a504:	1000071e 	bne	r2,zero,a524 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    a508:	000a5740 	call	a574 <alt_get_errno>
    a50c:	e0fff917 	ldw	r3,-28(fp)
    a510:	00c7c83a 	sub	r3,zero,r3
    a514:	10c00015 	stw	r3,0(r2)
          return -1;
    a518:	00bfffc4 	movi	r2,-1
    a51c:	e0bffe15 	stw	r2,-8(fp)
    a520:	00000e06 	br	a55c <read+0x108>
        }
        return rval;
    a524:	e0bff917 	ldw	r2,-28(fp)
    a528:	e0bffe15 	stw	r2,-8(fp)
    a52c:	00000b06 	br	a55c <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    a530:	000a5740 	call	a574 <alt_get_errno>
    a534:	1007883a 	mov	r3,r2
    a538:	00800344 	movi	r2,13
    a53c:	18800015 	stw	r2,0(r3)
    a540:	00000406 	br	a554 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    a544:	000a5740 	call	a574 <alt_get_errno>
    a548:	1007883a 	mov	r3,r2
    a54c:	00801444 	movi	r2,81
    a550:	18800015 	stw	r2,0(r3)
  }
  return -1;
    a554:	00bfffc4 	movi	r2,-1
    a558:	e0bffe15 	stw	r2,-8(fp)
    a55c:	e0bffe17 	ldw	r2,-8(fp)
}
    a560:	e037883a 	mov	sp,fp
    a564:	dfc00117 	ldw	ra,4(sp)
    a568:	df000017 	ldw	fp,0(sp)
    a56c:	dec00204 	addi	sp,sp,8
    a570:	f800283a 	ret

0000a574 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a574:	defffd04 	addi	sp,sp,-12
    a578:	dfc00215 	stw	ra,8(sp)
    a57c:	df000115 	stw	fp,4(sp)
    a580:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a584:	00800074 	movhi	r2,1
    a588:	10877704 	addi	r2,r2,7644
    a58c:	10800017 	ldw	r2,0(r2)
    a590:	1005003a 	cmpeq	r2,r2,zero
    a594:	1000061e 	bne	r2,zero,a5b0 <alt_get_errno+0x3c>
    a598:	00800074 	movhi	r2,1
    a59c:	10877704 	addi	r2,r2,7644
    a5a0:	10800017 	ldw	r2,0(r2)
    a5a4:	103ee83a 	callr	r2
    a5a8:	e0bfff15 	stw	r2,-4(fp)
    a5ac:	00000306 	br	a5bc <alt_get_errno+0x48>
    a5b0:	00800074 	movhi	r2,1
    a5b4:	10878704 	addi	r2,r2,7708
    a5b8:	e0bfff15 	stw	r2,-4(fp)
    a5bc:	e0bfff17 	ldw	r2,-4(fp)
}
    a5c0:	e037883a 	mov	sp,fp
    a5c4:	dfc00117 	ldw	ra,4(sp)
    a5c8:	df000017 	ldw	fp,0(sp)
    a5cc:	dec00204 	addi	sp,sp,8
    a5d0:	f800283a 	ret

0000a5d4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a5d4:	defffe04 	addi	sp,sp,-8
    a5d8:	df000115 	stw	fp,4(sp)
    a5dc:	df000104 	addi	fp,sp,4
    a5e0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a5e4:	e0bfff17 	ldw	r2,-4(fp)
    a5e8:	108000d0 	cmplti	r2,r2,3
    a5ec:	10000d1e 	bne	r2,zero,a624 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    a5f0:	e0bfff17 	ldw	r2,-4(fp)
    a5f4:	00c00074 	movhi	r3,1
    a5f8:	18c2f404 	addi	r3,r3,3024
    a5fc:	10800324 	muli	r2,r2,12
    a600:	10c5883a 	add	r2,r2,r3
    a604:	10800204 	addi	r2,r2,8
    a608:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a60c:	e0bfff17 	ldw	r2,-4(fp)
    a610:	00c00074 	movhi	r3,1
    a614:	18c2f404 	addi	r3,r3,3024
    a618:	10800324 	muli	r2,r2,12
    a61c:	10c5883a 	add	r2,r2,r3
    a620:	10000015 	stw	zero,0(r2)
  }
}
    a624:	e037883a 	mov	sp,fp
    a628:	df000017 	ldw	fp,0(sp)
    a62c:	dec00104 	addi	sp,sp,4
    a630:	f800283a 	ret

0000a634 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    a634:	defff804 	addi	sp,sp,-32
    a638:	df000715 	stw	fp,28(sp)
    a63c:	df000704 	addi	fp,sp,28
    a640:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a644:	0005303a 	rdctl	r2,status
    a648:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a64c:	e0fffb17 	ldw	r3,-20(fp)
    a650:	00bfff84 	movi	r2,-2
    a654:	1884703a 	and	r2,r3,r2
    a658:	1001703a 	wrctl	status,r2
  
  return context;
    a65c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    a660:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    a664:	d0a00c17 	ldw	r2,-32720(gp)
    a668:	10c000c4 	addi	r3,r2,3
    a66c:	00bfff04 	movi	r2,-4
    a670:	1884703a 	and	r2,r3,r2
    a674:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    a678:	d0e00c17 	ldw	r3,-32720(gp)
    a67c:	e0bffe17 	ldw	r2,-8(fp)
    a680:	1887883a 	add	r3,r3,r2
    a684:	008000b4 	movhi	r2,2
    a688:	10a00004 	addi	r2,r2,-32768
    a68c:	10c0072e 	bgeu	r2,r3,a6ac <sbrk+0x78>
    a690:	e0bffd17 	ldw	r2,-12(fp)
    a694:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a698:	e0bffa17 	ldw	r2,-24(fp)
    a69c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    a6a0:	00bfffc4 	movi	r2,-1
    a6a4:	e0bfff15 	stw	r2,-4(fp)
    a6a8:	00000c06 	br	a6dc <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    a6ac:	d0a00c17 	ldw	r2,-32720(gp)
    a6b0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    a6b4:	d0e00c17 	ldw	r3,-32720(gp)
    a6b8:	e0bffe17 	ldw	r2,-8(fp)
    a6bc:	1885883a 	add	r2,r3,r2
    a6c0:	d0a00c15 	stw	r2,-32720(gp)
    a6c4:	e0bffd17 	ldw	r2,-12(fp)
    a6c8:	e0bff915 	stw	r2,-28(fp)
    a6cc:	e0bff917 	ldw	r2,-28(fp)
    a6d0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    a6d4:	e0bffc17 	ldw	r2,-16(fp)
    a6d8:	e0bfff15 	stw	r2,-4(fp)
    a6dc:	e0bfff17 	ldw	r2,-4(fp)
} 
    a6e0:	e037883a 	mov	sp,fp
    a6e4:	df000017 	ldw	fp,0(sp)
    a6e8:	dec00104 	addi	sp,sp,4
    a6ec:	f800283a 	ret

0000a6f0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    a6f0:	defff704 	addi	sp,sp,-36
    a6f4:	dfc00815 	stw	ra,32(sp)
    a6f8:	df000715 	stw	fp,28(sp)
    a6fc:	df000704 	addi	fp,sp,28
    a700:	e13ffb15 	stw	r4,-20(fp)
    a704:	e17ffc15 	stw	r5,-16(fp)
    a708:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a70c:	e0bffb17 	ldw	r2,-20(fp)
    a710:	1004803a 	cmplt	r2,r2,zero
    a714:	1000081e 	bne	r2,zero,a738 <write+0x48>
    a718:	e0bffb17 	ldw	r2,-20(fp)
    a71c:	10800324 	muli	r2,r2,12
    a720:	1007883a 	mov	r3,r2
    a724:	00800074 	movhi	r2,1
    a728:	1082f404 	addi	r2,r2,3024
    a72c:	1887883a 	add	r3,r3,r2
    a730:	e0ffff15 	stw	r3,-4(fp)
    a734:	00000106 	br	a73c <write+0x4c>
    a738:	e03fff15 	stw	zero,-4(fp)
    a73c:	e0bfff17 	ldw	r2,-4(fp)
    a740:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    a744:	e0bffa17 	ldw	r2,-24(fp)
    a748:	1005003a 	cmpeq	r2,r2,zero
    a74c:	1000241e 	bne	r2,zero,a7e0 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    a750:	e0bffa17 	ldw	r2,-24(fp)
    a754:	10800217 	ldw	r2,8(r2)
    a758:	108000cc 	andi	r2,r2,3
    a75c:	1005003a 	cmpeq	r2,r2,zero
    a760:	10001a1e 	bne	r2,zero,a7cc <write+0xdc>
    a764:	e0bffa17 	ldw	r2,-24(fp)
    a768:	10800017 	ldw	r2,0(r2)
    a76c:	10800617 	ldw	r2,24(r2)
    a770:	1005003a 	cmpeq	r2,r2,zero
    a774:	1000151e 	bne	r2,zero,a7cc <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    a778:	e0bffa17 	ldw	r2,-24(fp)
    a77c:	10800017 	ldw	r2,0(r2)
    a780:	10800617 	ldw	r2,24(r2)
    a784:	e17ffc17 	ldw	r5,-16(fp)
    a788:	e1bffd17 	ldw	r6,-12(fp)
    a78c:	e13ffa17 	ldw	r4,-24(fp)
    a790:	103ee83a 	callr	r2
    a794:	e0bff915 	stw	r2,-28(fp)
    a798:	e0bff917 	ldw	r2,-28(fp)
    a79c:	1004403a 	cmpge	r2,r2,zero
    a7a0:	1000071e 	bne	r2,zero,a7c0 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    a7a4:	000a8100 	call	a810 <alt_get_errno>
    a7a8:	e0fff917 	ldw	r3,-28(fp)
    a7ac:	00c7c83a 	sub	r3,zero,r3
    a7b0:	10c00015 	stw	r3,0(r2)
        return -1;
    a7b4:	00bfffc4 	movi	r2,-1
    a7b8:	e0bffe15 	stw	r2,-8(fp)
    a7bc:	00000e06 	br	a7f8 <write+0x108>
      }
      return rval;
    a7c0:	e0bff917 	ldw	r2,-28(fp)
    a7c4:	e0bffe15 	stw	r2,-8(fp)
    a7c8:	00000b06 	br	a7f8 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    a7cc:	000a8100 	call	a810 <alt_get_errno>
    a7d0:	1007883a 	mov	r3,r2
    a7d4:	00800344 	movi	r2,13
    a7d8:	18800015 	stw	r2,0(r3)
    a7dc:	00000406 	br	a7f0 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    a7e0:	000a8100 	call	a810 <alt_get_errno>
    a7e4:	1007883a 	mov	r3,r2
    a7e8:	00801444 	movi	r2,81
    a7ec:	18800015 	stw	r2,0(r3)
  }
  return -1;
    a7f0:	00bfffc4 	movi	r2,-1
    a7f4:	e0bffe15 	stw	r2,-8(fp)
    a7f8:	e0bffe17 	ldw	r2,-8(fp)
}
    a7fc:	e037883a 	mov	sp,fp
    a800:	dfc00117 	ldw	ra,4(sp)
    a804:	df000017 	ldw	fp,0(sp)
    a808:	dec00204 	addi	sp,sp,8
    a80c:	f800283a 	ret

0000a810 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a810:	defffd04 	addi	sp,sp,-12
    a814:	dfc00215 	stw	ra,8(sp)
    a818:	df000115 	stw	fp,4(sp)
    a81c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a820:	00800074 	movhi	r2,1
    a824:	10877704 	addi	r2,r2,7644
    a828:	10800017 	ldw	r2,0(r2)
    a82c:	1005003a 	cmpeq	r2,r2,zero
    a830:	1000061e 	bne	r2,zero,a84c <alt_get_errno+0x3c>
    a834:	00800074 	movhi	r2,1
    a838:	10877704 	addi	r2,r2,7644
    a83c:	10800017 	ldw	r2,0(r2)
    a840:	103ee83a 	callr	r2
    a844:	e0bfff15 	stw	r2,-4(fp)
    a848:	00000306 	br	a858 <alt_get_errno+0x48>
    a84c:	00800074 	movhi	r2,1
    a850:	10878704 	addi	r2,r2,7708
    a854:	e0bfff15 	stw	r2,-4(fp)
    a858:	e0bfff17 	ldw	r2,-4(fp)
}
    a85c:	e037883a 	mov	sp,fp
    a860:	dfc00117 	ldw	ra,4(sp)
    a864:	df000017 	ldw	fp,0(sp)
    a868:	dec00204 	addi	sp,sp,8
    a86c:	f800283a 	ret

0000a870 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    a870:	defffd04 	addi	sp,sp,-12
    a874:	dfc00215 	stw	ra,8(sp)
    a878:	df000115 	stw	fp,4(sp)
    a87c:	df000104 	addi	fp,sp,4
    a880:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU1, cpu1);
    a884:	000c0d00 	call	c0d0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    a888:	00800044 	movi	r2,1
    a88c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    a890:	e037883a 	mov	sp,fp
    a894:	dfc00117 	ldw	ra,4(sp)
    a898:	df000017 	ldw	fp,0(sp)
    a89c:	dec00204 	addi	sp,sp,8
    a8a0:	f800283a 	ret

0000a8a4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    a8a4:	defffe04 	addi	sp,sp,-8
    a8a8:	dfc00115 	stw	ra,4(sp)
    a8ac:	df000015 	stw	fp,0(sp)
    a8b0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    a8b4:	010000b4 	movhi	r4,2
    a8b8:	21240004 	addi	r4,r4,-28672
    a8bc:	000b883a 	mov	r5,zero
    a8c0:	01800044 	movi	r6,1
    a8c4:	01c0fa04 	movi	r7,1000
    a8c8:	000b4540 	call	b454 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1, jtag_uart_1);
    a8cc:	01000074 	movhi	r4,1
    a8d0:	21035e04 	addi	r4,r4,3448
    a8d4:	000b883a 	mov	r5,zero
    a8d8:	01800404 	movi	r6,16
    a8dc:	000aa800 	call	aa80 <altera_avalon_jtag_uart_init>
    a8e0:	01000074 	movhi	r4,1
    a8e4:	21035404 	addi	r4,r4,3408
    a8e8:	000a9000 	call	a900 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
    a8ec:	e037883a 	mov	sp,fp
    a8f0:	dfc00117 	ldw	ra,4(sp)
    a8f4:	df000017 	ldw	fp,0(sp)
    a8f8:	dec00204 	addi	sp,sp,8
    a8fc:	f800283a 	ret

0000a900 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    a900:	defffd04 	addi	sp,sp,-12
    a904:	dfc00215 	stw	ra,8(sp)
    a908:	df000115 	stw	fp,4(sp)
    a90c:	df000104 	addi	fp,sp,4
    a910:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    a914:	e13fff17 	ldw	r4,-4(fp)
    a918:	01400074 	movhi	r5,1
    a91c:	29477404 	addi	r5,r5,7632
    a920:	000b6540 	call	b654 <alt_dev_llist_insert>
}
    a924:	e037883a 	mov	sp,fp
    a928:	dfc00117 	ldw	ra,4(sp)
    a92c:	df000017 	ldw	fp,0(sp)
    a930:	dec00204 	addi	sp,sp,8
    a934:	f800283a 	ret

0000a938 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    a938:	defffa04 	addi	sp,sp,-24
    a93c:	dfc00515 	stw	ra,20(sp)
    a940:	df000415 	stw	fp,16(sp)
    a944:	df000404 	addi	fp,sp,16
    a948:	e13ffd15 	stw	r4,-12(fp)
    a94c:	e17ffe15 	stw	r5,-8(fp)
    a950:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a954:	e0bffd17 	ldw	r2,-12(fp)
    a958:	10800017 	ldw	r2,0(r2)
    a95c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    a960:	e0bffc17 	ldw	r2,-16(fp)
    a964:	11000a04 	addi	r4,r2,40
    a968:	e0bffd17 	ldw	r2,-12(fp)
    a96c:	11c00217 	ldw	r7,8(r2)
    a970:	e17ffe17 	ldw	r5,-8(fp)
    a974:	e1bfff17 	ldw	r6,-4(fp)
    a978:	000af800 	call	af80 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    a97c:	e037883a 	mov	sp,fp
    a980:	dfc00117 	ldw	ra,4(sp)
    a984:	df000017 	ldw	fp,0(sp)
    a988:	dec00204 	addi	sp,sp,8
    a98c:	f800283a 	ret

0000a990 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    a990:	defffa04 	addi	sp,sp,-24
    a994:	dfc00515 	stw	ra,20(sp)
    a998:	df000415 	stw	fp,16(sp)
    a99c:	df000404 	addi	fp,sp,16
    a9a0:	e13ffd15 	stw	r4,-12(fp)
    a9a4:	e17ffe15 	stw	r5,-8(fp)
    a9a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a9ac:	e0bffd17 	ldw	r2,-12(fp)
    a9b0:	10800017 	ldw	r2,0(r2)
    a9b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    a9b8:	e0bffc17 	ldw	r2,-16(fp)
    a9bc:	11000a04 	addi	r4,r2,40
    a9c0:	e0bffd17 	ldw	r2,-12(fp)
    a9c4:	11c00217 	ldw	r7,8(r2)
    a9c8:	e17ffe17 	ldw	r5,-8(fp)
    a9cc:	e1bfff17 	ldw	r6,-4(fp)
    a9d0:	000b1a40 	call	b1a4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    a9d4:	e037883a 	mov	sp,fp
    a9d8:	dfc00117 	ldw	ra,4(sp)
    a9dc:	df000017 	ldw	fp,0(sp)
    a9e0:	dec00204 	addi	sp,sp,8
    a9e4:	f800283a 	ret

0000a9e8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    a9e8:	defffc04 	addi	sp,sp,-16
    a9ec:	dfc00315 	stw	ra,12(sp)
    a9f0:	df000215 	stw	fp,8(sp)
    a9f4:	df000204 	addi	fp,sp,8
    a9f8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a9fc:	e0bfff17 	ldw	r2,-4(fp)
    aa00:	10800017 	ldw	r2,0(r2)
    aa04:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    aa08:	e0bffe17 	ldw	r2,-8(fp)
    aa0c:	11000a04 	addi	r4,r2,40
    aa10:	e0bfff17 	ldw	r2,-4(fp)
    aa14:	11400217 	ldw	r5,8(r2)
    aa18:	000ae180 	call	ae18 <altera_avalon_jtag_uart_close>
}
    aa1c:	e037883a 	mov	sp,fp
    aa20:	dfc00117 	ldw	ra,4(sp)
    aa24:	df000017 	ldw	fp,0(sp)
    aa28:	dec00204 	addi	sp,sp,8
    aa2c:	f800283a 	ret

0000aa30 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    aa30:	defffa04 	addi	sp,sp,-24
    aa34:	dfc00515 	stw	ra,20(sp)
    aa38:	df000415 	stw	fp,16(sp)
    aa3c:	df000404 	addi	fp,sp,16
    aa40:	e13ffd15 	stw	r4,-12(fp)
    aa44:	e17ffe15 	stw	r5,-8(fp)
    aa48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    aa4c:	e0bffd17 	ldw	r2,-12(fp)
    aa50:	10800017 	ldw	r2,0(r2)
    aa54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    aa58:	e0bffc17 	ldw	r2,-16(fp)
    aa5c:	11000a04 	addi	r4,r2,40
    aa60:	e17ffe17 	ldw	r5,-8(fp)
    aa64:	e1bfff17 	ldw	r6,-4(fp)
    aa68:	000ae8c0 	call	ae8c <altera_avalon_jtag_uart_ioctl>
}
    aa6c:	e037883a 	mov	sp,fp
    aa70:	dfc00117 	ldw	ra,4(sp)
    aa74:	df000017 	ldw	fp,0(sp)
    aa78:	dec00204 	addi	sp,sp,8
    aa7c:	f800283a 	ret

0000aa80 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    aa80:	defffa04 	addi	sp,sp,-24
    aa84:	dfc00515 	stw	ra,20(sp)
    aa88:	df000415 	stw	fp,16(sp)
    aa8c:	df000404 	addi	fp,sp,16
    aa90:	e13ffd15 	stw	r4,-12(fp)
    aa94:	e17ffe15 	stw	r5,-8(fp)
    aa98:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    aa9c:	e0fffd17 	ldw	r3,-12(fp)
    aaa0:	00800044 	movi	r2,1
    aaa4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    aaa8:	e0bffd17 	ldw	r2,-12(fp)
    aaac:	10800017 	ldw	r2,0(r2)
    aab0:	11000104 	addi	r4,r2,4
    aab4:	e0bffd17 	ldw	r2,-12(fp)
    aab8:	10800817 	ldw	r2,32(r2)
    aabc:	1007883a 	mov	r3,r2
    aac0:	2005883a 	mov	r2,r4
    aac4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    aac8:	e13ffe17 	ldw	r4,-8(fp)
    aacc:	e17fff17 	ldw	r5,-4(fp)
    aad0:	d8000015 	stw	zero,0(sp)
    aad4:	01800074 	movhi	r6,1
    aad8:	31aad004 	addi	r6,r6,-21696
    aadc:	e1fffd17 	ldw	r7,-12(fp)
    aae0:	000b8600 	call	b860 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    aae4:	e0bffd17 	ldw	r2,-12(fp)
    aae8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    aaec:	e0bffd17 	ldw	r2,-12(fp)
    aaf0:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    aaf4:	00800074 	movhi	r2,1
    aaf8:	10878c04 	addi	r2,r2,7728
    aafc:	10800017 	ldw	r2,0(r2)
    ab00:	100b883a 	mov	r5,r2
    ab04:	01800074 	movhi	r6,1
    ab08:	31ab5a04 	addi	r6,r6,-21144
    ab0c:	e1fffd17 	ldw	r7,-12(fp)
    ab10:	000b4e40 	call	b4e4 <alt_alarm_start>
    ab14:	1004403a 	cmpge	r2,r2,zero
    ab18:	1000041e 	bne	r2,zero,ab2c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    ab1c:	e0fffd17 	ldw	r3,-12(fp)
    ab20:	00a00034 	movhi	r2,32768
    ab24:	10bfffc4 	addi	r2,r2,-1
    ab28:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    ab2c:	e037883a 	mov	sp,fp
    ab30:	dfc00117 	ldw	ra,4(sp)
    ab34:	df000017 	ldw	fp,0(sp)
    ab38:	dec00204 	addi	sp,sp,8
    ab3c:	f800283a 	ret

0000ab40 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    ab40:	defff804 	addi	sp,sp,-32
    ab44:	df000715 	stw	fp,28(sp)
    ab48:	df000704 	addi	fp,sp,28
    ab4c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    ab50:	e0bfff17 	ldw	r2,-4(fp)
    ab54:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    ab58:	e0bffe17 	ldw	r2,-8(fp)
    ab5c:	10800017 	ldw	r2,0(r2)
    ab60:	e0bffd15 	stw	r2,-12(fp)
    ab64:	00000006 	br	ab68 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ab68:	e0bffd17 	ldw	r2,-12(fp)
    ab6c:	10800104 	addi	r2,r2,4
    ab70:	10800037 	ldwio	r2,0(r2)
    ab74:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    ab78:	e0bffc17 	ldw	r2,-16(fp)
    ab7c:	1080c00c 	andi	r2,r2,768
    ab80:	1005003a 	cmpeq	r2,r2,zero
    ab84:	1000741e 	bne	r2,zero,ad58 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    ab88:	e0bffc17 	ldw	r2,-16(fp)
    ab8c:	1080400c 	andi	r2,r2,256
    ab90:	1005003a 	cmpeq	r2,r2,zero
    ab94:	1000351e 	bne	r2,zero,ac6c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    ab98:	00800074 	movhi	r2,1
    ab9c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    aba0:	e0bffe17 	ldw	r2,-8(fp)
    aba4:	10800a17 	ldw	r2,40(r2)
    aba8:	10800044 	addi	r2,r2,1
    abac:	1081ffcc 	andi	r2,r2,2047
    abb0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    abb4:	e0bffe17 	ldw	r2,-8(fp)
    abb8:	10c00b17 	ldw	r3,44(r2)
    abbc:	e0bffa17 	ldw	r2,-24(fp)
    abc0:	18801626 	beq	r3,r2,ac1c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    abc4:	e0bffd17 	ldw	r2,-12(fp)
    abc8:	10800037 	ldwio	r2,0(r2)
    abcc:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    abd0:	e0bffb17 	ldw	r2,-20(fp)
    abd4:	10a0000c 	andi	r2,r2,32768
    abd8:	1005003a 	cmpeq	r2,r2,zero
    abdc:	10000f1e 	bne	r2,zero,ac1c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    abe0:	e0bffe17 	ldw	r2,-8(fp)
    abe4:	10c00a17 	ldw	r3,40(r2)
    abe8:	e0bffb17 	ldw	r2,-20(fp)
    abec:	1009883a 	mov	r4,r2
    abf0:	e0bffe17 	ldw	r2,-8(fp)
    abf4:	1885883a 	add	r2,r3,r2
    abf8:	10800e04 	addi	r2,r2,56
    abfc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ac00:	e0bffe17 	ldw	r2,-8(fp)
    ac04:	10800a17 	ldw	r2,40(r2)
    ac08:	10800044 	addi	r2,r2,1
    ac0c:	10c1ffcc 	andi	r3,r2,2047
    ac10:	e0bffe17 	ldw	r2,-8(fp)
    ac14:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    ac18:	003fe106 	br	aba0 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    ac1c:	e0bffb17 	ldw	r2,-20(fp)
    ac20:	10bfffec 	andhi	r2,r2,65535
    ac24:	1005003a 	cmpeq	r2,r2,zero
    ac28:	1000101e 	bne	r2,zero,ac6c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ac2c:	e0bffe17 	ldw	r2,-8(fp)
    ac30:	10c00817 	ldw	r3,32(r2)
    ac34:	00bfff84 	movi	r2,-2
    ac38:	1886703a 	and	r3,r3,r2
    ac3c:	e0bffe17 	ldw	r2,-8(fp)
    ac40:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    ac44:	e0bffd17 	ldw	r2,-12(fp)
    ac48:	11000104 	addi	r4,r2,4
    ac4c:	e0bffe17 	ldw	r2,-8(fp)
    ac50:	10800817 	ldw	r2,32(r2)
    ac54:	1007883a 	mov	r3,r2
    ac58:	2005883a 	mov	r2,r4
    ac5c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ac60:	e0bffd17 	ldw	r2,-12(fp)
    ac64:	10800104 	addi	r2,r2,4
    ac68:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    ac6c:	e0bffc17 	ldw	r2,-16(fp)
    ac70:	1080800c 	andi	r2,r2,512
    ac74:	1005003a 	cmpeq	r2,r2,zero
    ac78:	103fbb1e 	bne	r2,zero,ab68 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    ac7c:	e0bffc17 	ldw	r2,-16(fp)
    ac80:	10bfffec 	andhi	r2,r2,65535
    ac84:	1004d43a 	srli	r2,r2,16
    ac88:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    ac8c:	00001506 	br	ace4 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    ac90:	e13ffd17 	ldw	r4,-12(fp)
    ac94:	e0bffe17 	ldw	r2,-8(fp)
    ac98:	10c00d17 	ldw	r3,52(r2)
    ac9c:	e0bffe17 	ldw	r2,-8(fp)
    aca0:	1885883a 	add	r2,r3,r2
    aca4:	10820e04 	addi	r2,r2,2104
    aca8:	10800003 	ldbu	r2,0(r2)
    acac:	10c03fcc 	andi	r3,r2,255
    acb0:	18c0201c 	xori	r3,r3,128
    acb4:	18ffe004 	addi	r3,r3,-128
    acb8:	2005883a 	mov	r2,r4
    acbc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    acc0:	e0bffe17 	ldw	r2,-8(fp)
    acc4:	10800d17 	ldw	r2,52(r2)
    acc8:	10800044 	addi	r2,r2,1
    accc:	10c1ffcc 	andi	r3,r2,2047
    acd0:	e0bffe17 	ldw	r2,-8(fp)
    acd4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    acd8:	e0bff917 	ldw	r2,-28(fp)
    acdc:	10bfffc4 	addi	r2,r2,-1
    ace0:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    ace4:	e0bff917 	ldw	r2,-28(fp)
    ace8:	1005003a 	cmpeq	r2,r2,zero
    acec:	1000051e 	bne	r2,zero,ad04 <altera_avalon_jtag_uart_irq+0x1c4>
    acf0:	e0bffe17 	ldw	r2,-8(fp)
    acf4:	10c00d17 	ldw	r3,52(r2)
    acf8:	e0bffe17 	ldw	r2,-8(fp)
    acfc:	10800c17 	ldw	r2,48(r2)
    ad00:	18bfe31e 	bne	r3,r2,ac90 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    ad04:	e0bff917 	ldw	r2,-28(fp)
    ad08:	1005003a 	cmpeq	r2,r2,zero
    ad0c:	103f961e 	bne	r2,zero,ab68 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ad10:	e0bffe17 	ldw	r2,-8(fp)
    ad14:	10c00817 	ldw	r3,32(r2)
    ad18:	00bfff44 	movi	r2,-3
    ad1c:	1886703a 	and	r3,r3,r2
    ad20:	e0bffe17 	ldw	r2,-8(fp)
    ad24:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ad28:	e0bffe17 	ldw	r2,-8(fp)
    ad2c:	10800017 	ldw	r2,0(r2)
    ad30:	11000104 	addi	r4,r2,4
    ad34:	e0bffe17 	ldw	r2,-8(fp)
    ad38:	10800817 	ldw	r2,32(r2)
    ad3c:	1007883a 	mov	r3,r2
    ad40:	2005883a 	mov	r2,r4
    ad44:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ad48:	e0bffd17 	ldw	r2,-12(fp)
    ad4c:	10800104 	addi	r2,r2,4
    ad50:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    ad54:	003f8406 	br	ab68 <altera_avalon_jtag_uart_irq+0x28>
}
    ad58:	e037883a 	mov	sp,fp
    ad5c:	df000017 	ldw	fp,0(sp)
    ad60:	dec00104 	addi	sp,sp,4
    ad64:	f800283a 	ret

0000ad68 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    ad68:	defffc04 	addi	sp,sp,-16
    ad6c:	df000315 	stw	fp,12(sp)
    ad70:	df000304 	addi	fp,sp,12
    ad74:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    ad78:	e0bfff17 	ldw	r2,-4(fp)
    ad7c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    ad80:	e0bffe17 	ldw	r2,-8(fp)
    ad84:	10800017 	ldw	r2,0(r2)
    ad88:	10800104 	addi	r2,r2,4
    ad8c:	10800037 	ldwio	r2,0(r2)
    ad90:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    ad94:	e0bffd17 	ldw	r2,-12(fp)
    ad98:	1081000c 	andi	r2,r2,1024
    ad9c:	1005003a 	cmpeq	r2,r2,zero
    ada0:	10000c1e 	bne	r2,zero,add4 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    ada4:	e0bffe17 	ldw	r2,-8(fp)
    ada8:	10800017 	ldw	r2,0(r2)
    adac:	11000104 	addi	r4,r2,4
    adb0:	e0bffe17 	ldw	r2,-8(fp)
    adb4:	10800817 	ldw	r2,32(r2)
    adb8:	10810014 	ori	r2,r2,1024
    adbc:	1007883a 	mov	r3,r2
    adc0:	2005883a 	mov	r2,r4
    adc4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    adc8:	e0bffe17 	ldw	r2,-8(fp)
    adcc:	10000915 	stw	zero,36(r2)
    add0:	00000a06 	br	adfc <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    add4:	e0bffe17 	ldw	r2,-8(fp)
    add8:	10c00917 	ldw	r3,36(r2)
    addc:	00a00034 	movhi	r2,32768
    ade0:	10bfff04 	addi	r2,r2,-4
    ade4:	10c00536 	bltu	r2,r3,adfc <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    ade8:	e0bffe17 	ldw	r2,-8(fp)
    adec:	10800917 	ldw	r2,36(r2)
    adf0:	10c00044 	addi	r3,r2,1
    adf4:	e0bffe17 	ldw	r2,-8(fp)
    adf8:	10c00915 	stw	r3,36(r2)
    adfc:	00800074 	movhi	r2,1
    ae00:	10878c04 	addi	r2,r2,7728
    ae04:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    ae08:	e037883a 	mov	sp,fp
    ae0c:	df000017 	ldw	fp,0(sp)
    ae10:	dec00104 	addi	sp,sp,4
    ae14:	f800283a 	ret

0000ae18 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    ae18:	defffc04 	addi	sp,sp,-16
    ae1c:	df000315 	stw	fp,12(sp)
    ae20:	df000304 	addi	fp,sp,12
    ae24:	e13ffd15 	stw	r4,-12(fp)
    ae28:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ae2c:	00000706 	br	ae4c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    ae30:	e0bffe17 	ldw	r2,-8(fp)
    ae34:	1090000c 	andi	r2,r2,16384
    ae38:	1005003a 	cmpeq	r2,r2,zero
    ae3c:	1000031e 	bne	r2,zero,ae4c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    ae40:	00bffd44 	movi	r2,-11
    ae44:	e0bfff15 	stw	r2,-4(fp)
    ae48:	00000b06 	br	ae78 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ae4c:	e0bffd17 	ldw	r2,-12(fp)
    ae50:	10c00d17 	ldw	r3,52(r2)
    ae54:	e0bffd17 	ldw	r2,-12(fp)
    ae58:	10800c17 	ldw	r2,48(r2)
    ae5c:	18800526 	beq	r3,r2,ae74 <altera_avalon_jtag_uart_close+0x5c>
    ae60:	e0bffd17 	ldw	r2,-12(fp)
    ae64:	10c00917 	ldw	r3,36(r2)
    ae68:	e0bffd17 	ldw	r2,-12(fp)
    ae6c:	10800117 	ldw	r2,4(r2)
    ae70:	18bfef36 	bltu	r3,r2,ae30 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    ae74:	e03fff15 	stw	zero,-4(fp)
    ae78:	e0bfff17 	ldw	r2,-4(fp)
}
    ae7c:	e037883a 	mov	sp,fp
    ae80:	df000017 	ldw	fp,0(sp)
    ae84:	dec00104 	addi	sp,sp,4
    ae88:	f800283a 	ret

0000ae8c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    ae8c:	defff804 	addi	sp,sp,-32
    ae90:	df000715 	stw	fp,28(sp)
    ae94:	df000704 	addi	fp,sp,28
    ae98:	e13ffb15 	stw	r4,-20(fp)
    ae9c:	e17ffc15 	stw	r5,-16(fp)
    aea0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    aea4:	00bff9c4 	movi	r2,-25
    aea8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    aeac:	e0bffc17 	ldw	r2,-16(fp)
    aeb0:	e0bfff15 	stw	r2,-4(fp)
    aeb4:	e0ffff17 	ldw	r3,-4(fp)
    aeb8:	189a8060 	cmpeqi	r2,r3,27137
    aebc:	1000041e 	bne	r2,zero,aed0 <altera_avalon_jtag_uart_ioctl+0x44>
    aec0:	e0ffff17 	ldw	r3,-4(fp)
    aec4:	189a80a0 	cmpeqi	r2,r3,27138
    aec8:	10001b1e 	bne	r2,zero,af38 <altera_avalon_jtag_uart_ioctl+0xac>
    aecc:	00002706 	br	af6c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    aed0:	e0bffb17 	ldw	r2,-20(fp)
    aed4:	10c00117 	ldw	r3,4(r2)
    aed8:	00a00034 	movhi	r2,32768
    aedc:	10bfffc4 	addi	r2,r2,-1
    aee0:	18802226 	beq	r3,r2,af6c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    aee4:	e0bffd17 	ldw	r2,-12(fp)
    aee8:	10800017 	ldw	r2,0(r2)
    aeec:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    aef0:	e0bff917 	ldw	r2,-28(fp)
    aef4:	10800090 	cmplti	r2,r2,2
    aef8:	1000071e 	bne	r2,zero,af18 <altera_avalon_jtag_uart_ioctl+0x8c>
    aefc:	e0fff917 	ldw	r3,-28(fp)
    af00:	00a00034 	movhi	r2,32768
    af04:	10bfffc4 	addi	r2,r2,-1
    af08:	18800326 	beq	r3,r2,af18 <altera_avalon_jtag_uart_ioctl+0x8c>
    af0c:	e0bff917 	ldw	r2,-28(fp)
    af10:	e0bffe15 	stw	r2,-8(fp)
    af14:	00000306 	br	af24 <altera_avalon_jtag_uart_ioctl+0x98>
    af18:	00e00034 	movhi	r3,32768
    af1c:	18ffff84 	addi	r3,r3,-2
    af20:	e0fffe15 	stw	r3,-8(fp)
    af24:	e0bffb17 	ldw	r2,-20(fp)
    af28:	e0fffe17 	ldw	r3,-8(fp)
    af2c:	10c00115 	stw	r3,4(r2)
      rc = 0;
    af30:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    af34:	00000d06 	br	af6c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    af38:	e0bffb17 	ldw	r2,-20(fp)
    af3c:	10c00117 	ldw	r3,4(r2)
    af40:	00a00034 	movhi	r2,32768
    af44:	10bfffc4 	addi	r2,r2,-1
    af48:	18800826 	beq	r3,r2,af6c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    af4c:	e13ffd17 	ldw	r4,-12(fp)
    af50:	e0bffb17 	ldw	r2,-20(fp)
    af54:	10c00917 	ldw	r3,36(r2)
    af58:	e0bffb17 	ldw	r2,-20(fp)
    af5c:	10800117 	ldw	r2,4(r2)
    af60:	1885803a 	cmpltu	r2,r3,r2
    af64:	20800015 	stw	r2,0(r4)
      rc = 0;
    af68:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    af6c:	e0bffa17 	ldw	r2,-24(fp)
}
    af70:	e037883a 	mov	sp,fp
    af74:	df000017 	ldw	fp,0(sp)
    af78:	dec00104 	addi	sp,sp,4
    af7c:	f800283a 	ret

0000af80 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    af80:	defff204 	addi	sp,sp,-56
    af84:	dfc00d15 	stw	ra,52(sp)
    af88:	df000c15 	stw	fp,48(sp)
    af8c:	df000c04 	addi	fp,sp,48
    af90:	e13ffb15 	stw	r4,-20(fp)
    af94:	e17ffc15 	stw	r5,-16(fp)
    af98:	e1bffd15 	stw	r6,-12(fp)
    af9c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    afa0:	e0bffc17 	ldw	r2,-16(fp)
    afa4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    afa8:	00004806 	br	b0cc <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    afac:	e0bffb17 	ldw	r2,-20(fp)
    afb0:	10800a17 	ldw	r2,40(r2)
    afb4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    afb8:	e0bffb17 	ldw	r2,-20(fp)
    afbc:	10800b17 	ldw	r2,44(r2)
    afc0:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    afc4:	e0fff717 	ldw	r3,-36(fp)
    afc8:	e0bff617 	ldw	r2,-40(fp)
    afcc:	18800536 	bltu	r3,r2,afe4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    afd0:	e0bff717 	ldw	r2,-36(fp)
    afd4:	e0fff617 	ldw	r3,-40(fp)
    afd8:	10c5c83a 	sub	r2,r2,r3
    afdc:	e0bff815 	stw	r2,-32(fp)
    afe0:	00000406 	br	aff4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    afe4:	00820004 	movi	r2,2048
    afe8:	e0fff617 	ldw	r3,-40(fp)
    afec:	10c5c83a 	sub	r2,r2,r3
    aff0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    aff4:	e0bff817 	ldw	r2,-32(fp)
    aff8:	1005003a 	cmpeq	r2,r2,zero
    affc:	10001f1e 	bne	r2,zero,b07c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    b000:	e0fffd17 	ldw	r3,-12(fp)
    b004:	e0bff817 	ldw	r2,-32(fp)
    b008:	1880022e 	bgeu	r3,r2,b014 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    b00c:	e0bffd17 	ldw	r2,-12(fp)
    b010:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    b014:	e0bffb17 	ldw	r2,-20(fp)
    b018:	10c00e04 	addi	r3,r2,56
    b01c:	e0bff617 	ldw	r2,-40(fp)
    b020:	1887883a 	add	r3,r3,r2
    b024:	e0bffa17 	ldw	r2,-24(fp)
    b028:	1009883a 	mov	r4,r2
    b02c:	180b883a 	mov	r5,r3
    b030:	e1bff817 	ldw	r6,-32(fp)
    b034:	0005b300 	call	5b30 <memcpy>
      ptr   += n;
    b038:	e0fff817 	ldw	r3,-32(fp)
    b03c:	e0bffa17 	ldw	r2,-24(fp)
    b040:	10c5883a 	add	r2,r2,r3
    b044:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    b048:	e0fffd17 	ldw	r3,-12(fp)
    b04c:	e0bff817 	ldw	r2,-32(fp)
    b050:	1885c83a 	sub	r2,r3,r2
    b054:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b058:	e0fff617 	ldw	r3,-40(fp)
    b05c:	e0bff817 	ldw	r2,-32(fp)
    b060:	1885883a 	add	r2,r3,r2
    b064:	10c1ffcc 	andi	r3,r2,2047
    b068:	e0bffb17 	ldw	r2,-20(fp)
    b06c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    b070:	e0bffd17 	ldw	r2,-12(fp)
    b074:	10800048 	cmpgei	r2,r2,1
    b078:	103fcc1e 	bne	r2,zero,afac <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    b07c:	e0fffa17 	ldw	r3,-24(fp)
    b080:	e0bffc17 	ldw	r2,-16(fp)
    b084:	1880141e 	bne	r3,r2,b0d8 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    b088:	e0bffe17 	ldw	r2,-8(fp)
    b08c:	1090000c 	andi	r2,r2,16384
    b090:	1004c03a 	cmpne	r2,r2,zero
    b094:	1000101e 	bne	r2,zero,b0d8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    b098:	e0bffb17 	ldw	r2,-20(fp)
    b09c:	10c00a17 	ldw	r3,40(r2)
    b0a0:	e0bff717 	ldw	r2,-36(fp)
    b0a4:	1880051e 	bne	r3,r2,b0bc <altera_avalon_jtag_uart_read+0x13c>
    b0a8:	e0bffb17 	ldw	r2,-20(fp)
    b0ac:	10c00917 	ldw	r3,36(r2)
    b0b0:	e0bffb17 	ldw	r2,-20(fp)
    b0b4:	10800117 	ldw	r2,4(r2)
    b0b8:	18bff736 	bltu	r3,r2,b098 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    b0bc:	e0bffb17 	ldw	r2,-20(fp)
    b0c0:	10c00a17 	ldw	r3,40(r2)
    b0c4:	e0bff717 	ldw	r2,-36(fp)
    b0c8:	18800326 	beq	r3,r2,b0d8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    b0cc:	e0bffd17 	ldw	r2,-12(fp)
    b0d0:	10800048 	cmpgei	r2,r2,1
    b0d4:	103fb51e 	bne	r2,zero,afac <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    b0d8:	e0fffa17 	ldw	r3,-24(fp)
    b0dc:	e0bffc17 	ldw	r2,-16(fp)
    b0e0:	18801926 	beq	r3,r2,b148 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b0e4:	0005303a 	rdctl	r2,status
    b0e8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b0ec:	e0fff517 	ldw	r3,-44(fp)
    b0f0:	00bfff84 	movi	r2,-2
    b0f4:	1884703a 	and	r2,r3,r2
    b0f8:	1001703a 	wrctl	status,r2
  
  return context;
    b0fc:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    b100:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b104:	e0bffb17 	ldw	r2,-20(fp)
    b108:	10800817 	ldw	r2,32(r2)
    b10c:	10c00054 	ori	r3,r2,1
    b110:	e0bffb17 	ldw	r2,-20(fp)
    b114:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b118:	e0bffb17 	ldw	r2,-20(fp)
    b11c:	10800017 	ldw	r2,0(r2)
    b120:	11000104 	addi	r4,r2,4
    b124:	e0bffb17 	ldw	r2,-20(fp)
    b128:	10800817 	ldw	r2,32(r2)
    b12c:	1007883a 	mov	r3,r2
    b130:	2005883a 	mov	r2,r4
    b134:	10c00035 	stwio	r3,0(r2)
    b138:	e0bff917 	ldw	r2,-28(fp)
    b13c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b140:	e0bff417 	ldw	r2,-48(fp)
    b144:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    b148:	e0fffa17 	ldw	r3,-24(fp)
    b14c:	e0bffc17 	ldw	r2,-16(fp)
    b150:	18800526 	beq	r3,r2,b168 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    b154:	e0fffa17 	ldw	r3,-24(fp)
    b158:	e0bffc17 	ldw	r2,-16(fp)
    b15c:	1887c83a 	sub	r3,r3,r2
    b160:	e0ffff15 	stw	r3,-4(fp)
    b164:	00000906 	br	b18c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    b168:	e0bffe17 	ldw	r2,-8(fp)
    b16c:	1090000c 	andi	r2,r2,16384
    b170:	1005003a 	cmpeq	r2,r2,zero
    b174:	1000031e 	bne	r2,zero,b184 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    b178:	00bffd44 	movi	r2,-11
    b17c:	e0bfff15 	stw	r2,-4(fp)
    b180:	00000206 	br	b18c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    b184:	00bffec4 	movi	r2,-5
    b188:	e0bfff15 	stw	r2,-4(fp)
    b18c:	e0bfff17 	ldw	r2,-4(fp)
}
    b190:	e037883a 	mov	sp,fp
    b194:	dfc00117 	ldw	ra,4(sp)
    b198:	df000017 	ldw	fp,0(sp)
    b19c:	dec00204 	addi	sp,sp,8
    b1a0:	f800283a 	ret

0000b1a4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    b1a4:	defff204 	addi	sp,sp,-56
    b1a8:	dfc00d15 	stw	ra,52(sp)
    b1ac:	df000c15 	stw	fp,48(sp)
    b1b0:	df000c04 	addi	fp,sp,48
    b1b4:	e13ffb15 	stw	r4,-20(fp)
    b1b8:	e17ffc15 	stw	r5,-16(fp)
    b1bc:	e1bffd15 	stw	r6,-12(fp)
    b1c0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    b1c4:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    b1c8:	e0bffc17 	ldw	r2,-16(fp)
    b1cc:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b1d0:	00003a06 	br	b2bc <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    b1d4:	e0bffb17 	ldw	r2,-20(fp)
    b1d8:	10800c17 	ldw	r2,48(r2)
    b1dc:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    b1e0:	e0bffb17 	ldw	r2,-20(fp)
    b1e4:	10800d17 	ldw	r2,52(r2)
    b1e8:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    b1ec:	e0fffa17 	ldw	r3,-24(fp)
    b1f0:	e0bff917 	ldw	r2,-28(fp)
    b1f4:	1880062e 	bgeu	r3,r2,b210 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    b1f8:	e0fff917 	ldw	r3,-28(fp)
    b1fc:	e0bffa17 	ldw	r2,-24(fp)
    b200:	1885c83a 	sub	r2,r3,r2
    b204:	10bfffc4 	addi	r2,r2,-1
    b208:	e0bff815 	stw	r2,-32(fp)
    b20c:	00000c06 	br	b240 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    b210:	e0bff917 	ldw	r2,-28(fp)
    b214:	1005003a 	cmpeq	r2,r2,zero
    b218:	1000051e 	bne	r2,zero,b230 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    b21c:	00820004 	movi	r2,2048
    b220:	e0fffa17 	ldw	r3,-24(fp)
    b224:	10c5c83a 	sub	r2,r2,r3
    b228:	e0bff815 	stw	r2,-32(fp)
    b22c:	00000406 	br	b240 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    b230:	0081ffc4 	movi	r2,2047
    b234:	e0fffa17 	ldw	r3,-24(fp)
    b238:	10c5c83a 	sub	r2,r2,r3
    b23c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    b240:	e0bff817 	ldw	r2,-32(fp)
    b244:	1005003a 	cmpeq	r2,r2,zero
    b248:	10001f1e 	bne	r2,zero,b2c8 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    b24c:	e0fffd17 	ldw	r3,-12(fp)
    b250:	e0bff817 	ldw	r2,-32(fp)
    b254:	1880022e 	bgeu	r3,r2,b260 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    b258:	e0bffd17 	ldw	r2,-12(fp)
    b25c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    b260:	e0bffb17 	ldw	r2,-20(fp)
    b264:	10c20e04 	addi	r3,r2,2104
    b268:	e0bffa17 	ldw	r2,-24(fp)
    b26c:	1885883a 	add	r2,r3,r2
    b270:	e0fffc17 	ldw	r3,-16(fp)
    b274:	1009883a 	mov	r4,r2
    b278:	180b883a 	mov	r5,r3
    b27c:	e1bff817 	ldw	r6,-32(fp)
    b280:	0005b300 	call	5b30 <memcpy>
      ptr   += n;
    b284:	e0fff817 	ldw	r3,-32(fp)
    b288:	e0bffc17 	ldw	r2,-16(fp)
    b28c:	10c5883a 	add	r2,r2,r3
    b290:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    b294:	e0fffd17 	ldw	r3,-12(fp)
    b298:	e0bff817 	ldw	r2,-32(fp)
    b29c:	1885c83a 	sub	r2,r3,r2
    b2a0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b2a4:	e0fffa17 	ldw	r3,-24(fp)
    b2a8:	e0bff817 	ldw	r2,-32(fp)
    b2ac:	1885883a 	add	r2,r3,r2
    b2b0:	10c1ffcc 	andi	r3,r2,2047
    b2b4:	e0bffb17 	ldw	r2,-20(fp)
    b2b8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b2bc:	e0bffd17 	ldw	r2,-12(fp)
    b2c0:	10800048 	cmpgei	r2,r2,1
    b2c4:	103fc31e 	bne	r2,zero,b1d4 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b2c8:	0005303a 	rdctl	r2,status
    b2cc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b2d0:	e0fff517 	ldw	r3,-44(fp)
    b2d4:	00bfff84 	movi	r2,-2
    b2d8:	1884703a 	and	r2,r3,r2
    b2dc:	1001703a 	wrctl	status,r2
  
  return context;
    b2e0:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    b2e4:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    b2e8:	e0bffb17 	ldw	r2,-20(fp)
    b2ec:	10800817 	ldw	r2,32(r2)
    b2f0:	10c00094 	ori	r3,r2,2
    b2f4:	e0bffb17 	ldw	r2,-20(fp)
    b2f8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b2fc:	e0bffb17 	ldw	r2,-20(fp)
    b300:	10800017 	ldw	r2,0(r2)
    b304:	11000104 	addi	r4,r2,4
    b308:	e0bffb17 	ldw	r2,-20(fp)
    b30c:	10800817 	ldw	r2,32(r2)
    b310:	1007883a 	mov	r3,r2
    b314:	2005883a 	mov	r2,r4
    b318:	10c00035 	stwio	r3,0(r2)
    b31c:	e0bff717 	ldw	r2,-36(fp)
    b320:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b324:	e0bff417 	ldw	r2,-48(fp)
    b328:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    b32c:	e0bffd17 	ldw	r2,-12(fp)
    b330:	10800050 	cmplti	r2,r2,1
    b334:	1000111e 	bne	r2,zero,b37c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    b338:	e0bffe17 	ldw	r2,-8(fp)
    b33c:	1090000c 	andi	r2,r2,16384
    b340:	1004c03a 	cmpne	r2,r2,zero
    b344:	1000101e 	bne	r2,zero,b388 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    b348:	e0bffb17 	ldw	r2,-20(fp)
    b34c:	10c00d17 	ldw	r3,52(r2)
    b350:	e0bff917 	ldw	r2,-28(fp)
    b354:	1880051e 	bne	r3,r2,b36c <altera_avalon_jtag_uart_write+0x1c8>
    b358:	e0bffb17 	ldw	r2,-20(fp)
    b35c:	10c00917 	ldw	r3,36(r2)
    b360:	e0bffb17 	ldw	r2,-20(fp)
    b364:	10800117 	ldw	r2,4(r2)
    b368:	18bff736 	bltu	r3,r2,b348 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    b36c:	e0bffb17 	ldw	r2,-20(fp)
    b370:	10c00d17 	ldw	r3,52(r2)
    b374:	e0bff917 	ldw	r2,-28(fp)
    b378:	18800326 	beq	r3,r2,b388 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    b37c:	e0bffd17 	ldw	r2,-12(fp)
    b380:	10800048 	cmpgei	r2,r2,1
    b384:	103fcd1e 	bne	r2,zero,b2bc <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    b388:	e0fffc17 	ldw	r3,-16(fp)
    b38c:	e0bff617 	ldw	r2,-40(fp)
    b390:	18800526 	beq	r3,r2,b3a8 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    b394:	e0fffc17 	ldw	r3,-16(fp)
    b398:	e0bff617 	ldw	r2,-40(fp)
    b39c:	1887c83a 	sub	r3,r3,r2
    b3a0:	e0ffff15 	stw	r3,-4(fp)
    b3a4:	00000906 	br	b3cc <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    b3a8:	e0bffe17 	ldw	r2,-8(fp)
    b3ac:	1090000c 	andi	r2,r2,16384
    b3b0:	1005003a 	cmpeq	r2,r2,zero
    b3b4:	1000031e 	bne	r2,zero,b3c4 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    b3b8:	00bffd44 	movi	r2,-11
    b3bc:	e0bfff15 	stw	r2,-4(fp)
    b3c0:	00000206 	br	b3cc <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    b3c4:	00bffec4 	movi	r2,-5
    b3c8:	e0bfff15 	stw	r2,-4(fp)
    b3cc:	e0bfff17 	ldw	r2,-4(fp)
}
    b3d0:	e037883a 	mov	sp,fp
    b3d4:	dfc00117 	ldw	ra,4(sp)
    b3d8:	df000017 	ldw	fp,0(sp)
    b3dc:	dec00204 	addi	sp,sp,8
    b3e0:	f800283a 	ret

0000b3e4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    b3e4:	defffa04 	addi	sp,sp,-24
    b3e8:	dfc00515 	stw	ra,20(sp)
    b3ec:	df000415 	stw	fp,16(sp)
    b3f0:	df000404 	addi	fp,sp,16
    b3f4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    b3f8:	e0bfff17 	ldw	r2,-4(fp)
    b3fc:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    b400:	e0bfff17 	ldw	r2,-4(fp)
    b404:	10800104 	addi	r2,r2,4
    b408:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b40c:	0005303a 	rdctl	r2,status
    b410:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b414:	e0fffd17 	ldw	r3,-12(fp)
    b418:	00bfff84 	movi	r2,-2
    b41c:	1884703a 	and	r2,r3,r2
    b420:	1001703a 	wrctl	status,r2
  
  return context;
    b424:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    b428:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    b42c:	000bfc40 	call	bfc4 <alt_tick>
    b430:	e0bffe17 	ldw	r2,-8(fp)
    b434:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b438:	e0bffc17 	ldw	r2,-16(fp)
    b43c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    b440:	e037883a 	mov	sp,fp
    b444:	dfc00117 	ldw	ra,4(sp)
    b448:	df000017 	ldw	fp,0(sp)
    b44c:	dec00204 	addi	sp,sp,8
    b450:	f800283a 	ret

0000b454 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    b454:	defff804 	addi	sp,sp,-32
    b458:	dfc00715 	stw	ra,28(sp)
    b45c:	df000615 	stw	fp,24(sp)
    b460:	df000604 	addi	fp,sp,24
    b464:	e13ffc15 	stw	r4,-16(fp)
    b468:	e17ffd15 	stw	r5,-12(fp)
    b46c:	e1bffe15 	stw	r6,-8(fp)
    b470:	e1ffff15 	stw	r7,-4(fp)
    b474:	e0bfff17 	ldw	r2,-4(fp)
    b478:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    b47c:	00800074 	movhi	r2,1
    b480:	10878c04 	addi	r2,r2,7728
    b484:	10800017 	ldw	r2,0(r2)
    b488:	1004c03a 	cmpne	r2,r2,zero
    b48c:	1000041e 	bne	r2,zero,b4a0 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    b490:	00c00074 	movhi	r3,1
    b494:	18c78c04 	addi	r3,r3,7728
    b498:	e0bffb17 	ldw	r2,-20(fp)
    b49c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    b4a0:	e0bffc17 	ldw	r2,-16(fp)
    b4a4:	10800104 	addi	r2,r2,4
    b4a8:	1007883a 	mov	r3,r2
    b4ac:	008001c4 	movi	r2,7
    b4b0:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    b4b4:	d8000015 	stw	zero,0(sp)
    b4b8:	e13ffd17 	ldw	r4,-12(fp)
    b4bc:	e17ffe17 	ldw	r5,-8(fp)
    b4c0:	01800074 	movhi	r6,1
    b4c4:	31acf904 	addi	r6,r6,-19484
    b4c8:	e1fffc17 	ldw	r7,-16(fp)
    b4cc:	000b8600 	call	b860 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    b4d0:	e037883a 	mov	sp,fp
    b4d4:	dfc00117 	ldw	ra,4(sp)
    b4d8:	df000017 	ldw	fp,0(sp)
    b4dc:	dec00204 	addi	sp,sp,8
    b4e0:	f800283a 	ret

0000b4e4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    b4e4:	defff404 	addi	sp,sp,-48
    b4e8:	df000b15 	stw	fp,44(sp)
    b4ec:	df000b04 	addi	fp,sp,44
    b4f0:	e13ffb15 	stw	r4,-20(fp)
    b4f4:	e17ffc15 	stw	r5,-16(fp)
    b4f8:	e1bffd15 	stw	r6,-12(fp)
    b4fc:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    b500:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    b504:	00800074 	movhi	r2,1
    b508:	10878c04 	addi	r2,r2,7728
    b50c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    b510:	1005003a 	cmpeq	r2,r2,zero
    b514:	1000411e 	bne	r2,zero,b61c <alt_alarm_start+0x138>
  {
    if (alarm)
    b518:	e0bffb17 	ldw	r2,-20(fp)
    b51c:	1005003a 	cmpeq	r2,r2,zero
    b520:	10003b1e 	bne	r2,zero,b610 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    b524:	e0fffb17 	ldw	r3,-20(fp)
    b528:	e0bffd17 	ldw	r2,-12(fp)
    b52c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    b530:	e0fffb17 	ldw	r3,-20(fp)
    b534:	e0bffe17 	ldw	r2,-8(fp)
    b538:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b53c:	0005303a 	rdctl	r2,status
    b540:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b544:	e0fff817 	ldw	r3,-32(fp)
    b548:	00bfff84 	movi	r2,-2
    b54c:	1884703a 	and	r2,r3,r2
    b550:	1001703a 	wrctl	status,r2
  
  return context;
    b554:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    b558:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    b55c:	00800074 	movhi	r2,1
    b560:	10878d04 	addi	r2,r2,7732
    b564:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    b568:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    b56c:	e0fffc17 	ldw	r3,-16(fp)
    b570:	e0bff917 	ldw	r2,-28(fp)
    b574:	1885883a 	add	r2,r3,r2
    b578:	10c00044 	addi	r3,r2,1
    b57c:	e0bffb17 	ldw	r2,-20(fp)
    b580:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    b584:	e0bffb17 	ldw	r2,-20(fp)
    b588:	10c00217 	ldw	r3,8(r2)
    b58c:	e0bff917 	ldw	r2,-28(fp)
    b590:	1880042e 	bgeu	r3,r2,b5a4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    b594:	e0fffb17 	ldw	r3,-20(fp)
    b598:	00800044 	movi	r2,1
    b59c:	18800405 	stb	r2,16(r3)
    b5a0:	00000206 	br	b5ac <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    b5a4:	e0bffb17 	ldw	r2,-20(fp)
    b5a8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    b5ac:	e0fffb17 	ldw	r3,-20(fp)
    b5b0:	00800074 	movhi	r2,1
    b5b4:	10877a04 	addi	r2,r2,7656
    b5b8:	e0bff615 	stw	r2,-40(fp)
    b5bc:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    b5c0:	e0fff717 	ldw	r3,-36(fp)
    b5c4:	e0bff617 	ldw	r2,-40(fp)
    b5c8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    b5cc:	e0bff617 	ldw	r2,-40(fp)
    b5d0:	10c00017 	ldw	r3,0(r2)
    b5d4:	e0bff717 	ldw	r2,-36(fp)
    b5d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    b5dc:	e0bff617 	ldw	r2,-40(fp)
    b5e0:	10c00017 	ldw	r3,0(r2)
    b5e4:	e0bff717 	ldw	r2,-36(fp)
    b5e8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    b5ec:	e0fff617 	ldw	r3,-40(fp)
    b5f0:	e0bff717 	ldw	r2,-36(fp)
    b5f4:	18800015 	stw	r2,0(r3)
    b5f8:	e0bffa17 	ldw	r2,-24(fp)
    b5fc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b600:	e0bff517 	ldw	r2,-44(fp)
    b604:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    b608:	e03fff15 	stw	zero,-4(fp)
    b60c:	00000506 	br	b624 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    b610:	00bffa84 	movi	r2,-22
    b614:	e0bfff15 	stw	r2,-4(fp)
    b618:	00000206 	br	b624 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    b61c:	00bfde84 	movi	r2,-134
    b620:	e0bfff15 	stw	r2,-4(fp)
    b624:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    b628:	e037883a 	mov	sp,fp
    b62c:	df000017 	ldw	fp,0(sp)
    b630:	dec00104 	addi	sp,sp,4
    b634:	f800283a 	ret

0000b638 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    b638:	deffff04 	addi	sp,sp,-4
    b63c:	df000015 	stw	fp,0(sp)
    b640:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    b644:	e037883a 	mov	sp,fp
    b648:	df000017 	ldw	fp,0(sp)
    b64c:	dec00104 	addi	sp,sp,4
    b650:	f800283a 	ret

0000b654 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    b654:	defff904 	addi	sp,sp,-28
    b658:	dfc00615 	stw	ra,24(sp)
    b65c:	df000515 	stw	fp,20(sp)
    b660:	df000504 	addi	fp,sp,20
    b664:	e13ffd15 	stw	r4,-12(fp)
    b668:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    b66c:	e0bffd17 	ldw	r2,-12(fp)
    b670:	1005003a 	cmpeq	r2,r2,zero
    b674:	1000041e 	bne	r2,zero,b688 <alt_dev_llist_insert+0x34>
    b678:	e0bffd17 	ldw	r2,-12(fp)
    b67c:	10800217 	ldw	r2,8(r2)
    b680:	1004c03a 	cmpne	r2,r2,zero
    b684:	1000071e 	bne	r2,zero,b6a4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    b688:	000b7080 	call	b708 <alt_get_errno>
    b68c:	1007883a 	mov	r3,r2
    b690:	00800584 	movi	r2,22
    b694:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    b698:	00bffa84 	movi	r2,-22
    b69c:	e0bfff15 	stw	r2,-4(fp)
    b6a0:	00001306 	br	b6f0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    b6a4:	e0fffd17 	ldw	r3,-12(fp)
    b6a8:	e0bffe17 	ldw	r2,-8(fp)
    b6ac:	e0bffb15 	stw	r2,-20(fp)
    b6b0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    b6b4:	e0fffc17 	ldw	r3,-16(fp)
    b6b8:	e0bffb17 	ldw	r2,-20(fp)
    b6bc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    b6c0:	e0bffb17 	ldw	r2,-20(fp)
    b6c4:	10c00017 	ldw	r3,0(r2)
    b6c8:	e0bffc17 	ldw	r2,-16(fp)
    b6cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    b6d0:	e0bffb17 	ldw	r2,-20(fp)
    b6d4:	10c00017 	ldw	r3,0(r2)
    b6d8:	e0bffc17 	ldw	r2,-16(fp)
    b6dc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    b6e0:	e0fffb17 	ldw	r3,-20(fp)
    b6e4:	e0bffc17 	ldw	r2,-16(fp)
    b6e8:	18800015 	stw	r2,0(r3)

  return 0;  
    b6ec:	e03fff15 	stw	zero,-4(fp)
    b6f0:	e0bfff17 	ldw	r2,-4(fp)
}
    b6f4:	e037883a 	mov	sp,fp
    b6f8:	dfc00117 	ldw	ra,4(sp)
    b6fc:	df000017 	ldw	fp,0(sp)
    b700:	dec00204 	addi	sp,sp,8
    b704:	f800283a 	ret

0000b708 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b708:	defffd04 	addi	sp,sp,-12
    b70c:	dfc00215 	stw	ra,8(sp)
    b710:	df000115 	stw	fp,4(sp)
    b714:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b718:	00800074 	movhi	r2,1
    b71c:	10877704 	addi	r2,r2,7644
    b720:	10800017 	ldw	r2,0(r2)
    b724:	1005003a 	cmpeq	r2,r2,zero
    b728:	1000061e 	bne	r2,zero,b744 <alt_get_errno+0x3c>
    b72c:	00800074 	movhi	r2,1
    b730:	10877704 	addi	r2,r2,7644
    b734:	10800017 	ldw	r2,0(r2)
    b738:	103ee83a 	callr	r2
    b73c:	e0bfff15 	stw	r2,-4(fp)
    b740:	00000306 	br	b750 <alt_get_errno+0x48>
    b744:	00800074 	movhi	r2,1
    b748:	10878704 	addi	r2,r2,7708
    b74c:	e0bfff15 	stw	r2,-4(fp)
    b750:	e0bfff17 	ldw	r2,-4(fp)
}
    b754:	e037883a 	mov	sp,fp
    b758:	dfc00117 	ldw	ra,4(sp)
    b75c:	df000017 	ldw	fp,0(sp)
    b760:	dec00204 	addi	sp,sp,8
    b764:	f800283a 	ret

0000b768 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    b768:	defffd04 	addi	sp,sp,-12
    b76c:	dfc00215 	stw	ra,8(sp)
    b770:	df000115 	stw	fp,4(sp)
    b774:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    b778:	00bfff04 	movi	r2,-4
    b77c:	00c00074 	movhi	r3,1
    b780:	18f1fe04 	addi	r3,r3,-14344
    b784:	1885883a 	add	r2,r3,r2
    b788:	e0bfff15 	stw	r2,-4(fp)
    b78c:	00000606 	br	b7a8 <_do_ctors+0x40>
        (*ctor) (); 
    b790:	e0bfff17 	ldw	r2,-4(fp)
    b794:	10800017 	ldw	r2,0(r2)
    b798:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    b79c:	e0bfff17 	ldw	r2,-4(fp)
    b7a0:	10bfff04 	addi	r2,r2,-4
    b7a4:	e0bfff15 	stw	r2,-4(fp)
    b7a8:	e0ffff17 	ldw	r3,-4(fp)
    b7ac:	00800074 	movhi	r2,1
    b7b0:	10b1fd04 	addi	r2,r2,-14348
    b7b4:	18bff62e 	bgeu	r3,r2,b790 <_do_ctors+0x28>
        (*ctor) (); 
}
    b7b8:	e037883a 	mov	sp,fp
    b7bc:	dfc00117 	ldw	ra,4(sp)
    b7c0:	df000017 	ldw	fp,0(sp)
    b7c4:	dec00204 	addi	sp,sp,8
    b7c8:	f800283a 	ret

0000b7cc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    b7cc:	defffd04 	addi	sp,sp,-12
    b7d0:	dfc00215 	stw	ra,8(sp)
    b7d4:	df000115 	stw	fp,4(sp)
    b7d8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    b7dc:	00bfff04 	movi	r2,-4
    b7e0:	00c00074 	movhi	r3,1
    b7e4:	18f1fe04 	addi	r3,r3,-14344
    b7e8:	1885883a 	add	r2,r3,r2
    b7ec:	e0bfff15 	stw	r2,-4(fp)
    b7f0:	00000606 	br	b80c <_do_dtors+0x40>
        (*dtor) (); 
    b7f4:	e0bfff17 	ldw	r2,-4(fp)
    b7f8:	10800017 	ldw	r2,0(r2)
    b7fc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    b800:	e0bfff17 	ldw	r2,-4(fp)
    b804:	10bfff04 	addi	r2,r2,-4
    b808:	e0bfff15 	stw	r2,-4(fp)
    b80c:	e0ffff17 	ldw	r3,-4(fp)
    b810:	00800074 	movhi	r2,1
    b814:	10b1fe04 	addi	r2,r2,-14344
    b818:	18bff62e 	bgeu	r3,r2,b7f4 <_do_dtors+0x28>
        (*dtor) (); 
}
    b81c:	e037883a 	mov	sp,fp
    b820:	dfc00117 	ldw	ra,4(sp)
    b824:	df000017 	ldw	fp,0(sp)
    b828:	dec00204 	addi	sp,sp,8
    b82c:	f800283a 	ret

0000b830 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    b830:	defffe04 	addi	sp,sp,-8
    b834:	dfc00115 	stw	ra,4(sp)
    b838:	df000015 	stw	fp,0(sp)
    b83c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    b840:	0009883a 	mov	r4,zero
    b844:	01440004 	movi	r5,4096
    b848:	000c35c0 	call	c35c <alt_icache_flush>
#endif
}
    b84c:	e037883a 	mov	sp,fp
    b850:	dfc00117 	ldw	ra,4(sp)
    b854:	df000017 	ldw	fp,0(sp)
    b858:	dec00204 	addi	sp,sp,8
    b85c:	f800283a 	ret

0000b860 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    b860:	defff904 	addi	sp,sp,-28
    b864:	dfc00615 	stw	ra,24(sp)
    b868:	df000515 	stw	fp,20(sp)
    b86c:	df000504 	addi	fp,sp,20
    b870:	e13ffc15 	stw	r4,-16(fp)
    b874:	e17ffd15 	stw	r5,-12(fp)
    b878:	e1bffe15 	stw	r6,-8(fp)
    b87c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    b880:	e0800217 	ldw	r2,8(fp)
    b884:	d8800015 	stw	r2,0(sp)
    b888:	e13ffc17 	ldw	r4,-16(fp)
    b88c:	e17ffd17 	ldw	r5,-12(fp)
    b890:	e1bffe17 	ldw	r6,-8(fp)
    b894:	e1ffff17 	ldw	r7,-4(fp)
    b898:	000ba340 	call	ba34 <alt_iic_isr_register>
}  
    b89c:	e037883a 	mov	sp,fp
    b8a0:	dfc00117 	ldw	ra,4(sp)
    b8a4:	df000017 	ldw	fp,0(sp)
    b8a8:	dec00204 	addi	sp,sp,8
    b8ac:	f800283a 	ret

0000b8b0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    b8b0:	defff904 	addi	sp,sp,-28
    b8b4:	df000615 	stw	fp,24(sp)
    b8b8:	df000604 	addi	fp,sp,24
    b8bc:	e13ffe15 	stw	r4,-8(fp)
    b8c0:	e17fff15 	stw	r5,-4(fp)
    b8c4:	e0bfff17 	ldw	r2,-4(fp)
    b8c8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b8cc:	0005303a 	rdctl	r2,status
    b8d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b8d4:	e0fffb17 	ldw	r3,-20(fp)
    b8d8:	00bfff84 	movi	r2,-2
    b8dc:	1884703a 	and	r2,r3,r2
    b8e0:	1001703a 	wrctl	status,r2
  
  return context;
    b8e4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b8e8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    b8ec:	e0fffc17 	ldw	r3,-16(fp)
    b8f0:	00800044 	movi	r2,1
    b8f4:	10c4983a 	sll	r2,r2,r3
    b8f8:	1007883a 	mov	r3,r2
    b8fc:	00800074 	movhi	r2,1
    b900:	10878b04 	addi	r2,r2,7724
    b904:	10800017 	ldw	r2,0(r2)
    b908:	1886b03a 	or	r3,r3,r2
    b90c:	00800074 	movhi	r2,1
    b910:	10878b04 	addi	r2,r2,7724
    b914:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b918:	00800074 	movhi	r2,1
    b91c:	10878b04 	addi	r2,r2,7724
    b920:	10800017 	ldw	r2,0(r2)
    b924:	100170fa 	wrctl	ienable,r2
    b928:	e0bffd17 	ldw	r2,-12(fp)
    b92c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b930:	e0bffa17 	ldw	r2,-24(fp)
    b934:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b938:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    b93c:	e037883a 	mov	sp,fp
    b940:	df000017 	ldw	fp,0(sp)
    b944:	dec00104 	addi	sp,sp,4
    b948:	f800283a 	ret

0000b94c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    b94c:	defff904 	addi	sp,sp,-28
    b950:	df000615 	stw	fp,24(sp)
    b954:	df000604 	addi	fp,sp,24
    b958:	e13ffe15 	stw	r4,-8(fp)
    b95c:	e17fff15 	stw	r5,-4(fp)
    b960:	e0bfff17 	ldw	r2,-4(fp)
    b964:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b968:	0005303a 	rdctl	r2,status
    b96c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b970:	e0fffb17 	ldw	r3,-20(fp)
    b974:	00bfff84 	movi	r2,-2
    b978:	1884703a 	and	r2,r3,r2
    b97c:	1001703a 	wrctl	status,r2
  
  return context;
    b980:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b984:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    b988:	e0fffc17 	ldw	r3,-16(fp)
    b98c:	00800044 	movi	r2,1
    b990:	10c4983a 	sll	r2,r2,r3
    b994:	0084303a 	nor	r2,zero,r2
    b998:	1007883a 	mov	r3,r2
    b99c:	00800074 	movhi	r2,1
    b9a0:	10878b04 	addi	r2,r2,7724
    b9a4:	10800017 	ldw	r2,0(r2)
    b9a8:	1886703a 	and	r3,r3,r2
    b9ac:	00800074 	movhi	r2,1
    b9b0:	10878b04 	addi	r2,r2,7724
    b9b4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b9b8:	00800074 	movhi	r2,1
    b9bc:	10878b04 	addi	r2,r2,7724
    b9c0:	10800017 	ldw	r2,0(r2)
    b9c4:	100170fa 	wrctl	ienable,r2
    b9c8:	e0bffd17 	ldw	r2,-12(fp)
    b9cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b9d0:	e0bffa17 	ldw	r2,-24(fp)
    b9d4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b9d8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    b9dc:	e037883a 	mov	sp,fp
    b9e0:	df000017 	ldw	fp,0(sp)
    b9e4:	dec00104 	addi	sp,sp,4
    b9e8:	f800283a 	ret

0000b9ec <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    b9ec:	defffc04 	addi	sp,sp,-16
    b9f0:	df000315 	stw	fp,12(sp)
    b9f4:	df000304 	addi	fp,sp,12
    b9f8:	e13ffe15 	stw	r4,-8(fp)
    b9fc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    ba00:	000530fa 	rdctl	r2,ienable
    ba04:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    ba08:	e0ffff17 	ldw	r3,-4(fp)
    ba0c:	00800044 	movi	r2,1
    ba10:	10c4983a 	sll	r2,r2,r3
    ba14:	1007883a 	mov	r3,r2
    ba18:	e0bffd17 	ldw	r2,-12(fp)
    ba1c:	1884703a 	and	r2,r3,r2
    ba20:	1004c03a 	cmpne	r2,r2,zero
}
    ba24:	e037883a 	mov	sp,fp
    ba28:	df000017 	ldw	fp,0(sp)
    ba2c:	dec00104 	addi	sp,sp,4
    ba30:	f800283a 	ret

0000ba34 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    ba34:	defff404 	addi	sp,sp,-48
    ba38:	dfc00b15 	stw	ra,44(sp)
    ba3c:	df000a15 	stw	fp,40(sp)
    ba40:	df000a04 	addi	fp,sp,40
    ba44:	e13ffb15 	stw	r4,-20(fp)
    ba48:	e17ffc15 	stw	r5,-16(fp)
    ba4c:	e1bffd15 	stw	r6,-12(fp)
    ba50:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    ba54:	00bffa84 	movi	r2,-22
    ba58:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    ba5c:	e0bffc17 	ldw	r2,-16(fp)
    ba60:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    ba64:	e0bff917 	ldw	r2,-28(fp)
    ba68:	10800808 	cmpgei	r2,r2,32
    ba6c:	1000291e 	bne	r2,zero,bb14 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ba70:	0005303a 	rdctl	r2,status
    ba74:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ba78:	e0fff717 	ldw	r3,-36(fp)
    ba7c:	00bfff84 	movi	r2,-2
    ba80:	1884703a 	and	r2,r3,r2
    ba84:	1001703a 	wrctl	status,r2
  
  return context;
    ba88:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    ba8c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    ba90:	e0bff917 	ldw	r2,-28(fp)
    ba94:	00c00074 	movhi	r3,1
    ba98:	18c79804 	addi	r3,r3,7776
    ba9c:	100490fa 	slli	r2,r2,3
    baa0:	10c7883a 	add	r3,r2,r3
    baa4:	e0bffd17 	ldw	r2,-12(fp)
    baa8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    baac:	e0bff917 	ldw	r2,-28(fp)
    bab0:	00c00074 	movhi	r3,1
    bab4:	18c79804 	addi	r3,r3,7776
    bab8:	100490fa 	slli	r2,r2,3
    babc:	10c5883a 	add	r2,r2,r3
    bac0:	10c00104 	addi	r3,r2,4
    bac4:	e0bffe17 	ldw	r2,-8(fp)
    bac8:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    bacc:	e0bffd17 	ldw	r2,-12(fp)
    bad0:	1005003a 	cmpeq	r2,r2,zero
    bad4:	1000051e 	bne	r2,zero,baec <alt_iic_isr_register+0xb8>
    bad8:	e17ff917 	ldw	r5,-28(fp)
    badc:	e13ffb17 	ldw	r4,-20(fp)
    bae0:	000b8b00 	call	b8b0 <alt_ic_irq_enable>
    bae4:	e0bfff15 	stw	r2,-4(fp)
    bae8:	00000406 	br	bafc <alt_iic_isr_register+0xc8>
    baec:	e17ff917 	ldw	r5,-28(fp)
    baf0:	e13ffb17 	ldw	r4,-20(fp)
    baf4:	000b94c0 	call	b94c <alt_ic_irq_disable>
    baf8:	e0bfff15 	stw	r2,-4(fp)
    bafc:	e0bfff17 	ldw	r2,-4(fp)
    bb00:	e0bffa15 	stw	r2,-24(fp)
    bb04:	e0bff817 	ldw	r2,-32(fp)
    bb08:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bb0c:	e0bff617 	ldw	r2,-40(fp)
    bb10:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    bb14:	e0bffa17 	ldw	r2,-24(fp)
}
    bb18:	e037883a 	mov	sp,fp
    bb1c:	dfc00117 	ldw	ra,4(sp)
    bb20:	df000017 	ldw	fp,0(sp)
    bb24:	dec00204 	addi	sp,sp,8
    bb28:	f800283a 	ret

0000bb2c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    bb2c:	defff904 	addi	sp,sp,-28
    bb30:	dfc00615 	stw	ra,24(sp)
    bb34:	df000515 	stw	fp,20(sp)
    bb38:	df000504 	addi	fp,sp,20
    bb3c:	e13ffc15 	stw	r4,-16(fp)
    bb40:	e17ffd15 	stw	r5,-12(fp)
    bb44:	e1bffe15 	stw	r6,-8(fp)
    bb48:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    bb4c:	e13ffd17 	ldw	r4,-12(fp)
    bb50:	e17ffe17 	ldw	r5,-8(fp)
    bb54:	e1bfff17 	ldw	r6,-4(fp)
    bb58:	000bd440 	call	bd44 <open>
    bb5c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    bb60:	e0bffb17 	ldw	r2,-20(fp)
    bb64:	1004803a 	cmplt	r2,r2,zero
    bb68:	10001c1e 	bne	r2,zero,bbdc <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    bb6c:	e0bffb17 	ldw	r2,-20(fp)
    bb70:	00c00074 	movhi	r3,1
    bb74:	18c2f404 	addi	r3,r3,3024
    bb78:	10800324 	muli	r2,r2,12
    bb7c:	10c5883a 	add	r2,r2,r3
    bb80:	10c00017 	ldw	r3,0(r2)
    bb84:	e0bffc17 	ldw	r2,-16(fp)
    bb88:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    bb8c:	e0bffb17 	ldw	r2,-20(fp)
    bb90:	00c00074 	movhi	r3,1
    bb94:	18c2f404 	addi	r3,r3,3024
    bb98:	10800324 	muli	r2,r2,12
    bb9c:	10c5883a 	add	r2,r2,r3
    bba0:	10800104 	addi	r2,r2,4
    bba4:	10c00017 	ldw	r3,0(r2)
    bba8:	e0bffc17 	ldw	r2,-16(fp)
    bbac:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    bbb0:	e0bffb17 	ldw	r2,-20(fp)
    bbb4:	00c00074 	movhi	r3,1
    bbb8:	18c2f404 	addi	r3,r3,3024
    bbbc:	10800324 	muli	r2,r2,12
    bbc0:	10c5883a 	add	r2,r2,r3
    bbc4:	10800204 	addi	r2,r2,8
    bbc8:	10c00017 	ldw	r3,0(r2)
    bbcc:	e0bffc17 	ldw	r2,-16(fp)
    bbd0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    bbd4:	e13ffb17 	ldw	r4,-20(fp)
    bbd8:	000a5d40 	call	a5d4 <alt_release_fd>
  }
} 
    bbdc:	e037883a 	mov	sp,fp
    bbe0:	dfc00117 	ldw	ra,4(sp)
    bbe4:	df000017 	ldw	fp,0(sp)
    bbe8:	dec00204 	addi	sp,sp,8
    bbec:	f800283a 	ret

0000bbf0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    bbf0:	defffb04 	addi	sp,sp,-20
    bbf4:	dfc00415 	stw	ra,16(sp)
    bbf8:	df000315 	stw	fp,12(sp)
    bbfc:	df000304 	addi	fp,sp,12
    bc00:	e13ffd15 	stw	r4,-12(fp)
    bc04:	e17ffe15 	stw	r5,-8(fp)
    bc08:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    bc0c:	01000074 	movhi	r4,1
    bc10:	2102f704 	addi	r4,r4,3036
    bc14:	e17ffd17 	ldw	r5,-12(fp)
    bc18:	01800044 	movi	r6,1
    bc1c:	01c07fc4 	movi	r7,511
    bc20:	000bb2c0 	call	bb2c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    bc24:	01000074 	movhi	r4,1
    bc28:	2102f404 	addi	r4,r4,3024
    bc2c:	e17ffe17 	ldw	r5,-8(fp)
    bc30:	000d883a 	mov	r6,zero
    bc34:	01c07fc4 	movi	r7,511
    bc38:	000bb2c0 	call	bb2c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    bc3c:	01000074 	movhi	r4,1
    bc40:	2102fa04 	addi	r4,r4,3048
    bc44:	e17fff17 	ldw	r5,-4(fp)
    bc48:	01800044 	movi	r6,1
    bc4c:	01c07fc4 	movi	r7,511
    bc50:	000bb2c0 	call	bb2c <alt_open_fd>
}  
    bc54:	e037883a 	mov	sp,fp
    bc58:	dfc00117 	ldw	ra,4(sp)
    bc5c:	df000017 	ldw	fp,0(sp)
    bc60:	dec00204 	addi	sp,sp,8
    bc64:	f800283a 	ret

0000bc68 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    bc68:	defffc04 	addi	sp,sp,-16
    bc6c:	df000315 	stw	fp,12(sp)
    bc70:	df000304 	addi	fp,sp,12
    bc74:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    bc78:	e0bffe17 	ldw	r2,-8(fp)
    bc7c:	10800217 	ldw	r2,8(r2)
    bc80:	10d00034 	orhi	r3,r2,16384
    bc84:	e0bffe17 	ldw	r2,-8(fp)
    bc88:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bc8c:	e03ffd15 	stw	zero,-12(fp)
    bc90:	00002006 	br	bd14 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    bc94:	e0bffd17 	ldw	r2,-12(fp)
    bc98:	00c00074 	movhi	r3,1
    bc9c:	18c2f404 	addi	r3,r3,3024
    bca0:	10800324 	muli	r2,r2,12
    bca4:	10c5883a 	add	r2,r2,r3
    bca8:	10c00017 	ldw	r3,0(r2)
    bcac:	e0bffe17 	ldw	r2,-8(fp)
    bcb0:	10800017 	ldw	r2,0(r2)
    bcb4:	1880141e 	bne	r3,r2,bd08 <alt_file_locked+0xa0>
    bcb8:	e0bffd17 	ldw	r2,-12(fp)
    bcbc:	00c00074 	movhi	r3,1
    bcc0:	18c2f404 	addi	r3,r3,3024
    bcc4:	10800324 	muli	r2,r2,12
    bcc8:	10c5883a 	add	r2,r2,r3
    bccc:	10800204 	addi	r2,r2,8
    bcd0:	10800017 	ldw	r2,0(r2)
    bcd4:	1004403a 	cmpge	r2,r2,zero
    bcd8:	10000b1e 	bne	r2,zero,bd08 <alt_file_locked+0xa0>
    bcdc:	e0bffd17 	ldw	r2,-12(fp)
    bce0:	10800324 	muli	r2,r2,12
    bce4:	1007883a 	mov	r3,r2
    bce8:	00800074 	movhi	r2,1
    bcec:	1082f404 	addi	r2,r2,3024
    bcf0:	1887883a 	add	r3,r3,r2
    bcf4:	e0bffe17 	ldw	r2,-8(fp)
    bcf8:	18800326 	beq	r3,r2,bd08 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    bcfc:	00bffcc4 	movi	r2,-13
    bd00:	e0bfff15 	stw	r2,-4(fp)
    bd04:	00000a06 	br	bd30 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bd08:	e0bffd17 	ldw	r2,-12(fp)
    bd0c:	10800044 	addi	r2,r2,1
    bd10:	e0bffd15 	stw	r2,-12(fp)
    bd14:	00800074 	movhi	r2,1
    bd18:	10877604 	addi	r2,r2,7640
    bd1c:	10800017 	ldw	r2,0(r2)
    bd20:	1007883a 	mov	r3,r2
    bd24:	e0bffd17 	ldw	r2,-12(fp)
    bd28:	18bfda2e 	bgeu	r3,r2,bc94 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    bd2c:	e03fff15 	stw	zero,-4(fp)
    bd30:	e0bfff17 	ldw	r2,-4(fp)
}
    bd34:	e037883a 	mov	sp,fp
    bd38:	df000017 	ldw	fp,0(sp)
    bd3c:	dec00104 	addi	sp,sp,4
    bd40:	f800283a 	ret

0000bd44 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    bd44:	defff404 	addi	sp,sp,-48
    bd48:	dfc00b15 	stw	ra,44(sp)
    bd4c:	df000a15 	stw	fp,40(sp)
    bd50:	df000a04 	addi	fp,sp,40
    bd54:	e13ffb15 	stw	r4,-20(fp)
    bd58:	e17ffc15 	stw	r5,-16(fp)
    bd5c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    bd60:	00bfffc4 	movi	r2,-1
    bd64:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    bd68:	00bffb44 	movi	r2,-19
    bd6c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    bd70:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    bd74:	e13ffb17 	ldw	r4,-20(fp)
    bd78:	01400074 	movhi	r5,1
    bd7c:	29477404 	addi	r5,r5,7632
    bd80:	000c0f00 	call	c0f0 <alt_find_dev>
    bd84:	e0bffa15 	stw	r2,-24(fp)
    bd88:	e0bffa17 	ldw	r2,-24(fp)
    bd8c:	1004c03a 	cmpne	r2,r2,zero
    bd90:	1000051e 	bne	r2,zero,bda8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    bd94:	e13ffb17 	ldw	r4,-20(fp)
    bd98:	000c1840 	call	c184 <alt_find_file>
    bd9c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    bda0:	00800044 	movi	r2,1
    bda4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    bda8:	e0bffa17 	ldw	r2,-24(fp)
    bdac:	1005003a 	cmpeq	r2,r2,zero
    bdb0:	1000301e 	bne	r2,zero,be74 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    bdb4:	e13ffa17 	ldw	r4,-24(fp)
    bdb8:	000c2a40 	call	c2a4 <alt_get_fd>
    bdbc:	e0bff815 	stw	r2,-32(fp)
    bdc0:	e0bff817 	ldw	r2,-32(fp)
    bdc4:	1004403a 	cmpge	r2,r2,zero
    bdc8:	1000031e 	bne	r2,zero,bdd8 <open+0x94>
    {
      status = index;
    bdcc:	e0bff817 	ldw	r2,-32(fp)
    bdd0:	e0bff715 	stw	r2,-36(fp)
    bdd4:	00002906 	br	be7c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    bdd8:	e0bff817 	ldw	r2,-32(fp)
    bddc:	10800324 	muli	r2,r2,12
    bde0:	1007883a 	mov	r3,r2
    bde4:	00800074 	movhi	r2,1
    bde8:	1082f404 	addi	r2,r2,3024
    bdec:	1885883a 	add	r2,r3,r2
    bdf0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    bdf4:	e0fffc17 	ldw	r3,-16(fp)
    bdf8:	00900034 	movhi	r2,16384
    bdfc:	10bfffc4 	addi	r2,r2,-1
    be00:	1886703a 	and	r3,r3,r2
    be04:	e0bff917 	ldw	r2,-28(fp)
    be08:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    be0c:	e0bff617 	ldw	r2,-40(fp)
    be10:	1004c03a 	cmpne	r2,r2,zero
    be14:	1000061e 	bne	r2,zero,be30 <open+0xec>
    be18:	e13ff917 	ldw	r4,-28(fp)
    be1c:	000bc680 	call	bc68 <alt_file_locked>
    be20:	e0bff715 	stw	r2,-36(fp)
    be24:	e0bff717 	ldw	r2,-36(fp)
    be28:	1004803a 	cmplt	r2,r2,zero
    be2c:	1000131e 	bne	r2,zero,be7c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    be30:	e0bffa17 	ldw	r2,-24(fp)
    be34:	10800317 	ldw	r2,12(r2)
    be38:	1005003a 	cmpeq	r2,r2,zero
    be3c:	1000091e 	bne	r2,zero,be64 <open+0x120>
    be40:	e0bffa17 	ldw	r2,-24(fp)
    be44:	10800317 	ldw	r2,12(r2)
    be48:	e13ff917 	ldw	r4,-28(fp)
    be4c:	e17ffb17 	ldw	r5,-20(fp)
    be50:	e1bffc17 	ldw	r6,-16(fp)
    be54:	e1fffd17 	ldw	r7,-12(fp)
    be58:	103ee83a 	callr	r2
    be5c:	e0bfff15 	stw	r2,-4(fp)
    be60:	00000106 	br	be68 <open+0x124>
    be64:	e03fff15 	stw	zero,-4(fp)
    be68:	e0bfff17 	ldw	r2,-4(fp)
    be6c:	e0bff715 	stw	r2,-36(fp)
    be70:	00000206 	br	be7c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    be74:	00bffb44 	movi	r2,-19
    be78:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    be7c:	e0bff717 	ldw	r2,-36(fp)
    be80:	1004403a 	cmpge	r2,r2,zero
    be84:	1000091e 	bne	r2,zero,beac <open+0x168>
  {
    alt_release_fd (index);  
    be88:	e13ff817 	ldw	r4,-32(fp)
    be8c:	000a5d40 	call	a5d4 <alt_release_fd>
    ALT_ERRNO = -status;
    be90:	000becc0 	call	becc <alt_get_errno>
    be94:	e0fff717 	ldw	r3,-36(fp)
    be98:	00c7c83a 	sub	r3,zero,r3
    be9c:	10c00015 	stw	r3,0(r2)
    return -1;
    bea0:	00bfffc4 	movi	r2,-1
    bea4:	e0bffe15 	stw	r2,-8(fp)
    bea8:	00000206 	br	beb4 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    beac:	e0bff817 	ldw	r2,-32(fp)
    beb0:	e0bffe15 	stw	r2,-8(fp)
    beb4:	e0bffe17 	ldw	r2,-8(fp)
}
    beb8:	e037883a 	mov	sp,fp
    bebc:	dfc00117 	ldw	ra,4(sp)
    bec0:	df000017 	ldw	fp,0(sp)
    bec4:	dec00204 	addi	sp,sp,8
    bec8:	f800283a 	ret

0000becc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    becc:	defffd04 	addi	sp,sp,-12
    bed0:	dfc00215 	stw	ra,8(sp)
    bed4:	df000115 	stw	fp,4(sp)
    bed8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bedc:	00800074 	movhi	r2,1
    bee0:	10877704 	addi	r2,r2,7644
    bee4:	10800017 	ldw	r2,0(r2)
    bee8:	1005003a 	cmpeq	r2,r2,zero
    beec:	1000061e 	bne	r2,zero,bf08 <alt_get_errno+0x3c>
    bef0:	00800074 	movhi	r2,1
    bef4:	10877704 	addi	r2,r2,7644
    bef8:	10800017 	ldw	r2,0(r2)
    befc:	103ee83a 	callr	r2
    bf00:	e0bfff15 	stw	r2,-4(fp)
    bf04:	00000306 	br	bf14 <alt_get_errno+0x48>
    bf08:	00800074 	movhi	r2,1
    bf0c:	10878704 	addi	r2,r2,7708
    bf10:	e0bfff15 	stw	r2,-4(fp)
    bf14:	e0bfff17 	ldw	r2,-4(fp)
}
    bf18:	e037883a 	mov	sp,fp
    bf1c:	dfc00117 	ldw	ra,4(sp)
    bf20:	df000017 	ldw	fp,0(sp)
    bf24:	dec00204 	addi	sp,sp,8
    bf28:	f800283a 	ret

0000bf2c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    bf2c:	defffa04 	addi	sp,sp,-24
    bf30:	df000515 	stw	fp,20(sp)
    bf34:	df000504 	addi	fp,sp,20
    bf38:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bf3c:	0005303a 	rdctl	r2,status
    bf40:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bf44:	e0fffd17 	ldw	r3,-12(fp)
    bf48:	00bfff84 	movi	r2,-2
    bf4c:	1884703a 	and	r2,r3,r2
    bf50:	1001703a 	wrctl	status,r2
  
  return context;
    bf54:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    bf58:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    bf5c:	e0bfff17 	ldw	r2,-4(fp)
    bf60:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    bf64:	e0bffc17 	ldw	r2,-16(fp)
    bf68:	10c00017 	ldw	r3,0(r2)
    bf6c:	e0bffc17 	ldw	r2,-16(fp)
    bf70:	10800117 	ldw	r2,4(r2)
    bf74:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    bf78:	e0bffc17 	ldw	r2,-16(fp)
    bf7c:	10c00117 	ldw	r3,4(r2)
    bf80:	e0bffc17 	ldw	r2,-16(fp)
    bf84:	10800017 	ldw	r2,0(r2)
    bf88:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    bf8c:	e0fffc17 	ldw	r3,-16(fp)
    bf90:	e0bffc17 	ldw	r2,-16(fp)
    bf94:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    bf98:	e0fffc17 	ldw	r3,-16(fp)
    bf9c:	e0bffc17 	ldw	r2,-16(fp)
    bfa0:	18800015 	stw	r2,0(r3)
    bfa4:	e0bffe17 	ldw	r2,-8(fp)
    bfa8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bfac:	e0bffb17 	ldw	r2,-20(fp)
    bfb0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    bfb4:	e037883a 	mov	sp,fp
    bfb8:	df000017 	ldw	fp,0(sp)
    bfbc:	dec00104 	addi	sp,sp,4
    bfc0:	f800283a 	ret

0000bfc4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    bfc4:	defffb04 	addi	sp,sp,-20
    bfc8:	dfc00415 	stw	ra,16(sp)
    bfcc:	df000315 	stw	fp,12(sp)
    bfd0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    bfd4:	d0a00e17 	ldw	r2,-32712(gp)
    bfd8:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    bfdc:	d0a02117 	ldw	r2,-32636(gp)
    bfe0:	10800044 	addi	r2,r2,1
    bfe4:	d0a02115 	stw	r2,-32636(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    bfe8:	00003106 	br	c0b0 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    bfec:	e0bffe17 	ldw	r2,-8(fp)
    bff0:	10800017 	ldw	r2,0(r2)
    bff4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    bff8:	e0bffe17 	ldw	r2,-8(fp)
    bffc:	10800403 	ldbu	r2,16(r2)
    c000:	10803fcc 	andi	r2,r2,255
    c004:	1005003a 	cmpeq	r2,r2,zero
    c008:	1000051e 	bne	r2,zero,c020 <alt_tick+0x5c>
    c00c:	d0a02117 	ldw	r2,-32636(gp)
    c010:	1004c03a 	cmpne	r2,r2,zero
    c014:	1000021e 	bne	r2,zero,c020 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    c018:	e0bffe17 	ldw	r2,-8(fp)
    c01c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    c020:	e0bffe17 	ldw	r2,-8(fp)
    c024:	10c00217 	ldw	r3,8(r2)
    c028:	d0a02117 	ldw	r2,-32636(gp)
    c02c:	10c01e36 	bltu	r2,r3,c0a8 <alt_tick+0xe4>
    c030:	e0bffe17 	ldw	r2,-8(fp)
    c034:	10800403 	ldbu	r2,16(r2)
    c038:	10803fcc 	andi	r2,r2,255
    c03c:	1004c03a 	cmpne	r2,r2,zero
    c040:	1000191e 	bne	r2,zero,c0a8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    c044:	e0bffe17 	ldw	r2,-8(fp)
    c048:	10c00317 	ldw	r3,12(r2)
    c04c:	e0bffe17 	ldw	r2,-8(fp)
    c050:	11000517 	ldw	r4,20(r2)
    c054:	183ee83a 	callr	r3
    c058:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    c05c:	e0bffd17 	ldw	r2,-12(fp)
    c060:	1004c03a 	cmpne	r2,r2,zero
    c064:	1000031e 	bne	r2,zero,c074 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    c068:	e13ffe17 	ldw	r4,-8(fp)
    c06c:	000bf2c0 	call	bf2c <alt_alarm_stop>
    c070:	00000d06 	br	c0a8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    c074:	e0bffe17 	ldw	r2,-8(fp)
    c078:	10c00217 	ldw	r3,8(r2)
    c07c:	e0bffd17 	ldw	r2,-12(fp)
    c080:	1887883a 	add	r3,r3,r2
    c084:	e0bffe17 	ldw	r2,-8(fp)
    c088:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    c08c:	e0bffe17 	ldw	r2,-8(fp)
    c090:	10c00217 	ldw	r3,8(r2)
    c094:	d0a02117 	ldw	r2,-32636(gp)
    c098:	1880032e 	bgeu	r3,r2,c0a8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    c09c:	e0fffe17 	ldw	r3,-8(fp)
    c0a0:	00800044 	movi	r2,1
    c0a4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    c0a8:	e0bfff17 	ldw	r2,-4(fp)
    c0ac:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c0b0:	d0e00e04 	addi	r3,gp,-32712
    c0b4:	e0bffe17 	ldw	r2,-8(fp)
    c0b8:	10ffcc1e 	bne	r2,r3,bfec <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    c0bc:	e037883a 	mov	sp,fp
    c0c0:	dfc00117 	ldw	ra,4(sp)
    c0c4:	df000017 	ldw	fp,0(sp)
    c0c8:	dec00204 	addi	sp,sp,8
    c0cc:	f800283a 	ret

0000c0d0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    c0d0:	deffff04 	addi	sp,sp,-4
    c0d4:	df000015 	stw	fp,0(sp)
    c0d8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c0dc:	000170fa 	wrctl	ienable,zero
}
    c0e0:	e037883a 	mov	sp,fp
    c0e4:	df000017 	ldw	fp,0(sp)
    c0e8:	dec00104 	addi	sp,sp,4
    c0ec:	f800283a 	ret

0000c0f0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c0f0:	defff904 	addi	sp,sp,-28
    c0f4:	dfc00615 	stw	ra,24(sp)
    c0f8:	df000515 	stw	fp,20(sp)
    c0fc:	df000504 	addi	fp,sp,20
    c100:	e13ffd15 	stw	r4,-12(fp)
    c104:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c108:	e0bffe17 	ldw	r2,-8(fp)
    c10c:	10800017 	ldw	r2,0(r2)
    c110:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c114:	e13ffd17 	ldw	r4,-12(fp)
    c118:	00008c40 	call	8c4 <strlen>
    c11c:	10800044 	addi	r2,r2,1
    c120:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c124:	00000d06 	br	c15c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c128:	e0bffc17 	ldw	r2,-16(fp)
    c12c:	11000217 	ldw	r4,8(r2)
    c130:	e1bffb17 	ldw	r6,-20(fp)
    c134:	e17ffd17 	ldw	r5,-12(fp)
    c138:	000c4380 	call	c438 <memcmp>
    c13c:	1004c03a 	cmpne	r2,r2,zero
    c140:	1000031e 	bne	r2,zero,c150 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c144:	e0bffc17 	ldw	r2,-16(fp)
    c148:	e0bfff15 	stw	r2,-4(fp)
    c14c:	00000706 	br	c16c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c150:	e0bffc17 	ldw	r2,-16(fp)
    c154:	10800017 	ldw	r2,0(r2)
    c158:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c15c:	e0fffe17 	ldw	r3,-8(fp)
    c160:	e0bffc17 	ldw	r2,-16(fp)
    c164:	10fff01e 	bne	r2,r3,c128 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    c168:	e03fff15 	stw	zero,-4(fp)
    c16c:	e0bfff17 	ldw	r2,-4(fp)
}
    c170:	e037883a 	mov	sp,fp
    c174:	dfc00117 	ldw	ra,4(sp)
    c178:	df000017 	ldw	fp,0(sp)
    c17c:	dec00204 	addi	sp,sp,8
    c180:	f800283a 	ret

0000c184 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    c184:	defffa04 	addi	sp,sp,-24
    c188:	dfc00515 	stw	ra,20(sp)
    c18c:	df000415 	stw	fp,16(sp)
    c190:	df000404 	addi	fp,sp,16
    c194:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    c198:	00800074 	movhi	r2,1
    c19c:	10877204 	addi	r2,r2,7624
    c1a0:	10800017 	ldw	r2,0(r2)
    c1a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c1a8:	00003306 	br	c278 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    c1ac:	e0bffd17 	ldw	r2,-12(fp)
    c1b0:	11000217 	ldw	r4,8(r2)
    c1b4:	00008c40 	call	8c4 <strlen>
    c1b8:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    c1bc:	e0bffd17 	ldw	r2,-12(fp)
    c1c0:	10c00217 	ldw	r3,8(r2)
    c1c4:	e0bffc17 	ldw	r2,-16(fp)
    c1c8:	1885883a 	add	r2,r3,r2
    c1cc:	10bfffc4 	addi	r2,r2,-1
    c1d0:	10800003 	ldbu	r2,0(r2)
    c1d4:	10803fcc 	andi	r2,r2,255
    c1d8:	1080201c 	xori	r2,r2,128
    c1dc:	10bfe004 	addi	r2,r2,-128
    c1e0:	10800bd8 	cmpnei	r2,r2,47
    c1e4:	1000031e 	bne	r2,zero,c1f4 <alt_find_file+0x70>
    {
      len -= 1;
    c1e8:	e0bffc17 	ldw	r2,-16(fp)
    c1ec:	10bfffc4 	addi	r2,r2,-1
    c1f0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c1f4:	e0bffc17 	ldw	r2,-16(fp)
    c1f8:	1007883a 	mov	r3,r2
    c1fc:	e0bffe17 	ldw	r2,-8(fp)
    c200:	1885883a 	add	r2,r3,r2
    c204:	10800003 	ldbu	r2,0(r2)
    c208:	10803fcc 	andi	r2,r2,255
    c20c:	1080201c 	xori	r2,r2,128
    c210:	10bfe004 	addi	r2,r2,-128
    c214:	10800be0 	cmpeqi	r2,r2,47
    c218:	10000a1e 	bne	r2,zero,c244 <alt_find_file+0xc0>
    c21c:	e0bffc17 	ldw	r2,-16(fp)
    c220:	1007883a 	mov	r3,r2
    c224:	e0bffe17 	ldw	r2,-8(fp)
    c228:	1885883a 	add	r2,r3,r2
    c22c:	10800003 	ldbu	r2,0(r2)
    c230:	10803fcc 	andi	r2,r2,255
    c234:	1080201c 	xori	r2,r2,128
    c238:	10bfe004 	addi	r2,r2,-128
    c23c:	1004c03a 	cmpne	r2,r2,zero
    c240:	10000a1e 	bne	r2,zero,c26c <alt_find_file+0xe8>
    c244:	e0bffd17 	ldw	r2,-12(fp)
    c248:	11000217 	ldw	r4,8(r2)
    c24c:	e1bffc17 	ldw	r6,-16(fp)
    c250:	e17ffe17 	ldw	r5,-8(fp)
    c254:	000c4380 	call	c438 <memcmp>
    c258:	1004c03a 	cmpne	r2,r2,zero
    c25c:	1000031e 	bne	r2,zero,c26c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    c260:	e0bffd17 	ldw	r2,-12(fp)
    c264:	e0bfff15 	stw	r2,-4(fp)
    c268:	00000806 	br	c28c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    c26c:	e0bffd17 	ldw	r2,-12(fp)
    c270:	10800017 	ldw	r2,0(r2)
    c274:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c278:	00c00074 	movhi	r3,1
    c27c:	18c77204 	addi	r3,r3,7624
    c280:	e0bffd17 	ldw	r2,-12(fp)
    c284:	10ffc91e 	bne	r2,r3,c1ac <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    c288:	e03fff15 	stw	zero,-4(fp)
    c28c:	e0bfff17 	ldw	r2,-4(fp)
}
    c290:	e037883a 	mov	sp,fp
    c294:	dfc00117 	ldw	ra,4(sp)
    c298:	df000017 	ldw	fp,0(sp)
    c29c:	dec00204 	addi	sp,sp,8
    c2a0:	f800283a 	ret

0000c2a4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    c2a4:	defffc04 	addi	sp,sp,-16
    c2a8:	df000315 	stw	fp,12(sp)
    c2ac:	df000304 	addi	fp,sp,12
    c2b0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    c2b4:	00bffa04 	movi	r2,-24
    c2b8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c2bc:	e03ffe15 	stw	zero,-8(fp)
    c2c0:	00001e06 	br	c33c <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    c2c4:	e0bffe17 	ldw	r2,-8(fp)
    c2c8:	00c00074 	movhi	r3,1
    c2cc:	18c2f404 	addi	r3,r3,3024
    c2d0:	10800324 	muli	r2,r2,12
    c2d4:	10c5883a 	add	r2,r2,r3
    c2d8:	10800017 	ldw	r2,0(r2)
    c2dc:	1004c03a 	cmpne	r2,r2,zero
    c2e0:	1000131e 	bne	r2,zero,c330 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    c2e4:	e0bffe17 	ldw	r2,-8(fp)
    c2e8:	00c00074 	movhi	r3,1
    c2ec:	18c2f404 	addi	r3,r3,3024
    c2f0:	10800324 	muli	r2,r2,12
    c2f4:	10c7883a 	add	r3,r2,r3
    c2f8:	e0bfff17 	ldw	r2,-4(fp)
    c2fc:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    c300:	00800074 	movhi	r2,1
    c304:	10877604 	addi	r2,r2,7640
    c308:	10c00017 	ldw	r3,0(r2)
    c30c:	e0bffe17 	ldw	r2,-8(fp)
    c310:	1880040e 	bge	r3,r2,c324 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    c314:	00c00074 	movhi	r3,1
    c318:	18c77604 	addi	r3,r3,7640
    c31c:	e0bffe17 	ldw	r2,-8(fp)
    c320:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    c324:	e0bffe17 	ldw	r2,-8(fp)
    c328:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    c32c:	00000606 	br	c348 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c330:	e0bffe17 	ldw	r2,-8(fp)
    c334:	10800044 	addi	r2,r2,1
    c338:	e0bffe15 	stw	r2,-8(fp)
    c33c:	e0bffe17 	ldw	r2,-8(fp)
    c340:	10800810 	cmplti	r2,r2,32
    c344:	103fdf1e 	bne	r2,zero,c2c4 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    c348:	e0bffd17 	ldw	r2,-12(fp)
}
    c34c:	e037883a 	mov	sp,fp
    c350:	df000017 	ldw	fp,0(sp)
    c354:	dec00104 	addi	sp,sp,4
    c358:	f800283a 	ret

0000c35c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    c35c:	defffb04 	addi	sp,sp,-20
    c360:	df000415 	stw	fp,16(sp)
    c364:	df000404 	addi	fp,sp,16
    c368:	e13ffe15 	stw	r4,-8(fp)
    c36c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    c370:	e0bfff17 	ldw	r2,-4(fp)
    c374:	10840070 	cmpltui	r2,r2,4097
    c378:	1000021e 	bne	r2,zero,c384 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    c37c:	00840004 	movi	r2,4096
    c380:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    c384:	e0fffe17 	ldw	r3,-8(fp)
    c388:	e0bfff17 	ldw	r2,-4(fp)
    c38c:	1885883a 	add	r2,r3,r2
    c390:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    c394:	e0bffe17 	ldw	r2,-8(fp)
    c398:	e0bffd15 	stw	r2,-12(fp)
    c39c:	00000506 	br	c3b4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    c3a0:	e0bffd17 	ldw	r2,-12(fp)
    c3a4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    c3a8:	e0bffd17 	ldw	r2,-12(fp)
    c3ac:	10800804 	addi	r2,r2,32
    c3b0:	e0bffd15 	stw	r2,-12(fp)
    c3b4:	e0fffd17 	ldw	r3,-12(fp)
    c3b8:	e0bffc17 	ldw	r2,-16(fp)
    c3bc:	18bff836 	bltu	r3,r2,c3a0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    c3c0:	e0bffe17 	ldw	r2,-8(fp)
    c3c4:	108007cc 	andi	r2,r2,31
    c3c8:	1005003a 	cmpeq	r2,r2,zero
    c3cc:	1000021e 	bne	r2,zero,c3d8 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    c3d0:	e0bffd17 	ldw	r2,-12(fp)
    c3d4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    c3d8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    c3dc:	e037883a 	mov	sp,fp
    c3e0:	df000017 	ldw	fp,0(sp)
    c3e4:	dec00104 	addi	sp,sp,4
    c3e8:	f800283a 	ret

0000c3ec <atexit>:
    c3ec:	200b883a 	mov	r5,r4
    c3f0:	000d883a 	mov	r6,zero
    c3f4:	0009883a 	mov	r4,zero
    c3f8:	000f883a 	mov	r7,zero
    c3fc:	000c4ac1 	jmpi	c4ac <__register_exitproc>

0000c400 <exit>:
    c400:	defffe04 	addi	sp,sp,-8
    c404:	000b883a 	mov	r5,zero
    c408:	dc000015 	stw	r16,0(sp)
    c40c:	dfc00115 	stw	ra,4(sp)
    c410:	2021883a 	mov	r16,r4
    c414:	000c5e40 	call	c5e4 <__call_exitprocs>
    c418:	00800074 	movhi	r2,1
    c41c:	10876d04 	addi	r2,r2,7604
    c420:	11000017 	ldw	r4,0(r2)
    c424:	20800f17 	ldw	r2,60(r4)
    c428:	10000126 	beq	r2,zero,c430 <exit+0x30>
    c42c:	103ee83a 	callr	r2
    c430:	8009883a 	mov	r4,r16
    c434:	000c7d40 	call	c7d4 <_exit>

0000c438 <memcmp>:
    c438:	00c000c4 	movi	r3,3
    c43c:	1980032e 	bgeu	r3,r6,c44c <memcmp+0x14>
    c440:	2144b03a 	or	r2,r4,r5
    c444:	10c4703a 	and	r2,r2,r3
    c448:	10000f26 	beq	r2,zero,c488 <memcmp+0x50>
    c44c:	31ffffc4 	addi	r7,r6,-1
    c450:	3000061e 	bne	r6,zero,c46c <memcmp+0x34>
    c454:	00000a06 	br	c480 <memcmp+0x48>
    c458:	39ffffc4 	addi	r7,r7,-1
    c45c:	00bfffc4 	movi	r2,-1
    c460:	21000044 	addi	r4,r4,1
    c464:	29400044 	addi	r5,r5,1
    c468:	38800526 	beq	r7,r2,c480 <memcmp+0x48>
    c46c:	20c00003 	ldbu	r3,0(r4)
    c470:	28800003 	ldbu	r2,0(r5)
    c474:	18bff826 	beq	r3,r2,c458 <memcmp+0x20>
    c478:	1885c83a 	sub	r2,r3,r2
    c47c:	f800283a 	ret
    c480:	0005883a 	mov	r2,zero
    c484:	f800283a 	ret
    c488:	180f883a 	mov	r7,r3
    c48c:	20c00017 	ldw	r3,0(r4)
    c490:	28800017 	ldw	r2,0(r5)
    c494:	18bfed1e 	bne	r3,r2,c44c <memcmp+0x14>
    c498:	31bfff04 	addi	r6,r6,-4
    c49c:	21000104 	addi	r4,r4,4
    c4a0:	29400104 	addi	r5,r5,4
    c4a4:	39bff936 	bltu	r7,r6,c48c <memcmp+0x54>
    c4a8:	003fe806 	br	c44c <memcmp+0x14>

0000c4ac <__register_exitproc>:
    c4ac:	defffa04 	addi	sp,sp,-24
    c4b0:	00800074 	movhi	r2,1
    c4b4:	10876d04 	addi	r2,r2,7604
    c4b8:	dc000015 	stw	r16,0(sp)
    c4bc:	14000017 	ldw	r16,0(r2)
    c4c0:	dd000415 	stw	r20,16(sp)
    c4c4:	2829883a 	mov	r20,r5
    c4c8:	81405217 	ldw	r5,328(r16)
    c4cc:	dcc00315 	stw	r19,12(sp)
    c4d0:	dc800215 	stw	r18,8(sp)
    c4d4:	dc400115 	stw	r17,4(sp)
    c4d8:	dfc00515 	stw	ra,20(sp)
    c4dc:	2023883a 	mov	r17,r4
    c4e0:	3027883a 	mov	r19,r6
    c4e4:	3825883a 	mov	r18,r7
    c4e8:	28002526 	beq	r5,zero,c580 <__register_exitproc+0xd4>
    c4ec:	29000117 	ldw	r4,4(r5)
    c4f0:	008007c4 	movi	r2,31
    c4f4:	11002716 	blt	r2,r4,c594 <__register_exitproc+0xe8>
    c4f8:	8800101e 	bne	r17,zero,c53c <__register_exitproc+0x90>
    c4fc:	2105883a 	add	r2,r4,r4
    c500:	1085883a 	add	r2,r2,r2
    c504:	20c00044 	addi	r3,r4,1
    c508:	1145883a 	add	r2,r2,r5
    c50c:	0009883a 	mov	r4,zero
    c510:	15000215 	stw	r20,8(r2)
    c514:	28c00115 	stw	r3,4(r5)
    c518:	2005883a 	mov	r2,r4
    c51c:	dfc00517 	ldw	ra,20(sp)
    c520:	dd000417 	ldw	r20,16(sp)
    c524:	dcc00317 	ldw	r19,12(sp)
    c528:	dc800217 	ldw	r18,8(sp)
    c52c:	dc400117 	ldw	r17,4(sp)
    c530:	dc000017 	ldw	r16,0(sp)
    c534:	dec00604 	addi	sp,sp,24
    c538:	f800283a 	ret
    c53c:	29802204 	addi	r6,r5,136
    c540:	00800044 	movi	r2,1
    c544:	110e983a 	sll	r7,r2,r4
    c548:	30c04017 	ldw	r3,256(r6)
    c54c:	2105883a 	add	r2,r4,r4
    c550:	1085883a 	add	r2,r2,r2
    c554:	1185883a 	add	r2,r2,r6
    c558:	19c6b03a 	or	r3,r3,r7
    c55c:	14802015 	stw	r18,128(r2)
    c560:	14c00015 	stw	r19,0(r2)
    c564:	00800084 	movi	r2,2
    c568:	30c04015 	stw	r3,256(r6)
    c56c:	88bfe31e 	bne	r17,r2,c4fc <__register_exitproc+0x50>
    c570:	30804117 	ldw	r2,260(r6)
    c574:	11c4b03a 	or	r2,r2,r7
    c578:	30804115 	stw	r2,260(r6)
    c57c:	003fdf06 	br	c4fc <__register_exitproc+0x50>
    c580:	00800074 	movhi	r2,1
    c584:	1087d804 	addi	r2,r2,8032
    c588:	100b883a 	mov	r5,r2
    c58c:	80805215 	stw	r2,328(r16)
    c590:	003fd606 	br	c4ec <__register_exitproc+0x40>
    c594:	00800034 	movhi	r2,0
    c598:	10800004 	addi	r2,r2,0
    c59c:	1000021e 	bne	r2,zero,c5a8 <__register_exitproc+0xfc>
    c5a0:	013fffc4 	movi	r4,-1
    c5a4:	003fdc06 	br	c518 <__register_exitproc+0x6c>
    c5a8:	01006404 	movi	r4,400
    c5ac:	103ee83a 	callr	r2
    c5b0:	1007883a 	mov	r3,r2
    c5b4:	103ffa26 	beq	r2,zero,c5a0 <__register_exitproc+0xf4>
    c5b8:	80805217 	ldw	r2,328(r16)
    c5bc:	180b883a 	mov	r5,r3
    c5c0:	18000115 	stw	zero,4(r3)
    c5c4:	18800015 	stw	r2,0(r3)
    c5c8:	80c05215 	stw	r3,328(r16)
    c5cc:	18006215 	stw	zero,392(r3)
    c5d0:	18006315 	stw	zero,396(r3)
    c5d4:	0009883a 	mov	r4,zero
    c5d8:	883fc826 	beq	r17,zero,c4fc <__register_exitproc+0x50>
    c5dc:	003fd706 	br	c53c <__register_exitproc+0x90>

0000c5e0 <register_fini>:
    c5e0:	f800283a 	ret

0000c5e4 <__call_exitprocs>:
    c5e4:	00800074 	movhi	r2,1
    c5e8:	10876d04 	addi	r2,r2,7604
    c5ec:	10800017 	ldw	r2,0(r2)
    c5f0:	defff304 	addi	sp,sp,-52
    c5f4:	df000b15 	stw	fp,44(sp)
    c5f8:	d8800115 	stw	r2,4(sp)
    c5fc:	00800034 	movhi	r2,0
    c600:	10800004 	addi	r2,r2,0
    c604:	1005003a 	cmpeq	r2,r2,zero
    c608:	d8800215 	stw	r2,8(sp)
    c60c:	d8800117 	ldw	r2,4(sp)
    c610:	dd400815 	stw	r21,32(sp)
    c614:	dd000715 	stw	r20,28(sp)
    c618:	10805204 	addi	r2,r2,328
    c61c:	dfc00c15 	stw	ra,48(sp)
    c620:	ddc00a15 	stw	r23,40(sp)
    c624:	dd800915 	stw	r22,36(sp)
    c628:	dcc00615 	stw	r19,24(sp)
    c62c:	dc800515 	stw	r18,20(sp)
    c630:	dc400415 	stw	r17,16(sp)
    c634:	dc000315 	stw	r16,12(sp)
    c638:	282b883a 	mov	r21,r5
    c63c:	2039883a 	mov	fp,r4
    c640:	d8800015 	stw	r2,0(sp)
    c644:	2829003a 	cmpeq	r20,r5,zero
    c648:	d8800117 	ldw	r2,4(sp)
    c64c:	14405217 	ldw	r17,328(r2)
    c650:	88001026 	beq	r17,zero,c694 <__call_exitprocs+0xb0>
    c654:	ddc00017 	ldw	r23,0(sp)
    c658:	88800117 	ldw	r2,4(r17)
    c65c:	8c802204 	addi	r18,r17,136
    c660:	143fffc4 	addi	r16,r2,-1
    c664:	80000916 	blt	r16,zero,c68c <__call_exitprocs+0xa8>
    c668:	05bfffc4 	movi	r22,-1
    c66c:	a000151e 	bne	r20,zero,c6c4 <__call_exitprocs+0xe0>
    c670:	8409883a 	add	r4,r16,r16
    c674:	2105883a 	add	r2,r4,r4
    c678:	1485883a 	add	r2,r2,r18
    c67c:	10c02017 	ldw	r3,128(r2)
    c680:	a8c01126 	beq	r21,r3,c6c8 <__call_exitprocs+0xe4>
    c684:	843fffc4 	addi	r16,r16,-1
    c688:	85bff81e 	bne	r16,r22,c66c <__call_exitprocs+0x88>
    c68c:	d8800217 	ldw	r2,8(sp)
    c690:	10003126 	beq	r2,zero,c758 <__call_exitprocs+0x174>
    c694:	dfc00c17 	ldw	ra,48(sp)
    c698:	df000b17 	ldw	fp,44(sp)
    c69c:	ddc00a17 	ldw	r23,40(sp)
    c6a0:	dd800917 	ldw	r22,36(sp)
    c6a4:	dd400817 	ldw	r21,32(sp)
    c6a8:	dd000717 	ldw	r20,28(sp)
    c6ac:	dcc00617 	ldw	r19,24(sp)
    c6b0:	dc800517 	ldw	r18,20(sp)
    c6b4:	dc400417 	ldw	r17,16(sp)
    c6b8:	dc000317 	ldw	r16,12(sp)
    c6bc:	dec00d04 	addi	sp,sp,52
    c6c0:	f800283a 	ret
    c6c4:	8409883a 	add	r4,r16,r16
    c6c8:	88c00117 	ldw	r3,4(r17)
    c6cc:	2105883a 	add	r2,r4,r4
    c6d0:	1445883a 	add	r2,r2,r17
    c6d4:	18ffffc4 	addi	r3,r3,-1
    c6d8:	11800217 	ldw	r6,8(r2)
    c6dc:	1c001526 	beq	r3,r16,c734 <__call_exitprocs+0x150>
    c6e0:	10000215 	stw	zero,8(r2)
    c6e4:	303fe726 	beq	r6,zero,c684 <__call_exitprocs+0xa0>
    c6e8:	00c00044 	movi	r3,1
    c6ec:	1c06983a 	sll	r3,r3,r16
    c6f0:	90804017 	ldw	r2,256(r18)
    c6f4:	8cc00117 	ldw	r19,4(r17)
    c6f8:	1884703a 	and	r2,r3,r2
    c6fc:	10001426 	beq	r2,zero,c750 <__call_exitprocs+0x16c>
    c700:	90804117 	ldw	r2,260(r18)
    c704:	1884703a 	and	r2,r3,r2
    c708:	10000c1e 	bne	r2,zero,c73c <__call_exitprocs+0x158>
    c70c:	2105883a 	add	r2,r4,r4
    c710:	1485883a 	add	r2,r2,r18
    c714:	11400017 	ldw	r5,0(r2)
    c718:	e009883a 	mov	r4,fp
    c71c:	303ee83a 	callr	r6
    c720:	88800117 	ldw	r2,4(r17)
    c724:	98bfc81e 	bne	r19,r2,c648 <__call_exitprocs+0x64>
    c728:	b8800017 	ldw	r2,0(r23)
    c72c:	147fd526 	beq	r2,r17,c684 <__call_exitprocs+0xa0>
    c730:	003fc506 	br	c648 <__call_exitprocs+0x64>
    c734:	8c000115 	stw	r16,4(r17)
    c738:	003fea06 	br	c6e4 <__call_exitprocs+0x100>
    c73c:	2105883a 	add	r2,r4,r4
    c740:	1485883a 	add	r2,r2,r18
    c744:	11000017 	ldw	r4,0(r2)
    c748:	303ee83a 	callr	r6
    c74c:	003ff406 	br	c720 <__call_exitprocs+0x13c>
    c750:	303ee83a 	callr	r6
    c754:	003ff206 	br	c720 <__call_exitprocs+0x13c>
    c758:	88800117 	ldw	r2,4(r17)
    c75c:	1000081e 	bne	r2,zero,c780 <__call_exitprocs+0x19c>
    c760:	89000017 	ldw	r4,0(r17)
    c764:	20000726 	beq	r4,zero,c784 <__call_exitprocs+0x1a0>
    c768:	b9000015 	stw	r4,0(r23)
    c76c:	8809883a 	mov	r4,r17
    c770:	00000000 	call	0 <__alt_mem_ins_mem1>
    c774:	bc400017 	ldw	r17,0(r23)
    c778:	883fb71e 	bne	r17,zero,c658 <__call_exitprocs+0x74>
    c77c:	003fc506 	br	c694 <__call_exitprocs+0xb0>
    c780:	89000017 	ldw	r4,0(r17)
    c784:	882f883a 	mov	r23,r17
    c788:	2023883a 	mov	r17,r4
    c78c:	883fb21e 	bne	r17,zero,c658 <__call_exitprocs+0x74>
    c790:	003fc006 	br	c694 <__call_exitprocs+0xb0>

0000c794 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    c794:	defffd04 	addi	sp,sp,-12
    c798:	df000215 	stw	fp,8(sp)
    c79c:	df000204 	addi	fp,sp,8
    c7a0:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    c7a4:	e0bfff17 	ldw	r2,-4(fp)
    c7a8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    c7ac:	e0bffe17 	ldw	r2,-8(fp)
    c7b0:	1005003a 	cmpeq	r2,r2,zero
    c7b4:	1000021e 	bne	r2,zero,c7c0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    c7b8:	002af070 	cmpltui	zero,zero,43969
    c7bc:	00000106 	br	c7c4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    c7c0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    c7c4:	e037883a 	mov	sp,fp
    c7c8:	df000017 	ldw	fp,0(sp)
    c7cc:	dec00104 	addi	sp,sp,4
    c7d0:	f800283a 	ret

0000c7d4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    c7d4:	defffd04 	addi	sp,sp,-12
    c7d8:	dfc00215 	stw	ra,8(sp)
    c7dc:	df000115 	stw	fp,4(sp)
    c7e0:	df000104 	addi	fp,sp,4
    c7e4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    c7e8:	e13fff17 	ldw	r4,-4(fp)
    c7ec:	000c7940 	call	c794 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    c7f0:	003fff06 	br	c7f0 <_exit+0x1c>
    c7f4:	0000c5e0 	cmpeqi	zero,zero,791
