
producer.elf:     file format elf32-littlenios2
producer.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x0000ca1c memsz 0x0000ca1c flags r-x
    LOAD off    0x0000e3a4 vaddr 0x000483a4 paddr 0x0001ca3c align 2**12
         filesz 0x00001a5c memsz 0x00001d64 flags rw-
    LOAD off    0x00010000 vaddr 0x00048000 paddr 0x00048000 align 2**12
         filesz 0x000003a4 memsz 0x000003a4 flags r--

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c888  000101b4  000101b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003a4  00048000  00048000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  000483a4  0001ca3c  0000e3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000308  00049e00  0001e498  0000fe00  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000103a4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cb8  00000000  00000000  000103c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001494  00000000  00000000  00011080  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000236c1  00000000  00000000  00012514  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007ac8  00000000  00000000  00035bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013acc  00000000  00000000  0003d69d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001908  00000000  00000000  0005116c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002178  00000000  00000000  00052a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000be97  00000000  00000000  00054bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00060a84  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  00060aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00064552  2**0
                  CONTENTS, READONLY
 18 .cpu          00000004  00000000  00000000  00064555  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00064559  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006455a  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006455b  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006455f  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00064563  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00064567  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00064572  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0006457d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  00064588  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000044  00000000  00000000  0006458b  2**0
                  CONTENTS, READONLY
 29 .jdi          00008508  00000000  00000000  000645cf  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006df04  00000000  00000000  0006cad7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b4 l    d  .text	00000000 .text
00048000 l    d  .rodata	00000000 .rodata
000483a4 l    d  .rwdata	00000000 .rwdata
00049e00 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000101ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO_1.c
00000000 l    df *ABS*	00000000 producer.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000108a0 l     F .text	00000058 __sprint_r
000480d2 l     O .rodata	00000010 blanks.3452
000480c2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00012904 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00014300 l     F .text	00000058 std
0001440c l     F .text	00000008 __fp_lock
00014414 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000483a4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00049dcc l     O .rwdata	00000004 charset
00048108 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00048250 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
000185a0 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000196cc l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00019f40 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00019fa0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0001a0a0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0001a1c0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001a2a0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001a3fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0001a628 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00049df0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0001a8c4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00048d60 l     O .rwdata	00001060 jtag_uart_0
0001a9dc l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001ac1c l     F .text	00000228 altera_avalon_jtag_uart_irq
0001ae44 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001b4c0 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001b94c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001bd70 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001beac l     F .text	000000dc alt_file_locked
0001c110 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0001c824 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0001c9d8 l     F .text	00000040 alt_sim_halt
000160bc g     F .text	00000094 _mprec_log10
000161a8 g     F .text	00000088 __any_on
000178b4 g     F .text	00000070 _isatty_r
00048228 g     O .rodata	00000028 __mprec_tinytens
0001a45c g     F .text	0000006c alt_main
00010778 g     F .text	000000a0 _puts_r
00049e00 g     O .bss	00000004 writep
00049e78 g     O .bss	00000100 alt_irq
00017924 g     F .text	00000078 _lseek_r
0001ca3c g       *ABS*	00000000 __flash_rwdata_start
000190c0 g     F .text	00000088 __eqdf2
00010548 g     F .text	00000098 FIFO_1_INIT
0004a108 g       *ABS*	00000000 __alt_heap_start
00010700 g     F .text	00000044 printf
00017380 g     F .text	00000068 __sseek
00014368 g     F .text	000000a4 __sinit
00015040 g     F .text	00000084 _setlocale_r
00014468 g     F .text	00000068 __sfmoreglue
0001a4e8 g     F .text	00000020 __malloc_unlock
00049e04 g     O .bss	00000004 readp
00049e40 g     O .bss	00000004 altera_avalon_timer_ts_freq
00015b38 g     F .text	000000e0 memmove
00014458 g     F .text	00000010 _cleanup
00016230 g     F .text	000000bc _Balloc
000191d0 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00017840 g     F .text	00000074 _fstat_r
00049e2c g     O .bss	00000004 errno
00049e34 g     O .bss	00000004 alt_argv
00051dc0 g       *ABS*	00000000 _gp
00048000 g       *ABS*	00000000 __alt_mem_data_mem0
00048be0 g     O .rwdata	00000180 alt_fd_list
0001c334 g     F .text	00000094 alt_find_dev
00015a98 g     F .text	000000a0 memcpy
0001444c g     F .text	0000000c _cleanup_r
00019368 g     F .text	000000f8 __floatsidf
0001be34 g     F .text	00000078 alt_io_redirect
000192e0 g     F .text	00000088 __ltdf2
0001ca3c g       *ABS*	00000000 __DTOR_END__
00010818 g     F .text	00000014 puts
0001600c g     F .text	000000b0 __ratio
0001b05c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00010744 g     F .text	00000034 _printf_r
00019808 g     F .text	00000008 __udivsi3
0001a100 g     F .text	000000c0 isatty
00048138 g     O .rodata	000000c8 __mprec_tens
00010000 g       *ABS*	00000000 __alt_mem_ins_mem0
0001501c g     F .text	00000008 __locale_charset
0001c5a0 g     F .text	00000090 alt_icache_flush
00049e20 g     O .bss	00000004 __malloc_top_pad
00049dc8 g     O .rwdata	00000004 __mb_cur_max
00015024 g     F .text	0000000c _localeconv_r
00016928 g     F .text	0000003c __i2b
00014a00 g     F .text	0000049c __sfvwrite_r
00017308 g     F .text	00000070 _sbrk_r
00049e08 g     O .bss	00000004 fullp
0001799c g     F .text	00000078 _read_r
000487a4 g     O .rwdata	0000000c __lc_ctype
00049de8 g     O .rwdata	00000004 alt_max_fd
00019c44 g     F .text	00000138 __unpack_d
0001771c g     F .text	00000110 _fclose_r
000142cc g     F .text	00000034 fflush
00049e24 g     O .bss	00000004 __malloc_max_sbrked_mem
00018a30 g     F .text	00000074 __adddf3
00015eec g     F .text	00000120 __b2d
00017ff0 g     F .text	000005b0 __umoddi3
0001a30c g     F .text	000000f0 lseek
00049dc4 g     O .rwdata	00000004 _global_impure_ptr
00016ca4 g     F .text	000005f4 _realloc_r
0004a108 g       *ABS*	00000000 __bss_end
0001bc78 g     F .text	000000f8 alt_iic_isr_register
0001c208 g     F .text	0000010c alt_tick
00017a14 g     F .text	000005dc __udivdi3
00048200 g     O .rodata	00000028 __mprec_bigtens
00016b84 g     F .text	00000120 __s2b
00019538 g     F .text	00000194 __floatunsidf
00015e0c g     F .text	00000060 __mcmp
00014434 g     F .text	00000018 __fp_lock_all
0001bc30 g     F .text	00000048 alt_ic_irq_enabled
000105f8 g     F .text	000000c4 producer
0001c170 g     F .text	00000098 alt_alarm_stop
00049e44 g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	000000c8 alt_irq_handler
00048bb8 g     O .rwdata	00000028 alt_dev_null
0001b87c g     F .text	0000001c alt_dcache_flush_all
00015cd8 g     F .text	00000070 __hi0bits
00019460 g     F .text	000000d8 __fixdfsi
00049e00 g       *ABS*	00000000 __ram_rwdata_end
00049de0 g     O .rwdata	00000008 alt_dev_list
0001a7a4 g     F .text	00000120 write
0001b700 g     F .text	00000028 alt_timestamp_freq
000483a4 g       *ABS*	00000000 __ram_rodata_end
00019fcc g     F .text	000000d4 fstat
00016a64 g     F .text	00000120 __pow5mult
00049e14 g     O .bss	00000004 __nlocale_changed
00019810 g     F .text	00000008 __umodsi3
0004a108 g       *ABS*	00000000 end
0001ab5c g     F .text	000000c0 altera_avalon_jtag_uart_init
0001ca38 g       *ABS*	00000000 __CTOR_LIST__
00050000 g       *ABS*	00000000 __alt_stack_pointer
0001b530 g     F .text	00000090 alt_avalon_timer_sc_init
000198b0 g     F .text	00000080 __clzsi2
0001b280 g     F .text	00000240 altera_avalon_jtag_uart_write
00014358 g     F .text	00000004 __sfp_lock_acquire
000159b4 g     F .text	000000e4 memchr
000108f8 g     F .text	00001eac ___vfprintf_internal_r
000146ec g     F .text	00000314 _free_r
0001c828 g     F .text	000001b0 __call_exitprocs
00049e18 g     O .bss	00000004 __mlocale_changed
00049dd4 g     O .rwdata	00000004 __malloc_sbrk_base
000101b4 g     F .text	0000003c _start
00049e48 g     O .bss	00000004 _alt_tick_rate
000165f4 g     F .text	0000014c __lshift
00049e4c g     O .bss	00000004 _alt_nticks
0001a508 g     F .text	00000120 read
0001a958 g     F .text	00000084 alt_sys_init
0001c6f0 g     F .text	00000134 __register_exitproc
00016740 g     F .text	000001e8 __multiply
0001aef4 g     F .text	00000074 altera_avalon_jtag_uart_close
000483a4 g       *ABS*	00000000 __ram_rwdata_start
00048000 g       *ABS*	00000000 __ram_rodata_start
00049e50 g     O .bss	00000028 __malloc_current_mallinfo
000162ec g     F .text	0000017c __d2b
0001aa14 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0001c4e8 g     F .text	000000b8 alt_get_fd
00019d7c g     F .text	000000c8 __fpcmp_parts_d
000176ac g     F .text	00000070 _close_r
0001c67c g     F .text	00000074 memcmp
0001aac4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0004a108 g       *ABS*	00000000 __alt_stack_base
0001ab0c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000127c8 g     F .text	0000013c __swsetup_r
00018e68 g     F .text	00000258 __divdf3
000144d0 g     F .text	000000f0 __sfp
00016150 g     F .text	00000058 __copybits
000487b0 g     O .rwdata	00000408 __malloc_av_
00014364 g     F .text	00000004 __sinit_lock_release
00018aa4 g     F .text	000003c4 __muldf3
00017464 g     F .text	00000060 __sread
0001c3c8 g     F .text	00000120 alt_find_file
0001b898 g     F .text	000000b4 alt_dev_llist_insert
0001a4c8 g     F .text	00000020 __malloc_lock
0001a6e8 g     F .text	000000bc sbrk
000140d0 g     F .text	000001fc _fflush_r
000175f8 g     F .text	000000b4 _calloc_r
00049e00 g       *ABS*	00000000 __bss_start
00015c18 g     F .text	00000098 memset
000105e0 g     F .text	00000018 main
00049e38 g     O .bss	00000004 alt_envp
00049e28 g     O .bss	00000004 __malloc_max_total_mem
0001aa6c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00017378 g     F .text	00000008 __sclose
00050000 g       *ABS*	00000000 __alt_heap_limit
0001782c g     F .text	00000014 fclose
0001b5c0 g     F .text	000000a4 alt_timestamp_start
00049f78 g     O .bss	00000190 _atexit0
00012b1c g     F .text	000015b4 _dtoa_r
00015274 g     F .text	00000740 _malloc_r
00049dec g     O .rwdata	00000004 alt_errno
00014f64 g     F .text	000000b8 _fwalk
000101f0 g     F .text	000001b0 WRITE_FIFO_1
00019748 g     F .text	00000060 __divsi3
0004825c g     O .rodata	00000014 __thenan_df
000145c0 g     F .text	0000012c _malloc_trim_r
0001ca3c g       *ABS*	00000000 __CTOR_END__
000174c4 g     F .text	000000bc strcmp
00048000 g       *ABS*	00000000 __flash_rodata_start
0001ca3c g       *ABS*	00000000 __DTOR_LIST__
000106bc g     F .text	00000044 delay
00019148 g     F .text	00000088 __nedf2
0001a924 g     F .text	00000034 alt_irq_init
0001a688 g     F .text	00000060 alt_release_fd
00048270 g     O .rodata	00000100 __clz_tab
00049e1c g     O .bss	00000004 _PathLocale
0001c630 g     F .text	00000014 atexit
00017580 g     F .text	00000078 _write_r
000150c4 g     F .text	0000001c setlocale
00049dc0 g     O .rwdata	00000004 _impure_ptr
00049e30 g     O .bss	00000004 alt_argc
00049e3c g     O .bss	00000004 altera_avalon_timer_ts_base
0001ba10 g     F .text	00000064 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00015e6c g     F .text	00000080 __ulp
00017298 g     F .text	00000040 __isinfd
0001441c g     F .text	00000018 __fp_unlock_all
00049dd8 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00015030 g     F .text	00000010 localeconv
0001b664 g     F .text	0000009c alt_timestamp
0001baa4 g     F .text	00000050 alt_ic_isr_register
00049e00 g       *ABS*	00000000 _edata
0004a108 g       *ABS*	00000000 _end
000101b4 g       *ABS*	00000000 __ram_exceptions_end
0001af68 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0001bb90 g     F .text	000000a0 alt_ic_irq_disable
000173e8 g     F .text	0000007c __swrite
00049dd0 g     O .rwdata	00000004 __malloc_trim_threshold
0001c314 g     F .text	00000020 altera_nios2_qsys_irq_init
0001c644 g     F .text	00000038 exit
00014e9c g     F .text	000000c8 _fwalk_reent
00016468 g     F .text	0000018c __mdiff
000197a8 g     F .text	00000060 __modsi3
00050000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
0001435c g     F .text	00000004 __sfp_lock_release
0001ca18 g     F .text	00000020 _exit
000172d8 g     F .text	00000030 __isnand
0001b728 g     F .text	00000154 alt_alarm_start
00019818 g     F .text	00000098 __muldi3
000150e0 g     F .text	00000194 __smakebuf_r
0001082c g     F .text	00000074 strlen
0001bf88 g     F .text	00000188 open
00019258 g     F .text	00000088 __gedf2
000103a0 g     F .text	000001a8 READ_FIFO_1
0001ba74 g     F .text	00000030 alt_icache_flush_all
00049df4 g     O .rwdata	00000004 alt_priority_mask
00049e0c g     O .bss	00000004 emptyp
0001baf4 g     F .text	0000009c alt_ic_irq_enable
000127a4 g     F .text	00000024 __vfprintf_internal
000189b0 g     F .text	00000080 __subdf3
00015d48 g     F .text	000000c4 __lo0bits
00049df8 g     O .rwdata	00000008 alt_alarm_list
0001b9ac g     F .text	00000064 _do_ctors
00049e10 g     O .bss	00000004 countp
00019e44 g     F .text	000000fc close
0001a220 g     F .text	00000080 alt_load
00019930 g     F .text	00000314 __pack_d
00030000 g       *ABS*	00000000 __alt_mem_shared_mem
00000000  w      *UND*	00000000 free
00014360 g     F .text	00000004 __sinit_lock_acquire
00016964 g     F .text	00000100 __multadd
00015cb0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08406d14 	ori	at,at,436
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__alt_mem_ins_mem0-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   10044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   100fc:	0005313a 	rdctl	r2,ipending
   10100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   10108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   1010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10110:	00800044 	movi	r2,1
   10114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   10118:	e0ffff17 	ldw	r3,-4(fp)
   1011c:	e0bffe17 	ldw	r2,-8(fp)
   10120:	1884703a 	and	r2,r3,r2
   10124:	1005003a 	cmpeq	r2,r2,zero
   10128:	1000161e 	bne	r2,zero,10184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	e0bffd17 	ldw	r2,-12(fp)
   10130:	00c00174 	movhi	r3,5
   10134:	18e79e04 	addi	r3,r3,-24968
   10138:	100490fa 	slli	r2,r2,3
   1013c:	10c5883a 	add	r2,r2,r3
   10140:	11400017 	ldw	r5,0(r2)
   10144:	e0bffd17 	ldw	r2,-12(fp)
   10148:	00c00174 	movhi	r3,5
   1014c:	18e79e04 	addi	r3,r3,-24968
   10150:	100490fa 	slli	r2,r2,3
   10154:	10c5883a 	add	r2,r2,r3
   10158:	10800104 	addi	r2,r2,4
   1015c:	11000017 	ldw	r4,0(r2)
   10160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10164:	0005313a 	rdctl	r2,ipending
   10168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   1016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   10174:	e0bfff17 	ldw	r2,-4(fp)
   10178:	1004c03a 	cmpne	r2,r2,zero
   1017c:	103fe31e 	bne	r2,zero,1010c <alt_irq_handler+0x20>
   10180:	00000706 	br	101a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10184:	e0bffe17 	ldw	r2,-8(fp)
   10188:	1085883a 	add	r2,r2,r2
   1018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   10190:	e0bffd17 	ldw	r2,-12(fp)
   10194:	10800044 	addi	r2,r2,1
   10198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   1019c:	003fde06 	br	10118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a0:	e037883a 	mov	sp,fp
   101a4:	dfc00117 	ldw	ra,4(sp)
   101a8:	df000017 	ldw	fp,0(sp)
   101ac:	dec00204 	addi	sp,sp,8
   101b0:	f800283a 	ret

Disassembly of section .text:

000101b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101b4:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
   101b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   101bc:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   101c0:	d6877014 	ori	gp,gp,7616
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101c4:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   101c8:	10a78014 	ori	r2,r2,40448

    movhi r3, %hi(__bss_end)
   101cc:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   101d0:	18e84214 	ori	r3,r3,41224

    beq r2, r3, 1f
   101d4:	10c00326 	beq	r2,r3,101e4 <_start+0x30>

0:
    stw zero, (r2)
   101d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101e0:	10fffd36 	bltu	r2,r3,101d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101e4:	001a2200 	call	1a220 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101e8:	001a45c0 	call	1a45c <alt_main>

000101ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101ec:	003fff06 	br	101ec <alt_after_alt_main>

000101f0 <WRITE_FIFO_1>:


#include "FIFO_1.h"

void WRITE_FIFO_1(int *buffer)
{
   101f0:	defffd04 	addi	sp,sp,-12
   101f4:	df000215 	stw	fp,8(sp)
   101f8:	df000204 	addi	fp,sp,8
   101fc:	e13ffe15 	stw	r4,-8(fp)
	// Wait if the fifo is full
	while(IORD_32DIRECT(MEM_BASE,fullp)==0x1){}
   10200:	d0a01217 	ldw	r2,-32696(gp)
   10204:	1007883a 	mov	r3,r2
   10208:	008000b4 	movhi	r2,2
   1020c:	10801204 	addi	r2,r2,72
   10210:	1885883a 	add	r2,r3,r2
   10214:	10800037 	ldwio	r2,0(r2)
   10218:	10800060 	cmpeqi	r2,r2,1
   1021c:	103ff81e 	bne	r2,zero,10200 <WRITE_FIFO_1+0x10>

	// Write the data to FIFO
	IOWR_32DIRECT(MEM_BASE,writep,*buffer);
   10220:	d0a01017 	ldw	r2,-32704(gp)
   10224:	1007883a 	mov	r3,r2
   10228:	008000b4 	movhi	r2,2
   1022c:	10801204 	addi	r2,r2,72
   10230:	1889883a 	add	r4,r3,r2
   10234:	e0bffe17 	ldw	r2,-8(fp)
   10238:	10c00017 	ldw	r3,0(r2)
   1023c:	2005883a 	mov	r2,r4
   10240:	10c00035 	stwio	r3,0(r2)
	//printf("Producer sent [%i]\t%x\t%i\n",*buffer,writep,IORD_32DIRECT(MEM_BASE,writep));
	// Update the write pointer
	writep += UNIT_SIZE;
   10244:	d0a01017 	ldw	r2,-32704(gp)
   10248:	10800104 	addi	r2,r2,4
   1024c:	d0a01015 	stw	r2,-32704(gp)

	writep = writep%(CAPACITY*UNIT_SIZE);
   10250:	d0e01017 	ldw	r3,-32704(gp)
   10254:	00a00034 	movhi	r2,32768
   10258:	10803fc4 	addi	r2,r2,255
   1025c:	1886703a 	and	r3,r3,r2
   10260:	e0ffff15 	stw	r3,-4(fp)
   10264:	e0ffff17 	ldw	r3,-4(fp)
   10268:	1804403a 	cmpge	r2,r3,zero
   1026c:	10000a1e 	bne	r2,zero,10298 <WRITE_FIFO_1+0xa8>
   10270:	e0bfff17 	ldw	r2,-4(fp)
   10274:	10bfffc4 	addi	r2,r2,-1
   10278:	e0bfff15 	stw	r2,-4(fp)
   1027c:	00bfc004 	movi	r2,-256
   10280:	e0ffff17 	ldw	r3,-4(fp)
   10284:	1886b03a 	or	r3,r3,r2
   10288:	e0ffff15 	stw	r3,-4(fp)
   1028c:	e0bfff17 	ldw	r2,-4(fp)
   10290:	10800044 	addi	r2,r2,1
   10294:	e0bfff15 	stw	r2,-4(fp)
   10298:	e0bfff17 	ldw	r2,-4(fp)
   1029c:	d0a01015 	stw	r2,-32704(gp)

	// Update "count" in shared mem
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE,countp) + 0x1);
   102a0:	d0a01417 	ldw	r2,-32688(gp)
   102a4:	1007883a 	mov	r3,r2
   102a8:	008000b4 	movhi	r2,2
   102ac:	10801204 	addi	r2,r2,72
   102b0:	1889883a 	add	r4,r3,r2
   102b4:	d0a01417 	ldw	r2,-32688(gp)
   102b8:	1007883a 	mov	r3,r2
   102bc:	008000b4 	movhi	r2,2
   102c0:	10801204 	addi	r2,r2,72
   102c4:	1885883a 	add	r2,r3,r2
   102c8:	10800037 	ldwio	r2,0(r2)
   102cc:	10c00044 	addi	r3,r2,1
   102d0:	2005883a 	mov	r2,r4
   102d4:	10c00035 	stwio	r3,0(r2)

	// Update the "full?" and "empty?" flags accordingly
	// Set the full flag if FIFO is now full
	// Reset the empty flag if FIFO now has 1 entry
	if(IORD_32DIRECT(MEM_BASE,countp)==CAPACITY){
   102d8:	d0a01417 	ldw	r2,-32688(gp)
   102dc:	1007883a 	mov	r3,r2
   102e0:	008000b4 	movhi	r2,2
   102e4:	10801204 	addi	r2,r2,72
   102e8:	1885883a 	add	r2,r3,r2
   102ec:	10800037 	ldwio	r2,0(r2)
   102f0:	10801018 	cmpnei	r2,r2,64
   102f4:	1000091e 	bne	r2,zero,1031c <WRITE_FIFO_1+0x12c>
		IOWR_32DIRECT(MEM_BASE,fullp,0x1);
   102f8:	d0a01217 	ldw	r2,-32696(gp)
   102fc:	1007883a 	mov	r3,r2
   10300:	008000b4 	movhi	r2,2
   10304:	10801204 	addi	r2,r2,72
   10308:	1885883a 	add	r2,r3,r2
   1030c:	1007883a 	mov	r3,r2
   10310:	00800044 	movi	r2,1
   10314:	18800035 	stwio	r2,0(r3)
   10318:	00000606 	br	10334 <WRITE_FIFO_1+0x144>
	}else{
		IOWR_32DIRECT(MEM_BASE,fullp,0x0);
   1031c:	d0a01217 	ldw	r2,-32696(gp)
   10320:	1007883a 	mov	r3,r2
   10324:	008000b4 	movhi	r2,2
   10328:	10801204 	addi	r2,r2,72
   1032c:	1885883a 	add	r2,r3,r2
   10330:	10000035 	stwio	zero,0(r2)
	}
	if(IORD_32DIRECT(MEM_BASE,countp)==0x0){
   10334:	d0a01417 	ldw	r2,-32688(gp)
   10338:	1007883a 	mov	r3,r2
   1033c:	008000b4 	movhi	r2,2
   10340:	10801204 	addi	r2,r2,72
   10344:	1885883a 	add	r2,r3,r2
   10348:	10800037 	ldwio	r2,0(r2)
   1034c:	1004c03a 	cmpne	r2,r2,zero
   10350:	1000091e 	bne	r2,zero,10378 <WRITE_FIFO_1+0x188>
		IOWR_32DIRECT(MEM_BASE,emptyp,0x1);
   10354:	d0a01317 	ldw	r2,-32692(gp)
   10358:	1007883a 	mov	r3,r2
   1035c:	008000b4 	movhi	r2,2
   10360:	10801204 	addi	r2,r2,72
   10364:	1885883a 	add	r2,r3,r2
   10368:	1007883a 	mov	r3,r2
   1036c:	00800044 	movi	r2,1
   10370:	18800035 	stwio	r2,0(r3)
   10374:	00000606 	br	10390 <WRITE_FIFO_1+0x1a0>
	}else{
		IOWR_32DIRECT(MEM_BASE,emptyp,0x0);
   10378:	d0a01317 	ldw	r2,-32692(gp)
   1037c:	1007883a 	mov	r3,r2
   10380:	008000b4 	movhi	r2,2
   10384:	10801204 	addi	r2,r2,72
   10388:	1885883a 	add	r2,r3,r2
   1038c:	10000035 	stwio	zero,0(r2)
	}
}
   10390:	e037883a 	mov	sp,fp
   10394:	df000017 	ldw	fp,0(sp)
   10398:	dec00104 	addi	sp,sp,4
   1039c:	f800283a 	ret

000103a0 <READ_FIFO_1>:


void READ_FIFO_1(int *buffer)
{
   103a0:	defffd04 	addi	sp,sp,-12
   103a4:	df000215 	stw	fp,8(sp)
   103a8:	df000204 	addi	fp,sp,8
   103ac:	e13ffe15 	stw	r4,-8(fp)
	// Wait if the fifo is empty
	while(IORD_32DIRECT(MEM_BASE,emptyp)==0x1){}
   103b0:	d0a01317 	ldw	r2,-32692(gp)
   103b4:	1007883a 	mov	r3,r2
   103b8:	008000b4 	movhi	r2,2
   103bc:	10801204 	addi	r2,r2,72
   103c0:	1885883a 	add	r2,r3,r2
   103c4:	10800037 	ldwio	r2,0(r2)
   103c8:	10800060 	cmpeqi	r2,r2,1
   103cc:	103ff81e 	bne	r2,zero,103b0 <READ_FIFO_1+0x10>

	// Read the data
	buffer = IORD_32DIRECT(MEM_BASE,readp);
   103d0:	d0a01117 	ldw	r2,-32700(gp)
   103d4:	1007883a 	mov	r3,r2
   103d8:	008000b4 	movhi	r2,2
   103dc:	10801204 	addi	r2,r2,72
   103e0:	1885883a 	add	r2,r3,r2
   103e4:	10800037 	ldwio	r2,0(r2)
   103e8:	e0bffe15 	stw	r2,-8(fp)

	// Update the read pointer
	readp += UNIT_SIZE;
   103ec:	d0a01117 	ldw	r2,-32700(gp)
   103f0:	10800104 	addi	r2,r2,4
   103f4:	d0a01115 	stw	r2,-32700(gp)
	readp = readp%(CAPACITY*UNIT_SIZE);
   103f8:	d0e01117 	ldw	r3,-32700(gp)
   103fc:	00a00034 	movhi	r2,32768
   10400:	10803fc4 	addi	r2,r2,255
   10404:	1886703a 	and	r3,r3,r2
   10408:	e0ffff15 	stw	r3,-4(fp)
   1040c:	e0ffff17 	ldw	r3,-4(fp)
   10410:	1804403a 	cmpge	r2,r3,zero
   10414:	10000a1e 	bne	r2,zero,10440 <READ_FIFO_1+0xa0>
   10418:	e0bfff17 	ldw	r2,-4(fp)
   1041c:	10bfffc4 	addi	r2,r2,-1
   10420:	e0bfff15 	stw	r2,-4(fp)
   10424:	00bfc004 	movi	r2,-256
   10428:	e0ffff17 	ldw	r3,-4(fp)
   1042c:	1886b03a 	or	r3,r3,r2
   10430:	e0ffff15 	stw	r3,-4(fp)
   10434:	e0bfff17 	ldw	r2,-4(fp)
   10438:	10800044 	addi	r2,r2,1
   1043c:	e0bfff15 	stw	r2,-4(fp)
   10440:	e0bfff17 	ldw	r2,-4(fp)
   10444:	d0a01115 	stw	r2,-32700(gp)

	// Update "count" in shared mem
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE,countp) - 0x1);
   10448:	d0a01417 	ldw	r2,-32688(gp)
   1044c:	1007883a 	mov	r3,r2
   10450:	008000b4 	movhi	r2,2
   10454:	10801204 	addi	r2,r2,72
   10458:	1889883a 	add	r4,r3,r2
   1045c:	d0a01417 	ldw	r2,-32688(gp)
   10460:	1007883a 	mov	r3,r2
   10464:	008000b4 	movhi	r2,2
   10468:	10801204 	addi	r2,r2,72
   1046c:	1885883a 	add	r2,r3,r2
   10470:	10800037 	ldwio	r2,0(r2)
   10474:	10ffffc4 	addi	r3,r2,-1
   10478:	2005883a 	mov	r2,r4
   1047c:	10c00035 	stwio	r3,0(r2)

	// Update the "full?" and "empty?" flags accordingly
	// Set the empty flag if FIFO is now empty
	// Reset the full flag if FIFO now has 1 entry less than capacity
	if(IORD_32DIRECT(MEM_BASE,countp)==CAPACITY){
   10480:	d0a01417 	ldw	r2,-32688(gp)
   10484:	1007883a 	mov	r3,r2
   10488:	008000b4 	movhi	r2,2
   1048c:	10801204 	addi	r2,r2,72
   10490:	1885883a 	add	r2,r3,r2
   10494:	10800037 	ldwio	r2,0(r2)
   10498:	10801018 	cmpnei	r2,r2,64
   1049c:	1000091e 	bne	r2,zero,104c4 <READ_FIFO_1+0x124>
		IOWR_32DIRECT(MEM_BASE,fullp,0x1);
   104a0:	d0a01217 	ldw	r2,-32696(gp)
   104a4:	1007883a 	mov	r3,r2
   104a8:	008000b4 	movhi	r2,2
   104ac:	10801204 	addi	r2,r2,72
   104b0:	1885883a 	add	r2,r3,r2
   104b4:	1007883a 	mov	r3,r2
   104b8:	00800044 	movi	r2,1
   104bc:	18800035 	stwio	r2,0(r3)
   104c0:	00000606 	br	104dc <READ_FIFO_1+0x13c>
	}else{
		IOWR_32DIRECT(MEM_BASE,fullp,0x0);
   104c4:	d0a01217 	ldw	r2,-32696(gp)
   104c8:	1007883a 	mov	r3,r2
   104cc:	008000b4 	movhi	r2,2
   104d0:	10801204 	addi	r2,r2,72
   104d4:	1885883a 	add	r2,r3,r2
   104d8:	10000035 	stwio	zero,0(r2)
	}
	if(IORD_32DIRECT(MEM_BASE,countp)==0x0){
   104dc:	d0a01417 	ldw	r2,-32688(gp)
   104e0:	1007883a 	mov	r3,r2
   104e4:	008000b4 	movhi	r2,2
   104e8:	10801204 	addi	r2,r2,72
   104ec:	1885883a 	add	r2,r3,r2
   104f0:	10800037 	ldwio	r2,0(r2)
   104f4:	1004c03a 	cmpne	r2,r2,zero
   104f8:	1000091e 	bne	r2,zero,10520 <READ_FIFO_1+0x180>
		IOWR_32DIRECT(MEM_BASE,emptyp,0x1);
   104fc:	d0a01317 	ldw	r2,-32692(gp)
   10500:	1007883a 	mov	r3,r2
   10504:	008000b4 	movhi	r2,2
   10508:	10801204 	addi	r2,r2,72
   1050c:	1885883a 	add	r2,r3,r2
   10510:	1007883a 	mov	r3,r2
   10514:	00800044 	movi	r2,1
   10518:	18800035 	stwio	r2,0(r3)
   1051c:	00000606 	br	10538 <READ_FIFO_1+0x198>
	}else{
		IOWR_32DIRECT(MEM_BASE,emptyp,0x0);
   10520:	d0a01317 	ldw	r2,-32692(gp)
   10524:	1007883a 	mov	r3,r2
   10528:	008000b4 	movhi	r2,2
   1052c:	10801204 	addi	r2,r2,72
   10530:	1885883a 	add	r2,r3,r2
   10534:	10000035 	stwio	zero,0(r2)
	}
}
   10538:	e037883a 	mov	sp,fp
   1053c:	df000017 	ldw	fp,0(sp)
   10540:	dec00104 	addi	sp,sp,4
   10544:	f800283a 	ret

00010548 <FIFO_1_INIT>:

//Initialization
void FIFO_1_INIT()
{
   10548:	deffff04 	addi	sp,sp,-4
   1054c:	df000015 	stw	fp,0(sp)
   10550:	d839883a 	mov	fp,sp
	writep = STARTP; // Initially the FIFO is empty, so start writing at the first slot
   10554:	00800304 	movi	r2,12
   10558:	d0a01015 	stw	r2,-32704(gp)
	readp  = STARTP;
   1055c:	00800304 	movi	r2,12
   10560:	d0a01115 	stw	r2,-32700(gp)
	fullp   = 0x0; // SET THIS OFFSET (If there are previous FIFOs in shared memory, use Prev Fifo's STARTP + Prev Fifo's size)
   10564:	d0201215 	stw	zero,-32696(gp)
	emptyp   = fullp + UNIT_SIZE;
   10568:	d0a01217 	ldw	r2,-32696(gp)
   1056c:	10800104 	addi	r2,r2,4
   10570:	d0a01315 	stw	r2,-32692(gp)
	countp  = emptyp + UNIT_SIZE;
   10574:	d0a01317 	ldw	r2,-32692(gp)
   10578:	10800104 	addi	r2,r2,4
   1057c:	d0a01415 	stw	r2,-32688(gp)


	// Assigning values for the flags.
	IOWR_32DIRECT(MEM_BASE, fullp, 0x0);
   10580:	d0a01217 	ldw	r2,-32696(gp)
   10584:	1007883a 	mov	r3,r2
   10588:	008000b4 	movhi	r2,2
   1058c:	10801204 	addi	r2,r2,72
   10590:	1885883a 	add	r2,r3,r2
   10594:	10000035 	stwio	zero,0(r2)
	IOWR_32DIRECT(MEM_BASE, emptyp, 0x1); // The fifo is empty at the start
   10598:	d0a01317 	ldw	r2,-32692(gp)
   1059c:	1007883a 	mov	r3,r2
   105a0:	008000b4 	movhi	r2,2
   105a4:	10801204 	addi	r2,r2,72
   105a8:	1885883a 	add	r2,r3,r2
   105ac:	1007883a 	mov	r3,r2
   105b0:	00800044 	movi	r2,1
   105b4:	18800035 	stwio	r2,0(r3)
	IOWR_32DIRECT(MEM_BASE, countp, 0x0); // The fifo is empty at the start
   105b8:	d0a01417 	ldw	r2,-32688(gp)
   105bc:	1007883a 	mov	r3,r2
   105c0:	008000b4 	movhi	r2,2
   105c4:	10801204 	addi	r2,r2,72
   105c8:	1885883a 	add	r2,r3,r2
   105cc:	10000035 	stwio	zero,0(r2)

}
   105d0:	e037883a 	mov	sp,fp
   105d4:	df000017 	ldw	fp,0(sp)
   105d8:	dec00104 	addi	sp,sp,4
   105dc:	f800283a 	ret

000105e0 <main>:
void delay(int n);
int producer();


int main()
{
   105e0:	defffe04 	addi	sp,sp,-8
   105e4:	dfc00115 	stw	ra,4(sp)
   105e8:	df000015 	stw	fp,0(sp)
   105ec:	d839883a 	mov	fp,sp
	producer();
   105f0:	00105f80 	call	105f8 <producer>

	while(1) { }
   105f4:	003fff06 	br	105f4 <main+0x14>

000105f8 <producer>:
//	while(1){}
	return 0;
}

int producer()
{
   105f8:	defffb04 	addi	sp,sp,-20
   105fc:	dfc00415 	stw	ra,16(sp)
   10600:	df000315 	stw	fp,12(sp)
   10604:	df000304 	addi	fp,sp,12
	alt_u32 sw_fast_timeA, sw_fast_timeB;
	printf("Producer starting..\n");
   10608:	01000174 	movhi	r4,5
   1060c:	21200004 	addi	r4,r4,-32768
   10610:	00108180 	call	10818 <puts>

	FIFO_1_INIT(); // Initialize the FIFO
   10614:	00105480 	call	10548 <FIFO_1_INIT>

	int j = 5;
   10618:	00800144 	movi	r2,5
   1061c:	e0bfff15 	stw	r2,-4(fp)
	sw_fast_timeA = alt_timestamp();
   10620:	001b6640 	call	1b664 <alt_timestamp>
   10624:	e0bffe15 	stw	r2,-8(fp)
	while(j<=500)
   10628:	00001006 	br	1066c <producer+0x74>
	{
		delay(100000);
   1062c:	010000b4 	movhi	r4,2
   10630:	2121a804 	addi	r4,r4,-31072
   10634:	00106bc0 	call	106bc <delay>

		WRITE_FIFO_1(&j); // Write to the producer-consumer fifo
   10638:	e13fff04 	addi	r4,fp,-4
   1063c:	00101f00 	call	101f0 <WRITE_FIFO_1>

		delay(100000);
   10640:	010000b4 	movhi	r4,2
   10644:	2121a804 	addi	r4,r4,-31072
   10648:	00106bc0 	call	106bc <delay>

		printf("Producer sent [%i]\t%x\n",j,writep);
   1064c:	e17fff17 	ldw	r5,-4(fp)
   10650:	d1a01017 	ldw	r6,-32704(gp)
   10654:	01000174 	movhi	r4,5
   10658:	21200504 	addi	r4,r4,-32748
   1065c:	00107000 	call	10700 <printf>

		j+=10;
   10660:	e0bfff17 	ldw	r2,-4(fp)
   10664:	10800284 	addi	r2,r2,10
   10668:	e0bfff15 	stw	r2,-4(fp)

	FIFO_1_INIT(); // Initialize the FIFO

	int j = 5;
	sw_fast_timeA = alt_timestamp();
	while(j<=500)
   1066c:	e0bfff17 	ldw	r2,-4(fp)
   10670:	10807d50 	cmplti	r2,r2,501
   10674:	103fed1e 	bne	r2,zero,1062c <producer+0x34>
		printf("Producer sent [%i]\t%x\n",j,writep);

		j+=10;

	}
	sw_fast_timeB = alt_timestamp();
   10678:	001b6640 	call	1b664 <alt_timestamp>
   1067c:	e0bffd15 	stw	r2,-12(fp)
	printf("Time for Write operation: %lu\n",(unsigned long)(sw_fast_timeB-sw_fast_timeA));
   10680:	e0fffd17 	ldw	r3,-12(fp)
   10684:	e0bffe17 	ldw	r2,-8(fp)
   10688:	188bc83a 	sub	r5,r3,r2
   1068c:	01000174 	movhi	r4,5
   10690:	21200b04 	addi	r4,r4,-32724
   10694:	00107000 	call	10700 <printf>
	printf("Producer finished..\n");
   10698:	01000174 	movhi	r4,5
   1069c:	21201304 	addi	r4,r4,-32692
   106a0:	00108180 	call	10818 <puts>
	return 0;
   106a4:	0005883a 	mov	r2,zero
}
   106a8:	e037883a 	mov	sp,fp
   106ac:	dfc00117 	ldw	ra,4(sp)
   106b0:	df000017 	ldw	fp,0(sp)
   106b4:	dec00204 	addi	sp,sp,8
   106b8:	f800283a 	ret

000106bc <delay>:


void delay(int n)
{
   106bc:	defffd04 	addi	sp,sp,-12
   106c0:	df000215 	stw	fp,8(sp)
   106c4:	df000204 	addi	fp,sp,8
   106c8:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i=n; i>0; i--)
   106cc:	e0bfff17 	ldw	r2,-4(fp)
   106d0:	e0bffe15 	stw	r2,-8(fp)
   106d4:	00000306 	br	106e4 <delay+0x28>
   106d8:	e0bffe17 	ldw	r2,-8(fp)
   106dc:	10bfffc4 	addi	r2,r2,-1
   106e0:	e0bffe15 	stw	r2,-8(fp)
   106e4:	e0bffe17 	ldw	r2,-8(fp)
   106e8:	10800048 	cmpgei	r2,r2,1
   106ec:	103ffa1e 	bne	r2,zero,106d8 <delay+0x1c>
	{
		continue;
	}
}
   106f0:	e037883a 	mov	sp,fp
   106f4:	df000017 	ldw	fp,0(sp)
   106f8:	dec00104 	addi	sp,sp,4
   106fc:	f800283a 	ret

00010700 <printf>:
   10700:	defffb04 	addi	sp,sp,-20
   10704:	dfc00115 	stw	ra,4(sp)
   10708:	d9400215 	stw	r5,8(sp)
   1070c:	d9800315 	stw	r6,12(sp)
   10710:	d9c00415 	stw	r7,16(sp)
   10714:	00800174 	movhi	r2,5
   10718:	10a77004 	addi	r2,r2,-25152
   1071c:	10c00017 	ldw	r3,0(r2)
   10720:	200b883a 	mov	r5,r4
   10724:	d8800204 	addi	r2,sp,8
   10728:	19000217 	ldw	r4,8(r3)
   1072c:	100d883a 	mov	r6,r2
   10730:	d8800015 	stw	r2,0(sp)
   10734:	00127a40 	call	127a4 <__vfprintf_internal>
   10738:	dfc00117 	ldw	ra,4(sp)
   1073c:	dec00504 	addi	sp,sp,20
   10740:	f800283a 	ret

00010744 <_printf_r>:
   10744:	defffc04 	addi	sp,sp,-16
   10748:	dfc00115 	stw	ra,4(sp)
   1074c:	d9800215 	stw	r6,8(sp)
   10750:	d9c00315 	stw	r7,12(sp)
   10754:	280d883a 	mov	r6,r5
   10758:	21400217 	ldw	r5,8(r4)
   1075c:	d8c00204 	addi	r3,sp,8
   10760:	180f883a 	mov	r7,r3
   10764:	d8c00015 	stw	r3,0(sp)
   10768:	00108f80 	call	108f8 <___vfprintf_internal_r>
   1076c:	dfc00117 	ldw	ra,4(sp)
   10770:	dec00404 	addi	sp,sp,16
   10774:	f800283a 	ret

00010778 <_puts_r>:
   10778:	defff604 	addi	sp,sp,-40
   1077c:	dc400715 	stw	r17,28(sp)
   10780:	2023883a 	mov	r17,r4
   10784:	2809883a 	mov	r4,r5
   10788:	dfc00915 	stw	ra,36(sp)
   1078c:	dcc00815 	stw	r19,32(sp)
   10790:	2827883a 	mov	r19,r5
   10794:	001082c0 	call	1082c <strlen>
   10798:	89400217 	ldw	r5,8(r17)
   1079c:	00c00174 	movhi	r3,5
   107a0:	18e01804 	addi	r3,r3,-32672
   107a4:	01c00044 	movi	r7,1
   107a8:	12000044 	addi	r8,r2,1
   107ac:	d8c00515 	stw	r3,20(sp)
   107b0:	d9c00615 	stw	r7,24(sp)
   107b4:	d8c00304 	addi	r3,sp,12
   107b8:	01c00084 	movi	r7,2
   107bc:	8809883a 	mov	r4,r17
   107c0:	d80d883a 	mov	r6,sp
   107c4:	d8c00015 	stw	r3,0(sp)
   107c8:	dcc00315 	stw	r19,12(sp)
   107cc:	da000215 	stw	r8,8(sp)
   107d0:	d9c00115 	stw	r7,4(sp)
   107d4:	d8800415 	stw	r2,16(sp)
   107d8:	0014a000 	call	14a00 <__sfvwrite_r>
   107dc:	00ffffc4 	movi	r3,-1
   107e0:	10000626 	beq	r2,zero,107fc <_puts_r+0x84>
   107e4:	1805883a 	mov	r2,r3
   107e8:	dfc00917 	ldw	ra,36(sp)
   107ec:	dcc00817 	ldw	r19,32(sp)
   107f0:	dc400717 	ldw	r17,28(sp)
   107f4:	dec00a04 	addi	sp,sp,40
   107f8:	f800283a 	ret
   107fc:	00c00284 	movi	r3,10
   10800:	1805883a 	mov	r2,r3
   10804:	dfc00917 	ldw	ra,36(sp)
   10808:	dcc00817 	ldw	r19,32(sp)
   1080c:	dc400717 	ldw	r17,28(sp)
   10810:	dec00a04 	addi	sp,sp,40
   10814:	f800283a 	ret

00010818 <puts>:
   10818:	00800174 	movhi	r2,5
   1081c:	10a77004 	addi	r2,r2,-25152
   10820:	200b883a 	mov	r5,r4
   10824:	11000017 	ldw	r4,0(r2)
   10828:	00107781 	jmpi	10778 <_puts_r>

0001082c <strlen>:
   1082c:	208000cc 	andi	r2,r4,3
   10830:	2011883a 	mov	r8,r4
   10834:	1000161e 	bne	r2,zero,10890 <strlen+0x64>
   10838:	20c00017 	ldw	r3,0(r4)
   1083c:	017fbff4 	movhi	r5,65279
   10840:	297fbfc4 	addi	r5,r5,-257
   10844:	01e02074 	movhi	r7,32897
   10848:	39e02004 	addi	r7,r7,-32640
   1084c:	1945883a 	add	r2,r3,r5
   10850:	11c4703a 	and	r2,r2,r7
   10854:	00c6303a 	nor	r3,zero,r3
   10858:	1886703a 	and	r3,r3,r2
   1085c:	18000c1e 	bne	r3,zero,10890 <strlen+0x64>
   10860:	280d883a 	mov	r6,r5
   10864:	380b883a 	mov	r5,r7
   10868:	21000104 	addi	r4,r4,4
   1086c:	20800017 	ldw	r2,0(r4)
   10870:	1187883a 	add	r3,r2,r6
   10874:	1946703a 	and	r3,r3,r5
   10878:	0084303a 	nor	r2,zero,r2
   1087c:	10c4703a 	and	r2,r2,r3
   10880:	103ff926 	beq	r2,zero,10868 <strlen+0x3c>
   10884:	20800007 	ldb	r2,0(r4)
   10888:	10000326 	beq	r2,zero,10898 <strlen+0x6c>
   1088c:	21000044 	addi	r4,r4,1
   10890:	20800007 	ldb	r2,0(r4)
   10894:	103ffd1e 	bne	r2,zero,1088c <strlen+0x60>
   10898:	2205c83a 	sub	r2,r4,r8
   1089c:	f800283a 	ret

000108a0 <__sprint_r>:
   108a0:	30800217 	ldw	r2,8(r6)
   108a4:	defffe04 	addi	sp,sp,-8
   108a8:	dc000015 	stw	r16,0(sp)
   108ac:	dfc00115 	stw	ra,4(sp)
   108b0:	3021883a 	mov	r16,r6
   108b4:	0007883a 	mov	r3,zero
   108b8:	1000061e 	bne	r2,zero,108d4 <__sprint_r+0x34>
   108bc:	1805883a 	mov	r2,r3
   108c0:	30000115 	stw	zero,4(r6)
   108c4:	dfc00117 	ldw	ra,4(sp)
   108c8:	dc000017 	ldw	r16,0(sp)
   108cc:	dec00204 	addi	sp,sp,8
   108d0:	f800283a 	ret
   108d4:	0014a000 	call	14a00 <__sfvwrite_r>
   108d8:	1007883a 	mov	r3,r2
   108dc:	1805883a 	mov	r2,r3
   108e0:	80000115 	stw	zero,4(r16)
   108e4:	80000215 	stw	zero,8(r16)
   108e8:	dfc00117 	ldw	ra,4(sp)
   108ec:	dc000017 	ldw	r16,0(sp)
   108f0:	dec00204 	addi	sp,sp,8
   108f4:	f800283a 	ret

000108f8 <___vfprintf_internal_r>:
   108f8:	defea404 	addi	sp,sp,-1392
   108fc:	dd815815 	stw	r22,1376(sp)
   10900:	dc015215 	stw	r16,1352(sp)
   10904:	d9c15115 	stw	r7,1348(sp)
   10908:	dfc15b15 	stw	ra,1388(sp)
   1090c:	df015a15 	stw	fp,1384(sp)
   10910:	ddc15915 	stw	r23,1380(sp)
   10914:	dd415715 	stw	r21,1372(sp)
   10918:	dd015615 	stw	r20,1368(sp)
   1091c:	dcc15515 	stw	r19,1364(sp)
   10920:	dc815415 	stw	r18,1360(sp)
   10924:	dc415315 	stw	r17,1356(sp)
   10928:	282d883a 	mov	r22,r5
   1092c:	3021883a 	mov	r16,r6
   10930:	d9014f15 	stw	r4,1340(sp)
   10934:	00150240 	call	15024 <_localeconv_r>
   10938:	10800017 	ldw	r2,0(r2)
   1093c:	d9c15117 	ldw	r7,1348(sp)
   10940:	d8814915 	stw	r2,1316(sp)
   10944:	d8814f17 	ldw	r2,1340(sp)
   10948:	10000226 	beq	r2,zero,10954 <___vfprintf_internal_r+0x5c>
   1094c:	10800e17 	ldw	r2,56(r2)
   10950:	10020d26 	beq	r2,zero,11188 <___vfprintf_internal_r+0x890>
   10954:	b080030b 	ldhu	r2,12(r22)
   10958:	1080020c 	andi	r2,r2,8
   1095c:	10020e26 	beq	r2,zero,11198 <___vfprintf_internal_r+0x8a0>
   10960:	b0800417 	ldw	r2,16(r22)
   10964:	10020c26 	beq	r2,zero,11198 <___vfprintf_internal_r+0x8a0>
   10968:	b200030b 	ldhu	r8,12(r22)
   1096c:	00800284 	movi	r2,10
   10970:	40c0068c 	andi	r3,r8,26
   10974:	18802f1e 	bne	r3,r2,10a34 <___vfprintf_internal_r+0x13c>
   10978:	b080038f 	ldh	r2,14(r22)
   1097c:	10002d16 	blt	r2,zero,10a34 <___vfprintf_internal_r+0x13c>
   10980:	b240038b 	ldhu	r9,14(r22)
   10984:	b2800717 	ldw	r10,28(r22)
   10988:	b2c00917 	ldw	r11,36(r22)
   1098c:	d9014f17 	ldw	r4,1340(sp)
   10990:	dc402904 	addi	r17,sp,164
   10994:	d8804004 	addi	r2,sp,256
   10998:	00c10004 	movi	r3,1024
   1099c:	423fff4c 	andi	r8,r8,65533
   109a0:	800d883a 	mov	r6,r16
   109a4:	880b883a 	mov	r5,r17
   109a8:	da002c0d 	sth	r8,176(sp)
   109ac:	da402c8d 	sth	r9,178(sp)
   109b0:	da803015 	stw	r10,192(sp)
   109b4:	dac03215 	stw	r11,200(sp)
   109b8:	d8802d15 	stw	r2,180(sp)
   109bc:	d8c02e15 	stw	r3,184(sp)
   109c0:	d8802915 	stw	r2,164(sp)
   109c4:	d8c02b15 	stw	r3,172(sp)
   109c8:	d8002f15 	stw	zero,188(sp)
   109cc:	00108f80 	call	108f8 <___vfprintf_internal_r>
   109d0:	d8814b15 	stw	r2,1324(sp)
   109d4:	10000416 	blt	r2,zero,109e8 <___vfprintf_internal_r+0xf0>
   109d8:	d9014f17 	ldw	r4,1340(sp)
   109dc:	880b883a 	mov	r5,r17
   109e0:	00140d00 	call	140d0 <_fflush_r>
   109e4:	1002321e 	bne	r2,zero,112b0 <___vfprintf_internal_r+0x9b8>
   109e8:	d8802c0b 	ldhu	r2,176(sp)
   109ec:	1080100c 	andi	r2,r2,64
   109f0:	10000326 	beq	r2,zero,10a00 <___vfprintf_internal_r+0x108>
   109f4:	b080030b 	ldhu	r2,12(r22)
   109f8:	10801014 	ori	r2,r2,64
   109fc:	b080030d 	sth	r2,12(r22)
   10a00:	d8814b17 	ldw	r2,1324(sp)
   10a04:	dfc15b17 	ldw	ra,1388(sp)
   10a08:	df015a17 	ldw	fp,1384(sp)
   10a0c:	ddc15917 	ldw	r23,1380(sp)
   10a10:	dd815817 	ldw	r22,1376(sp)
   10a14:	dd415717 	ldw	r21,1372(sp)
   10a18:	dd015617 	ldw	r20,1368(sp)
   10a1c:	dcc15517 	ldw	r19,1364(sp)
   10a20:	dc815417 	ldw	r18,1360(sp)
   10a24:	dc415317 	ldw	r17,1356(sp)
   10a28:	dc015217 	ldw	r16,1352(sp)
   10a2c:	dec15c04 	addi	sp,sp,1392
   10a30:	f800283a 	ret
   10a34:	0005883a 	mov	r2,zero
   10a38:	0007883a 	mov	r3,zero
   10a3c:	dd401904 	addi	r21,sp,100
   10a40:	d8814215 	stw	r2,1288(sp)
   10a44:	802f883a 	mov	r23,r16
   10a48:	d8c14315 	stw	r3,1292(sp)
   10a4c:	d8014b15 	stw	zero,1324(sp)
   10a50:	d8014815 	stw	zero,1312(sp)
   10a54:	d8014415 	stw	zero,1296(sp)
   10a58:	d8014715 	stw	zero,1308(sp)
   10a5c:	dd400c15 	stw	r21,48(sp)
   10a60:	d8000e15 	stw	zero,56(sp)
   10a64:	d8000d15 	stw	zero,52(sp)
   10a68:	b8800007 	ldb	r2,0(r23)
   10a6c:	10001926 	beq	r2,zero,10ad4 <___vfprintf_internal_r+0x1dc>
   10a70:	00c00944 	movi	r3,37
   10a74:	10c01726 	beq	r2,r3,10ad4 <___vfprintf_internal_r+0x1dc>
   10a78:	b821883a 	mov	r16,r23
   10a7c:	00000106 	br	10a84 <___vfprintf_internal_r+0x18c>
   10a80:	10c00326 	beq	r2,r3,10a90 <___vfprintf_internal_r+0x198>
   10a84:	84000044 	addi	r16,r16,1
   10a88:	80800007 	ldb	r2,0(r16)
   10a8c:	103ffc1e 	bne	r2,zero,10a80 <___vfprintf_internal_r+0x188>
   10a90:	85e7c83a 	sub	r19,r16,r23
   10a94:	98000e26 	beq	r19,zero,10ad0 <___vfprintf_internal_r+0x1d8>
   10a98:	dc800e17 	ldw	r18,56(sp)
   10a9c:	dc400d17 	ldw	r17,52(sp)
   10aa0:	008001c4 	movi	r2,7
   10aa4:	94e5883a 	add	r18,r18,r19
   10aa8:	8c400044 	addi	r17,r17,1
   10aac:	adc00015 	stw	r23,0(r21)
   10ab0:	dc800e15 	stw	r18,56(sp)
   10ab4:	acc00115 	stw	r19,4(r21)
   10ab8:	dc400d15 	stw	r17,52(sp)
   10abc:	14428b16 	blt	r2,r17,114ec <___vfprintf_internal_r+0xbf4>
   10ac0:	ad400204 	addi	r21,r21,8
   10ac4:	d9014b17 	ldw	r4,1324(sp)
   10ac8:	24c9883a 	add	r4,r4,r19
   10acc:	d9014b15 	stw	r4,1324(sp)
   10ad0:	802f883a 	mov	r23,r16
   10ad4:	b8800007 	ldb	r2,0(r23)
   10ad8:	10013c26 	beq	r2,zero,10fcc <___vfprintf_internal_r+0x6d4>
   10adc:	bdc00044 	addi	r23,r23,1
   10ae0:	d8000405 	stb	zero,16(sp)
   10ae4:	b8c00007 	ldb	r3,0(r23)
   10ae8:	04ffffc4 	movi	r19,-1
   10aec:	d8014c15 	stw	zero,1328(sp)
   10af0:	d8014a15 	stw	zero,1320(sp)
   10af4:	d8c14d15 	stw	r3,1332(sp)
   10af8:	bdc00044 	addi	r23,r23,1
   10afc:	d9414d17 	ldw	r5,1332(sp)
   10b00:	00801604 	movi	r2,88
   10b04:	28fff804 	addi	r3,r5,-32
   10b08:	10c06036 	bltu	r2,r3,10c8c <___vfprintf_internal_r+0x394>
   10b0c:	18c5883a 	add	r2,r3,r3
   10b10:	1085883a 	add	r2,r2,r2
   10b14:	00c00074 	movhi	r3,1
   10b18:	18c2ca04 	addi	r3,r3,2856
   10b1c:	10c5883a 	add	r2,r2,r3
   10b20:	11000017 	ldw	r4,0(r2)
   10b24:	2000683a 	jmp	r4
   10b28:	00011a9c 	xori	zero,zero,1130
   10b2c:	00010c8c 	andi	zero,zero,1074
   10b30:	00010c8c 	andi	zero,zero,1074
   10b34:	00011a88 	cmpgei	zero,zero,1130
   10b38:	00010c8c 	andi	zero,zero,1074
   10b3c:	00010c8c 	andi	zero,zero,1074
   10b40:	00010c8c 	andi	zero,zero,1074
   10b44:	00010c8c 	andi	zero,zero,1074
   10b48:	00010c8c 	andi	zero,zero,1074
   10b4c:	00010c8c 	andi	zero,zero,1074
   10b50:	00011868 	cmpgeui	zero,zero,1121
   10b54:	00011a78 	rdprs	zero,zero,1129
   10b58:	00010c8c 	andi	zero,zero,1074
   10b5c:	00011880 	call	1188 <__alt_mem_ins_mem0-0xee78>
   10b60:	00011b14 	movui	zero,1132
   10b64:	00010c8c 	andi	zero,zero,1074
   10b68:	00011b00 	call	11b0 <__alt_mem_ins_mem0-0xee50>
   10b6c:	00011ac8 	cmpgei	zero,zero,1131
   10b70:	00011ac8 	cmpgei	zero,zero,1131
   10b74:	00011ac8 	cmpgei	zero,zero,1131
   10b78:	00011ac8 	cmpgei	zero,zero,1131
   10b7c:	00011ac8 	cmpgei	zero,zero,1131
   10b80:	00011ac8 	cmpgei	zero,zero,1131
   10b84:	00011ac8 	cmpgei	zero,zero,1131
   10b88:	00011ac8 	cmpgei	zero,zero,1131
   10b8c:	00011ac8 	cmpgei	zero,zero,1131
   10b90:	00010c8c 	andi	zero,zero,1074
   10b94:	00010c8c 	andi	zero,zero,1074
   10b98:	00010c8c 	andi	zero,zero,1074
   10b9c:	00010c8c 	andi	zero,zero,1074
   10ba0:	00010c8c 	andi	zero,zero,1074
   10ba4:	00010c8c 	andi	zero,zero,1074
   10ba8:	00010c8c 	andi	zero,zero,1074
   10bac:	00010c8c 	andi	zero,zero,1074
   10bb0:	00010c8c 	andi	zero,zero,1074
   10bb4:	00010c8c 	andi	zero,zero,1074
   10bb8:	000112e4 	muli	zero,zero,1099
   10bbc:	00011950 	cmplti	zero,zero,1125
   10bc0:	00010c8c 	andi	zero,zero,1074
   10bc4:	00011950 	cmplti	zero,zero,1125
   10bc8:	00010c8c 	andi	zero,zero,1074
   10bcc:	00010c8c 	andi	zero,zero,1074
   10bd0:	00010c8c 	andi	zero,zero,1074
   10bd4:	00010c8c 	andi	zero,zero,1074
   10bd8:	00011ab4 	movhi	zero,1130
   10bdc:	00010c8c 	andi	zero,zero,1074
   10be0:	00010c8c 	andi	zero,zero,1074
   10be4:	00011398 	cmpnei	zero,zero,1102
   10be8:	00010c8c 	andi	zero,zero,1074
   10bec:	00010c8c 	andi	zero,zero,1074
   10bf0:	00010c8c 	andi	zero,zero,1074
   10bf4:	00010c8c 	andi	zero,zero,1074
   10bf8:	00010c8c 	andi	zero,zero,1074
   10bfc:	000113e4 	muli	zero,zero,1103
   10c00:	00010c8c 	andi	zero,zero,1074
   10c04:	00010c8c 	andi	zero,zero,1074
   10c08:	00011a04 	movi	zero,1128
   10c0c:	00010c8c 	andi	zero,zero,1074
   10c10:	00010c8c 	andi	zero,zero,1074
   10c14:	00010c8c 	andi	zero,zero,1074
   10c18:	00010c8c 	andi	zero,zero,1074
   10c1c:	00010c8c 	andi	zero,zero,1074
   10c20:	00010c8c 	andi	zero,zero,1074
   10c24:	00010c8c 	andi	zero,zero,1074
   10c28:	00010c8c 	andi	zero,zero,1074
   10c2c:	00010c8c 	andi	zero,zero,1074
   10c30:	00010c8c 	andi	zero,zero,1074
   10c34:	000119d8 	cmpnei	zero,zero,1127
   10c38:	000112f0 	cmpltui	zero,zero,1099
   10c3c:	00011950 	cmplti	zero,zero,1125
   10c40:	00011950 	cmplti	zero,zero,1125
   10c44:	00011950 	cmplti	zero,zero,1125
   10c48:	0001193c 	xorhi	zero,zero,1124
   10c4c:	000112f0 	cmpltui	zero,zero,1099
   10c50:	00010c8c 	andi	zero,zero,1074
   10c54:	00010c8c 	andi	zero,zero,1074
   10c58:	000118c4 	movi	zero,1123
   10c5c:	00010c8c 	andi	zero,zero,1074
   10c60:	00011894 	movui	zero,1122
   10c64:	000113a4 	muli	zero,zero,1102
   10c68:	000118f4 	movhi	zero,1123
   10c6c:	000118e0 	cmpeqi	zero,zero,1123
   10c70:	00010c8c 	andi	zero,zero,1074
   10c74:	00011b70 	cmpltui	zero,zero,1133
   10c78:	00010c8c 	andi	zero,zero,1074
   10c7c:	000113f0 	cmpltui	zero,zero,1103
   10c80:	00010c8c 	andi	zero,zero,1074
   10c84:	00010c8c 	andi	zero,zero,1074
   10c88:	00011a68 	cmpgeui	zero,zero,1129
   10c8c:	d9014d17 	ldw	r4,1332(sp)
   10c90:	2000ce26 	beq	r4,zero,10fcc <___vfprintf_internal_r+0x6d4>
   10c94:	01400044 	movi	r5,1
   10c98:	d9800f04 	addi	r6,sp,60
   10c9c:	d9c14015 	stw	r7,1280(sp)
   10ca0:	d9414515 	stw	r5,1300(sp)
   10ca4:	d9814115 	stw	r6,1284(sp)
   10ca8:	280f883a 	mov	r7,r5
   10cac:	d9000f05 	stb	r4,60(sp)
   10cb0:	d8000405 	stb	zero,16(sp)
   10cb4:	d8014615 	stw	zero,1304(sp)
   10cb8:	d8c14c17 	ldw	r3,1328(sp)
   10cbc:	1880008c 	andi	r2,r3,2
   10cc0:	1005003a 	cmpeq	r2,r2,zero
   10cc4:	d8815015 	stw	r2,1344(sp)
   10cc8:	1000031e 	bne	r2,zero,10cd8 <___vfprintf_internal_r+0x3e0>
   10ccc:	d9014517 	ldw	r4,1300(sp)
   10cd0:	21000084 	addi	r4,r4,2
   10cd4:	d9014515 	stw	r4,1300(sp)
   10cd8:	d9414c17 	ldw	r5,1328(sp)
   10cdc:	2940210c 	andi	r5,r5,132
   10ce0:	d9414e15 	stw	r5,1336(sp)
   10ce4:	28002d1e 	bne	r5,zero,10d9c <___vfprintf_internal_r+0x4a4>
   10ce8:	d9814a17 	ldw	r6,1320(sp)
   10cec:	d8814517 	ldw	r2,1300(sp)
   10cf0:	30a1c83a 	sub	r16,r6,r2
   10cf4:	0400290e 	bge	zero,r16,10d9c <___vfprintf_internal_r+0x4a4>
   10cf8:	00800404 	movi	r2,16
   10cfc:	1404580e 	bge	r2,r16,11e60 <___vfprintf_internal_r+0x1568>
   10d00:	dc800e17 	ldw	r18,56(sp)
   10d04:	dc400d17 	ldw	r17,52(sp)
   10d08:	1027883a 	mov	r19,r2
   10d0c:	07000174 	movhi	fp,5
   10d10:	e7203484 	addi	fp,fp,-32558
   10d14:	050001c4 	movi	r20,7
   10d18:	00000306 	br	10d28 <___vfprintf_internal_r+0x430>
   10d1c:	843ffc04 	addi	r16,r16,-16
   10d20:	ad400204 	addi	r21,r21,8
   10d24:	9c00130e 	bge	r19,r16,10d74 <___vfprintf_internal_r+0x47c>
   10d28:	94800404 	addi	r18,r18,16
   10d2c:	8c400044 	addi	r17,r17,1
   10d30:	af000015 	stw	fp,0(r21)
   10d34:	acc00115 	stw	r19,4(r21)
   10d38:	dc800e15 	stw	r18,56(sp)
   10d3c:	dc400d15 	stw	r17,52(sp)
   10d40:	a47ff60e 	bge	r20,r17,10d1c <___vfprintf_internal_r+0x424>
   10d44:	d9014f17 	ldw	r4,1340(sp)
   10d48:	b00b883a 	mov	r5,r22
   10d4c:	d9800c04 	addi	r6,sp,48
   10d50:	d9c15115 	stw	r7,1348(sp)
   10d54:	00108a00 	call	108a0 <__sprint_r>
   10d58:	d9c15117 	ldw	r7,1348(sp)
   10d5c:	10009e1e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   10d60:	843ffc04 	addi	r16,r16,-16
   10d64:	dc800e17 	ldw	r18,56(sp)
   10d68:	dc400d17 	ldw	r17,52(sp)
   10d6c:	dd401904 	addi	r21,sp,100
   10d70:	9c3fed16 	blt	r19,r16,10d28 <___vfprintf_internal_r+0x430>
   10d74:	9425883a 	add	r18,r18,r16
   10d78:	8c400044 	addi	r17,r17,1
   10d7c:	008001c4 	movi	r2,7
   10d80:	af000015 	stw	fp,0(r21)
   10d84:	ac000115 	stw	r16,4(r21)
   10d88:	dc800e15 	stw	r18,56(sp)
   10d8c:	dc400d15 	stw	r17,52(sp)
   10d90:	1441f516 	blt	r2,r17,11568 <___vfprintf_internal_r+0xc70>
   10d94:	ad400204 	addi	r21,r21,8
   10d98:	00000206 	br	10da4 <___vfprintf_internal_r+0x4ac>
   10d9c:	dc800e17 	ldw	r18,56(sp)
   10da0:	dc400d17 	ldw	r17,52(sp)
   10da4:	d8800407 	ldb	r2,16(sp)
   10da8:	10000b26 	beq	r2,zero,10dd8 <___vfprintf_internal_r+0x4e0>
   10dac:	00800044 	movi	r2,1
   10db0:	94800044 	addi	r18,r18,1
   10db4:	8c400044 	addi	r17,r17,1
   10db8:	a8800115 	stw	r2,4(r21)
   10dbc:	d8c00404 	addi	r3,sp,16
   10dc0:	008001c4 	movi	r2,7
   10dc4:	a8c00015 	stw	r3,0(r21)
   10dc8:	dc800e15 	stw	r18,56(sp)
   10dcc:	dc400d15 	stw	r17,52(sp)
   10dd0:	1441da16 	blt	r2,r17,1153c <___vfprintf_internal_r+0xc44>
   10dd4:	ad400204 	addi	r21,r21,8
   10dd8:	d9015017 	ldw	r4,1344(sp)
   10ddc:	20000b1e 	bne	r4,zero,10e0c <___vfprintf_internal_r+0x514>
   10de0:	d8800444 	addi	r2,sp,17
   10de4:	94800084 	addi	r18,r18,2
   10de8:	8c400044 	addi	r17,r17,1
   10dec:	a8800015 	stw	r2,0(r21)
   10df0:	00c00084 	movi	r3,2
   10df4:	008001c4 	movi	r2,7
   10df8:	a8c00115 	stw	r3,4(r21)
   10dfc:	dc800e15 	stw	r18,56(sp)
   10e00:	dc400d15 	stw	r17,52(sp)
   10e04:	1441c216 	blt	r2,r17,11510 <___vfprintf_internal_r+0xc18>
   10e08:	ad400204 	addi	r21,r21,8
   10e0c:	d9414e17 	ldw	r5,1336(sp)
   10e10:	00802004 	movi	r2,128
   10e14:	2880b126 	beq	r5,r2,110dc <___vfprintf_internal_r+0x7e4>
   10e18:	d8c14617 	ldw	r3,1304(sp)
   10e1c:	19e1c83a 	sub	r16,r3,r7
   10e20:	0400260e 	bge	zero,r16,10ebc <___vfprintf_internal_r+0x5c4>
   10e24:	00800404 	movi	r2,16
   10e28:	1403c90e 	bge	r2,r16,11d50 <___vfprintf_internal_r+0x1458>
   10e2c:	1027883a 	mov	r19,r2
   10e30:	07000174 	movhi	fp,5
   10e34:	e7203084 	addi	fp,fp,-32574
   10e38:	050001c4 	movi	r20,7
   10e3c:	00000306 	br	10e4c <___vfprintf_internal_r+0x554>
   10e40:	843ffc04 	addi	r16,r16,-16
   10e44:	ad400204 	addi	r21,r21,8
   10e48:	9c00130e 	bge	r19,r16,10e98 <___vfprintf_internal_r+0x5a0>
   10e4c:	94800404 	addi	r18,r18,16
   10e50:	8c400044 	addi	r17,r17,1
   10e54:	af000015 	stw	fp,0(r21)
   10e58:	acc00115 	stw	r19,4(r21)
   10e5c:	dc800e15 	stw	r18,56(sp)
   10e60:	dc400d15 	stw	r17,52(sp)
   10e64:	a47ff60e 	bge	r20,r17,10e40 <___vfprintf_internal_r+0x548>
   10e68:	d9014f17 	ldw	r4,1340(sp)
   10e6c:	b00b883a 	mov	r5,r22
   10e70:	d9800c04 	addi	r6,sp,48
   10e74:	d9c15115 	stw	r7,1348(sp)
   10e78:	00108a00 	call	108a0 <__sprint_r>
   10e7c:	d9c15117 	ldw	r7,1348(sp)
   10e80:	1000551e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   10e84:	843ffc04 	addi	r16,r16,-16
   10e88:	dc800e17 	ldw	r18,56(sp)
   10e8c:	dc400d17 	ldw	r17,52(sp)
   10e90:	dd401904 	addi	r21,sp,100
   10e94:	9c3fed16 	blt	r19,r16,10e4c <___vfprintf_internal_r+0x554>
   10e98:	9425883a 	add	r18,r18,r16
   10e9c:	8c400044 	addi	r17,r17,1
   10ea0:	008001c4 	movi	r2,7
   10ea4:	af000015 	stw	fp,0(r21)
   10ea8:	ac000115 	stw	r16,4(r21)
   10eac:	dc800e15 	stw	r18,56(sp)
   10eb0:	dc400d15 	stw	r17,52(sp)
   10eb4:	14418216 	blt	r2,r17,114c0 <___vfprintf_internal_r+0xbc8>
   10eb8:	ad400204 	addi	r21,r21,8
   10ebc:	d9014c17 	ldw	r4,1328(sp)
   10ec0:	2080400c 	andi	r2,r4,256
   10ec4:	10004a1e 	bne	r2,zero,10ff0 <___vfprintf_internal_r+0x6f8>
   10ec8:	d9414117 	ldw	r5,1284(sp)
   10ecc:	91e5883a 	add	r18,r18,r7
   10ed0:	8c400044 	addi	r17,r17,1
   10ed4:	008001c4 	movi	r2,7
   10ed8:	a9400015 	stw	r5,0(r21)
   10edc:	a9c00115 	stw	r7,4(r21)
   10ee0:	dc800e15 	stw	r18,56(sp)
   10ee4:	dc400d15 	stw	r17,52(sp)
   10ee8:	14416716 	blt	r2,r17,11488 <___vfprintf_internal_r+0xb90>
   10eec:	a8c00204 	addi	r3,r21,8
   10ef0:	d9814c17 	ldw	r6,1328(sp)
   10ef4:	3080010c 	andi	r2,r6,4
   10ef8:	10002826 	beq	r2,zero,10f9c <___vfprintf_internal_r+0x6a4>
   10efc:	d8814a17 	ldw	r2,1320(sp)
   10f00:	d9014517 	ldw	r4,1300(sp)
   10f04:	1121c83a 	sub	r16,r2,r4
   10f08:	0400240e 	bge	zero,r16,10f9c <___vfprintf_internal_r+0x6a4>
   10f0c:	00800404 	movi	r2,16
   10f10:	14044f0e 	bge	r2,r16,12050 <___vfprintf_internal_r+0x1758>
   10f14:	dc400d17 	ldw	r17,52(sp)
   10f18:	1027883a 	mov	r19,r2
   10f1c:	07000174 	movhi	fp,5
   10f20:	e7203484 	addi	fp,fp,-32558
   10f24:	050001c4 	movi	r20,7
   10f28:	00000306 	br	10f38 <___vfprintf_internal_r+0x640>
   10f2c:	843ffc04 	addi	r16,r16,-16
   10f30:	18c00204 	addi	r3,r3,8
   10f34:	9c00110e 	bge	r19,r16,10f7c <___vfprintf_internal_r+0x684>
   10f38:	94800404 	addi	r18,r18,16
   10f3c:	8c400044 	addi	r17,r17,1
   10f40:	1f000015 	stw	fp,0(r3)
   10f44:	1cc00115 	stw	r19,4(r3)
   10f48:	dc800e15 	stw	r18,56(sp)
   10f4c:	dc400d15 	stw	r17,52(sp)
   10f50:	a47ff60e 	bge	r20,r17,10f2c <___vfprintf_internal_r+0x634>
   10f54:	d9014f17 	ldw	r4,1340(sp)
   10f58:	b00b883a 	mov	r5,r22
   10f5c:	d9800c04 	addi	r6,sp,48
   10f60:	00108a00 	call	108a0 <__sprint_r>
   10f64:	10001c1e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   10f68:	843ffc04 	addi	r16,r16,-16
   10f6c:	dc800e17 	ldw	r18,56(sp)
   10f70:	dc400d17 	ldw	r17,52(sp)
   10f74:	d8c01904 	addi	r3,sp,100
   10f78:	9c3fef16 	blt	r19,r16,10f38 <___vfprintf_internal_r+0x640>
   10f7c:	9425883a 	add	r18,r18,r16
   10f80:	8c400044 	addi	r17,r17,1
   10f84:	008001c4 	movi	r2,7
   10f88:	1f000015 	stw	fp,0(r3)
   10f8c:	1c000115 	stw	r16,4(r3)
   10f90:	dc800e15 	stw	r18,56(sp)
   10f94:	dc400d15 	stw	r17,52(sp)
   10f98:	1440cb16 	blt	r2,r17,112c8 <___vfprintf_internal_r+0x9d0>
   10f9c:	d8814a17 	ldw	r2,1320(sp)
   10fa0:	d9414517 	ldw	r5,1300(sp)
   10fa4:	1140010e 	bge	r2,r5,10fac <___vfprintf_internal_r+0x6b4>
   10fa8:	2805883a 	mov	r2,r5
   10fac:	d9814b17 	ldw	r6,1324(sp)
   10fb0:	308d883a 	add	r6,r6,r2
   10fb4:	d9814b15 	stw	r6,1324(sp)
   10fb8:	90013b1e 	bne	r18,zero,114a8 <___vfprintf_internal_r+0xbb0>
   10fbc:	d9c14017 	ldw	r7,1280(sp)
   10fc0:	dd401904 	addi	r21,sp,100
   10fc4:	d8000d15 	stw	zero,52(sp)
   10fc8:	003ea706 	br	10a68 <___vfprintf_internal_r+0x170>
   10fcc:	d8800e17 	ldw	r2,56(sp)
   10fd0:	10053f1e 	bne	r2,zero,124d0 <___vfprintf_internal_r+0x1bd8>
   10fd4:	d8000d15 	stw	zero,52(sp)
   10fd8:	b080030b 	ldhu	r2,12(r22)
   10fdc:	1080100c 	andi	r2,r2,64
   10fe0:	103e8726 	beq	r2,zero,10a00 <___vfprintf_internal_r+0x108>
   10fe4:	00bfffc4 	movi	r2,-1
   10fe8:	d8814b15 	stw	r2,1324(sp)
   10fec:	003e8406 	br	10a00 <___vfprintf_internal_r+0x108>
   10ff0:	d9814d17 	ldw	r6,1332(sp)
   10ff4:	00801944 	movi	r2,101
   10ff8:	11806e16 	blt	r2,r6,111b4 <___vfprintf_internal_r+0x8bc>
   10ffc:	d9414717 	ldw	r5,1308(sp)
   11000:	00c00044 	movi	r3,1
   11004:	1943430e 	bge	r3,r5,11d14 <___vfprintf_internal_r+0x141c>
   11008:	d8814117 	ldw	r2,1284(sp)
   1100c:	94800044 	addi	r18,r18,1
   11010:	8c400044 	addi	r17,r17,1
   11014:	a8800015 	stw	r2,0(r21)
   11018:	008001c4 	movi	r2,7
   1101c:	a8c00115 	stw	r3,4(r21)
   11020:	dc800e15 	stw	r18,56(sp)
   11024:	dc400d15 	stw	r17,52(sp)
   11028:	1441ca16 	blt	r2,r17,11754 <___vfprintf_internal_r+0xe5c>
   1102c:	a8c00204 	addi	r3,r21,8
   11030:	d9014917 	ldw	r4,1316(sp)
   11034:	00800044 	movi	r2,1
   11038:	94800044 	addi	r18,r18,1
   1103c:	8c400044 	addi	r17,r17,1
   11040:	18800115 	stw	r2,4(r3)
   11044:	008001c4 	movi	r2,7
   11048:	19000015 	stw	r4,0(r3)
   1104c:	dc800e15 	stw	r18,56(sp)
   11050:	dc400d15 	stw	r17,52(sp)
   11054:	1441b616 	blt	r2,r17,11730 <___vfprintf_internal_r+0xe38>
   11058:	1cc00204 	addi	r19,r3,8
   1105c:	d9014217 	ldw	r4,1288(sp)
   11060:	d9414317 	ldw	r5,1292(sp)
   11064:	000d883a 	mov	r6,zero
   11068:	000f883a 	mov	r7,zero
   1106c:	00191480 	call	19148 <__nedf2>
   11070:	10017426 	beq	r2,zero,11644 <___vfprintf_internal_r+0xd4c>
   11074:	d9414717 	ldw	r5,1308(sp)
   11078:	d9814117 	ldw	r6,1284(sp)
   1107c:	8c400044 	addi	r17,r17,1
   11080:	2c85883a 	add	r2,r5,r18
   11084:	14bfffc4 	addi	r18,r2,-1
   11088:	28bfffc4 	addi	r2,r5,-1
   1108c:	30c00044 	addi	r3,r6,1
   11090:	98800115 	stw	r2,4(r19)
   11094:	008001c4 	movi	r2,7
   11098:	98c00015 	stw	r3,0(r19)
   1109c:	dc800e15 	stw	r18,56(sp)
   110a0:	dc400d15 	stw	r17,52(sp)
   110a4:	14418e16 	blt	r2,r17,116e0 <___vfprintf_internal_r+0xde8>
   110a8:	9cc00204 	addi	r19,r19,8
   110ac:	d9414817 	ldw	r5,1312(sp)
   110b0:	d8800804 	addi	r2,sp,32
   110b4:	8c400044 	addi	r17,r17,1
   110b8:	9165883a 	add	r18,r18,r5
   110bc:	98800015 	stw	r2,0(r19)
   110c0:	008001c4 	movi	r2,7
   110c4:	99400115 	stw	r5,4(r19)
   110c8:	dc800e15 	stw	r18,56(sp)
   110cc:	dc400d15 	stw	r17,52(sp)
   110d0:	1440ed16 	blt	r2,r17,11488 <___vfprintf_internal_r+0xb90>
   110d4:	98c00204 	addi	r3,r19,8
   110d8:	003f8506 	br	10ef0 <___vfprintf_internal_r+0x5f8>
   110dc:	d9814a17 	ldw	r6,1320(sp)
   110e0:	d8814517 	ldw	r2,1300(sp)
   110e4:	30a1c83a 	sub	r16,r6,r2
   110e8:	043f4b0e 	bge	zero,r16,10e18 <___vfprintf_internal_r+0x520>
   110ec:	00800404 	movi	r2,16
   110f0:	1404340e 	bge	r2,r16,121c4 <___vfprintf_internal_r+0x18cc>
   110f4:	1027883a 	mov	r19,r2
   110f8:	07000174 	movhi	fp,5
   110fc:	e7203084 	addi	fp,fp,-32574
   11100:	050001c4 	movi	r20,7
   11104:	00000306 	br	11114 <___vfprintf_internal_r+0x81c>
   11108:	843ffc04 	addi	r16,r16,-16
   1110c:	ad400204 	addi	r21,r21,8
   11110:	9c00130e 	bge	r19,r16,11160 <___vfprintf_internal_r+0x868>
   11114:	94800404 	addi	r18,r18,16
   11118:	8c400044 	addi	r17,r17,1
   1111c:	af000015 	stw	fp,0(r21)
   11120:	acc00115 	stw	r19,4(r21)
   11124:	dc800e15 	stw	r18,56(sp)
   11128:	dc400d15 	stw	r17,52(sp)
   1112c:	a47ff60e 	bge	r20,r17,11108 <___vfprintf_internal_r+0x810>
   11130:	d9014f17 	ldw	r4,1340(sp)
   11134:	b00b883a 	mov	r5,r22
   11138:	d9800c04 	addi	r6,sp,48
   1113c:	d9c15115 	stw	r7,1348(sp)
   11140:	00108a00 	call	108a0 <__sprint_r>
   11144:	d9c15117 	ldw	r7,1348(sp)
   11148:	103fa31e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   1114c:	843ffc04 	addi	r16,r16,-16
   11150:	dc800e17 	ldw	r18,56(sp)
   11154:	dc400d17 	ldw	r17,52(sp)
   11158:	dd401904 	addi	r21,sp,100
   1115c:	9c3fed16 	blt	r19,r16,11114 <___vfprintf_internal_r+0x81c>
   11160:	9425883a 	add	r18,r18,r16
   11164:	8c400044 	addi	r17,r17,1
   11168:	008001c4 	movi	r2,7
   1116c:	af000015 	stw	fp,0(r21)
   11170:	ac000115 	stw	r16,4(r21)
   11174:	dc800e15 	stw	r18,56(sp)
   11178:	dc400d15 	stw	r17,52(sp)
   1117c:	14416116 	blt	r2,r17,11704 <___vfprintf_internal_r+0xe0c>
   11180:	ad400204 	addi	r21,r21,8
   11184:	003f2406 	br	10e18 <___vfprintf_internal_r+0x520>
   11188:	d9014f17 	ldw	r4,1340(sp)
   1118c:	00143680 	call	14368 <__sinit>
   11190:	d9c15117 	ldw	r7,1348(sp)
   11194:	003def06 	br	10954 <___vfprintf_internal_r+0x5c>
   11198:	d9014f17 	ldw	r4,1340(sp)
   1119c:	b00b883a 	mov	r5,r22
   111a0:	d9c15115 	stw	r7,1348(sp)
   111a4:	00127c80 	call	127c8 <__swsetup_r>
   111a8:	d9c15117 	ldw	r7,1348(sp)
   111ac:	103dee26 	beq	r2,zero,10968 <___vfprintf_internal_r+0x70>
   111b0:	003f8c06 	br	10fe4 <___vfprintf_internal_r+0x6ec>
   111b4:	d9014217 	ldw	r4,1288(sp)
   111b8:	d9414317 	ldw	r5,1292(sp)
   111bc:	000d883a 	mov	r6,zero
   111c0:	000f883a 	mov	r7,zero
   111c4:	00190c00 	call	190c0 <__eqdf2>
   111c8:	1000f21e 	bne	r2,zero,11594 <___vfprintf_internal_r+0xc9c>
   111cc:	00800174 	movhi	r2,5
   111d0:	10a03004 	addi	r2,r2,-32576
   111d4:	94800044 	addi	r18,r18,1
   111d8:	8c400044 	addi	r17,r17,1
   111dc:	a8800015 	stw	r2,0(r21)
   111e0:	00c00044 	movi	r3,1
   111e4:	008001c4 	movi	r2,7
   111e8:	a8c00115 	stw	r3,4(r21)
   111ec:	dc800e15 	stw	r18,56(sp)
   111f0:	dc400d15 	stw	r17,52(sp)
   111f4:	1442fa16 	blt	r2,r17,11de0 <___vfprintf_internal_r+0x14e8>
   111f8:	a8c00204 	addi	r3,r21,8
   111fc:	d8800517 	ldw	r2,20(sp)
   11200:	d9014717 	ldw	r4,1308(sp)
   11204:	11015c0e 	bge	r2,r4,11778 <___vfprintf_internal_r+0xe80>
   11208:	dc400d17 	ldw	r17,52(sp)
   1120c:	d9814917 	ldw	r6,1316(sp)
   11210:	00800044 	movi	r2,1
   11214:	94800044 	addi	r18,r18,1
   11218:	8c400044 	addi	r17,r17,1
   1121c:	18800115 	stw	r2,4(r3)
   11220:	008001c4 	movi	r2,7
   11224:	19800015 	stw	r6,0(r3)
   11228:	dc800e15 	stw	r18,56(sp)
   1122c:	dc400d15 	stw	r17,52(sp)
   11230:	14431016 	blt	r2,r17,11e74 <___vfprintf_internal_r+0x157c>
   11234:	18c00204 	addi	r3,r3,8
   11238:	d8814717 	ldw	r2,1308(sp)
   1123c:	143fffc4 	addi	r16,r2,-1
   11240:	043f2b0e 	bge	zero,r16,10ef0 <___vfprintf_internal_r+0x5f8>
   11244:	00800404 	movi	r2,16
   11248:	1402a20e 	bge	r2,r16,11cd4 <___vfprintf_internal_r+0x13dc>
   1124c:	dc400d17 	ldw	r17,52(sp)
   11250:	1027883a 	mov	r19,r2
   11254:	07000174 	movhi	fp,5
   11258:	e7203084 	addi	fp,fp,-32574
   1125c:	050001c4 	movi	r20,7
   11260:	00000306 	br	11270 <___vfprintf_internal_r+0x978>
   11264:	18c00204 	addi	r3,r3,8
   11268:	843ffc04 	addi	r16,r16,-16
   1126c:	9c029c0e 	bge	r19,r16,11ce0 <___vfprintf_internal_r+0x13e8>
   11270:	94800404 	addi	r18,r18,16
   11274:	8c400044 	addi	r17,r17,1
   11278:	1f000015 	stw	fp,0(r3)
   1127c:	1cc00115 	stw	r19,4(r3)
   11280:	dc800e15 	stw	r18,56(sp)
   11284:	dc400d15 	stw	r17,52(sp)
   11288:	a47ff60e 	bge	r20,r17,11264 <___vfprintf_internal_r+0x96c>
   1128c:	d9014f17 	ldw	r4,1340(sp)
   11290:	b00b883a 	mov	r5,r22
   11294:	d9800c04 	addi	r6,sp,48
   11298:	00108a00 	call	108a0 <__sprint_r>
   1129c:	103f4e1e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   112a0:	dc800e17 	ldw	r18,56(sp)
   112a4:	dc400d17 	ldw	r17,52(sp)
   112a8:	d8c01904 	addi	r3,sp,100
   112ac:	003fee06 	br	11268 <___vfprintf_internal_r+0x970>
   112b0:	d8802c0b 	ldhu	r2,176(sp)
   112b4:	00ffffc4 	movi	r3,-1
   112b8:	d8c14b15 	stw	r3,1324(sp)
   112bc:	1080100c 	andi	r2,r2,64
   112c0:	103dcc1e 	bne	r2,zero,109f4 <___vfprintf_internal_r+0xfc>
   112c4:	003dce06 	br	10a00 <___vfprintf_internal_r+0x108>
   112c8:	d9014f17 	ldw	r4,1340(sp)
   112cc:	b00b883a 	mov	r5,r22
   112d0:	d9800c04 	addi	r6,sp,48
   112d4:	00108a00 	call	108a0 <__sprint_r>
   112d8:	103f3f1e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   112dc:	dc800e17 	ldw	r18,56(sp)
   112e0:	003f2e06 	br	10f9c <___vfprintf_internal_r+0x6a4>
   112e4:	d9414c17 	ldw	r5,1328(sp)
   112e8:	29400414 	ori	r5,r5,16
   112ec:	d9414c15 	stw	r5,1328(sp)
   112f0:	d9814c17 	ldw	r6,1328(sp)
   112f4:	3080080c 	andi	r2,r6,32
   112f8:	10014f1e 	bne	r2,zero,11838 <___vfprintf_internal_r+0xf40>
   112fc:	d8c14c17 	ldw	r3,1328(sp)
   11300:	1880040c 	andi	r2,r3,16
   11304:	1002ea1e 	bne	r2,zero,11eb0 <___vfprintf_internal_r+0x15b8>
   11308:	d9014c17 	ldw	r4,1328(sp)
   1130c:	2080100c 	andi	r2,r4,64
   11310:	1002e726 	beq	r2,zero,11eb0 <___vfprintf_internal_r+0x15b8>
   11314:	3880000f 	ldh	r2,0(r7)
   11318:	39c00104 	addi	r7,r7,4
   1131c:	d9c14015 	stw	r7,1280(sp)
   11320:	1023d7fa 	srai	r17,r2,31
   11324:	1021883a 	mov	r16,r2
   11328:	88037216 	blt	r17,zero,120f4 <___vfprintf_internal_r+0x17fc>
   1132c:	01000044 	movi	r4,1
   11330:	98000416 	blt	r19,zero,11344 <___vfprintf_internal_r+0xa4c>
   11334:	d8c14c17 	ldw	r3,1328(sp)
   11338:	00bfdfc4 	movi	r2,-129
   1133c:	1886703a 	and	r3,r3,r2
   11340:	d8c14c15 	stw	r3,1328(sp)
   11344:	8444b03a 	or	r2,r16,r17
   11348:	1002261e 	bne	r2,zero,11be4 <___vfprintf_internal_r+0x12ec>
   1134c:	9802251e 	bne	r19,zero,11be4 <___vfprintf_internal_r+0x12ec>
   11350:	20803fcc 	andi	r2,r4,255
   11354:	10029b26 	beq	r2,zero,11dc4 <___vfprintf_internal_r+0x14cc>
   11358:	d8c01904 	addi	r3,sp,100
   1135c:	dd000f04 	addi	r20,sp,60
   11360:	d8c14115 	stw	r3,1284(sp)
   11364:	d8c14117 	ldw	r3,1284(sp)
   11368:	dcc14515 	stw	r19,1300(sp)
   1136c:	a0c5c83a 	sub	r2,r20,r3
   11370:	11c00a04 	addi	r7,r2,40
   11374:	99c0010e 	bge	r19,r7,1137c <___vfprintf_internal_r+0xa84>
   11378:	d9c14515 	stw	r7,1300(sp)
   1137c:	dcc14615 	stw	r19,1304(sp)
   11380:	d8800407 	ldb	r2,16(sp)
   11384:	103e4c26 	beq	r2,zero,10cb8 <___vfprintf_internal_r+0x3c0>
   11388:	d8814517 	ldw	r2,1300(sp)
   1138c:	10800044 	addi	r2,r2,1
   11390:	d8814515 	stw	r2,1300(sp)
   11394:	003e4806 	br	10cb8 <___vfprintf_internal_r+0x3c0>
   11398:	d9814c17 	ldw	r6,1328(sp)
   1139c:	31800414 	ori	r6,r6,16
   113a0:	d9814c15 	stw	r6,1328(sp)
   113a4:	d8c14c17 	ldw	r3,1328(sp)
   113a8:	1880080c 	andi	r2,r3,32
   113ac:	1001271e 	bne	r2,zero,1184c <___vfprintf_internal_r+0xf54>
   113b0:	d9414c17 	ldw	r5,1328(sp)
   113b4:	2880040c 	andi	r2,r5,16
   113b8:	1002b61e 	bne	r2,zero,11e94 <___vfprintf_internal_r+0x159c>
   113bc:	d9814c17 	ldw	r6,1328(sp)
   113c0:	3080100c 	andi	r2,r6,64
   113c4:	1002b326 	beq	r2,zero,11e94 <___vfprintf_internal_r+0x159c>
   113c8:	3c00000b 	ldhu	r16,0(r7)
   113cc:	0009883a 	mov	r4,zero
   113d0:	39c00104 	addi	r7,r7,4
   113d4:	0023883a 	mov	r17,zero
   113d8:	d9c14015 	stw	r7,1280(sp)
   113dc:	d8000405 	stb	zero,16(sp)
   113e0:	003fd306 	br	11330 <___vfprintf_internal_r+0xa38>
   113e4:	d9014c17 	ldw	r4,1328(sp)
   113e8:	21000414 	ori	r4,r4,16
   113ec:	d9014c15 	stw	r4,1328(sp)
   113f0:	d9414c17 	ldw	r5,1328(sp)
   113f4:	2880080c 	andi	r2,r5,32
   113f8:	1001081e 	bne	r2,zero,1181c <___vfprintf_internal_r+0xf24>
   113fc:	d8c14c17 	ldw	r3,1328(sp)
   11400:	1880040c 	andi	r2,r3,16
   11404:	1002b01e 	bne	r2,zero,11ec8 <___vfprintf_internal_r+0x15d0>
   11408:	d9014c17 	ldw	r4,1328(sp)
   1140c:	2080100c 	andi	r2,r4,64
   11410:	1002ad26 	beq	r2,zero,11ec8 <___vfprintf_internal_r+0x15d0>
   11414:	3c00000b 	ldhu	r16,0(r7)
   11418:	01000044 	movi	r4,1
   1141c:	39c00104 	addi	r7,r7,4
   11420:	0023883a 	mov	r17,zero
   11424:	d9c14015 	stw	r7,1280(sp)
   11428:	d8000405 	stb	zero,16(sp)
   1142c:	003fc006 	br	11330 <___vfprintf_internal_r+0xa38>
   11430:	d9014f17 	ldw	r4,1340(sp)
   11434:	b00b883a 	mov	r5,r22
   11438:	d9800c04 	addi	r6,sp,48
   1143c:	00108a00 	call	108a0 <__sprint_r>
   11440:	103ee51e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   11444:	dc800e17 	ldw	r18,56(sp)
   11448:	d8c01904 	addi	r3,sp,100
   1144c:	d9814c17 	ldw	r6,1328(sp)
   11450:	3080004c 	andi	r2,r6,1
   11454:	1005003a 	cmpeq	r2,r2,zero
   11458:	103ea51e 	bne	r2,zero,10ef0 <___vfprintf_internal_r+0x5f8>
   1145c:	00800044 	movi	r2,1
   11460:	dc400d17 	ldw	r17,52(sp)
   11464:	18800115 	stw	r2,4(r3)
   11468:	d8814917 	ldw	r2,1316(sp)
   1146c:	94800044 	addi	r18,r18,1
   11470:	8c400044 	addi	r17,r17,1
   11474:	18800015 	stw	r2,0(r3)
   11478:	008001c4 	movi	r2,7
   1147c:	dc800e15 	stw	r18,56(sp)
   11480:	dc400d15 	stw	r17,52(sp)
   11484:	14421e0e 	bge	r2,r17,11d00 <___vfprintf_internal_r+0x1408>
   11488:	d9014f17 	ldw	r4,1340(sp)
   1148c:	b00b883a 	mov	r5,r22
   11490:	d9800c04 	addi	r6,sp,48
   11494:	00108a00 	call	108a0 <__sprint_r>
   11498:	103ecf1e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   1149c:	dc800e17 	ldw	r18,56(sp)
   114a0:	d8c01904 	addi	r3,sp,100
   114a4:	003e9206 	br	10ef0 <___vfprintf_internal_r+0x5f8>
   114a8:	d9014f17 	ldw	r4,1340(sp)
   114ac:	b00b883a 	mov	r5,r22
   114b0:	d9800c04 	addi	r6,sp,48
   114b4:	00108a00 	call	108a0 <__sprint_r>
   114b8:	103ec026 	beq	r2,zero,10fbc <___vfprintf_internal_r+0x6c4>
   114bc:	003ec606 	br	10fd8 <___vfprintf_internal_r+0x6e0>
   114c0:	d9014f17 	ldw	r4,1340(sp)
   114c4:	b00b883a 	mov	r5,r22
   114c8:	d9800c04 	addi	r6,sp,48
   114cc:	d9c15115 	stw	r7,1348(sp)
   114d0:	00108a00 	call	108a0 <__sprint_r>
   114d4:	d9c15117 	ldw	r7,1348(sp)
   114d8:	103ebf1e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   114dc:	dc800e17 	ldw	r18,56(sp)
   114e0:	dc400d17 	ldw	r17,52(sp)
   114e4:	dd401904 	addi	r21,sp,100
   114e8:	003e7406 	br	10ebc <___vfprintf_internal_r+0x5c4>
   114ec:	d9014f17 	ldw	r4,1340(sp)
   114f0:	b00b883a 	mov	r5,r22
   114f4:	d9800c04 	addi	r6,sp,48
   114f8:	d9c15115 	stw	r7,1348(sp)
   114fc:	00108a00 	call	108a0 <__sprint_r>
   11500:	d9c15117 	ldw	r7,1348(sp)
   11504:	103eb41e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   11508:	dd401904 	addi	r21,sp,100
   1150c:	003d6d06 	br	10ac4 <___vfprintf_internal_r+0x1cc>
   11510:	d9014f17 	ldw	r4,1340(sp)
   11514:	b00b883a 	mov	r5,r22
   11518:	d9800c04 	addi	r6,sp,48
   1151c:	d9c15115 	stw	r7,1348(sp)
   11520:	00108a00 	call	108a0 <__sprint_r>
   11524:	d9c15117 	ldw	r7,1348(sp)
   11528:	103eab1e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   1152c:	dc800e17 	ldw	r18,56(sp)
   11530:	dc400d17 	ldw	r17,52(sp)
   11534:	dd401904 	addi	r21,sp,100
   11538:	003e3406 	br	10e0c <___vfprintf_internal_r+0x514>
   1153c:	d9014f17 	ldw	r4,1340(sp)
   11540:	b00b883a 	mov	r5,r22
   11544:	d9800c04 	addi	r6,sp,48
   11548:	d9c15115 	stw	r7,1348(sp)
   1154c:	00108a00 	call	108a0 <__sprint_r>
   11550:	d9c15117 	ldw	r7,1348(sp)
   11554:	103ea01e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   11558:	dc800e17 	ldw	r18,56(sp)
   1155c:	dc400d17 	ldw	r17,52(sp)
   11560:	dd401904 	addi	r21,sp,100
   11564:	003e1c06 	br	10dd8 <___vfprintf_internal_r+0x4e0>
   11568:	d9014f17 	ldw	r4,1340(sp)
   1156c:	b00b883a 	mov	r5,r22
   11570:	d9800c04 	addi	r6,sp,48
   11574:	d9c15115 	stw	r7,1348(sp)
   11578:	00108a00 	call	108a0 <__sprint_r>
   1157c:	d9c15117 	ldw	r7,1348(sp)
   11580:	103e951e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   11584:	dc800e17 	ldw	r18,56(sp)
   11588:	dc400d17 	ldw	r17,52(sp)
   1158c:	dd401904 	addi	r21,sp,100
   11590:	003e0406 	br	10da4 <___vfprintf_internal_r+0x4ac>
   11594:	d9000517 	ldw	r4,20(sp)
   11598:	0102520e 	bge	zero,r4,11ee4 <___vfprintf_internal_r+0x15ec>
   1159c:	d9814717 	ldw	r6,1308(sp)
   115a0:	21807a16 	blt	r4,r6,1178c <___vfprintf_internal_r+0xe94>
   115a4:	d8814117 	ldw	r2,1284(sp)
   115a8:	91a5883a 	add	r18,r18,r6
   115ac:	8c400044 	addi	r17,r17,1
   115b0:	a8800015 	stw	r2,0(r21)
   115b4:	008001c4 	movi	r2,7
   115b8:	a9800115 	stw	r6,4(r21)
   115bc:	dc800e15 	stw	r18,56(sp)
   115c0:	dc400d15 	stw	r17,52(sp)
   115c4:	1442f616 	blt	r2,r17,121a0 <___vfprintf_internal_r+0x18a8>
   115c8:	a8c00204 	addi	r3,r21,8
   115cc:	d9414717 	ldw	r5,1308(sp)
   115d0:	2161c83a 	sub	r16,r4,r5
   115d4:	043f9d0e 	bge	zero,r16,1144c <___vfprintf_internal_r+0xb54>
   115d8:	00800404 	movi	r2,16
   115dc:	1402130e 	bge	r2,r16,11e2c <___vfprintf_internal_r+0x1534>
   115e0:	dc400d17 	ldw	r17,52(sp)
   115e4:	1027883a 	mov	r19,r2
   115e8:	07000174 	movhi	fp,5
   115ec:	e7203084 	addi	fp,fp,-32574
   115f0:	050001c4 	movi	r20,7
   115f4:	00000306 	br	11604 <___vfprintf_internal_r+0xd0c>
   115f8:	18c00204 	addi	r3,r3,8
   115fc:	843ffc04 	addi	r16,r16,-16
   11600:	9c020d0e 	bge	r19,r16,11e38 <___vfprintf_internal_r+0x1540>
   11604:	94800404 	addi	r18,r18,16
   11608:	8c400044 	addi	r17,r17,1
   1160c:	1f000015 	stw	fp,0(r3)
   11610:	1cc00115 	stw	r19,4(r3)
   11614:	dc800e15 	stw	r18,56(sp)
   11618:	dc400d15 	stw	r17,52(sp)
   1161c:	a47ff60e 	bge	r20,r17,115f8 <___vfprintf_internal_r+0xd00>
   11620:	d9014f17 	ldw	r4,1340(sp)
   11624:	b00b883a 	mov	r5,r22
   11628:	d9800c04 	addi	r6,sp,48
   1162c:	00108a00 	call	108a0 <__sprint_r>
   11630:	103e691e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   11634:	dc800e17 	ldw	r18,56(sp)
   11638:	dc400d17 	ldw	r17,52(sp)
   1163c:	d8c01904 	addi	r3,sp,100
   11640:	003fee06 	br	115fc <___vfprintf_internal_r+0xd04>
   11644:	d8814717 	ldw	r2,1308(sp)
   11648:	143fffc4 	addi	r16,r2,-1
   1164c:	043e970e 	bge	zero,r16,110ac <___vfprintf_internal_r+0x7b4>
   11650:	00800404 	movi	r2,16
   11654:	1400180e 	bge	r2,r16,116b8 <___vfprintf_internal_r+0xdc0>
   11658:	1029883a 	mov	r20,r2
   1165c:	07000174 	movhi	fp,5
   11660:	e7203084 	addi	fp,fp,-32574
   11664:	054001c4 	movi	r21,7
   11668:	00000306 	br	11678 <___vfprintf_internal_r+0xd80>
   1166c:	9cc00204 	addi	r19,r19,8
   11670:	843ffc04 	addi	r16,r16,-16
   11674:	a400120e 	bge	r20,r16,116c0 <___vfprintf_internal_r+0xdc8>
   11678:	94800404 	addi	r18,r18,16
   1167c:	8c400044 	addi	r17,r17,1
   11680:	9f000015 	stw	fp,0(r19)
   11684:	9d000115 	stw	r20,4(r19)
   11688:	dc800e15 	stw	r18,56(sp)
   1168c:	dc400d15 	stw	r17,52(sp)
   11690:	ac7ff60e 	bge	r21,r17,1166c <___vfprintf_internal_r+0xd74>
   11694:	d9014f17 	ldw	r4,1340(sp)
   11698:	b00b883a 	mov	r5,r22
   1169c:	d9800c04 	addi	r6,sp,48
   116a0:	00108a00 	call	108a0 <__sprint_r>
   116a4:	103e4c1e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   116a8:	dc800e17 	ldw	r18,56(sp)
   116ac:	dc400d17 	ldw	r17,52(sp)
   116b0:	dcc01904 	addi	r19,sp,100
   116b4:	003fee06 	br	11670 <___vfprintf_internal_r+0xd78>
   116b8:	07000174 	movhi	fp,5
   116bc:	e7203084 	addi	fp,fp,-32574
   116c0:	9425883a 	add	r18,r18,r16
   116c4:	8c400044 	addi	r17,r17,1
   116c8:	008001c4 	movi	r2,7
   116cc:	9f000015 	stw	fp,0(r19)
   116d0:	9c000115 	stw	r16,4(r19)
   116d4:	dc800e15 	stw	r18,56(sp)
   116d8:	dc400d15 	stw	r17,52(sp)
   116dc:	147e720e 	bge	r2,r17,110a8 <___vfprintf_internal_r+0x7b0>
   116e0:	d9014f17 	ldw	r4,1340(sp)
   116e4:	b00b883a 	mov	r5,r22
   116e8:	d9800c04 	addi	r6,sp,48
   116ec:	00108a00 	call	108a0 <__sprint_r>
   116f0:	103e391e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   116f4:	dc800e17 	ldw	r18,56(sp)
   116f8:	dc400d17 	ldw	r17,52(sp)
   116fc:	dcc01904 	addi	r19,sp,100
   11700:	003e6a06 	br	110ac <___vfprintf_internal_r+0x7b4>
   11704:	d9014f17 	ldw	r4,1340(sp)
   11708:	b00b883a 	mov	r5,r22
   1170c:	d9800c04 	addi	r6,sp,48
   11710:	d9c15115 	stw	r7,1348(sp)
   11714:	00108a00 	call	108a0 <__sprint_r>
   11718:	d9c15117 	ldw	r7,1348(sp)
   1171c:	103e2e1e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   11720:	dc800e17 	ldw	r18,56(sp)
   11724:	dc400d17 	ldw	r17,52(sp)
   11728:	dd401904 	addi	r21,sp,100
   1172c:	003dba06 	br	10e18 <___vfprintf_internal_r+0x520>
   11730:	d9014f17 	ldw	r4,1340(sp)
   11734:	b00b883a 	mov	r5,r22
   11738:	d9800c04 	addi	r6,sp,48
   1173c:	00108a00 	call	108a0 <__sprint_r>
   11740:	103e251e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   11744:	dc800e17 	ldw	r18,56(sp)
   11748:	dc400d17 	ldw	r17,52(sp)
   1174c:	dcc01904 	addi	r19,sp,100
   11750:	003e4206 	br	1105c <___vfprintf_internal_r+0x764>
   11754:	d9014f17 	ldw	r4,1340(sp)
   11758:	b00b883a 	mov	r5,r22
   1175c:	d9800c04 	addi	r6,sp,48
   11760:	00108a00 	call	108a0 <__sprint_r>
   11764:	103e1c1e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   11768:	dc800e17 	ldw	r18,56(sp)
   1176c:	dc400d17 	ldw	r17,52(sp)
   11770:	d8c01904 	addi	r3,sp,100
   11774:	003e2e06 	br	11030 <___vfprintf_internal_r+0x738>
   11778:	d9414c17 	ldw	r5,1328(sp)
   1177c:	2880004c 	andi	r2,r5,1
   11780:	1005003a 	cmpeq	r2,r2,zero
   11784:	103dda1e 	bne	r2,zero,10ef0 <___vfprintf_internal_r+0x5f8>
   11788:	003e9f06 	br	11208 <___vfprintf_internal_r+0x910>
   1178c:	d8c14117 	ldw	r3,1284(sp)
   11790:	9125883a 	add	r18,r18,r4
   11794:	8c400044 	addi	r17,r17,1
   11798:	008001c4 	movi	r2,7
   1179c:	a8c00015 	stw	r3,0(r21)
   117a0:	a9000115 	stw	r4,4(r21)
   117a4:	dc800e15 	stw	r18,56(sp)
   117a8:	dc400d15 	stw	r17,52(sp)
   117ac:	14426616 	blt	r2,r17,12148 <___vfprintf_internal_r+0x1850>
   117b0:	a8c00204 	addi	r3,r21,8
   117b4:	d9414917 	ldw	r5,1316(sp)
   117b8:	00800044 	movi	r2,1
   117bc:	94800044 	addi	r18,r18,1
   117c0:	8c400044 	addi	r17,r17,1
   117c4:	18800115 	stw	r2,4(r3)
   117c8:	008001c4 	movi	r2,7
   117cc:	19400015 	stw	r5,0(r3)
   117d0:	dc800e15 	stw	r18,56(sp)
   117d4:	dc400d15 	stw	r17,52(sp)
   117d8:	2021883a 	mov	r16,r4
   117dc:	14425016 	blt	r2,r17,12120 <___vfprintf_internal_r+0x1828>
   117e0:	19400204 	addi	r5,r3,8
   117e4:	d9814717 	ldw	r6,1308(sp)
   117e8:	8c400044 	addi	r17,r17,1
   117ec:	dc400d15 	stw	r17,52(sp)
   117f0:	3107c83a 	sub	r3,r6,r4
   117f4:	d9014117 	ldw	r4,1284(sp)
   117f8:	90e5883a 	add	r18,r18,r3
   117fc:	28c00115 	stw	r3,4(r5)
   11800:	8105883a 	add	r2,r16,r4
   11804:	28800015 	stw	r2,0(r5)
   11808:	008001c4 	movi	r2,7
   1180c:	dc800e15 	stw	r18,56(sp)
   11810:	147f1d16 	blt	r2,r17,11488 <___vfprintf_internal_r+0xb90>
   11814:	28c00204 	addi	r3,r5,8
   11818:	003db506 	br	10ef0 <___vfprintf_internal_r+0x5f8>
   1181c:	3c000017 	ldw	r16,0(r7)
   11820:	3c400117 	ldw	r17,4(r7)
   11824:	39800204 	addi	r6,r7,8
   11828:	01000044 	movi	r4,1
   1182c:	d9814015 	stw	r6,1280(sp)
   11830:	d8000405 	stb	zero,16(sp)
   11834:	003ebe06 	br	11330 <___vfprintf_internal_r+0xa38>
   11838:	3c000017 	ldw	r16,0(r7)
   1183c:	3c400117 	ldw	r17,4(r7)
   11840:	38800204 	addi	r2,r7,8
   11844:	d8814015 	stw	r2,1280(sp)
   11848:	003eb706 	br	11328 <___vfprintf_internal_r+0xa30>
   1184c:	3c000017 	ldw	r16,0(r7)
   11850:	3c400117 	ldw	r17,4(r7)
   11854:	39000204 	addi	r4,r7,8
   11858:	d9014015 	stw	r4,1280(sp)
   1185c:	0009883a 	mov	r4,zero
   11860:	d8000405 	stb	zero,16(sp)
   11864:	003eb206 	br	11330 <___vfprintf_internal_r+0xa38>
   11868:	38c00017 	ldw	r3,0(r7)
   1186c:	39c00104 	addi	r7,r7,4
   11870:	d8c14a15 	stw	r3,1320(sp)
   11874:	1800d10e 	bge	r3,zero,11bbc <___vfprintf_internal_r+0x12c4>
   11878:	00c7c83a 	sub	r3,zero,r3
   1187c:	d8c14a15 	stw	r3,1320(sp)
   11880:	d9014c17 	ldw	r4,1328(sp)
   11884:	b8c00007 	ldb	r3,0(r23)
   11888:	21000114 	ori	r4,r4,4
   1188c:	d9014c15 	stw	r4,1328(sp)
   11890:	003c9806 	br	10af4 <___vfprintf_internal_r+0x1fc>
   11894:	d9814c17 	ldw	r6,1328(sp)
   11898:	3080080c 	andi	r2,r6,32
   1189c:	1001f026 	beq	r2,zero,12060 <___vfprintf_internal_r+0x1768>
   118a0:	d9014b17 	ldw	r4,1324(sp)
   118a4:	38800017 	ldw	r2,0(r7)
   118a8:	39c00104 	addi	r7,r7,4
   118ac:	d9c14015 	stw	r7,1280(sp)
   118b0:	2007d7fa 	srai	r3,r4,31
   118b4:	d9c14017 	ldw	r7,1280(sp)
   118b8:	11000015 	stw	r4,0(r2)
   118bc:	10c00115 	stw	r3,4(r2)
   118c0:	003c6906 	br	10a68 <___vfprintf_internal_r+0x170>
   118c4:	b8c00007 	ldb	r3,0(r23)
   118c8:	00801b04 	movi	r2,108
   118cc:	18824f26 	beq	r3,r2,1220c <___vfprintf_internal_r+0x1914>
   118d0:	d9414c17 	ldw	r5,1328(sp)
   118d4:	29400414 	ori	r5,r5,16
   118d8:	d9414c15 	stw	r5,1328(sp)
   118dc:	003c8506 	br	10af4 <___vfprintf_internal_r+0x1fc>
   118e0:	d9814c17 	ldw	r6,1328(sp)
   118e4:	b8c00007 	ldb	r3,0(r23)
   118e8:	31800814 	ori	r6,r6,32
   118ec:	d9814c15 	stw	r6,1328(sp)
   118f0:	003c8006 	br	10af4 <___vfprintf_internal_r+0x1fc>
   118f4:	d8814c17 	ldw	r2,1328(sp)
   118f8:	3c000017 	ldw	r16,0(r7)
   118fc:	00c01e04 	movi	r3,120
   11900:	10800094 	ori	r2,r2,2
   11904:	d8814c15 	stw	r2,1328(sp)
   11908:	39c00104 	addi	r7,r7,4
   1190c:	01400174 	movhi	r5,5
   11910:	29601904 	addi	r5,r5,-32668
   11914:	00800c04 	movi	r2,48
   11918:	0023883a 	mov	r17,zero
   1191c:	01000084 	movi	r4,2
   11920:	d9c14015 	stw	r7,1280(sp)
   11924:	d8c14d15 	stw	r3,1332(sp)
   11928:	d9414415 	stw	r5,1296(sp)
   1192c:	d8800445 	stb	r2,17(sp)
   11930:	d8c00485 	stb	r3,18(sp)
   11934:	d8000405 	stb	zero,16(sp)
   11938:	003e7d06 	br	11330 <___vfprintf_internal_r+0xa38>
   1193c:	d8814c17 	ldw	r2,1328(sp)
   11940:	b8c00007 	ldb	r3,0(r23)
   11944:	10801014 	ori	r2,r2,64
   11948:	d8814c15 	stw	r2,1328(sp)
   1194c:	003c6906 	br	10af4 <___vfprintf_internal_r+0x1fc>
   11950:	d9414c17 	ldw	r5,1328(sp)
   11954:	2880020c 	andi	r2,r5,8
   11958:	1001df26 	beq	r2,zero,120d8 <___vfprintf_internal_r+0x17e0>
   1195c:	39800017 	ldw	r6,0(r7)
   11960:	38800204 	addi	r2,r7,8
   11964:	d8814015 	stw	r2,1280(sp)
   11968:	d9814215 	stw	r6,1288(sp)
   1196c:	39c00117 	ldw	r7,4(r7)
   11970:	d9c14315 	stw	r7,1292(sp)
   11974:	d9014217 	ldw	r4,1288(sp)
   11978:	d9414317 	ldw	r5,1292(sp)
   1197c:	00172980 	call	17298 <__isinfd>
   11980:	10021726 	beq	r2,zero,121e0 <___vfprintf_internal_r+0x18e8>
   11984:	d9014217 	ldw	r4,1288(sp)
   11988:	d9414317 	ldw	r5,1292(sp)
   1198c:	000d883a 	mov	r6,zero
   11990:	000f883a 	mov	r7,zero
   11994:	00192e00 	call	192e0 <__ltdf2>
   11998:	1002ca16 	blt	r2,zero,124c4 <___vfprintf_internal_r+0x1bcc>
   1199c:	d9414d17 	ldw	r5,1332(sp)
   119a0:	008011c4 	movi	r2,71
   119a4:	11420a16 	blt	r2,r5,121d0 <___vfprintf_internal_r+0x18d8>
   119a8:	01800174 	movhi	r6,5
   119ac:	31a01e04 	addi	r6,r6,-32648
   119b0:	d9814115 	stw	r6,1284(sp)
   119b4:	d9014c17 	ldw	r4,1328(sp)
   119b8:	00c000c4 	movi	r3,3
   119bc:	00bfdfc4 	movi	r2,-129
   119c0:	2088703a 	and	r4,r4,r2
   119c4:	180f883a 	mov	r7,r3
   119c8:	d8c14515 	stw	r3,1300(sp)
   119cc:	d9014c15 	stw	r4,1328(sp)
   119d0:	d8014615 	stw	zero,1304(sp)
   119d4:	003e6a06 	br	11380 <___vfprintf_internal_r+0xa88>
   119d8:	38800017 	ldw	r2,0(r7)
   119dc:	00c00044 	movi	r3,1
   119e0:	39c00104 	addi	r7,r7,4
   119e4:	d9c14015 	stw	r7,1280(sp)
   119e8:	d9000f04 	addi	r4,sp,60
   119ec:	180f883a 	mov	r7,r3
   119f0:	d8c14515 	stw	r3,1300(sp)
   119f4:	d9014115 	stw	r4,1284(sp)
   119f8:	d8800f05 	stb	r2,60(sp)
   119fc:	d8000405 	stb	zero,16(sp)
   11a00:	003cac06 	br	10cb4 <___vfprintf_internal_r+0x3bc>
   11a04:	01400174 	movhi	r5,5
   11a08:	29602404 	addi	r5,r5,-32624
   11a0c:	d9414415 	stw	r5,1296(sp)
   11a10:	d9814c17 	ldw	r6,1328(sp)
   11a14:	3080080c 	andi	r2,r6,32
   11a18:	1000f926 	beq	r2,zero,11e00 <___vfprintf_internal_r+0x1508>
   11a1c:	3c000017 	ldw	r16,0(r7)
   11a20:	3c400117 	ldw	r17,4(r7)
   11a24:	38800204 	addi	r2,r7,8
   11a28:	d8814015 	stw	r2,1280(sp)
   11a2c:	d9414c17 	ldw	r5,1328(sp)
   11a30:	2880004c 	andi	r2,r5,1
   11a34:	1005003a 	cmpeq	r2,r2,zero
   11a38:	1000b31e 	bne	r2,zero,11d08 <___vfprintf_internal_r+0x1410>
   11a3c:	8444b03a 	or	r2,r16,r17
   11a40:	1000b126 	beq	r2,zero,11d08 <___vfprintf_internal_r+0x1410>
   11a44:	d9814d17 	ldw	r6,1332(sp)
   11a48:	29400094 	ori	r5,r5,2
   11a4c:	00800c04 	movi	r2,48
   11a50:	01000084 	movi	r4,2
   11a54:	d9414c15 	stw	r5,1328(sp)
   11a58:	d8800445 	stb	r2,17(sp)
   11a5c:	d9800485 	stb	r6,18(sp)
   11a60:	d8000405 	stb	zero,16(sp)
   11a64:	003e3206 	br	11330 <___vfprintf_internal_r+0xa38>
   11a68:	01800174 	movhi	r6,5
   11a6c:	31a01904 	addi	r6,r6,-32668
   11a70:	d9814415 	stw	r6,1296(sp)
   11a74:	003fe606 	br	11a10 <___vfprintf_internal_r+0x1118>
   11a78:	00800ac4 	movi	r2,43
   11a7c:	d8800405 	stb	r2,16(sp)
   11a80:	b8c00007 	ldb	r3,0(r23)
   11a84:	003c1b06 	br	10af4 <___vfprintf_internal_r+0x1fc>
   11a88:	d8814c17 	ldw	r2,1328(sp)
   11a8c:	b8c00007 	ldb	r3,0(r23)
   11a90:	10800054 	ori	r2,r2,1
   11a94:	d8814c15 	stw	r2,1328(sp)
   11a98:	003c1606 	br	10af4 <___vfprintf_internal_r+0x1fc>
   11a9c:	d8800407 	ldb	r2,16(sp)
   11aa0:	1000461e 	bne	r2,zero,11bbc <___vfprintf_internal_r+0x12c4>
   11aa4:	00800804 	movi	r2,32
   11aa8:	d8800405 	stb	r2,16(sp)
   11aac:	b8c00007 	ldb	r3,0(r23)
   11ab0:	003c1006 	br	10af4 <___vfprintf_internal_r+0x1fc>
   11ab4:	d9814c17 	ldw	r6,1328(sp)
   11ab8:	b8c00007 	ldb	r3,0(r23)
   11abc:	31800214 	ori	r6,r6,8
   11ac0:	d9814c15 	stw	r6,1328(sp)
   11ac4:	003c0b06 	br	10af4 <___vfprintf_internal_r+0x1fc>
   11ac8:	0007883a 	mov	r3,zero
   11acc:	01000244 	movi	r4,9
   11ad0:	188002a4 	muli	r2,r3,10
   11ad4:	b8c00007 	ldb	r3,0(r23)
   11ad8:	d9814d17 	ldw	r6,1332(sp)
   11adc:	bdc00044 	addi	r23,r23,1
   11ae0:	d8c14d15 	stw	r3,1332(sp)
   11ae4:	d9414d17 	ldw	r5,1332(sp)
   11ae8:	3085883a 	add	r2,r6,r2
   11aec:	10fff404 	addi	r3,r2,-48
   11af0:	28bff404 	addi	r2,r5,-48
   11af4:	20bff62e 	bgeu	r4,r2,11ad0 <___vfprintf_internal_r+0x11d8>
   11af8:	d8c14a15 	stw	r3,1320(sp)
   11afc:	003bff06 	br	10afc <___vfprintf_internal_r+0x204>
   11b00:	d9414c17 	ldw	r5,1328(sp)
   11b04:	b8c00007 	ldb	r3,0(r23)
   11b08:	29402014 	ori	r5,r5,128
   11b0c:	d9414c15 	stw	r5,1328(sp)
   11b10:	003bf806 	br	10af4 <___vfprintf_internal_r+0x1fc>
   11b14:	b8c00007 	ldb	r3,0(r23)
   11b18:	00800a84 	movi	r2,42
   11b1c:	bdc00044 	addi	r23,r23,1
   11b20:	18831526 	beq	r3,r2,12778 <___vfprintf_internal_r+0x1e80>
   11b24:	d8c14d15 	stw	r3,1332(sp)
   11b28:	18bff404 	addi	r2,r3,-48
   11b2c:	00c00244 	movi	r3,9
   11b30:	18827836 	bltu	r3,r2,12514 <___vfprintf_internal_r+0x1c1c>
   11b34:	000d883a 	mov	r6,zero
   11b38:	308002a4 	muli	r2,r6,10
   11b3c:	b9800007 	ldb	r6,0(r23)
   11b40:	d9414d17 	ldw	r5,1332(sp)
   11b44:	bdc00044 	addi	r23,r23,1
   11b48:	d9814d15 	stw	r6,1332(sp)
   11b4c:	d9014d17 	ldw	r4,1332(sp)
   11b50:	1145883a 	add	r2,r2,r5
   11b54:	11bff404 	addi	r6,r2,-48
   11b58:	20bff404 	addi	r2,r4,-48
   11b5c:	18bff62e 	bgeu	r3,r2,11b38 <___vfprintf_internal_r+0x1240>
   11b60:	3027883a 	mov	r19,r6
   11b64:	303be50e 	bge	r6,zero,10afc <___vfprintf_internal_r+0x204>
   11b68:	04ffffc4 	movi	r19,-1
   11b6c:	003be306 	br	10afc <___vfprintf_internal_r+0x204>
   11b70:	d8000405 	stb	zero,16(sp)
   11b74:	39800017 	ldw	r6,0(r7)
   11b78:	39c00104 	addi	r7,r7,4
   11b7c:	d9c14015 	stw	r7,1280(sp)
   11b80:	d9814115 	stw	r6,1284(sp)
   11b84:	3001c926 	beq	r6,zero,122ac <___vfprintf_internal_r+0x19b4>
   11b88:	98000e16 	blt	r19,zero,11bc4 <___vfprintf_internal_r+0x12cc>
   11b8c:	d9014117 	ldw	r4,1284(sp)
   11b90:	000b883a 	mov	r5,zero
   11b94:	980d883a 	mov	r6,r19
   11b98:	00159b40 	call	159b4 <memchr>
   11b9c:	10025926 	beq	r2,zero,12504 <___vfprintf_internal_r+0x1c0c>
   11ba0:	d8c14117 	ldw	r3,1284(sp)
   11ba4:	10cfc83a 	sub	r7,r2,r3
   11ba8:	99c19e16 	blt	r19,r7,12224 <___vfprintf_internal_r+0x192c>
   11bac:	d9c14515 	stw	r7,1300(sp)
   11bb0:	38000916 	blt	r7,zero,11bd8 <___vfprintf_internal_r+0x12e0>
   11bb4:	d8014615 	stw	zero,1304(sp)
   11bb8:	003df106 	br	11380 <___vfprintf_internal_r+0xa88>
   11bbc:	b8c00007 	ldb	r3,0(r23)
   11bc0:	003bcc06 	br	10af4 <___vfprintf_internal_r+0x1fc>
   11bc4:	d9014117 	ldw	r4,1284(sp)
   11bc8:	001082c0 	call	1082c <strlen>
   11bcc:	d8814515 	stw	r2,1300(sp)
   11bd0:	100f883a 	mov	r7,r2
   11bd4:	103ff70e 	bge	r2,zero,11bb4 <___vfprintf_internal_r+0x12bc>
   11bd8:	d8014515 	stw	zero,1300(sp)
   11bdc:	d8014615 	stw	zero,1304(sp)
   11be0:	003de706 	br	11380 <___vfprintf_internal_r+0xa88>
   11be4:	20c03fcc 	andi	r3,r4,255
   11be8:	00800044 	movi	r2,1
   11bec:	18802d26 	beq	r3,r2,11ca4 <___vfprintf_internal_r+0x13ac>
   11bf0:	18800e36 	bltu	r3,r2,11c2c <___vfprintf_internal_r+0x1334>
   11bf4:	00800084 	movi	r2,2
   11bf8:	1880fa26 	beq	r3,r2,11fe4 <___vfprintf_internal_r+0x16ec>
   11bfc:	01000174 	movhi	r4,5
   11c00:	21202904 	addi	r4,r4,-32604
   11c04:	001082c0 	call	1082c <strlen>
   11c08:	100f883a 	mov	r7,r2
   11c0c:	dcc14515 	stw	r19,1300(sp)
   11c10:	9880010e 	bge	r19,r2,11c18 <___vfprintf_internal_r+0x1320>
   11c14:	d8814515 	stw	r2,1300(sp)
   11c18:	00800174 	movhi	r2,5
   11c1c:	10a02904 	addi	r2,r2,-32604
   11c20:	dcc14615 	stw	r19,1304(sp)
   11c24:	d8814115 	stw	r2,1284(sp)
   11c28:	003dd506 	br	11380 <___vfprintf_internal_r+0xa88>
   11c2c:	d9401904 	addi	r5,sp,100
   11c30:	dd000f04 	addi	r20,sp,60
   11c34:	d9414115 	stw	r5,1284(sp)
   11c38:	880a977a 	slli	r5,r17,29
   11c3c:	d9814117 	ldw	r6,1284(sp)
   11c40:	8004d0fa 	srli	r2,r16,3
   11c44:	8806d0fa 	srli	r3,r17,3
   11c48:	810001cc 	andi	r4,r16,7
   11c4c:	2884b03a 	or	r2,r5,r2
   11c50:	31bfffc4 	addi	r6,r6,-1
   11c54:	21000c04 	addi	r4,r4,48
   11c58:	d9814115 	stw	r6,1284(sp)
   11c5c:	10cab03a 	or	r5,r2,r3
   11c60:	31000005 	stb	r4,0(r6)
   11c64:	1021883a 	mov	r16,r2
   11c68:	1823883a 	mov	r17,r3
   11c6c:	283ff21e 	bne	r5,zero,11c38 <___vfprintf_internal_r+0x1340>
   11c70:	d8c14c17 	ldw	r3,1328(sp)
   11c74:	1880004c 	andi	r2,r3,1
   11c78:	1005003a 	cmpeq	r2,r2,zero
   11c7c:	103db91e 	bne	r2,zero,11364 <___vfprintf_internal_r+0xa6c>
   11c80:	20803fcc 	andi	r2,r4,255
   11c84:	1080201c 	xori	r2,r2,128
   11c88:	10bfe004 	addi	r2,r2,-128
   11c8c:	00c00c04 	movi	r3,48
   11c90:	10fdb426 	beq	r2,r3,11364 <___vfprintf_internal_r+0xa6c>
   11c94:	31bfffc4 	addi	r6,r6,-1
   11c98:	d9814115 	stw	r6,1284(sp)
   11c9c:	30c00005 	stb	r3,0(r6)
   11ca0:	003db006 	br	11364 <___vfprintf_internal_r+0xa6c>
   11ca4:	88800068 	cmpgeui	r2,r17,1
   11ca8:	10002c1e 	bne	r2,zero,11d5c <___vfprintf_internal_r+0x1464>
   11cac:	8800021e 	bne	r17,zero,11cb8 <___vfprintf_internal_r+0x13c0>
   11cb0:	00800244 	movi	r2,9
   11cb4:	14002936 	bltu	r2,r16,11d5c <___vfprintf_internal_r+0x1464>
   11cb8:	d90018c4 	addi	r4,sp,99
   11cbc:	dd000f04 	addi	r20,sp,60
   11cc0:	d9014115 	stw	r4,1284(sp)
   11cc4:	d9014117 	ldw	r4,1284(sp)
   11cc8:	80800c04 	addi	r2,r16,48
   11ccc:	20800005 	stb	r2,0(r4)
   11cd0:	003da406 	br	11364 <___vfprintf_internal_r+0xa6c>
   11cd4:	dc400d17 	ldw	r17,52(sp)
   11cd8:	07000174 	movhi	fp,5
   11cdc:	e7203084 	addi	fp,fp,-32574
   11ce0:	9425883a 	add	r18,r18,r16
   11ce4:	8c400044 	addi	r17,r17,1
   11ce8:	008001c4 	movi	r2,7
   11cec:	1f000015 	stw	fp,0(r3)
   11cf0:	1c000115 	stw	r16,4(r3)
   11cf4:	dc800e15 	stw	r18,56(sp)
   11cf8:	dc400d15 	stw	r17,52(sp)
   11cfc:	147de216 	blt	r2,r17,11488 <___vfprintf_internal_r+0xb90>
   11d00:	18c00204 	addi	r3,r3,8
   11d04:	003c7a06 	br	10ef0 <___vfprintf_internal_r+0x5f8>
   11d08:	01000084 	movi	r4,2
   11d0c:	d8000405 	stb	zero,16(sp)
   11d10:	003d8706 	br	11330 <___vfprintf_internal_r+0xa38>
   11d14:	d9814c17 	ldw	r6,1328(sp)
   11d18:	30c4703a 	and	r2,r6,r3
   11d1c:	1005003a 	cmpeq	r2,r2,zero
   11d20:	103cb926 	beq	r2,zero,11008 <___vfprintf_internal_r+0x710>
   11d24:	d9014117 	ldw	r4,1284(sp)
   11d28:	94800044 	addi	r18,r18,1
   11d2c:	8c400044 	addi	r17,r17,1
   11d30:	008001c4 	movi	r2,7
   11d34:	a9000015 	stw	r4,0(r21)
   11d38:	a8c00115 	stw	r3,4(r21)
   11d3c:	dc800e15 	stw	r18,56(sp)
   11d40:	dc400d15 	stw	r17,52(sp)
   11d44:	147e6616 	blt	r2,r17,116e0 <___vfprintf_internal_r+0xde8>
   11d48:	acc00204 	addi	r19,r21,8
   11d4c:	003cd706 	br	110ac <___vfprintf_internal_r+0x7b4>
   11d50:	07000174 	movhi	fp,5
   11d54:	e7203084 	addi	fp,fp,-32574
   11d58:	003c4f06 	br	10e98 <___vfprintf_internal_r+0x5a0>
   11d5c:	dd000f04 	addi	r20,sp,60
   11d60:	dc801904 	addi	r18,sp,100
   11d64:	8009883a 	mov	r4,r16
   11d68:	880b883a 	mov	r5,r17
   11d6c:	01800284 	movi	r6,10
   11d70:	000f883a 	mov	r7,zero
   11d74:	0017ff00 	call	17ff0 <__umoddi3>
   11d78:	12000c04 	addi	r8,r2,48
   11d7c:	94bfffc4 	addi	r18,r18,-1
   11d80:	8009883a 	mov	r4,r16
   11d84:	880b883a 	mov	r5,r17
   11d88:	01800284 	movi	r6,10
   11d8c:	000f883a 	mov	r7,zero
   11d90:	92000005 	stb	r8,0(r18)
   11d94:	0017a140 	call	17a14 <__udivdi3>
   11d98:	1009883a 	mov	r4,r2
   11d9c:	1021883a 	mov	r16,r2
   11da0:	18800068 	cmpgeui	r2,r3,1
   11da4:	1823883a 	mov	r17,r3
   11da8:	103fee1e 	bne	r2,zero,11d64 <___vfprintf_internal_r+0x146c>
   11dac:	1800021e 	bne	r3,zero,11db8 <___vfprintf_internal_r+0x14c0>
   11db0:	00800244 	movi	r2,9
   11db4:	113feb36 	bltu	r2,r4,11d64 <___vfprintf_internal_r+0x146c>
   11db8:	94bfffc4 	addi	r18,r18,-1
   11dbc:	dc814115 	stw	r18,1284(sp)
   11dc0:	003fc006 	br	11cc4 <___vfprintf_internal_r+0x13cc>
   11dc4:	d9014c17 	ldw	r4,1328(sp)
   11dc8:	2080004c 	andi	r2,r4,1
   11dcc:	10009a1e 	bne	r2,zero,12038 <___vfprintf_internal_r+0x1740>
   11dd0:	d9401904 	addi	r5,sp,100
   11dd4:	dd000f04 	addi	r20,sp,60
   11dd8:	d9414115 	stw	r5,1284(sp)
   11ddc:	003d6106 	br	11364 <___vfprintf_internal_r+0xa6c>
   11de0:	d9014f17 	ldw	r4,1340(sp)
   11de4:	b00b883a 	mov	r5,r22
   11de8:	d9800c04 	addi	r6,sp,48
   11dec:	00108a00 	call	108a0 <__sprint_r>
   11df0:	103c791e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   11df4:	dc800e17 	ldw	r18,56(sp)
   11df8:	d8c01904 	addi	r3,sp,100
   11dfc:	003cff06 	br	111fc <___vfprintf_internal_r+0x904>
   11e00:	d8c14c17 	ldw	r3,1328(sp)
   11e04:	1880040c 	andi	r2,r3,16
   11e08:	1000711e 	bne	r2,zero,11fd0 <___vfprintf_internal_r+0x16d8>
   11e0c:	d9014c17 	ldw	r4,1328(sp)
   11e10:	2080100c 	andi	r2,r4,64
   11e14:	10006e26 	beq	r2,zero,11fd0 <___vfprintf_internal_r+0x16d8>
   11e18:	3c00000b 	ldhu	r16,0(r7)
   11e1c:	0023883a 	mov	r17,zero
   11e20:	39c00104 	addi	r7,r7,4
   11e24:	d9c14015 	stw	r7,1280(sp)
   11e28:	003f0006 	br	11a2c <___vfprintf_internal_r+0x1134>
   11e2c:	dc400d17 	ldw	r17,52(sp)
   11e30:	07000174 	movhi	fp,5
   11e34:	e7203084 	addi	fp,fp,-32574
   11e38:	9425883a 	add	r18,r18,r16
   11e3c:	8c400044 	addi	r17,r17,1
   11e40:	008001c4 	movi	r2,7
   11e44:	1f000015 	stw	fp,0(r3)
   11e48:	1c000115 	stw	r16,4(r3)
   11e4c:	dc800e15 	stw	r18,56(sp)
   11e50:	dc400d15 	stw	r17,52(sp)
   11e54:	147d7616 	blt	r2,r17,11430 <___vfprintf_internal_r+0xb38>
   11e58:	18c00204 	addi	r3,r3,8
   11e5c:	003d7b06 	br	1144c <___vfprintf_internal_r+0xb54>
   11e60:	dc800e17 	ldw	r18,56(sp)
   11e64:	dc400d17 	ldw	r17,52(sp)
   11e68:	07000174 	movhi	fp,5
   11e6c:	e7203484 	addi	fp,fp,-32558
   11e70:	003bc006 	br	10d74 <___vfprintf_internal_r+0x47c>
   11e74:	d9014f17 	ldw	r4,1340(sp)
   11e78:	b00b883a 	mov	r5,r22
   11e7c:	d9800c04 	addi	r6,sp,48
   11e80:	00108a00 	call	108a0 <__sprint_r>
   11e84:	103c541e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   11e88:	dc800e17 	ldw	r18,56(sp)
   11e8c:	d8c01904 	addi	r3,sp,100
   11e90:	003ce906 	br	11238 <___vfprintf_internal_r+0x940>
   11e94:	3c000017 	ldw	r16,0(r7)
   11e98:	0009883a 	mov	r4,zero
   11e9c:	39c00104 	addi	r7,r7,4
   11ea0:	0023883a 	mov	r17,zero
   11ea4:	d9c14015 	stw	r7,1280(sp)
   11ea8:	d8000405 	stb	zero,16(sp)
   11eac:	003d2006 	br	11330 <___vfprintf_internal_r+0xa38>
   11eb0:	38800017 	ldw	r2,0(r7)
   11eb4:	39c00104 	addi	r7,r7,4
   11eb8:	d9c14015 	stw	r7,1280(sp)
   11ebc:	1023d7fa 	srai	r17,r2,31
   11ec0:	1021883a 	mov	r16,r2
   11ec4:	003d1806 	br	11328 <___vfprintf_internal_r+0xa30>
   11ec8:	3c000017 	ldw	r16,0(r7)
   11ecc:	01000044 	movi	r4,1
   11ed0:	39c00104 	addi	r7,r7,4
   11ed4:	0023883a 	mov	r17,zero
   11ed8:	d9c14015 	stw	r7,1280(sp)
   11edc:	d8000405 	stb	zero,16(sp)
   11ee0:	003d1306 	br	11330 <___vfprintf_internal_r+0xa38>
   11ee4:	00800174 	movhi	r2,5
   11ee8:	10a03004 	addi	r2,r2,-32576
   11eec:	94800044 	addi	r18,r18,1
   11ef0:	8c400044 	addi	r17,r17,1
   11ef4:	a8800015 	stw	r2,0(r21)
   11ef8:	00c00044 	movi	r3,1
   11efc:	008001c4 	movi	r2,7
   11f00:	a8c00115 	stw	r3,4(r21)
   11f04:	dc800e15 	stw	r18,56(sp)
   11f08:	dc400d15 	stw	r17,52(sp)
   11f0c:	1440ca16 	blt	r2,r17,12238 <___vfprintf_internal_r+0x1940>
   11f10:	a8c00204 	addi	r3,r21,8
   11f14:	2000061e 	bne	r4,zero,11f30 <___vfprintf_internal_r+0x1638>
   11f18:	d9414717 	ldw	r5,1308(sp)
   11f1c:	2800041e 	bne	r5,zero,11f30 <___vfprintf_internal_r+0x1638>
   11f20:	d9814c17 	ldw	r6,1328(sp)
   11f24:	3080004c 	andi	r2,r6,1
   11f28:	1005003a 	cmpeq	r2,r2,zero
   11f2c:	103bf01e 	bne	r2,zero,10ef0 <___vfprintf_internal_r+0x5f8>
   11f30:	00800044 	movi	r2,1
   11f34:	dc400d17 	ldw	r17,52(sp)
   11f38:	18800115 	stw	r2,4(r3)
   11f3c:	d8814917 	ldw	r2,1316(sp)
   11f40:	94800044 	addi	r18,r18,1
   11f44:	8c400044 	addi	r17,r17,1
   11f48:	18800015 	stw	r2,0(r3)
   11f4c:	008001c4 	movi	r2,7
   11f50:	dc800e15 	stw	r18,56(sp)
   11f54:	dc400d15 	stw	r17,52(sp)
   11f58:	1440ca16 	blt	r2,r17,12284 <___vfprintf_internal_r+0x198c>
   11f5c:	18c00204 	addi	r3,r3,8
   11f60:	0121c83a 	sub	r16,zero,r4
   11f64:	0400500e 	bge	zero,r16,120a8 <___vfprintf_internal_r+0x17b0>
   11f68:	00800404 	movi	r2,16
   11f6c:	1400800e 	bge	r2,r16,12170 <___vfprintf_internal_r+0x1878>
   11f70:	1027883a 	mov	r19,r2
   11f74:	07000174 	movhi	fp,5
   11f78:	e7203084 	addi	fp,fp,-32574
   11f7c:	050001c4 	movi	r20,7
   11f80:	00000306 	br	11f90 <___vfprintf_internal_r+0x1698>
   11f84:	18c00204 	addi	r3,r3,8
   11f88:	843ffc04 	addi	r16,r16,-16
   11f8c:	9c007a0e 	bge	r19,r16,12178 <___vfprintf_internal_r+0x1880>
   11f90:	94800404 	addi	r18,r18,16
   11f94:	8c400044 	addi	r17,r17,1
   11f98:	1f000015 	stw	fp,0(r3)
   11f9c:	1cc00115 	stw	r19,4(r3)
   11fa0:	dc800e15 	stw	r18,56(sp)
   11fa4:	dc400d15 	stw	r17,52(sp)
   11fa8:	a47ff60e 	bge	r20,r17,11f84 <___vfprintf_internal_r+0x168c>
   11fac:	d9014f17 	ldw	r4,1340(sp)
   11fb0:	b00b883a 	mov	r5,r22
   11fb4:	d9800c04 	addi	r6,sp,48
   11fb8:	00108a00 	call	108a0 <__sprint_r>
   11fbc:	103c061e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   11fc0:	dc800e17 	ldw	r18,56(sp)
   11fc4:	dc400d17 	ldw	r17,52(sp)
   11fc8:	d8c01904 	addi	r3,sp,100
   11fcc:	003fee06 	br	11f88 <___vfprintf_internal_r+0x1690>
   11fd0:	3c000017 	ldw	r16,0(r7)
   11fd4:	0023883a 	mov	r17,zero
   11fd8:	39c00104 	addi	r7,r7,4
   11fdc:	d9c14015 	stw	r7,1280(sp)
   11fe0:	003e9206 	br	11a2c <___vfprintf_internal_r+0x1134>
   11fe4:	d9401904 	addi	r5,sp,100
   11fe8:	dd000f04 	addi	r20,sp,60
   11fec:	d9414115 	stw	r5,1284(sp)
   11ff0:	d9814417 	ldw	r6,1296(sp)
   11ff4:	880a973a 	slli	r5,r17,28
   11ff8:	8004d13a 	srli	r2,r16,4
   11ffc:	810003cc 	andi	r4,r16,15
   12000:	3109883a 	add	r4,r6,r4
   12004:	2884b03a 	or	r2,r5,r2
   12008:	21400003 	ldbu	r5,0(r4)
   1200c:	d9014117 	ldw	r4,1284(sp)
   12010:	8806d13a 	srli	r3,r17,4
   12014:	1021883a 	mov	r16,r2
   12018:	213fffc4 	addi	r4,r4,-1
   1201c:	d9014115 	stw	r4,1284(sp)
   12020:	d9814117 	ldw	r6,1284(sp)
   12024:	10c8b03a 	or	r4,r2,r3
   12028:	1823883a 	mov	r17,r3
   1202c:	31400005 	stb	r5,0(r6)
   12030:	203fef1e 	bne	r4,zero,11ff0 <___vfprintf_internal_r+0x16f8>
   12034:	003ccb06 	br	11364 <___vfprintf_internal_r+0xa6c>
   12038:	00800c04 	movi	r2,48
   1203c:	d98018c4 	addi	r6,sp,99
   12040:	dd000f04 	addi	r20,sp,60
   12044:	d88018c5 	stb	r2,99(sp)
   12048:	d9814115 	stw	r6,1284(sp)
   1204c:	003cc506 	br	11364 <___vfprintf_internal_r+0xa6c>
   12050:	dc400d17 	ldw	r17,52(sp)
   12054:	07000174 	movhi	fp,5
   12058:	e7203484 	addi	fp,fp,-32558
   1205c:	003bc706 	br	10f7c <___vfprintf_internal_r+0x684>
   12060:	d9414c17 	ldw	r5,1328(sp)
   12064:	2880040c 	andi	r2,r5,16
   12068:	10007c26 	beq	r2,zero,1225c <___vfprintf_internal_r+0x1964>
   1206c:	38800017 	ldw	r2,0(r7)
   12070:	39c00104 	addi	r7,r7,4
   12074:	d9c14015 	stw	r7,1280(sp)
   12078:	d9814b17 	ldw	r6,1324(sp)
   1207c:	d9c14017 	ldw	r7,1280(sp)
   12080:	11800015 	stw	r6,0(r2)
   12084:	003a7806 	br	10a68 <___vfprintf_internal_r+0x170>
   12088:	d9014f17 	ldw	r4,1340(sp)
   1208c:	b00b883a 	mov	r5,r22
   12090:	d9800c04 	addi	r6,sp,48
   12094:	00108a00 	call	108a0 <__sprint_r>
   12098:	103bcf1e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   1209c:	dc800e17 	ldw	r18,56(sp)
   120a0:	dc400d17 	ldw	r17,52(sp)
   120a4:	d8c01904 	addi	r3,sp,100
   120a8:	d9014717 	ldw	r4,1308(sp)
   120ac:	d9414117 	ldw	r5,1284(sp)
   120b0:	8c400044 	addi	r17,r17,1
   120b4:	9125883a 	add	r18,r18,r4
   120b8:	008001c4 	movi	r2,7
   120bc:	19400015 	stw	r5,0(r3)
   120c0:	19000115 	stw	r4,4(r3)
   120c4:	dc800e15 	stw	r18,56(sp)
   120c8:	dc400d15 	stw	r17,52(sp)
   120cc:	147cee16 	blt	r2,r17,11488 <___vfprintf_internal_r+0xb90>
   120d0:	18c00204 	addi	r3,r3,8
   120d4:	003b8606 	br	10ef0 <___vfprintf_internal_r+0x5f8>
   120d8:	38c00017 	ldw	r3,0(r7)
   120dc:	39000204 	addi	r4,r7,8
   120e0:	d9014015 	stw	r4,1280(sp)
   120e4:	d8c14215 	stw	r3,1288(sp)
   120e8:	39c00117 	ldw	r7,4(r7)
   120ec:	d9c14315 	stw	r7,1292(sp)
   120f0:	003e2006 	br	11974 <___vfprintf_internal_r+0x107c>
   120f4:	0005883a 	mov	r2,zero
   120f8:	1409c83a 	sub	r4,r2,r16
   120fc:	1105803a 	cmpltu	r2,r2,r4
   12100:	044bc83a 	sub	r5,zero,r17
   12104:	2885c83a 	sub	r2,r5,r2
   12108:	2021883a 	mov	r16,r4
   1210c:	1023883a 	mov	r17,r2
   12110:	01000044 	movi	r4,1
   12114:	00800b44 	movi	r2,45
   12118:	d8800405 	stb	r2,16(sp)
   1211c:	003c8406 	br	11330 <___vfprintf_internal_r+0xa38>
   12120:	d9014f17 	ldw	r4,1340(sp)
   12124:	b00b883a 	mov	r5,r22
   12128:	d9800c04 	addi	r6,sp,48
   1212c:	00108a00 	call	108a0 <__sprint_r>
   12130:	103ba91e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   12134:	dc800e17 	ldw	r18,56(sp)
   12138:	dc400d17 	ldw	r17,52(sp)
   1213c:	d9000517 	ldw	r4,20(sp)
   12140:	d9401904 	addi	r5,sp,100
   12144:	003da706 	br	117e4 <___vfprintf_internal_r+0xeec>
   12148:	d9014f17 	ldw	r4,1340(sp)
   1214c:	b00b883a 	mov	r5,r22
   12150:	d9800c04 	addi	r6,sp,48
   12154:	00108a00 	call	108a0 <__sprint_r>
   12158:	103b9f1e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   1215c:	dc800e17 	ldw	r18,56(sp)
   12160:	dc400d17 	ldw	r17,52(sp)
   12164:	d9000517 	ldw	r4,20(sp)
   12168:	d8c01904 	addi	r3,sp,100
   1216c:	003d9106 	br	117b4 <___vfprintf_internal_r+0xebc>
   12170:	07000174 	movhi	fp,5
   12174:	e7203084 	addi	fp,fp,-32574
   12178:	9425883a 	add	r18,r18,r16
   1217c:	8c400044 	addi	r17,r17,1
   12180:	008001c4 	movi	r2,7
   12184:	1f000015 	stw	fp,0(r3)
   12188:	1c000115 	stw	r16,4(r3)
   1218c:	dc800e15 	stw	r18,56(sp)
   12190:	dc400d15 	stw	r17,52(sp)
   12194:	147fbc16 	blt	r2,r17,12088 <___vfprintf_internal_r+0x1790>
   12198:	18c00204 	addi	r3,r3,8
   1219c:	003fc206 	br	120a8 <___vfprintf_internal_r+0x17b0>
   121a0:	d9014f17 	ldw	r4,1340(sp)
   121a4:	b00b883a 	mov	r5,r22
   121a8:	d9800c04 	addi	r6,sp,48
   121ac:	00108a00 	call	108a0 <__sprint_r>
   121b0:	103b891e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   121b4:	dc800e17 	ldw	r18,56(sp)
   121b8:	d9000517 	ldw	r4,20(sp)
   121bc:	d8c01904 	addi	r3,sp,100
   121c0:	003d0206 	br	115cc <___vfprintf_internal_r+0xcd4>
   121c4:	07000174 	movhi	fp,5
   121c8:	e7203084 	addi	fp,fp,-32574
   121cc:	003be406 	br	11160 <___vfprintf_internal_r+0x868>
   121d0:	00800174 	movhi	r2,5
   121d4:	10a01f04 	addi	r2,r2,-32644
   121d8:	d8814115 	stw	r2,1284(sp)
   121dc:	003df506 	br	119b4 <___vfprintf_internal_r+0x10bc>
   121e0:	d9014217 	ldw	r4,1288(sp)
   121e4:	d9414317 	ldw	r5,1292(sp)
   121e8:	00172d80 	call	172d8 <__isnand>
   121ec:	10003926 	beq	r2,zero,122d4 <___vfprintf_internal_r+0x19dc>
   121f0:	d9414d17 	ldw	r5,1332(sp)
   121f4:	008011c4 	movi	r2,71
   121f8:	1140ce16 	blt	r2,r5,12534 <___vfprintf_internal_r+0x1c3c>
   121fc:	01800174 	movhi	r6,5
   12200:	31a02004 	addi	r6,r6,-32640
   12204:	d9814115 	stw	r6,1284(sp)
   12208:	003dea06 	br	119b4 <___vfprintf_internal_r+0x10bc>
   1220c:	d9014c17 	ldw	r4,1328(sp)
   12210:	bdc00044 	addi	r23,r23,1
   12214:	b8c00007 	ldb	r3,0(r23)
   12218:	21000814 	ori	r4,r4,32
   1221c:	d9014c15 	stw	r4,1328(sp)
   12220:	003a3406 	br	10af4 <___vfprintf_internal_r+0x1fc>
   12224:	dcc14515 	stw	r19,1300(sp)
   12228:	98011016 	blt	r19,zero,1266c <___vfprintf_internal_r+0x1d74>
   1222c:	980f883a 	mov	r7,r19
   12230:	d8014615 	stw	zero,1304(sp)
   12234:	003c5206 	br	11380 <___vfprintf_internal_r+0xa88>
   12238:	d9014f17 	ldw	r4,1340(sp)
   1223c:	b00b883a 	mov	r5,r22
   12240:	d9800c04 	addi	r6,sp,48
   12244:	00108a00 	call	108a0 <__sprint_r>
   12248:	103b631e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   1224c:	dc800e17 	ldw	r18,56(sp)
   12250:	d9000517 	ldw	r4,20(sp)
   12254:	d8c01904 	addi	r3,sp,100
   12258:	003f2e06 	br	11f14 <___vfprintf_internal_r+0x161c>
   1225c:	d8c14c17 	ldw	r3,1328(sp)
   12260:	1880100c 	andi	r2,r3,64
   12264:	1000a026 	beq	r2,zero,124e8 <___vfprintf_internal_r+0x1bf0>
   12268:	38800017 	ldw	r2,0(r7)
   1226c:	39c00104 	addi	r7,r7,4
   12270:	d9c14015 	stw	r7,1280(sp)
   12274:	d9014b17 	ldw	r4,1324(sp)
   12278:	d9c14017 	ldw	r7,1280(sp)
   1227c:	1100000d 	sth	r4,0(r2)
   12280:	0039f906 	br	10a68 <___vfprintf_internal_r+0x170>
   12284:	d9014f17 	ldw	r4,1340(sp)
   12288:	b00b883a 	mov	r5,r22
   1228c:	d9800c04 	addi	r6,sp,48
   12290:	00108a00 	call	108a0 <__sprint_r>
   12294:	103b501e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   12298:	dc800e17 	ldw	r18,56(sp)
   1229c:	dc400d17 	ldw	r17,52(sp)
   122a0:	d9000517 	ldw	r4,20(sp)
   122a4:	d8c01904 	addi	r3,sp,100
   122a8:	003f2d06 	br	11f60 <___vfprintf_internal_r+0x1668>
   122ac:	00800184 	movi	r2,6
   122b0:	14c09a36 	bltu	r2,r19,1251c <___vfprintf_internal_r+0x1c24>
   122b4:	dcc14515 	stw	r19,1300(sp)
   122b8:	9800010e 	bge	r19,zero,122c0 <___vfprintf_internal_r+0x19c8>
   122bc:	d8014515 	stw	zero,1300(sp)
   122c0:	00800174 	movhi	r2,5
   122c4:	10a02204 	addi	r2,r2,-32632
   122c8:	980f883a 	mov	r7,r19
   122cc:	d8814115 	stw	r2,1284(sp)
   122d0:	003a7806 	br	10cb4 <___vfprintf_internal_r+0x3bc>
   122d4:	00bfffc4 	movi	r2,-1
   122d8:	9880e226 	beq	r19,r2,12664 <___vfprintf_internal_r+0x1d6c>
   122dc:	d9414d17 	ldw	r5,1332(sp)
   122e0:	008019c4 	movi	r2,103
   122e4:	2880dc26 	beq	r5,r2,12658 <___vfprintf_internal_r+0x1d60>
   122e8:	008011c4 	movi	r2,71
   122ec:	2880da26 	beq	r5,r2,12658 <___vfprintf_internal_r+0x1d60>
   122f0:	d9414c17 	ldw	r5,1328(sp)
   122f4:	d9014317 	ldw	r4,1292(sp)
   122f8:	d9814217 	ldw	r6,1288(sp)
   122fc:	29404014 	ori	r5,r5,256
   12300:	d9414c15 	stw	r5,1328(sp)
   12304:	2000cc16 	blt	r4,zero,12638 <___vfprintf_internal_r+0x1d40>
   12308:	3021883a 	mov	r16,r6
   1230c:	2023883a 	mov	r17,r4
   12310:	0039883a 	mov	fp,zero
   12314:	d9414d17 	ldw	r5,1332(sp)
   12318:	00801984 	movi	r2,102
   1231c:	2880b726 	beq	r5,r2,125fc <___vfprintf_internal_r+0x1d04>
   12320:	00801184 	movi	r2,70
   12324:	2880b526 	beq	r5,r2,125fc <___vfprintf_internal_r+0x1d04>
   12328:	00801944 	movi	r2,101
   1232c:	2880c826 	beq	r5,r2,12650 <___vfprintf_internal_r+0x1d58>
   12330:	00801144 	movi	r2,69
   12334:	2880c626 	beq	r5,r2,12650 <___vfprintf_internal_r+0x1d58>
   12338:	9829883a 	mov	r20,r19
   1233c:	d9014f17 	ldw	r4,1340(sp)
   12340:	d8800504 	addi	r2,sp,20
   12344:	880d883a 	mov	r6,r17
   12348:	d8800115 	stw	r2,4(sp)
   1234c:	d8c00604 	addi	r3,sp,24
   12350:	d8800704 	addi	r2,sp,28
   12354:	800b883a 	mov	r5,r16
   12358:	01c00084 	movi	r7,2
   1235c:	d8c00215 	stw	r3,8(sp)
   12360:	d8800315 	stw	r2,12(sp)
   12364:	dd000015 	stw	r20,0(sp)
   12368:	0012b1c0 	call	12b1c <_dtoa_r>
   1236c:	d9814d17 	ldw	r6,1332(sp)
   12370:	d8814115 	stw	r2,1284(sp)
   12374:	008019c4 	movi	r2,103
   12378:	30809526 	beq	r6,r2,125d0 <___vfprintf_internal_r+0x1cd8>
   1237c:	d8c14d17 	ldw	r3,1332(sp)
   12380:	008011c4 	movi	r2,71
   12384:	18809226 	beq	r3,r2,125d0 <___vfprintf_internal_r+0x1cd8>
   12388:	d9414117 	ldw	r5,1284(sp)
   1238c:	d9814d17 	ldw	r6,1332(sp)
   12390:	00801984 	movi	r2,102
   12394:	2d25883a 	add	r18,r5,r20
   12398:	30808626 	beq	r6,r2,125b4 <___vfprintf_internal_r+0x1cbc>
   1239c:	00801184 	movi	r2,70
   123a0:	30808426 	beq	r6,r2,125b4 <___vfprintf_internal_r+0x1cbc>
   123a4:	000d883a 	mov	r6,zero
   123a8:	000f883a 	mov	r7,zero
   123ac:	880b883a 	mov	r5,r17
   123b0:	8009883a 	mov	r4,r16
   123b4:	00190c00 	call	190c0 <__eqdf2>
   123b8:	1000751e 	bne	r2,zero,12590 <___vfprintf_internal_r+0x1c98>
   123bc:	9005883a 	mov	r2,r18
   123c0:	dc800715 	stw	r18,28(sp)
   123c4:	d9014117 	ldw	r4,1284(sp)
   123c8:	d9414d17 	ldw	r5,1332(sp)
   123cc:	00c019c4 	movi	r3,103
   123d0:	1125c83a 	sub	r18,r2,r4
   123d4:	28c06826 	beq	r5,r3,12578 <___vfprintf_internal_r+0x1c80>
   123d8:	008011c4 	movi	r2,71
   123dc:	28806626 	beq	r5,r2,12578 <___vfprintf_internal_r+0x1c80>
   123e0:	d9000517 	ldw	r4,20(sp)
   123e4:	d8c14d17 	ldw	r3,1332(sp)
   123e8:	00801944 	movi	r2,101
   123ec:	10c05516 	blt	r2,r3,12544 <___vfprintf_internal_r+0x1c4c>
   123f0:	213fffc4 	addi	r4,r4,-1
   123f4:	d9000515 	stw	r4,20(sp)
   123f8:	d8c00805 	stb	r3,32(sp)
   123fc:	2021883a 	mov	r16,r4
   12400:	2000c116 	blt	r4,zero,12708 <___vfprintf_internal_r+0x1e10>
   12404:	00800ac4 	movi	r2,43
   12408:	d8800845 	stb	r2,33(sp)
   1240c:	00800244 	movi	r2,9
   12410:	1400af0e 	bge	r2,r16,126d0 <___vfprintf_internal_r+0x1dd8>
   12414:	1027883a 	mov	r19,r2
   12418:	dc400b84 	addi	r17,sp,46
   1241c:	8009883a 	mov	r4,r16
   12420:	01400284 	movi	r5,10
   12424:	00197a80 	call	197a8 <__modsi3>
   12428:	10800c04 	addi	r2,r2,48
   1242c:	8c7fffc4 	addi	r17,r17,-1
   12430:	8009883a 	mov	r4,r16
   12434:	01400284 	movi	r5,10
   12438:	88800005 	stb	r2,0(r17)
   1243c:	00197480 	call	19748 <__divsi3>
   12440:	1021883a 	mov	r16,r2
   12444:	98bff516 	blt	r19,r2,1241c <___vfprintf_internal_r+0x1b24>
   12448:	10c00c04 	addi	r3,r2,48
   1244c:	d88009c4 	addi	r2,sp,39
   12450:	108001c4 	addi	r2,r2,7
   12454:	897fffc4 	addi	r5,r17,-1
   12458:	88ffffc5 	stb	r3,-1(r17)
   1245c:	2880a72e 	bgeu	r5,r2,126fc <___vfprintf_internal_r+0x1e04>
   12460:	1009883a 	mov	r4,r2
   12464:	d9800804 	addi	r6,sp,32
   12468:	d8c00884 	addi	r3,sp,34
   1246c:	28800003 	ldbu	r2,0(r5)
   12470:	29400044 	addi	r5,r5,1
   12474:	18800005 	stb	r2,0(r3)
   12478:	18c00044 	addi	r3,r3,1
   1247c:	293ffb36 	bltu	r5,r4,1246c <___vfprintf_internal_r+0x1b74>
   12480:	1987c83a 	sub	r3,r3,r6
   12484:	00800044 	movi	r2,1
   12488:	d8c14815 	stw	r3,1312(sp)
   1248c:	90cf883a 	add	r7,r18,r3
   12490:	1480960e 	bge	r2,r18,126ec <___vfprintf_internal_r+0x1df4>
   12494:	39c00044 	addi	r7,r7,1
   12498:	d9c14515 	stw	r7,1300(sp)
   1249c:	38003416 	blt	r7,zero,12570 <___vfprintf_internal_r+0x1c78>
   124a0:	e0803fcc 	andi	r2,fp,255
   124a4:	1080201c 	xori	r2,r2,128
   124a8:	10bfe004 	addi	r2,r2,-128
   124ac:	10004e26 	beq	r2,zero,125e8 <___vfprintf_internal_r+0x1cf0>
   124b0:	00800b44 	movi	r2,45
   124b4:	dc814715 	stw	r18,1308(sp)
   124b8:	d8014615 	stw	zero,1304(sp)
   124bc:	d8800405 	stb	r2,16(sp)
   124c0:	003bb106 	br	11388 <___vfprintf_internal_r+0xa90>
   124c4:	00800b44 	movi	r2,45
   124c8:	d8800405 	stb	r2,16(sp)
   124cc:	003d3306 	br	1199c <___vfprintf_internal_r+0x10a4>
   124d0:	d9014f17 	ldw	r4,1340(sp)
   124d4:	b00b883a 	mov	r5,r22
   124d8:	d9800c04 	addi	r6,sp,48
   124dc:	00108a00 	call	108a0 <__sprint_r>
   124e0:	103abd1e 	bne	r2,zero,10fd8 <___vfprintf_internal_r+0x6e0>
   124e4:	003abb06 	br	10fd4 <___vfprintf_internal_r+0x6dc>
   124e8:	38800017 	ldw	r2,0(r7)
   124ec:	39c00104 	addi	r7,r7,4
   124f0:	d9c14015 	stw	r7,1280(sp)
   124f4:	d9414b17 	ldw	r5,1324(sp)
   124f8:	d9c14017 	ldw	r7,1280(sp)
   124fc:	11400015 	stw	r5,0(r2)
   12500:	00395906 	br	10a68 <___vfprintf_internal_r+0x170>
   12504:	980f883a 	mov	r7,r19
   12508:	dcc14515 	stw	r19,1300(sp)
   1250c:	d8014615 	stw	zero,1304(sp)
   12510:	003b9b06 	br	11380 <___vfprintf_internal_r+0xa88>
   12514:	0027883a 	mov	r19,zero
   12518:	00397806 	br	10afc <___vfprintf_internal_r+0x204>
   1251c:	00c00174 	movhi	r3,5
   12520:	18e02204 	addi	r3,r3,-32632
   12524:	100f883a 	mov	r7,r2
   12528:	d8814515 	stw	r2,1300(sp)
   1252c:	d8c14115 	stw	r3,1284(sp)
   12530:	0039e006 	br	10cb4 <___vfprintf_internal_r+0x3bc>
   12534:	00800174 	movhi	r2,5
   12538:	10a02104 	addi	r2,r2,-32636
   1253c:	d8814115 	stw	r2,1284(sp)
   12540:	003d1c06 	br	119b4 <___vfprintf_internal_r+0x10bc>
   12544:	d9414d17 	ldw	r5,1332(sp)
   12548:	00801984 	movi	r2,102
   1254c:	28804926 	beq	r5,r2,12674 <___vfprintf_internal_r+0x1d7c>
   12550:	200f883a 	mov	r7,r4
   12554:	24805716 	blt	r4,r18,126b4 <___vfprintf_internal_r+0x1dbc>
   12558:	d9414c17 	ldw	r5,1328(sp)
   1255c:	2880004c 	andi	r2,r5,1
   12560:	10000126 	beq	r2,zero,12568 <___vfprintf_internal_r+0x1c70>
   12564:	21c00044 	addi	r7,r4,1
   12568:	d9c14515 	stw	r7,1300(sp)
   1256c:	383fcc0e 	bge	r7,zero,124a0 <___vfprintf_internal_r+0x1ba8>
   12570:	d8014515 	stw	zero,1300(sp)
   12574:	003fca06 	br	124a0 <___vfprintf_internal_r+0x1ba8>
   12578:	d9000517 	ldw	r4,20(sp)
   1257c:	00bfff04 	movi	r2,-4
   12580:	1100480e 	bge	r2,r4,126a4 <___vfprintf_internal_r+0x1dac>
   12584:	99004716 	blt	r19,r4,126a4 <___vfprintf_internal_r+0x1dac>
   12588:	d8c14d15 	stw	r3,1332(sp)
   1258c:	003ff006 	br	12550 <___vfprintf_internal_r+0x1c58>
   12590:	d8800717 	ldw	r2,28(sp)
   12594:	14bf8b2e 	bgeu	r2,r18,123c4 <___vfprintf_internal_r+0x1acc>
   12598:	9007883a 	mov	r3,r18
   1259c:	01000c04 	movi	r4,48
   125a0:	11000005 	stb	r4,0(r2)
   125a4:	10800044 	addi	r2,r2,1
   125a8:	d8800715 	stw	r2,28(sp)
   125ac:	18bffc1e 	bne	r3,r2,125a0 <___vfprintf_internal_r+0x1ca8>
   125b0:	003f8406 	br	123c4 <___vfprintf_internal_r+0x1acc>
   125b4:	d8814117 	ldw	r2,1284(sp)
   125b8:	10c00007 	ldb	r3,0(r2)
   125bc:	00800c04 	movi	r2,48
   125c0:	18805b26 	beq	r3,r2,12730 <___vfprintf_internal_r+0x1e38>
   125c4:	d9000517 	ldw	r4,20(sp)
   125c8:	9125883a 	add	r18,r18,r4
   125cc:	003f7506 	br	123a4 <___vfprintf_internal_r+0x1aac>
   125d0:	d9014c17 	ldw	r4,1328(sp)
   125d4:	2080004c 	andi	r2,r4,1
   125d8:	1005003a 	cmpeq	r2,r2,zero
   125dc:	103f6a26 	beq	r2,zero,12388 <___vfprintf_internal_r+0x1a90>
   125e0:	d8800717 	ldw	r2,28(sp)
   125e4:	003f7706 	br	123c4 <___vfprintf_internal_r+0x1acc>
   125e8:	d9c14515 	stw	r7,1300(sp)
   125ec:	38004d16 	blt	r7,zero,12724 <___vfprintf_internal_r+0x1e2c>
   125f0:	dc814715 	stw	r18,1308(sp)
   125f4:	d8014615 	stw	zero,1304(sp)
   125f8:	003b6106 	br	11380 <___vfprintf_internal_r+0xa88>
   125fc:	d9014f17 	ldw	r4,1340(sp)
   12600:	d8800504 	addi	r2,sp,20
   12604:	d8800115 	stw	r2,4(sp)
   12608:	d8c00604 	addi	r3,sp,24
   1260c:	d8800704 	addi	r2,sp,28
   12610:	800b883a 	mov	r5,r16
   12614:	880d883a 	mov	r6,r17
   12618:	01c000c4 	movi	r7,3
   1261c:	d8c00215 	stw	r3,8(sp)
   12620:	d8800315 	stw	r2,12(sp)
   12624:	dcc00015 	stw	r19,0(sp)
   12628:	9829883a 	mov	r20,r19
   1262c:	0012b1c0 	call	12b1c <_dtoa_r>
   12630:	d8814115 	stw	r2,1284(sp)
   12634:	003f5106 	br	1237c <___vfprintf_internal_r+0x1a84>
   12638:	d8c14217 	ldw	r3,1288(sp)
   1263c:	d9014317 	ldw	r4,1292(sp)
   12640:	07000b44 	movi	fp,45
   12644:	1821883a 	mov	r16,r3
   12648:	2460003c 	xorhi	r17,r4,32768
   1264c:	003f3106 	br	12314 <___vfprintf_internal_r+0x1a1c>
   12650:	9d000044 	addi	r20,r19,1
   12654:	003f3906 	br	1233c <___vfprintf_internal_r+0x1a44>
   12658:	983f251e 	bne	r19,zero,122f0 <___vfprintf_internal_r+0x19f8>
   1265c:	04c00044 	movi	r19,1
   12660:	003f2306 	br	122f0 <___vfprintf_internal_r+0x19f8>
   12664:	04c00184 	movi	r19,6
   12668:	003f2106 	br	122f0 <___vfprintf_internal_r+0x19f8>
   1266c:	d8014515 	stw	zero,1300(sp)
   12670:	003eee06 	br	1222c <___vfprintf_internal_r+0x1934>
   12674:	200f883a 	mov	r7,r4
   12678:	0100370e 	bge	zero,r4,12758 <___vfprintf_internal_r+0x1e60>
   1267c:	9800031e 	bne	r19,zero,1268c <___vfprintf_internal_r+0x1d94>
   12680:	d9814c17 	ldw	r6,1328(sp)
   12684:	3080004c 	andi	r2,r6,1
   12688:	103fb726 	beq	r2,zero,12568 <___vfprintf_internal_r+0x1c70>
   1268c:	20800044 	addi	r2,r4,1
   12690:	98a7883a 	add	r19,r19,r2
   12694:	dcc14515 	stw	r19,1300(sp)
   12698:	980f883a 	mov	r7,r19
   1269c:	983f800e 	bge	r19,zero,124a0 <___vfprintf_internal_r+0x1ba8>
   126a0:	003fb306 	br	12570 <___vfprintf_internal_r+0x1c78>
   126a4:	d9814d17 	ldw	r6,1332(sp)
   126a8:	31bfff84 	addi	r6,r6,-2
   126ac:	d9814d15 	stw	r6,1332(sp)
   126b0:	003f4c06 	br	123e4 <___vfprintf_internal_r+0x1aec>
   126b4:	0100180e 	bge	zero,r4,12718 <___vfprintf_internal_r+0x1e20>
   126b8:	00800044 	movi	r2,1
   126bc:	1485883a 	add	r2,r2,r18
   126c0:	d8814515 	stw	r2,1300(sp)
   126c4:	100f883a 	mov	r7,r2
   126c8:	103f750e 	bge	r2,zero,124a0 <___vfprintf_internal_r+0x1ba8>
   126cc:	003fa806 	br	12570 <___vfprintf_internal_r+0x1c78>
   126d0:	80c00c04 	addi	r3,r16,48
   126d4:	00800c04 	movi	r2,48
   126d8:	d8c008c5 	stb	r3,35(sp)
   126dc:	d9800804 	addi	r6,sp,32
   126e0:	d8c00904 	addi	r3,sp,36
   126e4:	d8800885 	stb	r2,34(sp)
   126e8:	003f6506 	br	12480 <___vfprintf_internal_r+0x1b88>
   126ec:	d9014c17 	ldw	r4,1328(sp)
   126f0:	2084703a 	and	r2,r4,r2
   126f4:	103f9c26 	beq	r2,zero,12568 <___vfprintf_internal_r+0x1c70>
   126f8:	003f6606 	br	12494 <___vfprintf_internal_r+0x1b9c>
   126fc:	d9800804 	addi	r6,sp,32
   12700:	d8c00884 	addi	r3,sp,34
   12704:	003f5e06 	br	12480 <___vfprintf_internal_r+0x1b88>
   12708:	00800b44 	movi	r2,45
   1270c:	0121c83a 	sub	r16,zero,r4
   12710:	d8800845 	stb	r2,33(sp)
   12714:	003f3d06 	br	1240c <___vfprintf_internal_r+0x1b14>
   12718:	00800084 	movi	r2,2
   1271c:	1105c83a 	sub	r2,r2,r4
   12720:	003fe606 	br	126bc <___vfprintf_internal_r+0x1dc4>
   12724:	d8014515 	stw	zero,1300(sp)
   12728:	dc814715 	stw	r18,1308(sp)
   1272c:	003fb106 	br	125f4 <___vfprintf_internal_r+0x1cfc>
   12730:	000d883a 	mov	r6,zero
   12734:	000f883a 	mov	r7,zero
   12738:	8009883a 	mov	r4,r16
   1273c:	880b883a 	mov	r5,r17
   12740:	00191480 	call	19148 <__nedf2>
   12744:	103f9f26 	beq	r2,zero,125c4 <___vfprintf_internal_r+0x1ccc>
   12748:	00800044 	movi	r2,1
   1274c:	1509c83a 	sub	r4,r2,r20
   12750:	d9000515 	stw	r4,20(sp)
   12754:	003f9b06 	br	125c4 <___vfprintf_internal_r+0x1ccc>
   12758:	98000d1e 	bne	r19,zero,12790 <___vfprintf_internal_r+0x1e98>
   1275c:	d8c14c17 	ldw	r3,1328(sp)
   12760:	1880004c 	andi	r2,r3,1
   12764:	10000a1e 	bne	r2,zero,12790 <___vfprintf_internal_r+0x1e98>
   12768:	01000044 	movi	r4,1
   1276c:	200f883a 	mov	r7,r4
   12770:	d9014515 	stw	r4,1300(sp)
   12774:	003f4a06 	br	124a0 <___vfprintf_internal_r+0x1ba8>
   12778:	3cc00017 	ldw	r19,0(r7)
   1277c:	39c00104 	addi	r7,r7,4
   12780:	983d0e0e 	bge	r19,zero,11bbc <___vfprintf_internal_r+0x12c4>
   12784:	b8c00007 	ldb	r3,0(r23)
   12788:	04ffffc4 	movi	r19,-1
   1278c:	0038d906 	br	10af4 <___vfprintf_internal_r+0x1fc>
   12790:	9cc00084 	addi	r19,r19,2
   12794:	dcc14515 	stw	r19,1300(sp)
   12798:	980f883a 	mov	r7,r19
   1279c:	983f400e 	bge	r19,zero,124a0 <___vfprintf_internal_r+0x1ba8>
   127a0:	003f7306 	br	12570 <___vfprintf_internal_r+0x1c78>

000127a4 <__vfprintf_internal>:
   127a4:	00800174 	movhi	r2,5
   127a8:	10a77004 	addi	r2,r2,-25152
   127ac:	2013883a 	mov	r9,r4
   127b0:	11000017 	ldw	r4,0(r2)
   127b4:	2805883a 	mov	r2,r5
   127b8:	300f883a 	mov	r7,r6
   127bc:	480b883a 	mov	r5,r9
   127c0:	100d883a 	mov	r6,r2
   127c4:	00108f81 	jmpi	108f8 <___vfprintf_internal_r>

000127c8 <__swsetup_r>:
   127c8:	00800174 	movhi	r2,5
   127cc:	10a77004 	addi	r2,r2,-25152
   127d0:	10c00017 	ldw	r3,0(r2)
   127d4:	defffd04 	addi	sp,sp,-12
   127d8:	dc400115 	stw	r17,4(sp)
   127dc:	dc000015 	stw	r16,0(sp)
   127e0:	dfc00215 	stw	ra,8(sp)
   127e4:	2023883a 	mov	r17,r4
   127e8:	2821883a 	mov	r16,r5
   127ec:	18000226 	beq	r3,zero,127f8 <__swsetup_r+0x30>
   127f0:	18800e17 	ldw	r2,56(r3)
   127f4:	10001f26 	beq	r2,zero,12874 <__swsetup_r+0xac>
   127f8:	8100030b 	ldhu	r4,12(r16)
   127fc:	2080020c 	andi	r2,r4,8
   12800:	10002826 	beq	r2,zero,128a4 <__swsetup_r+0xdc>
   12804:	81400417 	ldw	r5,16(r16)
   12808:	28001d26 	beq	r5,zero,12880 <__swsetup_r+0xb8>
   1280c:	2080004c 	andi	r2,r4,1
   12810:	1005003a 	cmpeq	r2,r2,zero
   12814:	10000b26 	beq	r2,zero,12844 <__swsetup_r+0x7c>
   12818:	2080008c 	andi	r2,r4,2
   1281c:	10001226 	beq	r2,zero,12868 <__swsetup_r+0xa0>
   12820:	0005883a 	mov	r2,zero
   12824:	80800215 	stw	r2,8(r16)
   12828:	28000b26 	beq	r5,zero,12858 <__swsetup_r+0x90>
   1282c:	0005883a 	mov	r2,zero
   12830:	dfc00217 	ldw	ra,8(sp)
   12834:	dc400117 	ldw	r17,4(sp)
   12838:	dc000017 	ldw	r16,0(sp)
   1283c:	dec00304 	addi	sp,sp,12
   12840:	f800283a 	ret
   12844:	80800517 	ldw	r2,20(r16)
   12848:	80000215 	stw	zero,8(r16)
   1284c:	0085c83a 	sub	r2,zero,r2
   12850:	80800615 	stw	r2,24(r16)
   12854:	283ff51e 	bne	r5,zero,1282c <__swsetup_r+0x64>
   12858:	2080200c 	andi	r2,r4,128
   1285c:	103ff326 	beq	r2,zero,1282c <__swsetup_r+0x64>
   12860:	00bfffc4 	movi	r2,-1
   12864:	003ff206 	br	12830 <__swsetup_r+0x68>
   12868:	80800517 	ldw	r2,20(r16)
   1286c:	80800215 	stw	r2,8(r16)
   12870:	003fed06 	br	12828 <__swsetup_r+0x60>
   12874:	1809883a 	mov	r4,r3
   12878:	00143680 	call	14368 <__sinit>
   1287c:	003fde06 	br	127f8 <__swsetup_r+0x30>
   12880:	20c0a00c 	andi	r3,r4,640
   12884:	00808004 	movi	r2,512
   12888:	18bfe026 	beq	r3,r2,1280c <__swsetup_r+0x44>
   1288c:	8809883a 	mov	r4,r17
   12890:	800b883a 	mov	r5,r16
   12894:	00150e00 	call	150e0 <__smakebuf_r>
   12898:	8100030b 	ldhu	r4,12(r16)
   1289c:	81400417 	ldw	r5,16(r16)
   128a0:	003fda06 	br	1280c <__swsetup_r+0x44>
   128a4:	2080040c 	andi	r2,r4,16
   128a8:	103fed26 	beq	r2,zero,12860 <__swsetup_r+0x98>
   128ac:	2080010c 	andi	r2,r4,4
   128b0:	10001226 	beq	r2,zero,128fc <__swsetup_r+0x134>
   128b4:	81400c17 	ldw	r5,48(r16)
   128b8:	28000526 	beq	r5,zero,128d0 <__swsetup_r+0x108>
   128bc:	80801004 	addi	r2,r16,64
   128c0:	28800226 	beq	r5,r2,128cc <__swsetup_r+0x104>
   128c4:	8809883a 	mov	r4,r17
   128c8:	00146ec0 	call	146ec <_free_r>
   128cc:	80000c15 	stw	zero,48(r16)
   128d0:	8080030b 	ldhu	r2,12(r16)
   128d4:	81400417 	ldw	r5,16(r16)
   128d8:	80000115 	stw	zero,4(r16)
   128dc:	10bff6cc 	andi	r2,r2,65499
   128e0:	8080030d 	sth	r2,12(r16)
   128e4:	81400015 	stw	r5,0(r16)
   128e8:	8080030b 	ldhu	r2,12(r16)
   128ec:	10800214 	ori	r2,r2,8
   128f0:	113fffcc 	andi	r4,r2,65535
   128f4:	8080030d 	sth	r2,12(r16)
   128f8:	003fc306 	br	12808 <__swsetup_r+0x40>
   128fc:	81400417 	ldw	r5,16(r16)
   12900:	003ff906 	br	128e8 <__swsetup_r+0x120>

00012904 <quorem>:
   12904:	28c00417 	ldw	r3,16(r5)
   12908:	20800417 	ldw	r2,16(r4)
   1290c:	defff604 	addi	sp,sp,-40
   12910:	ddc00715 	stw	r23,28(sp)
   12914:	dd400515 	stw	r21,20(sp)
   12918:	dfc00915 	stw	ra,36(sp)
   1291c:	df000815 	stw	fp,32(sp)
   12920:	dd800615 	stw	r22,24(sp)
   12924:	dd000415 	stw	r20,16(sp)
   12928:	dcc00315 	stw	r19,12(sp)
   1292c:	dc800215 	stw	r18,8(sp)
   12930:	dc400115 	stw	r17,4(sp)
   12934:	dc000015 	stw	r16,0(sp)
   12938:	202f883a 	mov	r23,r4
   1293c:	282b883a 	mov	r21,r5
   12940:	10c07416 	blt	r2,r3,12b14 <quorem+0x210>
   12944:	1c7fffc4 	addi	r17,r3,-1
   12948:	8c45883a 	add	r2,r17,r17
   1294c:	1085883a 	add	r2,r2,r2
   12950:	2c000504 	addi	r16,r5,20
   12954:	24c00504 	addi	r19,r4,20
   12958:	14ed883a 	add	r22,r2,r19
   1295c:	80a5883a 	add	r18,r16,r2
   12960:	b7000017 	ldw	fp,0(r22)
   12964:	91400017 	ldw	r5,0(r18)
   12968:	e009883a 	mov	r4,fp
   1296c:	29400044 	addi	r5,r5,1
   12970:	00198080 	call	19808 <__udivsi3>
   12974:	1029883a 	mov	r20,r2
   12978:	10003c1e 	bne	r2,zero,12a6c <quorem+0x168>
   1297c:	a80b883a 	mov	r5,r21
   12980:	b809883a 	mov	r4,r23
   12984:	0015e0c0 	call	15e0c <__mcmp>
   12988:	10002b16 	blt	r2,zero,12a38 <quorem+0x134>
   1298c:	a5000044 	addi	r20,r20,1
   12990:	980f883a 	mov	r7,r19
   12994:	0011883a 	mov	r8,zero
   12998:	0009883a 	mov	r4,zero
   1299c:	81400017 	ldw	r5,0(r16)
   129a0:	38c00017 	ldw	r3,0(r7)
   129a4:	84000104 	addi	r16,r16,4
   129a8:	28bfffcc 	andi	r2,r5,65535
   129ac:	2085883a 	add	r2,r4,r2
   129b0:	11bfffcc 	andi	r6,r2,65535
   129b4:	193fffcc 	andi	r4,r3,65535
   129b8:	1004d43a 	srli	r2,r2,16
   129bc:	280ad43a 	srli	r5,r5,16
   129c0:	2189c83a 	sub	r4,r4,r6
   129c4:	2209883a 	add	r4,r4,r8
   129c8:	1806d43a 	srli	r3,r3,16
   129cc:	288b883a 	add	r5,r5,r2
   129d0:	200dd43a 	srai	r6,r4,16
   129d4:	28bfffcc 	andi	r2,r5,65535
   129d8:	1887c83a 	sub	r3,r3,r2
   129dc:	1987883a 	add	r3,r3,r6
   129e0:	3900000d 	sth	r4,0(r7)
   129e4:	38c0008d 	sth	r3,2(r7)
   129e8:	2808d43a 	srli	r4,r5,16
   129ec:	39c00104 	addi	r7,r7,4
   129f0:	1811d43a 	srai	r8,r3,16
   129f4:	943fe92e 	bgeu	r18,r16,1299c <quorem+0x98>
   129f8:	8c45883a 	add	r2,r17,r17
   129fc:	1085883a 	add	r2,r2,r2
   12a00:	9885883a 	add	r2,r19,r2
   12a04:	10c00017 	ldw	r3,0(r2)
   12a08:	18000b1e 	bne	r3,zero,12a38 <quorem+0x134>
   12a0c:	113fff04 	addi	r4,r2,-4
   12a10:	9900082e 	bgeu	r19,r4,12a34 <quorem+0x130>
   12a14:	10bfff17 	ldw	r2,-4(r2)
   12a18:	10000326 	beq	r2,zero,12a28 <quorem+0x124>
   12a1c:	00000506 	br	12a34 <quorem+0x130>
   12a20:	20800017 	ldw	r2,0(r4)
   12a24:	1000031e 	bne	r2,zero,12a34 <quorem+0x130>
   12a28:	213fff04 	addi	r4,r4,-4
   12a2c:	8c7fffc4 	addi	r17,r17,-1
   12a30:	993ffb36 	bltu	r19,r4,12a20 <quorem+0x11c>
   12a34:	bc400415 	stw	r17,16(r23)
   12a38:	a005883a 	mov	r2,r20
   12a3c:	dfc00917 	ldw	ra,36(sp)
   12a40:	df000817 	ldw	fp,32(sp)
   12a44:	ddc00717 	ldw	r23,28(sp)
   12a48:	dd800617 	ldw	r22,24(sp)
   12a4c:	dd400517 	ldw	r21,20(sp)
   12a50:	dd000417 	ldw	r20,16(sp)
   12a54:	dcc00317 	ldw	r19,12(sp)
   12a58:	dc800217 	ldw	r18,8(sp)
   12a5c:	dc400117 	ldw	r17,4(sp)
   12a60:	dc000017 	ldw	r16,0(sp)
   12a64:	dec00a04 	addi	sp,sp,40
   12a68:	f800283a 	ret
   12a6c:	980f883a 	mov	r7,r19
   12a70:	8011883a 	mov	r8,r16
   12a74:	0013883a 	mov	r9,zero
   12a78:	000d883a 	mov	r6,zero
   12a7c:	40c00017 	ldw	r3,0(r8)
   12a80:	39000017 	ldw	r4,0(r7)
   12a84:	42000104 	addi	r8,r8,4
   12a88:	18bfffcc 	andi	r2,r3,65535
   12a8c:	a085383a 	mul	r2,r20,r2
   12a90:	1806d43a 	srli	r3,r3,16
   12a94:	217fffcc 	andi	r5,r4,65535
   12a98:	3085883a 	add	r2,r6,r2
   12a9c:	11bfffcc 	andi	r6,r2,65535
   12aa0:	a0c7383a 	mul	r3,r20,r3
   12aa4:	1004d43a 	srli	r2,r2,16
   12aa8:	298bc83a 	sub	r5,r5,r6
   12aac:	2a4b883a 	add	r5,r5,r9
   12ab0:	2008d43a 	srli	r4,r4,16
   12ab4:	1887883a 	add	r3,r3,r2
   12ab8:	280dd43a 	srai	r6,r5,16
   12abc:	18bfffcc 	andi	r2,r3,65535
   12ac0:	2089c83a 	sub	r4,r4,r2
   12ac4:	2189883a 	add	r4,r4,r6
   12ac8:	3900008d 	sth	r4,2(r7)
   12acc:	3940000d 	sth	r5,0(r7)
   12ad0:	180cd43a 	srli	r6,r3,16
   12ad4:	39c00104 	addi	r7,r7,4
   12ad8:	2013d43a 	srai	r9,r4,16
   12adc:	923fe72e 	bgeu	r18,r8,12a7c <quorem+0x178>
   12ae0:	e03fa61e 	bne	fp,zero,1297c <quorem+0x78>
   12ae4:	b0ffff04 	addi	r3,r22,-4
   12ae8:	98c0082e 	bgeu	r19,r3,12b0c <quorem+0x208>
   12aec:	b0bfff17 	ldw	r2,-4(r22)
   12af0:	10000326 	beq	r2,zero,12b00 <quorem+0x1fc>
   12af4:	00000506 	br	12b0c <quorem+0x208>
   12af8:	18800017 	ldw	r2,0(r3)
   12afc:	1000031e 	bne	r2,zero,12b0c <quorem+0x208>
   12b00:	18ffff04 	addi	r3,r3,-4
   12b04:	8c7fffc4 	addi	r17,r17,-1
   12b08:	98fffb36 	bltu	r19,r3,12af8 <quorem+0x1f4>
   12b0c:	bc400415 	stw	r17,16(r23)
   12b10:	003f9a06 	br	1297c <quorem+0x78>
   12b14:	0005883a 	mov	r2,zero
   12b18:	003fc806 	br	12a3c <quorem+0x138>

00012b1c <_dtoa_r>:
   12b1c:	22001017 	ldw	r8,64(r4)
   12b20:	deffda04 	addi	sp,sp,-152
   12b24:	dd402115 	stw	r21,132(sp)
   12b28:	dd002015 	stw	r20,128(sp)
   12b2c:	dc801e15 	stw	r18,120(sp)
   12b30:	dc401d15 	stw	r17,116(sp)
   12b34:	dfc02515 	stw	ra,148(sp)
   12b38:	df002415 	stw	fp,144(sp)
   12b3c:	ddc02315 	stw	r23,140(sp)
   12b40:	dd802215 	stw	r22,136(sp)
   12b44:	dcc01f15 	stw	r19,124(sp)
   12b48:	dc001c15 	stw	r16,112(sp)
   12b4c:	d9001615 	stw	r4,88(sp)
   12b50:	3023883a 	mov	r17,r6
   12b54:	2829883a 	mov	r20,r5
   12b58:	d9c01715 	stw	r7,92(sp)
   12b5c:	dc802817 	ldw	r18,160(sp)
   12b60:	302b883a 	mov	r21,r6
   12b64:	40000a26 	beq	r8,zero,12b90 <_dtoa_r+0x74>
   12b68:	20801117 	ldw	r2,68(r4)
   12b6c:	400b883a 	mov	r5,r8
   12b70:	40800115 	stw	r2,4(r8)
   12b74:	20c01117 	ldw	r3,68(r4)
   12b78:	00800044 	movi	r2,1
   12b7c:	10c4983a 	sll	r2,r2,r3
   12b80:	40800215 	stw	r2,8(r8)
   12b84:	0015cb00 	call	15cb0 <_Bfree>
   12b88:	d8c01617 	ldw	r3,88(sp)
   12b8c:	18001015 	stw	zero,64(r3)
   12b90:	8800a316 	blt	r17,zero,12e20 <_dtoa_r+0x304>
   12b94:	90000015 	stw	zero,0(r18)
   12b98:	a8dffc2c 	andhi	r3,r21,32752
   12b9c:	009ffc34 	movhi	r2,32752
   12ba0:	18809126 	beq	r3,r2,12de8 <_dtoa_r+0x2cc>
   12ba4:	000d883a 	mov	r6,zero
   12ba8:	000f883a 	mov	r7,zero
   12bac:	a009883a 	mov	r4,r20
   12bb0:	a80b883a 	mov	r5,r21
   12bb4:	dd001215 	stw	r20,72(sp)
   12bb8:	dd401315 	stw	r21,76(sp)
   12bbc:	00191480 	call	19148 <__nedf2>
   12bc0:	1000171e 	bne	r2,zero,12c20 <_dtoa_r+0x104>
   12bc4:	d9802717 	ldw	r6,156(sp)
   12bc8:	00800044 	movi	r2,1
   12bcc:	30800015 	stw	r2,0(r6)
   12bd0:	d8802917 	ldw	r2,164(sp)
   12bd4:	10029b26 	beq	r2,zero,13644 <_dtoa_r+0xb28>
   12bd8:	d9002917 	ldw	r4,164(sp)
   12bdc:	00800174 	movhi	r2,5
   12be0:	10a03044 	addi	r2,r2,-32575
   12be4:	10ffffc4 	addi	r3,r2,-1
   12be8:	20800015 	stw	r2,0(r4)
   12bec:	1805883a 	mov	r2,r3
   12bf0:	dfc02517 	ldw	ra,148(sp)
   12bf4:	df002417 	ldw	fp,144(sp)
   12bf8:	ddc02317 	ldw	r23,140(sp)
   12bfc:	dd802217 	ldw	r22,136(sp)
   12c00:	dd402117 	ldw	r21,132(sp)
   12c04:	dd002017 	ldw	r20,128(sp)
   12c08:	dcc01f17 	ldw	r19,124(sp)
   12c0c:	dc801e17 	ldw	r18,120(sp)
   12c10:	dc401d17 	ldw	r17,116(sp)
   12c14:	dc001c17 	ldw	r16,112(sp)
   12c18:	dec02604 	addi	sp,sp,152
   12c1c:	f800283a 	ret
   12c20:	d9001617 	ldw	r4,88(sp)
   12c24:	d9401217 	ldw	r5,72(sp)
   12c28:	d8800104 	addi	r2,sp,4
   12c2c:	a80d883a 	mov	r6,r21
   12c30:	d9c00204 	addi	r7,sp,8
   12c34:	d8800015 	stw	r2,0(sp)
   12c38:	00162ec0 	call	162ec <__d2b>
   12c3c:	d8800715 	stw	r2,28(sp)
   12c40:	a804d53a 	srli	r2,r21,20
   12c44:	1101ffcc 	andi	r4,r2,2047
   12c48:	20008626 	beq	r4,zero,12e64 <_dtoa_r+0x348>
   12c4c:	d8c01217 	ldw	r3,72(sp)
   12c50:	00800434 	movhi	r2,16
   12c54:	10bfffc4 	addi	r2,r2,-1
   12c58:	ddc00117 	ldw	r23,4(sp)
   12c5c:	a884703a 	and	r2,r21,r2
   12c60:	1811883a 	mov	r8,r3
   12c64:	124ffc34 	orhi	r9,r2,16368
   12c68:	25bf0044 	addi	r22,r4,-1023
   12c6c:	d8000815 	stw	zero,32(sp)
   12c70:	0005883a 	mov	r2,zero
   12c74:	00cffe34 	movhi	r3,16376
   12c78:	480b883a 	mov	r5,r9
   12c7c:	4009883a 	mov	r4,r8
   12c80:	180f883a 	mov	r7,r3
   12c84:	100d883a 	mov	r6,r2
   12c88:	00189b00 	call	189b0 <__subdf3>
   12c8c:	0218dbf4 	movhi	r8,25455
   12c90:	4210d844 	addi	r8,r8,17249
   12c94:	024ff4f4 	movhi	r9,16339
   12c98:	4a61e9c4 	addi	r9,r9,-30809
   12c9c:	480f883a 	mov	r7,r9
   12ca0:	400d883a 	mov	r6,r8
   12ca4:	180b883a 	mov	r5,r3
   12ca8:	1009883a 	mov	r4,r2
   12cac:	0018aa40 	call	18aa4 <__muldf3>
   12cb0:	0222d874 	movhi	r8,35681
   12cb4:	42322cc4 	addi	r8,r8,-14157
   12cb8:	024ff1f4 	movhi	r9,16327
   12cbc:	4a628a04 	addi	r9,r9,-30168
   12cc0:	480f883a 	mov	r7,r9
   12cc4:	400d883a 	mov	r6,r8
   12cc8:	180b883a 	mov	r5,r3
   12ccc:	1009883a 	mov	r4,r2
   12cd0:	0018a300 	call	18a30 <__adddf3>
   12cd4:	b009883a 	mov	r4,r22
   12cd8:	1021883a 	mov	r16,r2
   12cdc:	1823883a 	mov	r17,r3
   12ce0:	00193680 	call	19368 <__floatsidf>
   12ce4:	021427f4 	movhi	r8,20639
   12ce8:	421e7ec4 	addi	r8,r8,31227
   12cec:	024ff4f4 	movhi	r9,16339
   12cf0:	4a5104c4 	addi	r9,r9,17427
   12cf4:	480f883a 	mov	r7,r9
   12cf8:	400d883a 	mov	r6,r8
   12cfc:	180b883a 	mov	r5,r3
   12d00:	1009883a 	mov	r4,r2
   12d04:	0018aa40 	call	18aa4 <__muldf3>
   12d08:	180f883a 	mov	r7,r3
   12d0c:	880b883a 	mov	r5,r17
   12d10:	100d883a 	mov	r6,r2
   12d14:	8009883a 	mov	r4,r16
   12d18:	0018a300 	call	18a30 <__adddf3>
   12d1c:	1009883a 	mov	r4,r2
   12d20:	180b883a 	mov	r5,r3
   12d24:	1021883a 	mov	r16,r2
   12d28:	1823883a 	mov	r17,r3
   12d2c:	00194600 	call	19460 <__fixdfsi>
   12d30:	000d883a 	mov	r6,zero
   12d34:	000f883a 	mov	r7,zero
   12d38:	8009883a 	mov	r4,r16
   12d3c:	880b883a 	mov	r5,r17
   12d40:	d8800d15 	stw	r2,52(sp)
   12d44:	00192e00 	call	192e0 <__ltdf2>
   12d48:	10031716 	blt	r2,zero,139a8 <_dtoa_r+0xe8c>
   12d4c:	d8c00d17 	ldw	r3,52(sp)
   12d50:	00800584 	movi	r2,22
   12d54:	10c1482e 	bgeu	r2,r3,13278 <_dtoa_r+0x75c>
   12d58:	01000044 	movi	r4,1
   12d5c:	d9000c15 	stw	r4,48(sp)
   12d60:	bd85c83a 	sub	r2,r23,r22
   12d64:	11bfffc4 	addi	r6,r2,-1
   12d68:	30030b16 	blt	r6,zero,13998 <_dtoa_r+0xe7c>
   12d6c:	d9800a15 	stw	r6,40(sp)
   12d70:	d8001115 	stw	zero,68(sp)
   12d74:	d8c00d17 	ldw	r3,52(sp)
   12d78:	1802ff16 	blt	r3,zero,13978 <_dtoa_r+0xe5c>
   12d7c:	d9000a17 	ldw	r4,40(sp)
   12d80:	d8c00915 	stw	r3,36(sp)
   12d84:	d8001015 	stw	zero,64(sp)
   12d88:	20c9883a 	add	r4,r4,r3
   12d8c:	d9000a15 	stw	r4,40(sp)
   12d90:	d9001717 	ldw	r4,92(sp)
   12d94:	00800244 	movi	r2,9
   12d98:	11004636 	bltu	r2,r4,12eb4 <_dtoa_r+0x398>
   12d9c:	00800144 	movi	r2,5
   12da0:	11020416 	blt	r2,r4,135b4 <_dtoa_r+0xa98>
   12da4:	04400044 	movi	r17,1
   12da8:	d8c01717 	ldw	r3,92(sp)
   12dac:	00800144 	movi	r2,5
   12db0:	10c1ed36 	bltu	r2,r3,13568 <_dtoa_r+0xa4c>
   12db4:	18c5883a 	add	r2,r3,r3
   12db8:	1085883a 	add	r2,r2,r2
   12dbc:	00c00074 	movhi	r3,1
   12dc0:	18cb7404 	addi	r3,r3,11728
   12dc4:	10c5883a 	add	r2,r2,r3
   12dc8:	11000017 	ldw	r4,0(r2)
   12dcc:	2000683a 	jmp	r4
   12dd0:	00012ebc 	xorhi	zero,zero,1210
   12dd4:	00012ebc 	xorhi	zero,zero,1210
   12dd8:	000138bc 	xorhi	zero,zero,1250
   12ddc:	00013894 	movui	zero,1250
   12de0:	000138d8 	cmpnei	zero,zero,1251
   12de4:	000138e4 	muli	zero,zero,1251
   12de8:	d9002717 	ldw	r4,156(sp)
   12dec:	0089c3c4 	movi	r2,9999
   12df0:	20800015 	stw	r2,0(r4)
   12df4:	a0001026 	beq	r20,zero,12e38 <_dtoa_r+0x31c>
   12df8:	00c00174 	movhi	r3,5
   12dfc:	18e03c04 	addi	r3,r3,-32528
   12e00:	d9802917 	ldw	r6,164(sp)
   12e04:	303f7926 	beq	r6,zero,12bec <_dtoa_r+0xd0>
   12e08:	188000c7 	ldb	r2,3(r3)
   12e0c:	190000c4 	addi	r4,r3,3
   12e10:	1000101e 	bne	r2,zero,12e54 <_dtoa_r+0x338>
   12e14:	d8802917 	ldw	r2,164(sp)
   12e18:	11000015 	stw	r4,0(r2)
   12e1c:	003f7306 	br	12bec <_dtoa_r+0xd0>
   12e20:	00a00034 	movhi	r2,32768
   12e24:	10bfffc4 	addi	r2,r2,-1
   12e28:	00c00044 	movi	r3,1
   12e2c:	88aa703a 	and	r21,r17,r2
   12e30:	90c00015 	stw	r3,0(r18)
   12e34:	003f5806 	br	12b98 <_dtoa_r+0x7c>
   12e38:	00800434 	movhi	r2,16
   12e3c:	10bfffc4 	addi	r2,r2,-1
   12e40:	a884703a 	and	r2,r21,r2
   12e44:	103fec1e 	bne	r2,zero,12df8 <_dtoa_r+0x2dc>
   12e48:	00c00174 	movhi	r3,5
   12e4c:	18e03904 	addi	r3,r3,-32540
   12e50:	003feb06 	br	12e00 <_dtoa_r+0x2e4>
   12e54:	d8802917 	ldw	r2,164(sp)
   12e58:	19000204 	addi	r4,r3,8
   12e5c:	11000015 	stw	r4,0(r2)
   12e60:	003f6206 	br	12bec <_dtoa_r+0xd0>
   12e64:	ddc00117 	ldw	r23,4(sp)
   12e68:	d8800217 	ldw	r2,8(sp)
   12e6c:	01000804 	movi	r4,32
   12e70:	b8c10c84 	addi	r3,r23,1074
   12e74:	18a3883a 	add	r17,r3,r2
   12e78:	2441b80e 	bge	r4,r17,1355c <_dtoa_r+0xa40>
   12e7c:	00c01004 	movi	r3,64
   12e80:	1c47c83a 	sub	r3,r3,r17
   12e84:	88bff804 	addi	r2,r17,-32
   12e88:	a8c6983a 	sll	r3,r21,r3
   12e8c:	a084d83a 	srl	r2,r20,r2
   12e90:	1888b03a 	or	r4,r3,r2
   12e94:	00195380 	call	19538 <__floatunsidf>
   12e98:	1011883a 	mov	r8,r2
   12e9c:	00bf8434 	movhi	r2,65040
   12ea0:	01000044 	movi	r4,1
   12ea4:	10d3883a 	add	r9,r2,r3
   12ea8:	8dbef344 	addi	r22,r17,-1075
   12eac:	d9000815 	stw	r4,32(sp)
   12eb0:	003f6f06 	br	12c70 <_dtoa_r+0x154>
   12eb4:	d8001715 	stw	zero,92(sp)
   12eb8:	04400044 	movi	r17,1
   12ebc:	00bfffc4 	movi	r2,-1
   12ec0:	00c00044 	movi	r3,1
   12ec4:	d8800e15 	stw	r2,56(sp)
   12ec8:	d8002615 	stw	zero,152(sp)
   12ecc:	d8800f15 	stw	r2,60(sp)
   12ed0:	d8c00b15 	stw	r3,44(sp)
   12ed4:	1021883a 	mov	r16,r2
   12ed8:	d8801617 	ldw	r2,88(sp)
   12edc:	10001115 	stw	zero,68(r2)
   12ee0:	d8801617 	ldw	r2,88(sp)
   12ee4:	11401117 	ldw	r5,68(r2)
   12ee8:	1009883a 	mov	r4,r2
   12eec:	00162300 	call	16230 <_Balloc>
   12ef0:	d8c01617 	ldw	r3,88(sp)
   12ef4:	d8800515 	stw	r2,20(sp)
   12ef8:	18801015 	stw	r2,64(r3)
   12efc:	00800384 	movi	r2,14
   12f00:	14006836 	bltu	r2,r16,130a4 <_dtoa_r+0x588>
   12f04:	8805003a 	cmpeq	r2,r17,zero
   12f08:	1000661e 	bne	r2,zero,130a4 <_dtoa_r+0x588>
   12f0c:	d9000d17 	ldw	r4,52(sp)
   12f10:	0102300e 	bge	zero,r4,137d4 <_dtoa_r+0xcb8>
   12f14:	208003cc 	andi	r2,r4,15
   12f18:	100490fa 	slli	r2,r2,3
   12f1c:	2025d13a 	srai	r18,r4,4
   12f20:	00c00174 	movhi	r3,5
   12f24:	18e04e04 	addi	r3,r3,-32456
   12f28:	10c5883a 	add	r2,r2,r3
   12f2c:	90c0040c 	andi	r3,r18,16
   12f30:	14000017 	ldw	r16,0(r2)
   12f34:	14400117 	ldw	r17,4(r2)
   12f38:	18036a1e 	bne	r3,zero,13ce4 <_dtoa_r+0x11c8>
   12f3c:	05800084 	movi	r22,2
   12f40:	90001026 	beq	r18,zero,12f84 <_dtoa_r+0x468>
   12f44:	04c00174 	movhi	r19,5
   12f48:	9ce08004 	addi	r19,r19,-32256
   12f4c:	9080004c 	andi	r2,r18,1
   12f50:	1005003a 	cmpeq	r2,r2,zero
   12f54:	1000081e 	bne	r2,zero,12f78 <_dtoa_r+0x45c>
   12f58:	99800017 	ldw	r6,0(r19)
   12f5c:	99c00117 	ldw	r7,4(r19)
   12f60:	880b883a 	mov	r5,r17
   12f64:	8009883a 	mov	r4,r16
   12f68:	0018aa40 	call	18aa4 <__muldf3>
   12f6c:	1021883a 	mov	r16,r2
   12f70:	b5800044 	addi	r22,r22,1
   12f74:	1823883a 	mov	r17,r3
   12f78:	9025d07a 	srai	r18,r18,1
   12f7c:	9cc00204 	addi	r19,r19,8
   12f80:	903ff21e 	bne	r18,zero,12f4c <_dtoa_r+0x430>
   12f84:	a80b883a 	mov	r5,r21
   12f88:	a009883a 	mov	r4,r20
   12f8c:	880f883a 	mov	r7,r17
   12f90:	800d883a 	mov	r6,r16
   12f94:	0018e680 	call	18e68 <__divdf3>
   12f98:	1029883a 	mov	r20,r2
   12f9c:	182b883a 	mov	r21,r3
   12fa0:	d8c00c17 	ldw	r3,48(sp)
   12fa4:	1805003a 	cmpeq	r2,r3,zero
   12fa8:	1000081e 	bne	r2,zero,12fcc <_dtoa_r+0x4b0>
   12fac:	0005883a 	mov	r2,zero
   12fb0:	00cffc34 	movhi	r3,16368
   12fb4:	180f883a 	mov	r7,r3
   12fb8:	a009883a 	mov	r4,r20
   12fbc:	a80b883a 	mov	r5,r21
   12fc0:	100d883a 	mov	r6,r2
   12fc4:	00192e00 	call	192e0 <__ltdf2>
   12fc8:	1003fe16 	blt	r2,zero,13fc4 <_dtoa_r+0x14a8>
   12fcc:	b009883a 	mov	r4,r22
   12fd0:	00193680 	call	19368 <__floatsidf>
   12fd4:	180b883a 	mov	r5,r3
   12fd8:	1009883a 	mov	r4,r2
   12fdc:	a00d883a 	mov	r6,r20
   12fe0:	a80f883a 	mov	r7,r21
   12fe4:	0018aa40 	call	18aa4 <__muldf3>
   12fe8:	0011883a 	mov	r8,zero
   12fec:	02500734 	movhi	r9,16412
   12ff0:	1009883a 	mov	r4,r2
   12ff4:	180b883a 	mov	r5,r3
   12ff8:	480f883a 	mov	r7,r9
   12ffc:	400d883a 	mov	r6,r8
   13000:	0018a300 	call	18a30 <__adddf3>
   13004:	d9000f17 	ldw	r4,60(sp)
   13008:	102d883a 	mov	r22,r2
   1300c:	00bf3034 	movhi	r2,64704
   13010:	18b9883a 	add	fp,r3,r2
   13014:	e02f883a 	mov	r23,fp
   13018:	20028f1e 	bne	r4,zero,13a58 <_dtoa_r+0xf3c>
   1301c:	0005883a 	mov	r2,zero
   13020:	00d00534 	movhi	r3,16404
   13024:	a009883a 	mov	r4,r20
   13028:	a80b883a 	mov	r5,r21
   1302c:	180f883a 	mov	r7,r3
   13030:	100d883a 	mov	r6,r2
   13034:	00189b00 	call	189b0 <__subdf3>
   13038:	1009883a 	mov	r4,r2
   1303c:	e00f883a 	mov	r7,fp
   13040:	180b883a 	mov	r5,r3
   13044:	b00d883a 	mov	r6,r22
   13048:	1025883a 	mov	r18,r2
   1304c:	1827883a 	mov	r19,r3
   13050:	00191d00 	call	191d0 <__gtdf2>
   13054:	00834f16 	blt	zero,r2,13d94 <_dtoa_r+0x1278>
   13058:	e0e0003c 	xorhi	r3,fp,32768
   1305c:	9009883a 	mov	r4,r18
   13060:	980b883a 	mov	r5,r19
   13064:	180f883a 	mov	r7,r3
   13068:	b00d883a 	mov	r6,r22
   1306c:	00192e00 	call	192e0 <__ltdf2>
   13070:	1000080e 	bge	r2,zero,13094 <_dtoa_r+0x578>
   13074:	0027883a 	mov	r19,zero
   13078:	0025883a 	mov	r18,zero
   1307c:	d8802617 	ldw	r2,152(sp)
   13080:	df000517 	ldw	fp,20(sp)
   13084:	d8000615 	stw	zero,24(sp)
   13088:	0084303a 	nor	r2,zero,r2
   1308c:	d8800d15 	stw	r2,52(sp)
   13090:	00019b06 	br	13700 <_dtoa_r+0xbe4>
   13094:	d9801217 	ldw	r6,72(sp)
   13098:	d8801317 	ldw	r2,76(sp)
   1309c:	3029883a 	mov	r20,r6
   130a0:	102b883a 	mov	r21,r2
   130a4:	d8c00217 	ldw	r3,8(sp)
   130a8:	18008516 	blt	r3,zero,132c0 <_dtoa_r+0x7a4>
   130ac:	d9000d17 	ldw	r4,52(sp)
   130b0:	00800384 	movi	r2,14
   130b4:	11008216 	blt	r2,r4,132c0 <_dtoa_r+0x7a4>
   130b8:	200490fa 	slli	r2,r4,3
   130bc:	d9802617 	ldw	r6,152(sp)
   130c0:	00c00174 	movhi	r3,5
   130c4:	18e04e04 	addi	r3,r3,-32456
   130c8:	10c5883a 	add	r2,r2,r3
   130cc:	14800017 	ldw	r18,0(r2)
   130d0:	14c00117 	ldw	r19,4(r2)
   130d4:	30031e16 	blt	r6,zero,13d50 <_dtoa_r+0x1234>
   130d8:	d9000517 	ldw	r4,20(sp)
   130dc:	d8c00f17 	ldw	r3,60(sp)
   130e0:	a823883a 	mov	r17,r21
   130e4:	a021883a 	mov	r16,r20
   130e8:	192b883a 	add	r21,r3,r4
   130ec:	2039883a 	mov	fp,r4
   130f0:	00000f06 	br	13130 <_dtoa_r+0x614>
   130f4:	0005883a 	mov	r2,zero
   130f8:	00d00934 	movhi	r3,16420
   130fc:	5009883a 	mov	r4,r10
   13100:	580b883a 	mov	r5,r11
   13104:	180f883a 	mov	r7,r3
   13108:	100d883a 	mov	r6,r2
   1310c:	0018aa40 	call	18aa4 <__muldf3>
   13110:	180b883a 	mov	r5,r3
   13114:	000d883a 	mov	r6,zero
   13118:	000f883a 	mov	r7,zero
   1311c:	1009883a 	mov	r4,r2
   13120:	1021883a 	mov	r16,r2
   13124:	1823883a 	mov	r17,r3
   13128:	00191480 	call	19148 <__nedf2>
   1312c:	10004526 	beq	r2,zero,13244 <_dtoa_r+0x728>
   13130:	900d883a 	mov	r6,r18
   13134:	980f883a 	mov	r7,r19
   13138:	8009883a 	mov	r4,r16
   1313c:	880b883a 	mov	r5,r17
   13140:	0018e680 	call	18e68 <__divdf3>
   13144:	180b883a 	mov	r5,r3
   13148:	1009883a 	mov	r4,r2
   1314c:	00194600 	call	19460 <__fixdfsi>
   13150:	1009883a 	mov	r4,r2
   13154:	1029883a 	mov	r20,r2
   13158:	00193680 	call	19368 <__floatsidf>
   1315c:	180f883a 	mov	r7,r3
   13160:	9009883a 	mov	r4,r18
   13164:	980b883a 	mov	r5,r19
   13168:	100d883a 	mov	r6,r2
   1316c:	0018aa40 	call	18aa4 <__muldf3>
   13170:	180f883a 	mov	r7,r3
   13174:	880b883a 	mov	r5,r17
   13178:	8009883a 	mov	r4,r16
   1317c:	100d883a 	mov	r6,r2
   13180:	00189b00 	call	189b0 <__subdf3>
   13184:	1015883a 	mov	r10,r2
   13188:	a0800c04 	addi	r2,r20,48
   1318c:	e0800005 	stb	r2,0(fp)
   13190:	e7000044 	addi	fp,fp,1
   13194:	1817883a 	mov	r11,r3
   13198:	e57fd61e 	bne	fp,r21,130f4 <_dtoa_r+0x5d8>
   1319c:	500d883a 	mov	r6,r10
   131a0:	180f883a 	mov	r7,r3
   131a4:	5009883a 	mov	r4,r10
   131a8:	180b883a 	mov	r5,r3
   131ac:	0018a300 	call	18a30 <__adddf3>
   131b0:	100d883a 	mov	r6,r2
   131b4:	9009883a 	mov	r4,r18
   131b8:	980b883a 	mov	r5,r19
   131bc:	180f883a 	mov	r7,r3
   131c0:	1021883a 	mov	r16,r2
   131c4:	1823883a 	mov	r17,r3
   131c8:	00192e00 	call	192e0 <__ltdf2>
   131cc:	10000816 	blt	r2,zero,131f0 <_dtoa_r+0x6d4>
   131d0:	980b883a 	mov	r5,r19
   131d4:	800d883a 	mov	r6,r16
   131d8:	880f883a 	mov	r7,r17
   131dc:	9009883a 	mov	r4,r18
   131e0:	00190c00 	call	190c0 <__eqdf2>
   131e4:	1000171e 	bne	r2,zero,13244 <_dtoa_r+0x728>
   131e8:	a080004c 	andi	r2,r20,1
   131ec:	10001526 	beq	r2,zero,13244 <_dtoa_r+0x728>
   131f0:	d8800d17 	ldw	r2,52(sp)
   131f4:	d8800415 	stw	r2,16(sp)
   131f8:	e009883a 	mov	r4,fp
   131fc:	213fffc4 	addi	r4,r4,-1
   13200:	20c00007 	ldb	r3,0(r4)
   13204:	00800e44 	movi	r2,57
   13208:	1880081e 	bne	r3,r2,1322c <_dtoa_r+0x710>
   1320c:	d8800517 	ldw	r2,20(sp)
   13210:	113ffa1e 	bne	r2,r4,131fc <_dtoa_r+0x6e0>
   13214:	d8c00417 	ldw	r3,16(sp)
   13218:	d9800517 	ldw	r6,20(sp)
   1321c:	00800c04 	movi	r2,48
   13220:	18c00044 	addi	r3,r3,1
   13224:	d8c00415 	stw	r3,16(sp)
   13228:	30800005 	stb	r2,0(r6)
   1322c:	20800003 	ldbu	r2,0(r4)
   13230:	d8c00417 	ldw	r3,16(sp)
   13234:	27000044 	addi	fp,r4,1
   13238:	10800044 	addi	r2,r2,1
   1323c:	d8c00d15 	stw	r3,52(sp)
   13240:	20800005 	stb	r2,0(r4)
   13244:	d9001617 	ldw	r4,88(sp)
   13248:	d9400717 	ldw	r5,28(sp)
   1324c:	0015cb00 	call	15cb0 <_Bfree>
   13250:	e0000005 	stb	zero,0(fp)
   13254:	d9800d17 	ldw	r6,52(sp)
   13258:	d8c02717 	ldw	r3,156(sp)
   1325c:	d9002917 	ldw	r4,164(sp)
   13260:	30800044 	addi	r2,r6,1
   13264:	18800015 	stw	r2,0(r3)
   13268:	20029c26 	beq	r4,zero,13cdc <_dtoa_r+0x11c0>
   1326c:	d8c00517 	ldw	r3,20(sp)
   13270:	27000015 	stw	fp,0(r4)
   13274:	003e5d06 	br	12bec <_dtoa_r+0xd0>
   13278:	d9800d17 	ldw	r6,52(sp)
   1327c:	00c00174 	movhi	r3,5
   13280:	18e04e04 	addi	r3,r3,-32456
   13284:	d9001217 	ldw	r4,72(sp)
   13288:	300490fa 	slli	r2,r6,3
   1328c:	d9401317 	ldw	r5,76(sp)
   13290:	10c5883a 	add	r2,r2,r3
   13294:	12000017 	ldw	r8,0(r2)
   13298:	12400117 	ldw	r9,4(r2)
   1329c:	400d883a 	mov	r6,r8
   132a0:	480f883a 	mov	r7,r9
   132a4:	00192e00 	call	192e0 <__ltdf2>
   132a8:	1000030e 	bge	r2,zero,132b8 <_dtoa_r+0x79c>
   132ac:	d8800d17 	ldw	r2,52(sp)
   132b0:	10bfffc4 	addi	r2,r2,-1
   132b4:	d8800d15 	stw	r2,52(sp)
   132b8:	d8000c15 	stw	zero,48(sp)
   132bc:	003ea806 	br	12d60 <_dtoa_r+0x244>
   132c0:	d9000b17 	ldw	r4,44(sp)
   132c4:	202cc03a 	cmpne	r22,r4,zero
   132c8:	b000c71e 	bne	r22,zero,135e8 <_dtoa_r+0xacc>
   132cc:	dc001117 	ldw	r16,68(sp)
   132d0:	dc801017 	ldw	r18,64(sp)
   132d4:	0027883a 	mov	r19,zero
   132d8:	04000b0e 	bge	zero,r16,13308 <_dtoa_r+0x7ec>
   132dc:	d8c00a17 	ldw	r3,40(sp)
   132e0:	00c0090e 	bge	zero,r3,13308 <_dtoa_r+0x7ec>
   132e4:	8005883a 	mov	r2,r16
   132e8:	1c011316 	blt	r3,r16,13738 <_dtoa_r+0xc1c>
   132ec:	d9000a17 	ldw	r4,40(sp)
   132f0:	d9801117 	ldw	r6,68(sp)
   132f4:	80a1c83a 	sub	r16,r16,r2
   132f8:	2089c83a 	sub	r4,r4,r2
   132fc:	308dc83a 	sub	r6,r6,r2
   13300:	d9000a15 	stw	r4,40(sp)
   13304:	d9801115 	stw	r6,68(sp)
   13308:	d8801017 	ldw	r2,64(sp)
   1330c:	0080150e 	bge	zero,r2,13364 <_dtoa_r+0x848>
   13310:	d8c00b17 	ldw	r3,44(sp)
   13314:	1805003a 	cmpeq	r2,r3,zero
   13318:	1001c91e 	bne	r2,zero,13a40 <_dtoa_r+0xf24>
   1331c:	04800e0e 	bge	zero,r18,13358 <_dtoa_r+0x83c>
   13320:	d9001617 	ldw	r4,88(sp)
   13324:	980b883a 	mov	r5,r19
   13328:	900d883a 	mov	r6,r18
   1332c:	0016a640 	call	16a64 <__pow5mult>
   13330:	d9001617 	ldw	r4,88(sp)
   13334:	d9800717 	ldw	r6,28(sp)
   13338:	100b883a 	mov	r5,r2
   1333c:	1027883a 	mov	r19,r2
   13340:	00167400 	call	16740 <__multiply>
   13344:	d9001617 	ldw	r4,88(sp)
   13348:	d9400717 	ldw	r5,28(sp)
   1334c:	1023883a 	mov	r17,r2
   13350:	0015cb00 	call	15cb0 <_Bfree>
   13354:	dc400715 	stw	r17,28(sp)
   13358:	d9001017 	ldw	r4,64(sp)
   1335c:	248dc83a 	sub	r6,r4,r18
   13360:	30010e1e 	bne	r6,zero,1379c <_dtoa_r+0xc80>
   13364:	d9001617 	ldw	r4,88(sp)
   13368:	04400044 	movi	r17,1
   1336c:	880b883a 	mov	r5,r17
   13370:	00169280 	call	16928 <__i2b>
   13374:	d9800917 	ldw	r6,36(sp)
   13378:	1025883a 	mov	r18,r2
   1337c:	0180040e 	bge	zero,r6,13390 <_dtoa_r+0x874>
   13380:	d9001617 	ldw	r4,88(sp)
   13384:	100b883a 	mov	r5,r2
   13388:	0016a640 	call	16a64 <__pow5mult>
   1338c:	1025883a 	mov	r18,r2
   13390:	d8801717 	ldw	r2,92(sp)
   13394:	8880f30e 	bge	r17,r2,13764 <_dtoa_r+0xc48>
   13398:	0023883a 	mov	r17,zero
   1339c:	d9800917 	ldw	r6,36(sp)
   133a0:	30019e1e 	bne	r6,zero,13a1c <_dtoa_r+0xf00>
   133a4:	00c00044 	movi	r3,1
   133a8:	d9000a17 	ldw	r4,40(sp)
   133ac:	20c5883a 	add	r2,r4,r3
   133b0:	10c007cc 	andi	r3,r2,31
   133b4:	1800841e 	bne	r3,zero,135c8 <_dtoa_r+0xaac>
   133b8:	00800704 	movi	r2,28
   133bc:	d9000a17 	ldw	r4,40(sp)
   133c0:	d9801117 	ldw	r6,68(sp)
   133c4:	80a1883a 	add	r16,r16,r2
   133c8:	2089883a 	add	r4,r4,r2
   133cc:	308d883a 	add	r6,r6,r2
   133d0:	d9000a15 	stw	r4,40(sp)
   133d4:	d9801115 	stw	r6,68(sp)
   133d8:	d8801117 	ldw	r2,68(sp)
   133dc:	0080050e 	bge	zero,r2,133f4 <_dtoa_r+0x8d8>
   133e0:	d9400717 	ldw	r5,28(sp)
   133e4:	d9001617 	ldw	r4,88(sp)
   133e8:	100d883a 	mov	r6,r2
   133ec:	00165f40 	call	165f4 <__lshift>
   133f0:	d8800715 	stw	r2,28(sp)
   133f4:	d8c00a17 	ldw	r3,40(sp)
   133f8:	00c0050e 	bge	zero,r3,13410 <_dtoa_r+0x8f4>
   133fc:	d9001617 	ldw	r4,88(sp)
   13400:	900b883a 	mov	r5,r18
   13404:	180d883a 	mov	r6,r3
   13408:	00165f40 	call	165f4 <__lshift>
   1340c:	1025883a 	mov	r18,r2
   13410:	d9000c17 	ldw	r4,48(sp)
   13414:	2005003a 	cmpeq	r2,r4,zero
   13418:	10016f26 	beq	r2,zero,139d8 <_dtoa_r+0xebc>
   1341c:	d9000f17 	ldw	r4,60(sp)
   13420:	0102170e 	bge	zero,r4,13c80 <_dtoa_r+0x1164>
   13424:	d9800b17 	ldw	r6,44(sp)
   13428:	3005003a 	cmpeq	r2,r6,zero
   1342c:	1000881e 	bne	r2,zero,13650 <_dtoa_r+0xb34>
   13430:	0400050e 	bge	zero,r16,13448 <_dtoa_r+0x92c>
   13434:	d9001617 	ldw	r4,88(sp)
   13438:	980b883a 	mov	r5,r19
   1343c:	800d883a 	mov	r6,r16
   13440:	00165f40 	call	165f4 <__lshift>
   13444:	1027883a 	mov	r19,r2
   13448:	8804c03a 	cmpne	r2,r17,zero
   1344c:	1002541e 	bne	r2,zero,13da0 <_dtoa_r+0x1284>
   13450:	980b883a 	mov	r5,r19
   13454:	dd800517 	ldw	r22,20(sp)
   13458:	dcc00615 	stw	r19,24(sp)
   1345c:	a700004c 	andi	fp,r20,1
   13460:	2827883a 	mov	r19,r5
   13464:	d9000717 	ldw	r4,28(sp)
   13468:	900b883a 	mov	r5,r18
   1346c:	00129040 	call	12904 <quorem>
   13470:	d9000717 	ldw	r4,28(sp)
   13474:	d9400617 	ldw	r5,24(sp)
   13478:	1023883a 	mov	r17,r2
   1347c:	8dc00c04 	addi	r23,r17,48
   13480:	0015e0c0 	call	15e0c <__mcmp>
   13484:	d9001617 	ldw	r4,88(sp)
   13488:	900b883a 	mov	r5,r18
   1348c:	980d883a 	mov	r6,r19
   13490:	1029883a 	mov	r20,r2
   13494:	00164680 	call	16468 <__mdiff>
   13498:	102b883a 	mov	r21,r2
   1349c:	10800317 	ldw	r2,12(r2)
   134a0:	1001281e 	bne	r2,zero,13944 <_dtoa_r+0xe28>
   134a4:	d9000717 	ldw	r4,28(sp)
   134a8:	a80b883a 	mov	r5,r21
   134ac:	0015e0c0 	call	15e0c <__mcmp>
   134b0:	d9001617 	ldw	r4,88(sp)
   134b4:	1021883a 	mov	r16,r2
   134b8:	a80b883a 	mov	r5,r21
   134bc:	0015cb00 	call	15cb0 <_Bfree>
   134c0:	8000041e 	bne	r16,zero,134d4 <_dtoa_r+0x9b8>
   134c4:	d8801717 	ldw	r2,92(sp)
   134c8:	1000021e 	bne	r2,zero,134d4 <_dtoa_r+0x9b8>
   134cc:	e004c03a 	cmpne	r2,fp,zero
   134d0:	10011726 	beq	r2,zero,13930 <_dtoa_r+0xe14>
   134d4:	a0010616 	blt	r20,zero,138f0 <_dtoa_r+0xdd4>
   134d8:	a000041e 	bne	r20,zero,134ec <_dtoa_r+0x9d0>
   134dc:	d8c01717 	ldw	r3,92(sp)
   134e0:	1800021e 	bne	r3,zero,134ec <_dtoa_r+0x9d0>
   134e4:	e004c03a 	cmpne	r2,fp,zero
   134e8:	10010126 	beq	r2,zero,138f0 <_dtoa_r+0xdd4>
   134ec:	04023d16 	blt	zero,r16,13de4 <_dtoa_r+0x12c8>
   134f0:	b5c00005 	stb	r23,0(r22)
   134f4:	d9800517 	ldw	r6,20(sp)
   134f8:	d9000f17 	ldw	r4,60(sp)
   134fc:	b5800044 	addi	r22,r22,1
   13500:	3105883a 	add	r2,r6,r4
   13504:	b0806526 	beq	r22,r2,1369c <_dtoa_r+0xb80>
   13508:	d9400717 	ldw	r5,28(sp)
   1350c:	d9001617 	ldw	r4,88(sp)
   13510:	01800284 	movi	r6,10
   13514:	000f883a 	mov	r7,zero
   13518:	00169640 	call	16964 <__multadd>
   1351c:	d8800715 	stw	r2,28(sp)
   13520:	d8800617 	ldw	r2,24(sp)
   13524:	14c10c26 	beq	r2,r19,13958 <_dtoa_r+0xe3c>
   13528:	d9400617 	ldw	r5,24(sp)
   1352c:	d9001617 	ldw	r4,88(sp)
   13530:	01800284 	movi	r6,10
   13534:	000f883a 	mov	r7,zero
   13538:	00169640 	call	16964 <__multadd>
   1353c:	d9001617 	ldw	r4,88(sp)
   13540:	980b883a 	mov	r5,r19
   13544:	01800284 	movi	r6,10
   13548:	000f883a 	mov	r7,zero
   1354c:	d8800615 	stw	r2,24(sp)
   13550:	00169640 	call	16964 <__multadd>
   13554:	1027883a 	mov	r19,r2
   13558:	003fc206 	br	13464 <_dtoa_r+0x948>
   1355c:	2445c83a 	sub	r2,r4,r17
   13560:	a088983a 	sll	r4,r20,r2
   13564:	003e4b06 	br	12e94 <_dtoa_r+0x378>
   13568:	01bfffc4 	movi	r6,-1
   1356c:	00800044 	movi	r2,1
   13570:	d9800e15 	stw	r6,56(sp)
   13574:	d9800f15 	stw	r6,60(sp)
   13578:	d8800b15 	stw	r2,44(sp)
   1357c:	d8c01617 	ldw	r3,88(sp)
   13580:	008005c4 	movi	r2,23
   13584:	18001115 	stw	zero,68(r3)
   13588:	1580082e 	bgeu	r2,r22,135ac <_dtoa_r+0xa90>
   1358c:	00c00104 	movi	r3,4
   13590:	0009883a 	mov	r4,zero
   13594:	18c7883a 	add	r3,r3,r3
   13598:	18800504 	addi	r2,r3,20
   1359c:	21000044 	addi	r4,r4,1
   135a0:	b0bffc2e 	bgeu	r22,r2,13594 <_dtoa_r+0xa78>
   135a4:	d9801617 	ldw	r6,88(sp)
   135a8:	31001115 	stw	r4,68(r6)
   135ac:	dc000f17 	ldw	r16,60(sp)
   135b0:	003e4b06 	br	12ee0 <_dtoa_r+0x3c4>
   135b4:	d9801717 	ldw	r6,92(sp)
   135b8:	0023883a 	mov	r17,zero
   135bc:	31bfff04 	addi	r6,r6,-4
   135c0:	d9801715 	stw	r6,92(sp)
   135c4:	003df806 	br	12da8 <_dtoa_r+0x28c>
   135c8:	00800804 	movi	r2,32
   135cc:	10c9c83a 	sub	r4,r2,r3
   135d0:	00c00104 	movi	r3,4
   135d4:	19005a16 	blt	r3,r4,13740 <_dtoa_r+0xc24>
   135d8:	008000c4 	movi	r2,3
   135dc:	113f7e16 	blt	r2,r4,133d8 <_dtoa_r+0x8bc>
   135e0:	20800704 	addi	r2,r4,28
   135e4:	003f7506 	br	133bc <_dtoa_r+0x8a0>
   135e8:	d9801717 	ldw	r6,92(sp)
   135ec:	00800044 	movi	r2,1
   135f0:	1180a10e 	bge	r2,r6,13878 <_dtoa_r+0xd5c>
   135f4:	d9800f17 	ldw	r6,60(sp)
   135f8:	d8c01017 	ldw	r3,64(sp)
   135fc:	30bfffc4 	addi	r2,r6,-1
   13600:	1881c616 	blt	r3,r2,13d1c <_dtoa_r+0x1200>
   13604:	18a5c83a 	sub	r18,r3,r2
   13608:	d8800f17 	ldw	r2,60(sp)
   1360c:	10026216 	blt	r2,zero,13f98 <_dtoa_r+0x147c>
   13610:	dc001117 	ldw	r16,68(sp)
   13614:	1007883a 	mov	r3,r2
   13618:	d9800a17 	ldw	r6,40(sp)
   1361c:	d8801117 	ldw	r2,68(sp)
   13620:	d9001617 	ldw	r4,88(sp)
   13624:	30cd883a 	add	r6,r6,r3
   13628:	10c5883a 	add	r2,r2,r3
   1362c:	01400044 	movi	r5,1
   13630:	d9800a15 	stw	r6,40(sp)
   13634:	d8801115 	stw	r2,68(sp)
   13638:	00169280 	call	16928 <__i2b>
   1363c:	1027883a 	mov	r19,r2
   13640:	003f2506 	br	132d8 <_dtoa_r+0x7bc>
   13644:	00c00174 	movhi	r3,5
   13648:	18e03004 	addi	r3,r3,-32576
   1364c:	003d6706 	br	12bec <_dtoa_r+0xd0>
   13650:	dd800517 	ldw	r22,20(sp)
   13654:	04000044 	movi	r16,1
   13658:	00000706 	br	13678 <_dtoa_r+0xb5c>
   1365c:	d9400717 	ldw	r5,28(sp)
   13660:	d9001617 	ldw	r4,88(sp)
   13664:	01800284 	movi	r6,10
   13668:	000f883a 	mov	r7,zero
   1366c:	00169640 	call	16964 <__multadd>
   13670:	d8800715 	stw	r2,28(sp)
   13674:	84000044 	addi	r16,r16,1
   13678:	d9000717 	ldw	r4,28(sp)
   1367c:	900b883a 	mov	r5,r18
   13680:	00129040 	call	12904 <quorem>
   13684:	15c00c04 	addi	r23,r2,48
   13688:	b5c00005 	stb	r23,0(r22)
   1368c:	d8c00f17 	ldw	r3,60(sp)
   13690:	b5800044 	addi	r22,r22,1
   13694:	80fff116 	blt	r16,r3,1365c <_dtoa_r+0xb40>
   13698:	d8000615 	stw	zero,24(sp)
   1369c:	d9400717 	ldw	r5,28(sp)
   136a0:	d9001617 	ldw	r4,88(sp)
   136a4:	01800044 	movi	r6,1
   136a8:	00165f40 	call	165f4 <__lshift>
   136ac:	1009883a 	mov	r4,r2
   136b0:	900b883a 	mov	r5,r18
   136b4:	d8800715 	stw	r2,28(sp)
   136b8:	0015e0c0 	call	15e0c <__mcmp>
   136bc:	00803c0e 	bge	zero,r2,137b0 <_dtoa_r+0xc94>
   136c0:	b009883a 	mov	r4,r22
   136c4:	213fffc4 	addi	r4,r4,-1
   136c8:	21400003 	ldbu	r5,0(r4)
   136cc:	00800e44 	movi	r2,57
   136d0:	28c03fcc 	andi	r3,r5,255
   136d4:	18c0201c 	xori	r3,r3,128
   136d8:	18ffe004 	addi	r3,r3,-128
   136dc:	1881981e 	bne	r3,r2,13d40 <_dtoa_r+0x1224>
   136e0:	d9800517 	ldw	r6,20(sp)
   136e4:	21bff71e 	bne	r4,r6,136c4 <_dtoa_r+0xba8>
   136e8:	d8800d17 	ldw	r2,52(sp)
   136ec:	37000044 	addi	fp,r6,1
   136f0:	10800044 	addi	r2,r2,1
   136f4:	d8800d15 	stw	r2,52(sp)
   136f8:	00800c44 	movi	r2,49
   136fc:	30800005 	stb	r2,0(r6)
   13700:	d9001617 	ldw	r4,88(sp)
   13704:	900b883a 	mov	r5,r18
   13708:	0015cb00 	call	15cb0 <_Bfree>
   1370c:	983ecd26 	beq	r19,zero,13244 <_dtoa_r+0x728>
   13710:	d8c00617 	ldw	r3,24(sp)
   13714:	18000426 	beq	r3,zero,13728 <_dtoa_r+0xc0c>
   13718:	1cc00326 	beq	r3,r19,13728 <_dtoa_r+0xc0c>
   1371c:	d9001617 	ldw	r4,88(sp)
   13720:	180b883a 	mov	r5,r3
   13724:	0015cb00 	call	15cb0 <_Bfree>
   13728:	d9001617 	ldw	r4,88(sp)
   1372c:	980b883a 	mov	r5,r19
   13730:	0015cb00 	call	15cb0 <_Bfree>
   13734:	003ec306 	br	13244 <_dtoa_r+0x728>
   13738:	1805883a 	mov	r2,r3
   1373c:	003eeb06 	br	132ec <_dtoa_r+0x7d0>
   13740:	d9800a17 	ldw	r6,40(sp)
   13744:	d8c01117 	ldw	r3,68(sp)
   13748:	20bfff04 	addi	r2,r4,-4
   1374c:	308d883a 	add	r6,r6,r2
   13750:	1887883a 	add	r3,r3,r2
   13754:	80a1883a 	add	r16,r16,r2
   13758:	d9800a15 	stw	r6,40(sp)
   1375c:	d8c01115 	stw	r3,68(sp)
   13760:	003f1d06 	br	133d8 <_dtoa_r+0x8bc>
   13764:	a03f0c1e 	bne	r20,zero,13398 <_dtoa_r+0x87c>
   13768:	00800434 	movhi	r2,16
   1376c:	10bfffc4 	addi	r2,r2,-1
   13770:	a884703a 	and	r2,r21,r2
   13774:	103f081e 	bne	r2,zero,13398 <_dtoa_r+0x87c>
   13778:	a89ffc2c 	andhi	r2,r21,32752
   1377c:	103f0626 	beq	r2,zero,13398 <_dtoa_r+0x87c>
   13780:	d8c01117 	ldw	r3,68(sp)
   13784:	d9000a17 	ldw	r4,40(sp)
   13788:	18c00044 	addi	r3,r3,1
   1378c:	21000044 	addi	r4,r4,1
   13790:	d8c01115 	stw	r3,68(sp)
   13794:	d9000a15 	stw	r4,40(sp)
   13798:	003f0006 	br	1339c <_dtoa_r+0x880>
   1379c:	d9400717 	ldw	r5,28(sp)
   137a0:	d9001617 	ldw	r4,88(sp)
   137a4:	0016a640 	call	16a64 <__pow5mult>
   137a8:	d8800715 	stw	r2,28(sp)
   137ac:	003eed06 	br	13364 <_dtoa_r+0x848>
   137b0:	1000021e 	bne	r2,zero,137bc <_dtoa_r+0xca0>
   137b4:	b880004c 	andi	r2,r23,1
   137b8:	103fc11e 	bne	r2,zero,136c0 <_dtoa_r+0xba4>
   137bc:	b5bfffc4 	addi	r22,r22,-1
   137c0:	b0c00007 	ldb	r3,0(r22)
   137c4:	00800c04 	movi	r2,48
   137c8:	18bffc26 	beq	r3,r2,137bc <_dtoa_r+0xca0>
   137cc:	b7000044 	addi	fp,r22,1
   137d0:	003fcb06 	br	13700 <_dtoa_r+0xbe4>
   137d4:	d9800d17 	ldw	r6,52(sp)
   137d8:	018fc83a 	sub	r7,zero,r6
   137dc:	3801f726 	beq	r7,zero,13fbc <_dtoa_r+0x14a0>
   137e0:	398003cc 	andi	r6,r7,15
   137e4:	300c90fa 	slli	r6,r6,3
   137e8:	01400174 	movhi	r5,5
   137ec:	29604e04 	addi	r5,r5,-32456
   137f0:	d9001217 	ldw	r4,72(sp)
   137f4:	314d883a 	add	r6,r6,r5
   137f8:	30c00117 	ldw	r3,4(r6)
   137fc:	30800017 	ldw	r2,0(r6)
   13800:	d9401317 	ldw	r5,76(sp)
   13804:	3821d13a 	srai	r16,r7,4
   13808:	100d883a 	mov	r6,r2
   1380c:	180f883a 	mov	r7,r3
   13810:	0018aa40 	call	18aa4 <__muldf3>
   13814:	1011883a 	mov	r8,r2
   13818:	1813883a 	mov	r9,r3
   1381c:	1029883a 	mov	r20,r2
   13820:	182b883a 	mov	r21,r3
   13824:	8001e526 	beq	r16,zero,13fbc <_dtoa_r+0x14a0>
   13828:	05800084 	movi	r22,2
   1382c:	04400174 	movhi	r17,5
   13830:	8c608004 	addi	r17,r17,-32256
   13834:	8080004c 	andi	r2,r16,1
   13838:	1005003a 	cmpeq	r2,r2,zero
   1383c:	1000081e 	bne	r2,zero,13860 <_dtoa_r+0xd44>
   13840:	89800017 	ldw	r6,0(r17)
   13844:	89c00117 	ldw	r7,4(r17)
   13848:	480b883a 	mov	r5,r9
   1384c:	4009883a 	mov	r4,r8
   13850:	0018aa40 	call	18aa4 <__muldf3>
   13854:	1011883a 	mov	r8,r2
   13858:	b5800044 	addi	r22,r22,1
   1385c:	1813883a 	mov	r9,r3
   13860:	8021d07a 	srai	r16,r16,1
   13864:	8c400204 	addi	r17,r17,8
   13868:	803ff21e 	bne	r16,zero,13834 <_dtoa_r+0xd18>
   1386c:	4029883a 	mov	r20,r8
   13870:	482b883a 	mov	r21,r9
   13874:	003dca06 	br	12fa0 <_dtoa_r+0x484>
   13878:	d9000817 	ldw	r4,32(sp)
   1387c:	2005003a 	cmpeq	r2,r4,zero
   13880:	1001f61e 	bne	r2,zero,1405c <_dtoa_r+0x1540>
   13884:	dc001117 	ldw	r16,68(sp)
   13888:	dc801017 	ldw	r18,64(sp)
   1388c:	18c10cc4 	addi	r3,r3,1075
   13890:	003f6106 	br	13618 <_dtoa_r+0xafc>
   13894:	d8000b15 	stw	zero,44(sp)
   13898:	d9802617 	ldw	r6,152(sp)
   1389c:	d8c00d17 	ldw	r3,52(sp)
   138a0:	30800044 	addi	r2,r6,1
   138a4:	18ad883a 	add	r22,r3,r2
   138a8:	b13fffc4 	addi	r4,r22,-1
   138ac:	d9000e15 	stw	r4,56(sp)
   138b0:	0581f60e 	bge	zero,r22,1408c <_dtoa_r+0x1570>
   138b4:	dd800f15 	stw	r22,60(sp)
   138b8:	003f3006 	br	1357c <_dtoa_r+0xa60>
   138bc:	d8000b15 	stw	zero,44(sp)
   138c0:	d9002617 	ldw	r4,152(sp)
   138c4:	0101eb0e 	bge	zero,r4,14074 <_dtoa_r+0x1558>
   138c8:	202d883a 	mov	r22,r4
   138cc:	d9000e15 	stw	r4,56(sp)
   138d0:	d9000f15 	stw	r4,60(sp)
   138d4:	003f2906 	br	1357c <_dtoa_r+0xa60>
   138d8:	01800044 	movi	r6,1
   138dc:	d9800b15 	stw	r6,44(sp)
   138e0:	003ff706 	br	138c0 <_dtoa_r+0xda4>
   138e4:	01000044 	movi	r4,1
   138e8:	d9000b15 	stw	r4,44(sp)
   138ec:	003fea06 	br	13898 <_dtoa_r+0xd7c>
   138f0:	04000c0e 	bge	zero,r16,13924 <_dtoa_r+0xe08>
   138f4:	d9400717 	ldw	r5,28(sp)
   138f8:	d9001617 	ldw	r4,88(sp)
   138fc:	01800044 	movi	r6,1
   13900:	00165f40 	call	165f4 <__lshift>
   13904:	1009883a 	mov	r4,r2
   13908:	900b883a 	mov	r5,r18
   1390c:	d8800715 	stw	r2,28(sp)
   13910:	0015e0c0 	call	15e0c <__mcmp>
   13914:	0081e00e 	bge	zero,r2,14098 <_dtoa_r+0x157c>
   13918:	bdc00044 	addi	r23,r23,1
   1391c:	00800e84 	movi	r2,58
   13920:	b881a226 	beq	r23,r2,13fac <_dtoa_r+0x1490>
   13924:	b7000044 	addi	fp,r22,1
   13928:	b5c00005 	stb	r23,0(r22)
   1392c:	003f7406 	br	13700 <_dtoa_r+0xbe4>
   13930:	00800e44 	movi	r2,57
   13934:	b8819d26 	beq	r23,r2,13fac <_dtoa_r+0x1490>
   13938:	053ffa0e 	bge	zero,r20,13924 <_dtoa_r+0xe08>
   1393c:	8dc00c44 	addi	r23,r17,49
   13940:	003ff806 	br	13924 <_dtoa_r+0xe08>
   13944:	d9001617 	ldw	r4,88(sp)
   13948:	a80b883a 	mov	r5,r21
   1394c:	04000044 	movi	r16,1
   13950:	0015cb00 	call	15cb0 <_Bfree>
   13954:	003edf06 	br	134d4 <_dtoa_r+0x9b8>
   13958:	d9001617 	ldw	r4,88(sp)
   1395c:	980b883a 	mov	r5,r19
   13960:	01800284 	movi	r6,10
   13964:	000f883a 	mov	r7,zero
   13968:	00169640 	call	16964 <__multadd>
   1396c:	1027883a 	mov	r19,r2
   13970:	d8800615 	stw	r2,24(sp)
   13974:	003ebb06 	br	13464 <_dtoa_r+0x948>
   13978:	d9801117 	ldw	r6,68(sp)
   1397c:	d8800d17 	ldw	r2,52(sp)
   13980:	d8000915 	stw	zero,36(sp)
   13984:	308dc83a 	sub	r6,r6,r2
   13988:	0087c83a 	sub	r3,zero,r2
   1398c:	d9801115 	stw	r6,68(sp)
   13990:	d8c01015 	stw	r3,64(sp)
   13994:	003cfe06 	br	12d90 <_dtoa_r+0x274>
   13998:	018dc83a 	sub	r6,zero,r6
   1399c:	d9801115 	stw	r6,68(sp)
   139a0:	d8000a15 	stw	zero,40(sp)
   139a4:	003cf306 	br	12d74 <_dtoa_r+0x258>
   139a8:	d9000d17 	ldw	r4,52(sp)
   139ac:	00193680 	call	19368 <__floatsidf>
   139b0:	880b883a 	mov	r5,r17
   139b4:	8009883a 	mov	r4,r16
   139b8:	180f883a 	mov	r7,r3
   139bc:	100d883a 	mov	r6,r2
   139c0:	00191480 	call	19148 <__nedf2>
   139c4:	103ce126 	beq	r2,zero,12d4c <_dtoa_r+0x230>
   139c8:	d9800d17 	ldw	r6,52(sp)
   139cc:	31bfffc4 	addi	r6,r6,-1
   139d0:	d9800d15 	stw	r6,52(sp)
   139d4:	003cdd06 	br	12d4c <_dtoa_r+0x230>
   139d8:	d9000717 	ldw	r4,28(sp)
   139dc:	900b883a 	mov	r5,r18
   139e0:	0015e0c0 	call	15e0c <__mcmp>
   139e4:	103e8d0e 	bge	r2,zero,1341c <_dtoa_r+0x900>
   139e8:	d9400717 	ldw	r5,28(sp)
   139ec:	d9001617 	ldw	r4,88(sp)
   139f0:	01800284 	movi	r6,10
   139f4:	000f883a 	mov	r7,zero
   139f8:	00169640 	call	16964 <__multadd>
   139fc:	d9800d17 	ldw	r6,52(sp)
   13a00:	d8800715 	stw	r2,28(sp)
   13a04:	31bfffc4 	addi	r6,r6,-1
   13a08:	d9800d15 	stw	r6,52(sp)
   13a0c:	b001a71e 	bne	r22,zero,140ac <_dtoa_r+0x1590>
   13a10:	d8800e17 	ldw	r2,56(sp)
   13a14:	d8800f15 	stw	r2,60(sp)
   13a18:	003e8006 	br	1341c <_dtoa_r+0x900>
   13a1c:	90800417 	ldw	r2,16(r18)
   13a20:	1085883a 	add	r2,r2,r2
   13a24:	1085883a 	add	r2,r2,r2
   13a28:	1485883a 	add	r2,r2,r18
   13a2c:	11000417 	ldw	r4,16(r2)
   13a30:	0015cd80 	call	15cd8 <__hi0bits>
   13a34:	00c00804 	movi	r3,32
   13a38:	1887c83a 	sub	r3,r3,r2
   13a3c:	003e5a06 	br	133a8 <_dtoa_r+0x88c>
   13a40:	d9400717 	ldw	r5,28(sp)
   13a44:	d9801017 	ldw	r6,64(sp)
   13a48:	d9001617 	ldw	r4,88(sp)
   13a4c:	0016a640 	call	16a64 <__pow5mult>
   13a50:	d8800715 	stw	r2,28(sp)
   13a54:	003e4306 	br	13364 <_dtoa_r+0x848>
   13a58:	d9800f17 	ldw	r6,60(sp)
   13a5c:	d8800d17 	ldw	r2,52(sp)
   13a60:	d9800315 	stw	r6,12(sp)
   13a64:	d8800415 	stw	r2,16(sp)
   13a68:	d8c00b17 	ldw	r3,44(sp)
   13a6c:	1805003a 	cmpeq	r2,r3,zero
   13a70:	1000e21e 	bne	r2,zero,13dfc <_dtoa_r+0x12e0>
   13a74:	d9000317 	ldw	r4,12(sp)
   13a78:	0005883a 	mov	r2,zero
   13a7c:	00cff834 	movhi	r3,16352
   13a80:	200c90fa 	slli	r6,r4,3
   13a84:	01000174 	movhi	r4,5
   13a88:	21204e04 	addi	r4,r4,-32456
   13a8c:	180b883a 	mov	r5,r3
   13a90:	310d883a 	add	r6,r6,r4
   13a94:	327fff17 	ldw	r9,-4(r6)
   13a98:	323ffe17 	ldw	r8,-8(r6)
   13a9c:	1009883a 	mov	r4,r2
   13aa0:	480f883a 	mov	r7,r9
   13aa4:	400d883a 	mov	r6,r8
   13aa8:	0018e680 	call	18e68 <__divdf3>
   13aac:	180b883a 	mov	r5,r3
   13ab0:	b00d883a 	mov	r6,r22
   13ab4:	b80f883a 	mov	r7,r23
   13ab8:	1009883a 	mov	r4,r2
   13abc:	00189b00 	call	189b0 <__subdf3>
   13ac0:	a80b883a 	mov	r5,r21
   13ac4:	a009883a 	mov	r4,r20
   13ac8:	d8c01915 	stw	r3,100(sp)
   13acc:	d8801815 	stw	r2,96(sp)
   13ad0:	00194600 	call	19460 <__fixdfsi>
   13ad4:	1009883a 	mov	r4,r2
   13ad8:	1027883a 	mov	r19,r2
   13adc:	00193680 	call	19368 <__floatsidf>
   13ae0:	a80b883a 	mov	r5,r21
   13ae4:	a009883a 	mov	r4,r20
   13ae8:	180f883a 	mov	r7,r3
   13aec:	100d883a 	mov	r6,r2
   13af0:	00189b00 	call	189b0 <__subdf3>
   13af4:	d9801817 	ldw	r6,96(sp)
   13af8:	1823883a 	mov	r17,r3
   13afc:	d8801415 	stw	r2,80(sp)
   13b00:	302d883a 	mov	r22,r6
   13b04:	d9800517 	ldw	r6,20(sp)
   13b08:	9cc00c04 	addi	r19,r19,48
   13b0c:	dc401515 	stw	r17,84(sp)
   13b10:	d8c01917 	ldw	r3,100(sp)
   13b14:	34c00005 	stb	r19,0(r6)
   13b18:	d8800517 	ldw	r2,20(sp)
   13b1c:	d9401917 	ldw	r5,100(sp)
   13b20:	d9801417 	ldw	r6,80(sp)
   13b24:	b009883a 	mov	r4,r22
   13b28:	880f883a 	mov	r7,r17
   13b2c:	182f883a 	mov	r23,r3
   13b30:	17000044 	addi	fp,r2,1
   13b34:	00191d00 	call	191d0 <__gtdf2>
   13b38:	00804e16 	blt	zero,r2,13c74 <_dtoa_r+0x1158>
   13b3c:	d9801417 	ldw	r6,80(sp)
   13b40:	0005883a 	mov	r2,zero
   13b44:	00cffc34 	movhi	r3,16368
   13b48:	180b883a 	mov	r5,r3
   13b4c:	880f883a 	mov	r7,r17
   13b50:	1009883a 	mov	r4,r2
   13b54:	00189b00 	call	189b0 <__subdf3>
   13b58:	d9401917 	ldw	r5,100(sp)
   13b5c:	180f883a 	mov	r7,r3
   13b60:	b009883a 	mov	r4,r22
   13b64:	100d883a 	mov	r6,r2
   13b68:	00191d00 	call	191d0 <__gtdf2>
   13b6c:	00bda216 	blt	zero,r2,131f8 <_dtoa_r+0x6dc>
   13b70:	d8c00317 	ldw	r3,12(sp)
   13b74:	00800044 	movi	r2,1
   13b78:	10c01216 	blt	r2,r3,13bc4 <_dtoa_r+0x10a8>
   13b7c:	003d4506 	br	13094 <_dtoa_r+0x578>
   13b80:	d9801417 	ldw	r6,80(sp)
   13b84:	0005883a 	mov	r2,zero
   13b88:	00cffc34 	movhi	r3,16368
   13b8c:	180b883a 	mov	r5,r3
   13b90:	880f883a 	mov	r7,r17
   13b94:	1009883a 	mov	r4,r2
   13b98:	00189b00 	call	189b0 <__subdf3>
   13b9c:	d9c01b17 	ldw	r7,108(sp)
   13ba0:	180b883a 	mov	r5,r3
   13ba4:	1009883a 	mov	r4,r2
   13ba8:	b00d883a 	mov	r6,r22
   13bac:	00192e00 	call	192e0 <__ltdf2>
   13bb0:	103d9116 	blt	r2,zero,131f8 <_dtoa_r+0x6dc>
   13bb4:	d9800517 	ldw	r6,20(sp)
   13bb8:	d9000317 	ldw	r4,12(sp)
   13bbc:	3105883a 	add	r2,r6,r4
   13bc0:	e0bd3426 	beq	fp,r2,13094 <_dtoa_r+0x578>
   13bc4:	04500934 	movhi	r17,16420
   13bc8:	0021883a 	mov	r16,zero
   13bcc:	b80b883a 	mov	r5,r23
   13bd0:	b009883a 	mov	r4,r22
   13bd4:	800d883a 	mov	r6,r16
   13bd8:	880f883a 	mov	r7,r17
   13bdc:	0018aa40 	call	18aa4 <__muldf3>
   13be0:	d9401517 	ldw	r5,84(sp)
   13be4:	d9001417 	ldw	r4,80(sp)
   13be8:	880f883a 	mov	r7,r17
   13bec:	000d883a 	mov	r6,zero
   13bf0:	d8801a15 	stw	r2,104(sp)
   13bf4:	d8c01b15 	stw	r3,108(sp)
   13bf8:	0018aa40 	call	18aa4 <__muldf3>
   13bfc:	180b883a 	mov	r5,r3
   13c00:	1009883a 	mov	r4,r2
   13c04:	1823883a 	mov	r17,r3
   13c08:	1021883a 	mov	r16,r2
   13c0c:	00194600 	call	19460 <__fixdfsi>
   13c10:	1009883a 	mov	r4,r2
   13c14:	102b883a 	mov	r21,r2
   13c18:	00193680 	call	19368 <__floatsidf>
   13c1c:	880b883a 	mov	r5,r17
   13c20:	8009883a 	mov	r4,r16
   13c24:	180f883a 	mov	r7,r3
   13c28:	100d883a 	mov	r6,r2
   13c2c:	00189b00 	call	189b0 <__subdf3>
   13c30:	1021883a 	mov	r16,r2
   13c34:	d9001b17 	ldw	r4,108(sp)
   13c38:	1823883a 	mov	r17,r3
   13c3c:	dc001415 	stw	r16,80(sp)
   13c40:	ad400c04 	addi	r21,r21,48
   13c44:	dc401515 	stw	r17,84(sp)
   13c48:	d8801a17 	ldw	r2,104(sp)
   13c4c:	e5400005 	stb	r21,0(fp)
   13c50:	202f883a 	mov	r23,r4
   13c54:	d9c01b17 	ldw	r7,108(sp)
   13c58:	d9001417 	ldw	r4,80(sp)
   13c5c:	880b883a 	mov	r5,r17
   13c60:	100d883a 	mov	r6,r2
   13c64:	102d883a 	mov	r22,r2
   13c68:	e7000044 	addi	fp,fp,1
   13c6c:	00192e00 	call	192e0 <__ltdf2>
   13c70:	103fc30e 	bge	r2,zero,13b80 <_dtoa_r+0x1064>
   13c74:	d9000417 	ldw	r4,16(sp)
   13c78:	d9000d15 	stw	r4,52(sp)
   13c7c:	003d7106 	br	13244 <_dtoa_r+0x728>
   13c80:	d9801717 	ldw	r6,92(sp)
   13c84:	00800084 	movi	r2,2
   13c88:	11bde60e 	bge	r2,r6,13424 <_dtoa_r+0x908>
   13c8c:	203cfb1e 	bne	r4,zero,1307c <_dtoa_r+0x560>
   13c90:	d9001617 	ldw	r4,88(sp)
   13c94:	900b883a 	mov	r5,r18
   13c98:	01800144 	movi	r6,5
   13c9c:	000f883a 	mov	r7,zero
   13ca0:	00169640 	call	16964 <__multadd>
   13ca4:	d9000717 	ldw	r4,28(sp)
   13ca8:	100b883a 	mov	r5,r2
   13cac:	1025883a 	mov	r18,r2
   13cb0:	0015e0c0 	call	15e0c <__mcmp>
   13cb4:	00bcf10e 	bge	zero,r2,1307c <_dtoa_r+0x560>
   13cb8:	d8c00d17 	ldw	r3,52(sp)
   13cbc:	d9000517 	ldw	r4,20(sp)
   13cc0:	d8000615 	stw	zero,24(sp)
   13cc4:	18c00044 	addi	r3,r3,1
   13cc8:	d8c00d15 	stw	r3,52(sp)
   13ccc:	00800c44 	movi	r2,49
   13cd0:	27000044 	addi	fp,r4,1
   13cd4:	20800005 	stb	r2,0(r4)
   13cd8:	003e8906 	br	13700 <_dtoa_r+0xbe4>
   13cdc:	d8c00517 	ldw	r3,20(sp)
   13ce0:	003bc206 	br	12bec <_dtoa_r+0xd0>
   13ce4:	01800174 	movhi	r6,5
   13ce8:	31a08004 	addi	r6,r6,-32256
   13cec:	30c00917 	ldw	r3,36(r6)
   13cf0:	30800817 	ldw	r2,32(r6)
   13cf4:	d9001217 	ldw	r4,72(sp)
   13cf8:	d9401317 	ldw	r5,76(sp)
   13cfc:	180f883a 	mov	r7,r3
   13d00:	100d883a 	mov	r6,r2
   13d04:	0018e680 	call	18e68 <__divdf3>
   13d08:	948003cc 	andi	r18,r18,15
   13d0c:	058000c4 	movi	r22,3
   13d10:	1029883a 	mov	r20,r2
   13d14:	182b883a 	mov	r21,r3
   13d18:	003c8906 	br	12f40 <_dtoa_r+0x424>
   13d1c:	d9001017 	ldw	r4,64(sp)
   13d20:	d9800917 	ldw	r6,36(sp)
   13d24:	0025883a 	mov	r18,zero
   13d28:	1105c83a 	sub	r2,r2,r4
   13d2c:	2089883a 	add	r4,r4,r2
   13d30:	308d883a 	add	r6,r6,r2
   13d34:	d9001015 	stw	r4,64(sp)
   13d38:	d9800915 	stw	r6,36(sp)
   13d3c:	003e3206 	br	13608 <_dtoa_r+0xaec>
   13d40:	28800044 	addi	r2,r5,1
   13d44:	27000044 	addi	fp,r4,1
   13d48:	20800005 	stb	r2,0(r4)
   13d4c:	003e6c06 	br	13700 <_dtoa_r+0xbe4>
   13d50:	d8800f17 	ldw	r2,60(sp)
   13d54:	00bce016 	blt	zero,r2,130d8 <_dtoa_r+0x5bc>
   13d58:	d9800f17 	ldw	r6,60(sp)
   13d5c:	303cc51e 	bne	r6,zero,13074 <_dtoa_r+0x558>
   13d60:	0005883a 	mov	r2,zero
   13d64:	00d00534 	movhi	r3,16404
   13d68:	980b883a 	mov	r5,r19
   13d6c:	180f883a 	mov	r7,r3
   13d70:	9009883a 	mov	r4,r18
   13d74:	100d883a 	mov	r6,r2
   13d78:	0018aa40 	call	18aa4 <__muldf3>
   13d7c:	180b883a 	mov	r5,r3
   13d80:	a80f883a 	mov	r7,r21
   13d84:	1009883a 	mov	r4,r2
   13d88:	a00d883a 	mov	r6,r20
   13d8c:	00192580 	call	19258 <__gedf2>
   13d90:	103cb80e 	bge	r2,zero,13074 <_dtoa_r+0x558>
   13d94:	0027883a 	mov	r19,zero
   13d98:	0025883a 	mov	r18,zero
   13d9c:	003fc606 	br	13cb8 <_dtoa_r+0x119c>
   13da0:	99400117 	ldw	r5,4(r19)
   13da4:	d9001617 	ldw	r4,88(sp)
   13da8:	00162300 	call	16230 <_Balloc>
   13dac:	99800417 	ldw	r6,16(r19)
   13db0:	11000304 	addi	r4,r2,12
   13db4:	99400304 	addi	r5,r19,12
   13db8:	318d883a 	add	r6,r6,r6
   13dbc:	318d883a 	add	r6,r6,r6
   13dc0:	31800204 	addi	r6,r6,8
   13dc4:	1023883a 	mov	r17,r2
   13dc8:	0015a980 	call	15a98 <memcpy>
   13dcc:	d9001617 	ldw	r4,88(sp)
   13dd0:	880b883a 	mov	r5,r17
   13dd4:	01800044 	movi	r6,1
   13dd8:	00165f40 	call	165f4 <__lshift>
   13ddc:	100b883a 	mov	r5,r2
   13de0:	003d9c06 	br	13454 <_dtoa_r+0x938>
   13de4:	00800e44 	movi	r2,57
   13de8:	b8807026 	beq	r23,r2,13fac <_dtoa_r+0x1490>
   13dec:	b8800044 	addi	r2,r23,1
   13df0:	b7000044 	addi	fp,r22,1
   13df4:	b0800005 	stb	r2,0(r22)
   13df8:	003e4106 	br	13700 <_dtoa_r+0xbe4>
   13dfc:	d8800317 	ldw	r2,12(sp)
   13e00:	01800174 	movhi	r6,5
   13e04:	31a04e04 	addi	r6,r6,-32456
   13e08:	b009883a 	mov	r4,r22
   13e0c:	100e90fa 	slli	r7,r2,3
   13e10:	b80b883a 	mov	r5,r23
   13e14:	398f883a 	add	r7,r7,r6
   13e18:	38bffe17 	ldw	r2,-8(r7)
   13e1c:	d9800517 	ldw	r6,20(sp)
   13e20:	38ffff17 	ldw	r3,-4(r7)
   13e24:	37000044 	addi	fp,r6,1
   13e28:	180f883a 	mov	r7,r3
   13e2c:	100d883a 	mov	r6,r2
   13e30:	0018aa40 	call	18aa4 <__muldf3>
   13e34:	a80b883a 	mov	r5,r21
   13e38:	a009883a 	mov	r4,r20
   13e3c:	182f883a 	mov	r23,r3
   13e40:	102d883a 	mov	r22,r2
   13e44:	00194600 	call	19460 <__fixdfsi>
   13e48:	1009883a 	mov	r4,r2
   13e4c:	1027883a 	mov	r19,r2
   13e50:	00193680 	call	19368 <__floatsidf>
   13e54:	a80b883a 	mov	r5,r21
   13e58:	a009883a 	mov	r4,r20
   13e5c:	180f883a 	mov	r7,r3
   13e60:	100d883a 	mov	r6,r2
   13e64:	00189b00 	call	189b0 <__subdf3>
   13e68:	180b883a 	mov	r5,r3
   13e6c:	d8c00517 	ldw	r3,20(sp)
   13e70:	9cc00c04 	addi	r19,r19,48
   13e74:	1009883a 	mov	r4,r2
   13e78:	1cc00005 	stb	r19,0(r3)
   13e7c:	2021883a 	mov	r16,r4
   13e80:	d9000317 	ldw	r4,12(sp)
   13e84:	00800044 	movi	r2,1
   13e88:	2823883a 	mov	r17,r5
   13e8c:	20802226 	beq	r4,r2,13f18 <_dtoa_r+0x13fc>
   13e90:	1029883a 	mov	r20,r2
   13e94:	0005883a 	mov	r2,zero
   13e98:	00d00934 	movhi	r3,16420
   13e9c:	180f883a 	mov	r7,r3
   13ea0:	100d883a 	mov	r6,r2
   13ea4:	880b883a 	mov	r5,r17
   13ea8:	8009883a 	mov	r4,r16
   13eac:	0018aa40 	call	18aa4 <__muldf3>
   13eb0:	180b883a 	mov	r5,r3
   13eb4:	1009883a 	mov	r4,r2
   13eb8:	1823883a 	mov	r17,r3
   13ebc:	1021883a 	mov	r16,r2
   13ec0:	00194600 	call	19460 <__fixdfsi>
   13ec4:	1009883a 	mov	r4,r2
   13ec8:	102b883a 	mov	r21,r2
   13ecc:	00193680 	call	19368 <__floatsidf>
   13ed0:	880b883a 	mov	r5,r17
   13ed4:	8009883a 	mov	r4,r16
   13ed8:	180f883a 	mov	r7,r3
   13edc:	100d883a 	mov	r6,r2
   13ee0:	00189b00 	call	189b0 <__subdf3>
   13ee4:	180b883a 	mov	r5,r3
   13ee8:	d8c00517 	ldw	r3,20(sp)
   13eec:	1009883a 	mov	r4,r2
   13ef0:	ad400c04 	addi	r21,r21,48
   13ef4:	1d05883a 	add	r2,r3,r20
   13ef8:	15400005 	stb	r21,0(r2)
   13efc:	2021883a 	mov	r16,r4
   13f00:	d9000317 	ldw	r4,12(sp)
   13f04:	a5000044 	addi	r20,r20,1
   13f08:	2823883a 	mov	r17,r5
   13f0c:	a13fe11e 	bne	r20,r4,13e94 <_dtoa_r+0x1378>
   13f10:	e505883a 	add	r2,fp,r20
   13f14:	173fffc4 	addi	fp,r2,-1
   13f18:	0025883a 	mov	r18,zero
   13f1c:	04cff834 	movhi	r19,16352
   13f20:	b009883a 	mov	r4,r22
   13f24:	b80b883a 	mov	r5,r23
   13f28:	900d883a 	mov	r6,r18
   13f2c:	980f883a 	mov	r7,r19
   13f30:	0018a300 	call	18a30 <__adddf3>
   13f34:	180b883a 	mov	r5,r3
   13f38:	1009883a 	mov	r4,r2
   13f3c:	800d883a 	mov	r6,r16
   13f40:	880f883a 	mov	r7,r17
   13f44:	00192e00 	call	192e0 <__ltdf2>
   13f48:	103cab16 	blt	r2,zero,131f8 <_dtoa_r+0x6dc>
   13f4c:	0009883a 	mov	r4,zero
   13f50:	980b883a 	mov	r5,r19
   13f54:	b80f883a 	mov	r7,r23
   13f58:	b00d883a 	mov	r6,r22
   13f5c:	00189b00 	call	189b0 <__subdf3>
   13f60:	180b883a 	mov	r5,r3
   13f64:	880f883a 	mov	r7,r17
   13f68:	1009883a 	mov	r4,r2
   13f6c:	800d883a 	mov	r6,r16
   13f70:	00191d00 	call	191d0 <__gtdf2>
   13f74:	00bc470e 	bge	zero,r2,13094 <_dtoa_r+0x578>
   13f78:	00c00c04 	movi	r3,48
   13f7c:	e73fffc4 	addi	fp,fp,-1
   13f80:	e0800007 	ldb	r2,0(fp)
   13f84:	10fffd26 	beq	r2,r3,13f7c <_dtoa_r+0x1460>
   13f88:	d9800417 	ldw	r6,16(sp)
   13f8c:	e7000044 	addi	fp,fp,1
   13f90:	d9800d15 	stw	r6,52(sp)
   13f94:	003cab06 	br	13244 <_dtoa_r+0x728>
   13f98:	d8c00f17 	ldw	r3,60(sp)
   13f9c:	d9001117 	ldw	r4,68(sp)
   13fa0:	20e1c83a 	sub	r16,r4,r3
   13fa4:	0007883a 	mov	r3,zero
   13fa8:	003d9b06 	br	13618 <_dtoa_r+0xafc>
   13fac:	00800e44 	movi	r2,57
   13fb0:	b0800005 	stb	r2,0(r22)
   13fb4:	b5800044 	addi	r22,r22,1
   13fb8:	003dc106 	br	136c0 <_dtoa_r+0xba4>
   13fbc:	05800084 	movi	r22,2
   13fc0:	003bf706 	br	12fa0 <_dtoa_r+0x484>
   13fc4:	d9000f17 	ldw	r4,60(sp)
   13fc8:	013c000e 	bge	zero,r4,12fcc <_dtoa_r+0x4b0>
   13fcc:	d9800e17 	ldw	r6,56(sp)
   13fd0:	01bc300e 	bge	zero,r6,13094 <_dtoa_r+0x578>
   13fd4:	0005883a 	mov	r2,zero
   13fd8:	00d00934 	movhi	r3,16420
   13fdc:	a80b883a 	mov	r5,r21
   13fe0:	180f883a 	mov	r7,r3
   13fe4:	a009883a 	mov	r4,r20
   13fe8:	100d883a 	mov	r6,r2
   13fec:	0018aa40 	call	18aa4 <__muldf3>
   13ff0:	b1000044 	addi	r4,r22,1
   13ff4:	1021883a 	mov	r16,r2
   13ff8:	1823883a 	mov	r17,r3
   13ffc:	00193680 	call	19368 <__floatsidf>
   14000:	880b883a 	mov	r5,r17
   14004:	8009883a 	mov	r4,r16
   14008:	180f883a 	mov	r7,r3
   1400c:	100d883a 	mov	r6,r2
   14010:	0018aa40 	call	18aa4 <__muldf3>
   14014:	0011883a 	mov	r8,zero
   14018:	02500734 	movhi	r9,16412
   1401c:	180b883a 	mov	r5,r3
   14020:	480f883a 	mov	r7,r9
   14024:	1009883a 	mov	r4,r2
   14028:	400d883a 	mov	r6,r8
   1402c:	0018a300 	call	18a30 <__adddf3>
   14030:	102d883a 	mov	r22,r2
   14034:	00bf3034 	movhi	r2,64704
   14038:	10ef883a 	add	r23,r2,r3
   1403c:	d8800d17 	ldw	r2,52(sp)
   14040:	d8c00e17 	ldw	r3,56(sp)
   14044:	8029883a 	mov	r20,r16
   14048:	10bfffc4 	addi	r2,r2,-1
   1404c:	882b883a 	mov	r21,r17
   14050:	d8800415 	stw	r2,16(sp)
   14054:	d8c00315 	stw	r3,12(sp)
   14058:	003e8306 	br	13a68 <_dtoa_r+0xf4c>
   1405c:	d8800117 	ldw	r2,4(sp)
   14060:	dc001117 	ldw	r16,68(sp)
   14064:	dc801017 	ldw	r18,64(sp)
   14068:	00c00d84 	movi	r3,54
   1406c:	1887c83a 	sub	r3,r3,r2
   14070:	003d6906 	br	13618 <_dtoa_r+0xafc>
   14074:	01800044 	movi	r6,1
   14078:	3021883a 	mov	r16,r6
   1407c:	d9800f15 	stw	r6,60(sp)
   14080:	d9802615 	stw	r6,152(sp)
   14084:	d9800e15 	stw	r6,56(sp)
   14088:	003b9306 	br	12ed8 <_dtoa_r+0x3bc>
   1408c:	b021883a 	mov	r16,r22
   14090:	dd800f15 	stw	r22,60(sp)
   14094:	003b9006 	br	12ed8 <_dtoa_r+0x3bc>
   14098:	103e221e 	bne	r2,zero,13924 <_dtoa_r+0xe08>
   1409c:	b880004c 	andi	r2,r23,1
   140a0:	1005003a 	cmpeq	r2,r2,zero
   140a4:	103e1f1e 	bne	r2,zero,13924 <_dtoa_r+0xe08>
   140a8:	003e1b06 	br	13918 <_dtoa_r+0xdfc>
   140ac:	d9001617 	ldw	r4,88(sp)
   140b0:	980b883a 	mov	r5,r19
   140b4:	01800284 	movi	r6,10
   140b8:	000f883a 	mov	r7,zero
   140bc:	00169640 	call	16964 <__multadd>
   140c0:	d8c00e17 	ldw	r3,56(sp)
   140c4:	1027883a 	mov	r19,r2
   140c8:	d8c00f15 	stw	r3,60(sp)
   140cc:	003cd306 	br	1341c <_dtoa_r+0x900>

000140d0 <_fflush_r>:
   140d0:	defffb04 	addi	sp,sp,-20
   140d4:	dcc00315 	stw	r19,12(sp)
   140d8:	dc800215 	stw	r18,8(sp)
   140dc:	dfc00415 	stw	ra,16(sp)
   140e0:	dc400115 	stw	r17,4(sp)
   140e4:	dc000015 	stw	r16,0(sp)
   140e8:	2027883a 	mov	r19,r4
   140ec:	2825883a 	mov	r18,r5
   140f0:	20000226 	beq	r4,zero,140fc <_fflush_r+0x2c>
   140f4:	20800e17 	ldw	r2,56(r4)
   140f8:	10005626 	beq	r2,zero,14254 <_fflush_r+0x184>
   140fc:	9100030b 	ldhu	r4,12(r18)
   14100:	20ffffcc 	andi	r3,r4,65535
   14104:	18e0001c 	xori	r3,r3,32768
   14108:	18e00004 	addi	r3,r3,-32768
   1410c:	1880020c 	andi	r2,r3,8
   14110:	1000261e 	bne	r2,zero,141ac <_fflush_r+0xdc>
   14114:	90c00117 	ldw	r3,4(r18)
   14118:	20820014 	ori	r2,r4,2048
   1411c:	9080030d 	sth	r2,12(r18)
   14120:	1009883a 	mov	r4,r2
   14124:	00c0400e 	bge	zero,r3,14228 <_fflush_r+0x158>
   14128:	92000a17 	ldw	r8,40(r18)
   1412c:	40004026 	beq	r8,zero,14230 <_fflush_r+0x160>
   14130:	2084000c 	andi	r2,r4,4096
   14134:	10005326 	beq	r2,zero,14284 <_fflush_r+0x1b4>
   14138:	94001417 	ldw	r16,80(r18)
   1413c:	9080030b 	ldhu	r2,12(r18)
   14140:	1080010c 	andi	r2,r2,4
   14144:	1000481e 	bne	r2,zero,14268 <_fflush_r+0x198>
   14148:	91400717 	ldw	r5,28(r18)
   1414c:	9809883a 	mov	r4,r19
   14150:	800d883a 	mov	r6,r16
   14154:	000f883a 	mov	r7,zero
   14158:	403ee83a 	callr	r8
   1415c:	8080261e 	bne	r16,r2,141f8 <_fflush_r+0x128>
   14160:	9080030b 	ldhu	r2,12(r18)
   14164:	91000417 	ldw	r4,16(r18)
   14168:	90000115 	stw	zero,4(r18)
   1416c:	10bdffcc 	andi	r2,r2,63487
   14170:	10ffffcc 	andi	r3,r2,65535
   14174:	18c4000c 	andi	r3,r3,4096
   14178:	9080030d 	sth	r2,12(r18)
   1417c:	91000015 	stw	r4,0(r18)
   14180:	18002b26 	beq	r3,zero,14230 <_fflush_r+0x160>
   14184:	0007883a 	mov	r3,zero
   14188:	1805883a 	mov	r2,r3
   1418c:	94001415 	stw	r16,80(r18)
   14190:	dfc00417 	ldw	ra,16(sp)
   14194:	dcc00317 	ldw	r19,12(sp)
   14198:	dc800217 	ldw	r18,8(sp)
   1419c:	dc400117 	ldw	r17,4(sp)
   141a0:	dc000017 	ldw	r16,0(sp)
   141a4:	dec00504 	addi	sp,sp,20
   141a8:	f800283a 	ret
   141ac:	94400417 	ldw	r17,16(r18)
   141b0:	88001f26 	beq	r17,zero,14230 <_fflush_r+0x160>
   141b4:	90800017 	ldw	r2,0(r18)
   141b8:	18c000cc 	andi	r3,r3,3
   141bc:	94400015 	stw	r17,0(r18)
   141c0:	1461c83a 	sub	r16,r2,r17
   141c4:	18002526 	beq	r3,zero,1425c <_fflush_r+0x18c>
   141c8:	0005883a 	mov	r2,zero
   141cc:	90800215 	stw	r2,8(r18)
   141d0:	0400170e 	bge	zero,r16,14230 <_fflush_r+0x160>
   141d4:	90c00917 	ldw	r3,36(r18)
   141d8:	91400717 	ldw	r5,28(r18)
   141dc:	880d883a 	mov	r6,r17
   141e0:	800f883a 	mov	r7,r16
   141e4:	9809883a 	mov	r4,r19
   141e8:	183ee83a 	callr	r3
   141ec:	88a3883a 	add	r17,r17,r2
   141f0:	80a1c83a 	sub	r16,r16,r2
   141f4:	00bff616 	blt	zero,r2,141d0 <_fflush_r+0x100>
   141f8:	9080030b 	ldhu	r2,12(r18)
   141fc:	00ffffc4 	movi	r3,-1
   14200:	10801014 	ori	r2,r2,64
   14204:	9080030d 	sth	r2,12(r18)
   14208:	1805883a 	mov	r2,r3
   1420c:	dfc00417 	ldw	ra,16(sp)
   14210:	dcc00317 	ldw	r19,12(sp)
   14214:	dc800217 	ldw	r18,8(sp)
   14218:	dc400117 	ldw	r17,4(sp)
   1421c:	dc000017 	ldw	r16,0(sp)
   14220:	dec00504 	addi	sp,sp,20
   14224:	f800283a 	ret
   14228:	90800f17 	ldw	r2,60(r18)
   1422c:	00bfbe16 	blt	zero,r2,14128 <_fflush_r+0x58>
   14230:	0007883a 	mov	r3,zero
   14234:	1805883a 	mov	r2,r3
   14238:	dfc00417 	ldw	ra,16(sp)
   1423c:	dcc00317 	ldw	r19,12(sp)
   14240:	dc800217 	ldw	r18,8(sp)
   14244:	dc400117 	ldw	r17,4(sp)
   14248:	dc000017 	ldw	r16,0(sp)
   1424c:	dec00504 	addi	sp,sp,20
   14250:	f800283a 	ret
   14254:	00143680 	call	14368 <__sinit>
   14258:	003fa806 	br	140fc <_fflush_r+0x2c>
   1425c:	90800517 	ldw	r2,20(r18)
   14260:	90800215 	stw	r2,8(r18)
   14264:	003fda06 	br	141d0 <_fflush_r+0x100>
   14268:	90800117 	ldw	r2,4(r18)
   1426c:	90c00c17 	ldw	r3,48(r18)
   14270:	80a1c83a 	sub	r16,r16,r2
   14274:	183fb426 	beq	r3,zero,14148 <_fflush_r+0x78>
   14278:	90800f17 	ldw	r2,60(r18)
   1427c:	80a1c83a 	sub	r16,r16,r2
   14280:	003fb106 	br	14148 <_fflush_r+0x78>
   14284:	91400717 	ldw	r5,28(r18)
   14288:	9809883a 	mov	r4,r19
   1428c:	000d883a 	mov	r6,zero
   14290:	01c00044 	movi	r7,1
   14294:	403ee83a 	callr	r8
   14298:	1021883a 	mov	r16,r2
   1429c:	00bfffc4 	movi	r2,-1
   142a0:	80800226 	beq	r16,r2,142ac <_fflush_r+0x1dc>
   142a4:	92000a17 	ldw	r8,40(r18)
   142a8:	003fa406 	br	1413c <_fflush_r+0x6c>
   142ac:	98c00017 	ldw	r3,0(r19)
   142b0:	00800744 	movi	r2,29
   142b4:	18bfde26 	beq	r3,r2,14230 <_fflush_r+0x160>
   142b8:	9080030b 	ldhu	r2,12(r18)
   142bc:	8007883a 	mov	r3,r16
   142c0:	10801014 	ori	r2,r2,64
   142c4:	9080030d 	sth	r2,12(r18)
   142c8:	003fcf06 	br	14208 <_fflush_r+0x138>

000142cc <fflush>:
   142cc:	01400074 	movhi	r5,1
   142d0:	29503404 	addi	r5,r5,16592
   142d4:	2007883a 	mov	r3,r4
   142d8:	20000526 	beq	r4,zero,142f0 <fflush+0x24>
   142dc:	00800174 	movhi	r2,5
   142e0:	10a77004 	addi	r2,r2,-25152
   142e4:	11000017 	ldw	r4,0(r2)
   142e8:	180b883a 	mov	r5,r3
   142ec:	00140d01 	jmpi	140d0 <_fflush_r>
   142f0:	00800174 	movhi	r2,5
   142f4:	10a77104 	addi	r2,r2,-25148
   142f8:	11000017 	ldw	r4,0(r2)
   142fc:	0014e9c1 	jmpi	14e9c <_fwalk_reent>

00014300 <std>:
   14300:	00800074 	movhi	r2,1
   14304:	109cde04 	addi	r2,r2,29560
   14308:	20800b15 	stw	r2,44(r4)
   1430c:	00800074 	movhi	r2,1
   14310:	109d1904 	addi	r2,r2,29796
   14314:	20800815 	stw	r2,32(r4)
   14318:	00c00074 	movhi	r3,1
   1431c:	18dcfa04 	addi	r3,r3,29672
   14320:	00800074 	movhi	r2,1
   14324:	109ce004 	addi	r2,r2,29568
   14328:	2140030d 	sth	r5,12(r4)
   1432c:	2180038d 	sth	r6,14(r4)
   14330:	20c00915 	stw	r3,36(r4)
   14334:	20800a15 	stw	r2,40(r4)
   14338:	20000015 	stw	zero,0(r4)
   1433c:	20000115 	stw	zero,4(r4)
   14340:	20000215 	stw	zero,8(r4)
   14344:	20000415 	stw	zero,16(r4)
   14348:	20000515 	stw	zero,20(r4)
   1434c:	20000615 	stw	zero,24(r4)
   14350:	21000715 	stw	r4,28(r4)
   14354:	f800283a 	ret

00014358 <__sfp_lock_acquire>:
   14358:	f800283a 	ret

0001435c <__sfp_lock_release>:
   1435c:	f800283a 	ret

00014360 <__sinit_lock_acquire>:
   14360:	f800283a 	ret

00014364 <__sinit_lock_release>:
   14364:	f800283a 	ret

00014368 <__sinit>:
   14368:	20800e17 	ldw	r2,56(r4)
   1436c:	defffd04 	addi	sp,sp,-12
   14370:	dc400115 	stw	r17,4(sp)
   14374:	dc000015 	stw	r16,0(sp)
   14378:	dfc00215 	stw	ra,8(sp)
   1437c:	04400044 	movi	r17,1
   14380:	01400104 	movi	r5,4
   14384:	000d883a 	mov	r6,zero
   14388:	2021883a 	mov	r16,r4
   1438c:	2200bb04 	addi	r8,r4,748
   14390:	200f883a 	mov	r7,r4
   14394:	10000526 	beq	r2,zero,143ac <__sinit+0x44>
   14398:	dfc00217 	ldw	ra,8(sp)
   1439c:	dc400117 	ldw	r17,4(sp)
   143a0:	dc000017 	ldw	r16,0(sp)
   143a4:	dec00304 	addi	sp,sp,12
   143a8:	f800283a 	ret
   143ac:	21000117 	ldw	r4,4(r4)
   143b0:	00800074 	movhi	r2,1
   143b4:	10911304 	addi	r2,r2,17484
   143b8:	00c000c4 	movi	r3,3
   143bc:	80800f15 	stw	r2,60(r16)
   143c0:	80c0b915 	stw	r3,740(r16)
   143c4:	8200ba15 	stw	r8,744(r16)
   143c8:	84400e15 	stw	r17,56(r16)
   143cc:	8000b815 	stw	zero,736(r16)
   143d0:	00143000 	call	14300 <std>
   143d4:	81000217 	ldw	r4,8(r16)
   143d8:	880d883a 	mov	r6,r17
   143dc:	800f883a 	mov	r7,r16
   143e0:	01400284 	movi	r5,10
   143e4:	00143000 	call	14300 <std>
   143e8:	81000317 	ldw	r4,12(r16)
   143ec:	800f883a 	mov	r7,r16
   143f0:	01400484 	movi	r5,18
   143f4:	01800084 	movi	r6,2
   143f8:	dfc00217 	ldw	ra,8(sp)
   143fc:	dc400117 	ldw	r17,4(sp)
   14400:	dc000017 	ldw	r16,0(sp)
   14404:	dec00304 	addi	sp,sp,12
   14408:	00143001 	jmpi	14300 <std>

0001440c <__fp_lock>:
   1440c:	0005883a 	mov	r2,zero
   14410:	f800283a 	ret

00014414 <__fp_unlock>:
   14414:	0005883a 	mov	r2,zero
   14418:	f800283a 	ret

0001441c <__fp_unlock_all>:
   1441c:	00800174 	movhi	r2,5
   14420:	10a77004 	addi	r2,r2,-25152
   14424:	11000017 	ldw	r4,0(r2)
   14428:	01400074 	movhi	r5,1
   1442c:	29510504 	addi	r5,r5,17428
   14430:	0014f641 	jmpi	14f64 <_fwalk>

00014434 <__fp_lock_all>:
   14434:	00800174 	movhi	r2,5
   14438:	10a77004 	addi	r2,r2,-25152
   1443c:	11000017 	ldw	r4,0(r2)
   14440:	01400074 	movhi	r5,1
   14444:	29510304 	addi	r5,r5,17420
   14448:	0014f641 	jmpi	14f64 <_fwalk>

0001444c <_cleanup_r>:
   1444c:	01400074 	movhi	r5,1
   14450:	295e0b04 	addi	r5,r5,30764
   14454:	0014f641 	jmpi	14f64 <_fwalk>

00014458 <_cleanup>:
   14458:	00800174 	movhi	r2,5
   1445c:	10a77104 	addi	r2,r2,-25148
   14460:	11000017 	ldw	r4,0(r2)
   14464:	001444c1 	jmpi	1444c <_cleanup_r>

00014468 <__sfmoreglue>:
   14468:	defffc04 	addi	sp,sp,-16
   1446c:	dc400115 	stw	r17,4(sp)
   14470:	2c401724 	muli	r17,r5,92
   14474:	dc800215 	stw	r18,8(sp)
   14478:	2825883a 	mov	r18,r5
   1447c:	89400304 	addi	r5,r17,12
   14480:	dc000015 	stw	r16,0(sp)
   14484:	dfc00315 	stw	ra,12(sp)
   14488:	00152740 	call	15274 <_malloc_r>
   1448c:	0021883a 	mov	r16,zero
   14490:	880d883a 	mov	r6,r17
   14494:	000b883a 	mov	r5,zero
   14498:	10000626 	beq	r2,zero,144b4 <__sfmoreglue+0x4c>
   1449c:	11000304 	addi	r4,r2,12
   144a0:	14800115 	stw	r18,4(r2)
   144a4:	10000015 	stw	zero,0(r2)
   144a8:	11000215 	stw	r4,8(r2)
   144ac:	1021883a 	mov	r16,r2
   144b0:	0015c180 	call	15c18 <memset>
   144b4:	8005883a 	mov	r2,r16
   144b8:	dfc00317 	ldw	ra,12(sp)
   144bc:	dc800217 	ldw	r18,8(sp)
   144c0:	dc400117 	ldw	r17,4(sp)
   144c4:	dc000017 	ldw	r16,0(sp)
   144c8:	dec00404 	addi	sp,sp,16
   144cc:	f800283a 	ret

000144d0 <__sfp>:
   144d0:	defffd04 	addi	sp,sp,-12
   144d4:	00800174 	movhi	r2,5
   144d8:	10a77104 	addi	r2,r2,-25148
   144dc:	dc000015 	stw	r16,0(sp)
   144e0:	14000017 	ldw	r16,0(r2)
   144e4:	dc400115 	stw	r17,4(sp)
   144e8:	dfc00215 	stw	ra,8(sp)
   144ec:	80800e17 	ldw	r2,56(r16)
   144f0:	2023883a 	mov	r17,r4
   144f4:	10002626 	beq	r2,zero,14590 <__sfp+0xc0>
   144f8:	8400b804 	addi	r16,r16,736
   144fc:	80800117 	ldw	r2,4(r16)
   14500:	81000217 	ldw	r4,8(r16)
   14504:	10ffffc4 	addi	r3,r2,-1
   14508:	18000916 	blt	r3,zero,14530 <__sfp+0x60>
   1450c:	2080030f 	ldh	r2,12(r4)
   14510:	10000b26 	beq	r2,zero,14540 <__sfp+0x70>
   14514:	017fffc4 	movi	r5,-1
   14518:	00000206 	br	14524 <__sfp+0x54>
   1451c:	2080030f 	ldh	r2,12(r4)
   14520:	10000726 	beq	r2,zero,14540 <__sfp+0x70>
   14524:	18ffffc4 	addi	r3,r3,-1
   14528:	21001704 	addi	r4,r4,92
   1452c:	197ffb1e 	bne	r3,r5,1451c <__sfp+0x4c>
   14530:	80800017 	ldw	r2,0(r16)
   14534:	10001926 	beq	r2,zero,1459c <__sfp+0xcc>
   14538:	1021883a 	mov	r16,r2
   1453c:	003fef06 	br	144fc <__sfp+0x2c>
   14540:	00bfffc4 	movi	r2,-1
   14544:	00c00044 	movi	r3,1
   14548:	2080038d 	sth	r2,14(r4)
   1454c:	20c0030d 	sth	r3,12(r4)
   14550:	20000015 	stw	zero,0(r4)
   14554:	20000215 	stw	zero,8(r4)
   14558:	20000115 	stw	zero,4(r4)
   1455c:	20000415 	stw	zero,16(r4)
   14560:	20000515 	stw	zero,20(r4)
   14564:	20000615 	stw	zero,24(r4)
   14568:	20000c15 	stw	zero,48(r4)
   1456c:	20000d15 	stw	zero,52(r4)
   14570:	20001115 	stw	zero,68(r4)
   14574:	20001215 	stw	zero,72(r4)
   14578:	2005883a 	mov	r2,r4
   1457c:	dfc00217 	ldw	ra,8(sp)
   14580:	dc400117 	ldw	r17,4(sp)
   14584:	dc000017 	ldw	r16,0(sp)
   14588:	dec00304 	addi	sp,sp,12
   1458c:	f800283a 	ret
   14590:	8009883a 	mov	r4,r16
   14594:	00143680 	call	14368 <__sinit>
   14598:	003fd706 	br	144f8 <__sfp+0x28>
   1459c:	8809883a 	mov	r4,r17
   145a0:	01400104 	movi	r5,4
   145a4:	00144680 	call	14468 <__sfmoreglue>
   145a8:	80800015 	stw	r2,0(r16)
   145ac:	103fe21e 	bne	r2,zero,14538 <__sfp+0x68>
   145b0:	00800304 	movi	r2,12
   145b4:	0009883a 	mov	r4,zero
   145b8:	88800015 	stw	r2,0(r17)
   145bc:	003fee06 	br	14578 <__sfp+0xa8>

000145c0 <_malloc_trim_r>:
   145c0:	defffb04 	addi	sp,sp,-20
   145c4:	dcc00315 	stw	r19,12(sp)
   145c8:	04c00174 	movhi	r19,5
   145cc:	9ce1ec04 	addi	r19,r19,-30800
   145d0:	dc800215 	stw	r18,8(sp)
   145d4:	dc400115 	stw	r17,4(sp)
   145d8:	dc000015 	stw	r16,0(sp)
   145dc:	2823883a 	mov	r17,r5
   145e0:	2025883a 	mov	r18,r4
   145e4:	dfc00415 	stw	ra,16(sp)
   145e8:	001a4c80 	call	1a4c8 <__malloc_lock>
   145ec:	98800217 	ldw	r2,8(r19)
   145f0:	9009883a 	mov	r4,r18
   145f4:	000b883a 	mov	r5,zero
   145f8:	10c00117 	ldw	r3,4(r2)
   145fc:	00bfff04 	movi	r2,-4
   14600:	18a0703a 	and	r16,r3,r2
   14604:	8463c83a 	sub	r17,r16,r17
   14608:	8c43fbc4 	addi	r17,r17,4079
   1460c:	8822d33a 	srli	r17,r17,12
   14610:	0083ffc4 	movi	r2,4095
   14614:	8c7fffc4 	addi	r17,r17,-1
   14618:	8822933a 	slli	r17,r17,12
   1461c:	1440060e 	bge	r2,r17,14638 <_malloc_trim_r+0x78>
   14620:	00173080 	call	17308 <_sbrk_r>
   14624:	98c00217 	ldw	r3,8(r19)
   14628:	9009883a 	mov	r4,r18
   1462c:	044bc83a 	sub	r5,zero,r17
   14630:	80c7883a 	add	r3,r16,r3
   14634:	10c00926 	beq	r2,r3,1465c <_malloc_trim_r+0x9c>
   14638:	001a4e80 	call	1a4e8 <__malloc_unlock>
   1463c:	0005883a 	mov	r2,zero
   14640:	dfc00417 	ldw	ra,16(sp)
   14644:	dcc00317 	ldw	r19,12(sp)
   14648:	dc800217 	ldw	r18,8(sp)
   1464c:	dc400117 	ldw	r17,4(sp)
   14650:	dc000017 	ldw	r16,0(sp)
   14654:	dec00504 	addi	sp,sp,20
   14658:	f800283a 	ret
   1465c:	9009883a 	mov	r4,r18
   14660:	00173080 	call	17308 <_sbrk_r>
   14664:	844dc83a 	sub	r6,r16,r17
   14668:	00ffffc4 	movi	r3,-1
   1466c:	9009883a 	mov	r4,r18
   14670:	000b883a 	mov	r5,zero
   14674:	01c00174 	movhi	r7,5
   14678:	39e79404 	addi	r7,r7,-25008
   1467c:	31800054 	ori	r6,r6,1
   14680:	10c00926 	beq	r2,r3,146a8 <_malloc_trim_r+0xe8>
   14684:	38800017 	ldw	r2,0(r7)
   14688:	98c00217 	ldw	r3,8(r19)
   1468c:	9009883a 	mov	r4,r18
   14690:	1445c83a 	sub	r2,r2,r17
   14694:	38800015 	stw	r2,0(r7)
   14698:	19800115 	stw	r6,4(r3)
   1469c:	001a4e80 	call	1a4e8 <__malloc_unlock>
   146a0:	00800044 	movi	r2,1
   146a4:	003fe606 	br	14640 <_malloc_trim_r+0x80>
   146a8:	00173080 	call	17308 <_sbrk_r>
   146ac:	99800217 	ldw	r6,8(r19)
   146b0:	100f883a 	mov	r7,r2
   146b4:	9009883a 	mov	r4,r18
   146b8:	1187c83a 	sub	r3,r2,r6
   146bc:	008003c4 	movi	r2,15
   146c0:	19400054 	ori	r5,r3,1
   146c4:	10ffdc0e 	bge	r2,r3,14638 <_malloc_trim_r+0x78>
   146c8:	00800174 	movhi	r2,5
   146cc:	10a77504 	addi	r2,r2,-25132
   146d0:	10c00017 	ldw	r3,0(r2)
   146d4:	00800174 	movhi	r2,5
   146d8:	10a79404 	addi	r2,r2,-25008
   146dc:	31400115 	stw	r5,4(r6)
   146e0:	38c7c83a 	sub	r3,r7,r3
   146e4:	10c00015 	stw	r3,0(r2)
   146e8:	003fd306 	br	14638 <_malloc_trim_r+0x78>

000146ec <_free_r>:
   146ec:	defffd04 	addi	sp,sp,-12
   146f0:	dc400115 	stw	r17,4(sp)
   146f4:	dc000015 	stw	r16,0(sp)
   146f8:	dfc00215 	stw	ra,8(sp)
   146fc:	2821883a 	mov	r16,r5
   14700:	2023883a 	mov	r17,r4
   14704:	28005a26 	beq	r5,zero,14870 <_free_r+0x184>
   14708:	001a4c80 	call	1a4c8 <__malloc_lock>
   1470c:	823ffe04 	addi	r8,r16,-8
   14710:	41400117 	ldw	r5,4(r8)
   14714:	00bfff84 	movi	r2,-2
   14718:	02800174 	movhi	r10,5
   1471c:	52a1ec04 	addi	r10,r10,-30800
   14720:	288e703a 	and	r7,r5,r2
   14724:	41cd883a 	add	r6,r8,r7
   14728:	30c00117 	ldw	r3,4(r6)
   1472c:	51000217 	ldw	r4,8(r10)
   14730:	00bfff04 	movi	r2,-4
   14734:	1892703a 	and	r9,r3,r2
   14738:	5017883a 	mov	r11,r10
   1473c:	31006726 	beq	r6,r4,148dc <_free_r+0x1f0>
   14740:	2880004c 	andi	r2,r5,1
   14744:	1005003a 	cmpeq	r2,r2,zero
   14748:	32400115 	stw	r9,4(r6)
   1474c:	10001a1e 	bne	r2,zero,147b8 <_free_r+0xcc>
   14750:	000b883a 	mov	r5,zero
   14754:	3247883a 	add	r3,r6,r9
   14758:	18800117 	ldw	r2,4(r3)
   1475c:	1080004c 	andi	r2,r2,1
   14760:	1000231e 	bne	r2,zero,147f0 <_free_r+0x104>
   14764:	280ac03a 	cmpne	r5,r5,zero
   14768:	3a4f883a 	add	r7,r7,r9
   1476c:	2800451e 	bne	r5,zero,14884 <_free_r+0x198>
   14770:	31000217 	ldw	r4,8(r6)
   14774:	00800174 	movhi	r2,5
   14778:	10a1ee04 	addi	r2,r2,-30792
   1477c:	20807b26 	beq	r4,r2,1496c <_free_r+0x280>
   14780:	30800317 	ldw	r2,12(r6)
   14784:	3a07883a 	add	r3,r7,r8
   14788:	19c00015 	stw	r7,0(r3)
   1478c:	11000215 	stw	r4,8(r2)
   14790:	20800315 	stw	r2,12(r4)
   14794:	38800054 	ori	r2,r7,1
   14798:	40800115 	stw	r2,4(r8)
   1479c:	28001a26 	beq	r5,zero,14808 <_free_r+0x11c>
   147a0:	8809883a 	mov	r4,r17
   147a4:	dfc00217 	ldw	ra,8(sp)
   147a8:	dc400117 	ldw	r17,4(sp)
   147ac:	dc000017 	ldw	r16,0(sp)
   147b0:	dec00304 	addi	sp,sp,12
   147b4:	001a4e81 	jmpi	1a4e8 <__malloc_unlock>
   147b8:	80bffe17 	ldw	r2,-8(r16)
   147bc:	50c00204 	addi	r3,r10,8
   147c0:	4091c83a 	sub	r8,r8,r2
   147c4:	41000217 	ldw	r4,8(r8)
   147c8:	388f883a 	add	r7,r7,r2
   147cc:	20c06126 	beq	r4,r3,14954 <_free_r+0x268>
   147d0:	40800317 	ldw	r2,12(r8)
   147d4:	3247883a 	add	r3,r6,r9
   147d8:	000b883a 	mov	r5,zero
   147dc:	11000215 	stw	r4,8(r2)
   147e0:	20800315 	stw	r2,12(r4)
   147e4:	18800117 	ldw	r2,4(r3)
   147e8:	1080004c 	andi	r2,r2,1
   147ec:	103fdd26 	beq	r2,zero,14764 <_free_r+0x78>
   147f0:	38800054 	ori	r2,r7,1
   147f4:	3a07883a 	add	r3,r7,r8
   147f8:	280ac03a 	cmpne	r5,r5,zero
   147fc:	40800115 	stw	r2,4(r8)
   14800:	19c00015 	stw	r7,0(r3)
   14804:	283fe61e 	bne	r5,zero,147a0 <_free_r+0xb4>
   14808:	00807fc4 	movi	r2,511
   1480c:	11c01f2e 	bgeu	r2,r7,1488c <_free_r+0x1a0>
   14810:	3806d27a 	srli	r3,r7,9
   14814:	1800481e 	bne	r3,zero,14938 <_free_r+0x24c>
   14818:	3804d0fa 	srli	r2,r7,3
   1481c:	100690fa 	slli	r3,r2,3
   14820:	1acd883a 	add	r6,r3,r11
   14824:	31400217 	ldw	r5,8(r6)
   14828:	31405926 	beq	r6,r5,14990 <_free_r+0x2a4>
   1482c:	28800117 	ldw	r2,4(r5)
   14830:	00ffff04 	movi	r3,-4
   14834:	10c4703a 	and	r2,r2,r3
   14838:	3880022e 	bgeu	r7,r2,14844 <_free_r+0x158>
   1483c:	29400217 	ldw	r5,8(r5)
   14840:	317ffa1e 	bne	r6,r5,1482c <_free_r+0x140>
   14844:	29800317 	ldw	r6,12(r5)
   14848:	41800315 	stw	r6,12(r8)
   1484c:	41400215 	stw	r5,8(r8)
   14850:	8809883a 	mov	r4,r17
   14854:	2a000315 	stw	r8,12(r5)
   14858:	32000215 	stw	r8,8(r6)
   1485c:	dfc00217 	ldw	ra,8(sp)
   14860:	dc400117 	ldw	r17,4(sp)
   14864:	dc000017 	ldw	r16,0(sp)
   14868:	dec00304 	addi	sp,sp,12
   1486c:	001a4e81 	jmpi	1a4e8 <__malloc_unlock>
   14870:	dfc00217 	ldw	ra,8(sp)
   14874:	dc400117 	ldw	r17,4(sp)
   14878:	dc000017 	ldw	r16,0(sp)
   1487c:	dec00304 	addi	sp,sp,12
   14880:	f800283a 	ret
   14884:	31000217 	ldw	r4,8(r6)
   14888:	003fbd06 	br	14780 <_free_r+0x94>
   1488c:	3806d0fa 	srli	r3,r7,3
   14890:	00800044 	movi	r2,1
   14894:	51400117 	ldw	r5,4(r10)
   14898:	180890fa 	slli	r4,r3,3
   1489c:	1807d0ba 	srai	r3,r3,2
   148a0:	22c9883a 	add	r4,r4,r11
   148a4:	21800217 	ldw	r6,8(r4)
   148a8:	10c4983a 	sll	r2,r2,r3
   148ac:	41000315 	stw	r4,12(r8)
   148b0:	41800215 	stw	r6,8(r8)
   148b4:	288ab03a 	or	r5,r5,r2
   148b8:	22000215 	stw	r8,8(r4)
   148bc:	8809883a 	mov	r4,r17
   148c0:	51400115 	stw	r5,4(r10)
   148c4:	32000315 	stw	r8,12(r6)
   148c8:	dfc00217 	ldw	ra,8(sp)
   148cc:	dc400117 	ldw	r17,4(sp)
   148d0:	dc000017 	ldw	r16,0(sp)
   148d4:	dec00304 	addi	sp,sp,12
   148d8:	001a4e81 	jmpi	1a4e8 <__malloc_unlock>
   148dc:	2880004c 	andi	r2,r5,1
   148e0:	3a4d883a 	add	r6,r7,r9
   148e4:	1000071e 	bne	r2,zero,14904 <_free_r+0x218>
   148e8:	80bffe17 	ldw	r2,-8(r16)
   148ec:	4091c83a 	sub	r8,r8,r2
   148f0:	41000317 	ldw	r4,12(r8)
   148f4:	40c00217 	ldw	r3,8(r8)
   148f8:	308d883a 	add	r6,r6,r2
   148fc:	20c00215 	stw	r3,8(r4)
   14900:	19000315 	stw	r4,12(r3)
   14904:	00800174 	movhi	r2,5
   14908:	10a77404 	addi	r2,r2,-25136
   1490c:	11000017 	ldw	r4,0(r2)
   14910:	30c00054 	ori	r3,r6,1
   14914:	52000215 	stw	r8,8(r10)
   14918:	40c00115 	stw	r3,4(r8)
   1491c:	313fa036 	bltu	r6,r4,147a0 <_free_r+0xb4>
   14920:	00800174 	movhi	r2,5
   14924:	10a78804 	addi	r2,r2,-25056
   14928:	11400017 	ldw	r5,0(r2)
   1492c:	8809883a 	mov	r4,r17
   14930:	00145c00 	call	145c0 <_malloc_trim_r>
   14934:	003f9a06 	br	147a0 <_free_r+0xb4>
   14938:	00800104 	movi	r2,4
   1493c:	10c0072e 	bgeu	r2,r3,1495c <_free_r+0x270>
   14940:	00800504 	movi	r2,20
   14944:	10c01936 	bltu	r2,r3,149ac <_free_r+0x2c0>
   14948:	188016c4 	addi	r2,r3,91
   1494c:	100690fa 	slli	r3,r2,3
   14950:	003fb306 	br	14820 <_free_r+0x134>
   14954:	01400044 	movi	r5,1
   14958:	003f7e06 	br	14754 <_free_r+0x68>
   1495c:	3804d1ba 	srli	r2,r7,6
   14960:	10800e04 	addi	r2,r2,56
   14964:	100690fa 	slli	r3,r2,3
   14968:	003fad06 	br	14820 <_free_r+0x134>
   1496c:	22000315 	stw	r8,12(r4)
   14970:	22000215 	stw	r8,8(r4)
   14974:	3a05883a 	add	r2,r7,r8
   14978:	38c00054 	ori	r3,r7,1
   1497c:	11c00015 	stw	r7,0(r2)
   14980:	41000215 	stw	r4,8(r8)
   14984:	40c00115 	stw	r3,4(r8)
   14988:	41000315 	stw	r4,12(r8)
   1498c:	003f8406 	br	147a0 <_free_r+0xb4>
   14990:	1005d0ba 	srai	r2,r2,2
   14994:	00c00044 	movi	r3,1
   14998:	51000117 	ldw	r4,4(r10)
   1499c:	1886983a 	sll	r3,r3,r2
   149a0:	20c8b03a 	or	r4,r4,r3
   149a4:	51000115 	stw	r4,4(r10)
   149a8:	003fa706 	br	14848 <_free_r+0x15c>
   149ac:	00801504 	movi	r2,84
   149b0:	10c00436 	bltu	r2,r3,149c4 <_free_r+0x2d8>
   149b4:	3804d33a 	srli	r2,r7,12
   149b8:	10801b84 	addi	r2,r2,110
   149bc:	100690fa 	slli	r3,r2,3
   149c0:	003f9706 	br	14820 <_free_r+0x134>
   149c4:	00805504 	movi	r2,340
   149c8:	10c00436 	bltu	r2,r3,149dc <_free_r+0x2f0>
   149cc:	3804d3fa 	srli	r2,r7,15
   149d0:	10801dc4 	addi	r2,r2,119
   149d4:	100690fa 	slli	r3,r2,3
   149d8:	003f9106 	br	14820 <_free_r+0x134>
   149dc:	00815504 	movi	r2,1364
   149e0:	10c0032e 	bgeu	r2,r3,149f0 <_free_r+0x304>
   149e4:	00801f84 	movi	r2,126
   149e8:	00c0fc04 	movi	r3,1008
   149ec:	003f8c06 	br	14820 <_free_r+0x134>
   149f0:	3804d4ba 	srli	r2,r7,18
   149f4:	10801f04 	addi	r2,r2,124
   149f8:	100690fa 	slli	r3,r2,3
   149fc:	003f8806 	br	14820 <_free_r+0x134>

00014a00 <__sfvwrite_r>:
   14a00:	30800217 	ldw	r2,8(r6)
   14a04:	defff504 	addi	sp,sp,-44
   14a08:	df000915 	stw	fp,36(sp)
   14a0c:	dd800715 	stw	r22,28(sp)
   14a10:	dc800315 	stw	r18,12(sp)
   14a14:	dfc00a15 	stw	ra,40(sp)
   14a18:	ddc00815 	stw	r23,32(sp)
   14a1c:	dd400615 	stw	r21,24(sp)
   14a20:	dd000515 	stw	r20,20(sp)
   14a24:	dcc00415 	stw	r19,16(sp)
   14a28:	dc400215 	stw	r17,8(sp)
   14a2c:	dc000115 	stw	r16,4(sp)
   14a30:	302d883a 	mov	r22,r6
   14a34:	2039883a 	mov	fp,r4
   14a38:	2825883a 	mov	r18,r5
   14a3c:	10001c26 	beq	r2,zero,14ab0 <__sfvwrite_r+0xb0>
   14a40:	29c0030b 	ldhu	r7,12(r5)
   14a44:	3880020c 	andi	r2,r7,8
   14a48:	10002726 	beq	r2,zero,14ae8 <__sfvwrite_r+0xe8>
   14a4c:	28800417 	ldw	r2,16(r5)
   14a50:	10002526 	beq	r2,zero,14ae8 <__sfvwrite_r+0xe8>
   14a54:	3880008c 	andi	r2,r7,2
   14a58:	b5400017 	ldw	r21,0(r22)
   14a5c:	10002826 	beq	r2,zero,14b00 <__sfvwrite_r+0x100>
   14a60:	0021883a 	mov	r16,zero
   14a64:	0023883a 	mov	r17,zero
   14a68:	880d883a 	mov	r6,r17
   14a6c:	e009883a 	mov	r4,fp
   14a70:	00810004 	movi	r2,1024
   14a74:	80006e26 	beq	r16,zero,14c30 <__sfvwrite_r+0x230>
   14a78:	800f883a 	mov	r7,r16
   14a7c:	91400717 	ldw	r5,28(r18)
   14a80:	1400012e 	bgeu	r2,r16,14a88 <__sfvwrite_r+0x88>
   14a84:	100f883a 	mov	r7,r2
   14a88:	90c00917 	ldw	r3,36(r18)
   14a8c:	183ee83a 	callr	r3
   14a90:	1007883a 	mov	r3,r2
   14a94:	80a1c83a 	sub	r16,r16,r2
   14a98:	88a3883a 	add	r17,r17,r2
   14a9c:	00806d0e 	bge	zero,r2,14c54 <__sfvwrite_r+0x254>
   14aa0:	b0800217 	ldw	r2,8(r22)
   14aa4:	10c5c83a 	sub	r2,r2,r3
   14aa8:	b0800215 	stw	r2,8(r22)
   14aac:	103fee1e 	bne	r2,zero,14a68 <__sfvwrite_r+0x68>
   14ab0:	0009883a 	mov	r4,zero
   14ab4:	2005883a 	mov	r2,r4
   14ab8:	dfc00a17 	ldw	ra,40(sp)
   14abc:	df000917 	ldw	fp,36(sp)
   14ac0:	ddc00817 	ldw	r23,32(sp)
   14ac4:	dd800717 	ldw	r22,28(sp)
   14ac8:	dd400617 	ldw	r21,24(sp)
   14acc:	dd000517 	ldw	r20,20(sp)
   14ad0:	dcc00417 	ldw	r19,16(sp)
   14ad4:	dc800317 	ldw	r18,12(sp)
   14ad8:	dc400217 	ldw	r17,8(sp)
   14adc:	dc000117 	ldw	r16,4(sp)
   14ae0:	dec00b04 	addi	sp,sp,44
   14ae4:	f800283a 	ret
   14ae8:	00127c80 	call	127c8 <__swsetup_r>
   14aec:	1000e41e 	bne	r2,zero,14e80 <__sfvwrite_r+0x480>
   14af0:	91c0030b 	ldhu	r7,12(r18)
   14af4:	b5400017 	ldw	r21,0(r22)
   14af8:	3880008c 	andi	r2,r7,2
   14afc:	103fd81e 	bne	r2,zero,14a60 <__sfvwrite_r+0x60>
   14b00:	3880004c 	andi	r2,r7,1
   14b04:	1005003a 	cmpeq	r2,r2,zero
   14b08:	10005726 	beq	r2,zero,14c68 <__sfvwrite_r+0x268>
   14b0c:	0029883a 	mov	r20,zero
   14b10:	002f883a 	mov	r23,zero
   14b14:	a0004226 	beq	r20,zero,14c20 <__sfvwrite_r+0x220>
   14b18:	3880800c 	andi	r2,r7,512
   14b1c:	94000217 	ldw	r16,8(r18)
   14b20:	10008b26 	beq	r2,zero,14d50 <__sfvwrite_r+0x350>
   14b24:	800d883a 	mov	r6,r16
   14b28:	a400a536 	bltu	r20,r16,14dc0 <__sfvwrite_r+0x3c0>
   14b2c:	3881200c 	andi	r2,r7,1152
   14b30:	10002726 	beq	r2,zero,14bd0 <__sfvwrite_r+0x1d0>
   14b34:	90800517 	ldw	r2,20(r18)
   14b38:	92000417 	ldw	r8,16(r18)
   14b3c:	91400017 	ldw	r5,0(r18)
   14b40:	1087883a 	add	r3,r2,r2
   14b44:	1887883a 	add	r3,r3,r2
   14b48:	1808d7fa 	srli	r4,r3,31
   14b4c:	2a21c83a 	sub	r16,r5,r8
   14b50:	80800044 	addi	r2,r16,1
   14b54:	20c9883a 	add	r4,r4,r3
   14b58:	2027d07a 	srai	r19,r4,1
   14b5c:	a085883a 	add	r2,r20,r2
   14b60:	980d883a 	mov	r6,r19
   14b64:	9880022e 	bgeu	r19,r2,14b70 <__sfvwrite_r+0x170>
   14b68:	1027883a 	mov	r19,r2
   14b6c:	100d883a 	mov	r6,r2
   14b70:	3881000c 	andi	r2,r7,1024
   14b74:	1000b826 	beq	r2,zero,14e58 <__sfvwrite_r+0x458>
   14b78:	300b883a 	mov	r5,r6
   14b7c:	e009883a 	mov	r4,fp
   14b80:	00152740 	call	15274 <_malloc_r>
   14b84:	10003126 	beq	r2,zero,14c4c <__sfvwrite_r+0x24c>
   14b88:	91400417 	ldw	r5,16(r18)
   14b8c:	1009883a 	mov	r4,r2
   14b90:	800d883a 	mov	r6,r16
   14b94:	1023883a 	mov	r17,r2
   14b98:	0015a980 	call	15a98 <memcpy>
   14b9c:	90c0030b 	ldhu	r3,12(r18)
   14ba0:	00beffc4 	movi	r2,-1025
   14ba4:	1886703a 	and	r3,r3,r2
   14ba8:	18c02014 	ori	r3,r3,128
   14bac:	90c0030d 	sth	r3,12(r18)
   14bb0:	9c07c83a 	sub	r3,r19,r16
   14bb4:	8c05883a 	add	r2,r17,r16
   14bb8:	a00d883a 	mov	r6,r20
   14bbc:	a021883a 	mov	r16,r20
   14bc0:	90800015 	stw	r2,0(r18)
   14bc4:	90c00215 	stw	r3,8(r18)
   14bc8:	94400415 	stw	r17,16(r18)
   14bcc:	94c00515 	stw	r19,20(r18)
   14bd0:	91000017 	ldw	r4,0(r18)
   14bd4:	b80b883a 	mov	r5,r23
   14bd8:	a023883a 	mov	r17,r20
   14bdc:	0015b380 	call	15b38 <memmove>
   14be0:	90c00217 	ldw	r3,8(r18)
   14be4:	90800017 	ldw	r2,0(r18)
   14be8:	a027883a 	mov	r19,r20
   14bec:	1c07c83a 	sub	r3,r3,r16
   14bf0:	1405883a 	add	r2,r2,r16
   14bf4:	90c00215 	stw	r3,8(r18)
   14bf8:	a021883a 	mov	r16,r20
   14bfc:	90800015 	stw	r2,0(r18)
   14c00:	b0800217 	ldw	r2,8(r22)
   14c04:	1405c83a 	sub	r2,r2,r16
   14c08:	b0800215 	stw	r2,8(r22)
   14c0c:	103fa826 	beq	r2,zero,14ab0 <__sfvwrite_r+0xb0>
   14c10:	a469c83a 	sub	r20,r20,r17
   14c14:	91c0030b 	ldhu	r7,12(r18)
   14c18:	bcef883a 	add	r23,r23,r19
   14c1c:	a03fbe1e 	bne	r20,zero,14b18 <__sfvwrite_r+0x118>
   14c20:	adc00017 	ldw	r23,0(r21)
   14c24:	ad000117 	ldw	r20,4(r21)
   14c28:	ad400204 	addi	r21,r21,8
   14c2c:	003fb906 	br	14b14 <__sfvwrite_r+0x114>
   14c30:	ac400017 	ldw	r17,0(r21)
   14c34:	ac000117 	ldw	r16,4(r21)
   14c38:	ad400204 	addi	r21,r21,8
   14c3c:	003f8a06 	br	14a68 <__sfvwrite_r+0x68>
   14c40:	91400417 	ldw	r5,16(r18)
   14c44:	e009883a 	mov	r4,fp
   14c48:	00146ec0 	call	146ec <_free_r>
   14c4c:	00800304 	movi	r2,12
   14c50:	e0800015 	stw	r2,0(fp)
   14c54:	9080030b 	ldhu	r2,12(r18)
   14c58:	013fffc4 	movi	r4,-1
   14c5c:	10801014 	ori	r2,r2,64
   14c60:	9080030d 	sth	r2,12(r18)
   14c64:	003f9306 	br	14ab4 <__sfvwrite_r+0xb4>
   14c68:	0027883a 	mov	r19,zero
   14c6c:	002f883a 	mov	r23,zero
   14c70:	d8000015 	stw	zero,0(sp)
   14c74:	0029883a 	mov	r20,zero
   14c78:	98001e26 	beq	r19,zero,14cf4 <__sfvwrite_r+0x2f4>
   14c7c:	d8c00017 	ldw	r3,0(sp)
   14c80:	1804c03a 	cmpne	r2,r3,zero
   14c84:	10005e26 	beq	r2,zero,14e00 <__sfvwrite_r+0x400>
   14c88:	9821883a 	mov	r16,r19
   14c8c:	a4c0012e 	bgeu	r20,r19,14c94 <__sfvwrite_r+0x294>
   14c90:	a021883a 	mov	r16,r20
   14c94:	91000017 	ldw	r4,0(r18)
   14c98:	90800417 	ldw	r2,16(r18)
   14c9c:	91800217 	ldw	r6,8(r18)
   14ca0:	91c00517 	ldw	r7,20(r18)
   14ca4:	1100022e 	bgeu	r2,r4,14cb0 <__sfvwrite_r+0x2b0>
   14ca8:	31e3883a 	add	r17,r6,r7
   14cac:	8c001616 	blt	r17,r16,14d08 <__sfvwrite_r+0x308>
   14cb0:	81c03816 	blt	r16,r7,14d94 <__sfvwrite_r+0x394>
   14cb4:	90c00917 	ldw	r3,36(r18)
   14cb8:	91400717 	ldw	r5,28(r18)
   14cbc:	e009883a 	mov	r4,fp
   14cc0:	b80d883a 	mov	r6,r23
   14cc4:	183ee83a 	callr	r3
   14cc8:	1023883a 	mov	r17,r2
   14ccc:	00bfe10e 	bge	zero,r2,14c54 <__sfvwrite_r+0x254>
   14cd0:	a469c83a 	sub	r20,r20,r17
   14cd4:	a0001826 	beq	r20,zero,14d38 <__sfvwrite_r+0x338>
   14cd8:	b0800217 	ldw	r2,8(r22)
   14cdc:	1445c83a 	sub	r2,r2,r17
   14ce0:	b0800215 	stw	r2,8(r22)
   14ce4:	103f7226 	beq	r2,zero,14ab0 <__sfvwrite_r+0xb0>
   14ce8:	9c67c83a 	sub	r19,r19,r17
   14cec:	bc6f883a 	add	r23,r23,r17
   14cf0:	983fe21e 	bne	r19,zero,14c7c <__sfvwrite_r+0x27c>
   14cf4:	adc00017 	ldw	r23,0(r21)
   14cf8:	acc00117 	ldw	r19,4(r21)
   14cfc:	ad400204 	addi	r21,r21,8
   14d00:	d8000015 	stw	zero,0(sp)
   14d04:	003fdc06 	br	14c78 <__sfvwrite_r+0x278>
   14d08:	b80b883a 	mov	r5,r23
   14d0c:	880d883a 	mov	r6,r17
   14d10:	0015b380 	call	15b38 <memmove>
   14d14:	90c00017 	ldw	r3,0(r18)
   14d18:	e009883a 	mov	r4,fp
   14d1c:	900b883a 	mov	r5,r18
   14d20:	1c47883a 	add	r3,r3,r17
   14d24:	90c00015 	stw	r3,0(r18)
   14d28:	00140d00 	call	140d0 <_fflush_r>
   14d2c:	103fc91e 	bne	r2,zero,14c54 <__sfvwrite_r+0x254>
   14d30:	a469c83a 	sub	r20,r20,r17
   14d34:	a03fe81e 	bne	r20,zero,14cd8 <__sfvwrite_r+0x2d8>
   14d38:	e009883a 	mov	r4,fp
   14d3c:	900b883a 	mov	r5,r18
   14d40:	00140d00 	call	140d0 <_fflush_r>
   14d44:	103fc31e 	bne	r2,zero,14c54 <__sfvwrite_r+0x254>
   14d48:	d8000015 	stw	zero,0(sp)
   14d4c:	003fe206 	br	14cd8 <__sfvwrite_r+0x2d8>
   14d50:	91000017 	ldw	r4,0(r18)
   14d54:	90800417 	ldw	r2,16(r18)
   14d58:	1100022e 	bgeu	r2,r4,14d64 <__sfvwrite_r+0x364>
   14d5c:	8023883a 	mov	r17,r16
   14d60:	85003136 	bltu	r16,r20,14e28 <__sfvwrite_r+0x428>
   14d64:	91c00517 	ldw	r7,20(r18)
   14d68:	a1c01836 	bltu	r20,r7,14dcc <__sfvwrite_r+0x3cc>
   14d6c:	90c00917 	ldw	r3,36(r18)
   14d70:	91400717 	ldw	r5,28(r18)
   14d74:	e009883a 	mov	r4,fp
   14d78:	b80d883a 	mov	r6,r23
   14d7c:	183ee83a 	callr	r3
   14d80:	1021883a 	mov	r16,r2
   14d84:	00bfb30e 	bge	zero,r2,14c54 <__sfvwrite_r+0x254>
   14d88:	1023883a 	mov	r17,r2
   14d8c:	1027883a 	mov	r19,r2
   14d90:	003f9b06 	br	14c00 <__sfvwrite_r+0x200>
   14d94:	b80b883a 	mov	r5,r23
   14d98:	800d883a 	mov	r6,r16
   14d9c:	0015b380 	call	15b38 <memmove>
   14da0:	90c00217 	ldw	r3,8(r18)
   14da4:	90800017 	ldw	r2,0(r18)
   14da8:	8023883a 	mov	r17,r16
   14dac:	1c07c83a 	sub	r3,r3,r16
   14db0:	1405883a 	add	r2,r2,r16
   14db4:	90c00215 	stw	r3,8(r18)
   14db8:	90800015 	stw	r2,0(r18)
   14dbc:	003fc406 	br	14cd0 <__sfvwrite_r+0x2d0>
   14dc0:	a00d883a 	mov	r6,r20
   14dc4:	a021883a 	mov	r16,r20
   14dc8:	003f8106 	br	14bd0 <__sfvwrite_r+0x1d0>
   14dcc:	b80b883a 	mov	r5,r23
   14dd0:	a00d883a 	mov	r6,r20
   14dd4:	0015b380 	call	15b38 <memmove>
   14dd8:	90c00217 	ldw	r3,8(r18)
   14ddc:	90800017 	ldw	r2,0(r18)
   14de0:	a021883a 	mov	r16,r20
   14de4:	1d07c83a 	sub	r3,r3,r20
   14de8:	1505883a 	add	r2,r2,r20
   14dec:	a023883a 	mov	r17,r20
   14df0:	a027883a 	mov	r19,r20
   14df4:	90c00215 	stw	r3,8(r18)
   14df8:	90800015 	stw	r2,0(r18)
   14dfc:	003f8006 	br	14c00 <__sfvwrite_r+0x200>
   14e00:	b809883a 	mov	r4,r23
   14e04:	01400284 	movi	r5,10
   14e08:	980d883a 	mov	r6,r19
   14e0c:	00159b40 	call	159b4 <memchr>
   14e10:	10001726 	beq	r2,zero,14e70 <__sfvwrite_r+0x470>
   14e14:	15c5c83a 	sub	r2,r2,r23
   14e18:	15000044 	addi	r20,r2,1
   14e1c:	00800044 	movi	r2,1
   14e20:	d8800015 	stw	r2,0(sp)
   14e24:	003f9806 	br	14c88 <__sfvwrite_r+0x288>
   14e28:	b80b883a 	mov	r5,r23
   14e2c:	800d883a 	mov	r6,r16
   14e30:	0015b380 	call	15b38 <memmove>
   14e34:	90c00017 	ldw	r3,0(r18)
   14e38:	e009883a 	mov	r4,fp
   14e3c:	900b883a 	mov	r5,r18
   14e40:	1c07883a 	add	r3,r3,r16
   14e44:	90c00015 	stw	r3,0(r18)
   14e48:	8027883a 	mov	r19,r16
   14e4c:	00140d00 	call	140d0 <_fflush_r>
   14e50:	103f6b26 	beq	r2,zero,14c00 <__sfvwrite_r+0x200>
   14e54:	003f7f06 	br	14c54 <__sfvwrite_r+0x254>
   14e58:	400b883a 	mov	r5,r8
   14e5c:	e009883a 	mov	r4,fp
   14e60:	0016ca40 	call	16ca4 <_realloc_r>
   14e64:	103f7626 	beq	r2,zero,14c40 <__sfvwrite_r+0x240>
   14e68:	1023883a 	mov	r17,r2
   14e6c:	003f5006 	br	14bb0 <__sfvwrite_r+0x1b0>
   14e70:	00c00044 	movi	r3,1
   14e74:	9d000044 	addi	r20,r19,1
   14e78:	d8c00015 	stw	r3,0(sp)
   14e7c:	003f8206 	br	14c88 <__sfvwrite_r+0x288>
   14e80:	9080030b 	ldhu	r2,12(r18)
   14e84:	00c00244 	movi	r3,9
   14e88:	013fffc4 	movi	r4,-1
   14e8c:	10801014 	ori	r2,r2,64
   14e90:	9080030d 	sth	r2,12(r18)
   14e94:	e0c00015 	stw	r3,0(fp)
   14e98:	003f0606 	br	14ab4 <__sfvwrite_r+0xb4>

00014e9c <_fwalk_reent>:
   14e9c:	defff704 	addi	sp,sp,-36
   14ea0:	dcc00315 	stw	r19,12(sp)
   14ea4:	24c0b804 	addi	r19,r4,736
   14ea8:	dd800615 	stw	r22,24(sp)
   14eac:	dd400515 	stw	r21,20(sp)
   14eb0:	dfc00815 	stw	ra,32(sp)
   14eb4:	ddc00715 	stw	r23,28(sp)
   14eb8:	dd000415 	stw	r20,16(sp)
   14ebc:	dc800215 	stw	r18,8(sp)
   14ec0:	dc400115 	stw	r17,4(sp)
   14ec4:	dc000015 	stw	r16,0(sp)
   14ec8:	202b883a 	mov	r21,r4
   14ecc:	282d883a 	mov	r22,r5
   14ed0:	00143580 	call	14358 <__sfp_lock_acquire>
   14ed4:	98002126 	beq	r19,zero,14f5c <_fwalk_reent+0xc0>
   14ed8:	002f883a 	mov	r23,zero
   14edc:	9c800117 	ldw	r18,4(r19)
   14ee0:	9c000217 	ldw	r16,8(r19)
   14ee4:	90bfffc4 	addi	r2,r18,-1
   14ee8:	10000d16 	blt	r2,zero,14f20 <_fwalk_reent+0x84>
   14eec:	0023883a 	mov	r17,zero
   14ef0:	053fffc4 	movi	r20,-1
   14ef4:	8080030f 	ldh	r2,12(r16)
   14ef8:	8c400044 	addi	r17,r17,1
   14efc:	10000626 	beq	r2,zero,14f18 <_fwalk_reent+0x7c>
   14f00:	8080038f 	ldh	r2,14(r16)
   14f04:	800b883a 	mov	r5,r16
   14f08:	a809883a 	mov	r4,r21
   14f0c:	15000226 	beq	r2,r20,14f18 <_fwalk_reent+0x7c>
   14f10:	b03ee83a 	callr	r22
   14f14:	b8aeb03a 	or	r23,r23,r2
   14f18:	84001704 	addi	r16,r16,92
   14f1c:	947ff51e 	bne	r18,r17,14ef4 <_fwalk_reent+0x58>
   14f20:	9cc00017 	ldw	r19,0(r19)
   14f24:	983fed1e 	bne	r19,zero,14edc <_fwalk_reent+0x40>
   14f28:	001435c0 	call	1435c <__sfp_lock_release>
   14f2c:	b805883a 	mov	r2,r23
   14f30:	dfc00817 	ldw	ra,32(sp)
   14f34:	ddc00717 	ldw	r23,28(sp)
   14f38:	dd800617 	ldw	r22,24(sp)
   14f3c:	dd400517 	ldw	r21,20(sp)
   14f40:	dd000417 	ldw	r20,16(sp)
   14f44:	dcc00317 	ldw	r19,12(sp)
   14f48:	dc800217 	ldw	r18,8(sp)
   14f4c:	dc400117 	ldw	r17,4(sp)
   14f50:	dc000017 	ldw	r16,0(sp)
   14f54:	dec00904 	addi	sp,sp,36
   14f58:	f800283a 	ret
   14f5c:	002f883a 	mov	r23,zero
   14f60:	003ff106 	br	14f28 <_fwalk_reent+0x8c>

00014f64 <_fwalk>:
   14f64:	defff804 	addi	sp,sp,-32
   14f68:	dcc00315 	stw	r19,12(sp)
   14f6c:	24c0b804 	addi	r19,r4,736
   14f70:	dd400515 	stw	r21,20(sp)
   14f74:	dfc00715 	stw	ra,28(sp)
   14f78:	dd800615 	stw	r22,24(sp)
   14f7c:	dd000415 	stw	r20,16(sp)
   14f80:	dc800215 	stw	r18,8(sp)
   14f84:	dc400115 	stw	r17,4(sp)
   14f88:	dc000015 	stw	r16,0(sp)
   14f8c:	282b883a 	mov	r21,r5
   14f90:	00143580 	call	14358 <__sfp_lock_acquire>
   14f94:	98001f26 	beq	r19,zero,15014 <_fwalk+0xb0>
   14f98:	002d883a 	mov	r22,zero
   14f9c:	9c800117 	ldw	r18,4(r19)
   14fa0:	9c000217 	ldw	r16,8(r19)
   14fa4:	90bfffc4 	addi	r2,r18,-1
   14fa8:	10000c16 	blt	r2,zero,14fdc <_fwalk+0x78>
   14fac:	0023883a 	mov	r17,zero
   14fb0:	053fffc4 	movi	r20,-1
   14fb4:	8080030f 	ldh	r2,12(r16)
   14fb8:	8c400044 	addi	r17,r17,1
   14fbc:	10000526 	beq	r2,zero,14fd4 <_fwalk+0x70>
   14fc0:	8080038f 	ldh	r2,14(r16)
   14fc4:	8009883a 	mov	r4,r16
   14fc8:	15000226 	beq	r2,r20,14fd4 <_fwalk+0x70>
   14fcc:	a83ee83a 	callr	r21
   14fd0:	b0acb03a 	or	r22,r22,r2
   14fd4:	84001704 	addi	r16,r16,92
   14fd8:	947ff61e 	bne	r18,r17,14fb4 <_fwalk+0x50>
   14fdc:	9cc00017 	ldw	r19,0(r19)
   14fe0:	983fee1e 	bne	r19,zero,14f9c <_fwalk+0x38>
   14fe4:	001435c0 	call	1435c <__sfp_lock_release>
   14fe8:	b005883a 	mov	r2,r22
   14fec:	dfc00717 	ldw	ra,28(sp)
   14ff0:	dd800617 	ldw	r22,24(sp)
   14ff4:	dd400517 	ldw	r21,20(sp)
   14ff8:	dd000417 	ldw	r20,16(sp)
   14ffc:	dcc00317 	ldw	r19,12(sp)
   15000:	dc800217 	ldw	r18,8(sp)
   15004:	dc400117 	ldw	r17,4(sp)
   15008:	dc000017 	ldw	r16,0(sp)
   1500c:	dec00804 	addi	sp,sp,32
   15010:	f800283a 	ret
   15014:	002d883a 	mov	r22,zero
   15018:	003ff206 	br	14fe4 <_fwalk+0x80>

0001501c <__locale_charset>:
   1501c:	d0a00317 	ldw	r2,-32756(gp)
   15020:	f800283a 	ret

00015024 <_localeconv_r>:
   15024:	00800174 	movhi	r2,5
   15028:	10a04204 	addi	r2,r2,-32504
   1502c:	f800283a 	ret

00015030 <localeconv>:
   15030:	00800174 	movhi	r2,5
   15034:	10a77004 	addi	r2,r2,-25152
   15038:	11000017 	ldw	r4,0(r2)
   1503c:	00150241 	jmpi	15024 <_localeconv_r>

00015040 <_setlocale_r>:
   15040:	defffc04 	addi	sp,sp,-16
   15044:	00c00174 	movhi	r3,5
   15048:	18e03d04 	addi	r3,r3,-32524
   1504c:	dc800215 	stw	r18,8(sp)
   15050:	dc400115 	stw	r17,4(sp)
   15054:	dc000015 	stw	r16,0(sp)
   15058:	2023883a 	mov	r17,r4
   1505c:	2825883a 	mov	r18,r5
   15060:	dfc00315 	stw	ra,12(sp)
   15064:	3021883a 	mov	r16,r6
   15068:	3009883a 	mov	r4,r6
   1506c:	180b883a 	mov	r5,r3
   15070:	30000926 	beq	r6,zero,15098 <_setlocale_r+0x58>
   15074:	00174c40 	call	174c4 <strcmp>
   15078:	8009883a 	mov	r4,r16
   1507c:	01400174 	movhi	r5,5
   15080:	29602804 	addi	r5,r5,-32608
   15084:	10000b1e 	bne	r2,zero,150b4 <_setlocale_r+0x74>
   15088:	8c000d15 	stw	r16,52(r17)
   1508c:	8c800c15 	stw	r18,48(r17)
   15090:	00c00174 	movhi	r3,5
   15094:	18e03d04 	addi	r3,r3,-32524
   15098:	1805883a 	mov	r2,r3
   1509c:	dfc00317 	ldw	ra,12(sp)
   150a0:	dc800217 	ldw	r18,8(sp)
   150a4:	dc400117 	ldw	r17,4(sp)
   150a8:	dc000017 	ldw	r16,0(sp)
   150ac:	dec00404 	addi	sp,sp,16
   150b0:	f800283a 	ret
   150b4:	00174c40 	call	174c4 <strcmp>
   150b8:	0007883a 	mov	r3,zero
   150bc:	103ff226 	beq	r2,zero,15088 <_setlocale_r+0x48>
   150c0:	003ff506 	br	15098 <_setlocale_r+0x58>

000150c4 <setlocale>:
   150c4:	01800174 	movhi	r6,5
   150c8:	31a77004 	addi	r6,r6,-25152
   150cc:	2007883a 	mov	r3,r4
   150d0:	31000017 	ldw	r4,0(r6)
   150d4:	280d883a 	mov	r6,r5
   150d8:	180b883a 	mov	r5,r3
   150dc:	00150401 	jmpi	15040 <_setlocale_r>

000150e0 <__smakebuf_r>:
   150e0:	2880030b 	ldhu	r2,12(r5)
   150e4:	deffed04 	addi	sp,sp,-76
   150e8:	dc401015 	stw	r17,64(sp)
   150ec:	1080008c 	andi	r2,r2,2
   150f0:	dc000f15 	stw	r16,60(sp)
   150f4:	dfc01215 	stw	ra,72(sp)
   150f8:	dc801115 	stw	r18,68(sp)
   150fc:	2821883a 	mov	r16,r5
   15100:	2023883a 	mov	r17,r4
   15104:	10000b26 	beq	r2,zero,15134 <__smakebuf_r+0x54>
   15108:	28c010c4 	addi	r3,r5,67
   1510c:	00800044 	movi	r2,1
   15110:	28800515 	stw	r2,20(r5)
   15114:	28c00415 	stw	r3,16(r5)
   15118:	28c00015 	stw	r3,0(r5)
   1511c:	dfc01217 	ldw	ra,72(sp)
   15120:	dc801117 	ldw	r18,68(sp)
   15124:	dc401017 	ldw	r17,64(sp)
   15128:	dc000f17 	ldw	r16,60(sp)
   1512c:	dec01304 	addi	sp,sp,76
   15130:	f800283a 	ret
   15134:	2940038f 	ldh	r5,14(r5)
   15138:	28002116 	blt	r5,zero,151c0 <__smakebuf_r+0xe0>
   1513c:	d80d883a 	mov	r6,sp
   15140:	00178400 	call	17840 <_fstat_r>
   15144:	10001e16 	blt	r2,zero,151c0 <__smakebuf_r+0xe0>
   15148:	d8800117 	ldw	r2,4(sp)
   1514c:	00e00014 	movui	r3,32768
   15150:	113c000c 	andi	r4,r2,61440
   15154:	20c03126 	beq	r4,r3,1521c <__smakebuf_r+0x13c>
   15158:	8080030b 	ldhu	r2,12(r16)
   1515c:	00c80004 	movi	r3,8192
   15160:	10820014 	ori	r2,r2,2048
   15164:	8080030d 	sth	r2,12(r16)
   15168:	20c01e26 	beq	r4,r3,151e4 <__smakebuf_r+0x104>
   1516c:	04810004 	movi	r18,1024
   15170:	8809883a 	mov	r4,r17
   15174:	900b883a 	mov	r5,r18
   15178:	00152740 	call	15274 <_malloc_r>
   1517c:	1009883a 	mov	r4,r2
   15180:	10003126 	beq	r2,zero,15248 <__smakebuf_r+0x168>
   15184:	80c0030b 	ldhu	r3,12(r16)
   15188:	00800074 	movhi	r2,1
   1518c:	10911304 	addi	r2,r2,17484
   15190:	88800f15 	stw	r2,60(r17)
   15194:	18c02014 	ori	r3,r3,128
   15198:	84800515 	stw	r18,20(r16)
   1519c:	80c0030d 	sth	r3,12(r16)
   151a0:	81000415 	stw	r4,16(r16)
   151a4:	81000015 	stw	r4,0(r16)
   151a8:	dfc01217 	ldw	ra,72(sp)
   151ac:	dc801117 	ldw	r18,68(sp)
   151b0:	dc401017 	ldw	r17,64(sp)
   151b4:	dc000f17 	ldw	r16,60(sp)
   151b8:	dec01304 	addi	sp,sp,76
   151bc:	f800283a 	ret
   151c0:	80c0030b 	ldhu	r3,12(r16)
   151c4:	1880200c 	andi	r2,r3,128
   151c8:	10000426 	beq	r2,zero,151dc <__smakebuf_r+0xfc>
   151cc:	04801004 	movi	r18,64
   151d0:	18820014 	ori	r2,r3,2048
   151d4:	8080030d 	sth	r2,12(r16)
   151d8:	003fe506 	br	15170 <__smakebuf_r+0x90>
   151dc:	04810004 	movi	r18,1024
   151e0:	003ffb06 	br	151d0 <__smakebuf_r+0xf0>
   151e4:	8140038f 	ldh	r5,14(r16)
   151e8:	8809883a 	mov	r4,r17
   151ec:	00178b40 	call	178b4 <_isatty_r>
   151f0:	103fde26 	beq	r2,zero,1516c <__smakebuf_r+0x8c>
   151f4:	8080030b 	ldhu	r2,12(r16)
   151f8:	80c010c4 	addi	r3,r16,67
   151fc:	04810004 	movi	r18,1024
   15200:	10800054 	ori	r2,r2,1
   15204:	8080030d 	sth	r2,12(r16)
   15208:	00800044 	movi	r2,1
   1520c:	80c00415 	stw	r3,16(r16)
   15210:	80800515 	stw	r2,20(r16)
   15214:	80c00015 	stw	r3,0(r16)
   15218:	003fd506 	br	15170 <__smakebuf_r+0x90>
   1521c:	80c00a17 	ldw	r3,40(r16)
   15220:	00800074 	movhi	r2,1
   15224:	109ce004 	addi	r2,r2,29568
   15228:	18bfcb1e 	bne	r3,r2,15158 <__smakebuf_r+0x78>
   1522c:	8080030b 	ldhu	r2,12(r16)
   15230:	00c10004 	movi	r3,1024
   15234:	1825883a 	mov	r18,r3
   15238:	10c4b03a 	or	r2,r2,r3
   1523c:	8080030d 	sth	r2,12(r16)
   15240:	80c01315 	stw	r3,76(r16)
   15244:	003fca06 	br	15170 <__smakebuf_r+0x90>
   15248:	8100030b 	ldhu	r4,12(r16)
   1524c:	2080800c 	andi	r2,r4,512
   15250:	103fb21e 	bne	r2,zero,1511c <__smakebuf_r+0x3c>
   15254:	80c010c4 	addi	r3,r16,67
   15258:	21000094 	ori	r4,r4,2
   1525c:	00800044 	movi	r2,1
   15260:	80800515 	stw	r2,20(r16)
   15264:	8100030d 	sth	r4,12(r16)
   15268:	80c00415 	stw	r3,16(r16)
   1526c:	80c00015 	stw	r3,0(r16)
   15270:	003faa06 	br	1511c <__smakebuf_r+0x3c>

00015274 <_malloc_r>:
   15274:	defff604 	addi	sp,sp,-40
   15278:	28c002c4 	addi	r3,r5,11
   1527c:	00800584 	movi	r2,22
   15280:	dc800215 	stw	r18,8(sp)
   15284:	dfc00915 	stw	ra,36(sp)
   15288:	df000815 	stw	fp,32(sp)
   1528c:	ddc00715 	stw	r23,28(sp)
   15290:	dd800615 	stw	r22,24(sp)
   15294:	dd400515 	stw	r21,20(sp)
   15298:	dd000415 	stw	r20,16(sp)
   1529c:	dcc00315 	stw	r19,12(sp)
   152a0:	dc400115 	stw	r17,4(sp)
   152a4:	dc000015 	stw	r16,0(sp)
   152a8:	2025883a 	mov	r18,r4
   152ac:	10c01236 	bltu	r2,r3,152f8 <_malloc_r+0x84>
   152b0:	04400404 	movi	r17,16
   152b4:	8940142e 	bgeu	r17,r5,15308 <_malloc_r+0x94>
   152b8:	00800304 	movi	r2,12
   152bc:	0007883a 	mov	r3,zero
   152c0:	90800015 	stw	r2,0(r18)
   152c4:	1805883a 	mov	r2,r3
   152c8:	dfc00917 	ldw	ra,36(sp)
   152cc:	df000817 	ldw	fp,32(sp)
   152d0:	ddc00717 	ldw	r23,28(sp)
   152d4:	dd800617 	ldw	r22,24(sp)
   152d8:	dd400517 	ldw	r21,20(sp)
   152dc:	dd000417 	ldw	r20,16(sp)
   152e0:	dcc00317 	ldw	r19,12(sp)
   152e4:	dc800217 	ldw	r18,8(sp)
   152e8:	dc400117 	ldw	r17,4(sp)
   152ec:	dc000017 	ldw	r16,0(sp)
   152f0:	dec00a04 	addi	sp,sp,40
   152f4:	f800283a 	ret
   152f8:	00bffe04 	movi	r2,-8
   152fc:	18a2703a 	and	r17,r3,r2
   15300:	883fed16 	blt	r17,zero,152b8 <_malloc_r+0x44>
   15304:	897fec36 	bltu	r17,r5,152b8 <_malloc_r+0x44>
   15308:	9009883a 	mov	r4,r18
   1530c:	001a4c80 	call	1a4c8 <__malloc_lock>
   15310:	00807dc4 	movi	r2,503
   15314:	14402b2e 	bgeu	r2,r17,153c4 <_malloc_r+0x150>
   15318:	8806d27a 	srli	r3,r17,9
   1531c:	18003f1e 	bne	r3,zero,1541c <_malloc_r+0x1a8>
   15320:	880cd0fa 	srli	r6,r17,3
   15324:	300490fa 	slli	r2,r6,3
   15328:	02c00174 	movhi	r11,5
   1532c:	5ae1ec04 	addi	r11,r11,-30800
   15330:	12cb883a 	add	r5,r2,r11
   15334:	2c000317 	ldw	r16,12(r5)
   15338:	580f883a 	mov	r7,r11
   1533c:	2c00041e 	bne	r5,r16,15350 <_malloc_r+0xdc>
   15340:	00000a06 	br	1536c <_malloc_r+0xf8>
   15344:	1800860e 	bge	r3,zero,15560 <_malloc_r+0x2ec>
   15348:	84000317 	ldw	r16,12(r16)
   1534c:	2c000726 	beq	r5,r16,1536c <_malloc_r+0xf8>
   15350:	80800117 	ldw	r2,4(r16)
   15354:	00ffff04 	movi	r3,-4
   15358:	10c8703a 	and	r4,r2,r3
   1535c:	2447c83a 	sub	r3,r4,r17
   15360:	008003c4 	movi	r2,15
   15364:	10fff70e 	bge	r2,r3,15344 <_malloc_r+0xd0>
   15368:	31bfffc4 	addi	r6,r6,-1
   1536c:	32400044 	addi	r9,r6,1
   15370:	02800174 	movhi	r10,5
   15374:	52a1ee04 	addi	r10,r10,-30792
   15378:	54000217 	ldw	r16,8(r10)
   1537c:	8280a026 	beq	r16,r10,15600 <_malloc_r+0x38c>
   15380:	80800117 	ldw	r2,4(r16)
   15384:	00ffff04 	movi	r3,-4
   15388:	10ca703a 	and	r5,r2,r3
   1538c:	2c4dc83a 	sub	r6,r5,r17
   15390:	008003c4 	movi	r2,15
   15394:	11808316 	blt	r2,r6,155a4 <_malloc_r+0x330>
   15398:	52800315 	stw	r10,12(r10)
   1539c:	52800215 	stw	r10,8(r10)
   153a0:	30002916 	blt	r6,zero,15448 <_malloc_r+0x1d4>
   153a4:	8147883a 	add	r3,r16,r5
   153a8:	18800117 	ldw	r2,4(r3)
   153ac:	9009883a 	mov	r4,r18
   153b0:	10800054 	ori	r2,r2,1
   153b4:	18800115 	stw	r2,4(r3)
   153b8:	001a4e80 	call	1a4e8 <__malloc_unlock>
   153bc:	80c00204 	addi	r3,r16,8
   153c0:	003fc006 	br	152c4 <_malloc_r+0x50>
   153c4:	02c00174 	movhi	r11,5
   153c8:	5ae1ec04 	addi	r11,r11,-30800
   153cc:	8ac5883a 	add	r2,r17,r11
   153d0:	14000317 	ldw	r16,12(r2)
   153d4:	580f883a 	mov	r7,r11
   153d8:	8806d0fa 	srli	r3,r17,3
   153dc:	14006c26 	beq	r2,r16,15590 <_malloc_r+0x31c>
   153e0:	80c00117 	ldw	r3,4(r16)
   153e4:	00bfff04 	movi	r2,-4
   153e8:	81800317 	ldw	r6,12(r16)
   153ec:	1886703a 	and	r3,r3,r2
   153f0:	80c7883a 	add	r3,r16,r3
   153f4:	18800117 	ldw	r2,4(r3)
   153f8:	81400217 	ldw	r5,8(r16)
   153fc:	9009883a 	mov	r4,r18
   15400:	10800054 	ori	r2,r2,1
   15404:	18800115 	stw	r2,4(r3)
   15408:	31400215 	stw	r5,8(r6)
   1540c:	29800315 	stw	r6,12(r5)
   15410:	001a4e80 	call	1a4e8 <__malloc_unlock>
   15414:	80c00204 	addi	r3,r16,8
   15418:	003faa06 	br	152c4 <_malloc_r+0x50>
   1541c:	00800104 	movi	r2,4
   15420:	10c0052e 	bgeu	r2,r3,15438 <_malloc_r+0x1c4>
   15424:	00800504 	movi	r2,20
   15428:	10c07836 	bltu	r2,r3,1560c <_malloc_r+0x398>
   1542c:	198016c4 	addi	r6,r3,91
   15430:	300490fa 	slli	r2,r6,3
   15434:	003fbc06 	br	15328 <_malloc_r+0xb4>
   15438:	8804d1ba 	srli	r2,r17,6
   1543c:	11800e04 	addi	r6,r2,56
   15440:	300490fa 	slli	r2,r6,3
   15444:	003fb806 	br	15328 <_malloc_r+0xb4>
   15448:	00807fc4 	movi	r2,511
   1544c:	1140bb36 	bltu	r2,r5,1573c <_malloc_r+0x4c8>
   15450:	2806d0fa 	srli	r3,r5,3
   15454:	573ffe04 	addi	fp,r10,-8
   15458:	00800044 	movi	r2,1
   1545c:	180890fa 	slli	r4,r3,3
   15460:	1807d0ba 	srai	r3,r3,2
   15464:	e1c00117 	ldw	r7,4(fp)
   15468:	5909883a 	add	r4,r11,r4
   1546c:	21400217 	ldw	r5,8(r4)
   15470:	10c4983a 	sll	r2,r2,r3
   15474:	81000315 	stw	r4,12(r16)
   15478:	81400215 	stw	r5,8(r16)
   1547c:	388eb03a 	or	r7,r7,r2
   15480:	2c000315 	stw	r16,12(r5)
   15484:	24000215 	stw	r16,8(r4)
   15488:	e1c00115 	stw	r7,4(fp)
   1548c:	4807883a 	mov	r3,r9
   15490:	4800cd16 	blt	r9,zero,157c8 <_malloc_r+0x554>
   15494:	1807d0ba 	srai	r3,r3,2
   15498:	00800044 	movi	r2,1
   1549c:	10c8983a 	sll	r4,r2,r3
   154a0:	39004436 	bltu	r7,r4,155b4 <_malloc_r+0x340>
   154a4:	21c4703a 	and	r2,r4,r7
   154a8:	10000a1e 	bne	r2,zero,154d4 <_malloc_r+0x260>
   154ac:	2109883a 	add	r4,r4,r4
   154b0:	00bfff04 	movi	r2,-4
   154b4:	4884703a 	and	r2,r9,r2
   154b8:	3906703a 	and	r3,r7,r4
   154bc:	12400104 	addi	r9,r2,4
   154c0:	1800041e 	bne	r3,zero,154d4 <_malloc_r+0x260>
   154c4:	2109883a 	add	r4,r4,r4
   154c8:	3904703a 	and	r2,r7,r4
   154cc:	4a400104 	addi	r9,r9,4
   154d0:	103ffc26 	beq	r2,zero,154c4 <_malloc_r+0x250>
   154d4:	480490fa 	slli	r2,r9,3
   154d8:	4819883a 	mov	r12,r9
   154dc:	023fff04 	movi	r8,-4
   154e0:	589b883a 	add	r13,r11,r2
   154e4:	6807883a 	mov	r3,r13
   154e8:	014003c4 	movi	r5,15
   154ec:	1c000317 	ldw	r16,12(r3)
   154f0:	1c00041e 	bne	r3,r16,15504 <_malloc_r+0x290>
   154f4:	0000a706 	br	15794 <_malloc_r+0x520>
   154f8:	3000ab0e 	bge	r6,zero,157a8 <_malloc_r+0x534>
   154fc:	84000317 	ldw	r16,12(r16)
   15500:	1c00a426 	beq	r3,r16,15794 <_malloc_r+0x520>
   15504:	80800117 	ldw	r2,4(r16)
   15508:	1204703a 	and	r2,r2,r8
   1550c:	144dc83a 	sub	r6,r2,r17
   15510:	29bff90e 	bge	r5,r6,154f8 <_malloc_r+0x284>
   15514:	81000317 	ldw	r4,12(r16)
   15518:	80c00217 	ldw	r3,8(r16)
   1551c:	89400054 	ori	r5,r17,1
   15520:	8445883a 	add	r2,r16,r17
   15524:	20c00215 	stw	r3,8(r4)
   15528:	19000315 	stw	r4,12(r3)
   1552c:	81400115 	stw	r5,4(r16)
   15530:	1187883a 	add	r3,r2,r6
   15534:	31000054 	ori	r4,r6,1
   15538:	50800315 	stw	r2,12(r10)
   1553c:	50800215 	stw	r2,8(r10)
   15540:	19800015 	stw	r6,0(r3)
   15544:	11000115 	stw	r4,4(r2)
   15548:	12800215 	stw	r10,8(r2)
   1554c:	12800315 	stw	r10,12(r2)
   15550:	9009883a 	mov	r4,r18
   15554:	001a4e80 	call	1a4e8 <__malloc_unlock>
   15558:	80c00204 	addi	r3,r16,8
   1555c:	003f5906 	br	152c4 <_malloc_r+0x50>
   15560:	8109883a 	add	r4,r16,r4
   15564:	20800117 	ldw	r2,4(r4)
   15568:	80c00217 	ldw	r3,8(r16)
   1556c:	81400317 	ldw	r5,12(r16)
   15570:	10800054 	ori	r2,r2,1
   15574:	20800115 	stw	r2,4(r4)
   15578:	28c00215 	stw	r3,8(r5)
   1557c:	19400315 	stw	r5,12(r3)
   15580:	9009883a 	mov	r4,r18
   15584:	001a4e80 	call	1a4e8 <__malloc_unlock>
   15588:	80c00204 	addi	r3,r16,8
   1558c:	003f4d06 	br	152c4 <_malloc_r+0x50>
   15590:	80800204 	addi	r2,r16,8
   15594:	14000317 	ldw	r16,12(r2)
   15598:	143f911e 	bne	r2,r16,153e0 <_malloc_r+0x16c>
   1559c:	1a400084 	addi	r9,r3,2
   155a0:	003f7306 	br	15370 <_malloc_r+0xfc>
   155a4:	88c00054 	ori	r3,r17,1
   155a8:	8445883a 	add	r2,r16,r17
   155ac:	80c00115 	stw	r3,4(r16)
   155b0:	003fdf06 	br	15530 <_malloc_r+0x2bc>
   155b4:	e4000217 	ldw	r16,8(fp)
   155b8:	00bfff04 	movi	r2,-4
   155bc:	80c00117 	ldw	r3,4(r16)
   155c0:	802d883a 	mov	r22,r16
   155c4:	18aa703a 	and	r21,r3,r2
   155c8:	ac401636 	bltu	r21,r17,15624 <_malloc_r+0x3b0>
   155cc:	ac49c83a 	sub	r4,r21,r17
   155d0:	008003c4 	movi	r2,15
   155d4:	1100130e 	bge	r2,r4,15624 <_malloc_r+0x3b0>
   155d8:	88800054 	ori	r2,r17,1
   155dc:	8447883a 	add	r3,r16,r17
   155e0:	80800115 	stw	r2,4(r16)
   155e4:	20800054 	ori	r2,r4,1
   155e8:	18800115 	stw	r2,4(r3)
   155ec:	e0c00215 	stw	r3,8(fp)
   155f0:	9009883a 	mov	r4,r18
   155f4:	001a4e80 	call	1a4e8 <__malloc_unlock>
   155f8:	80c00204 	addi	r3,r16,8
   155fc:	003f3106 	br	152c4 <_malloc_r+0x50>
   15600:	39c00117 	ldw	r7,4(r7)
   15604:	573ffe04 	addi	fp,r10,-8
   15608:	003fa006 	br	1548c <_malloc_r+0x218>
   1560c:	00801504 	movi	r2,84
   15610:	10c06736 	bltu	r2,r3,157b0 <_malloc_r+0x53c>
   15614:	8804d33a 	srli	r2,r17,12
   15618:	11801b84 	addi	r6,r2,110
   1561c:	300490fa 	slli	r2,r6,3
   15620:	003f4106 	br	15328 <_malloc_r+0xb4>
   15624:	d0a01817 	ldw	r2,-32672(gp)
   15628:	d0e00517 	ldw	r3,-32748(gp)
   1562c:	053fffc4 	movi	r20,-1
   15630:	10800404 	addi	r2,r2,16
   15634:	88a7883a 	add	r19,r17,r2
   15638:	1d000326 	beq	r3,r20,15648 <_malloc_r+0x3d4>
   1563c:	98c3ffc4 	addi	r3,r19,4095
   15640:	00bc0004 	movi	r2,-4096
   15644:	18a6703a 	and	r19,r3,r2
   15648:	9009883a 	mov	r4,r18
   1564c:	980b883a 	mov	r5,r19
   15650:	00173080 	call	17308 <_sbrk_r>
   15654:	1009883a 	mov	r4,r2
   15658:	15000426 	beq	r2,r20,1566c <_malloc_r+0x3f8>
   1565c:	854b883a 	add	r5,r16,r21
   15660:	1029883a 	mov	r20,r2
   15664:	11405a2e 	bgeu	r2,r5,157d0 <_malloc_r+0x55c>
   15668:	87000c26 	beq	r16,fp,1569c <_malloc_r+0x428>
   1566c:	e4000217 	ldw	r16,8(fp)
   15670:	80c00117 	ldw	r3,4(r16)
   15674:	00bfff04 	movi	r2,-4
   15678:	1884703a 	and	r2,r3,r2
   1567c:	14400336 	bltu	r2,r17,1568c <_malloc_r+0x418>
   15680:	1449c83a 	sub	r4,r2,r17
   15684:	008003c4 	movi	r2,15
   15688:	113fd316 	blt	r2,r4,155d8 <_malloc_r+0x364>
   1568c:	9009883a 	mov	r4,r18
   15690:	001a4e80 	call	1a4e8 <__malloc_unlock>
   15694:	0007883a 	mov	r3,zero
   15698:	003f0a06 	br	152c4 <_malloc_r+0x50>
   1569c:	05c00174 	movhi	r23,5
   156a0:	bde79404 	addi	r23,r23,-25008
   156a4:	b8800017 	ldw	r2,0(r23)
   156a8:	988d883a 	add	r6,r19,r2
   156ac:	b9800015 	stw	r6,0(r23)
   156b0:	d0e00517 	ldw	r3,-32748(gp)
   156b4:	00bfffc4 	movi	r2,-1
   156b8:	18808e26 	beq	r3,r2,158f4 <_malloc_r+0x680>
   156bc:	2145c83a 	sub	r2,r4,r5
   156c0:	3085883a 	add	r2,r6,r2
   156c4:	b8800015 	stw	r2,0(r23)
   156c8:	20c001cc 	andi	r3,r4,7
   156cc:	18005f1e 	bne	r3,zero,1584c <_malloc_r+0x5d8>
   156d0:	000b883a 	mov	r5,zero
   156d4:	a4c5883a 	add	r2,r20,r19
   156d8:	1083ffcc 	andi	r2,r2,4095
   156dc:	00c40004 	movi	r3,4096
   156e0:	1887c83a 	sub	r3,r3,r2
   156e4:	28e7883a 	add	r19,r5,r3
   156e8:	9009883a 	mov	r4,r18
   156ec:	980b883a 	mov	r5,r19
   156f0:	00173080 	call	17308 <_sbrk_r>
   156f4:	1007883a 	mov	r3,r2
   156f8:	00bfffc4 	movi	r2,-1
   156fc:	18807a26 	beq	r3,r2,158e8 <_malloc_r+0x674>
   15700:	1d05c83a 	sub	r2,r3,r20
   15704:	9885883a 	add	r2,r19,r2
   15708:	10c00054 	ori	r3,r2,1
   1570c:	b8800017 	ldw	r2,0(r23)
   15710:	a021883a 	mov	r16,r20
   15714:	a0c00115 	stw	r3,4(r20)
   15718:	9885883a 	add	r2,r19,r2
   1571c:	b8800015 	stw	r2,0(r23)
   15720:	e5000215 	stw	r20,8(fp)
   15724:	b7003626 	beq	r22,fp,15800 <_malloc_r+0x58c>
   15728:	018003c4 	movi	r6,15
   1572c:	35404b36 	bltu	r6,r21,1585c <_malloc_r+0x5e8>
   15730:	00800044 	movi	r2,1
   15734:	a0800115 	stw	r2,4(r20)
   15738:	003fcd06 	br	15670 <_malloc_r+0x3fc>
   1573c:	2808d27a 	srli	r4,r5,9
   15740:	2000371e 	bne	r4,zero,15820 <_malloc_r+0x5ac>
   15744:	2808d0fa 	srli	r4,r5,3
   15748:	200690fa 	slli	r3,r4,3
   1574c:	1ad1883a 	add	r8,r3,r11
   15750:	41800217 	ldw	r6,8(r8)
   15754:	41805b26 	beq	r8,r6,158c4 <_malloc_r+0x650>
   15758:	30800117 	ldw	r2,4(r6)
   1575c:	00ffff04 	movi	r3,-4
   15760:	10c4703a 	and	r2,r2,r3
   15764:	2880022e 	bgeu	r5,r2,15770 <_malloc_r+0x4fc>
   15768:	31800217 	ldw	r6,8(r6)
   1576c:	41bffa1e 	bne	r8,r6,15758 <_malloc_r+0x4e4>
   15770:	32000317 	ldw	r8,12(r6)
   15774:	39c00117 	ldw	r7,4(r7)
   15778:	82000315 	stw	r8,12(r16)
   1577c:	81800215 	stw	r6,8(r16)
   15780:	07000174 	movhi	fp,5
   15784:	e721ec04 	addi	fp,fp,-30800
   15788:	34000315 	stw	r16,12(r6)
   1578c:	44000215 	stw	r16,8(r8)
   15790:	003f3e06 	br	1548c <_malloc_r+0x218>
   15794:	63000044 	addi	r12,r12,1
   15798:	608000cc 	andi	r2,r12,3
   1579c:	10005d26 	beq	r2,zero,15914 <_malloc_r+0x6a0>
   157a0:	18c00204 	addi	r3,r3,8
   157a4:	003f5106 	br	154ec <_malloc_r+0x278>
   157a8:	8089883a 	add	r4,r16,r2
   157ac:	003f6d06 	br	15564 <_malloc_r+0x2f0>
   157b0:	00805504 	movi	r2,340
   157b4:	10c02036 	bltu	r2,r3,15838 <_malloc_r+0x5c4>
   157b8:	8804d3fa 	srli	r2,r17,15
   157bc:	11801dc4 	addi	r6,r2,119
   157c0:	300490fa 	slli	r2,r6,3
   157c4:	003ed806 	br	15328 <_malloc_r+0xb4>
   157c8:	48c000c4 	addi	r3,r9,3
   157cc:	003f3106 	br	15494 <_malloc_r+0x220>
   157d0:	05c00174 	movhi	r23,5
   157d4:	bde79404 	addi	r23,r23,-25008
   157d8:	b8800017 	ldw	r2,0(r23)
   157dc:	988d883a 	add	r6,r19,r2
   157e0:	b9800015 	stw	r6,0(r23)
   157e4:	293fb21e 	bne	r5,r4,156b0 <_malloc_r+0x43c>
   157e8:	2083ffcc 	andi	r2,r4,4095
   157ec:	103fb01e 	bne	r2,zero,156b0 <_malloc_r+0x43c>
   157f0:	e4000217 	ldw	r16,8(fp)
   157f4:	9d45883a 	add	r2,r19,r21
   157f8:	10800054 	ori	r2,r2,1
   157fc:	80800115 	stw	r2,4(r16)
   15800:	b8c00017 	ldw	r3,0(r23)
   15804:	d0a01917 	ldw	r2,-32668(gp)
   15808:	10c0012e 	bgeu	r2,r3,15810 <_malloc_r+0x59c>
   1580c:	d0e01915 	stw	r3,-32668(gp)
   15810:	d0a01a17 	ldw	r2,-32664(gp)
   15814:	10ff962e 	bgeu	r2,r3,15670 <_malloc_r+0x3fc>
   15818:	d0e01a15 	stw	r3,-32664(gp)
   1581c:	003f9406 	br	15670 <_malloc_r+0x3fc>
   15820:	00800104 	movi	r2,4
   15824:	11001e36 	bltu	r2,r4,158a0 <_malloc_r+0x62c>
   15828:	2804d1ba 	srli	r2,r5,6
   1582c:	11000e04 	addi	r4,r2,56
   15830:	200690fa 	slli	r3,r4,3
   15834:	003fc506 	br	1574c <_malloc_r+0x4d8>
   15838:	00815504 	movi	r2,1364
   1583c:	10c01d2e 	bgeu	r2,r3,158b4 <_malloc_r+0x640>
   15840:	01801f84 	movi	r6,126
   15844:	0080fc04 	movi	r2,1008
   15848:	003eb706 	br	15328 <_malloc_r+0xb4>
   1584c:	00800204 	movi	r2,8
   15850:	10cbc83a 	sub	r5,r2,r3
   15854:	2169883a 	add	r20,r4,r5
   15858:	003f9e06 	br	156d4 <_malloc_r+0x460>
   1585c:	00bffe04 	movi	r2,-8
   15860:	a93ffd04 	addi	r4,r21,-12
   15864:	2088703a 	and	r4,r4,r2
   15868:	b10b883a 	add	r5,r22,r4
   1586c:	00c00144 	movi	r3,5
   15870:	28c00215 	stw	r3,8(r5)
   15874:	28c00115 	stw	r3,4(r5)
   15878:	b0800117 	ldw	r2,4(r22)
   1587c:	1080004c 	andi	r2,r2,1
   15880:	2084b03a 	or	r2,r4,r2
   15884:	b0800115 	stw	r2,4(r22)
   15888:	313fdd2e 	bgeu	r6,r4,15800 <_malloc_r+0x58c>
   1588c:	b1400204 	addi	r5,r22,8
   15890:	9009883a 	mov	r4,r18
   15894:	00146ec0 	call	146ec <_free_r>
   15898:	e4000217 	ldw	r16,8(fp)
   1589c:	003fd806 	br	15800 <_malloc_r+0x58c>
   158a0:	00800504 	movi	r2,20
   158a4:	11001536 	bltu	r2,r4,158fc <_malloc_r+0x688>
   158a8:	210016c4 	addi	r4,r4,91
   158ac:	200690fa 	slli	r3,r4,3
   158b0:	003fa606 	br	1574c <_malloc_r+0x4d8>
   158b4:	8804d4ba 	srli	r2,r17,18
   158b8:	11801f04 	addi	r6,r2,124
   158bc:	300490fa 	slli	r2,r6,3
   158c0:	003e9906 	br	15328 <_malloc_r+0xb4>
   158c4:	2009d0ba 	srai	r4,r4,2
   158c8:	01400174 	movhi	r5,5
   158cc:	2961ec04 	addi	r5,r5,-30800
   158d0:	00c00044 	movi	r3,1
   158d4:	28800117 	ldw	r2,4(r5)
   158d8:	1906983a 	sll	r3,r3,r4
   158dc:	10c4b03a 	or	r2,r2,r3
   158e0:	28800115 	stw	r2,4(r5)
   158e4:	003fa306 	br	15774 <_malloc_r+0x500>
   158e8:	0027883a 	mov	r19,zero
   158ec:	00c00044 	movi	r3,1
   158f0:	003f8606 	br	1570c <_malloc_r+0x498>
   158f4:	d1200515 	stw	r4,-32748(gp)
   158f8:	003f7306 	br	156c8 <_malloc_r+0x454>
   158fc:	00801504 	movi	r2,84
   15900:	11001936 	bltu	r2,r4,15968 <_malloc_r+0x6f4>
   15904:	2804d33a 	srli	r2,r5,12
   15908:	11001b84 	addi	r4,r2,110
   1590c:	200690fa 	slli	r3,r4,3
   15910:	003f8e06 	br	1574c <_malloc_r+0x4d8>
   15914:	480b883a 	mov	r5,r9
   15918:	6807883a 	mov	r3,r13
   1591c:	288000cc 	andi	r2,r5,3
   15920:	18fffe04 	addi	r3,r3,-8
   15924:	297fffc4 	addi	r5,r5,-1
   15928:	10001526 	beq	r2,zero,15980 <_malloc_r+0x70c>
   1592c:	18800217 	ldw	r2,8(r3)
   15930:	10fffa26 	beq	r2,r3,1591c <_malloc_r+0x6a8>
   15934:	2109883a 	add	r4,r4,r4
   15938:	393f1e36 	bltu	r7,r4,155b4 <_malloc_r+0x340>
   1593c:	203f1d26 	beq	r4,zero,155b4 <_malloc_r+0x340>
   15940:	21c4703a 	and	r2,r4,r7
   15944:	10000226 	beq	r2,zero,15950 <_malloc_r+0x6dc>
   15948:	6013883a 	mov	r9,r12
   1594c:	003ee106 	br	154d4 <_malloc_r+0x260>
   15950:	2109883a 	add	r4,r4,r4
   15954:	3904703a 	and	r2,r7,r4
   15958:	63000104 	addi	r12,r12,4
   1595c:	103ffc26 	beq	r2,zero,15950 <_malloc_r+0x6dc>
   15960:	6013883a 	mov	r9,r12
   15964:	003edb06 	br	154d4 <_malloc_r+0x260>
   15968:	00805504 	movi	r2,340
   1596c:	11000836 	bltu	r2,r4,15990 <_malloc_r+0x71c>
   15970:	2804d3fa 	srli	r2,r5,15
   15974:	11001dc4 	addi	r4,r2,119
   15978:	200690fa 	slli	r3,r4,3
   1597c:	003f7306 	br	1574c <_malloc_r+0x4d8>
   15980:	0104303a 	nor	r2,zero,r4
   15984:	388e703a 	and	r7,r7,r2
   15988:	e1c00115 	stw	r7,4(fp)
   1598c:	003fe906 	br	15934 <_malloc_r+0x6c0>
   15990:	00815504 	movi	r2,1364
   15994:	1100032e 	bgeu	r2,r4,159a4 <_malloc_r+0x730>
   15998:	01001f84 	movi	r4,126
   1599c:	00c0fc04 	movi	r3,1008
   159a0:	003f6a06 	br	1574c <_malloc_r+0x4d8>
   159a4:	2804d4ba 	srli	r2,r5,18
   159a8:	11001f04 	addi	r4,r2,124
   159ac:	200690fa 	slli	r3,r4,3
   159b0:	003f6606 	br	1574c <_malloc_r+0x4d8>

000159b4 <memchr>:
   159b4:	008000c4 	movi	r2,3
   159b8:	29403fcc 	andi	r5,r5,255
   159bc:	2007883a 	mov	r3,r4
   159c0:	1180022e 	bgeu	r2,r6,159cc <memchr+0x18>
   159c4:	2084703a 	and	r2,r4,r2
   159c8:	10000b26 	beq	r2,zero,159f8 <memchr+0x44>
   159cc:	313fffc4 	addi	r4,r6,-1
   159d0:	3000051e 	bne	r6,zero,159e8 <memchr+0x34>
   159d4:	00002c06 	br	15a88 <memchr+0xd4>
   159d8:	213fffc4 	addi	r4,r4,-1
   159dc:	00bfffc4 	movi	r2,-1
   159e0:	18c00044 	addi	r3,r3,1
   159e4:	20802826 	beq	r4,r2,15a88 <memchr+0xd4>
   159e8:	18800003 	ldbu	r2,0(r3)
   159ec:	28bffa1e 	bne	r5,r2,159d8 <memchr+0x24>
   159f0:	1805883a 	mov	r2,r3
   159f4:	f800283a 	ret
   159f8:	0011883a 	mov	r8,zero
   159fc:	0007883a 	mov	r3,zero
   15a00:	01c00104 	movi	r7,4
   15a04:	4004923a 	slli	r2,r8,8
   15a08:	18c00044 	addi	r3,r3,1
   15a0c:	1151883a 	add	r8,r2,r5
   15a10:	19fffc1e 	bne	r3,r7,15a04 <memchr+0x50>
   15a14:	02bfbff4 	movhi	r10,65279
   15a18:	52bfbfc4 	addi	r10,r10,-257
   15a1c:	02602074 	movhi	r9,32897
   15a20:	4a602004 	addi	r9,r9,-32640
   15a24:	02c000c4 	movi	r11,3
   15a28:	20800017 	ldw	r2,0(r4)
   15a2c:	31bfff04 	addi	r6,r6,-4
   15a30:	200f883a 	mov	r7,r4
   15a34:	1204f03a 	xor	r2,r2,r8
   15a38:	1287883a 	add	r3,r2,r10
   15a3c:	1a46703a 	and	r3,r3,r9
   15a40:	0084303a 	nor	r2,zero,r2
   15a44:	10c4703a 	and	r2,r2,r3
   15a48:	10000b26 	beq	r2,zero,15a78 <memchr+0xc4>
   15a4c:	20800003 	ldbu	r2,0(r4)
   15a50:	28800f26 	beq	r5,r2,15a90 <memchr+0xdc>
   15a54:	20800043 	ldbu	r2,1(r4)
   15a58:	21c00044 	addi	r7,r4,1
   15a5c:	28800c26 	beq	r5,r2,15a90 <memchr+0xdc>
   15a60:	20800083 	ldbu	r2,2(r4)
   15a64:	21c00084 	addi	r7,r4,2
   15a68:	28800926 	beq	r5,r2,15a90 <memchr+0xdc>
   15a6c:	208000c3 	ldbu	r2,3(r4)
   15a70:	21c000c4 	addi	r7,r4,3
   15a74:	28800626 	beq	r5,r2,15a90 <memchr+0xdc>
   15a78:	21000104 	addi	r4,r4,4
   15a7c:	59bfea36 	bltu	r11,r6,15a28 <memchr+0x74>
   15a80:	2007883a 	mov	r3,r4
   15a84:	003fd106 	br	159cc <memchr+0x18>
   15a88:	0005883a 	mov	r2,zero
   15a8c:	f800283a 	ret
   15a90:	3805883a 	mov	r2,r7
   15a94:	f800283a 	ret

00015a98 <memcpy>:
   15a98:	01c003c4 	movi	r7,15
   15a9c:	2007883a 	mov	r3,r4
   15aa0:	3980032e 	bgeu	r7,r6,15ab0 <memcpy+0x18>
   15aa4:	2904b03a 	or	r2,r5,r4
   15aa8:	108000cc 	andi	r2,r2,3
   15aac:	10000926 	beq	r2,zero,15ad4 <memcpy+0x3c>
   15ab0:	30000626 	beq	r6,zero,15acc <memcpy+0x34>
   15ab4:	30cd883a 	add	r6,r6,r3
   15ab8:	28800003 	ldbu	r2,0(r5)
   15abc:	29400044 	addi	r5,r5,1
   15ac0:	18800005 	stb	r2,0(r3)
   15ac4:	18c00044 	addi	r3,r3,1
   15ac8:	30fffb1e 	bne	r6,r3,15ab8 <memcpy+0x20>
   15acc:	2005883a 	mov	r2,r4
   15ad0:	f800283a 	ret
   15ad4:	3811883a 	mov	r8,r7
   15ad8:	200f883a 	mov	r7,r4
   15adc:	28c00017 	ldw	r3,0(r5)
   15ae0:	31bffc04 	addi	r6,r6,-16
   15ae4:	38c00015 	stw	r3,0(r7)
   15ae8:	28800117 	ldw	r2,4(r5)
   15aec:	38800115 	stw	r2,4(r7)
   15af0:	28c00217 	ldw	r3,8(r5)
   15af4:	38c00215 	stw	r3,8(r7)
   15af8:	28800317 	ldw	r2,12(r5)
   15afc:	29400404 	addi	r5,r5,16
   15b00:	38800315 	stw	r2,12(r7)
   15b04:	39c00404 	addi	r7,r7,16
   15b08:	41bff436 	bltu	r8,r6,15adc <memcpy+0x44>
   15b0c:	008000c4 	movi	r2,3
   15b10:	1180072e 	bgeu	r2,r6,15b30 <memcpy+0x98>
   15b14:	1007883a 	mov	r3,r2
   15b18:	28800017 	ldw	r2,0(r5)
   15b1c:	31bfff04 	addi	r6,r6,-4
   15b20:	29400104 	addi	r5,r5,4
   15b24:	38800015 	stw	r2,0(r7)
   15b28:	39c00104 	addi	r7,r7,4
   15b2c:	19bffa36 	bltu	r3,r6,15b18 <memcpy+0x80>
   15b30:	3807883a 	mov	r3,r7
   15b34:	003fde06 	br	15ab0 <memcpy+0x18>

00015b38 <memmove>:
   15b38:	2807883a 	mov	r3,r5
   15b3c:	2011883a 	mov	r8,r4
   15b40:	29000c2e 	bgeu	r5,r4,15b74 <memmove+0x3c>
   15b44:	298f883a 	add	r7,r5,r6
   15b48:	21c00a2e 	bgeu	r4,r7,15b74 <memmove+0x3c>
   15b4c:	30000726 	beq	r6,zero,15b6c <memmove+0x34>
   15b50:	2187883a 	add	r3,r4,r6
   15b54:	198dc83a 	sub	r6,r3,r6
   15b58:	39ffffc4 	addi	r7,r7,-1
   15b5c:	38800003 	ldbu	r2,0(r7)
   15b60:	18ffffc4 	addi	r3,r3,-1
   15b64:	18800005 	stb	r2,0(r3)
   15b68:	19bffb1e 	bne	r3,r6,15b58 <memmove+0x20>
   15b6c:	2005883a 	mov	r2,r4
   15b70:	f800283a 	ret
   15b74:	01c003c4 	movi	r7,15
   15b78:	39800a36 	bltu	r7,r6,15ba4 <memmove+0x6c>
   15b7c:	303ffb26 	beq	r6,zero,15b6c <memmove+0x34>
   15b80:	400f883a 	mov	r7,r8
   15b84:	320d883a 	add	r6,r6,r8
   15b88:	28800003 	ldbu	r2,0(r5)
   15b8c:	29400044 	addi	r5,r5,1
   15b90:	38800005 	stb	r2,0(r7)
   15b94:	39c00044 	addi	r7,r7,1
   15b98:	39bffb1e 	bne	r7,r6,15b88 <memmove+0x50>
   15b9c:	2005883a 	mov	r2,r4
   15ba0:	f800283a 	ret
   15ba4:	1904b03a 	or	r2,r3,r4
   15ba8:	108000cc 	andi	r2,r2,3
   15bac:	103ff31e 	bne	r2,zero,15b7c <memmove+0x44>
   15bb0:	3811883a 	mov	r8,r7
   15bb4:	180b883a 	mov	r5,r3
   15bb8:	200f883a 	mov	r7,r4
   15bbc:	28c00017 	ldw	r3,0(r5)
   15bc0:	31bffc04 	addi	r6,r6,-16
   15bc4:	38c00015 	stw	r3,0(r7)
   15bc8:	28800117 	ldw	r2,4(r5)
   15bcc:	38800115 	stw	r2,4(r7)
   15bd0:	28c00217 	ldw	r3,8(r5)
   15bd4:	38c00215 	stw	r3,8(r7)
   15bd8:	28800317 	ldw	r2,12(r5)
   15bdc:	29400404 	addi	r5,r5,16
   15be0:	38800315 	stw	r2,12(r7)
   15be4:	39c00404 	addi	r7,r7,16
   15be8:	41bff436 	bltu	r8,r6,15bbc <memmove+0x84>
   15bec:	008000c4 	movi	r2,3
   15bf0:	1180072e 	bgeu	r2,r6,15c10 <memmove+0xd8>
   15bf4:	1007883a 	mov	r3,r2
   15bf8:	28800017 	ldw	r2,0(r5)
   15bfc:	31bfff04 	addi	r6,r6,-4
   15c00:	29400104 	addi	r5,r5,4
   15c04:	38800015 	stw	r2,0(r7)
   15c08:	39c00104 	addi	r7,r7,4
   15c0c:	19bffa36 	bltu	r3,r6,15bf8 <memmove+0xc0>
   15c10:	3811883a 	mov	r8,r7
   15c14:	003fd906 	br	15b7c <memmove+0x44>

00015c18 <memset>:
   15c18:	008000c4 	movi	r2,3
   15c1c:	29403fcc 	andi	r5,r5,255
   15c20:	2007883a 	mov	r3,r4
   15c24:	1180022e 	bgeu	r2,r6,15c30 <memset+0x18>
   15c28:	2084703a 	and	r2,r4,r2
   15c2c:	10000826 	beq	r2,zero,15c50 <memset+0x38>
   15c30:	30000526 	beq	r6,zero,15c48 <memset+0x30>
   15c34:	2805883a 	mov	r2,r5
   15c38:	30cd883a 	add	r6,r6,r3
   15c3c:	18800005 	stb	r2,0(r3)
   15c40:	18c00044 	addi	r3,r3,1
   15c44:	19bffd1e 	bne	r3,r6,15c3c <memset+0x24>
   15c48:	2005883a 	mov	r2,r4
   15c4c:	f800283a 	ret
   15c50:	2804923a 	slli	r2,r5,8
   15c54:	020003c4 	movi	r8,15
   15c58:	200f883a 	mov	r7,r4
   15c5c:	2884b03a 	or	r2,r5,r2
   15c60:	1006943a 	slli	r3,r2,16
   15c64:	10c6b03a 	or	r3,r2,r3
   15c68:	41800a2e 	bgeu	r8,r6,15c94 <memset+0x7c>
   15c6c:	4005883a 	mov	r2,r8
   15c70:	31bffc04 	addi	r6,r6,-16
   15c74:	38c00015 	stw	r3,0(r7)
   15c78:	38c00115 	stw	r3,4(r7)
   15c7c:	38c00215 	stw	r3,8(r7)
   15c80:	38c00315 	stw	r3,12(r7)
   15c84:	39c00404 	addi	r7,r7,16
   15c88:	11bff936 	bltu	r2,r6,15c70 <memset+0x58>
   15c8c:	008000c4 	movi	r2,3
   15c90:	1180052e 	bgeu	r2,r6,15ca8 <memset+0x90>
   15c94:	31bfff04 	addi	r6,r6,-4
   15c98:	008000c4 	movi	r2,3
   15c9c:	38c00015 	stw	r3,0(r7)
   15ca0:	39c00104 	addi	r7,r7,4
   15ca4:	11bffb36 	bltu	r2,r6,15c94 <memset+0x7c>
   15ca8:	3807883a 	mov	r3,r7
   15cac:	003fe006 	br	15c30 <memset+0x18>

00015cb0 <_Bfree>:
   15cb0:	28000826 	beq	r5,zero,15cd4 <_Bfree+0x24>
   15cb4:	28800117 	ldw	r2,4(r5)
   15cb8:	21001317 	ldw	r4,76(r4)
   15cbc:	1085883a 	add	r2,r2,r2
   15cc0:	1085883a 	add	r2,r2,r2
   15cc4:	1105883a 	add	r2,r2,r4
   15cc8:	10c00017 	ldw	r3,0(r2)
   15ccc:	28c00015 	stw	r3,0(r5)
   15cd0:	11400015 	stw	r5,0(r2)
   15cd4:	f800283a 	ret

00015cd8 <__hi0bits>:
   15cd8:	20bfffec 	andhi	r2,r4,65535
   15cdc:	10001426 	beq	r2,zero,15d30 <__hi0bits+0x58>
   15ce0:	0007883a 	mov	r3,zero
   15ce4:	20bfc02c 	andhi	r2,r4,65280
   15ce8:	1000021e 	bne	r2,zero,15cf4 <__hi0bits+0x1c>
   15cec:	2008923a 	slli	r4,r4,8
   15cf0:	18c00204 	addi	r3,r3,8
   15cf4:	20bc002c 	andhi	r2,r4,61440
   15cf8:	1000021e 	bne	r2,zero,15d04 <__hi0bits+0x2c>
   15cfc:	2008913a 	slli	r4,r4,4
   15d00:	18c00104 	addi	r3,r3,4
   15d04:	20b0002c 	andhi	r2,r4,49152
   15d08:	1000031e 	bne	r2,zero,15d18 <__hi0bits+0x40>
   15d0c:	2105883a 	add	r2,r4,r4
   15d10:	18c00084 	addi	r3,r3,2
   15d14:	1089883a 	add	r4,r2,r2
   15d18:	20000316 	blt	r4,zero,15d28 <__hi0bits+0x50>
   15d1c:	2090002c 	andhi	r2,r4,16384
   15d20:	10000626 	beq	r2,zero,15d3c <__hi0bits+0x64>
   15d24:	18c00044 	addi	r3,r3,1
   15d28:	1805883a 	mov	r2,r3
   15d2c:	f800283a 	ret
   15d30:	2008943a 	slli	r4,r4,16
   15d34:	00c00404 	movi	r3,16
   15d38:	003fea06 	br	15ce4 <__hi0bits+0xc>
   15d3c:	00c00804 	movi	r3,32
   15d40:	1805883a 	mov	r2,r3
   15d44:	f800283a 	ret

00015d48 <__lo0bits>:
   15d48:	20c00017 	ldw	r3,0(r4)
   15d4c:	188001cc 	andi	r2,r3,7
   15d50:	10000a26 	beq	r2,zero,15d7c <__lo0bits+0x34>
   15d54:	1880004c 	andi	r2,r3,1
   15d58:	1005003a 	cmpeq	r2,r2,zero
   15d5c:	10002126 	beq	r2,zero,15de4 <__lo0bits+0x9c>
   15d60:	1880008c 	andi	r2,r3,2
   15d64:	1000251e 	bne	r2,zero,15dfc <__lo0bits+0xb4>
   15d68:	1804d0ba 	srli	r2,r3,2
   15d6c:	01400084 	movi	r5,2
   15d70:	20800015 	stw	r2,0(r4)
   15d74:	2805883a 	mov	r2,r5
   15d78:	f800283a 	ret
   15d7c:	18bfffcc 	andi	r2,r3,65535
   15d80:	10001526 	beq	r2,zero,15dd8 <__lo0bits+0x90>
   15d84:	000b883a 	mov	r5,zero
   15d88:	18803fcc 	andi	r2,r3,255
   15d8c:	1000021e 	bne	r2,zero,15d98 <__lo0bits+0x50>
   15d90:	1806d23a 	srli	r3,r3,8
   15d94:	29400204 	addi	r5,r5,8
   15d98:	188003cc 	andi	r2,r3,15
   15d9c:	1000021e 	bne	r2,zero,15da8 <__lo0bits+0x60>
   15da0:	1806d13a 	srli	r3,r3,4
   15da4:	29400104 	addi	r5,r5,4
   15da8:	188000cc 	andi	r2,r3,3
   15dac:	1000021e 	bne	r2,zero,15db8 <__lo0bits+0x70>
   15db0:	1806d0ba 	srli	r3,r3,2
   15db4:	29400084 	addi	r5,r5,2
   15db8:	1880004c 	andi	r2,r3,1
   15dbc:	1000031e 	bne	r2,zero,15dcc <__lo0bits+0x84>
   15dc0:	1806d07a 	srli	r3,r3,1
   15dc4:	18000a26 	beq	r3,zero,15df0 <__lo0bits+0xa8>
   15dc8:	29400044 	addi	r5,r5,1
   15dcc:	2805883a 	mov	r2,r5
   15dd0:	20c00015 	stw	r3,0(r4)
   15dd4:	f800283a 	ret
   15dd8:	1806d43a 	srli	r3,r3,16
   15ddc:	01400404 	movi	r5,16
   15de0:	003fe906 	br	15d88 <__lo0bits+0x40>
   15de4:	000b883a 	mov	r5,zero
   15de8:	2805883a 	mov	r2,r5
   15dec:	f800283a 	ret
   15df0:	01400804 	movi	r5,32
   15df4:	2805883a 	mov	r2,r5
   15df8:	f800283a 	ret
   15dfc:	1804d07a 	srli	r2,r3,1
   15e00:	01400044 	movi	r5,1
   15e04:	20800015 	stw	r2,0(r4)
   15e08:	003fda06 	br	15d74 <__lo0bits+0x2c>

00015e0c <__mcmp>:
   15e0c:	20800417 	ldw	r2,16(r4)
   15e10:	28c00417 	ldw	r3,16(r5)
   15e14:	10cfc83a 	sub	r7,r2,r3
   15e18:	38000c1e 	bne	r7,zero,15e4c <__mcmp+0x40>
   15e1c:	18c5883a 	add	r2,r3,r3
   15e20:	1085883a 	add	r2,r2,r2
   15e24:	10c00504 	addi	r3,r2,20
   15e28:	21000504 	addi	r4,r4,20
   15e2c:	28cb883a 	add	r5,r5,r3
   15e30:	2085883a 	add	r2,r4,r2
   15e34:	10bfff04 	addi	r2,r2,-4
   15e38:	297fff04 	addi	r5,r5,-4
   15e3c:	11800017 	ldw	r6,0(r2)
   15e40:	28c00017 	ldw	r3,0(r5)
   15e44:	30c0031e 	bne	r6,r3,15e54 <__mcmp+0x48>
   15e48:	20bffa36 	bltu	r4,r2,15e34 <__mcmp+0x28>
   15e4c:	3805883a 	mov	r2,r7
   15e50:	f800283a 	ret
   15e54:	30c00336 	bltu	r6,r3,15e64 <__mcmp+0x58>
   15e58:	01c00044 	movi	r7,1
   15e5c:	3805883a 	mov	r2,r7
   15e60:	f800283a 	ret
   15e64:	01ffffc4 	movi	r7,-1
   15e68:	003ff806 	br	15e4c <__mcmp+0x40>

00015e6c <__ulp>:
   15e6c:	295ffc2c 	andhi	r5,r5,32752
   15e70:	013f3034 	movhi	r4,64704
   15e74:	290b883a 	add	r5,r5,r4
   15e78:	0145c83a 	sub	r2,zero,r5
   15e7c:	1007d53a 	srai	r3,r2,20
   15e80:	000d883a 	mov	r6,zero
   15e84:	0140040e 	bge	zero,r5,15e98 <__ulp+0x2c>
   15e88:	280f883a 	mov	r7,r5
   15e8c:	3807883a 	mov	r3,r7
   15e90:	3005883a 	mov	r2,r6
   15e94:	f800283a 	ret
   15e98:	008004c4 	movi	r2,19
   15e9c:	193ffb04 	addi	r4,r3,-20
   15ea0:	10c00c0e 	bge	r2,r3,15ed4 <__ulp+0x68>
   15ea4:	008007c4 	movi	r2,31
   15ea8:	1107c83a 	sub	r3,r2,r4
   15eac:	00800784 	movi	r2,30
   15eb0:	01400044 	movi	r5,1
   15eb4:	11000216 	blt	r2,r4,15ec0 <__ulp+0x54>
   15eb8:	00800044 	movi	r2,1
   15ebc:	10ca983a 	sll	r5,r2,r3
   15ec0:	000f883a 	mov	r7,zero
   15ec4:	280d883a 	mov	r6,r5
   15ec8:	3807883a 	mov	r3,r7
   15ecc:	3005883a 	mov	r2,r6
   15ed0:	f800283a 	ret
   15ed4:	00800234 	movhi	r2,8
   15ed8:	10cfd83a 	sra	r7,r2,r3
   15edc:	000d883a 	mov	r6,zero
   15ee0:	3005883a 	mov	r2,r6
   15ee4:	3807883a 	mov	r3,r7
   15ee8:	f800283a 	ret

00015eec <__b2d>:
   15eec:	20800417 	ldw	r2,16(r4)
   15ef0:	defff904 	addi	sp,sp,-28
   15ef4:	dd000415 	stw	r20,16(sp)
   15ef8:	1085883a 	add	r2,r2,r2
   15efc:	25000504 	addi	r20,r4,20
   15f00:	1085883a 	add	r2,r2,r2
   15f04:	dc000015 	stw	r16,0(sp)
   15f08:	a0a1883a 	add	r16,r20,r2
   15f0c:	dd400515 	stw	r21,20(sp)
   15f10:	857fff17 	ldw	r21,-4(r16)
   15f14:	dc400115 	stw	r17,4(sp)
   15f18:	dfc00615 	stw	ra,24(sp)
   15f1c:	a809883a 	mov	r4,r21
   15f20:	2823883a 	mov	r17,r5
   15f24:	dcc00315 	stw	r19,12(sp)
   15f28:	dc800215 	stw	r18,8(sp)
   15f2c:	0015cd80 	call	15cd8 <__hi0bits>
   15f30:	100b883a 	mov	r5,r2
   15f34:	00800804 	movi	r2,32
   15f38:	1145c83a 	sub	r2,r2,r5
   15f3c:	88800015 	stw	r2,0(r17)
   15f40:	00800284 	movi	r2,10
   15f44:	80ffff04 	addi	r3,r16,-4
   15f48:	11401416 	blt	r2,r5,15f9c <__b2d+0xb0>
   15f4c:	008002c4 	movi	r2,11
   15f50:	1149c83a 	sub	r4,r2,r5
   15f54:	a0c02736 	bltu	r20,r3,15ff4 <__b2d+0x108>
   15f58:	000d883a 	mov	r6,zero
   15f5c:	28800544 	addi	r2,r5,21
   15f60:	a906d83a 	srl	r3,r21,r4
   15f64:	a884983a 	sll	r2,r21,r2
   15f68:	1ccffc34 	orhi	r19,r3,16368
   15f6c:	11a4b03a 	or	r18,r2,r6
   15f70:	9005883a 	mov	r2,r18
   15f74:	9807883a 	mov	r3,r19
   15f78:	dfc00617 	ldw	ra,24(sp)
   15f7c:	dd400517 	ldw	r21,20(sp)
   15f80:	dd000417 	ldw	r20,16(sp)
   15f84:	dcc00317 	ldw	r19,12(sp)
   15f88:	dc800217 	ldw	r18,8(sp)
   15f8c:	dc400117 	ldw	r17,4(sp)
   15f90:	dc000017 	ldw	r16,0(sp)
   15f94:	dec00704 	addi	sp,sp,28
   15f98:	f800283a 	ret
   15f9c:	a0c00e36 	bltu	r20,r3,15fd8 <__b2d+0xec>
   15fa0:	293ffd44 	addi	r4,r5,-11
   15fa4:	000d883a 	mov	r6,zero
   15fa8:	20000f26 	beq	r4,zero,15fe8 <__b2d+0xfc>
   15fac:	00800804 	movi	r2,32
   15fb0:	110bc83a 	sub	r5,r2,r4
   15fb4:	a0c01236 	bltu	r20,r3,16000 <__b2d+0x114>
   15fb8:	000f883a 	mov	r7,zero
   15fbc:	a904983a 	sll	r2,r21,r4
   15fc0:	3146d83a 	srl	r3,r6,r5
   15fc4:	3108983a 	sll	r4,r6,r4
   15fc8:	108ffc34 	orhi	r2,r2,16368
   15fcc:	18a6b03a 	or	r19,r3,r2
   15fd0:	3924b03a 	or	r18,r7,r4
   15fd4:	003fe606 	br	15f70 <__b2d+0x84>
   15fd8:	293ffd44 	addi	r4,r5,-11
   15fdc:	81bffe17 	ldw	r6,-8(r16)
   15fe0:	80fffe04 	addi	r3,r16,-8
   15fe4:	203ff11e 	bne	r4,zero,15fac <__b2d+0xc0>
   15fe8:	accffc34 	orhi	r19,r21,16368
   15fec:	3025883a 	mov	r18,r6
   15ff0:	003fdf06 	br	15f70 <__b2d+0x84>
   15ff4:	18bfff17 	ldw	r2,-4(r3)
   15ff8:	110cd83a 	srl	r6,r2,r4
   15ffc:	003fd706 	br	15f5c <__b2d+0x70>
   16000:	18bfff17 	ldw	r2,-4(r3)
   16004:	114ed83a 	srl	r7,r2,r5
   16008:	003fec06 	br	15fbc <__b2d+0xd0>

0001600c <__ratio>:
   1600c:	defff904 	addi	sp,sp,-28
   16010:	dc400215 	stw	r17,8(sp)
   16014:	2823883a 	mov	r17,r5
   16018:	d80b883a 	mov	r5,sp
   1601c:	dfc00615 	stw	ra,24(sp)
   16020:	dd000515 	stw	r20,20(sp)
   16024:	dcc00415 	stw	r19,16(sp)
   16028:	dc800315 	stw	r18,12(sp)
   1602c:	2025883a 	mov	r18,r4
   16030:	0015eec0 	call	15eec <__b2d>
   16034:	8809883a 	mov	r4,r17
   16038:	d9400104 	addi	r5,sp,4
   1603c:	1027883a 	mov	r19,r2
   16040:	1829883a 	mov	r20,r3
   16044:	0015eec0 	call	15eec <__b2d>
   16048:	89000417 	ldw	r4,16(r17)
   1604c:	91c00417 	ldw	r7,16(r18)
   16050:	d9800117 	ldw	r6,4(sp)
   16054:	180b883a 	mov	r5,r3
   16058:	390fc83a 	sub	r7,r7,r4
   1605c:	1009883a 	mov	r4,r2
   16060:	d8800017 	ldw	r2,0(sp)
   16064:	380e917a 	slli	r7,r7,5
   16068:	2011883a 	mov	r8,r4
   1606c:	1185c83a 	sub	r2,r2,r6
   16070:	11c5883a 	add	r2,r2,r7
   16074:	1006953a 	slli	r3,r2,20
   16078:	2813883a 	mov	r9,r5
   1607c:	00800d0e 	bge	zero,r2,160b4 <__ratio+0xa8>
   16080:	1d29883a 	add	r20,r3,r20
   16084:	a00b883a 	mov	r5,r20
   16088:	480f883a 	mov	r7,r9
   1608c:	9809883a 	mov	r4,r19
   16090:	400d883a 	mov	r6,r8
   16094:	0018e680 	call	18e68 <__divdf3>
   16098:	dfc00617 	ldw	ra,24(sp)
   1609c:	dd000517 	ldw	r20,20(sp)
   160a0:	dcc00417 	ldw	r19,16(sp)
   160a4:	dc800317 	ldw	r18,12(sp)
   160a8:	dc400217 	ldw	r17,8(sp)
   160ac:	dec00704 	addi	sp,sp,28
   160b0:	f800283a 	ret
   160b4:	28d3c83a 	sub	r9,r5,r3
   160b8:	003ff206 	br	16084 <__ratio+0x78>

000160bc <_mprec_log10>:
   160bc:	defffe04 	addi	sp,sp,-8
   160c0:	008005c4 	movi	r2,23
   160c4:	dc000015 	stw	r16,0(sp)
   160c8:	dfc00115 	stw	ra,4(sp)
   160cc:	2021883a 	mov	r16,r4
   160d0:	11000c16 	blt	r2,r4,16104 <_mprec_log10+0x48>
   160d4:	200490fa 	slli	r2,r4,3
   160d8:	00c00174 	movhi	r3,5
   160dc:	18e04e04 	addi	r3,r3,-32456
   160e0:	10c5883a 	add	r2,r2,r3
   160e4:	12400117 	ldw	r9,4(r2)
   160e8:	12000017 	ldw	r8,0(r2)
   160ec:	4807883a 	mov	r3,r9
   160f0:	4005883a 	mov	r2,r8
   160f4:	dfc00117 	ldw	ra,4(sp)
   160f8:	dc000017 	ldw	r16,0(sp)
   160fc:	dec00204 	addi	sp,sp,8
   16100:	f800283a 	ret
   16104:	0011883a 	mov	r8,zero
   16108:	024ffc34 	movhi	r9,16368
   1610c:	0005883a 	mov	r2,zero
   16110:	00d00934 	movhi	r3,16420
   16114:	480b883a 	mov	r5,r9
   16118:	4009883a 	mov	r4,r8
   1611c:	180f883a 	mov	r7,r3
   16120:	100d883a 	mov	r6,r2
   16124:	0018aa40 	call	18aa4 <__muldf3>
   16128:	843fffc4 	addi	r16,r16,-1
   1612c:	1011883a 	mov	r8,r2
   16130:	1813883a 	mov	r9,r3
   16134:	803ff51e 	bne	r16,zero,1610c <_mprec_log10+0x50>
   16138:	4005883a 	mov	r2,r8
   1613c:	4807883a 	mov	r3,r9
   16140:	dfc00117 	ldw	ra,4(sp)
   16144:	dc000017 	ldw	r16,0(sp)
   16148:	dec00204 	addi	sp,sp,8
   1614c:	f800283a 	ret

00016150 <__copybits>:
   16150:	297fffc4 	addi	r5,r5,-1
   16154:	30800417 	ldw	r2,16(r6)
   16158:	280bd17a 	srai	r5,r5,5
   1615c:	31800504 	addi	r6,r6,20
   16160:	1085883a 	add	r2,r2,r2
   16164:	294b883a 	add	r5,r5,r5
   16168:	294b883a 	add	r5,r5,r5
   1616c:	1085883a 	add	r2,r2,r2
   16170:	290b883a 	add	r5,r5,r4
   16174:	3087883a 	add	r3,r6,r2
   16178:	29400104 	addi	r5,r5,4
   1617c:	30c0052e 	bgeu	r6,r3,16194 <__copybits+0x44>
   16180:	30800017 	ldw	r2,0(r6)
   16184:	31800104 	addi	r6,r6,4
   16188:	20800015 	stw	r2,0(r4)
   1618c:	21000104 	addi	r4,r4,4
   16190:	30fffb36 	bltu	r6,r3,16180 <__copybits+0x30>
   16194:	2140032e 	bgeu	r4,r5,161a4 <__copybits+0x54>
   16198:	20000015 	stw	zero,0(r4)
   1619c:	21000104 	addi	r4,r4,4
   161a0:	217ffd36 	bltu	r4,r5,16198 <__copybits+0x48>
   161a4:	f800283a 	ret

000161a8 <__any_on>:
   161a8:	20800417 	ldw	r2,16(r4)
   161ac:	2807d17a 	srai	r3,r5,5
   161b0:	21000504 	addi	r4,r4,20
   161b4:	10c00d0e 	bge	r2,r3,161ec <__any_on+0x44>
   161b8:	1085883a 	add	r2,r2,r2
   161bc:	1085883a 	add	r2,r2,r2
   161c0:	208d883a 	add	r6,r4,r2
   161c4:	2180182e 	bgeu	r4,r6,16228 <__any_on+0x80>
   161c8:	30bfff17 	ldw	r2,-4(r6)
   161cc:	30ffff04 	addi	r3,r6,-4
   161d0:	1000041e 	bne	r2,zero,161e4 <__any_on+0x3c>
   161d4:	20c0142e 	bgeu	r4,r3,16228 <__any_on+0x80>
   161d8:	18ffff04 	addi	r3,r3,-4
   161dc:	18800017 	ldw	r2,0(r3)
   161e0:	103ffc26 	beq	r2,zero,161d4 <__any_on+0x2c>
   161e4:	00800044 	movi	r2,1
   161e8:	f800283a 	ret
   161ec:	18800a0e 	bge	r3,r2,16218 <__any_on+0x70>
   161f0:	294007cc 	andi	r5,r5,31
   161f4:	28000826 	beq	r5,zero,16218 <__any_on+0x70>
   161f8:	18c5883a 	add	r2,r3,r3
   161fc:	1085883a 	add	r2,r2,r2
   16200:	208d883a 	add	r6,r4,r2
   16204:	30c00017 	ldw	r3,0(r6)
   16208:	1944d83a 	srl	r2,r3,r5
   1620c:	1144983a 	sll	r2,r2,r5
   16210:	18bff41e 	bne	r3,r2,161e4 <__any_on+0x3c>
   16214:	003feb06 	br	161c4 <__any_on+0x1c>
   16218:	18c5883a 	add	r2,r3,r3
   1621c:	1085883a 	add	r2,r2,r2
   16220:	208d883a 	add	r6,r4,r2
   16224:	003fe706 	br	161c4 <__any_on+0x1c>
   16228:	0005883a 	mov	r2,zero
   1622c:	f800283a 	ret

00016230 <_Balloc>:
   16230:	20c01317 	ldw	r3,76(r4)
   16234:	defffb04 	addi	sp,sp,-20
   16238:	dcc00315 	stw	r19,12(sp)
   1623c:	dc800215 	stw	r18,8(sp)
   16240:	dfc00415 	stw	ra,16(sp)
   16244:	2825883a 	mov	r18,r5
   16248:	dc400115 	stw	r17,4(sp)
   1624c:	dc000015 	stw	r16,0(sp)
   16250:	2027883a 	mov	r19,r4
   16254:	01800404 	movi	r6,16
   16258:	01400104 	movi	r5,4
   1625c:	18001726 	beq	r3,zero,162bc <_Balloc+0x8c>
   16260:	01400044 	movi	r5,1
   16264:	9485883a 	add	r2,r18,r18
   16268:	2ca2983a 	sll	r17,r5,r18
   1626c:	1085883a 	add	r2,r2,r2
   16270:	10c7883a 	add	r3,r2,r3
   16274:	1c000017 	ldw	r16,0(r3)
   16278:	8c4d883a 	add	r6,r17,r17
   1627c:	318d883a 	add	r6,r6,r6
   16280:	9809883a 	mov	r4,r19
   16284:	31800504 	addi	r6,r6,20
   16288:	80001226 	beq	r16,zero,162d4 <_Balloc+0xa4>
   1628c:	80800017 	ldw	r2,0(r16)
   16290:	18800015 	stw	r2,0(r3)
   16294:	80000415 	stw	zero,16(r16)
   16298:	80000315 	stw	zero,12(r16)
   1629c:	8005883a 	mov	r2,r16
   162a0:	dfc00417 	ldw	ra,16(sp)
   162a4:	dcc00317 	ldw	r19,12(sp)
   162a8:	dc800217 	ldw	r18,8(sp)
   162ac:	dc400117 	ldw	r17,4(sp)
   162b0:	dc000017 	ldw	r16,0(sp)
   162b4:	dec00504 	addi	sp,sp,20
   162b8:	f800283a 	ret
   162bc:	00175f80 	call	175f8 <_calloc_r>
   162c0:	1007883a 	mov	r3,r2
   162c4:	0021883a 	mov	r16,zero
   162c8:	98801315 	stw	r2,76(r19)
   162cc:	103fe41e 	bne	r2,zero,16260 <_Balloc+0x30>
   162d0:	003ff206 	br	1629c <_Balloc+0x6c>
   162d4:	00175f80 	call	175f8 <_calloc_r>
   162d8:	103ff026 	beq	r2,zero,1629c <_Balloc+0x6c>
   162dc:	1021883a 	mov	r16,r2
   162e0:	14800115 	stw	r18,4(r2)
   162e4:	14400215 	stw	r17,8(r2)
   162e8:	003fea06 	br	16294 <_Balloc+0x64>

000162ec <__d2b>:
   162ec:	defff504 	addi	sp,sp,-44
   162f0:	dcc00515 	stw	r19,20(sp)
   162f4:	04c00044 	movi	r19,1
   162f8:	dc000215 	stw	r16,8(sp)
   162fc:	2821883a 	mov	r16,r5
   16300:	980b883a 	mov	r5,r19
   16304:	ddc00915 	stw	r23,36(sp)
   16308:	dd800815 	stw	r22,32(sp)
   1630c:	dd400715 	stw	r21,28(sp)
   16310:	dd000615 	stw	r20,24(sp)
   16314:	dc800415 	stw	r18,16(sp)
   16318:	dc400315 	stw	r17,12(sp)
   1631c:	dfc00a15 	stw	ra,40(sp)
   16320:	3023883a 	mov	r17,r6
   16324:	382d883a 	mov	r22,r7
   16328:	ddc00b17 	ldw	r23,44(sp)
   1632c:	00162300 	call	16230 <_Balloc>
   16330:	1025883a 	mov	r18,r2
   16334:	00a00034 	movhi	r2,32768
   16338:	10bfffc4 	addi	r2,r2,-1
   1633c:	8888703a 	and	r4,r17,r2
   16340:	202ad53a 	srli	r21,r4,20
   16344:	00800434 	movhi	r2,16
   16348:	10bfffc4 	addi	r2,r2,-1
   1634c:	8886703a 	and	r3,r17,r2
   16350:	a829003a 	cmpeq	r20,r21,zero
   16354:	800b883a 	mov	r5,r16
   16358:	d8c00115 	stw	r3,4(sp)
   1635c:	94000504 	addi	r16,r18,20
   16360:	a000021e 	bne	r20,zero,1636c <__d2b+0x80>
   16364:	18c00434 	orhi	r3,r3,16
   16368:	d8c00115 	stw	r3,4(sp)
   1636c:	28002726 	beq	r5,zero,1640c <__d2b+0x120>
   16370:	d809883a 	mov	r4,sp
   16374:	d9400015 	stw	r5,0(sp)
   16378:	0015d480 	call	15d48 <__lo0bits>
   1637c:	100d883a 	mov	r6,r2
   16380:	10003526 	beq	r2,zero,16458 <__d2b+0x16c>
   16384:	d8c00117 	ldw	r3,4(sp)
   16388:	00800804 	movi	r2,32
   1638c:	1185c83a 	sub	r2,r2,r6
   16390:	d9000017 	ldw	r4,0(sp)
   16394:	1886983a 	sll	r3,r3,r2
   16398:	1906b03a 	or	r3,r3,r4
   1639c:	90c00515 	stw	r3,20(r18)
   163a0:	d8c00117 	ldw	r3,4(sp)
   163a4:	1986d83a 	srl	r3,r3,r6
   163a8:	d8c00115 	stw	r3,4(sp)
   163ac:	180b003a 	cmpeq	r5,r3,zero
   163b0:	00800084 	movi	r2,2
   163b4:	114bc83a 	sub	r5,r2,r5
   163b8:	80c00115 	stw	r3,4(r16)
   163bc:	91400415 	stw	r5,16(r18)
   163c0:	a0001a1e 	bne	r20,zero,1642c <__d2b+0x140>
   163c4:	3545883a 	add	r2,r6,r21
   163c8:	10bef344 	addi	r2,r2,-1075
   163cc:	00c00d44 	movi	r3,53
   163d0:	b0800015 	stw	r2,0(r22)
   163d4:	1987c83a 	sub	r3,r3,r6
   163d8:	b8c00015 	stw	r3,0(r23)
   163dc:	9005883a 	mov	r2,r18
   163e0:	dfc00a17 	ldw	ra,40(sp)
   163e4:	ddc00917 	ldw	r23,36(sp)
   163e8:	dd800817 	ldw	r22,32(sp)
   163ec:	dd400717 	ldw	r21,28(sp)
   163f0:	dd000617 	ldw	r20,24(sp)
   163f4:	dcc00517 	ldw	r19,20(sp)
   163f8:	dc800417 	ldw	r18,16(sp)
   163fc:	dc400317 	ldw	r17,12(sp)
   16400:	dc000217 	ldw	r16,8(sp)
   16404:	dec00b04 	addi	sp,sp,44
   16408:	f800283a 	ret
   1640c:	d9000104 	addi	r4,sp,4
   16410:	0015d480 	call	15d48 <__lo0bits>
   16414:	11800804 	addi	r6,r2,32
   16418:	d8800117 	ldw	r2,4(sp)
   1641c:	94c00415 	stw	r19,16(r18)
   16420:	980b883a 	mov	r5,r19
   16424:	90800515 	stw	r2,20(r18)
   16428:	a03fe626 	beq	r20,zero,163c4 <__d2b+0xd8>
   1642c:	2945883a 	add	r2,r5,r5
   16430:	1085883a 	add	r2,r2,r2
   16434:	1405883a 	add	r2,r2,r16
   16438:	113fff17 	ldw	r4,-4(r2)
   1643c:	30fef384 	addi	r3,r6,-1074
   16440:	2820917a 	slli	r16,r5,5
   16444:	b0c00015 	stw	r3,0(r22)
   16448:	0015cd80 	call	15cd8 <__hi0bits>
   1644c:	80a1c83a 	sub	r16,r16,r2
   16450:	bc000015 	stw	r16,0(r23)
   16454:	003fe106 	br	163dc <__d2b+0xf0>
   16458:	d8800017 	ldw	r2,0(sp)
   1645c:	90800515 	stw	r2,20(r18)
   16460:	d8c00117 	ldw	r3,4(sp)
   16464:	003fd106 	br	163ac <__d2b+0xc0>

00016468 <__mdiff>:
   16468:	defffb04 	addi	sp,sp,-20
   1646c:	dc000015 	stw	r16,0(sp)
   16470:	2821883a 	mov	r16,r5
   16474:	dc800215 	stw	r18,8(sp)
   16478:	300b883a 	mov	r5,r6
   1647c:	2025883a 	mov	r18,r4
   16480:	8009883a 	mov	r4,r16
   16484:	dc400115 	stw	r17,4(sp)
   16488:	dfc00415 	stw	ra,16(sp)
   1648c:	dcc00315 	stw	r19,12(sp)
   16490:	3023883a 	mov	r17,r6
   16494:	0015e0c0 	call	15e0c <__mcmp>
   16498:	10004226 	beq	r2,zero,165a4 <__mdiff+0x13c>
   1649c:	10005016 	blt	r2,zero,165e0 <__mdiff+0x178>
   164a0:	0027883a 	mov	r19,zero
   164a4:	81400117 	ldw	r5,4(r16)
   164a8:	9009883a 	mov	r4,r18
   164ac:	00162300 	call	16230 <_Balloc>
   164b0:	1019883a 	mov	r12,r2
   164b4:	82800417 	ldw	r10,16(r16)
   164b8:	88800417 	ldw	r2,16(r17)
   164bc:	81800504 	addi	r6,r16,20
   164c0:	5287883a 	add	r3,r10,r10
   164c4:	1085883a 	add	r2,r2,r2
   164c8:	18c7883a 	add	r3,r3,r3
   164cc:	1085883a 	add	r2,r2,r2
   164d0:	8a000504 	addi	r8,r17,20
   164d4:	64c00315 	stw	r19,12(r12)
   164d8:	30db883a 	add	r13,r6,r3
   164dc:	4097883a 	add	r11,r8,r2
   164e0:	61c00504 	addi	r7,r12,20
   164e4:	0013883a 	mov	r9,zero
   164e8:	31000017 	ldw	r4,0(r6)
   164ec:	41400017 	ldw	r5,0(r8)
   164f0:	42000104 	addi	r8,r8,4
   164f4:	20bfffcc 	andi	r2,r4,65535
   164f8:	28ffffcc 	andi	r3,r5,65535
   164fc:	10c5c83a 	sub	r2,r2,r3
   16500:	1245883a 	add	r2,r2,r9
   16504:	2008d43a 	srli	r4,r4,16
   16508:	280ad43a 	srli	r5,r5,16
   1650c:	1007d43a 	srai	r3,r2,16
   16510:	3880000d 	sth	r2,0(r7)
   16514:	2149c83a 	sub	r4,r4,r5
   16518:	20c9883a 	add	r4,r4,r3
   1651c:	3900008d 	sth	r4,2(r7)
   16520:	31800104 	addi	r6,r6,4
   16524:	39c00104 	addi	r7,r7,4
   16528:	2013d43a 	srai	r9,r4,16
   1652c:	42ffee36 	bltu	r8,r11,164e8 <__mdiff+0x80>
   16530:	33400c2e 	bgeu	r6,r13,16564 <__mdiff+0xfc>
   16534:	30800017 	ldw	r2,0(r6)
   16538:	31800104 	addi	r6,r6,4
   1653c:	10ffffcc 	andi	r3,r2,65535
   16540:	1a47883a 	add	r3,r3,r9
   16544:	1004d43a 	srli	r2,r2,16
   16548:	1809d43a 	srai	r4,r3,16
   1654c:	38c0000d 	sth	r3,0(r7)
   16550:	1105883a 	add	r2,r2,r4
   16554:	3880008d 	sth	r2,2(r7)
   16558:	1013d43a 	srai	r9,r2,16
   1655c:	39c00104 	addi	r7,r7,4
   16560:	337ff436 	bltu	r6,r13,16534 <__mdiff+0xcc>
   16564:	38bfff17 	ldw	r2,-4(r7)
   16568:	38ffff04 	addi	r3,r7,-4
   1656c:	1000041e 	bne	r2,zero,16580 <__mdiff+0x118>
   16570:	18ffff04 	addi	r3,r3,-4
   16574:	18800017 	ldw	r2,0(r3)
   16578:	52bfffc4 	addi	r10,r10,-1
   1657c:	103ffc26 	beq	r2,zero,16570 <__mdiff+0x108>
   16580:	6005883a 	mov	r2,r12
   16584:	62800415 	stw	r10,16(r12)
   16588:	dfc00417 	ldw	ra,16(sp)
   1658c:	dcc00317 	ldw	r19,12(sp)
   16590:	dc800217 	ldw	r18,8(sp)
   16594:	dc400117 	ldw	r17,4(sp)
   16598:	dc000017 	ldw	r16,0(sp)
   1659c:	dec00504 	addi	sp,sp,20
   165a0:	f800283a 	ret
   165a4:	9009883a 	mov	r4,r18
   165a8:	000b883a 	mov	r5,zero
   165ac:	00162300 	call	16230 <_Balloc>
   165b0:	1019883a 	mov	r12,r2
   165b4:	00800044 	movi	r2,1
   165b8:	60800415 	stw	r2,16(r12)
   165bc:	6005883a 	mov	r2,r12
   165c0:	60000515 	stw	zero,20(r12)
   165c4:	dfc00417 	ldw	ra,16(sp)
   165c8:	dcc00317 	ldw	r19,12(sp)
   165cc:	dc800217 	ldw	r18,8(sp)
   165d0:	dc400117 	ldw	r17,4(sp)
   165d4:	dc000017 	ldw	r16,0(sp)
   165d8:	dec00504 	addi	sp,sp,20
   165dc:	f800283a 	ret
   165e0:	880d883a 	mov	r6,r17
   165e4:	04c00044 	movi	r19,1
   165e8:	8023883a 	mov	r17,r16
   165ec:	3021883a 	mov	r16,r6
   165f0:	003fac06 	br	164a4 <__mdiff+0x3c>

000165f4 <__lshift>:
   165f4:	defff904 	addi	sp,sp,-28
   165f8:	28800417 	ldw	r2,16(r5)
   165fc:	dc000015 	stw	r16,0(sp)
   16600:	3021d17a 	srai	r16,r6,5
   16604:	28c00217 	ldw	r3,8(r5)
   16608:	10800044 	addi	r2,r2,1
   1660c:	dc400115 	stw	r17,4(sp)
   16610:	80a3883a 	add	r17,r16,r2
   16614:	dd400515 	stw	r21,20(sp)
   16618:	dd000415 	stw	r20,16(sp)
   1661c:	dc800215 	stw	r18,8(sp)
   16620:	dfc00615 	stw	ra,24(sp)
   16624:	2825883a 	mov	r18,r5
   16628:	dcc00315 	stw	r19,12(sp)
   1662c:	3029883a 	mov	r20,r6
   16630:	202b883a 	mov	r21,r4
   16634:	29400117 	ldw	r5,4(r5)
   16638:	1c40030e 	bge	r3,r17,16648 <__lshift+0x54>
   1663c:	18c7883a 	add	r3,r3,r3
   16640:	29400044 	addi	r5,r5,1
   16644:	1c7ffd16 	blt	r3,r17,1663c <__lshift+0x48>
   16648:	a809883a 	mov	r4,r21
   1664c:	00162300 	call	16230 <_Balloc>
   16650:	1027883a 	mov	r19,r2
   16654:	11400504 	addi	r5,r2,20
   16658:	0400090e 	bge	zero,r16,16680 <__lshift+0x8c>
   1665c:	2805883a 	mov	r2,r5
   16660:	0007883a 	mov	r3,zero
   16664:	18c00044 	addi	r3,r3,1
   16668:	10000015 	stw	zero,0(r2)
   1666c:	10800104 	addi	r2,r2,4
   16670:	80fffc1e 	bne	r16,r3,16664 <__lshift+0x70>
   16674:	8405883a 	add	r2,r16,r16
   16678:	1085883a 	add	r2,r2,r2
   1667c:	288b883a 	add	r5,r5,r2
   16680:	90800417 	ldw	r2,16(r18)
   16684:	91000504 	addi	r4,r18,20
   16688:	a18007cc 	andi	r6,r20,31
   1668c:	1085883a 	add	r2,r2,r2
   16690:	1085883a 	add	r2,r2,r2
   16694:	208f883a 	add	r7,r4,r2
   16698:	30001e26 	beq	r6,zero,16714 <__lshift+0x120>
   1669c:	00800804 	movi	r2,32
   166a0:	1191c83a 	sub	r8,r2,r6
   166a4:	0007883a 	mov	r3,zero
   166a8:	20800017 	ldw	r2,0(r4)
   166ac:	1184983a 	sll	r2,r2,r6
   166b0:	1884b03a 	or	r2,r3,r2
   166b4:	28800015 	stw	r2,0(r5)
   166b8:	20c00017 	ldw	r3,0(r4)
   166bc:	21000104 	addi	r4,r4,4
   166c0:	29400104 	addi	r5,r5,4
   166c4:	1a06d83a 	srl	r3,r3,r8
   166c8:	21fff736 	bltu	r4,r7,166a8 <__lshift+0xb4>
   166cc:	28c00015 	stw	r3,0(r5)
   166d0:	18000126 	beq	r3,zero,166d8 <__lshift+0xe4>
   166d4:	8c400044 	addi	r17,r17,1
   166d8:	88bfffc4 	addi	r2,r17,-1
   166dc:	98800415 	stw	r2,16(r19)
   166e0:	a809883a 	mov	r4,r21
   166e4:	900b883a 	mov	r5,r18
   166e8:	0015cb00 	call	15cb0 <_Bfree>
   166ec:	9805883a 	mov	r2,r19
   166f0:	dfc00617 	ldw	ra,24(sp)
   166f4:	dd400517 	ldw	r21,20(sp)
   166f8:	dd000417 	ldw	r20,16(sp)
   166fc:	dcc00317 	ldw	r19,12(sp)
   16700:	dc800217 	ldw	r18,8(sp)
   16704:	dc400117 	ldw	r17,4(sp)
   16708:	dc000017 	ldw	r16,0(sp)
   1670c:	dec00704 	addi	sp,sp,28
   16710:	f800283a 	ret
   16714:	20800017 	ldw	r2,0(r4)
   16718:	21000104 	addi	r4,r4,4
   1671c:	28800015 	stw	r2,0(r5)
   16720:	29400104 	addi	r5,r5,4
   16724:	21ffec2e 	bgeu	r4,r7,166d8 <__lshift+0xe4>
   16728:	20800017 	ldw	r2,0(r4)
   1672c:	21000104 	addi	r4,r4,4
   16730:	28800015 	stw	r2,0(r5)
   16734:	29400104 	addi	r5,r5,4
   16738:	21fff636 	bltu	r4,r7,16714 <__lshift+0x120>
   1673c:	003fe606 	br	166d8 <__lshift+0xe4>

00016740 <__multiply>:
   16740:	defff904 	addi	sp,sp,-28
   16744:	dcc00315 	stw	r19,12(sp)
   16748:	dc800215 	stw	r18,8(sp)
   1674c:	2cc00417 	ldw	r19,16(r5)
   16750:	34800417 	ldw	r18,16(r6)
   16754:	dd000415 	stw	r20,16(sp)
   16758:	dc400115 	stw	r17,4(sp)
   1675c:	dfc00615 	stw	ra,24(sp)
   16760:	dd400515 	stw	r21,20(sp)
   16764:	dc000015 	stw	r16,0(sp)
   16768:	2823883a 	mov	r17,r5
   1676c:	3029883a 	mov	r20,r6
   16770:	9c80040e 	bge	r19,r18,16784 <__multiply+0x44>
   16774:	9027883a 	mov	r19,r18
   16778:	2c800417 	ldw	r18,16(r5)
   1677c:	2829883a 	mov	r20,r5
   16780:	3023883a 	mov	r17,r6
   16784:	88800217 	ldw	r2,8(r17)
   16788:	9ca1883a 	add	r16,r19,r18
   1678c:	89400117 	ldw	r5,4(r17)
   16790:	1400010e 	bge	r2,r16,16798 <__multiply+0x58>
   16794:	29400044 	addi	r5,r5,1
   16798:	00162300 	call	16230 <_Balloc>
   1679c:	102b883a 	mov	r21,r2
   167a0:	8405883a 	add	r2,r16,r16
   167a4:	1085883a 	add	r2,r2,r2
   167a8:	a9000504 	addi	r4,r21,20
   167ac:	209d883a 	add	r14,r4,r2
   167b0:	2380042e 	bgeu	r4,r14,167c4 <__multiply+0x84>
   167b4:	2005883a 	mov	r2,r4
   167b8:	10000015 	stw	zero,0(r2)
   167bc:	10800104 	addi	r2,r2,4
   167c0:	13bffd36 	bltu	r2,r14,167b8 <__multiply+0x78>
   167c4:	9485883a 	add	r2,r18,r18
   167c8:	9cc7883a 	add	r3,r19,r19
   167cc:	a1800504 	addi	r6,r20,20
   167d0:	1085883a 	add	r2,r2,r2
   167d4:	8b400504 	addi	r13,r17,20
   167d8:	18c7883a 	add	r3,r3,r3
   167dc:	309f883a 	add	r15,r6,r2
   167e0:	68d7883a 	add	r11,r13,r3
   167e4:	33c03b2e 	bgeu	r6,r15,168d4 <__multiply+0x194>
   167e8:	2019883a 	mov	r12,r4
   167ec:	30800017 	ldw	r2,0(r6)
   167f0:	127fffcc 	andi	r9,r2,65535
   167f4:	48001826 	beq	r9,zero,16858 <__multiply+0x118>
   167f8:	6811883a 	mov	r8,r13
   167fc:	600f883a 	mov	r7,r12
   16800:	0015883a 	mov	r10,zero
   16804:	40c00017 	ldw	r3,0(r8)
   16808:	39400017 	ldw	r5,0(r7)
   1680c:	42000104 	addi	r8,r8,4
   16810:	193fffcc 	andi	r4,r3,65535
   16814:	4909383a 	mul	r4,r9,r4
   16818:	1806d43a 	srli	r3,r3,16
   1681c:	28bfffcc 	andi	r2,r5,65535
   16820:	5085883a 	add	r2,r10,r2
   16824:	2089883a 	add	r4,r4,r2
   16828:	48c7383a 	mul	r3,r9,r3
   1682c:	280ad43a 	srli	r5,r5,16
   16830:	2004d43a 	srli	r2,r4,16
   16834:	3900000d 	sth	r4,0(r7)
   16838:	1947883a 	add	r3,r3,r5
   1683c:	10c5883a 	add	r2,r2,r3
   16840:	3880008d 	sth	r2,2(r7)
   16844:	1014d43a 	srli	r10,r2,16
   16848:	39c00104 	addi	r7,r7,4
   1684c:	42ffed36 	bltu	r8,r11,16804 <__multiply+0xc4>
   16850:	3a800015 	stw	r10,0(r7)
   16854:	30800017 	ldw	r2,0(r6)
   16858:	1012d43a 	srli	r9,r2,16
   1685c:	48001926 	beq	r9,zero,168c4 <__multiply+0x184>
   16860:	60800017 	ldw	r2,0(r12)
   16864:	6811883a 	mov	r8,r13
   16868:	600f883a 	mov	r7,r12
   1686c:	0015883a 	mov	r10,zero
   16870:	100b883a 	mov	r5,r2
   16874:	41000017 	ldw	r4,0(r8)
   16878:	2806d43a 	srli	r3,r5,16
   1687c:	3880000d 	sth	r2,0(r7)
   16880:	20bfffcc 	andi	r2,r4,65535
   16884:	4885383a 	mul	r2,r9,r2
   16888:	50c7883a 	add	r3,r10,r3
   1688c:	2008d43a 	srli	r4,r4,16
   16890:	10c5883a 	add	r2,r2,r3
   16894:	3880008d 	sth	r2,2(r7)
   16898:	39c00104 	addi	r7,r7,4
   1689c:	39400017 	ldw	r5,0(r7)
   168a0:	4909383a 	mul	r4,r9,r4
   168a4:	1004d43a 	srli	r2,r2,16
   168a8:	28ffffcc 	andi	r3,r5,65535
   168ac:	20c9883a 	add	r4,r4,r3
   168b0:	1105883a 	add	r2,r2,r4
   168b4:	42000104 	addi	r8,r8,4
   168b8:	1014d43a 	srli	r10,r2,16
   168bc:	42ffed36 	bltu	r8,r11,16874 <__multiply+0x134>
   168c0:	38800015 	stw	r2,0(r7)
   168c4:	31800104 	addi	r6,r6,4
   168c8:	33c0022e 	bgeu	r6,r15,168d4 <__multiply+0x194>
   168cc:	63000104 	addi	r12,r12,4
   168d0:	003fc606 	br	167ec <__multiply+0xac>
   168d4:	0400090e 	bge	zero,r16,168fc <__multiply+0x1bc>
   168d8:	70bfff17 	ldw	r2,-4(r14)
   168dc:	70ffff04 	addi	r3,r14,-4
   168e0:	10000326 	beq	r2,zero,168f0 <__multiply+0x1b0>
   168e4:	00000506 	br	168fc <__multiply+0x1bc>
   168e8:	18800017 	ldw	r2,0(r3)
   168ec:	1000031e 	bne	r2,zero,168fc <__multiply+0x1bc>
   168f0:	843fffc4 	addi	r16,r16,-1
   168f4:	18ffff04 	addi	r3,r3,-4
   168f8:	803ffb1e 	bne	r16,zero,168e8 <__multiply+0x1a8>
   168fc:	a805883a 	mov	r2,r21
   16900:	ac000415 	stw	r16,16(r21)
   16904:	dfc00617 	ldw	ra,24(sp)
   16908:	dd400517 	ldw	r21,20(sp)
   1690c:	dd000417 	ldw	r20,16(sp)
   16910:	dcc00317 	ldw	r19,12(sp)
   16914:	dc800217 	ldw	r18,8(sp)
   16918:	dc400117 	ldw	r17,4(sp)
   1691c:	dc000017 	ldw	r16,0(sp)
   16920:	dec00704 	addi	sp,sp,28
   16924:	f800283a 	ret

00016928 <__i2b>:
   16928:	defffd04 	addi	sp,sp,-12
   1692c:	dc000015 	stw	r16,0(sp)
   16930:	04000044 	movi	r16,1
   16934:	dc800115 	stw	r18,4(sp)
   16938:	2825883a 	mov	r18,r5
   1693c:	800b883a 	mov	r5,r16
   16940:	dfc00215 	stw	ra,8(sp)
   16944:	00162300 	call	16230 <_Balloc>
   16948:	14000415 	stw	r16,16(r2)
   1694c:	14800515 	stw	r18,20(r2)
   16950:	dfc00217 	ldw	ra,8(sp)
   16954:	dc800117 	ldw	r18,4(sp)
   16958:	dc000017 	ldw	r16,0(sp)
   1695c:	dec00304 	addi	sp,sp,12
   16960:	f800283a 	ret

00016964 <__multadd>:
   16964:	defffa04 	addi	sp,sp,-24
   16968:	dc800215 	stw	r18,8(sp)
   1696c:	2c800417 	ldw	r18,16(r5)
   16970:	dd000415 	stw	r20,16(sp)
   16974:	dcc00315 	stw	r19,12(sp)
   16978:	dc000015 	stw	r16,0(sp)
   1697c:	dfc00515 	stw	ra,20(sp)
   16980:	3821883a 	mov	r16,r7
   16984:	dc400115 	stw	r17,4(sp)
   16988:	2827883a 	mov	r19,r5
   1698c:	2029883a 	mov	r20,r4
   16990:	2a000504 	addi	r8,r5,20
   16994:	000f883a 	mov	r7,zero
   16998:	40800017 	ldw	r2,0(r8)
   1699c:	39c00044 	addi	r7,r7,1
   169a0:	10ffffcc 	andi	r3,r2,65535
   169a4:	1987383a 	mul	r3,r3,r6
   169a8:	1004d43a 	srli	r2,r2,16
   169ac:	1c07883a 	add	r3,r3,r16
   169b0:	180ad43a 	srli	r5,r3,16
   169b4:	1185383a 	mul	r2,r2,r6
   169b8:	18ffffcc 	andi	r3,r3,65535
   169bc:	1145883a 	add	r2,r2,r5
   169c0:	1008943a 	slli	r4,r2,16
   169c4:	1020d43a 	srli	r16,r2,16
   169c8:	20c9883a 	add	r4,r4,r3
   169cc:	41000015 	stw	r4,0(r8)
   169d0:	42000104 	addi	r8,r8,4
   169d4:	3cbff016 	blt	r7,r18,16998 <__multadd+0x34>
   169d8:	80000826 	beq	r16,zero,169fc <__multadd+0x98>
   169dc:	98800217 	ldw	r2,8(r19)
   169e0:	90800f0e 	bge	r18,r2,16a20 <__multadd+0xbc>
   169e4:	9485883a 	add	r2,r18,r18
   169e8:	1085883a 	add	r2,r2,r2
   169ec:	14c5883a 	add	r2,r2,r19
   169f0:	90c00044 	addi	r3,r18,1
   169f4:	14000515 	stw	r16,20(r2)
   169f8:	98c00415 	stw	r3,16(r19)
   169fc:	9805883a 	mov	r2,r19
   16a00:	dfc00517 	ldw	ra,20(sp)
   16a04:	dd000417 	ldw	r20,16(sp)
   16a08:	dcc00317 	ldw	r19,12(sp)
   16a0c:	dc800217 	ldw	r18,8(sp)
   16a10:	dc400117 	ldw	r17,4(sp)
   16a14:	dc000017 	ldw	r16,0(sp)
   16a18:	dec00604 	addi	sp,sp,24
   16a1c:	f800283a 	ret
   16a20:	99400117 	ldw	r5,4(r19)
   16a24:	a009883a 	mov	r4,r20
   16a28:	29400044 	addi	r5,r5,1
   16a2c:	00162300 	call	16230 <_Balloc>
   16a30:	99800417 	ldw	r6,16(r19)
   16a34:	99400304 	addi	r5,r19,12
   16a38:	11000304 	addi	r4,r2,12
   16a3c:	318d883a 	add	r6,r6,r6
   16a40:	318d883a 	add	r6,r6,r6
   16a44:	31800204 	addi	r6,r6,8
   16a48:	1023883a 	mov	r17,r2
   16a4c:	0015a980 	call	15a98 <memcpy>
   16a50:	980b883a 	mov	r5,r19
   16a54:	a009883a 	mov	r4,r20
   16a58:	0015cb00 	call	15cb0 <_Bfree>
   16a5c:	8827883a 	mov	r19,r17
   16a60:	003fe006 	br	169e4 <__multadd+0x80>

00016a64 <__pow5mult>:
   16a64:	defffa04 	addi	sp,sp,-24
   16a68:	308000cc 	andi	r2,r6,3
   16a6c:	dd000415 	stw	r20,16(sp)
   16a70:	dcc00315 	stw	r19,12(sp)
   16a74:	dc000015 	stw	r16,0(sp)
   16a78:	dfc00515 	stw	ra,20(sp)
   16a7c:	dc800215 	stw	r18,8(sp)
   16a80:	dc400115 	stw	r17,4(sp)
   16a84:	3021883a 	mov	r16,r6
   16a88:	2027883a 	mov	r19,r4
   16a8c:	2829883a 	mov	r20,r5
   16a90:	10002b1e 	bne	r2,zero,16b40 <__pow5mult+0xdc>
   16a94:	8025d0ba 	srai	r18,r16,2
   16a98:	90001b26 	beq	r18,zero,16b08 <__pow5mult+0xa4>
   16a9c:	9c001217 	ldw	r16,72(r19)
   16aa0:	8000081e 	bne	r16,zero,16ac4 <__pow5mult+0x60>
   16aa4:	00003006 	br	16b68 <__pow5mult+0x104>
   16aa8:	800b883a 	mov	r5,r16
   16aac:	800d883a 	mov	r6,r16
   16ab0:	9809883a 	mov	r4,r19
   16ab4:	90001426 	beq	r18,zero,16b08 <__pow5mult+0xa4>
   16ab8:	80800017 	ldw	r2,0(r16)
   16abc:	10001b26 	beq	r2,zero,16b2c <__pow5mult+0xc8>
   16ac0:	1021883a 	mov	r16,r2
   16ac4:	9080004c 	andi	r2,r18,1
   16ac8:	1005003a 	cmpeq	r2,r2,zero
   16acc:	9025d07a 	srai	r18,r18,1
   16ad0:	800d883a 	mov	r6,r16
   16ad4:	9809883a 	mov	r4,r19
   16ad8:	a00b883a 	mov	r5,r20
   16adc:	103ff21e 	bne	r2,zero,16aa8 <__pow5mult+0x44>
   16ae0:	00167400 	call	16740 <__multiply>
   16ae4:	a00b883a 	mov	r5,r20
   16ae8:	9809883a 	mov	r4,r19
   16aec:	1023883a 	mov	r17,r2
   16af0:	0015cb00 	call	15cb0 <_Bfree>
   16af4:	8829883a 	mov	r20,r17
   16af8:	800b883a 	mov	r5,r16
   16afc:	800d883a 	mov	r6,r16
   16b00:	9809883a 	mov	r4,r19
   16b04:	903fec1e 	bne	r18,zero,16ab8 <__pow5mult+0x54>
   16b08:	a005883a 	mov	r2,r20
   16b0c:	dfc00517 	ldw	ra,20(sp)
   16b10:	dd000417 	ldw	r20,16(sp)
   16b14:	dcc00317 	ldw	r19,12(sp)
   16b18:	dc800217 	ldw	r18,8(sp)
   16b1c:	dc400117 	ldw	r17,4(sp)
   16b20:	dc000017 	ldw	r16,0(sp)
   16b24:	dec00604 	addi	sp,sp,24
   16b28:	f800283a 	ret
   16b2c:	00167400 	call	16740 <__multiply>
   16b30:	80800015 	stw	r2,0(r16)
   16b34:	1021883a 	mov	r16,r2
   16b38:	10000015 	stw	zero,0(r2)
   16b3c:	003fe106 	br	16ac4 <__pow5mult+0x60>
   16b40:	1085883a 	add	r2,r2,r2
   16b44:	00c00174 	movhi	r3,5
   16b48:	18e09404 	addi	r3,r3,-32176
   16b4c:	1085883a 	add	r2,r2,r2
   16b50:	10c5883a 	add	r2,r2,r3
   16b54:	11bfff17 	ldw	r6,-4(r2)
   16b58:	000f883a 	mov	r7,zero
   16b5c:	00169640 	call	16964 <__multadd>
   16b60:	1029883a 	mov	r20,r2
   16b64:	003fcb06 	br	16a94 <__pow5mult+0x30>
   16b68:	9809883a 	mov	r4,r19
   16b6c:	01409c44 	movi	r5,625
   16b70:	00169280 	call	16928 <__i2b>
   16b74:	98801215 	stw	r2,72(r19)
   16b78:	1021883a 	mov	r16,r2
   16b7c:	10000015 	stw	zero,0(r2)
   16b80:	003fd006 	br	16ac4 <__pow5mult+0x60>

00016b84 <__s2b>:
   16b84:	defff904 	addi	sp,sp,-28
   16b88:	dcc00315 	stw	r19,12(sp)
   16b8c:	dc800215 	stw	r18,8(sp)
   16b90:	2827883a 	mov	r19,r5
   16b94:	2025883a 	mov	r18,r4
   16b98:	01400244 	movi	r5,9
   16b9c:	39000204 	addi	r4,r7,8
   16ba0:	dd000415 	stw	r20,16(sp)
   16ba4:	dc400115 	stw	r17,4(sp)
   16ba8:	dfc00615 	stw	ra,24(sp)
   16bac:	dd400515 	stw	r21,20(sp)
   16bb0:	dc000015 	stw	r16,0(sp)
   16bb4:	3829883a 	mov	r20,r7
   16bb8:	3023883a 	mov	r17,r6
   16bbc:	00197480 	call	19748 <__divsi3>
   16bc0:	00c00044 	movi	r3,1
   16bc4:	1880350e 	bge	r3,r2,16c9c <__s2b+0x118>
   16bc8:	000b883a 	mov	r5,zero
   16bcc:	18c7883a 	add	r3,r3,r3
   16bd0:	29400044 	addi	r5,r5,1
   16bd4:	18bffd16 	blt	r3,r2,16bcc <__s2b+0x48>
   16bd8:	9009883a 	mov	r4,r18
   16bdc:	00162300 	call	16230 <_Balloc>
   16be0:	1011883a 	mov	r8,r2
   16be4:	d8800717 	ldw	r2,28(sp)
   16be8:	00c00044 	movi	r3,1
   16bec:	01800244 	movi	r6,9
   16bf0:	40800515 	stw	r2,20(r8)
   16bf4:	40c00415 	stw	r3,16(r8)
   16bf8:	3440260e 	bge	r6,r17,16c94 <__s2b+0x110>
   16bfc:	3021883a 	mov	r16,r6
   16c00:	99ab883a 	add	r21,r19,r6
   16c04:	9c05883a 	add	r2,r19,r16
   16c08:	11c00007 	ldb	r7,0(r2)
   16c0c:	400b883a 	mov	r5,r8
   16c10:	9009883a 	mov	r4,r18
   16c14:	39fff404 	addi	r7,r7,-48
   16c18:	01800284 	movi	r6,10
   16c1c:	00169640 	call	16964 <__multadd>
   16c20:	84000044 	addi	r16,r16,1
   16c24:	1011883a 	mov	r8,r2
   16c28:	8c3ff61e 	bne	r17,r16,16c04 <__s2b+0x80>
   16c2c:	ac45883a 	add	r2,r21,r17
   16c30:	117ffe04 	addi	r5,r2,-8
   16c34:	880d883a 	mov	r6,r17
   16c38:	35000c0e 	bge	r6,r20,16c6c <__s2b+0xe8>
   16c3c:	a185c83a 	sub	r2,r20,r6
   16c40:	2821883a 	mov	r16,r5
   16c44:	28a3883a 	add	r17,r5,r2
   16c48:	81c00007 	ldb	r7,0(r16)
   16c4c:	400b883a 	mov	r5,r8
   16c50:	9009883a 	mov	r4,r18
   16c54:	39fff404 	addi	r7,r7,-48
   16c58:	01800284 	movi	r6,10
   16c5c:	00169640 	call	16964 <__multadd>
   16c60:	84000044 	addi	r16,r16,1
   16c64:	1011883a 	mov	r8,r2
   16c68:	847ff71e 	bne	r16,r17,16c48 <__s2b+0xc4>
   16c6c:	4005883a 	mov	r2,r8
   16c70:	dfc00617 	ldw	ra,24(sp)
   16c74:	dd400517 	ldw	r21,20(sp)
   16c78:	dd000417 	ldw	r20,16(sp)
   16c7c:	dcc00317 	ldw	r19,12(sp)
   16c80:	dc800217 	ldw	r18,8(sp)
   16c84:	dc400117 	ldw	r17,4(sp)
   16c88:	dc000017 	ldw	r16,0(sp)
   16c8c:	dec00704 	addi	sp,sp,28
   16c90:	f800283a 	ret
   16c94:	99400284 	addi	r5,r19,10
   16c98:	003fe706 	br	16c38 <__s2b+0xb4>
   16c9c:	000b883a 	mov	r5,zero
   16ca0:	003fcd06 	br	16bd8 <__s2b+0x54>

00016ca4 <_realloc_r>:
   16ca4:	defff404 	addi	sp,sp,-48
   16ca8:	dd800815 	stw	r22,32(sp)
   16cac:	dc800415 	stw	r18,16(sp)
   16cb0:	dc400315 	stw	r17,12(sp)
   16cb4:	dfc00b15 	stw	ra,44(sp)
   16cb8:	df000a15 	stw	fp,40(sp)
   16cbc:	ddc00915 	stw	r23,36(sp)
   16cc0:	dd400715 	stw	r21,28(sp)
   16cc4:	dd000615 	stw	r20,24(sp)
   16cc8:	dcc00515 	stw	r19,20(sp)
   16ccc:	dc000215 	stw	r16,8(sp)
   16cd0:	2825883a 	mov	r18,r5
   16cd4:	3023883a 	mov	r17,r6
   16cd8:	202d883a 	mov	r22,r4
   16cdc:	2800c926 	beq	r5,zero,17004 <_realloc_r+0x360>
   16ce0:	001a4c80 	call	1a4c8 <__malloc_lock>
   16ce4:	943ffe04 	addi	r16,r18,-8
   16ce8:	88c002c4 	addi	r3,r17,11
   16cec:	00800584 	movi	r2,22
   16cf0:	82000117 	ldw	r8,4(r16)
   16cf4:	10c01b2e 	bgeu	r2,r3,16d64 <_realloc_r+0xc0>
   16cf8:	00bffe04 	movi	r2,-8
   16cfc:	188e703a 	and	r7,r3,r2
   16d00:	3839883a 	mov	fp,r7
   16d04:	38001a16 	blt	r7,zero,16d70 <_realloc_r+0xcc>
   16d08:	e4401936 	bltu	fp,r17,16d70 <_realloc_r+0xcc>
   16d0c:	013fff04 	movi	r4,-4
   16d10:	4126703a 	and	r19,r8,r4
   16d14:	99c02616 	blt	r19,r7,16db0 <_realloc_r+0x10c>
   16d18:	802b883a 	mov	r21,r16
   16d1c:	9829883a 	mov	r20,r19
   16d20:	84000204 	addi	r16,r16,8
   16d24:	a80f883a 	mov	r7,r21
   16d28:	a70dc83a 	sub	r6,r20,fp
   16d2c:	008003c4 	movi	r2,15
   16d30:	1180c136 	bltu	r2,r6,17038 <_realloc_r+0x394>
   16d34:	38800117 	ldw	r2,4(r7)
   16d38:	a549883a 	add	r4,r20,r21
   16d3c:	1080004c 	andi	r2,r2,1
   16d40:	a084b03a 	or	r2,r20,r2
   16d44:	38800115 	stw	r2,4(r7)
   16d48:	20c00117 	ldw	r3,4(r4)
   16d4c:	18c00054 	ori	r3,r3,1
   16d50:	20c00115 	stw	r3,4(r4)
   16d54:	b009883a 	mov	r4,r22
   16d58:	001a4e80 	call	1a4e8 <__malloc_unlock>
   16d5c:	8023883a 	mov	r17,r16
   16d60:	00000606 	br	16d7c <_realloc_r+0xd8>
   16d64:	01c00404 	movi	r7,16
   16d68:	3839883a 	mov	fp,r7
   16d6c:	e47fe72e 	bgeu	fp,r17,16d0c <_realloc_r+0x68>
   16d70:	00800304 	movi	r2,12
   16d74:	0023883a 	mov	r17,zero
   16d78:	b0800015 	stw	r2,0(r22)
   16d7c:	8805883a 	mov	r2,r17
   16d80:	dfc00b17 	ldw	ra,44(sp)
   16d84:	df000a17 	ldw	fp,40(sp)
   16d88:	ddc00917 	ldw	r23,36(sp)
   16d8c:	dd800817 	ldw	r22,32(sp)
   16d90:	dd400717 	ldw	r21,28(sp)
   16d94:	dd000617 	ldw	r20,24(sp)
   16d98:	dcc00517 	ldw	r19,20(sp)
   16d9c:	dc800417 	ldw	r18,16(sp)
   16da0:	dc400317 	ldw	r17,12(sp)
   16da4:	dc000217 	ldw	r16,8(sp)
   16da8:	dec00c04 	addi	sp,sp,48
   16dac:	f800283a 	ret
   16db0:	00800174 	movhi	r2,5
   16db4:	10a1ec04 	addi	r2,r2,-30800
   16db8:	12400217 	ldw	r9,8(r2)
   16dbc:	84cd883a 	add	r6,r16,r19
   16dc0:	802b883a 	mov	r21,r16
   16dc4:	3240b926 	beq	r6,r9,170ac <_realloc_r+0x408>
   16dc8:	31400117 	ldw	r5,4(r6)
   16dcc:	00bfff84 	movi	r2,-2
   16dd0:	2884703a 	and	r2,r5,r2
   16dd4:	1185883a 	add	r2,r2,r6
   16dd8:	10c00117 	ldw	r3,4(r2)
   16ddc:	18c0004c 	andi	r3,r3,1
   16de0:	1807003a 	cmpeq	r3,r3,zero
   16de4:	1800a326 	beq	r3,zero,17074 <_realloc_r+0x3d0>
   16de8:	2908703a 	and	r4,r5,r4
   16dec:	9929883a 	add	r20,r19,r4
   16df0:	a1c0a30e 	bge	r20,r7,17080 <_realloc_r+0x3dc>
   16df4:	4080004c 	andi	r2,r8,1
   16df8:	1000551e 	bne	r2,zero,16f50 <_realloc_r+0x2ac>
   16dfc:	80800017 	ldw	r2,0(r16)
   16e00:	80afc83a 	sub	r23,r16,r2
   16e04:	b8c00117 	ldw	r3,4(r23)
   16e08:	00bfff04 	movi	r2,-4
   16e0c:	1884703a 	and	r2,r3,r2
   16e10:	30002e26 	beq	r6,zero,16ecc <_realloc_r+0x228>
   16e14:	3240b926 	beq	r6,r9,170fc <_realloc_r+0x458>
   16e18:	98a9883a 	add	r20,r19,r2
   16e1c:	2509883a 	add	r4,r4,r20
   16e20:	d9000015 	stw	r4,0(sp)
   16e24:	21c02a16 	blt	r4,r7,16ed0 <_realloc_r+0x22c>
   16e28:	30800317 	ldw	r2,12(r6)
   16e2c:	30c00217 	ldw	r3,8(r6)
   16e30:	01400904 	movi	r5,36
   16e34:	99bfff04 	addi	r6,r19,-4
   16e38:	18800315 	stw	r2,12(r3)
   16e3c:	10c00215 	stw	r3,8(r2)
   16e40:	b9000317 	ldw	r4,12(r23)
   16e44:	b8800217 	ldw	r2,8(r23)
   16e48:	b82b883a 	mov	r21,r23
   16e4c:	bc000204 	addi	r16,r23,8
   16e50:	20800215 	stw	r2,8(r4)
   16e54:	11000315 	stw	r4,12(r2)
   16e58:	2980e436 	bltu	r5,r6,171ec <_realloc_r+0x548>
   16e5c:	008004c4 	movi	r2,19
   16e60:	9009883a 	mov	r4,r18
   16e64:	8011883a 	mov	r8,r16
   16e68:	11800f2e 	bgeu	r2,r6,16ea8 <_realloc_r+0x204>
   16e6c:	90800017 	ldw	r2,0(r18)
   16e70:	ba000404 	addi	r8,r23,16
   16e74:	91000204 	addi	r4,r18,8
   16e78:	b8800215 	stw	r2,8(r23)
   16e7c:	90c00117 	ldw	r3,4(r18)
   16e80:	008006c4 	movi	r2,27
   16e84:	b8c00315 	stw	r3,12(r23)
   16e88:	1180072e 	bgeu	r2,r6,16ea8 <_realloc_r+0x204>
   16e8c:	90c00217 	ldw	r3,8(r18)
   16e90:	ba000604 	addi	r8,r23,24
   16e94:	91000404 	addi	r4,r18,16
   16e98:	b8c00415 	stw	r3,16(r23)
   16e9c:	90800317 	ldw	r2,12(r18)
   16ea0:	b8800515 	stw	r2,20(r23)
   16ea4:	3140e726 	beq	r6,r5,17244 <_realloc_r+0x5a0>
   16ea8:	20800017 	ldw	r2,0(r4)
   16eac:	dd000017 	ldw	r20,0(sp)
   16eb0:	b80f883a 	mov	r7,r23
   16eb4:	40800015 	stw	r2,0(r8)
   16eb8:	20c00117 	ldw	r3,4(r4)
   16ebc:	40c00115 	stw	r3,4(r8)
   16ec0:	20800217 	ldw	r2,8(r4)
   16ec4:	40800215 	stw	r2,8(r8)
   16ec8:	003f9706 	br	16d28 <_realloc_r+0x84>
   16ecc:	98a9883a 	add	r20,r19,r2
   16ed0:	a1c01f16 	blt	r20,r7,16f50 <_realloc_r+0x2ac>
   16ed4:	b8c00317 	ldw	r3,12(r23)
   16ed8:	b8800217 	ldw	r2,8(r23)
   16edc:	99bfff04 	addi	r6,r19,-4
   16ee0:	01400904 	movi	r5,36
   16ee4:	b82b883a 	mov	r21,r23
   16ee8:	18800215 	stw	r2,8(r3)
   16eec:	10c00315 	stw	r3,12(r2)
   16ef0:	bc000204 	addi	r16,r23,8
   16ef4:	2980c336 	bltu	r5,r6,17204 <_realloc_r+0x560>
   16ef8:	008004c4 	movi	r2,19
   16efc:	9009883a 	mov	r4,r18
   16f00:	8011883a 	mov	r8,r16
   16f04:	11800f2e 	bgeu	r2,r6,16f44 <_realloc_r+0x2a0>
   16f08:	90800017 	ldw	r2,0(r18)
   16f0c:	ba000404 	addi	r8,r23,16
   16f10:	91000204 	addi	r4,r18,8
   16f14:	b8800215 	stw	r2,8(r23)
   16f18:	90c00117 	ldw	r3,4(r18)
   16f1c:	008006c4 	movi	r2,27
   16f20:	b8c00315 	stw	r3,12(r23)
   16f24:	1180072e 	bgeu	r2,r6,16f44 <_realloc_r+0x2a0>
   16f28:	90c00217 	ldw	r3,8(r18)
   16f2c:	ba000604 	addi	r8,r23,24
   16f30:	91000404 	addi	r4,r18,16
   16f34:	b8c00415 	stw	r3,16(r23)
   16f38:	90800317 	ldw	r2,12(r18)
   16f3c:	b8800515 	stw	r2,20(r23)
   16f40:	3140c726 	beq	r6,r5,17260 <_realloc_r+0x5bc>
   16f44:	20800017 	ldw	r2,0(r4)
   16f48:	b80f883a 	mov	r7,r23
   16f4c:	003fd906 	br	16eb4 <_realloc_r+0x210>
   16f50:	880b883a 	mov	r5,r17
   16f54:	b009883a 	mov	r4,r22
   16f58:	00152740 	call	15274 <_malloc_r>
   16f5c:	1023883a 	mov	r17,r2
   16f60:	10002526 	beq	r2,zero,16ff8 <_realloc_r+0x354>
   16f64:	80800117 	ldw	r2,4(r16)
   16f68:	00ffff84 	movi	r3,-2
   16f6c:	893ffe04 	addi	r4,r17,-8
   16f70:	10c4703a 	and	r2,r2,r3
   16f74:	8085883a 	add	r2,r16,r2
   16f78:	20809526 	beq	r4,r2,171d0 <_realloc_r+0x52c>
   16f7c:	99bfff04 	addi	r6,r19,-4
   16f80:	01c00904 	movi	r7,36
   16f84:	39804536 	bltu	r7,r6,1709c <_realloc_r+0x3f8>
   16f88:	008004c4 	movi	r2,19
   16f8c:	9009883a 	mov	r4,r18
   16f90:	880b883a 	mov	r5,r17
   16f94:	11800f2e 	bgeu	r2,r6,16fd4 <_realloc_r+0x330>
   16f98:	90800017 	ldw	r2,0(r18)
   16f9c:	89400204 	addi	r5,r17,8
   16fa0:	91000204 	addi	r4,r18,8
   16fa4:	88800015 	stw	r2,0(r17)
   16fa8:	90c00117 	ldw	r3,4(r18)
   16fac:	008006c4 	movi	r2,27
   16fb0:	88c00115 	stw	r3,4(r17)
   16fb4:	1180072e 	bgeu	r2,r6,16fd4 <_realloc_r+0x330>
   16fb8:	90c00217 	ldw	r3,8(r18)
   16fbc:	89400404 	addi	r5,r17,16
   16fc0:	91000404 	addi	r4,r18,16
   16fc4:	88c00215 	stw	r3,8(r17)
   16fc8:	90800317 	ldw	r2,12(r18)
   16fcc:	88800315 	stw	r2,12(r17)
   16fd0:	31c09126 	beq	r6,r7,17218 <_realloc_r+0x574>
   16fd4:	20800017 	ldw	r2,0(r4)
   16fd8:	28800015 	stw	r2,0(r5)
   16fdc:	20c00117 	ldw	r3,4(r4)
   16fe0:	28c00115 	stw	r3,4(r5)
   16fe4:	20800217 	ldw	r2,8(r4)
   16fe8:	28800215 	stw	r2,8(r5)
   16fec:	900b883a 	mov	r5,r18
   16ff0:	b009883a 	mov	r4,r22
   16ff4:	00146ec0 	call	146ec <_free_r>
   16ff8:	b009883a 	mov	r4,r22
   16ffc:	001a4e80 	call	1a4e8 <__malloc_unlock>
   17000:	003f5e06 	br	16d7c <_realloc_r+0xd8>
   17004:	300b883a 	mov	r5,r6
   17008:	dfc00b17 	ldw	ra,44(sp)
   1700c:	df000a17 	ldw	fp,40(sp)
   17010:	ddc00917 	ldw	r23,36(sp)
   17014:	dd800817 	ldw	r22,32(sp)
   17018:	dd400717 	ldw	r21,28(sp)
   1701c:	dd000617 	ldw	r20,24(sp)
   17020:	dcc00517 	ldw	r19,20(sp)
   17024:	dc800417 	ldw	r18,16(sp)
   17028:	dc400317 	ldw	r17,12(sp)
   1702c:	dc000217 	ldw	r16,8(sp)
   17030:	dec00c04 	addi	sp,sp,48
   17034:	00152741 	jmpi	15274 <_malloc_r>
   17038:	38800117 	ldw	r2,4(r7)
   1703c:	e54b883a 	add	r5,fp,r21
   17040:	31000054 	ori	r4,r6,1
   17044:	1080004c 	andi	r2,r2,1
   17048:	1704b03a 	or	r2,r2,fp
   1704c:	38800115 	stw	r2,4(r7)
   17050:	29000115 	stw	r4,4(r5)
   17054:	2987883a 	add	r3,r5,r6
   17058:	18800117 	ldw	r2,4(r3)
   1705c:	29400204 	addi	r5,r5,8
   17060:	b009883a 	mov	r4,r22
   17064:	10800054 	ori	r2,r2,1
   17068:	18800115 	stw	r2,4(r3)
   1706c:	00146ec0 	call	146ec <_free_r>
   17070:	003f3806 	br	16d54 <_realloc_r+0xb0>
   17074:	000d883a 	mov	r6,zero
   17078:	0009883a 	mov	r4,zero
   1707c:	003f5d06 	br	16df4 <_realloc_r+0x150>
   17080:	30c00217 	ldw	r3,8(r6)
   17084:	30800317 	ldw	r2,12(r6)
   17088:	800f883a 	mov	r7,r16
   1708c:	84000204 	addi	r16,r16,8
   17090:	10c00215 	stw	r3,8(r2)
   17094:	18800315 	stw	r2,12(r3)
   17098:	003f2306 	br	16d28 <_realloc_r+0x84>
   1709c:	8809883a 	mov	r4,r17
   170a0:	900b883a 	mov	r5,r18
   170a4:	0015b380 	call	15b38 <memmove>
   170a8:	003fd006 	br	16fec <_realloc_r+0x348>
   170ac:	30800117 	ldw	r2,4(r6)
   170b0:	e0c00404 	addi	r3,fp,16
   170b4:	1108703a 	and	r4,r2,r4
   170b8:	9905883a 	add	r2,r19,r4
   170bc:	10ff4d16 	blt	r2,r3,16df4 <_realloc_r+0x150>
   170c0:	1705c83a 	sub	r2,r2,fp
   170c4:	870b883a 	add	r5,r16,fp
   170c8:	10800054 	ori	r2,r2,1
   170cc:	28800115 	stw	r2,4(r5)
   170d0:	80c00117 	ldw	r3,4(r16)
   170d4:	00800174 	movhi	r2,5
   170d8:	10a1ec04 	addi	r2,r2,-30800
   170dc:	b009883a 	mov	r4,r22
   170e0:	18c0004c 	andi	r3,r3,1
   170e4:	e0c6b03a 	or	r3,fp,r3
   170e8:	11400215 	stw	r5,8(r2)
   170ec:	80c00115 	stw	r3,4(r16)
   170f0:	001a4e80 	call	1a4e8 <__malloc_unlock>
   170f4:	84400204 	addi	r17,r16,8
   170f8:	003f2006 	br	16d7c <_realloc_r+0xd8>
   170fc:	98a9883a 	add	r20,r19,r2
   17100:	2509883a 	add	r4,r4,r20
   17104:	e0800404 	addi	r2,fp,16
   17108:	d9000115 	stw	r4,4(sp)
   1710c:	20bf7016 	blt	r4,r2,16ed0 <_realloc_r+0x22c>
   17110:	b8c00317 	ldw	r3,12(r23)
   17114:	b8800217 	ldw	r2,8(r23)
   17118:	99bfff04 	addi	r6,r19,-4
   1711c:	01400904 	movi	r5,36
   17120:	18800215 	stw	r2,8(r3)
   17124:	10c00315 	stw	r3,12(r2)
   17128:	bc400204 	addi	r17,r23,8
   1712c:	29804136 	bltu	r5,r6,17234 <_realloc_r+0x590>
   17130:	008004c4 	movi	r2,19
   17134:	9009883a 	mov	r4,r18
   17138:	880f883a 	mov	r7,r17
   1713c:	11800f2e 	bgeu	r2,r6,1717c <_realloc_r+0x4d8>
   17140:	90800017 	ldw	r2,0(r18)
   17144:	b9c00404 	addi	r7,r23,16
   17148:	91000204 	addi	r4,r18,8
   1714c:	b8800215 	stw	r2,8(r23)
   17150:	90c00117 	ldw	r3,4(r18)
   17154:	008006c4 	movi	r2,27
   17158:	b8c00315 	stw	r3,12(r23)
   1715c:	1180072e 	bgeu	r2,r6,1717c <_realloc_r+0x4d8>
   17160:	90c00217 	ldw	r3,8(r18)
   17164:	b9c00604 	addi	r7,r23,24
   17168:	91000404 	addi	r4,r18,16
   1716c:	b8c00415 	stw	r3,16(r23)
   17170:	90800317 	ldw	r2,12(r18)
   17174:	b8800515 	stw	r2,20(r23)
   17178:	31404026 	beq	r6,r5,1727c <_realloc_r+0x5d8>
   1717c:	20800017 	ldw	r2,0(r4)
   17180:	38800015 	stw	r2,0(r7)
   17184:	20c00117 	ldw	r3,4(r4)
   17188:	38c00115 	stw	r3,4(r7)
   1718c:	20800217 	ldw	r2,8(r4)
   17190:	38800215 	stw	r2,8(r7)
   17194:	d8c00117 	ldw	r3,4(sp)
   17198:	bf0b883a 	add	r5,r23,fp
   1719c:	b009883a 	mov	r4,r22
   171a0:	1f05c83a 	sub	r2,r3,fp
   171a4:	10800054 	ori	r2,r2,1
   171a8:	28800115 	stw	r2,4(r5)
   171ac:	b8c00117 	ldw	r3,4(r23)
   171b0:	00800174 	movhi	r2,5
   171b4:	10a1ec04 	addi	r2,r2,-30800
   171b8:	11400215 	stw	r5,8(r2)
   171bc:	18c0004c 	andi	r3,r3,1
   171c0:	e0c6b03a 	or	r3,fp,r3
   171c4:	b8c00115 	stw	r3,4(r23)
   171c8:	001a4e80 	call	1a4e8 <__malloc_unlock>
   171cc:	003eeb06 	br	16d7c <_realloc_r+0xd8>
   171d0:	20800117 	ldw	r2,4(r4)
   171d4:	00ffff04 	movi	r3,-4
   171d8:	800f883a 	mov	r7,r16
   171dc:	10c4703a 	and	r2,r2,r3
   171e0:	98a9883a 	add	r20,r19,r2
   171e4:	84000204 	addi	r16,r16,8
   171e8:	003ecf06 	br	16d28 <_realloc_r+0x84>
   171ec:	900b883a 	mov	r5,r18
   171f0:	8009883a 	mov	r4,r16
   171f4:	0015b380 	call	15b38 <memmove>
   171f8:	dd000017 	ldw	r20,0(sp)
   171fc:	b80f883a 	mov	r7,r23
   17200:	003ec906 	br	16d28 <_realloc_r+0x84>
   17204:	900b883a 	mov	r5,r18
   17208:	8009883a 	mov	r4,r16
   1720c:	0015b380 	call	15b38 <memmove>
   17210:	b80f883a 	mov	r7,r23
   17214:	003ec406 	br	16d28 <_realloc_r+0x84>
   17218:	90c00417 	ldw	r3,16(r18)
   1721c:	89400604 	addi	r5,r17,24
   17220:	91000604 	addi	r4,r18,24
   17224:	88c00415 	stw	r3,16(r17)
   17228:	90800517 	ldw	r2,20(r18)
   1722c:	88800515 	stw	r2,20(r17)
   17230:	003f6806 	br	16fd4 <_realloc_r+0x330>
   17234:	900b883a 	mov	r5,r18
   17238:	8809883a 	mov	r4,r17
   1723c:	0015b380 	call	15b38 <memmove>
   17240:	003fd406 	br	17194 <_realloc_r+0x4f0>
   17244:	90c00417 	ldw	r3,16(r18)
   17248:	91000604 	addi	r4,r18,24
   1724c:	ba000804 	addi	r8,r23,32
   17250:	b8c00615 	stw	r3,24(r23)
   17254:	90800517 	ldw	r2,20(r18)
   17258:	b8800715 	stw	r2,28(r23)
   1725c:	003f1206 	br	16ea8 <_realloc_r+0x204>
   17260:	90c00417 	ldw	r3,16(r18)
   17264:	91000604 	addi	r4,r18,24
   17268:	ba000804 	addi	r8,r23,32
   1726c:	b8c00615 	stw	r3,24(r23)
   17270:	90800517 	ldw	r2,20(r18)
   17274:	b8800715 	stw	r2,28(r23)
   17278:	003f3206 	br	16f44 <_realloc_r+0x2a0>
   1727c:	90c00417 	ldw	r3,16(r18)
   17280:	91000604 	addi	r4,r18,24
   17284:	b9c00804 	addi	r7,r23,32
   17288:	b8c00615 	stw	r3,24(r23)
   1728c:	90800517 	ldw	r2,20(r18)
   17290:	b8800715 	stw	r2,28(r23)
   17294:	003fb906 	br	1717c <_realloc_r+0x4d8>

00017298 <__isinfd>:
   17298:	200d883a 	mov	r6,r4
   1729c:	0109c83a 	sub	r4,zero,r4
   172a0:	2188b03a 	or	r4,r4,r6
   172a4:	2008d7fa 	srli	r4,r4,31
   172a8:	00a00034 	movhi	r2,32768
   172ac:	10bfffc4 	addi	r2,r2,-1
   172b0:	1144703a 	and	r2,r2,r5
   172b4:	2088b03a 	or	r4,r4,r2
   172b8:	009ffc34 	movhi	r2,32752
   172bc:	1105c83a 	sub	r2,r2,r4
   172c0:	0087c83a 	sub	r3,zero,r2
   172c4:	10c4b03a 	or	r2,r2,r3
   172c8:	1004d7fa 	srli	r2,r2,31
   172cc:	00c00044 	movi	r3,1
   172d0:	1885c83a 	sub	r2,r3,r2
   172d4:	f800283a 	ret

000172d8 <__isnand>:
   172d8:	200d883a 	mov	r6,r4
   172dc:	0109c83a 	sub	r4,zero,r4
   172e0:	2188b03a 	or	r4,r4,r6
   172e4:	2008d7fa 	srli	r4,r4,31
   172e8:	00a00034 	movhi	r2,32768
   172ec:	10bfffc4 	addi	r2,r2,-1
   172f0:	1144703a 	and	r2,r2,r5
   172f4:	2088b03a 	or	r4,r4,r2
   172f8:	009ffc34 	movhi	r2,32752
   172fc:	1105c83a 	sub	r2,r2,r4
   17300:	1004d7fa 	srli	r2,r2,31
   17304:	f800283a 	ret

00017308 <_sbrk_r>:
   17308:	defffd04 	addi	sp,sp,-12
   1730c:	dc000015 	stw	r16,0(sp)
   17310:	04000174 	movhi	r16,5
   17314:	84278b04 	addi	r16,r16,-25044
   17318:	dc400115 	stw	r17,4(sp)
   1731c:	80000015 	stw	zero,0(r16)
   17320:	2023883a 	mov	r17,r4
   17324:	2809883a 	mov	r4,r5
   17328:	dfc00215 	stw	ra,8(sp)
   1732c:	001a6e80 	call	1a6e8 <sbrk>
   17330:	1007883a 	mov	r3,r2
   17334:	00bfffc4 	movi	r2,-1
   17338:	18800626 	beq	r3,r2,17354 <_sbrk_r+0x4c>
   1733c:	1805883a 	mov	r2,r3
   17340:	dfc00217 	ldw	ra,8(sp)
   17344:	dc400117 	ldw	r17,4(sp)
   17348:	dc000017 	ldw	r16,0(sp)
   1734c:	dec00304 	addi	sp,sp,12
   17350:	f800283a 	ret
   17354:	80800017 	ldw	r2,0(r16)
   17358:	103ff826 	beq	r2,zero,1733c <_sbrk_r+0x34>
   1735c:	88800015 	stw	r2,0(r17)
   17360:	1805883a 	mov	r2,r3
   17364:	dfc00217 	ldw	ra,8(sp)
   17368:	dc400117 	ldw	r17,4(sp)
   1736c:	dc000017 	ldw	r16,0(sp)
   17370:	dec00304 	addi	sp,sp,12
   17374:	f800283a 	ret

00017378 <__sclose>:
   17378:	2940038f 	ldh	r5,14(r5)
   1737c:	00176ac1 	jmpi	176ac <_close_r>

00017380 <__sseek>:
   17380:	defffe04 	addi	sp,sp,-8
   17384:	dc000015 	stw	r16,0(sp)
   17388:	2821883a 	mov	r16,r5
   1738c:	2940038f 	ldh	r5,14(r5)
   17390:	dfc00115 	stw	ra,4(sp)
   17394:	00179240 	call	17924 <_lseek_r>
   17398:	1007883a 	mov	r3,r2
   1739c:	00bfffc4 	movi	r2,-1
   173a0:	18800926 	beq	r3,r2,173c8 <__sseek+0x48>
   173a4:	8080030b 	ldhu	r2,12(r16)
   173a8:	80c01415 	stw	r3,80(r16)
   173ac:	10840014 	ori	r2,r2,4096
   173b0:	8080030d 	sth	r2,12(r16)
   173b4:	1805883a 	mov	r2,r3
   173b8:	dfc00117 	ldw	ra,4(sp)
   173bc:	dc000017 	ldw	r16,0(sp)
   173c0:	dec00204 	addi	sp,sp,8
   173c4:	f800283a 	ret
   173c8:	8080030b 	ldhu	r2,12(r16)
   173cc:	10bbffcc 	andi	r2,r2,61439
   173d0:	8080030d 	sth	r2,12(r16)
   173d4:	1805883a 	mov	r2,r3
   173d8:	dfc00117 	ldw	ra,4(sp)
   173dc:	dc000017 	ldw	r16,0(sp)
   173e0:	dec00204 	addi	sp,sp,8
   173e4:	f800283a 	ret

000173e8 <__swrite>:
   173e8:	2880030b 	ldhu	r2,12(r5)
   173ec:	defffb04 	addi	sp,sp,-20
   173f0:	dcc00315 	stw	r19,12(sp)
   173f4:	1080400c 	andi	r2,r2,256
   173f8:	dc800215 	stw	r18,8(sp)
   173fc:	dc400115 	stw	r17,4(sp)
   17400:	dc000015 	stw	r16,0(sp)
   17404:	3027883a 	mov	r19,r6
   17408:	3825883a 	mov	r18,r7
   1740c:	dfc00415 	stw	ra,16(sp)
   17410:	2821883a 	mov	r16,r5
   17414:	000d883a 	mov	r6,zero
   17418:	01c00084 	movi	r7,2
   1741c:	2023883a 	mov	r17,r4
   17420:	10000226 	beq	r2,zero,1742c <__swrite+0x44>
   17424:	2940038f 	ldh	r5,14(r5)
   17428:	00179240 	call	17924 <_lseek_r>
   1742c:	8080030b 	ldhu	r2,12(r16)
   17430:	8140038f 	ldh	r5,14(r16)
   17434:	8809883a 	mov	r4,r17
   17438:	10bbffcc 	andi	r2,r2,61439
   1743c:	980d883a 	mov	r6,r19
   17440:	900f883a 	mov	r7,r18
   17444:	8080030d 	sth	r2,12(r16)
   17448:	dfc00417 	ldw	ra,16(sp)
   1744c:	dcc00317 	ldw	r19,12(sp)
   17450:	dc800217 	ldw	r18,8(sp)
   17454:	dc400117 	ldw	r17,4(sp)
   17458:	dc000017 	ldw	r16,0(sp)
   1745c:	dec00504 	addi	sp,sp,20
   17460:	00175801 	jmpi	17580 <_write_r>

00017464 <__sread>:
   17464:	defffe04 	addi	sp,sp,-8
   17468:	dc000015 	stw	r16,0(sp)
   1746c:	2821883a 	mov	r16,r5
   17470:	2940038f 	ldh	r5,14(r5)
   17474:	dfc00115 	stw	ra,4(sp)
   17478:	001799c0 	call	1799c <_read_r>
   1747c:	1007883a 	mov	r3,r2
   17480:	10000816 	blt	r2,zero,174a4 <__sread+0x40>
   17484:	80801417 	ldw	r2,80(r16)
   17488:	10c5883a 	add	r2,r2,r3
   1748c:	80801415 	stw	r2,80(r16)
   17490:	1805883a 	mov	r2,r3
   17494:	dfc00117 	ldw	ra,4(sp)
   17498:	dc000017 	ldw	r16,0(sp)
   1749c:	dec00204 	addi	sp,sp,8
   174a0:	f800283a 	ret
   174a4:	8080030b 	ldhu	r2,12(r16)
   174a8:	10bbffcc 	andi	r2,r2,61439
   174ac:	8080030d 	sth	r2,12(r16)
   174b0:	1805883a 	mov	r2,r3
   174b4:	dfc00117 	ldw	ra,4(sp)
   174b8:	dc000017 	ldw	r16,0(sp)
   174bc:	dec00204 	addi	sp,sp,8
   174c0:	f800283a 	ret

000174c4 <strcmp>:
   174c4:	2144b03a 	or	r2,r4,r5
   174c8:	108000cc 	andi	r2,r2,3
   174cc:	10001d1e 	bne	r2,zero,17544 <strcmp+0x80>
   174d0:	200f883a 	mov	r7,r4
   174d4:	28800017 	ldw	r2,0(r5)
   174d8:	21000017 	ldw	r4,0(r4)
   174dc:	280d883a 	mov	r6,r5
   174e0:	2080161e 	bne	r4,r2,1753c <strcmp+0x78>
   174e4:	023fbff4 	movhi	r8,65279
   174e8:	423fbfc4 	addi	r8,r8,-257
   174ec:	2207883a 	add	r3,r4,r8
   174f0:	01602074 	movhi	r5,32897
   174f4:	29602004 	addi	r5,r5,-32640
   174f8:	1946703a 	and	r3,r3,r5
   174fc:	0104303a 	nor	r2,zero,r4
   17500:	10c4703a 	and	r2,r2,r3
   17504:	10001c1e 	bne	r2,zero,17578 <strcmp+0xb4>
   17508:	4013883a 	mov	r9,r8
   1750c:	2811883a 	mov	r8,r5
   17510:	00000106 	br	17518 <strcmp+0x54>
   17514:	1800181e 	bne	r3,zero,17578 <strcmp+0xb4>
   17518:	39c00104 	addi	r7,r7,4
   1751c:	39000017 	ldw	r4,0(r7)
   17520:	31800104 	addi	r6,r6,4
   17524:	31400017 	ldw	r5,0(r6)
   17528:	2245883a 	add	r2,r4,r9
   1752c:	1204703a 	and	r2,r2,r8
   17530:	0106303a 	nor	r3,zero,r4
   17534:	1886703a 	and	r3,r3,r2
   17538:	217ff626 	beq	r4,r5,17514 <strcmp+0x50>
   1753c:	3809883a 	mov	r4,r7
   17540:	300b883a 	mov	r5,r6
   17544:	20c00007 	ldb	r3,0(r4)
   17548:	1800051e 	bne	r3,zero,17560 <strcmp+0x9c>
   1754c:	00000606 	br	17568 <strcmp+0xa4>
   17550:	21000044 	addi	r4,r4,1
   17554:	20c00007 	ldb	r3,0(r4)
   17558:	29400044 	addi	r5,r5,1
   1755c:	18000226 	beq	r3,zero,17568 <strcmp+0xa4>
   17560:	28800007 	ldb	r2,0(r5)
   17564:	18bffa26 	beq	r3,r2,17550 <strcmp+0x8c>
   17568:	20c00003 	ldbu	r3,0(r4)
   1756c:	28800003 	ldbu	r2,0(r5)
   17570:	1885c83a 	sub	r2,r3,r2
   17574:	f800283a 	ret
   17578:	0005883a 	mov	r2,zero
   1757c:	f800283a 	ret

00017580 <_write_r>:
   17580:	defffd04 	addi	sp,sp,-12
   17584:	dc000015 	stw	r16,0(sp)
   17588:	04000174 	movhi	r16,5
   1758c:	84278b04 	addi	r16,r16,-25044
   17590:	dc400115 	stw	r17,4(sp)
   17594:	80000015 	stw	zero,0(r16)
   17598:	2023883a 	mov	r17,r4
   1759c:	2809883a 	mov	r4,r5
   175a0:	300b883a 	mov	r5,r6
   175a4:	380d883a 	mov	r6,r7
   175a8:	dfc00215 	stw	ra,8(sp)
   175ac:	001a7a40 	call	1a7a4 <write>
   175b0:	1007883a 	mov	r3,r2
   175b4:	00bfffc4 	movi	r2,-1
   175b8:	18800626 	beq	r3,r2,175d4 <_write_r+0x54>
   175bc:	1805883a 	mov	r2,r3
   175c0:	dfc00217 	ldw	ra,8(sp)
   175c4:	dc400117 	ldw	r17,4(sp)
   175c8:	dc000017 	ldw	r16,0(sp)
   175cc:	dec00304 	addi	sp,sp,12
   175d0:	f800283a 	ret
   175d4:	80800017 	ldw	r2,0(r16)
   175d8:	103ff826 	beq	r2,zero,175bc <_write_r+0x3c>
   175dc:	88800015 	stw	r2,0(r17)
   175e0:	1805883a 	mov	r2,r3
   175e4:	dfc00217 	ldw	ra,8(sp)
   175e8:	dc400117 	ldw	r17,4(sp)
   175ec:	dc000017 	ldw	r16,0(sp)
   175f0:	dec00304 	addi	sp,sp,12
   175f4:	f800283a 	ret

000175f8 <_calloc_r>:
   175f8:	298b383a 	mul	r5,r5,r6
   175fc:	defffe04 	addi	sp,sp,-8
   17600:	dc000015 	stw	r16,0(sp)
   17604:	dfc00115 	stw	ra,4(sp)
   17608:	00152740 	call	15274 <_malloc_r>
   1760c:	1021883a 	mov	r16,r2
   17610:	01c00904 	movi	r7,36
   17614:	10000d26 	beq	r2,zero,1764c <_calloc_r+0x54>
   17618:	10ffff17 	ldw	r3,-4(r2)
   1761c:	1009883a 	mov	r4,r2
   17620:	00bfff04 	movi	r2,-4
   17624:	1886703a 	and	r3,r3,r2
   17628:	1887883a 	add	r3,r3,r2
   1762c:	180d883a 	mov	r6,r3
   17630:	000b883a 	mov	r5,zero
   17634:	38c01736 	bltu	r7,r3,17694 <_calloc_r+0x9c>
   17638:	008004c4 	movi	r2,19
   1763c:	10c00836 	bltu	r2,r3,17660 <_calloc_r+0x68>
   17640:	20000215 	stw	zero,8(r4)
   17644:	20000015 	stw	zero,0(r4)
   17648:	20000115 	stw	zero,4(r4)
   1764c:	8005883a 	mov	r2,r16
   17650:	dfc00117 	ldw	ra,4(sp)
   17654:	dc000017 	ldw	r16,0(sp)
   17658:	dec00204 	addi	sp,sp,8
   1765c:	f800283a 	ret
   17660:	008006c4 	movi	r2,27
   17664:	80000015 	stw	zero,0(r16)
   17668:	80000115 	stw	zero,4(r16)
   1766c:	81000204 	addi	r4,r16,8
   17670:	10fff32e 	bgeu	r2,r3,17640 <_calloc_r+0x48>
   17674:	80000215 	stw	zero,8(r16)
   17678:	80000315 	stw	zero,12(r16)
   1767c:	81000404 	addi	r4,r16,16
   17680:	19ffef1e 	bne	r3,r7,17640 <_calloc_r+0x48>
   17684:	81000604 	addi	r4,r16,24
   17688:	80000415 	stw	zero,16(r16)
   1768c:	80000515 	stw	zero,20(r16)
   17690:	003feb06 	br	17640 <_calloc_r+0x48>
   17694:	0015c180 	call	15c18 <memset>
   17698:	8005883a 	mov	r2,r16
   1769c:	dfc00117 	ldw	ra,4(sp)
   176a0:	dc000017 	ldw	r16,0(sp)
   176a4:	dec00204 	addi	sp,sp,8
   176a8:	f800283a 	ret

000176ac <_close_r>:
   176ac:	defffd04 	addi	sp,sp,-12
   176b0:	dc000015 	stw	r16,0(sp)
   176b4:	04000174 	movhi	r16,5
   176b8:	84278b04 	addi	r16,r16,-25044
   176bc:	dc400115 	stw	r17,4(sp)
   176c0:	80000015 	stw	zero,0(r16)
   176c4:	2023883a 	mov	r17,r4
   176c8:	2809883a 	mov	r4,r5
   176cc:	dfc00215 	stw	ra,8(sp)
   176d0:	0019e440 	call	19e44 <close>
   176d4:	1007883a 	mov	r3,r2
   176d8:	00bfffc4 	movi	r2,-1
   176dc:	18800626 	beq	r3,r2,176f8 <_close_r+0x4c>
   176e0:	1805883a 	mov	r2,r3
   176e4:	dfc00217 	ldw	ra,8(sp)
   176e8:	dc400117 	ldw	r17,4(sp)
   176ec:	dc000017 	ldw	r16,0(sp)
   176f0:	dec00304 	addi	sp,sp,12
   176f4:	f800283a 	ret
   176f8:	80800017 	ldw	r2,0(r16)
   176fc:	103ff826 	beq	r2,zero,176e0 <_close_r+0x34>
   17700:	88800015 	stw	r2,0(r17)
   17704:	1805883a 	mov	r2,r3
   17708:	dfc00217 	ldw	ra,8(sp)
   1770c:	dc400117 	ldw	r17,4(sp)
   17710:	dc000017 	ldw	r16,0(sp)
   17714:	dec00304 	addi	sp,sp,12
   17718:	f800283a 	ret

0001771c <_fclose_r>:
   1771c:	defffc04 	addi	sp,sp,-16
   17720:	dc400115 	stw	r17,4(sp)
   17724:	dc000015 	stw	r16,0(sp)
   17728:	dfc00315 	stw	ra,12(sp)
   1772c:	dc800215 	stw	r18,8(sp)
   17730:	2821883a 	mov	r16,r5
   17734:	2023883a 	mov	r17,r4
   17738:	28002926 	beq	r5,zero,177e0 <_fclose_r+0xc4>
   1773c:	00143580 	call	14358 <__sfp_lock_acquire>
   17740:	88000226 	beq	r17,zero,1774c <_fclose_r+0x30>
   17744:	88800e17 	ldw	r2,56(r17)
   17748:	10002d26 	beq	r2,zero,17800 <_fclose_r+0xe4>
   1774c:	8080030f 	ldh	r2,12(r16)
   17750:	10002226 	beq	r2,zero,177dc <_fclose_r+0xc0>
   17754:	8809883a 	mov	r4,r17
   17758:	800b883a 	mov	r5,r16
   1775c:	00140d00 	call	140d0 <_fflush_r>
   17760:	1025883a 	mov	r18,r2
   17764:	80800b17 	ldw	r2,44(r16)
   17768:	10000426 	beq	r2,zero,1777c <_fclose_r+0x60>
   1776c:	81400717 	ldw	r5,28(r16)
   17770:	8809883a 	mov	r4,r17
   17774:	103ee83a 	callr	r2
   17778:	10002a16 	blt	r2,zero,17824 <_fclose_r+0x108>
   1777c:	8080030b 	ldhu	r2,12(r16)
   17780:	1080200c 	andi	r2,r2,128
   17784:	1000231e 	bne	r2,zero,17814 <_fclose_r+0xf8>
   17788:	81400c17 	ldw	r5,48(r16)
   1778c:	28000526 	beq	r5,zero,177a4 <_fclose_r+0x88>
   17790:	80801004 	addi	r2,r16,64
   17794:	28800226 	beq	r5,r2,177a0 <_fclose_r+0x84>
   17798:	8809883a 	mov	r4,r17
   1779c:	00146ec0 	call	146ec <_free_r>
   177a0:	80000c15 	stw	zero,48(r16)
   177a4:	81401117 	ldw	r5,68(r16)
   177a8:	28000326 	beq	r5,zero,177b8 <_fclose_r+0x9c>
   177ac:	8809883a 	mov	r4,r17
   177b0:	00146ec0 	call	146ec <_free_r>
   177b4:	80001115 	stw	zero,68(r16)
   177b8:	8000030d 	sth	zero,12(r16)
   177bc:	001435c0 	call	1435c <__sfp_lock_release>
   177c0:	9005883a 	mov	r2,r18
   177c4:	dfc00317 	ldw	ra,12(sp)
   177c8:	dc800217 	ldw	r18,8(sp)
   177cc:	dc400117 	ldw	r17,4(sp)
   177d0:	dc000017 	ldw	r16,0(sp)
   177d4:	dec00404 	addi	sp,sp,16
   177d8:	f800283a 	ret
   177dc:	001435c0 	call	1435c <__sfp_lock_release>
   177e0:	0025883a 	mov	r18,zero
   177e4:	9005883a 	mov	r2,r18
   177e8:	dfc00317 	ldw	ra,12(sp)
   177ec:	dc800217 	ldw	r18,8(sp)
   177f0:	dc400117 	ldw	r17,4(sp)
   177f4:	dc000017 	ldw	r16,0(sp)
   177f8:	dec00404 	addi	sp,sp,16
   177fc:	f800283a 	ret
   17800:	8809883a 	mov	r4,r17
   17804:	00143680 	call	14368 <__sinit>
   17808:	8080030f 	ldh	r2,12(r16)
   1780c:	103fd11e 	bne	r2,zero,17754 <_fclose_r+0x38>
   17810:	003ff206 	br	177dc <_fclose_r+0xc0>
   17814:	81400417 	ldw	r5,16(r16)
   17818:	8809883a 	mov	r4,r17
   1781c:	00146ec0 	call	146ec <_free_r>
   17820:	003fd906 	br	17788 <_fclose_r+0x6c>
   17824:	04bfffc4 	movi	r18,-1
   17828:	003fd406 	br	1777c <_fclose_r+0x60>

0001782c <fclose>:
   1782c:	00800174 	movhi	r2,5
   17830:	10a77004 	addi	r2,r2,-25152
   17834:	200b883a 	mov	r5,r4
   17838:	11000017 	ldw	r4,0(r2)
   1783c:	001771c1 	jmpi	1771c <_fclose_r>

00017840 <_fstat_r>:
   17840:	defffd04 	addi	sp,sp,-12
   17844:	dc000015 	stw	r16,0(sp)
   17848:	04000174 	movhi	r16,5
   1784c:	84278b04 	addi	r16,r16,-25044
   17850:	dc400115 	stw	r17,4(sp)
   17854:	80000015 	stw	zero,0(r16)
   17858:	2023883a 	mov	r17,r4
   1785c:	2809883a 	mov	r4,r5
   17860:	300b883a 	mov	r5,r6
   17864:	dfc00215 	stw	ra,8(sp)
   17868:	0019fcc0 	call	19fcc <fstat>
   1786c:	1007883a 	mov	r3,r2
   17870:	00bfffc4 	movi	r2,-1
   17874:	18800626 	beq	r3,r2,17890 <_fstat_r+0x50>
   17878:	1805883a 	mov	r2,r3
   1787c:	dfc00217 	ldw	ra,8(sp)
   17880:	dc400117 	ldw	r17,4(sp)
   17884:	dc000017 	ldw	r16,0(sp)
   17888:	dec00304 	addi	sp,sp,12
   1788c:	f800283a 	ret
   17890:	80800017 	ldw	r2,0(r16)
   17894:	103ff826 	beq	r2,zero,17878 <_fstat_r+0x38>
   17898:	88800015 	stw	r2,0(r17)
   1789c:	1805883a 	mov	r2,r3
   178a0:	dfc00217 	ldw	ra,8(sp)
   178a4:	dc400117 	ldw	r17,4(sp)
   178a8:	dc000017 	ldw	r16,0(sp)
   178ac:	dec00304 	addi	sp,sp,12
   178b0:	f800283a 	ret

000178b4 <_isatty_r>:
   178b4:	defffd04 	addi	sp,sp,-12
   178b8:	dc000015 	stw	r16,0(sp)
   178bc:	04000174 	movhi	r16,5
   178c0:	84278b04 	addi	r16,r16,-25044
   178c4:	dc400115 	stw	r17,4(sp)
   178c8:	80000015 	stw	zero,0(r16)
   178cc:	2023883a 	mov	r17,r4
   178d0:	2809883a 	mov	r4,r5
   178d4:	dfc00215 	stw	ra,8(sp)
   178d8:	001a1000 	call	1a100 <isatty>
   178dc:	1007883a 	mov	r3,r2
   178e0:	00bfffc4 	movi	r2,-1
   178e4:	18800626 	beq	r3,r2,17900 <_isatty_r+0x4c>
   178e8:	1805883a 	mov	r2,r3
   178ec:	dfc00217 	ldw	ra,8(sp)
   178f0:	dc400117 	ldw	r17,4(sp)
   178f4:	dc000017 	ldw	r16,0(sp)
   178f8:	dec00304 	addi	sp,sp,12
   178fc:	f800283a 	ret
   17900:	80800017 	ldw	r2,0(r16)
   17904:	103ff826 	beq	r2,zero,178e8 <_isatty_r+0x34>
   17908:	88800015 	stw	r2,0(r17)
   1790c:	1805883a 	mov	r2,r3
   17910:	dfc00217 	ldw	ra,8(sp)
   17914:	dc400117 	ldw	r17,4(sp)
   17918:	dc000017 	ldw	r16,0(sp)
   1791c:	dec00304 	addi	sp,sp,12
   17920:	f800283a 	ret

00017924 <_lseek_r>:
   17924:	defffd04 	addi	sp,sp,-12
   17928:	dc000015 	stw	r16,0(sp)
   1792c:	04000174 	movhi	r16,5
   17930:	84278b04 	addi	r16,r16,-25044
   17934:	dc400115 	stw	r17,4(sp)
   17938:	80000015 	stw	zero,0(r16)
   1793c:	2023883a 	mov	r17,r4
   17940:	2809883a 	mov	r4,r5
   17944:	300b883a 	mov	r5,r6
   17948:	380d883a 	mov	r6,r7
   1794c:	dfc00215 	stw	ra,8(sp)
   17950:	001a30c0 	call	1a30c <lseek>
   17954:	1007883a 	mov	r3,r2
   17958:	00bfffc4 	movi	r2,-1
   1795c:	18800626 	beq	r3,r2,17978 <_lseek_r+0x54>
   17960:	1805883a 	mov	r2,r3
   17964:	dfc00217 	ldw	ra,8(sp)
   17968:	dc400117 	ldw	r17,4(sp)
   1796c:	dc000017 	ldw	r16,0(sp)
   17970:	dec00304 	addi	sp,sp,12
   17974:	f800283a 	ret
   17978:	80800017 	ldw	r2,0(r16)
   1797c:	103ff826 	beq	r2,zero,17960 <_lseek_r+0x3c>
   17980:	88800015 	stw	r2,0(r17)
   17984:	1805883a 	mov	r2,r3
   17988:	dfc00217 	ldw	ra,8(sp)
   1798c:	dc400117 	ldw	r17,4(sp)
   17990:	dc000017 	ldw	r16,0(sp)
   17994:	dec00304 	addi	sp,sp,12
   17998:	f800283a 	ret

0001799c <_read_r>:
   1799c:	defffd04 	addi	sp,sp,-12
   179a0:	dc000015 	stw	r16,0(sp)
   179a4:	04000174 	movhi	r16,5
   179a8:	84278b04 	addi	r16,r16,-25044
   179ac:	dc400115 	stw	r17,4(sp)
   179b0:	80000015 	stw	zero,0(r16)
   179b4:	2023883a 	mov	r17,r4
   179b8:	2809883a 	mov	r4,r5
   179bc:	300b883a 	mov	r5,r6
   179c0:	380d883a 	mov	r6,r7
   179c4:	dfc00215 	stw	ra,8(sp)
   179c8:	001a5080 	call	1a508 <read>
   179cc:	1007883a 	mov	r3,r2
   179d0:	00bfffc4 	movi	r2,-1
   179d4:	18800626 	beq	r3,r2,179f0 <_read_r+0x54>
   179d8:	1805883a 	mov	r2,r3
   179dc:	dfc00217 	ldw	ra,8(sp)
   179e0:	dc400117 	ldw	r17,4(sp)
   179e4:	dc000017 	ldw	r16,0(sp)
   179e8:	dec00304 	addi	sp,sp,12
   179ec:	f800283a 	ret
   179f0:	80800017 	ldw	r2,0(r16)
   179f4:	103ff826 	beq	r2,zero,179d8 <_read_r+0x3c>
   179f8:	88800015 	stw	r2,0(r17)
   179fc:	1805883a 	mov	r2,r3
   17a00:	dfc00217 	ldw	ra,8(sp)
   17a04:	dc400117 	ldw	r17,4(sp)
   17a08:	dc000017 	ldw	r16,0(sp)
   17a0c:	dec00304 	addi	sp,sp,12
   17a10:	f800283a 	ret

00017a14 <__udivdi3>:
   17a14:	defff004 	addi	sp,sp,-64
   17a18:	2005883a 	mov	r2,r4
   17a1c:	3011883a 	mov	r8,r6
   17a20:	df000e15 	stw	fp,56(sp)
   17a24:	dd000a15 	stw	r20,40(sp)
   17a28:	dc000615 	stw	r16,24(sp)
   17a2c:	dfc00f15 	stw	ra,60(sp)
   17a30:	ddc00d15 	stw	r23,52(sp)
   17a34:	dd800c15 	stw	r22,48(sp)
   17a38:	dd400b15 	stw	r21,44(sp)
   17a3c:	dcc00915 	stw	r19,36(sp)
   17a40:	dc800815 	stw	r18,32(sp)
   17a44:	dc400715 	stw	r17,28(sp)
   17a48:	4021883a 	mov	r16,r8
   17a4c:	1039883a 	mov	fp,r2
   17a50:	2829883a 	mov	r20,r5
   17a54:	38003b1e 	bne	r7,zero,17b44 <__udivdi3+0x130>
   17a58:	2a005c36 	bltu	r5,r8,17bcc <__udivdi3+0x1b8>
   17a5c:	4000a626 	beq	r8,zero,17cf8 <__udivdi3+0x2e4>
   17a60:	00bfffd4 	movui	r2,65535
   17a64:	14009e36 	bltu	r2,r16,17ce0 <__udivdi3+0x2cc>
   17a68:	00803fc4 	movi	r2,255
   17a6c:	14013d36 	bltu	r2,r16,17f64 <__udivdi3+0x550>
   17a70:	000b883a 	mov	r5,zero
   17a74:	0005883a 	mov	r2,zero
   17a78:	8084d83a 	srl	r2,r16,r2
   17a7c:	01000174 	movhi	r4,5
   17a80:	21209c04 	addi	r4,r4,-32144
   17a84:	01800804 	movi	r6,32
   17a88:	1105883a 	add	r2,r2,r4
   17a8c:	10c00003 	ldbu	r3,0(r2)
   17a90:	28c7883a 	add	r3,r5,r3
   17a94:	30edc83a 	sub	r22,r6,r3
   17a98:	b000ee1e 	bne	r22,zero,17e54 <__udivdi3+0x440>
   17a9c:	802ad43a 	srli	r21,r16,16
   17aa0:	00800044 	movi	r2,1
   17aa4:	a423c83a 	sub	r17,r20,r16
   17aa8:	85ffffcc 	andi	r23,r16,65535
   17aac:	d8800315 	stw	r2,12(sp)
   17ab0:	8809883a 	mov	r4,r17
   17ab4:	a80b883a 	mov	r5,r21
   17ab8:	00198080 	call	19808 <__udivsi3>
   17abc:	8809883a 	mov	r4,r17
   17ac0:	a80b883a 	mov	r5,r21
   17ac4:	102d883a 	mov	r22,r2
   17ac8:	00198100 	call	19810 <__umodsi3>
   17acc:	1004943a 	slli	r2,r2,16
   17ad0:	e006d43a 	srli	r3,fp,16
   17ad4:	bda3383a 	mul	r17,r23,r22
   17ad8:	10c4b03a 	or	r2,r2,r3
   17adc:	1440042e 	bgeu	r2,r17,17af0 <__udivdi3+0xdc>
   17ae0:	1405883a 	add	r2,r2,r16
   17ae4:	b5bfffc4 	addi	r22,r22,-1
   17ae8:	14000136 	bltu	r2,r16,17af0 <__udivdi3+0xdc>
   17aec:	14413d36 	bltu	r2,r17,17fe4 <__udivdi3+0x5d0>
   17af0:	1463c83a 	sub	r17,r2,r17
   17af4:	8809883a 	mov	r4,r17
   17af8:	a80b883a 	mov	r5,r21
   17afc:	00198080 	call	19808 <__udivsi3>
   17b00:	8809883a 	mov	r4,r17
   17b04:	a80b883a 	mov	r5,r21
   17b08:	1029883a 	mov	r20,r2
   17b0c:	00198100 	call	19810 <__umodsi3>
   17b10:	1004943a 	slli	r2,r2,16
   17b14:	bd09383a 	mul	r4,r23,r20
   17b18:	e0ffffcc 	andi	r3,fp,65535
   17b1c:	10c4b03a 	or	r2,r2,r3
   17b20:	1100042e 	bgeu	r2,r4,17b34 <__udivdi3+0x120>
   17b24:	8085883a 	add	r2,r16,r2
   17b28:	a53fffc4 	addi	r20,r20,-1
   17b2c:	14000136 	bltu	r2,r16,17b34 <__udivdi3+0x120>
   17b30:	11012036 	bltu	r2,r4,17fb4 <__udivdi3+0x5a0>
   17b34:	b004943a 	slli	r2,r22,16
   17b38:	d9000317 	ldw	r4,12(sp)
   17b3c:	a084b03a 	or	r2,r20,r2
   17b40:	00001506 	br	17b98 <__udivdi3+0x184>
   17b44:	380d883a 	mov	r6,r7
   17b48:	29c06236 	bltu	r5,r7,17cd4 <__udivdi3+0x2c0>
   17b4c:	00bfffd4 	movui	r2,65535
   17b50:	11c05a36 	bltu	r2,r7,17cbc <__udivdi3+0x2a8>
   17b54:	00803fc4 	movi	r2,255
   17b58:	11c0fc36 	bltu	r2,r7,17f4c <__udivdi3+0x538>
   17b5c:	000b883a 	mov	r5,zero
   17b60:	0005883a 	mov	r2,zero
   17b64:	3084d83a 	srl	r2,r6,r2
   17b68:	01000174 	movhi	r4,5
   17b6c:	21209c04 	addi	r4,r4,-32144
   17b70:	01c00804 	movi	r7,32
   17b74:	1105883a 	add	r2,r2,r4
   17b78:	10c00003 	ldbu	r3,0(r2)
   17b7c:	28c7883a 	add	r3,r5,r3
   17b80:	38efc83a 	sub	r23,r7,r3
   17b84:	b800691e 	bne	r23,zero,17d2c <__udivdi3+0x318>
   17b88:	35000136 	bltu	r6,r20,17b90 <__udivdi3+0x17c>
   17b8c:	e4005136 	bltu	fp,r16,17cd4 <__udivdi3+0x2c0>
   17b90:	00800044 	movi	r2,1
   17b94:	0009883a 	mov	r4,zero
   17b98:	2007883a 	mov	r3,r4
   17b9c:	dfc00f17 	ldw	ra,60(sp)
   17ba0:	df000e17 	ldw	fp,56(sp)
   17ba4:	ddc00d17 	ldw	r23,52(sp)
   17ba8:	dd800c17 	ldw	r22,48(sp)
   17bac:	dd400b17 	ldw	r21,44(sp)
   17bb0:	dd000a17 	ldw	r20,40(sp)
   17bb4:	dcc00917 	ldw	r19,36(sp)
   17bb8:	dc800817 	ldw	r18,32(sp)
   17bbc:	dc400717 	ldw	r17,28(sp)
   17bc0:	dc000617 	ldw	r16,24(sp)
   17bc4:	dec01004 	addi	sp,sp,64
   17bc8:	f800283a 	ret
   17bcc:	00bfffd4 	movui	r2,65535
   17bd0:	12005036 	bltu	r2,r8,17d14 <__udivdi3+0x300>
   17bd4:	00803fc4 	movi	r2,255
   17bd8:	1200e836 	bltu	r2,r8,17f7c <__udivdi3+0x568>
   17bdc:	000b883a 	mov	r5,zero
   17be0:	0005883a 	mov	r2,zero
   17be4:	8084d83a 	srl	r2,r16,r2
   17be8:	01000174 	movhi	r4,5
   17bec:	21209c04 	addi	r4,r4,-32144
   17bf0:	01800804 	movi	r6,32
   17bf4:	1105883a 	add	r2,r2,r4
   17bf8:	10c00003 	ldbu	r3,0(r2)
   17bfc:	28c7883a 	add	r3,r5,r3
   17c00:	30cbc83a 	sub	r5,r6,r3
   17c04:	28000626 	beq	r5,zero,17c20 <__udivdi3+0x20c>
   17c08:	3145c83a 	sub	r2,r6,r5
   17c0c:	e084d83a 	srl	r2,fp,r2
   17c10:	a146983a 	sll	r3,r20,r5
   17c14:	e178983a 	sll	fp,fp,r5
   17c18:	8160983a 	sll	r16,r16,r5
   17c1c:	18a8b03a 	or	r20,r3,r2
   17c20:	802ad43a 	srli	r21,r16,16
   17c24:	a009883a 	mov	r4,r20
   17c28:	85ffffcc 	andi	r23,r16,65535
   17c2c:	a80b883a 	mov	r5,r21
   17c30:	00198080 	call	19808 <__udivsi3>
   17c34:	a009883a 	mov	r4,r20
   17c38:	a80b883a 	mov	r5,r21
   17c3c:	102d883a 	mov	r22,r2
   17c40:	00198100 	call	19810 <__umodsi3>
   17c44:	1004943a 	slli	r2,r2,16
   17c48:	e006d43a 	srli	r3,fp,16
   17c4c:	bda3383a 	mul	r17,r23,r22
   17c50:	10c4b03a 	or	r2,r2,r3
   17c54:	1440042e 	bgeu	r2,r17,17c68 <__udivdi3+0x254>
   17c58:	1405883a 	add	r2,r2,r16
   17c5c:	b5bfffc4 	addi	r22,r22,-1
   17c60:	14000136 	bltu	r2,r16,17c68 <__udivdi3+0x254>
   17c64:	1440d536 	bltu	r2,r17,17fbc <__udivdi3+0x5a8>
   17c68:	1463c83a 	sub	r17,r2,r17
   17c6c:	8809883a 	mov	r4,r17
   17c70:	a80b883a 	mov	r5,r21
   17c74:	00198080 	call	19808 <__udivsi3>
   17c78:	8809883a 	mov	r4,r17
   17c7c:	a80b883a 	mov	r5,r21
   17c80:	1029883a 	mov	r20,r2
   17c84:	00198100 	call	19810 <__umodsi3>
   17c88:	1004943a 	slli	r2,r2,16
   17c8c:	bd09383a 	mul	r4,r23,r20
   17c90:	e0ffffcc 	andi	r3,fp,65535
   17c94:	10c4b03a 	or	r2,r2,r3
   17c98:	1100042e 	bgeu	r2,r4,17cac <__udivdi3+0x298>
   17c9c:	8085883a 	add	r2,r16,r2
   17ca0:	a53fffc4 	addi	r20,r20,-1
   17ca4:	14000136 	bltu	r2,r16,17cac <__udivdi3+0x298>
   17ca8:	1100c736 	bltu	r2,r4,17fc8 <__udivdi3+0x5b4>
   17cac:	b004943a 	slli	r2,r22,16
   17cb0:	0009883a 	mov	r4,zero
   17cb4:	a084b03a 	or	r2,r20,r2
   17cb8:	003fb706 	br	17b98 <__udivdi3+0x184>
   17cbc:	00804034 	movhi	r2,256
   17cc0:	10bfffc4 	addi	r2,r2,-1
   17cc4:	11c0a436 	bltu	r2,r7,17f58 <__udivdi3+0x544>
   17cc8:	01400404 	movi	r5,16
   17ccc:	2805883a 	mov	r2,r5
   17cd0:	003fa406 	br	17b64 <__udivdi3+0x150>
   17cd4:	0005883a 	mov	r2,zero
   17cd8:	0009883a 	mov	r4,zero
   17cdc:	003fae06 	br	17b98 <__udivdi3+0x184>
   17ce0:	00804034 	movhi	r2,256
   17ce4:	10bfffc4 	addi	r2,r2,-1
   17ce8:	1400a136 	bltu	r2,r16,17f70 <__udivdi3+0x55c>
   17cec:	01400404 	movi	r5,16
   17cf0:	2805883a 	mov	r2,r5
   17cf4:	003f6006 	br	17a78 <__udivdi3+0x64>
   17cf8:	01000044 	movi	r4,1
   17cfc:	000b883a 	mov	r5,zero
   17d00:	00198080 	call	19808 <__udivsi3>
   17d04:	1021883a 	mov	r16,r2
   17d08:	00bfffd4 	movui	r2,65535
   17d0c:	143ff436 	bltu	r2,r16,17ce0 <__udivdi3+0x2cc>
   17d10:	003f5506 	br	17a68 <__udivdi3+0x54>
   17d14:	00804034 	movhi	r2,256
   17d18:	10bfffc4 	addi	r2,r2,-1
   17d1c:	12009a36 	bltu	r2,r8,17f88 <__udivdi3+0x574>
   17d20:	01400404 	movi	r5,16
   17d24:	2805883a 	mov	r2,r5
   17d28:	003fae06 	br	17be4 <__udivdi3+0x1d0>
   17d2c:	3dc5c83a 	sub	r2,r7,r23
   17d30:	35c8983a 	sll	r4,r6,r23
   17d34:	8086d83a 	srl	r3,r16,r2
   17d38:	a0a2d83a 	srl	r17,r20,r2
   17d3c:	e084d83a 	srl	r2,fp,r2
   17d40:	20eab03a 	or	r21,r4,r3
   17d44:	a82cd43a 	srli	r22,r21,16
   17d48:	a5c6983a 	sll	r3,r20,r23
   17d4c:	8809883a 	mov	r4,r17
   17d50:	b00b883a 	mov	r5,r22
   17d54:	1886b03a 	or	r3,r3,r2
   17d58:	d8c00215 	stw	r3,8(sp)
   17d5c:	00198080 	call	19808 <__udivsi3>
   17d60:	8809883a 	mov	r4,r17
   17d64:	b00b883a 	mov	r5,r22
   17d68:	1029883a 	mov	r20,r2
   17d6c:	00198100 	call	19810 <__umodsi3>
   17d70:	a8ffffcc 	andi	r3,r21,65535
   17d74:	d8c00515 	stw	r3,20(sp)
   17d78:	d9000217 	ldw	r4,8(sp)
   17d7c:	d9400517 	ldw	r5,20(sp)
   17d80:	1004943a 	slli	r2,r2,16
   17d84:	2006d43a 	srli	r3,r4,16
   17d88:	85e0983a 	sll	r16,r16,r23
   17d8c:	2d23383a 	mul	r17,r5,r20
   17d90:	10c4b03a 	or	r2,r2,r3
   17d94:	dc000015 	stw	r16,0(sp)
   17d98:	1440032e 	bgeu	r2,r17,17da8 <__udivdi3+0x394>
   17d9c:	1545883a 	add	r2,r2,r21
   17da0:	a53fffc4 	addi	r20,r20,-1
   17da4:	15407f2e 	bgeu	r2,r21,17fa4 <__udivdi3+0x590>
   17da8:	1463c83a 	sub	r17,r2,r17
   17dac:	8809883a 	mov	r4,r17
   17db0:	b00b883a 	mov	r5,r22
   17db4:	00198080 	call	19808 <__udivsi3>
   17db8:	8809883a 	mov	r4,r17
   17dbc:	b00b883a 	mov	r5,r22
   17dc0:	1021883a 	mov	r16,r2
   17dc4:	00198100 	call	19810 <__umodsi3>
   17dc8:	d8c00517 	ldw	r3,20(sp)
   17dcc:	d9000217 	ldw	r4,8(sp)
   17dd0:	1004943a 	slli	r2,r2,16
   17dd4:	1c0f383a 	mul	r7,r3,r16
   17dd8:	20ffffcc 	andi	r3,r4,65535
   17ddc:	10e2b03a 	or	r17,r2,r3
   17de0:	89c0032e 	bgeu	r17,r7,17df0 <__udivdi3+0x3dc>
   17de4:	8d63883a 	add	r17,r17,r21
   17de8:	843fffc4 	addi	r16,r16,-1
   17dec:	8d40692e 	bgeu	r17,r21,17f94 <__udivdi3+0x580>
   17df0:	a008943a 	slli	r4,r20,16
   17df4:	d9400017 	ldw	r5,0(sp)
   17df8:	89e3c83a 	sub	r17,r17,r7
   17dfc:	8110b03a 	or	r8,r16,r4
   17e00:	280cd43a 	srli	r6,r5,16
   17e04:	28ffffcc 	andi	r3,r5,65535
   17e08:	40bfffcc 	andi	r2,r8,65535
   17e0c:	400ad43a 	srli	r5,r8,16
   17e10:	10d3383a 	mul	r9,r2,r3
   17e14:	1185383a 	mul	r2,r2,r6
   17e18:	28c7383a 	mul	r3,r5,r3
   17e1c:	4808d43a 	srli	r4,r9,16
   17e20:	298b383a 	mul	r5,r5,r6
   17e24:	10c5883a 	add	r2,r2,r3
   17e28:	2089883a 	add	r4,r4,r2
   17e2c:	20c0022e 	bgeu	r4,r3,17e38 <__udivdi3+0x424>
   17e30:	00800074 	movhi	r2,1
   17e34:	288b883a 	add	r5,r5,r2
   17e38:	2004d43a 	srli	r2,r4,16
   17e3c:	288b883a 	add	r5,r5,r2
   17e40:	89403f36 	bltu	r17,r5,17f40 <__udivdi3+0x52c>
   17e44:	89403926 	beq	r17,r5,17f2c <__udivdi3+0x518>
   17e48:	4005883a 	mov	r2,r8
   17e4c:	0009883a 	mov	r4,zero
   17e50:	003f5106 	br	17b98 <__udivdi3+0x184>
   17e54:	85a0983a 	sll	r16,r16,r22
   17e58:	3585c83a 	sub	r2,r6,r22
   17e5c:	a0a2d83a 	srl	r17,r20,r2
   17e60:	802ad43a 	srli	r21,r16,16
   17e64:	e084d83a 	srl	r2,fp,r2
   17e68:	a586983a 	sll	r3,r20,r22
   17e6c:	8809883a 	mov	r4,r17
   17e70:	a80b883a 	mov	r5,r21
   17e74:	1886b03a 	or	r3,r3,r2
   17e78:	d8c00115 	stw	r3,4(sp)
   17e7c:	00198080 	call	19808 <__udivsi3>
   17e80:	8809883a 	mov	r4,r17
   17e84:	a80b883a 	mov	r5,r21
   17e88:	d8800415 	stw	r2,16(sp)
   17e8c:	00198100 	call	19810 <__umodsi3>
   17e90:	d9000117 	ldw	r4,4(sp)
   17e94:	d9400417 	ldw	r5,16(sp)
   17e98:	1004943a 	slli	r2,r2,16
   17e9c:	85ffffcc 	andi	r23,r16,65535
   17ea0:	2006d43a 	srli	r3,r4,16
   17ea4:	b963383a 	mul	r17,r23,r5
   17ea8:	10c4b03a 	or	r2,r2,r3
   17eac:	1440042e 	bgeu	r2,r17,17ec0 <__udivdi3+0x4ac>
   17eb0:	297fffc4 	addi	r5,r5,-1
   17eb4:	1405883a 	add	r2,r2,r16
   17eb8:	d9400415 	stw	r5,16(sp)
   17ebc:	1400442e 	bgeu	r2,r16,17fd0 <__udivdi3+0x5bc>
   17ec0:	1463c83a 	sub	r17,r2,r17
   17ec4:	8809883a 	mov	r4,r17
   17ec8:	a80b883a 	mov	r5,r21
   17ecc:	00198080 	call	19808 <__udivsi3>
   17ed0:	8809883a 	mov	r4,r17
   17ed4:	a80b883a 	mov	r5,r21
   17ed8:	1029883a 	mov	r20,r2
   17edc:	00198100 	call	19810 <__umodsi3>
   17ee0:	d9400117 	ldw	r5,4(sp)
   17ee4:	1004943a 	slli	r2,r2,16
   17ee8:	bd09383a 	mul	r4,r23,r20
   17eec:	28ffffcc 	andi	r3,r5,65535
   17ef0:	10c6b03a 	or	r3,r2,r3
   17ef4:	1900062e 	bgeu	r3,r4,17f10 <__udivdi3+0x4fc>
   17ef8:	1c07883a 	add	r3,r3,r16
   17efc:	a53fffc4 	addi	r20,r20,-1
   17f00:	1c000336 	bltu	r3,r16,17f10 <__udivdi3+0x4fc>
   17f04:	1900022e 	bgeu	r3,r4,17f10 <__udivdi3+0x4fc>
   17f08:	a53fffc4 	addi	r20,r20,-1
   17f0c:	1c07883a 	add	r3,r3,r16
   17f10:	d9400417 	ldw	r5,16(sp)
   17f14:	e5b8983a 	sll	fp,fp,r22
   17f18:	1923c83a 	sub	r17,r3,r4
   17f1c:	2804943a 	slli	r2,r5,16
   17f20:	a0a8b03a 	or	r20,r20,r2
   17f24:	dd000315 	stw	r20,12(sp)
   17f28:	003ee106 	br	17ab0 <__udivdi3+0x9c>
   17f2c:	2004943a 	slli	r2,r4,16
   17f30:	e5c8983a 	sll	r4,fp,r23
   17f34:	48ffffcc 	andi	r3,r9,65535
   17f38:	10c5883a 	add	r2,r2,r3
   17f3c:	20bfc22e 	bgeu	r4,r2,17e48 <__udivdi3+0x434>
   17f40:	40bfffc4 	addi	r2,r8,-1
   17f44:	0009883a 	mov	r4,zero
   17f48:	003f1306 	br	17b98 <__udivdi3+0x184>
   17f4c:	01400204 	movi	r5,8
   17f50:	2805883a 	mov	r2,r5
   17f54:	003f0306 	br	17b64 <__udivdi3+0x150>
   17f58:	01400604 	movi	r5,24
   17f5c:	2805883a 	mov	r2,r5
   17f60:	003f0006 	br	17b64 <__udivdi3+0x150>
   17f64:	01400204 	movi	r5,8
   17f68:	2805883a 	mov	r2,r5
   17f6c:	003ec206 	br	17a78 <__udivdi3+0x64>
   17f70:	01400604 	movi	r5,24
   17f74:	2805883a 	mov	r2,r5
   17f78:	003ebf06 	br	17a78 <__udivdi3+0x64>
   17f7c:	01400204 	movi	r5,8
   17f80:	2805883a 	mov	r2,r5
   17f84:	003f1706 	br	17be4 <__udivdi3+0x1d0>
   17f88:	01400604 	movi	r5,24
   17f8c:	2805883a 	mov	r2,r5
   17f90:	003f1406 	br	17be4 <__udivdi3+0x1d0>
   17f94:	89ff962e 	bgeu	r17,r7,17df0 <__udivdi3+0x3dc>
   17f98:	8d63883a 	add	r17,r17,r21
   17f9c:	843fffc4 	addi	r16,r16,-1
   17fa0:	003f9306 	br	17df0 <__udivdi3+0x3dc>
   17fa4:	147f802e 	bgeu	r2,r17,17da8 <__udivdi3+0x394>
   17fa8:	a53fffc4 	addi	r20,r20,-1
   17fac:	1545883a 	add	r2,r2,r21
   17fb0:	003f7d06 	br	17da8 <__udivdi3+0x394>
   17fb4:	a53fffc4 	addi	r20,r20,-1
   17fb8:	003ede06 	br	17b34 <__udivdi3+0x120>
   17fbc:	b5bfffc4 	addi	r22,r22,-1
   17fc0:	1405883a 	add	r2,r2,r16
   17fc4:	003f2806 	br	17c68 <__udivdi3+0x254>
   17fc8:	a53fffc4 	addi	r20,r20,-1
   17fcc:	003f3706 	br	17cac <__udivdi3+0x298>
   17fd0:	147fbb2e 	bgeu	r2,r17,17ec0 <__udivdi3+0x4ac>
   17fd4:	297fffc4 	addi	r5,r5,-1
   17fd8:	1405883a 	add	r2,r2,r16
   17fdc:	d9400415 	stw	r5,16(sp)
   17fe0:	003fb706 	br	17ec0 <__udivdi3+0x4ac>
   17fe4:	b5bfffc4 	addi	r22,r22,-1
   17fe8:	1405883a 	add	r2,r2,r16
   17fec:	003ec006 	br	17af0 <__udivdi3+0xdc>

00017ff0 <__umoddi3>:
   17ff0:	defff104 	addi	sp,sp,-60
   17ff4:	dd800b15 	stw	r22,44(sp)
   17ff8:	dd000915 	stw	r20,36(sp)
   17ffc:	dc000515 	stw	r16,20(sp)
   18000:	dfc00e15 	stw	ra,56(sp)
   18004:	df000d15 	stw	fp,52(sp)
   18008:	ddc00c15 	stw	r23,48(sp)
   1800c:	dd400a15 	stw	r21,40(sp)
   18010:	dcc00815 	stw	r19,32(sp)
   18014:	dc800715 	stw	r18,28(sp)
   18018:	dc400615 	stw	r17,24(sp)
   1801c:	3021883a 	mov	r16,r6
   18020:	202d883a 	mov	r22,r4
   18024:	2829883a 	mov	r20,r5
   18028:	38002b1e 	bne	r7,zero,180d8 <__umoddi3+0xe8>
   1802c:	29805036 	bltu	r5,r6,18170 <__umoddi3+0x180>
   18030:	30008a26 	beq	r6,zero,1825c <__umoddi3+0x26c>
   18034:	00bfffd4 	movui	r2,65535
   18038:	14008236 	bltu	r2,r16,18244 <__umoddi3+0x254>
   1803c:	00803fc4 	movi	r2,255
   18040:	14013636 	bltu	r2,r16,1851c <__umoddi3+0x52c>
   18044:	000b883a 	mov	r5,zero
   18048:	0005883a 	mov	r2,zero
   1804c:	8084d83a 	srl	r2,r16,r2
   18050:	01000174 	movhi	r4,5
   18054:	21209c04 	addi	r4,r4,-32144
   18058:	01800804 	movi	r6,32
   1805c:	1105883a 	add	r2,r2,r4
   18060:	10c00003 	ldbu	r3,0(r2)
   18064:	28c7883a 	add	r3,r5,r3
   18068:	30efc83a 	sub	r23,r6,r3
   1806c:	b800941e 	bne	r23,zero,182c0 <__umoddi3+0x2d0>
   18070:	802ad43a 	srli	r21,r16,16
   18074:	a423c83a 	sub	r17,r20,r16
   18078:	0039883a 	mov	fp,zero
   1807c:	853fffcc 	andi	r20,r16,65535
   18080:	8809883a 	mov	r4,r17
   18084:	a80b883a 	mov	r5,r21
   18088:	00198080 	call	19808 <__udivsi3>
   1808c:	8809883a 	mov	r4,r17
   18090:	a80b883a 	mov	r5,r21
   18094:	a0a3383a 	mul	r17,r20,r2
   18098:	00198100 	call	19810 <__umodsi3>
   1809c:	1004943a 	slli	r2,r2,16
   180a0:	b006d43a 	srli	r3,r22,16
   180a4:	10c4b03a 	or	r2,r2,r3
   180a8:	1440032e 	bgeu	r2,r17,180b8 <__umoddi3+0xc8>
   180ac:	1405883a 	add	r2,r2,r16
   180b0:	14000136 	bltu	r2,r16,180b8 <__umoddi3+0xc8>
   180b4:	14413536 	bltu	r2,r17,1858c <__umoddi3+0x59c>
   180b8:	1463c83a 	sub	r17,r2,r17
   180bc:	8809883a 	mov	r4,r17
   180c0:	a80b883a 	mov	r5,r21
   180c4:	00198080 	call	19808 <__udivsi3>
   180c8:	8809883a 	mov	r4,r17
   180cc:	a0a3383a 	mul	r17,r20,r2
   180d0:	a80b883a 	mov	r5,r21
   180d4:	00004d06 	br	1820c <__umoddi3+0x21c>
   180d8:	380d883a 	mov	r6,r7
   180dc:	29c0102e 	bgeu	r5,r7,18120 <__umoddi3+0x130>
   180e0:	2011883a 	mov	r8,r4
   180e4:	2813883a 	mov	r9,r5
   180e8:	4005883a 	mov	r2,r8
   180ec:	4807883a 	mov	r3,r9
   180f0:	dfc00e17 	ldw	ra,56(sp)
   180f4:	df000d17 	ldw	fp,52(sp)
   180f8:	ddc00c17 	ldw	r23,48(sp)
   180fc:	dd800b17 	ldw	r22,44(sp)
   18100:	dd400a17 	ldw	r21,40(sp)
   18104:	dd000917 	ldw	r20,36(sp)
   18108:	dcc00817 	ldw	r19,32(sp)
   1810c:	dc800717 	ldw	r18,28(sp)
   18110:	dc400617 	ldw	r17,24(sp)
   18114:	dc000517 	ldw	r16,20(sp)
   18118:	dec00f04 	addi	sp,sp,60
   1811c:	f800283a 	ret
   18120:	00bfffd4 	movui	r2,65535
   18124:	11c05a36 	bltu	r2,r7,18290 <__umoddi3+0x2a0>
   18128:	00803fc4 	movi	r2,255
   1812c:	11c0fe36 	bltu	r2,r7,18528 <__umoddi3+0x538>
   18130:	000b883a 	mov	r5,zero
   18134:	0005883a 	mov	r2,zero
   18138:	3084d83a 	srl	r2,r6,r2
   1813c:	01000174 	movhi	r4,5
   18140:	21209c04 	addi	r4,r4,-32144
   18144:	01c00804 	movi	r7,32
   18148:	1105883a 	add	r2,r2,r4
   1814c:	10c00003 	ldbu	r3,0(r2)
   18150:	28c7883a 	add	r3,r5,r3
   18154:	38ebc83a 	sub	r21,r7,r3
   18158:	a800851e 	bne	r21,zero,18370 <__umoddi3+0x380>
   1815c:	35005236 	bltu	r6,r20,182a8 <__umoddi3+0x2b8>
   18160:	b400512e 	bgeu	r22,r16,182a8 <__umoddi3+0x2b8>
   18164:	b011883a 	mov	r8,r22
   18168:	a013883a 	mov	r9,r20
   1816c:	003fde06 	br	180e8 <__umoddi3+0xf8>
   18170:	00bfffd4 	movui	r2,65535
   18174:	11804036 	bltu	r2,r6,18278 <__umoddi3+0x288>
   18178:	00803fc4 	movi	r2,255
   1817c:	1180ed36 	bltu	r2,r6,18534 <__umoddi3+0x544>
   18180:	000b883a 	mov	r5,zero
   18184:	0005883a 	mov	r2,zero
   18188:	8084d83a 	srl	r2,r16,r2
   1818c:	01000174 	movhi	r4,5
   18190:	21209c04 	addi	r4,r4,-32144
   18194:	01800804 	movi	r6,32
   18198:	1105883a 	add	r2,r2,r4
   1819c:	10c00003 	ldbu	r3,0(r2)
   181a0:	28c7883a 	add	r3,r5,r3
   181a4:	30c7c83a 	sub	r3,r6,r3
   181a8:	1800bf1e 	bne	r3,zero,184a8 <__umoddi3+0x4b8>
   181ac:	0039883a 	mov	fp,zero
   181b0:	802ad43a 	srli	r21,r16,16
   181b4:	a009883a 	mov	r4,r20
   181b8:	85ffffcc 	andi	r23,r16,65535
   181bc:	a80b883a 	mov	r5,r21
   181c0:	00198080 	call	19808 <__udivsi3>
   181c4:	a009883a 	mov	r4,r20
   181c8:	a80b883a 	mov	r5,r21
   181cc:	b8a3383a 	mul	r17,r23,r2
   181d0:	00198100 	call	19810 <__umodsi3>
   181d4:	1004943a 	slli	r2,r2,16
   181d8:	b006d43a 	srli	r3,r22,16
   181dc:	10c4b03a 	or	r2,r2,r3
   181e0:	1440032e 	bgeu	r2,r17,181f0 <__umoddi3+0x200>
   181e4:	1405883a 	add	r2,r2,r16
   181e8:	14000136 	bltu	r2,r16,181f0 <__umoddi3+0x200>
   181ec:	1440e536 	bltu	r2,r17,18584 <__umoddi3+0x594>
   181f0:	1463c83a 	sub	r17,r2,r17
   181f4:	8809883a 	mov	r4,r17
   181f8:	a80b883a 	mov	r5,r21
   181fc:	00198080 	call	19808 <__udivsi3>
   18200:	8809883a 	mov	r4,r17
   18204:	b8a3383a 	mul	r17,r23,r2
   18208:	a80b883a 	mov	r5,r21
   1820c:	00198100 	call	19810 <__umodsi3>
   18210:	1004943a 	slli	r2,r2,16
   18214:	b0ffffcc 	andi	r3,r22,65535
   18218:	10c4b03a 	or	r2,r2,r3
   1821c:	1440042e 	bgeu	r2,r17,18230 <__umoddi3+0x240>
   18220:	1405883a 	add	r2,r2,r16
   18224:	14000236 	bltu	r2,r16,18230 <__umoddi3+0x240>
   18228:	1440012e 	bgeu	r2,r17,18230 <__umoddi3+0x240>
   1822c:	1405883a 	add	r2,r2,r16
   18230:	1445c83a 	sub	r2,r2,r17
   18234:	1724d83a 	srl	r18,r2,fp
   18238:	0013883a 	mov	r9,zero
   1823c:	9011883a 	mov	r8,r18
   18240:	003fa906 	br	180e8 <__umoddi3+0xf8>
   18244:	00804034 	movhi	r2,256
   18248:	10bfffc4 	addi	r2,r2,-1
   1824c:	1400b036 	bltu	r2,r16,18510 <__umoddi3+0x520>
   18250:	01400404 	movi	r5,16
   18254:	2805883a 	mov	r2,r5
   18258:	003f7c06 	br	1804c <__umoddi3+0x5c>
   1825c:	01000044 	movi	r4,1
   18260:	000b883a 	mov	r5,zero
   18264:	00198080 	call	19808 <__udivsi3>
   18268:	1021883a 	mov	r16,r2
   1826c:	00bfffd4 	movui	r2,65535
   18270:	143ff436 	bltu	r2,r16,18244 <__umoddi3+0x254>
   18274:	003f7106 	br	1803c <__umoddi3+0x4c>
   18278:	00804034 	movhi	r2,256
   1827c:	10bfffc4 	addi	r2,r2,-1
   18280:	1180af36 	bltu	r2,r6,18540 <__umoddi3+0x550>
   18284:	01400404 	movi	r5,16
   18288:	2805883a 	mov	r2,r5
   1828c:	003fbe06 	br	18188 <__umoddi3+0x198>
   18290:	00804034 	movhi	r2,256
   18294:	10bfffc4 	addi	r2,r2,-1
   18298:	11c0ac36 	bltu	r2,r7,1854c <__umoddi3+0x55c>
   1829c:	01400404 	movi	r5,16
   182a0:	2805883a 	mov	r2,r5
   182a4:	003fa406 	br	18138 <__umoddi3+0x148>
   182a8:	b409c83a 	sub	r4,r22,r16
   182ac:	b105803a 	cmpltu	r2,r22,r4
   182b0:	a187c83a 	sub	r3,r20,r6
   182b4:	18a9c83a 	sub	r20,r3,r2
   182b8:	202d883a 	mov	r22,r4
   182bc:	003fa906 	br	18164 <__umoddi3+0x174>
   182c0:	85e0983a 	sll	r16,r16,r23
   182c4:	35c5c83a 	sub	r2,r6,r23
   182c8:	a0a2d83a 	srl	r17,r20,r2
   182cc:	802ad43a 	srli	r21,r16,16
   182d0:	b084d83a 	srl	r2,r22,r2
   182d4:	a5c6983a 	sll	r3,r20,r23
   182d8:	8809883a 	mov	r4,r17
   182dc:	a80b883a 	mov	r5,r21
   182e0:	1886b03a 	or	r3,r3,r2
   182e4:	d8c00115 	stw	r3,4(sp)
   182e8:	853fffcc 	andi	r20,r16,65535
   182ec:	00198080 	call	19808 <__udivsi3>
   182f0:	8809883a 	mov	r4,r17
   182f4:	a80b883a 	mov	r5,r21
   182f8:	a0a3383a 	mul	r17,r20,r2
   182fc:	00198100 	call	19810 <__umodsi3>
   18300:	d9000117 	ldw	r4,4(sp)
   18304:	1004943a 	slli	r2,r2,16
   18308:	b839883a 	mov	fp,r23
   1830c:	2006d43a 	srli	r3,r4,16
   18310:	10c4b03a 	or	r2,r2,r3
   18314:	1440022e 	bgeu	r2,r17,18320 <__umoddi3+0x330>
   18318:	1405883a 	add	r2,r2,r16
   1831c:	1400962e 	bgeu	r2,r16,18578 <__umoddi3+0x588>
   18320:	1463c83a 	sub	r17,r2,r17
   18324:	8809883a 	mov	r4,r17
   18328:	a80b883a 	mov	r5,r21
   1832c:	00198080 	call	19808 <__udivsi3>
   18330:	8809883a 	mov	r4,r17
   18334:	a80b883a 	mov	r5,r21
   18338:	a0a3383a 	mul	r17,r20,r2
   1833c:	00198100 	call	19810 <__umodsi3>
   18340:	d9400117 	ldw	r5,4(sp)
   18344:	1004943a 	slli	r2,r2,16
   18348:	28ffffcc 	andi	r3,r5,65535
   1834c:	10c4b03a 	or	r2,r2,r3
   18350:	1440042e 	bgeu	r2,r17,18364 <__umoddi3+0x374>
   18354:	1405883a 	add	r2,r2,r16
   18358:	14000236 	bltu	r2,r16,18364 <__umoddi3+0x374>
   1835c:	1440012e 	bgeu	r2,r17,18364 <__umoddi3+0x374>
   18360:	1405883a 	add	r2,r2,r16
   18364:	b5ec983a 	sll	r22,r22,r23
   18368:	1463c83a 	sub	r17,r2,r17
   1836c:	003f4406 	br	18080 <__umoddi3+0x90>
   18370:	3d4fc83a 	sub	r7,r7,r21
   18374:	3546983a 	sll	r3,r6,r21
   18378:	81c4d83a 	srl	r2,r16,r7
   1837c:	a1e2d83a 	srl	r17,r20,r7
   18380:	a54c983a 	sll	r6,r20,r21
   18384:	18aeb03a 	or	r23,r3,r2
   18388:	b828d43a 	srli	r20,r23,16
   1838c:	b1c4d83a 	srl	r2,r22,r7
   18390:	8809883a 	mov	r4,r17
   18394:	a00b883a 	mov	r5,r20
   18398:	308cb03a 	or	r6,r6,r2
   1839c:	d9c00315 	stw	r7,12(sp)
   183a0:	d9800215 	stw	r6,8(sp)
   183a4:	00198080 	call	19808 <__udivsi3>
   183a8:	8809883a 	mov	r4,r17
   183ac:	a00b883a 	mov	r5,r20
   183b0:	1039883a 	mov	fp,r2
   183b4:	00198100 	call	19810 <__umodsi3>
   183b8:	b8ffffcc 	andi	r3,r23,65535
   183bc:	d8c00415 	stw	r3,16(sp)
   183c0:	d9000217 	ldw	r4,8(sp)
   183c4:	d9400417 	ldw	r5,16(sp)
   183c8:	1004943a 	slli	r2,r2,16
   183cc:	2006d43a 	srli	r3,r4,16
   183d0:	8560983a 	sll	r16,r16,r21
   183d4:	2f23383a 	mul	r17,r5,fp
   183d8:	10c4b03a 	or	r2,r2,r3
   183dc:	dc000015 	stw	r16,0(sp)
   183e0:	b56c983a 	sll	r22,r22,r21
   183e4:	1440032e 	bgeu	r2,r17,183f4 <__umoddi3+0x404>
   183e8:	15c5883a 	add	r2,r2,r23
   183ec:	e73fffc4 	addi	fp,fp,-1
   183f0:	15c05d2e 	bgeu	r2,r23,18568 <__umoddi3+0x578>
   183f4:	1463c83a 	sub	r17,r2,r17
   183f8:	8809883a 	mov	r4,r17
   183fc:	a00b883a 	mov	r5,r20
   18400:	00198080 	call	19808 <__udivsi3>
   18404:	8809883a 	mov	r4,r17
   18408:	a00b883a 	mov	r5,r20
   1840c:	1021883a 	mov	r16,r2
   18410:	00198100 	call	19810 <__umodsi3>
   18414:	d8c00417 	ldw	r3,16(sp)
   18418:	d9000217 	ldw	r4,8(sp)
   1841c:	1004943a 	slli	r2,r2,16
   18420:	1c23383a 	mul	r17,r3,r16
   18424:	20ffffcc 	andi	r3,r4,65535
   18428:	10ceb03a 	or	r7,r2,r3
   1842c:	3c40032e 	bgeu	r7,r17,1843c <__umoddi3+0x44c>
   18430:	3dcf883a 	add	r7,r7,r23
   18434:	843fffc4 	addi	r16,r16,-1
   18438:	3dc0472e 	bgeu	r7,r23,18558 <__umoddi3+0x568>
   1843c:	e004943a 	slli	r2,fp,16
   18440:	d9400017 	ldw	r5,0(sp)
   18444:	3c4fc83a 	sub	r7,r7,r17
   18448:	8084b03a 	or	r2,r16,r2
   1844c:	28ffffcc 	andi	r3,r5,65535
   18450:	280cd43a 	srli	r6,r5,16
   18454:	100ad43a 	srli	r5,r2,16
   18458:	10bfffcc 	andi	r2,r2,65535
   1845c:	10d1383a 	mul	r8,r2,r3
   18460:	28c7383a 	mul	r3,r5,r3
   18464:	1185383a 	mul	r2,r2,r6
   18468:	4008d43a 	srli	r4,r8,16
   1846c:	298b383a 	mul	r5,r5,r6
   18470:	10c5883a 	add	r2,r2,r3
   18474:	2089883a 	add	r4,r4,r2
   18478:	20c0022e 	bgeu	r4,r3,18484 <__umoddi3+0x494>
   1847c:	00800074 	movhi	r2,1
   18480:	288b883a 	add	r5,r5,r2
   18484:	2004d43a 	srli	r2,r4,16
   18488:	2008943a 	slli	r4,r4,16
   1848c:	40ffffcc 	andi	r3,r8,65535
   18490:	288b883a 	add	r5,r5,r2
   18494:	20c9883a 	add	r4,r4,r3
   18498:	39400b36 	bltu	r7,r5,184c8 <__umoddi3+0x4d8>
   1849c:	39403d26 	beq	r7,r5,18594 <__umoddi3+0x5a4>
   184a0:	394bc83a 	sub	r5,r7,r5
   184a4:	00000f06 	br	184e4 <__umoddi3+0x4f4>
   184a8:	30c5c83a 	sub	r2,r6,r3
   184ac:	1839883a 	mov	fp,r3
   184b0:	b084d83a 	srl	r2,r22,r2
   184b4:	a0c6983a 	sll	r3,r20,r3
   184b8:	8720983a 	sll	r16,r16,fp
   184bc:	b72c983a 	sll	r22,r22,fp
   184c0:	18a8b03a 	or	r20,r3,r2
   184c4:	003f3a06 	br	181b0 <__umoddi3+0x1c0>
   184c8:	d8c00017 	ldw	r3,0(sp)
   184cc:	20c5c83a 	sub	r2,r4,r3
   184d0:	2089803a 	cmpltu	r4,r4,r2
   184d4:	2dc7c83a 	sub	r3,r5,r23
   184d8:	1907c83a 	sub	r3,r3,r4
   184dc:	38cbc83a 	sub	r5,r7,r3
   184e0:	1009883a 	mov	r4,r2
   184e4:	b105c83a 	sub	r2,r22,r4
   184e8:	b087803a 	cmpltu	r3,r22,r2
   184ec:	28c7c83a 	sub	r3,r5,r3
   184f0:	d9400317 	ldw	r5,12(sp)
   184f4:	1544d83a 	srl	r2,r2,r21
   184f8:	1948983a 	sll	r4,r3,r5
   184fc:	1d46d83a 	srl	r3,r3,r21
   18500:	20a4b03a 	or	r18,r4,r2
   18504:	9011883a 	mov	r8,r18
   18508:	1813883a 	mov	r9,r3
   1850c:	003ef606 	br	180e8 <__umoddi3+0xf8>
   18510:	01400604 	movi	r5,24
   18514:	2805883a 	mov	r2,r5
   18518:	003ecc06 	br	1804c <__umoddi3+0x5c>
   1851c:	01400204 	movi	r5,8
   18520:	2805883a 	mov	r2,r5
   18524:	003ec906 	br	1804c <__umoddi3+0x5c>
   18528:	01400204 	movi	r5,8
   1852c:	2805883a 	mov	r2,r5
   18530:	003f0106 	br	18138 <__umoddi3+0x148>
   18534:	01400204 	movi	r5,8
   18538:	2805883a 	mov	r2,r5
   1853c:	003f1206 	br	18188 <__umoddi3+0x198>
   18540:	01400604 	movi	r5,24
   18544:	2805883a 	mov	r2,r5
   18548:	003f0f06 	br	18188 <__umoddi3+0x198>
   1854c:	01400604 	movi	r5,24
   18550:	2805883a 	mov	r2,r5
   18554:	003ef806 	br	18138 <__umoddi3+0x148>
   18558:	3c7fb82e 	bgeu	r7,r17,1843c <__umoddi3+0x44c>
   1855c:	843fffc4 	addi	r16,r16,-1
   18560:	3dcf883a 	add	r7,r7,r23
   18564:	003fb506 	br	1843c <__umoddi3+0x44c>
   18568:	147fa22e 	bgeu	r2,r17,183f4 <__umoddi3+0x404>
   1856c:	e73fffc4 	addi	fp,fp,-1
   18570:	15c5883a 	add	r2,r2,r23
   18574:	003f9f06 	br	183f4 <__umoddi3+0x404>
   18578:	147f692e 	bgeu	r2,r17,18320 <__umoddi3+0x330>
   1857c:	1405883a 	add	r2,r2,r16
   18580:	003f6706 	br	18320 <__umoddi3+0x330>
   18584:	1405883a 	add	r2,r2,r16
   18588:	003f1906 	br	181f0 <__umoddi3+0x200>
   1858c:	1405883a 	add	r2,r2,r16
   18590:	003ec906 	br	180b8 <__umoddi3+0xc8>
   18594:	b13fcc36 	bltu	r22,r4,184c8 <__umoddi3+0x4d8>
   18598:	000b883a 	mov	r5,zero
   1859c:	003fd106 	br	184e4 <__umoddi3+0x4f4>

000185a0 <_fpadd_parts>:
   185a0:	defff804 	addi	sp,sp,-32
   185a4:	dcc00315 	stw	r19,12(sp)
   185a8:	2027883a 	mov	r19,r4
   185ac:	21000017 	ldw	r4,0(r4)
   185b0:	00c00044 	movi	r3,1
   185b4:	dd400515 	stw	r21,20(sp)
   185b8:	dd000415 	stw	r20,16(sp)
   185bc:	ddc00715 	stw	r23,28(sp)
   185c0:	dd800615 	stw	r22,24(sp)
   185c4:	dc800215 	stw	r18,8(sp)
   185c8:	dc400115 	stw	r17,4(sp)
   185cc:	dc000015 	stw	r16,0(sp)
   185d0:	282b883a 	mov	r21,r5
   185d4:	3029883a 	mov	r20,r6
   185d8:	1900632e 	bgeu	r3,r4,18768 <_fpadd_parts+0x1c8>
   185dc:	28800017 	ldw	r2,0(r5)
   185e0:	1880812e 	bgeu	r3,r2,187e8 <_fpadd_parts+0x248>
   185e4:	00c00104 	movi	r3,4
   185e8:	20c0dc26 	beq	r4,r3,1895c <_fpadd_parts+0x3bc>
   185ec:	10c07e26 	beq	r2,r3,187e8 <_fpadd_parts+0x248>
   185f0:	00c00084 	movi	r3,2
   185f4:	10c06726 	beq	r2,r3,18794 <_fpadd_parts+0x1f4>
   185f8:	20c07b26 	beq	r4,r3,187e8 <_fpadd_parts+0x248>
   185fc:	9dc00217 	ldw	r23,8(r19)
   18600:	28c00217 	ldw	r3,8(r5)
   18604:	9c400317 	ldw	r17,12(r19)
   18608:	2bc00317 	ldw	r15,12(r5)
   1860c:	b8cdc83a 	sub	r6,r23,r3
   18610:	9c800417 	ldw	r18,16(r19)
   18614:	2c000417 	ldw	r16,16(r5)
   18618:	3009883a 	mov	r4,r6
   1861c:	30009716 	blt	r6,zero,1887c <_fpadd_parts+0x2dc>
   18620:	00800fc4 	movi	r2,63
   18624:	11806b16 	blt	r2,r6,187d4 <_fpadd_parts+0x234>
   18628:	0100a40e 	bge	zero,r4,188bc <_fpadd_parts+0x31c>
   1862c:	35bff804 	addi	r22,r6,-32
   18630:	b000bc16 	blt	r22,zero,18924 <_fpadd_parts+0x384>
   18634:	8596d83a 	srl	r11,r16,r22
   18638:	0019883a 	mov	r12,zero
   1863c:	0013883a 	mov	r9,zero
   18640:	01000044 	movi	r4,1
   18644:	0015883a 	mov	r10,zero
   18648:	b000be16 	blt	r22,zero,18944 <_fpadd_parts+0x3a4>
   1864c:	2590983a 	sll	r8,r4,r22
   18650:	000f883a 	mov	r7,zero
   18654:	00bfffc4 	movi	r2,-1
   18658:	3889883a 	add	r4,r7,r2
   1865c:	408b883a 	add	r5,r8,r2
   18660:	21cd803a 	cmpltu	r6,r4,r7
   18664:	314b883a 	add	r5,r6,r5
   18668:	7904703a 	and	r2,r15,r4
   1866c:	8146703a 	and	r3,r16,r5
   18670:	10c4b03a 	or	r2,r2,r3
   18674:	10000226 	beq	r2,zero,18680 <_fpadd_parts+0xe0>
   18678:	02400044 	movi	r9,1
   1867c:	0015883a 	mov	r10,zero
   18680:	5a5eb03a 	or	r15,r11,r9
   18684:	62a0b03a 	or	r16,r12,r10
   18688:	99400117 	ldw	r5,4(r19)
   1868c:	a8800117 	ldw	r2,4(r21)
   18690:	28806e26 	beq	r5,r2,1884c <_fpadd_parts+0x2ac>
   18694:	28006626 	beq	r5,zero,18830 <_fpadd_parts+0x290>
   18698:	7c45c83a 	sub	r2,r15,r17
   1869c:	7889803a 	cmpltu	r4,r15,r2
   186a0:	8487c83a 	sub	r3,r16,r18
   186a4:	1909c83a 	sub	r4,r3,r4
   186a8:	100d883a 	mov	r6,r2
   186ac:	200f883a 	mov	r7,r4
   186b0:	38007716 	blt	r7,zero,18890 <_fpadd_parts+0x2f0>
   186b4:	a5c00215 	stw	r23,8(r20)
   186b8:	a1c00415 	stw	r7,16(r20)
   186bc:	a0000115 	stw	zero,4(r20)
   186c0:	a1800315 	stw	r6,12(r20)
   186c4:	a2000317 	ldw	r8,12(r20)
   186c8:	a2400417 	ldw	r9,16(r20)
   186cc:	00bfffc4 	movi	r2,-1
   186d0:	408b883a 	add	r5,r8,r2
   186d4:	2a09803a 	cmpltu	r4,r5,r8
   186d8:	488d883a 	add	r6,r9,r2
   186dc:	01c40034 	movhi	r7,4096
   186e0:	39ffffc4 	addi	r7,r7,-1
   186e4:	218d883a 	add	r6,r4,r6
   186e8:	39801736 	bltu	r7,r6,18748 <_fpadd_parts+0x1a8>
   186ec:	31c06526 	beq	r6,r7,18884 <_fpadd_parts+0x2e4>
   186f0:	a3000217 	ldw	r12,8(r20)
   186f4:	4209883a 	add	r4,r8,r8
   186f8:	00bfffc4 	movi	r2,-1
   186fc:	220f803a 	cmpltu	r7,r4,r8
   18700:	4a4b883a 	add	r5,r9,r9
   18704:	394f883a 	add	r7,r7,r5
   18708:	2095883a 	add	r10,r4,r2
   1870c:	3897883a 	add	r11,r7,r2
   18710:	510d803a 	cmpltu	r6,r10,r4
   18714:	6099883a 	add	r12,r12,r2
   18718:	32d7883a 	add	r11,r6,r11
   1871c:	00840034 	movhi	r2,4096
   18720:	10bfffc4 	addi	r2,r2,-1
   18724:	2011883a 	mov	r8,r4
   18728:	3813883a 	mov	r9,r7
   1872c:	a1000315 	stw	r4,12(r20)
   18730:	a1c00415 	stw	r7,16(r20)
   18734:	a3000215 	stw	r12,8(r20)
   18738:	12c00336 	bltu	r2,r11,18748 <_fpadd_parts+0x1a8>
   1873c:	58bfed1e 	bne	r11,r2,186f4 <_fpadd_parts+0x154>
   18740:	00bfff84 	movi	r2,-2
   18744:	12bfeb2e 	bgeu	r2,r10,186f4 <_fpadd_parts+0x154>
   18748:	a2800417 	ldw	r10,16(r20)
   1874c:	008000c4 	movi	r2,3
   18750:	00c80034 	movhi	r3,8192
   18754:	18ffffc4 	addi	r3,r3,-1
   18758:	a2400317 	ldw	r9,12(r20)
   1875c:	a0800015 	stw	r2,0(r20)
   18760:	1a802336 	bltu	r3,r10,187f0 <_fpadd_parts+0x250>
   18764:	a027883a 	mov	r19,r20
   18768:	9805883a 	mov	r2,r19
   1876c:	ddc00717 	ldw	r23,28(sp)
   18770:	dd800617 	ldw	r22,24(sp)
   18774:	dd400517 	ldw	r21,20(sp)
   18778:	dd000417 	ldw	r20,16(sp)
   1877c:	dcc00317 	ldw	r19,12(sp)
   18780:	dc800217 	ldw	r18,8(sp)
   18784:	dc400117 	ldw	r17,4(sp)
   18788:	dc000017 	ldw	r16,0(sp)
   1878c:	dec00804 	addi	sp,sp,32
   18790:	f800283a 	ret
   18794:	20fff41e 	bne	r4,r3,18768 <_fpadd_parts+0x1c8>
   18798:	31000015 	stw	r4,0(r6)
   1879c:	98800117 	ldw	r2,4(r19)
   187a0:	30800115 	stw	r2,4(r6)
   187a4:	98c00217 	ldw	r3,8(r19)
   187a8:	30c00215 	stw	r3,8(r6)
   187ac:	98800317 	ldw	r2,12(r19)
   187b0:	30800315 	stw	r2,12(r6)
   187b4:	98c00417 	ldw	r3,16(r19)
   187b8:	30c00415 	stw	r3,16(r6)
   187bc:	98800117 	ldw	r2,4(r19)
   187c0:	28c00117 	ldw	r3,4(r5)
   187c4:	3027883a 	mov	r19,r6
   187c8:	10c4703a 	and	r2,r2,r3
   187cc:	30800115 	stw	r2,4(r6)
   187d0:	003fe506 	br	18768 <_fpadd_parts+0x1c8>
   187d4:	1dc02616 	blt	r3,r23,18870 <_fpadd_parts+0x2d0>
   187d8:	0023883a 	mov	r17,zero
   187dc:	182f883a 	mov	r23,r3
   187e0:	0025883a 	mov	r18,zero
   187e4:	003fa806 	br	18688 <_fpadd_parts+0xe8>
   187e8:	a827883a 	mov	r19,r21
   187ec:	003fde06 	br	18768 <_fpadd_parts+0x1c8>
   187f0:	01800044 	movi	r6,1
   187f4:	500497fa 	slli	r2,r10,31
   187f8:	4808d07a 	srli	r4,r9,1
   187fc:	518ad83a 	srl	r5,r10,r6
   18800:	a2000217 	ldw	r8,8(r20)
   18804:	1108b03a 	or	r4,r2,r4
   18808:	0007883a 	mov	r3,zero
   1880c:	4984703a 	and	r2,r9,r6
   18810:	208cb03a 	or	r6,r4,r2
   18814:	28ceb03a 	or	r7,r5,r3
   18818:	42000044 	addi	r8,r8,1
   1881c:	a027883a 	mov	r19,r20
   18820:	a1c00415 	stw	r7,16(r20)
   18824:	a2000215 	stw	r8,8(r20)
   18828:	a1800315 	stw	r6,12(r20)
   1882c:	003fce06 	br	18768 <_fpadd_parts+0x1c8>
   18830:	8bc5c83a 	sub	r2,r17,r15
   18834:	8889803a 	cmpltu	r4,r17,r2
   18838:	9407c83a 	sub	r3,r18,r16
   1883c:	1909c83a 	sub	r4,r3,r4
   18840:	100d883a 	mov	r6,r2
   18844:	200f883a 	mov	r7,r4
   18848:	003f9906 	br	186b0 <_fpadd_parts+0x110>
   1884c:	7c45883a 	add	r2,r15,r17
   18850:	13c9803a 	cmpltu	r4,r2,r15
   18854:	8487883a 	add	r3,r16,r18
   18858:	20c9883a 	add	r4,r4,r3
   1885c:	a1400115 	stw	r5,4(r20)
   18860:	a5c00215 	stw	r23,8(r20)
   18864:	a0800315 	stw	r2,12(r20)
   18868:	a1000415 	stw	r4,16(r20)
   1886c:	003fb606 	br	18748 <_fpadd_parts+0x1a8>
   18870:	001f883a 	mov	r15,zero
   18874:	0021883a 	mov	r16,zero
   18878:	003f8306 	br	18688 <_fpadd_parts+0xe8>
   1887c:	018dc83a 	sub	r6,zero,r6
   18880:	003f6706 	br	18620 <_fpadd_parts+0x80>
   18884:	00bfff84 	movi	r2,-2
   18888:	117faf36 	bltu	r2,r5,18748 <_fpadd_parts+0x1a8>
   1888c:	003f9806 	br	186f0 <_fpadd_parts+0x150>
   18890:	0005883a 	mov	r2,zero
   18894:	1189c83a 	sub	r4,r2,r6
   18898:	1105803a 	cmpltu	r2,r2,r4
   1889c:	01cbc83a 	sub	r5,zero,r7
   188a0:	2885c83a 	sub	r2,r5,r2
   188a4:	01800044 	movi	r6,1
   188a8:	a1800115 	stw	r6,4(r20)
   188ac:	a5c00215 	stw	r23,8(r20)
   188b0:	a1000315 	stw	r4,12(r20)
   188b4:	a0800415 	stw	r2,16(r20)
   188b8:	003f8206 	br	186c4 <_fpadd_parts+0x124>
   188bc:	203f7226 	beq	r4,zero,18688 <_fpadd_parts+0xe8>
   188c0:	35bff804 	addi	r22,r6,-32
   188c4:	b9af883a 	add	r23,r23,r6
   188c8:	b0003116 	blt	r22,zero,18990 <_fpadd_parts+0x3f0>
   188cc:	959ad83a 	srl	r13,r18,r22
   188d0:	001d883a 	mov	r14,zero
   188d4:	000f883a 	mov	r7,zero
   188d8:	01000044 	movi	r4,1
   188dc:	0011883a 	mov	r8,zero
   188e0:	b0002516 	blt	r22,zero,18978 <_fpadd_parts+0x3d8>
   188e4:	2594983a 	sll	r10,r4,r22
   188e8:	0013883a 	mov	r9,zero
   188ec:	00bfffc4 	movi	r2,-1
   188f0:	4889883a 	add	r4,r9,r2
   188f4:	508b883a 	add	r5,r10,r2
   188f8:	224d803a 	cmpltu	r6,r4,r9
   188fc:	314b883a 	add	r5,r6,r5
   18900:	8904703a 	and	r2,r17,r4
   18904:	9146703a 	and	r3,r18,r5
   18908:	10c4b03a 	or	r2,r2,r3
   1890c:	10000226 	beq	r2,zero,18918 <_fpadd_parts+0x378>
   18910:	01c00044 	movi	r7,1
   18914:	0011883a 	mov	r8,zero
   18918:	69e2b03a 	or	r17,r13,r7
   1891c:	7224b03a 	or	r18,r14,r8
   18920:	003f5906 	br	18688 <_fpadd_parts+0xe8>
   18924:	8407883a 	add	r3,r16,r16
   18928:	008007c4 	movi	r2,31
   1892c:	1185c83a 	sub	r2,r2,r6
   18930:	1886983a 	sll	r3,r3,r2
   18934:	7996d83a 	srl	r11,r15,r6
   18938:	8198d83a 	srl	r12,r16,r6
   1893c:	1ad6b03a 	or	r11,r3,r11
   18940:	003f3e06 	br	1863c <_fpadd_parts+0x9c>
   18944:	2006d07a 	srli	r3,r4,1
   18948:	008007c4 	movi	r2,31
   1894c:	1185c83a 	sub	r2,r2,r6
   18950:	1890d83a 	srl	r8,r3,r2
   18954:	218e983a 	sll	r7,r4,r6
   18958:	003f3e06 	br	18654 <_fpadd_parts+0xb4>
   1895c:	113f821e 	bne	r2,r4,18768 <_fpadd_parts+0x1c8>
   18960:	28c00117 	ldw	r3,4(r5)
   18964:	98800117 	ldw	r2,4(r19)
   18968:	10ff7f26 	beq	r2,r3,18768 <_fpadd_parts+0x1c8>
   1896c:	04c00174 	movhi	r19,5
   18970:	9ce09704 	addi	r19,r19,-32164
   18974:	003f7c06 	br	18768 <_fpadd_parts+0x1c8>
   18978:	2006d07a 	srli	r3,r4,1
   1897c:	008007c4 	movi	r2,31
   18980:	1185c83a 	sub	r2,r2,r6
   18984:	1894d83a 	srl	r10,r3,r2
   18988:	2192983a 	sll	r9,r4,r6
   1898c:	003fd706 	br	188ec <_fpadd_parts+0x34c>
   18990:	9487883a 	add	r3,r18,r18
   18994:	008007c4 	movi	r2,31
   18998:	1185c83a 	sub	r2,r2,r6
   1899c:	1886983a 	sll	r3,r3,r2
   189a0:	899ad83a 	srl	r13,r17,r6
   189a4:	919cd83a 	srl	r14,r18,r6
   189a8:	1b5ab03a 	or	r13,r3,r13
   189ac:	003fc906 	br	188d4 <_fpadd_parts+0x334>

000189b0 <__subdf3>:
   189b0:	deffea04 	addi	sp,sp,-88
   189b4:	dcc01415 	stw	r19,80(sp)
   189b8:	dcc00404 	addi	r19,sp,16
   189bc:	2011883a 	mov	r8,r4
   189c0:	2813883a 	mov	r9,r5
   189c4:	dc401315 	stw	r17,76(sp)
   189c8:	d809883a 	mov	r4,sp
   189cc:	980b883a 	mov	r5,r19
   189d0:	dc400904 	addi	r17,sp,36
   189d4:	dfc01515 	stw	ra,84(sp)
   189d8:	da400115 	stw	r9,4(sp)
   189dc:	d9c00315 	stw	r7,12(sp)
   189e0:	da000015 	stw	r8,0(sp)
   189e4:	d9800215 	stw	r6,8(sp)
   189e8:	0019c440 	call	19c44 <__unpack_d>
   189ec:	d9000204 	addi	r4,sp,8
   189f0:	880b883a 	mov	r5,r17
   189f4:	0019c440 	call	19c44 <__unpack_d>
   189f8:	d8800a17 	ldw	r2,40(sp)
   189fc:	880b883a 	mov	r5,r17
   18a00:	9809883a 	mov	r4,r19
   18a04:	d9800e04 	addi	r6,sp,56
   18a08:	1080005c 	xori	r2,r2,1
   18a0c:	d8800a15 	stw	r2,40(sp)
   18a10:	00185a00 	call	185a0 <_fpadd_parts>
   18a14:	1009883a 	mov	r4,r2
   18a18:	00199300 	call	19930 <__pack_d>
   18a1c:	dfc01517 	ldw	ra,84(sp)
   18a20:	dcc01417 	ldw	r19,80(sp)
   18a24:	dc401317 	ldw	r17,76(sp)
   18a28:	dec01604 	addi	sp,sp,88
   18a2c:	f800283a 	ret

00018a30 <__adddf3>:
   18a30:	deffea04 	addi	sp,sp,-88
   18a34:	dcc01415 	stw	r19,80(sp)
   18a38:	dcc00404 	addi	r19,sp,16
   18a3c:	2011883a 	mov	r8,r4
   18a40:	2813883a 	mov	r9,r5
   18a44:	dc401315 	stw	r17,76(sp)
   18a48:	d809883a 	mov	r4,sp
   18a4c:	980b883a 	mov	r5,r19
   18a50:	dc400904 	addi	r17,sp,36
   18a54:	dfc01515 	stw	ra,84(sp)
   18a58:	da400115 	stw	r9,4(sp)
   18a5c:	d9c00315 	stw	r7,12(sp)
   18a60:	da000015 	stw	r8,0(sp)
   18a64:	d9800215 	stw	r6,8(sp)
   18a68:	0019c440 	call	19c44 <__unpack_d>
   18a6c:	d9000204 	addi	r4,sp,8
   18a70:	880b883a 	mov	r5,r17
   18a74:	0019c440 	call	19c44 <__unpack_d>
   18a78:	d9800e04 	addi	r6,sp,56
   18a7c:	9809883a 	mov	r4,r19
   18a80:	880b883a 	mov	r5,r17
   18a84:	00185a00 	call	185a0 <_fpadd_parts>
   18a88:	1009883a 	mov	r4,r2
   18a8c:	00199300 	call	19930 <__pack_d>
   18a90:	dfc01517 	ldw	ra,84(sp)
   18a94:	dcc01417 	ldw	r19,80(sp)
   18a98:	dc401317 	ldw	r17,76(sp)
   18a9c:	dec01604 	addi	sp,sp,88
   18aa0:	f800283a 	ret

00018aa4 <__muldf3>:
   18aa4:	deffe004 	addi	sp,sp,-128
   18aa8:	dc401815 	stw	r17,96(sp)
   18aac:	dc400404 	addi	r17,sp,16
   18ab0:	2011883a 	mov	r8,r4
   18ab4:	2813883a 	mov	r9,r5
   18ab8:	dc001715 	stw	r16,92(sp)
   18abc:	d809883a 	mov	r4,sp
   18ac0:	880b883a 	mov	r5,r17
   18ac4:	dc000904 	addi	r16,sp,36
   18ac8:	dfc01f15 	stw	ra,124(sp)
   18acc:	da400115 	stw	r9,4(sp)
   18ad0:	d9c00315 	stw	r7,12(sp)
   18ad4:	da000015 	stw	r8,0(sp)
   18ad8:	d9800215 	stw	r6,8(sp)
   18adc:	ddc01e15 	stw	r23,120(sp)
   18ae0:	dd801d15 	stw	r22,116(sp)
   18ae4:	dd401c15 	stw	r21,112(sp)
   18ae8:	dd001b15 	stw	r20,108(sp)
   18aec:	dcc01a15 	stw	r19,104(sp)
   18af0:	dc801915 	stw	r18,100(sp)
   18af4:	0019c440 	call	19c44 <__unpack_d>
   18af8:	d9000204 	addi	r4,sp,8
   18afc:	800b883a 	mov	r5,r16
   18b00:	0019c440 	call	19c44 <__unpack_d>
   18b04:	d9000417 	ldw	r4,16(sp)
   18b08:	00800044 	movi	r2,1
   18b0c:	1100102e 	bgeu	r2,r4,18b50 <__muldf3+0xac>
   18b10:	d8c00917 	ldw	r3,36(sp)
   18b14:	10c0062e 	bgeu	r2,r3,18b30 <__muldf3+0x8c>
   18b18:	00800104 	movi	r2,4
   18b1c:	20800a26 	beq	r4,r2,18b48 <__muldf3+0xa4>
   18b20:	1880cc26 	beq	r3,r2,18e54 <__muldf3+0x3b0>
   18b24:	00800084 	movi	r2,2
   18b28:	20800926 	beq	r4,r2,18b50 <__muldf3+0xac>
   18b2c:	1880191e 	bne	r3,r2,18b94 <__muldf3+0xf0>
   18b30:	d8c00a17 	ldw	r3,40(sp)
   18b34:	d8800517 	ldw	r2,20(sp)
   18b38:	8009883a 	mov	r4,r16
   18b3c:	10c4c03a 	cmpne	r2,r2,r3
   18b40:	d8800a15 	stw	r2,40(sp)
   18b44:	00000706 	br	18b64 <__muldf3+0xc0>
   18b48:	00800084 	movi	r2,2
   18b4c:	1880c326 	beq	r3,r2,18e5c <__muldf3+0x3b8>
   18b50:	d8800517 	ldw	r2,20(sp)
   18b54:	d8c00a17 	ldw	r3,40(sp)
   18b58:	8809883a 	mov	r4,r17
   18b5c:	10c4c03a 	cmpne	r2,r2,r3
   18b60:	d8800515 	stw	r2,20(sp)
   18b64:	00199300 	call	19930 <__pack_d>
   18b68:	dfc01f17 	ldw	ra,124(sp)
   18b6c:	ddc01e17 	ldw	r23,120(sp)
   18b70:	dd801d17 	ldw	r22,116(sp)
   18b74:	dd401c17 	ldw	r21,112(sp)
   18b78:	dd001b17 	ldw	r20,108(sp)
   18b7c:	dcc01a17 	ldw	r19,104(sp)
   18b80:	dc801917 	ldw	r18,100(sp)
   18b84:	dc401817 	ldw	r17,96(sp)
   18b88:	dc001717 	ldw	r16,92(sp)
   18b8c:	dec02004 	addi	sp,sp,128
   18b90:	f800283a 	ret
   18b94:	dd800717 	ldw	r22,28(sp)
   18b98:	dc800c17 	ldw	r18,48(sp)
   18b9c:	002b883a 	mov	r21,zero
   18ba0:	0023883a 	mov	r17,zero
   18ba4:	a80b883a 	mov	r5,r21
   18ba8:	b00d883a 	mov	r6,r22
   18bac:	880f883a 	mov	r7,r17
   18bb0:	ddc00817 	ldw	r23,32(sp)
   18bb4:	dcc00d17 	ldw	r19,52(sp)
   18bb8:	9009883a 	mov	r4,r18
   18bbc:	00198180 	call	19818 <__muldi3>
   18bc0:	001b883a 	mov	r13,zero
   18bc4:	680f883a 	mov	r7,r13
   18bc8:	b009883a 	mov	r4,r22
   18bcc:	000b883a 	mov	r5,zero
   18bd0:	980d883a 	mov	r6,r19
   18bd4:	b82d883a 	mov	r22,r23
   18bd8:	002f883a 	mov	r23,zero
   18bdc:	db401615 	stw	r13,88(sp)
   18be0:	d8801315 	stw	r2,76(sp)
   18be4:	d8c01415 	stw	r3,80(sp)
   18be8:	dcc01515 	stw	r19,84(sp)
   18bec:	00198180 	call	19818 <__muldi3>
   18bf0:	b00d883a 	mov	r6,r22
   18bf4:	000b883a 	mov	r5,zero
   18bf8:	9009883a 	mov	r4,r18
   18bfc:	b80f883a 	mov	r7,r23
   18c00:	1021883a 	mov	r16,r2
   18c04:	1823883a 	mov	r17,r3
   18c08:	00198180 	call	19818 <__muldi3>
   18c0c:	8085883a 	add	r2,r16,r2
   18c10:	140d803a 	cmpltu	r6,r2,r16
   18c14:	88c7883a 	add	r3,r17,r3
   18c18:	30cd883a 	add	r6,r6,r3
   18c1c:	1029883a 	mov	r20,r2
   18c20:	302b883a 	mov	r21,r6
   18c24:	da801317 	ldw	r10,76(sp)
   18c28:	dac01417 	ldw	r11,80(sp)
   18c2c:	db001517 	ldw	r12,84(sp)
   18c30:	db401617 	ldw	r13,88(sp)
   18c34:	3440612e 	bgeu	r6,r17,18dbc <__muldf3+0x318>
   18c38:	0009883a 	mov	r4,zero
   18c3c:	5105883a 	add	r2,r10,r4
   18c40:	128d803a 	cmpltu	r6,r2,r10
   18c44:	5d07883a 	add	r3,r11,r20
   18c48:	30cd883a 	add	r6,r6,r3
   18c4c:	0021883a 	mov	r16,zero
   18c50:	04400044 	movi	r17,1
   18c54:	1025883a 	mov	r18,r2
   18c58:	3027883a 	mov	r19,r6
   18c5c:	32c06236 	bltu	r6,r11,18de8 <__muldf3+0x344>
   18c60:	59807a26 	beq	r11,r6,18e4c <__muldf3+0x3a8>
   18c64:	680b883a 	mov	r5,r13
   18c68:	b80f883a 	mov	r7,r23
   18c6c:	6009883a 	mov	r4,r12
   18c70:	b00d883a 	mov	r6,r22
   18c74:	00198180 	call	19818 <__muldi3>
   18c78:	1009883a 	mov	r4,r2
   18c7c:	000f883a 	mov	r7,zero
   18c80:	1545883a 	add	r2,r2,r21
   18c84:	1111803a 	cmpltu	r8,r2,r4
   18c88:	19c7883a 	add	r3,r3,r7
   18c8c:	40c7883a 	add	r3,r8,r3
   18c90:	88cb883a 	add	r5,r17,r3
   18c94:	d8c00617 	ldw	r3,24(sp)
   18c98:	8089883a 	add	r4,r16,r2
   18c9c:	d8800b17 	ldw	r2,44(sp)
   18ca0:	18c00104 	addi	r3,r3,4
   18ca4:	240d803a 	cmpltu	r6,r4,r16
   18ca8:	10c7883a 	add	r3,r2,r3
   18cac:	2013883a 	mov	r9,r4
   18cb0:	d8800a17 	ldw	r2,40(sp)
   18cb4:	d9000517 	ldw	r4,20(sp)
   18cb8:	314d883a 	add	r6,r6,r5
   18cbc:	3015883a 	mov	r10,r6
   18cc0:	2088c03a 	cmpne	r4,r4,r2
   18cc4:	00880034 	movhi	r2,8192
   18cc8:	10bfffc4 	addi	r2,r2,-1
   18ccc:	d9000f15 	stw	r4,60(sp)
   18cd0:	d8c01015 	stw	r3,64(sp)
   18cd4:	1180162e 	bgeu	r2,r6,18d30 <__muldf3+0x28c>
   18cd8:	1811883a 	mov	r8,r3
   18cdc:	101f883a 	mov	r15,r2
   18ce0:	980497fa 	slli	r2,r19,31
   18ce4:	9016d07a 	srli	r11,r18,1
   18ce8:	500697fa 	slli	r3,r10,31
   18cec:	480cd07a 	srli	r6,r9,1
   18cf0:	500ed07a 	srli	r7,r10,1
   18cf4:	12d6b03a 	or	r11,r2,r11
   18cf8:	00800044 	movi	r2,1
   18cfc:	198cb03a 	or	r6,r3,r6
   18d00:	4888703a 	and	r4,r9,r2
   18d04:	9818d07a 	srli	r12,r19,1
   18d08:	001b883a 	mov	r13,zero
   18d0c:	03a00034 	movhi	r14,32768
   18d10:	3013883a 	mov	r9,r6
   18d14:	3815883a 	mov	r10,r7
   18d18:	4091883a 	add	r8,r8,r2
   18d1c:	20000226 	beq	r4,zero,18d28 <__muldf3+0x284>
   18d20:	5b64b03a 	or	r18,r11,r13
   18d24:	63a6b03a 	or	r19,r12,r14
   18d28:	7abfed36 	bltu	r15,r10,18ce0 <__muldf3+0x23c>
   18d2c:	da001015 	stw	r8,64(sp)
   18d30:	00840034 	movhi	r2,4096
   18d34:	10bfffc4 	addi	r2,r2,-1
   18d38:	12801436 	bltu	r2,r10,18d8c <__muldf3+0x2e8>
   18d3c:	da001017 	ldw	r8,64(sp)
   18d40:	101f883a 	mov	r15,r2
   18d44:	4a45883a 	add	r2,r9,r9
   18d48:	124d803a 	cmpltu	r6,r2,r9
   18d4c:	5287883a 	add	r3,r10,r10
   18d50:	9497883a 	add	r11,r18,r18
   18d54:	5c8f803a 	cmpltu	r7,r11,r18
   18d58:	9cd9883a 	add	r12,r19,r19
   18d5c:	01000044 	movi	r4,1
   18d60:	30cd883a 	add	r6,r6,r3
   18d64:	3b0f883a 	add	r7,r7,r12
   18d68:	423fffc4 	addi	r8,r8,-1
   18d6c:	1013883a 	mov	r9,r2
   18d70:	3015883a 	mov	r10,r6
   18d74:	111ab03a 	or	r13,r2,r4
   18d78:	98003016 	blt	r19,zero,18e3c <__muldf3+0x398>
   18d7c:	5825883a 	mov	r18,r11
   18d80:	3827883a 	mov	r19,r7
   18d84:	7abfef2e 	bgeu	r15,r10,18d44 <__muldf3+0x2a0>
   18d88:	da001015 	stw	r8,64(sp)
   18d8c:	00803fc4 	movi	r2,255
   18d90:	488e703a 	and	r7,r9,r2
   18d94:	00802004 	movi	r2,128
   18d98:	0007883a 	mov	r3,zero
   18d9c:	0011883a 	mov	r8,zero
   18da0:	38801826 	beq	r7,r2,18e04 <__muldf3+0x360>
   18da4:	008000c4 	movi	r2,3
   18da8:	d9000e04 	addi	r4,sp,56
   18dac:	da801215 	stw	r10,72(sp)
   18db0:	d8800e15 	stw	r2,56(sp)
   18db4:	da401115 	stw	r9,68(sp)
   18db8:	003f6a06 	br	18b64 <__muldf3+0xc0>
   18dbc:	89802126 	beq	r17,r6,18e44 <__muldf3+0x3a0>
   18dc0:	0009883a 	mov	r4,zero
   18dc4:	5105883a 	add	r2,r10,r4
   18dc8:	128d803a 	cmpltu	r6,r2,r10
   18dcc:	5d07883a 	add	r3,r11,r20
   18dd0:	30cd883a 	add	r6,r6,r3
   18dd4:	0021883a 	mov	r16,zero
   18dd8:	0023883a 	mov	r17,zero
   18ddc:	1025883a 	mov	r18,r2
   18de0:	3027883a 	mov	r19,r6
   18de4:	32ff9e2e 	bgeu	r6,r11,18c60 <__muldf3+0x1bc>
   18de8:	00800044 	movi	r2,1
   18dec:	8089883a 	add	r4,r16,r2
   18df0:	240d803a 	cmpltu	r6,r4,r16
   18df4:	344d883a 	add	r6,r6,r17
   18df8:	2021883a 	mov	r16,r4
   18dfc:	3023883a 	mov	r17,r6
   18e00:	003f9806 	br	18c64 <__muldf3+0x1c0>
   18e04:	403fe71e 	bne	r8,zero,18da4 <__muldf3+0x300>
   18e08:	01004004 	movi	r4,256
   18e0c:	4904703a 	and	r2,r9,r4
   18e10:	10c4b03a 	or	r2,r2,r3
   18e14:	103fe31e 	bne	r2,zero,18da4 <__muldf3+0x300>
   18e18:	94c4b03a 	or	r2,r18,r19
   18e1c:	103fe126 	beq	r2,zero,18da4 <__muldf3+0x300>
   18e20:	49c5883a 	add	r2,r9,r7
   18e24:	1251803a 	cmpltu	r8,r2,r9
   18e28:	4291883a 	add	r8,r8,r10
   18e2c:	013fc004 	movi	r4,-256
   18e30:	1112703a 	and	r9,r2,r4
   18e34:	4015883a 	mov	r10,r8
   18e38:	003fda06 	br	18da4 <__muldf3+0x300>
   18e3c:	6813883a 	mov	r9,r13
   18e40:	003fce06 	br	18d7c <__muldf3+0x2d8>
   18e44:	143f7c36 	bltu	r2,r16,18c38 <__muldf3+0x194>
   18e48:	003fdd06 	br	18dc0 <__muldf3+0x31c>
   18e4c:	12bf852e 	bgeu	r2,r10,18c64 <__muldf3+0x1c0>
   18e50:	003fe506 	br	18de8 <__muldf3+0x344>
   18e54:	00800084 	movi	r2,2
   18e58:	20bf351e 	bne	r4,r2,18b30 <__muldf3+0x8c>
   18e5c:	01000174 	movhi	r4,5
   18e60:	21209704 	addi	r4,r4,-32164
   18e64:	003f3f06 	br	18b64 <__muldf3+0xc0>

00018e68 <__divdf3>:
   18e68:	deffed04 	addi	sp,sp,-76
   18e6c:	dcc01115 	stw	r19,68(sp)
   18e70:	dcc00404 	addi	r19,sp,16
   18e74:	2011883a 	mov	r8,r4
   18e78:	2813883a 	mov	r9,r5
   18e7c:	dc000e15 	stw	r16,56(sp)
   18e80:	d809883a 	mov	r4,sp
   18e84:	980b883a 	mov	r5,r19
   18e88:	dc000904 	addi	r16,sp,36
   18e8c:	dfc01215 	stw	ra,72(sp)
   18e90:	da400115 	stw	r9,4(sp)
   18e94:	d9c00315 	stw	r7,12(sp)
   18e98:	da000015 	stw	r8,0(sp)
   18e9c:	d9800215 	stw	r6,8(sp)
   18ea0:	dc801015 	stw	r18,64(sp)
   18ea4:	dc400f15 	stw	r17,60(sp)
   18ea8:	0019c440 	call	19c44 <__unpack_d>
   18eac:	d9000204 	addi	r4,sp,8
   18eb0:	800b883a 	mov	r5,r16
   18eb4:	0019c440 	call	19c44 <__unpack_d>
   18eb8:	d9000417 	ldw	r4,16(sp)
   18ebc:	00800044 	movi	r2,1
   18ec0:	11000b2e 	bgeu	r2,r4,18ef0 <__divdf3+0x88>
   18ec4:	d9400917 	ldw	r5,36(sp)
   18ec8:	1140762e 	bgeu	r2,r5,190a4 <__divdf3+0x23c>
   18ecc:	d8800517 	ldw	r2,20(sp)
   18ed0:	d8c00a17 	ldw	r3,40(sp)
   18ed4:	01800104 	movi	r6,4
   18ed8:	10c4f03a 	xor	r2,r2,r3
   18edc:	d8800515 	stw	r2,20(sp)
   18ee0:	21800226 	beq	r4,r6,18eec <__divdf3+0x84>
   18ee4:	00800084 	movi	r2,2
   18ee8:	2080141e 	bne	r4,r2,18f3c <__divdf3+0xd4>
   18eec:	29000926 	beq	r5,r4,18f14 <__divdf3+0xac>
   18ef0:	9809883a 	mov	r4,r19
   18ef4:	00199300 	call	19930 <__pack_d>
   18ef8:	dfc01217 	ldw	ra,72(sp)
   18efc:	dcc01117 	ldw	r19,68(sp)
   18f00:	dc801017 	ldw	r18,64(sp)
   18f04:	dc400f17 	ldw	r17,60(sp)
   18f08:	dc000e17 	ldw	r16,56(sp)
   18f0c:	dec01304 	addi	sp,sp,76
   18f10:	f800283a 	ret
   18f14:	01000174 	movhi	r4,5
   18f18:	21209704 	addi	r4,r4,-32164
   18f1c:	00199300 	call	19930 <__pack_d>
   18f20:	dfc01217 	ldw	ra,72(sp)
   18f24:	dcc01117 	ldw	r19,68(sp)
   18f28:	dc801017 	ldw	r18,64(sp)
   18f2c:	dc400f17 	ldw	r17,60(sp)
   18f30:	dc000e17 	ldw	r16,56(sp)
   18f34:	dec01304 	addi	sp,sp,76
   18f38:	f800283a 	ret
   18f3c:	29805b26 	beq	r5,r6,190ac <__divdf3+0x244>
   18f40:	28802d26 	beq	r5,r2,18ff8 <__divdf3+0x190>
   18f44:	d8c00617 	ldw	r3,24(sp)
   18f48:	d8800b17 	ldw	r2,44(sp)
   18f4c:	d9c00817 	ldw	r7,32(sp)
   18f50:	dc400d17 	ldw	r17,52(sp)
   18f54:	188bc83a 	sub	r5,r3,r2
   18f58:	d9800717 	ldw	r6,28(sp)
   18f5c:	dc000c17 	ldw	r16,48(sp)
   18f60:	d9400615 	stw	r5,24(sp)
   18f64:	3c403836 	bltu	r7,r17,19048 <__divdf3+0x1e0>
   18f68:	89c03626 	beq	r17,r7,19044 <__divdf3+0x1dc>
   18f6c:	0015883a 	mov	r10,zero
   18f70:	001d883a 	mov	r14,zero
   18f74:	02c40034 	movhi	r11,4096
   18f78:	001f883a 	mov	r15,zero
   18f7c:	003f883a 	mov	ra,zero
   18f80:	04800f44 	movi	r18,61
   18f84:	00000f06 	br	18fc4 <__divdf3+0x15c>
   18f88:	601d883a 	mov	r14,r12
   18f8c:	681f883a 	mov	r15,r13
   18f90:	400d883a 	mov	r6,r8
   18f94:	100f883a 	mov	r7,r2
   18f98:	3191883a 	add	r8,r6,r6
   18f9c:	5808d07a 	srli	r4,r11,1
   18fa0:	4185803a 	cmpltu	r2,r8,r6
   18fa4:	39d3883a 	add	r9,r7,r7
   18fa8:	28c6b03a 	or	r3,r5,r3
   18fac:	1245883a 	add	r2,r2,r9
   18fb0:	1815883a 	mov	r10,r3
   18fb4:	2017883a 	mov	r11,r4
   18fb8:	400d883a 	mov	r6,r8
   18fbc:	100f883a 	mov	r7,r2
   18fc0:	fc801726 	beq	ra,r18,19020 <__divdf3+0x1b8>
   18fc4:	580a97fa 	slli	r5,r11,31
   18fc8:	5006d07a 	srli	r3,r10,1
   18fcc:	ffc00044 	addi	ra,ra,1
   18fd0:	3c7ff136 	bltu	r7,r17,18f98 <__divdf3+0x130>
   18fd4:	3411c83a 	sub	r8,r6,r16
   18fd8:	3205803a 	cmpltu	r2,r6,r8
   18fdc:	3c53c83a 	sub	r9,r7,r17
   18fe0:	7298b03a 	or	r12,r14,r10
   18fe4:	7adab03a 	or	r13,r15,r11
   18fe8:	4885c83a 	sub	r2,r9,r2
   18fec:	89ffe61e 	bne	r17,r7,18f88 <__divdf3+0x120>
   18ff0:	343fe936 	bltu	r6,r16,18f98 <__divdf3+0x130>
   18ff4:	003fe406 	br	18f88 <__divdf3+0x120>
   18ff8:	9809883a 	mov	r4,r19
   18ffc:	d9800415 	stw	r6,16(sp)
   19000:	00199300 	call	19930 <__pack_d>
   19004:	dfc01217 	ldw	ra,72(sp)
   19008:	dcc01117 	ldw	r19,68(sp)
   1900c:	dc801017 	ldw	r18,64(sp)
   19010:	dc400f17 	ldw	r17,60(sp)
   19014:	dc000e17 	ldw	r16,56(sp)
   19018:	dec01304 	addi	sp,sp,76
   1901c:	f800283a 	ret
   19020:	00803fc4 	movi	r2,255
   19024:	7090703a 	and	r8,r14,r2
   19028:	00802004 	movi	r2,128
   1902c:	0007883a 	mov	r3,zero
   19030:	0013883a 	mov	r9,zero
   19034:	40800d26 	beq	r8,r2,1906c <__divdf3+0x204>
   19038:	dbc00815 	stw	r15,32(sp)
   1903c:	db800715 	stw	r14,28(sp)
   19040:	003fab06 	br	18ef0 <__divdf3+0x88>
   19044:	343fc92e 	bgeu	r6,r16,18f6c <__divdf3+0x104>
   19048:	3185883a 	add	r2,r6,r6
   1904c:	1189803a 	cmpltu	r4,r2,r6
   19050:	39c7883a 	add	r3,r7,r7
   19054:	20c9883a 	add	r4,r4,r3
   19058:	297fffc4 	addi	r5,r5,-1
   1905c:	100d883a 	mov	r6,r2
   19060:	200f883a 	mov	r7,r4
   19064:	d9400615 	stw	r5,24(sp)
   19068:	003fc006 	br	18f6c <__divdf3+0x104>
   1906c:	483ff21e 	bne	r9,zero,19038 <__divdf3+0x1d0>
   19070:	01004004 	movi	r4,256
   19074:	7104703a 	and	r2,r14,r4
   19078:	10c4b03a 	or	r2,r2,r3
   1907c:	103fee1e 	bne	r2,zero,19038 <__divdf3+0x1d0>
   19080:	31c4b03a 	or	r2,r6,r7
   19084:	103fec26 	beq	r2,zero,19038 <__divdf3+0x1d0>
   19088:	7205883a 	add	r2,r14,r8
   1908c:	1391803a 	cmpltu	r8,r2,r14
   19090:	43d1883a 	add	r8,r8,r15
   19094:	013fc004 	movi	r4,-256
   19098:	111c703a 	and	r14,r2,r4
   1909c:	401f883a 	mov	r15,r8
   190a0:	003fe506 	br	19038 <__divdf3+0x1d0>
   190a4:	8009883a 	mov	r4,r16
   190a8:	003f9206 	br	18ef4 <__divdf3+0x8c>
   190ac:	9809883a 	mov	r4,r19
   190b0:	d8000715 	stw	zero,28(sp)
   190b4:	d8000815 	stw	zero,32(sp)
   190b8:	d8000615 	stw	zero,24(sp)
   190bc:	003f8d06 	br	18ef4 <__divdf3+0x8c>

000190c0 <__eqdf2>:
   190c0:	deffef04 	addi	sp,sp,-68
   190c4:	dc400f15 	stw	r17,60(sp)
   190c8:	dc400404 	addi	r17,sp,16
   190cc:	2005883a 	mov	r2,r4
   190d0:	2807883a 	mov	r3,r5
   190d4:	dc000e15 	stw	r16,56(sp)
   190d8:	d809883a 	mov	r4,sp
   190dc:	880b883a 	mov	r5,r17
   190e0:	dc000904 	addi	r16,sp,36
   190e4:	d8c00115 	stw	r3,4(sp)
   190e8:	d8800015 	stw	r2,0(sp)
   190ec:	d9800215 	stw	r6,8(sp)
   190f0:	dfc01015 	stw	ra,64(sp)
   190f4:	d9c00315 	stw	r7,12(sp)
   190f8:	0019c440 	call	19c44 <__unpack_d>
   190fc:	d9000204 	addi	r4,sp,8
   19100:	800b883a 	mov	r5,r16
   19104:	0019c440 	call	19c44 <__unpack_d>
   19108:	d8800417 	ldw	r2,16(sp)
   1910c:	00c00044 	movi	r3,1
   19110:	180d883a 	mov	r6,r3
   19114:	1880062e 	bgeu	r3,r2,19130 <__eqdf2+0x70>
   19118:	d8800917 	ldw	r2,36(sp)
   1911c:	8809883a 	mov	r4,r17
   19120:	800b883a 	mov	r5,r16
   19124:	1880022e 	bgeu	r3,r2,19130 <__eqdf2+0x70>
   19128:	0019d7c0 	call	19d7c <__fpcmp_parts_d>
   1912c:	100d883a 	mov	r6,r2
   19130:	3005883a 	mov	r2,r6
   19134:	dfc01017 	ldw	ra,64(sp)
   19138:	dc400f17 	ldw	r17,60(sp)
   1913c:	dc000e17 	ldw	r16,56(sp)
   19140:	dec01104 	addi	sp,sp,68
   19144:	f800283a 	ret

00019148 <__nedf2>:
   19148:	deffef04 	addi	sp,sp,-68
   1914c:	dc400f15 	stw	r17,60(sp)
   19150:	dc400404 	addi	r17,sp,16
   19154:	2005883a 	mov	r2,r4
   19158:	2807883a 	mov	r3,r5
   1915c:	dc000e15 	stw	r16,56(sp)
   19160:	d809883a 	mov	r4,sp
   19164:	880b883a 	mov	r5,r17
   19168:	dc000904 	addi	r16,sp,36
   1916c:	d8c00115 	stw	r3,4(sp)
   19170:	d8800015 	stw	r2,0(sp)
   19174:	d9800215 	stw	r6,8(sp)
   19178:	dfc01015 	stw	ra,64(sp)
   1917c:	d9c00315 	stw	r7,12(sp)
   19180:	0019c440 	call	19c44 <__unpack_d>
   19184:	d9000204 	addi	r4,sp,8
   19188:	800b883a 	mov	r5,r16
   1918c:	0019c440 	call	19c44 <__unpack_d>
   19190:	d8800417 	ldw	r2,16(sp)
   19194:	00c00044 	movi	r3,1
   19198:	180d883a 	mov	r6,r3
   1919c:	1880062e 	bgeu	r3,r2,191b8 <__nedf2+0x70>
   191a0:	d8800917 	ldw	r2,36(sp)
   191a4:	8809883a 	mov	r4,r17
   191a8:	800b883a 	mov	r5,r16
   191ac:	1880022e 	bgeu	r3,r2,191b8 <__nedf2+0x70>
   191b0:	0019d7c0 	call	19d7c <__fpcmp_parts_d>
   191b4:	100d883a 	mov	r6,r2
   191b8:	3005883a 	mov	r2,r6
   191bc:	dfc01017 	ldw	ra,64(sp)
   191c0:	dc400f17 	ldw	r17,60(sp)
   191c4:	dc000e17 	ldw	r16,56(sp)
   191c8:	dec01104 	addi	sp,sp,68
   191cc:	f800283a 	ret

000191d0 <__gtdf2>:
   191d0:	deffef04 	addi	sp,sp,-68
   191d4:	dc400f15 	stw	r17,60(sp)
   191d8:	dc400404 	addi	r17,sp,16
   191dc:	2005883a 	mov	r2,r4
   191e0:	2807883a 	mov	r3,r5
   191e4:	dc000e15 	stw	r16,56(sp)
   191e8:	d809883a 	mov	r4,sp
   191ec:	880b883a 	mov	r5,r17
   191f0:	dc000904 	addi	r16,sp,36
   191f4:	d8c00115 	stw	r3,4(sp)
   191f8:	d8800015 	stw	r2,0(sp)
   191fc:	d9800215 	stw	r6,8(sp)
   19200:	dfc01015 	stw	ra,64(sp)
   19204:	d9c00315 	stw	r7,12(sp)
   19208:	0019c440 	call	19c44 <__unpack_d>
   1920c:	d9000204 	addi	r4,sp,8
   19210:	800b883a 	mov	r5,r16
   19214:	0019c440 	call	19c44 <__unpack_d>
   19218:	d8800417 	ldw	r2,16(sp)
   1921c:	00c00044 	movi	r3,1
   19220:	01bfffc4 	movi	r6,-1
   19224:	1880062e 	bgeu	r3,r2,19240 <__gtdf2+0x70>
   19228:	d8800917 	ldw	r2,36(sp)
   1922c:	8809883a 	mov	r4,r17
   19230:	800b883a 	mov	r5,r16
   19234:	1880022e 	bgeu	r3,r2,19240 <__gtdf2+0x70>
   19238:	0019d7c0 	call	19d7c <__fpcmp_parts_d>
   1923c:	100d883a 	mov	r6,r2
   19240:	3005883a 	mov	r2,r6
   19244:	dfc01017 	ldw	ra,64(sp)
   19248:	dc400f17 	ldw	r17,60(sp)
   1924c:	dc000e17 	ldw	r16,56(sp)
   19250:	dec01104 	addi	sp,sp,68
   19254:	f800283a 	ret

00019258 <__gedf2>:
   19258:	deffef04 	addi	sp,sp,-68
   1925c:	dc400f15 	stw	r17,60(sp)
   19260:	dc400404 	addi	r17,sp,16
   19264:	2005883a 	mov	r2,r4
   19268:	2807883a 	mov	r3,r5
   1926c:	dc000e15 	stw	r16,56(sp)
   19270:	d809883a 	mov	r4,sp
   19274:	880b883a 	mov	r5,r17
   19278:	dc000904 	addi	r16,sp,36
   1927c:	d8c00115 	stw	r3,4(sp)
   19280:	d8800015 	stw	r2,0(sp)
   19284:	d9800215 	stw	r6,8(sp)
   19288:	dfc01015 	stw	ra,64(sp)
   1928c:	d9c00315 	stw	r7,12(sp)
   19290:	0019c440 	call	19c44 <__unpack_d>
   19294:	d9000204 	addi	r4,sp,8
   19298:	800b883a 	mov	r5,r16
   1929c:	0019c440 	call	19c44 <__unpack_d>
   192a0:	d8800417 	ldw	r2,16(sp)
   192a4:	00c00044 	movi	r3,1
   192a8:	01bfffc4 	movi	r6,-1
   192ac:	1880062e 	bgeu	r3,r2,192c8 <__gedf2+0x70>
   192b0:	d8800917 	ldw	r2,36(sp)
   192b4:	8809883a 	mov	r4,r17
   192b8:	800b883a 	mov	r5,r16
   192bc:	1880022e 	bgeu	r3,r2,192c8 <__gedf2+0x70>
   192c0:	0019d7c0 	call	19d7c <__fpcmp_parts_d>
   192c4:	100d883a 	mov	r6,r2
   192c8:	3005883a 	mov	r2,r6
   192cc:	dfc01017 	ldw	ra,64(sp)
   192d0:	dc400f17 	ldw	r17,60(sp)
   192d4:	dc000e17 	ldw	r16,56(sp)
   192d8:	dec01104 	addi	sp,sp,68
   192dc:	f800283a 	ret

000192e0 <__ltdf2>:
   192e0:	deffef04 	addi	sp,sp,-68
   192e4:	dc400f15 	stw	r17,60(sp)
   192e8:	dc400404 	addi	r17,sp,16
   192ec:	2005883a 	mov	r2,r4
   192f0:	2807883a 	mov	r3,r5
   192f4:	dc000e15 	stw	r16,56(sp)
   192f8:	d809883a 	mov	r4,sp
   192fc:	880b883a 	mov	r5,r17
   19300:	dc000904 	addi	r16,sp,36
   19304:	d8c00115 	stw	r3,4(sp)
   19308:	d8800015 	stw	r2,0(sp)
   1930c:	d9800215 	stw	r6,8(sp)
   19310:	dfc01015 	stw	ra,64(sp)
   19314:	d9c00315 	stw	r7,12(sp)
   19318:	0019c440 	call	19c44 <__unpack_d>
   1931c:	d9000204 	addi	r4,sp,8
   19320:	800b883a 	mov	r5,r16
   19324:	0019c440 	call	19c44 <__unpack_d>
   19328:	d8800417 	ldw	r2,16(sp)
   1932c:	00c00044 	movi	r3,1
   19330:	180d883a 	mov	r6,r3
   19334:	1880062e 	bgeu	r3,r2,19350 <__ltdf2+0x70>
   19338:	d8800917 	ldw	r2,36(sp)
   1933c:	8809883a 	mov	r4,r17
   19340:	800b883a 	mov	r5,r16
   19344:	1880022e 	bgeu	r3,r2,19350 <__ltdf2+0x70>
   19348:	0019d7c0 	call	19d7c <__fpcmp_parts_d>
   1934c:	100d883a 	mov	r6,r2
   19350:	3005883a 	mov	r2,r6
   19354:	dfc01017 	ldw	ra,64(sp)
   19358:	dc400f17 	ldw	r17,60(sp)
   1935c:	dc000e17 	ldw	r16,56(sp)
   19360:	dec01104 	addi	sp,sp,68
   19364:	f800283a 	ret

00019368 <__floatsidf>:
   19368:	2006d7fa 	srli	r3,r4,31
   1936c:	defff604 	addi	sp,sp,-40
   19370:	008000c4 	movi	r2,3
   19374:	dfc00915 	stw	ra,36(sp)
   19378:	dcc00815 	stw	r19,32(sp)
   1937c:	dc800715 	stw	r18,28(sp)
   19380:	dc400615 	stw	r17,24(sp)
   19384:	dc000515 	stw	r16,20(sp)
   19388:	d8800015 	stw	r2,0(sp)
   1938c:	d8c00115 	stw	r3,4(sp)
   19390:	20000f1e 	bne	r4,zero,193d0 <__floatsidf+0x68>
   19394:	00800084 	movi	r2,2
   19398:	d8800015 	stw	r2,0(sp)
   1939c:	d809883a 	mov	r4,sp
   193a0:	00199300 	call	19930 <__pack_d>
   193a4:	1009883a 	mov	r4,r2
   193a8:	180b883a 	mov	r5,r3
   193ac:	2005883a 	mov	r2,r4
   193b0:	2807883a 	mov	r3,r5
   193b4:	dfc00917 	ldw	ra,36(sp)
   193b8:	dcc00817 	ldw	r19,32(sp)
   193bc:	dc800717 	ldw	r18,28(sp)
   193c0:	dc400617 	ldw	r17,24(sp)
   193c4:	dc000517 	ldw	r16,20(sp)
   193c8:	dec00a04 	addi	sp,sp,40
   193cc:	f800283a 	ret
   193d0:	00800f04 	movi	r2,60
   193d4:	1807003a 	cmpeq	r3,r3,zero
   193d8:	d8800215 	stw	r2,8(sp)
   193dc:	18001126 	beq	r3,zero,19424 <__floatsidf+0xbc>
   193e0:	0027883a 	mov	r19,zero
   193e4:	2025883a 	mov	r18,r4
   193e8:	d9000315 	stw	r4,12(sp)
   193ec:	dcc00415 	stw	r19,16(sp)
   193f0:	00198b00 	call	198b0 <__clzsi2>
   193f4:	11000744 	addi	r4,r2,29
   193f8:	013fe80e 	bge	zero,r4,1939c <__floatsidf+0x34>
   193fc:	10bfff44 	addi	r2,r2,-3
   19400:	10000c16 	blt	r2,zero,19434 <__floatsidf+0xcc>
   19404:	90a2983a 	sll	r17,r18,r2
   19408:	0021883a 	mov	r16,zero
   1940c:	d8800217 	ldw	r2,8(sp)
   19410:	dc400415 	stw	r17,16(sp)
   19414:	dc000315 	stw	r16,12(sp)
   19418:	1105c83a 	sub	r2,r2,r4
   1941c:	d8800215 	stw	r2,8(sp)
   19420:	003fde06 	br	1939c <__floatsidf+0x34>
   19424:	00a00034 	movhi	r2,32768
   19428:	20800a26 	beq	r4,r2,19454 <__floatsidf+0xec>
   1942c:	0109c83a 	sub	r4,zero,r4
   19430:	003feb06 	br	193e0 <__floatsidf+0x78>
   19434:	9006d07a 	srli	r3,r18,1
   19438:	008007c4 	movi	r2,31
   1943c:	1105c83a 	sub	r2,r2,r4
   19440:	1886d83a 	srl	r3,r3,r2
   19444:	9922983a 	sll	r17,r19,r4
   19448:	9120983a 	sll	r16,r18,r4
   1944c:	1c62b03a 	or	r17,r3,r17
   19450:	003fee06 	br	1940c <__floatsidf+0xa4>
   19454:	0009883a 	mov	r4,zero
   19458:	01707834 	movhi	r5,49632
   1945c:	003fd306 	br	193ac <__floatsidf+0x44>

00019460 <__fixdfsi>:
   19460:	defff804 	addi	sp,sp,-32
   19464:	2005883a 	mov	r2,r4
   19468:	2807883a 	mov	r3,r5
   1946c:	d809883a 	mov	r4,sp
   19470:	d9400204 	addi	r5,sp,8
   19474:	d8c00115 	stw	r3,4(sp)
   19478:	d8800015 	stw	r2,0(sp)
   1947c:	dfc00715 	stw	ra,28(sp)
   19480:	0019c440 	call	19c44 <__unpack_d>
   19484:	d8c00217 	ldw	r3,8(sp)
   19488:	00800084 	movi	r2,2
   1948c:	1880051e 	bne	r3,r2,194a4 <__fixdfsi+0x44>
   19490:	0007883a 	mov	r3,zero
   19494:	1805883a 	mov	r2,r3
   19498:	dfc00717 	ldw	ra,28(sp)
   1949c:	dec00804 	addi	sp,sp,32
   194a0:	f800283a 	ret
   194a4:	00800044 	movi	r2,1
   194a8:	10fff92e 	bgeu	r2,r3,19490 <__fixdfsi+0x30>
   194ac:	00800104 	movi	r2,4
   194b0:	18800426 	beq	r3,r2,194c4 <__fixdfsi+0x64>
   194b4:	d8c00417 	ldw	r3,16(sp)
   194b8:	183ff516 	blt	r3,zero,19490 <__fixdfsi+0x30>
   194bc:	00800784 	movi	r2,30
   194c0:	10c0080e 	bge	r2,r3,194e4 <__fixdfsi+0x84>
   194c4:	d8800317 	ldw	r2,12(sp)
   194c8:	1000121e 	bne	r2,zero,19514 <__fixdfsi+0xb4>
   194cc:	00e00034 	movhi	r3,32768
   194d0:	18ffffc4 	addi	r3,r3,-1
   194d4:	1805883a 	mov	r2,r3
   194d8:	dfc00717 	ldw	ra,28(sp)
   194dc:	dec00804 	addi	sp,sp,32
   194e0:	f800283a 	ret
   194e4:	00800f04 	movi	r2,60
   194e8:	10d1c83a 	sub	r8,r2,r3
   194ec:	40bff804 	addi	r2,r8,-32
   194f0:	d9800517 	ldw	r6,20(sp)
   194f4:	d9c00617 	ldw	r7,24(sp)
   194f8:	10000816 	blt	r2,zero,1951c <__fixdfsi+0xbc>
   194fc:	3888d83a 	srl	r4,r7,r2
   19500:	d8800317 	ldw	r2,12(sp)
   19504:	2007883a 	mov	r3,r4
   19508:	103fe226 	beq	r2,zero,19494 <__fixdfsi+0x34>
   1950c:	0107c83a 	sub	r3,zero,r4
   19510:	003fe006 	br	19494 <__fixdfsi+0x34>
   19514:	00e00034 	movhi	r3,32768
   19518:	003fde06 	br	19494 <__fixdfsi+0x34>
   1951c:	39c7883a 	add	r3,r7,r7
   19520:	008007c4 	movi	r2,31
   19524:	1205c83a 	sub	r2,r2,r8
   19528:	1886983a 	sll	r3,r3,r2
   1952c:	3208d83a 	srl	r4,r6,r8
   19530:	1908b03a 	or	r4,r3,r4
   19534:	003ff206 	br	19500 <__fixdfsi+0xa0>

00019538 <__floatunsidf>:
   19538:	defff204 	addi	sp,sp,-56
   1953c:	dfc00d15 	stw	ra,52(sp)
   19540:	ddc00c15 	stw	r23,48(sp)
   19544:	dd800b15 	stw	r22,44(sp)
   19548:	dd400a15 	stw	r21,40(sp)
   1954c:	dd000915 	stw	r20,36(sp)
   19550:	dcc00815 	stw	r19,32(sp)
   19554:	dc800715 	stw	r18,28(sp)
   19558:	dc400615 	stw	r17,24(sp)
   1955c:	dc000515 	stw	r16,20(sp)
   19560:	d8000115 	stw	zero,4(sp)
   19564:	20000f1e 	bne	r4,zero,195a4 <__floatunsidf+0x6c>
   19568:	00800084 	movi	r2,2
   1956c:	d8800015 	stw	r2,0(sp)
   19570:	d809883a 	mov	r4,sp
   19574:	00199300 	call	19930 <__pack_d>
   19578:	dfc00d17 	ldw	ra,52(sp)
   1957c:	ddc00c17 	ldw	r23,48(sp)
   19580:	dd800b17 	ldw	r22,44(sp)
   19584:	dd400a17 	ldw	r21,40(sp)
   19588:	dd000917 	ldw	r20,36(sp)
   1958c:	dcc00817 	ldw	r19,32(sp)
   19590:	dc800717 	ldw	r18,28(sp)
   19594:	dc400617 	ldw	r17,24(sp)
   19598:	dc000517 	ldw	r16,20(sp)
   1959c:	dec00e04 	addi	sp,sp,56
   195a0:	f800283a 	ret
   195a4:	008000c4 	movi	r2,3
   195a8:	00c00f04 	movi	r3,60
   195ac:	002f883a 	mov	r23,zero
   195b0:	202d883a 	mov	r22,r4
   195b4:	d8800015 	stw	r2,0(sp)
   195b8:	d8c00215 	stw	r3,8(sp)
   195bc:	d9000315 	stw	r4,12(sp)
   195c0:	ddc00415 	stw	r23,16(sp)
   195c4:	00198b00 	call	198b0 <__clzsi2>
   195c8:	12400744 	addi	r9,r2,29
   195cc:	48000b16 	blt	r9,zero,195fc <__floatunsidf+0xc4>
   195d0:	483fe726 	beq	r9,zero,19570 <__floatunsidf+0x38>
   195d4:	10bfff44 	addi	r2,r2,-3
   195d8:	10002e16 	blt	r2,zero,19694 <__floatunsidf+0x15c>
   195dc:	b0a2983a 	sll	r17,r22,r2
   195e0:	0021883a 	mov	r16,zero
   195e4:	d8800217 	ldw	r2,8(sp)
   195e8:	dc400415 	stw	r17,16(sp)
   195ec:	dc000315 	stw	r16,12(sp)
   195f0:	1245c83a 	sub	r2,r2,r9
   195f4:	d8800215 	stw	r2,8(sp)
   195f8:	003fdd06 	br	19570 <__floatunsidf+0x38>
   195fc:	0255c83a 	sub	r10,zero,r9
   19600:	51bff804 	addi	r6,r10,-32
   19604:	30001b16 	blt	r6,zero,19674 <__floatunsidf+0x13c>
   19608:	b9a8d83a 	srl	r20,r23,r6
   1960c:	002b883a 	mov	r21,zero
   19610:	000f883a 	mov	r7,zero
   19614:	01000044 	movi	r4,1
   19618:	0011883a 	mov	r8,zero
   1961c:	30002516 	blt	r6,zero,196b4 <__floatunsidf+0x17c>
   19620:	21a6983a 	sll	r19,r4,r6
   19624:	0025883a 	mov	r18,zero
   19628:	00bfffc4 	movi	r2,-1
   1962c:	9089883a 	add	r4,r18,r2
   19630:	988b883a 	add	r5,r19,r2
   19634:	248d803a 	cmpltu	r6,r4,r18
   19638:	314b883a 	add	r5,r6,r5
   1963c:	b104703a 	and	r2,r22,r4
   19640:	b946703a 	and	r3,r23,r5
   19644:	10c4b03a 	or	r2,r2,r3
   19648:	10000226 	beq	r2,zero,19654 <__floatunsidf+0x11c>
   1964c:	01c00044 	movi	r7,1
   19650:	0011883a 	mov	r8,zero
   19654:	d9000217 	ldw	r4,8(sp)
   19658:	a1c4b03a 	or	r2,r20,r7
   1965c:	aa06b03a 	or	r3,r21,r8
   19660:	2249c83a 	sub	r4,r4,r9
   19664:	d8c00415 	stw	r3,16(sp)
   19668:	d9000215 	stw	r4,8(sp)
   1966c:	d8800315 	stw	r2,12(sp)
   19670:	003fbf06 	br	19570 <__floatunsidf+0x38>
   19674:	bdc7883a 	add	r3,r23,r23
   19678:	008007c4 	movi	r2,31
   1967c:	1285c83a 	sub	r2,r2,r10
   19680:	1886983a 	sll	r3,r3,r2
   19684:	b2a8d83a 	srl	r20,r22,r10
   19688:	baaad83a 	srl	r21,r23,r10
   1968c:	1d28b03a 	or	r20,r3,r20
   19690:	003fdf06 	br	19610 <__floatunsidf+0xd8>
   19694:	b006d07a 	srli	r3,r22,1
   19698:	008007c4 	movi	r2,31
   1969c:	1245c83a 	sub	r2,r2,r9
   196a0:	1886d83a 	srl	r3,r3,r2
   196a4:	ba62983a 	sll	r17,r23,r9
   196a8:	b260983a 	sll	r16,r22,r9
   196ac:	1c62b03a 	or	r17,r3,r17
   196b0:	003fcc06 	br	195e4 <__floatunsidf+0xac>
   196b4:	2006d07a 	srli	r3,r4,1
   196b8:	008007c4 	movi	r2,31
   196bc:	1285c83a 	sub	r2,r2,r10
   196c0:	18a6d83a 	srl	r19,r3,r2
   196c4:	22a4983a 	sll	r18,r4,r10
   196c8:	003fd706 	br	19628 <__floatunsidf+0xf0>

000196cc <udivmodsi4>:
   196cc:	29001b2e 	bgeu	r5,r4,1973c <udivmodsi4+0x70>
   196d0:	28001a16 	blt	r5,zero,1973c <udivmodsi4+0x70>
   196d4:	00800044 	movi	r2,1
   196d8:	0007883a 	mov	r3,zero
   196dc:	01c007c4 	movi	r7,31
   196e0:	00000306 	br	196f0 <udivmodsi4+0x24>
   196e4:	19c01326 	beq	r3,r7,19734 <udivmodsi4+0x68>
   196e8:	18c00044 	addi	r3,r3,1
   196ec:	28000416 	blt	r5,zero,19700 <udivmodsi4+0x34>
   196f0:	294b883a 	add	r5,r5,r5
   196f4:	1085883a 	add	r2,r2,r2
   196f8:	293ffa36 	bltu	r5,r4,196e4 <udivmodsi4+0x18>
   196fc:	10000d26 	beq	r2,zero,19734 <udivmodsi4+0x68>
   19700:	0007883a 	mov	r3,zero
   19704:	21400236 	bltu	r4,r5,19710 <udivmodsi4+0x44>
   19708:	2149c83a 	sub	r4,r4,r5
   1970c:	1886b03a 	or	r3,r3,r2
   19710:	1004d07a 	srli	r2,r2,1
   19714:	280ad07a 	srli	r5,r5,1
   19718:	103ffa1e 	bne	r2,zero,19704 <udivmodsi4+0x38>
   1971c:	30000226 	beq	r6,zero,19728 <udivmodsi4+0x5c>
   19720:	2005883a 	mov	r2,r4
   19724:	f800283a 	ret
   19728:	1809883a 	mov	r4,r3
   1972c:	2005883a 	mov	r2,r4
   19730:	f800283a 	ret
   19734:	0007883a 	mov	r3,zero
   19738:	003ff806 	br	1971c <udivmodsi4+0x50>
   1973c:	00800044 	movi	r2,1
   19740:	0007883a 	mov	r3,zero
   19744:	003fef06 	br	19704 <udivmodsi4+0x38>

00019748 <__divsi3>:
   19748:	defffe04 	addi	sp,sp,-8
   1974c:	dc000015 	stw	r16,0(sp)
   19750:	dfc00115 	stw	ra,4(sp)
   19754:	0021883a 	mov	r16,zero
   19758:	20000c16 	blt	r4,zero,1978c <__divsi3+0x44>
   1975c:	000d883a 	mov	r6,zero
   19760:	28000e16 	blt	r5,zero,1979c <__divsi3+0x54>
   19764:	00196cc0 	call	196cc <udivmodsi4>
   19768:	1007883a 	mov	r3,r2
   1976c:	8005003a 	cmpeq	r2,r16,zero
   19770:	1000011e 	bne	r2,zero,19778 <__divsi3+0x30>
   19774:	00c7c83a 	sub	r3,zero,r3
   19778:	1805883a 	mov	r2,r3
   1977c:	dfc00117 	ldw	ra,4(sp)
   19780:	dc000017 	ldw	r16,0(sp)
   19784:	dec00204 	addi	sp,sp,8
   19788:	f800283a 	ret
   1978c:	0109c83a 	sub	r4,zero,r4
   19790:	04000044 	movi	r16,1
   19794:	000d883a 	mov	r6,zero
   19798:	283ff20e 	bge	r5,zero,19764 <__divsi3+0x1c>
   1979c:	014bc83a 	sub	r5,zero,r5
   197a0:	8021003a 	cmpeq	r16,r16,zero
   197a4:	003fef06 	br	19764 <__divsi3+0x1c>

000197a8 <__modsi3>:
   197a8:	deffff04 	addi	sp,sp,-4
   197ac:	dfc00015 	stw	ra,0(sp)
   197b0:	01800044 	movi	r6,1
   197b4:	2807883a 	mov	r3,r5
   197b8:	20000416 	blt	r4,zero,197cc <__modsi3+0x24>
   197bc:	28000c16 	blt	r5,zero,197f0 <__modsi3+0x48>
   197c0:	dfc00017 	ldw	ra,0(sp)
   197c4:	dec00104 	addi	sp,sp,4
   197c8:	00196cc1 	jmpi	196cc <udivmodsi4>
   197cc:	0109c83a 	sub	r4,zero,r4
   197d0:	28000b16 	blt	r5,zero,19800 <__modsi3+0x58>
   197d4:	180b883a 	mov	r5,r3
   197d8:	01800044 	movi	r6,1
   197dc:	00196cc0 	call	196cc <udivmodsi4>
   197e0:	0085c83a 	sub	r2,zero,r2
   197e4:	dfc00017 	ldw	ra,0(sp)
   197e8:	dec00104 	addi	sp,sp,4
   197ec:	f800283a 	ret
   197f0:	014bc83a 	sub	r5,zero,r5
   197f4:	dfc00017 	ldw	ra,0(sp)
   197f8:	dec00104 	addi	sp,sp,4
   197fc:	00196cc1 	jmpi	196cc <udivmodsi4>
   19800:	0147c83a 	sub	r3,zero,r5
   19804:	003ff306 	br	197d4 <__modsi3+0x2c>

00019808 <__udivsi3>:
   19808:	000d883a 	mov	r6,zero
   1980c:	00196cc1 	jmpi	196cc <udivmodsi4>

00019810 <__umodsi3>:
   19810:	01800044 	movi	r6,1
   19814:	00196cc1 	jmpi	196cc <udivmodsi4>

00019818 <__muldi3>:
   19818:	2011883a 	mov	r8,r4
   1981c:	427fffcc 	andi	r9,r8,65535
   19820:	4018d43a 	srli	r12,r8,16
   19824:	32bfffcc 	andi	r10,r6,65535
   19828:	3016d43a 	srli	r11,r6,16
   1982c:	4a85383a 	mul	r2,r9,r10
   19830:	6295383a 	mul	r10,r12,r10
   19834:	4ad3383a 	mul	r9,r9,r11
   19838:	113fffcc 	andi	r4,r2,65535
   1983c:	1004d43a 	srli	r2,r2,16
   19840:	4a93883a 	add	r9,r9,r10
   19844:	3807883a 	mov	r3,r7
   19848:	1245883a 	add	r2,r2,r9
   1984c:	280f883a 	mov	r7,r5
   19850:	180b883a 	mov	r5,r3
   19854:	1006943a 	slli	r3,r2,16
   19858:	defffd04 	addi	sp,sp,-12
   1985c:	dc800215 	stw	r18,8(sp)
   19860:	1907883a 	add	r3,r3,r4
   19864:	dc400115 	stw	r17,4(sp)
   19868:	dc000015 	stw	r16,0(sp)
   1986c:	4165383a 	mul	r18,r8,r5
   19870:	31e3383a 	mul	r17,r6,r7
   19874:	1012d43a 	srli	r9,r2,16
   19878:	62d9383a 	mul	r12,r12,r11
   1987c:	181f883a 	mov	r15,r3
   19880:	1280022e 	bgeu	r2,r10,1988c <__muldi3+0x74>
   19884:	00800074 	movhi	r2,1
   19888:	6099883a 	add	r12,r12,r2
   1988c:	624d883a 	add	r6,r12,r9
   19890:	9187883a 	add	r3,r18,r6
   19894:	88c7883a 	add	r3,r17,r3
   19898:	7805883a 	mov	r2,r15
   1989c:	dc800217 	ldw	r18,8(sp)
   198a0:	dc400117 	ldw	r17,4(sp)
   198a4:	dc000017 	ldw	r16,0(sp)
   198a8:	dec00304 	addi	sp,sp,12
   198ac:	f800283a 	ret

000198b0 <__clzsi2>:
   198b0:	00bfffd4 	movui	r2,65535
   198b4:	11000e36 	bltu	r2,r4,198f0 <__clzsi2+0x40>
   198b8:	00803fc4 	movi	r2,255
   198bc:	01400204 	movi	r5,8
   198c0:	0007883a 	mov	r3,zero
   198c4:	11001036 	bltu	r2,r4,19908 <__clzsi2+0x58>
   198c8:	000b883a 	mov	r5,zero
   198cc:	20c6d83a 	srl	r3,r4,r3
   198d0:	00800174 	movhi	r2,5
   198d4:	10a09c04 	addi	r2,r2,-32144
   198d8:	1887883a 	add	r3,r3,r2
   198dc:	18800003 	ldbu	r2,0(r3)
   198e0:	00c00804 	movi	r3,32
   198e4:	2885883a 	add	r2,r5,r2
   198e8:	1885c83a 	sub	r2,r3,r2
   198ec:	f800283a 	ret
   198f0:	01400404 	movi	r5,16
   198f4:	00804034 	movhi	r2,256
   198f8:	10bfffc4 	addi	r2,r2,-1
   198fc:	2807883a 	mov	r3,r5
   19900:	113ff22e 	bgeu	r2,r4,198cc <__clzsi2+0x1c>
   19904:	01400604 	movi	r5,24
   19908:	2807883a 	mov	r3,r5
   1990c:	20c6d83a 	srl	r3,r4,r3
   19910:	00800174 	movhi	r2,5
   19914:	10a09c04 	addi	r2,r2,-32144
   19918:	1887883a 	add	r3,r3,r2
   1991c:	18800003 	ldbu	r2,0(r3)
   19920:	00c00804 	movi	r3,32
   19924:	2885883a 	add	r2,r5,r2
   19928:	1885c83a 	sub	r2,r3,r2
   1992c:	f800283a 	ret

00019930 <__pack_d>:
   19930:	20c00017 	ldw	r3,0(r4)
   19934:	defffd04 	addi	sp,sp,-12
   19938:	dc000015 	stw	r16,0(sp)
   1993c:	dc800215 	stw	r18,8(sp)
   19940:	dc400115 	stw	r17,4(sp)
   19944:	00800044 	movi	r2,1
   19948:	22000317 	ldw	r8,12(r4)
   1994c:	001f883a 	mov	r15,zero
   19950:	22400417 	ldw	r9,16(r4)
   19954:	24000117 	ldw	r16,4(r4)
   19958:	10c0552e 	bgeu	r2,r3,19ab0 <__pack_d+0x180>
   1995c:	00800104 	movi	r2,4
   19960:	18804f26 	beq	r3,r2,19aa0 <__pack_d+0x170>
   19964:	00800084 	movi	r2,2
   19968:	18800226 	beq	r3,r2,19974 <__pack_d+0x44>
   1996c:	4244b03a 	or	r2,r8,r9
   19970:	10001a1e 	bne	r2,zero,199dc <__pack_d+0xac>
   19974:	000d883a 	mov	r6,zero
   19978:	000f883a 	mov	r7,zero
   1997c:	0011883a 	mov	r8,zero
   19980:	00800434 	movhi	r2,16
   19984:	10bfffc4 	addi	r2,r2,-1
   19988:	301d883a 	mov	r14,r6
   1998c:	3884703a 	and	r2,r7,r2
   19990:	400a953a 	slli	r5,r8,20
   19994:	79bffc2c 	andhi	r6,r15,65520
   19998:	308cb03a 	or	r6,r6,r2
   1999c:	00e00434 	movhi	r3,32784
   199a0:	18ffffc4 	addi	r3,r3,-1
   199a4:	800497fa 	slli	r2,r16,31
   199a8:	30c6703a 	and	r3,r6,r3
   199ac:	1946b03a 	or	r3,r3,r5
   199b0:	01600034 	movhi	r5,32768
   199b4:	297fffc4 	addi	r5,r5,-1
   199b8:	194a703a 	and	r5,r3,r5
   199bc:	288ab03a 	or	r5,r5,r2
   199c0:	2807883a 	mov	r3,r5
   199c4:	7005883a 	mov	r2,r14
   199c8:	dc800217 	ldw	r18,8(sp)
   199cc:	dc400117 	ldw	r17,4(sp)
   199d0:	dc000017 	ldw	r16,0(sp)
   199d4:	dec00304 	addi	sp,sp,12
   199d8:	f800283a 	ret
   199dc:	21000217 	ldw	r4,8(r4)
   199e0:	00bf0084 	movi	r2,-1022
   199e4:	20803f16 	blt	r4,r2,19ae4 <__pack_d+0x1b4>
   199e8:	0080ffc4 	movi	r2,1023
   199ec:	11002c16 	blt	r2,r4,19aa0 <__pack_d+0x170>
   199f0:	00803fc4 	movi	r2,255
   199f4:	408c703a 	and	r6,r8,r2
   199f8:	00802004 	movi	r2,128
   199fc:	0007883a 	mov	r3,zero
   19a00:	000f883a 	mov	r7,zero
   19a04:	2280ffc4 	addi	r10,r4,1023
   19a08:	30801e26 	beq	r6,r2,19a84 <__pack_d+0x154>
   19a0c:	00801fc4 	movi	r2,127
   19a10:	4089883a 	add	r4,r8,r2
   19a14:	220d803a 	cmpltu	r6,r4,r8
   19a18:	324d883a 	add	r6,r6,r9
   19a1c:	2011883a 	mov	r8,r4
   19a20:	3013883a 	mov	r9,r6
   19a24:	00880034 	movhi	r2,8192
   19a28:	10bfffc4 	addi	r2,r2,-1
   19a2c:	12400d36 	bltu	r2,r9,19a64 <__pack_d+0x134>
   19a30:	4804963a 	slli	r2,r9,24
   19a34:	400cd23a 	srli	r6,r8,8
   19a38:	480ed23a 	srli	r7,r9,8
   19a3c:	013fffc4 	movi	r4,-1
   19a40:	118cb03a 	or	r6,r2,r6
   19a44:	01400434 	movhi	r5,16
   19a48:	297fffc4 	addi	r5,r5,-1
   19a4c:	3104703a 	and	r2,r6,r4
   19a50:	3946703a 	and	r3,r7,r5
   19a54:	5201ffcc 	andi	r8,r10,2047
   19a58:	100d883a 	mov	r6,r2
   19a5c:	180f883a 	mov	r7,r3
   19a60:	003fc706 	br	19980 <__pack_d+0x50>
   19a64:	480897fa 	slli	r4,r9,31
   19a68:	4004d07a 	srli	r2,r8,1
   19a6c:	4806d07a 	srli	r3,r9,1
   19a70:	52800044 	addi	r10,r10,1
   19a74:	2084b03a 	or	r2,r4,r2
   19a78:	1011883a 	mov	r8,r2
   19a7c:	1813883a 	mov	r9,r3
   19a80:	003feb06 	br	19a30 <__pack_d+0x100>
   19a84:	383fe11e 	bne	r7,zero,19a0c <__pack_d+0xdc>
   19a88:	01004004 	movi	r4,256
   19a8c:	4104703a 	and	r2,r8,r4
   19a90:	10c4b03a 	or	r2,r2,r3
   19a94:	103fe326 	beq	r2,zero,19a24 <__pack_d+0xf4>
   19a98:	3005883a 	mov	r2,r6
   19a9c:	003fdc06 	br	19a10 <__pack_d+0xe0>
   19aa0:	000d883a 	mov	r6,zero
   19aa4:	000f883a 	mov	r7,zero
   19aa8:	0201ffc4 	movi	r8,2047
   19aac:	003fb406 	br	19980 <__pack_d+0x50>
   19ab0:	0005883a 	mov	r2,zero
   19ab4:	00c00234 	movhi	r3,8
   19ab8:	408cb03a 	or	r6,r8,r2
   19abc:	48ceb03a 	or	r7,r9,r3
   19ac0:	013fffc4 	movi	r4,-1
   19ac4:	01400434 	movhi	r5,16
   19ac8:	297fffc4 	addi	r5,r5,-1
   19acc:	3104703a 	and	r2,r6,r4
   19ad0:	3946703a 	and	r3,r7,r5
   19ad4:	100d883a 	mov	r6,r2
   19ad8:	180f883a 	mov	r7,r3
   19adc:	0201ffc4 	movi	r8,2047
   19ae0:	003fa706 	br	19980 <__pack_d+0x50>
   19ae4:	1109c83a 	sub	r4,r2,r4
   19ae8:	00800e04 	movi	r2,56
   19aec:	11004316 	blt	r2,r4,19bfc <__pack_d+0x2cc>
   19af0:	21fff804 	addi	r7,r4,-32
   19af4:	38004516 	blt	r7,zero,19c0c <__pack_d+0x2dc>
   19af8:	49d8d83a 	srl	r12,r9,r7
   19afc:	001b883a 	mov	r13,zero
   19b00:	0023883a 	mov	r17,zero
   19b04:	01400044 	movi	r5,1
   19b08:	0025883a 	mov	r18,zero
   19b0c:	38004716 	blt	r7,zero,19c2c <__pack_d+0x2fc>
   19b10:	29d6983a 	sll	r11,r5,r7
   19b14:	0015883a 	mov	r10,zero
   19b18:	00bfffc4 	movi	r2,-1
   19b1c:	5089883a 	add	r4,r10,r2
   19b20:	588b883a 	add	r5,r11,r2
   19b24:	228d803a 	cmpltu	r6,r4,r10
   19b28:	314b883a 	add	r5,r6,r5
   19b2c:	4104703a 	and	r2,r8,r4
   19b30:	4946703a 	and	r3,r9,r5
   19b34:	10c4b03a 	or	r2,r2,r3
   19b38:	10000226 	beq	r2,zero,19b44 <__pack_d+0x214>
   19b3c:	04400044 	movi	r17,1
   19b40:	0025883a 	mov	r18,zero
   19b44:	00803fc4 	movi	r2,255
   19b48:	644eb03a 	or	r7,r12,r17
   19b4c:	3892703a 	and	r9,r7,r2
   19b50:	00802004 	movi	r2,128
   19b54:	6c90b03a 	or	r8,r13,r18
   19b58:	0015883a 	mov	r10,zero
   19b5c:	48801626 	beq	r9,r2,19bb8 <__pack_d+0x288>
   19b60:	01001fc4 	movi	r4,127
   19b64:	3905883a 	add	r2,r7,r4
   19b68:	11cd803a 	cmpltu	r6,r2,r7
   19b6c:	320d883a 	add	r6,r6,r8
   19b70:	100f883a 	mov	r7,r2
   19b74:	00840034 	movhi	r2,4096
   19b78:	10bfffc4 	addi	r2,r2,-1
   19b7c:	3011883a 	mov	r8,r6
   19b80:	0007883a 	mov	r3,zero
   19b84:	11801b36 	bltu	r2,r6,19bf4 <__pack_d+0x2c4>
   19b88:	4004963a 	slli	r2,r8,24
   19b8c:	3808d23a 	srli	r4,r7,8
   19b90:	400ad23a 	srli	r5,r8,8
   19b94:	1813883a 	mov	r9,r3
   19b98:	1108b03a 	or	r4,r2,r4
   19b9c:	00bfffc4 	movi	r2,-1
   19ba0:	00c00434 	movhi	r3,16
   19ba4:	18ffffc4 	addi	r3,r3,-1
   19ba8:	208c703a 	and	r6,r4,r2
   19bac:	28ce703a 	and	r7,r5,r3
   19bb0:	4a01ffcc 	andi	r8,r9,2047
   19bb4:	003f7206 	br	19980 <__pack_d+0x50>
   19bb8:	503fe91e 	bne	r10,zero,19b60 <__pack_d+0x230>
   19bbc:	01004004 	movi	r4,256
   19bc0:	3904703a 	and	r2,r7,r4
   19bc4:	0007883a 	mov	r3,zero
   19bc8:	10c4b03a 	or	r2,r2,r3
   19bcc:	10000626 	beq	r2,zero,19be8 <__pack_d+0x2b8>
   19bd0:	3a45883a 	add	r2,r7,r9
   19bd4:	11cd803a 	cmpltu	r6,r2,r7
   19bd8:	320d883a 	add	r6,r6,r8
   19bdc:	100f883a 	mov	r7,r2
   19be0:	3011883a 	mov	r8,r6
   19be4:	0007883a 	mov	r3,zero
   19be8:	00840034 	movhi	r2,4096
   19bec:	10bfffc4 	addi	r2,r2,-1
   19bf0:	123fe52e 	bgeu	r2,r8,19b88 <__pack_d+0x258>
   19bf4:	00c00044 	movi	r3,1
   19bf8:	003fe306 	br	19b88 <__pack_d+0x258>
   19bfc:	0009883a 	mov	r4,zero
   19c00:	0013883a 	mov	r9,zero
   19c04:	000b883a 	mov	r5,zero
   19c08:	003fe406 	br	19b9c <__pack_d+0x26c>
   19c0c:	4a47883a 	add	r3,r9,r9
   19c10:	008007c4 	movi	r2,31
   19c14:	1105c83a 	sub	r2,r2,r4
   19c18:	1886983a 	sll	r3,r3,r2
   19c1c:	4118d83a 	srl	r12,r8,r4
   19c20:	491ad83a 	srl	r13,r9,r4
   19c24:	1b18b03a 	or	r12,r3,r12
   19c28:	003fb506 	br	19b00 <__pack_d+0x1d0>
   19c2c:	2806d07a 	srli	r3,r5,1
   19c30:	008007c4 	movi	r2,31
   19c34:	1105c83a 	sub	r2,r2,r4
   19c38:	1896d83a 	srl	r11,r3,r2
   19c3c:	2914983a 	sll	r10,r5,r4
   19c40:	003fb506 	br	19b18 <__pack_d+0x1e8>

00019c44 <__unpack_d>:
   19c44:	20c00117 	ldw	r3,4(r4)
   19c48:	22400017 	ldw	r9,0(r4)
   19c4c:	00800434 	movhi	r2,16
   19c50:	10bfffc4 	addi	r2,r2,-1
   19c54:	1808d53a 	srli	r4,r3,20
   19c58:	180cd7fa 	srli	r6,r3,31
   19c5c:	1894703a 	and	r10,r3,r2
   19c60:	2201ffcc 	andi	r8,r4,2047
   19c64:	281b883a 	mov	r13,r5
   19c68:	4817883a 	mov	r11,r9
   19c6c:	29800115 	stw	r6,4(r5)
   19c70:	5019883a 	mov	r12,r10
   19c74:	40001e1e 	bne	r8,zero,19cf0 <__unpack_d+0xac>
   19c78:	4a84b03a 	or	r2,r9,r10
   19c7c:	10001926 	beq	r2,zero,19ce4 <__unpack_d+0xa0>
   19c80:	4804d63a 	srli	r2,r9,24
   19c84:	500c923a 	slli	r6,r10,8
   19c88:	013f0084 	movi	r4,-1022
   19c8c:	00c40034 	movhi	r3,4096
   19c90:	18ffffc4 	addi	r3,r3,-1
   19c94:	118cb03a 	or	r6,r2,r6
   19c98:	008000c4 	movi	r2,3
   19c9c:	480a923a 	slli	r5,r9,8
   19ca0:	68800015 	stw	r2,0(r13)
   19ca4:	69000215 	stw	r4,8(r13)
   19ca8:	19800b36 	bltu	r3,r6,19cd8 <__unpack_d+0x94>
   19cac:	200f883a 	mov	r7,r4
   19cb0:	1811883a 	mov	r8,r3
   19cb4:	2945883a 	add	r2,r5,r5
   19cb8:	1149803a 	cmpltu	r4,r2,r5
   19cbc:	3187883a 	add	r3,r6,r6
   19cc0:	20c9883a 	add	r4,r4,r3
   19cc4:	100b883a 	mov	r5,r2
   19cc8:	200d883a 	mov	r6,r4
   19ccc:	39ffffc4 	addi	r7,r7,-1
   19cd0:	413ff82e 	bgeu	r8,r4,19cb4 <__unpack_d+0x70>
   19cd4:	69c00215 	stw	r7,8(r13)
   19cd8:	69800415 	stw	r6,16(r13)
   19cdc:	69400315 	stw	r5,12(r13)
   19ce0:	f800283a 	ret
   19ce4:	00800084 	movi	r2,2
   19ce8:	28800015 	stw	r2,0(r5)
   19cec:	f800283a 	ret
   19cf0:	0081ffc4 	movi	r2,2047
   19cf4:	40800f26 	beq	r8,r2,19d34 <__unpack_d+0xf0>
   19cf8:	480cd63a 	srli	r6,r9,24
   19cfc:	5006923a 	slli	r3,r10,8
   19d00:	4804923a 	slli	r2,r9,8
   19d04:	0009883a 	mov	r4,zero
   19d08:	30c6b03a 	or	r3,r6,r3
   19d0c:	01440034 	movhi	r5,4096
   19d10:	110cb03a 	or	r6,r2,r4
   19d14:	423f0044 	addi	r8,r8,-1023
   19d18:	194eb03a 	or	r7,r3,r5
   19d1c:	008000c4 	movi	r2,3
   19d20:	69c00415 	stw	r7,16(r13)
   19d24:	6a000215 	stw	r8,8(r13)
   19d28:	68800015 	stw	r2,0(r13)
   19d2c:	69800315 	stw	r6,12(r13)
   19d30:	f800283a 	ret
   19d34:	4a84b03a 	or	r2,r9,r10
   19d38:	1000031e 	bne	r2,zero,19d48 <__unpack_d+0x104>
   19d3c:	00800104 	movi	r2,4
   19d40:	28800015 	stw	r2,0(r5)
   19d44:	f800283a 	ret
   19d48:	0009883a 	mov	r4,zero
   19d4c:	01400234 	movhi	r5,8
   19d50:	4904703a 	and	r2,r9,r4
   19d54:	5146703a 	and	r3,r10,r5
   19d58:	10c4b03a 	or	r2,r2,r3
   19d5c:	10000526 	beq	r2,zero,19d74 <__unpack_d+0x130>
   19d60:	00800044 	movi	r2,1
   19d64:	68800015 	stw	r2,0(r13)
   19d68:	6b000415 	stw	r12,16(r13)
   19d6c:	6ac00315 	stw	r11,12(r13)
   19d70:	f800283a 	ret
   19d74:	68000015 	stw	zero,0(r13)
   19d78:	003ffb06 	br	19d68 <__unpack_d+0x124>

00019d7c <__fpcmp_parts_d>:
   19d7c:	21800017 	ldw	r6,0(r4)
   19d80:	00c00044 	movi	r3,1
   19d84:	19800a2e 	bgeu	r3,r6,19db0 <__fpcmp_parts_d+0x34>
   19d88:	28800017 	ldw	r2,0(r5)
   19d8c:	1880082e 	bgeu	r3,r2,19db0 <__fpcmp_parts_d+0x34>
   19d90:	00c00104 	movi	r3,4
   19d94:	30c02626 	beq	r6,r3,19e30 <__fpcmp_parts_d+0xb4>
   19d98:	10c02226 	beq	r2,r3,19e24 <__fpcmp_parts_d+0xa8>
   19d9c:	00c00084 	movi	r3,2
   19da0:	30c00526 	beq	r6,r3,19db8 <__fpcmp_parts_d+0x3c>
   19da4:	10c0071e 	bne	r2,r3,19dc4 <__fpcmp_parts_d+0x48>
   19da8:	20800117 	ldw	r2,4(r4)
   19dac:	1000091e 	bne	r2,zero,19dd4 <__fpcmp_parts_d+0x58>
   19db0:	00800044 	movi	r2,1
   19db4:	f800283a 	ret
   19db8:	10c01a1e 	bne	r2,r3,19e24 <__fpcmp_parts_d+0xa8>
   19dbc:	0005883a 	mov	r2,zero
   19dc0:	f800283a 	ret
   19dc4:	22000117 	ldw	r8,4(r4)
   19dc8:	28800117 	ldw	r2,4(r5)
   19dcc:	40800326 	beq	r8,r2,19ddc <__fpcmp_parts_d+0x60>
   19dd0:	403ff726 	beq	r8,zero,19db0 <__fpcmp_parts_d+0x34>
   19dd4:	00bfffc4 	movi	r2,-1
   19dd8:	f800283a 	ret
   19ddc:	20c00217 	ldw	r3,8(r4)
   19de0:	28800217 	ldw	r2,8(r5)
   19de4:	10fffa16 	blt	r2,r3,19dd0 <__fpcmp_parts_d+0x54>
   19de8:	18800916 	blt	r3,r2,19e10 <__fpcmp_parts_d+0x94>
   19dec:	21c00417 	ldw	r7,16(r4)
   19df0:	28c00417 	ldw	r3,16(r5)
   19df4:	21800317 	ldw	r6,12(r4)
   19df8:	28800317 	ldw	r2,12(r5)
   19dfc:	19fff436 	bltu	r3,r7,19dd0 <__fpcmp_parts_d+0x54>
   19e00:	38c00526 	beq	r7,r3,19e18 <__fpcmp_parts_d+0x9c>
   19e04:	38c00236 	bltu	r7,r3,19e10 <__fpcmp_parts_d+0x94>
   19e08:	19ffec1e 	bne	r3,r7,19dbc <__fpcmp_parts_d+0x40>
   19e0c:	30bfeb2e 	bgeu	r6,r2,19dbc <__fpcmp_parts_d+0x40>
   19e10:	403fe71e 	bne	r8,zero,19db0 <__fpcmp_parts_d+0x34>
   19e14:	003fef06 	br	19dd4 <__fpcmp_parts_d+0x58>
   19e18:	11bffa2e 	bgeu	r2,r6,19e04 <__fpcmp_parts_d+0x88>
   19e1c:	403fe426 	beq	r8,zero,19db0 <__fpcmp_parts_d+0x34>
   19e20:	003fec06 	br	19dd4 <__fpcmp_parts_d+0x58>
   19e24:	28800117 	ldw	r2,4(r5)
   19e28:	103fe11e 	bne	r2,zero,19db0 <__fpcmp_parts_d+0x34>
   19e2c:	003fe906 	br	19dd4 <__fpcmp_parts_d+0x58>
   19e30:	11bfdd1e 	bne	r2,r6,19da8 <__fpcmp_parts_d+0x2c>
   19e34:	28c00117 	ldw	r3,4(r5)
   19e38:	20800117 	ldw	r2,4(r4)
   19e3c:	1885c83a 	sub	r2,r3,r2
   19e40:	f800283a 	ret

00019e44 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   19e44:	defff804 	addi	sp,sp,-32
   19e48:	dfc00715 	stw	ra,28(sp)
   19e4c:	df000615 	stw	fp,24(sp)
   19e50:	df000604 	addi	fp,sp,24
   19e54:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   19e58:	e0bffc17 	ldw	r2,-16(fp)
   19e5c:	1004803a 	cmplt	r2,r2,zero
   19e60:	1000081e 	bne	r2,zero,19e84 <close+0x40>
   19e64:	e0bffc17 	ldw	r2,-16(fp)
   19e68:	10800324 	muli	r2,r2,12
   19e6c:	1007883a 	mov	r3,r2
   19e70:	00800174 	movhi	r2,5
   19e74:	10a2f804 	addi	r2,r2,-29728
   19e78:	1887883a 	add	r3,r3,r2
   19e7c:	e0ffff15 	stw	r3,-4(fp)
   19e80:	00000106 	br	19e88 <close+0x44>
   19e84:	e03fff15 	stw	zero,-4(fp)
   19e88:	e0bfff17 	ldw	r2,-4(fp)
   19e8c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   19e90:	e0bffb17 	ldw	r2,-20(fp)
   19e94:	1005003a 	cmpeq	r2,r2,zero
   19e98:	10001d1e 	bne	r2,zero,19f10 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   19e9c:	e0bffb17 	ldw	r2,-20(fp)
   19ea0:	10800017 	ldw	r2,0(r2)
   19ea4:	10800417 	ldw	r2,16(r2)
   19ea8:	1005003a 	cmpeq	r2,r2,zero
   19eac:	1000071e 	bne	r2,zero,19ecc <close+0x88>
   19eb0:	e0bffb17 	ldw	r2,-20(fp)
   19eb4:	10800017 	ldw	r2,0(r2)
   19eb8:	10800417 	ldw	r2,16(r2)
   19ebc:	e13ffb17 	ldw	r4,-20(fp)
   19ec0:	103ee83a 	callr	r2
   19ec4:	e0bffe15 	stw	r2,-8(fp)
   19ec8:	00000106 	br	19ed0 <close+0x8c>
   19ecc:	e03ffe15 	stw	zero,-8(fp)
   19ed0:	e0bffe17 	ldw	r2,-8(fp)
   19ed4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   19ed8:	e13ffc17 	ldw	r4,-16(fp)
   19edc:	001a6880 	call	1a688 <alt_release_fd>
    if (rval < 0)
   19ee0:	e0bffa17 	ldw	r2,-24(fp)
   19ee4:	1004403a 	cmpge	r2,r2,zero
   19ee8:	1000071e 	bne	r2,zero,19f08 <close+0xc4>
    {
      ALT_ERRNO = -rval;
   19eec:	0019f400 	call	19f40 <alt_get_errno>
   19ef0:	e0fffa17 	ldw	r3,-24(fp)
   19ef4:	00c7c83a 	sub	r3,zero,r3
   19ef8:	10c00015 	stw	r3,0(r2)
      return -1;
   19efc:	00bfffc4 	movi	r2,-1
   19f00:	e0bffd15 	stw	r2,-12(fp)
   19f04:	00000806 	br	19f28 <close+0xe4>
    }
    return 0;
   19f08:	e03ffd15 	stw	zero,-12(fp)
   19f0c:	00000606 	br	19f28 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19f10:	0019f400 	call	19f40 <alt_get_errno>
   19f14:	1007883a 	mov	r3,r2
   19f18:	00801444 	movi	r2,81
   19f1c:	18800015 	stw	r2,0(r3)
    return -1;
   19f20:	00bfffc4 	movi	r2,-1
   19f24:	e0bffd15 	stw	r2,-12(fp)
   19f28:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   19f2c:	e037883a 	mov	sp,fp
   19f30:	dfc00117 	ldw	ra,4(sp)
   19f34:	df000017 	ldw	fp,0(sp)
   19f38:	dec00204 	addi	sp,sp,8
   19f3c:	f800283a 	ret

00019f40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19f40:	defffd04 	addi	sp,sp,-12
   19f44:	dfc00215 	stw	ra,8(sp)
   19f48:	df000115 	stw	fp,4(sp)
   19f4c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   19f50:	00800174 	movhi	r2,5
   19f54:	10a77b04 	addi	r2,r2,-25108
   19f58:	10800017 	ldw	r2,0(r2)
   19f5c:	1005003a 	cmpeq	r2,r2,zero
   19f60:	1000061e 	bne	r2,zero,19f7c <alt_get_errno+0x3c>
   19f64:	00800174 	movhi	r2,5
   19f68:	10a77b04 	addi	r2,r2,-25108
   19f6c:	10800017 	ldw	r2,0(r2)
   19f70:	103ee83a 	callr	r2
   19f74:	e0bfff15 	stw	r2,-4(fp)
   19f78:	00000306 	br	19f88 <alt_get_errno+0x48>
   19f7c:	00800174 	movhi	r2,5
   19f80:	10a78b04 	addi	r2,r2,-25044
   19f84:	e0bfff15 	stw	r2,-4(fp)
   19f88:	e0bfff17 	ldw	r2,-4(fp)
}
   19f8c:	e037883a 	mov	sp,fp
   19f90:	dfc00117 	ldw	ra,4(sp)
   19f94:	df000017 	ldw	fp,0(sp)
   19f98:	dec00204 	addi	sp,sp,8
   19f9c:	f800283a 	ret

00019fa0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   19fa0:	defffc04 	addi	sp,sp,-16
   19fa4:	df000315 	stw	fp,12(sp)
   19fa8:	df000304 	addi	fp,sp,12
   19fac:	e13ffd15 	stw	r4,-12(fp)
   19fb0:	e17ffe15 	stw	r5,-8(fp)
   19fb4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   19fb8:	e0bfff17 	ldw	r2,-4(fp)
}
   19fbc:	e037883a 	mov	sp,fp
   19fc0:	df000017 	ldw	fp,0(sp)
   19fc4:	dec00104 	addi	sp,sp,4
   19fc8:	f800283a 	ret

00019fcc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   19fcc:	defff904 	addi	sp,sp,-28
   19fd0:	dfc00615 	stw	ra,24(sp)
   19fd4:	df000515 	stw	fp,20(sp)
   19fd8:	df000504 	addi	fp,sp,20
   19fdc:	e13ffc15 	stw	r4,-16(fp)
   19fe0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   19fe4:	e0bffc17 	ldw	r2,-16(fp)
   19fe8:	1004803a 	cmplt	r2,r2,zero
   19fec:	1000081e 	bne	r2,zero,1a010 <fstat+0x44>
   19ff0:	e0bffc17 	ldw	r2,-16(fp)
   19ff4:	10800324 	muli	r2,r2,12
   19ff8:	1007883a 	mov	r3,r2
   19ffc:	00800174 	movhi	r2,5
   1a000:	10a2f804 	addi	r2,r2,-29728
   1a004:	1887883a 	add	r3,r3,r2
   1a008:	e0ffff15 	stw	r3,-4(fp)
   1a00c:	00000106 	br	1a014 <fstat+0x48>
   1a010:	e03fff15 	stw	zero,-4(fp)
   1a014:	e0bfff17 	ldw	r2,-4(fp)
   1a018:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1a01c:	e0bffb17 	ldw	r2,-20(fp)
   1a020:	1005003a 	cmpeq	r2,r2,zero
   1a024:	1000121e 	bne	r2,zero,1a070 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1a028:	e0bffb17 	ldw	r2,-20(fp)
   1a02c:	10800017 	ldw	r2,0(r2)
   1a030:	10800817 	ldw	r2,32(r2)
   1a034:	1005003a 	cmpeq	r2,r2,zero
   1a038:	1000081e 	bne	r2,zero,1a05c <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   1a03c:	e0bffb17 	ldw	r2,-20(fp)
   1a040:	10800017 	ldw	r2,0(r2)
   1a044:	10800817 	ldw	r2,32(r2)
   1a048:	e13ffb17 	ldw	r4,-20(fp)
   1a04c:	e17ffd17 	ldw	r5,-12(fp)
   1a050:	103ee83a 	callr	r2
   1a054:	e0bffe15 	stw	r2,-8(fp)
   1a058:	00000b06 	br	1a088 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1a05c:	e0fffd17 	ldw	r3,-12(fp)
   1a060:	00880004 	movi	r2,8192
   1a064:	18800115 	stw	r2,4(r3)
      return 0;
   1a068:	e03ffe15 	stw	zero,-8(fp)
   1a06c:	00000606 	br	1a088 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1a070:	001a0a00 	call	1a0a0 <alt_get_errno>
   1a074:	1007883a 	mov	r3,r2
   1a078:	00801444 	movi	r2,81
   1a07c:	18800015 	stw	r2,0(r3)
    return -1;
   1a080:	00bfffc4 	movi	r2,-1
   1a084:	e0bffe15 	stw	r2,-8(fp)
   1a088:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   1a08c:	e037883a 	mov	sp,fp
   1a090:	dfc00117 	ldw	ra,4(sp)
   1a094:	df000017 	ldw	fp,0(sp)
   1a098:	dec00204 	addi	sp,sp,8
   1a09c:	f800283a 	ret

0001a0a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a0a0:	defffd04 	addi	sp,sp,-12
   1a0a4:	dfc00215 	stw	ra,8(sp)
   1a0a8:	df000115 	stw	fp,4(sp)
   1a0ac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1a0b0:	00800174 	movhi	r2,5
   1a0b4:	10a77b04 	addi	r2,r2,-25108
   1a0b8:	10800017 	ldw	r2,0(r2)
   1a0bc:	1005003a 	cmpeq	r2,r2,zero
   1a0c0:	1000061e 	bne	r2,zero,1a0dc <alt_get_errno+0x3c>
   1a0c4:	00800174 	movhi	r2,5
   1a0c8:	10a77b04 	addi	r2,r2,-25108
   1a0cc:	10800017 	ldw	r2,0(r2)
   1a0d0:	103ee83a 	callr	r2
   1a0d4:	e0bfff15 	stw	r2,-4(fp)
   1a0d8:	00000306 	br	1a0e8 <alt_get_errno+0x48>
   1a0dc:	00800174 	movhi	r2,5
   1a0e0:	10a78b04 	addi	r2,r2,-25044
   1a0e4:	e0bfff15 	stw	r2,-4(fp)
   1a0e8:	e0bfff17 	ldw	r2,-4(fp)
}
   1a0ec:	e037883a 	mov	sp,fp
   1a0f0:	dfc00117 	ldw	ra,4(sp)
   1a0f4:	df000017 	ldw	fp,0(sp)
   1a0f8:	dec00204 	addi	sp,sp,8
   1a0fc:	f800283a 	ret

0001a100 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   1a100:	deffeb04 	addi	sp,sp,-84
   1a104:	dfc01415 	stw	ra,80(sp)
   1a108:	df001315 	stw	fp,76(sp)
   1a10c:	df001304 	addi	fp,sp,76
   1a110:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a114:	e0bffd17 	ldw	r2,-12(fp)
   1a118:	1004803a 	cmplt	r2,r2,zero
   1a11c:	1000081e 	bne	r2,zero,1a140 <isatty+0x40>
   1a120:	e0bffd17 	ldw	r2,-12(fp)
   1a124:	10800324 	muli	r2,r2,12
   1a128:	1007883a 	mov	r3,r2
   1a12c:	00800174 	movhi	r2,5
   1a130:	10a2f804 	addi	r2,r2,-29728
   1a134:	1887883a 	add	r3,r3,r2
   1a138:	e0ffff15 	stw	r3,-4(fp)
   1a13c:	00000106 	br	1a144 <isatty+0x44>
   1a140:	e03fff15 	stw	zero,-4(fp)
   1a144:	e0bfff17 	ldw	r2,-4(fp)
   1a148:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   1a14c:	e0bfed17 	ldw	r2,-76(fp)
   1a150:	1005003a 	cmpeq	r2,r2,zero
   1a154:	10000f1e 	bne	r2,zero,1a194 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1a158:	e0bfed17 	ldw	r2,-76(fp)
   1a15c:	10800017 	ldw	r2,0(r2)
   1a160:	10800817 	ldw	r2,32(r2)
   1a164:	1004c03a 	cmpne	r2,r2,zero
   1a168:	1000031e 	bne	r2,zero,1a178 <isatty+0x78>
    {
      return 1;
   1a16c:	00800044 	movi	r2,1
   1a170:	e0bffe15 	stw	r2,-8(fp)
   1a174:	00000c06 	br	1a1a8 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1a178:	e17fee04 	addi	r5,fp,-72
   1a17c:	e13ffd17 	ldw	r4,-12(fp)
   1a180:	0019fcc0 	call	19fcc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1a184:	e0bfef17 	ldw	r2,-68(fp)
   1a188:	10880020 	cmpeqi	r2,r2,8192
   1a18c:	e0bffe15 	stw	r2,-8(fp)
   1a190:	00000506 	br	1a1a8 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1a194:	001a1c00 	call	1a1c0 <alt_get_errno>
   1a198:	1007883a 	mov	r3,r2
   1a19c:	00801444 	movi	r2,81
   1a1a0:	18800015 	stw	r2,0(r3)
    return 0;
   1a1a4:	e03ffe15 	stw	zero,-8(fp)
   1a1a8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   1a1ac:	e037883a 	mov	sp,fp
   1a1b0:	dfc00117 	ldw	ra,4(sp)
   1a1b4:	df000017 	ldw	fp,0(sp)
   1a1b8:	dec00204 	addi	sp,sp,8
   1a1bc:	f800283a 	ret

0001a1c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a1c0:	defffd04 	addi	sp,sp,-12
   1a1c4:	dfc00215 	stw	ra,8(sp)
   1a1c8:	df000115 	stw	fp,4(sp)
   1a1cc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1a1d0:	00800174 	movhi	r2,5
   1a1d4:	10a77b04 	addi	r2,r2,-25108
   1a1d8:	10800017 	ldw	r2,0(r2)
   1a1dc:	1005003a 	cmpeq	r2,r2,zero
   1a1e0:	1000061e 	bne	r2,zero,1a1fc <alt_get_errno+0x3c>
   1a1e4:	00800174 	movhi	r2,5
   1a1e8:	10a77b04 	addi	r2,r2,-25108
   1a1ec:	10800017 	ldw	r2,0(r2)
   1a1f0:	103ee83a 	callr	r2
   1a1f4:	e0bfff15 	stw	r2,-4(fp)
   1a1f8:	00000306 	br	1a208 <alt_get_errno+0x48>
   1a1fc:	00800174 	movhi	r2,5
   1a200:	10a78b04 	addi	r2,r2,-25044
   1a204:	e0bfff15 	stw	r2,-4(fp)
   1a208:	e0bfff17 	ldw	r2,-4(fp)
}
   1a20c:	e037883a 	mov	sp,fp
   1a210:	dfc00117 	ldw	ra,4(sp)
   1a214:	df000017 	ldw	fp,0(sp)
   1a218:	dec00204 	addi	sp,sp,8
   1a21c:	f800283a 	ret

0001a220 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1a220:	defffe04 	addi	sp,sp,-8
   1a224:	dfc00115 	stw	ra,4(sp)
   1a228:	df000015 	stw	fp,0(sp)
   1a22c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1a230:	010000b4 	movhi	r4,2
   1a234:	21328f04 	addi	r4,r4,-13764
   1a238:	01400174 	movhi	r5,5
   1a23c:	2960e904 	addi	r5,r5,-31836
   1a240:	01800174 	movhi	r6,5
   1a244:	31a78004 	addi	r6,r6,-25088
   1a248:	001a2a00 	call	1a2a0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1a24c:	01000074 	movhi	r4,1
   1a250:	21000804 	addi	r4,r4,32
   1a254:	01400074 	movhi	r5,1
   1a258:	29400804 	addi	r5,r5,32
   1a25c:	01800074 	movhi	r6,1
   1a260:	31806d04 	addi	r6,r6,436
   1a264:	001a2a00 	call	1a2a0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1a268:	01000174 	movhi	r4,5
   1a26c:	21200004 	addi	r4,r4,-32768
   1a270:	01400174 	movhi	r5,5
   1a274:	29600004 	addi	r5,r5,-32768
   1a278:	01800174 	movhi	r6,5
   1a27c:	31a0e904 	addi	r6,r6,-31836
   1a280:	001a2a00 	call	1a2a0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1a284:	001b87c0 	call	1b87c <alt_dcache_flush_all>
  alt_icache_flush_all();
   1a288:	001ba740 	call	1ba74 <alt_icache_flush_all>
}
   1a28c:	e037883a 	mov	sp,fp
   1a290:	dfc00117 	ldw	ra,4(sp)
   1a294:	df000017 	ldw	fp,0(sp)
   1a298:	dec00204 	addi	sp,sp,8
   1a29c:	f800283a 	ret

0001a2a0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1a2a0:	defffc04 	addi	sp,sp,-16
   1a2a4:	df000315 	stw	fp,12(sp)
   1a2a8:	df000304 	addi	fp,sp,12
   1a2ac:	e13ffd15 	stw	r4,-12(fp)
   1a2b0:	e17ffe15 	stw	r5,-8(fp)
   1a2b4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1a2b8:	e0fffe17 	ldw	r3,-8(fp)
   1a2bc:	e0bffd17 	ldw	r2,-12(fp)
   1a2c0:	18800e26 	beq	r3,r2,1a2fc <alt_load_section+0x5c>
  {
    while( to != end )
   1a2c4:	00000a06 	br	1a2f0 <alt_load_section+0x50>
    {
      *to++ = *from++;
   1a2c8:	e0bffd17 	ldw	r2,-12(fp)
   1a2cc:	10c00017 	ldw	r3,0(r2)
   1a2d0:	e0bffe17 	ldw	r2,-8(fp)
   1a2d4:	10c00015 	stw	r3,0(r2)
   1a2d8:	e0bffe17 	ldw	r2,-8(fp)
   1a2dc:	10800104 	addi	r2,r2,4
   1a2e0:	e0bffe15 	stw	r2,-8(fp)
   1a2e4:	e0bffd17 	ldw	r2,-12(fp)
   1a2e8:	10800104 	addi	r2,r2,4
   1a2ec:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1a2f0:	e0fffe17 	ldw	r3,-8(fp)
   1a2f4:	e0bfff17 	ldw	r2,-4(fp)
   1a2f8:	18bff31e 	bne	r3,r2,1a2c8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   1a2fc:	e037883a 	mov	sp,fp
   1a300:	df000017 	ldw	fp,0(sp)
   1a304:	dec00104 	addi	sp,sp,4
   1a308:	f800283a 	ret

0001a30c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1a30c:	defff804 	addi	sp,sp,-32
   1a310:	dfc00715 	stw	ra,28(sp)
   1a314:	df000615 	stw	fp,24(sp)
   1a318:	df000604 	addi	fp,sp,24
   1a31c:	e13ffc15 	stw	r4,-16(fp)
   1a320:	e17ffd15 	stw	r5,-12(fp)
   1a324:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1a328:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a32c:	e0bffc17 	ldw	r2,-16(fp)
   1a330:	1004803a 	cmplt	r2,r2,zero
   1a334:	1000081e 	bne	r2,zero,1a358 <lseek+0x4c>
   1a338:	e0bffc17 	ldw	r2,-16(fp)
   1a33c:	10800324 	muli	r2,r2,12
   1a340:	1007883a 	mov	r3,r2
   1a344:	00800174 	movhi	r2,5
   1a348:	10a2f804 	addi	r2,r2,-29728
   1a34c:	1887883a 	add	r3,r3,r2
   1a350:	e0ffff15 	stw	r3,-4(fp)
   1a354:	00000106 	br	1a35c <lseek+0x50>
   1a358:	e03fff15 	stw	zero,-4(fp)
   1a35c:	e0bfff17 	ldw	r2,-4(fp)
   1a360:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   1a364:	e0bffb17 	ldw	r2,-20(fp)
   1a368:	1005003a 	cmpeq	r2,r2,zero
   1a36c:	1000111e 	bne	r2,zero,1a3b4 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1a370:	e0bffb17 	ldw	r2,-20(fp)
   1a374:	10800017 	ldw	r2,0(r2)
   1a378:	10800717 	ldw	r2,28(r2)
   1a37c:	1005003a 	cmpeq	r2,r2,zero
   1a380:	1000091e 	bne	r2,zero,1a3a8 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1a384:	e0bffb17 	ldw	r2,-20(fp)
   1a388:	10800017 	ldw	r2,0(r2)
   1a38c:	10800717 	ldw	r2,28(r2)
   1a390:	e13ffb17 	ldw	r4,-20(fp)
   1a394:	e17ffd17 	ldw	r5,-12(fp)
   1a398:	e1bffe17 	ldw	r6,-8(fp)
   1a39c:	103ee83a 	callr	r2
   1a3a0:	e0bffa15 	stw	r2,-24(fp)
   1a3a4:	00000506 	br	1a3bc <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1a3a8:	00bfde84 	movi	r2,-134
   1a3ac:	e0bffa15 	stw	r2,-24(fp)
   1a3b0:	00000206 	br	1a3bc <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   1a3b4:	00bfebc4 	movi	r2,-81
   1a3b8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   1a3bc:	e0bffa17 	ldw	r2,-24(fp)
   1a3c0:	1004403a 	cmpge	r2,r2,zero
   1a3c4:	1000071e 	bne	r2,zero,1a3e4 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   1a3c8:	001a3fc0 	call	1a3fc <alt_get_errno>
   1a3cc:	1007883a 	mov	r3,r2
   1a3d0:	e0bffa17 	ldw	r2,-24(fp)
   1a3d4:	0085c83a 	sub	r2,zero,r2
   1a3d8:	18800015 	stw	r2,0(r3)
    rc = -1;
   1a3dc:	00bfffc4 	movi	r2,-1
   1a3e0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   1a3e4:	e0bffa17 	ldw	r2,-24(fp)
}
   1a3e8:	e037883a 	mov	sp,fp
   1a3ec:	dfc00117 	ldw	ra,4(sp)
   1a3f0:	df000017 	ldw	fp,0(sp)
   1a3f4:	dec00204 	addi	sp,sp,8
   1a3f8:	f800283a 	ret

0001a3fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a3fc:	defffd04 	addi	sp,sp,-12
   1a400:	dfc00215 	stw	ra,8(sp)
   1a404:	df000115 	stw	fp,4(sp)
   1a408:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1a40c:	00800174 	movhi	r2,5
   1a410:	10a77b04 	addi	r2,r2,-25108
   1a414:	10800017 	ldw	r2,0(r2)
   1a418:	1005003a 	cmpeq	r2,r2,zero
   1a41c:	1000061e 	bne	r2,zero,1a438 <alt_get_errno+0x3c>
   1a420:	00800174 	movhi	r2,5
   1a424:	10a77b04 	addi	r2,r2,-25108
   1a428:	10800017 	ldw	r2,0(r2)
   1a42c:	103ee83a 	callr	r2
   1a430:	e0bfff15 	stw	r2,-4(fp)
   1a434:	00000306 	br	1a444 <alt_get_errno+0x48>
   1a438:	00800174 	movhi	r2,5
   1a43c:	10a78b04 	addi	r2,r2,-25044
   1a440:	e0bfff15 	stw	r2,-4(fp)
   1a444:	e0bfff17 	ldw	r2,-4(fp)
}
   1a448:	e037883a 	mov	sp,fp
   1a44c:	dfc00117 	ldw	ra,4(sp)
   1a450:	df000017 	ldw	fp,0(sp)
   1a454:	dec00204 	addi	sp,sp,8
   1a458:	f800283a 	ret

0001a45c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1a45c:	defffd04 	addi	sp,sp,-12
   1a460:	dfc00215 	stw	ra,8(sp)
   1a464:	df000115 	stw	fp,4(sp)
   1a468:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1a46c:	0009883a 	mov	r4,zero
   1a470:	001a9240 	call	1a924 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1a474:	001a9580 	call	1a958 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1a478:	01000174 	movhi	r4,5
   1a47c:	2120df04 	addi	r4,r4,-31876
   1a480:	01400174 	movhi	r5,5
   1a484:	2960df04 	addi	r5,r5,-31876
   1a488:	01800174 	movhi	r6,5
   1a48c:	31a0df04 	addi	r6,r6,-31876
   1a490:	001be340 	call	1be34 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1a494:	001b9ac0 	call	1b9ac <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1a498:	010000b4 	movhi	r4,2
   1a49c:	212e8404 	addi	r4,r4,-17904
   1a4a0:	001c6300 	call	1c630 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1a4a4:	d1201c17 	ldw	r4,-32656(gp)
   1a4a8:	d1601d17 	ldw	r5,-32652(gp)
   1a4ac:	d1a01e17 	ldw	r6,-32648(gp)
   1a4b0:	00105e00 	call	105e0 <main>
   1a4b4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1a4b8:	01000044 	movi	r4,1
   1a4bc:	0019e440 	call	19e44 <close>
  exit (result);
   1a4c0:	e13fff17 	ldw	r4,-4(fp)
   1a4c4:	001c6440 	call	1c644 <exit>

0001a4c8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1a4c8:	defffe04 	addi	sp,sp,-8
   1a4cc:	df000115 	stw	fp,4(sp)
   1a4d0:	df000104 	addi	fp,sp,4
   1a4d4:	e13fff15 	stw	r4,-4(fp)
}
   1a4d8:	e037883a 	mov	sp,fp
   1a4dc:	df000017 	ldw	fp,0(sp)
   1a4e0:	dec00104 	addi	sp,sp,4
   1a4e4:	f800283a 	ret

0001a4e8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1a4e8:	defffe04 	addi	sp,sp,-8
   1a4ec:	df000115 	stw	fp,4(sp)
   1a4f0:	df000104 	addi	fp,sp,4
   1a4f4:	e13fff15 	stw	r4,-4(fp)
}
   1a4f8:	e037883a 	mov	sp,fp
   1a4fc:	df000017 	ldw	fp,0(sp)
   1a500:	dec00104 	addi	sp,sp,4
   1a504:	f800283a 	ret

0001a508 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1a508:	defff704 	addi	sp,sp,-36
   1a50c:	dfc00815 	stw	ra,32(sp)
   1a510:	df000715 	stw	fp,28(sp)
   1a514:	df000704 	addi	fp,sp,28
   1a518:	e13ffb15 	stw	r4,-20(fp)
   1a51c:	e17ffc15 	stw	r5,-16(fp)
   1a520:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a524:	e0bffb17 	ldw	r2,-20(fp)
   1a528:	1004803a 	cmplt	r2,r2,zero
   1a52c:	1000081e 	bne	r2,zero,1a550 <read+0x48>
   1a530:	e0bffb17 	ldw	r2,-20(fp)
   1a534:	10800324 	muli	r2,r2,12
   1a538:	1007883a 	mov	r3,r2
   1a53c:	00800174 	movhi	r2,5
   1a540:	10a2f804 	addi	r2,r2,-29728
   1a544:	1887883a 	add	r3,r3,r2
   1a548:	e0ffff15 	stw	r3,-4(fp)
   1a54c:	00000106 	br	1a554 <read+0x4c>
   1a550:	e03fff15 	stw	zero,-4(fp)
   1a554:	e0bfff17 	ldw	r2,-4(fp)
   1a558:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   1a55c:	e0bffa17 	ldw	r2,-24(fp)
   1a560:	1005003a 	cmpeq	r2,r2,zero
   1a564:	1000241e 	bne	r2,zero,1a5f8 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1a568:	e0bffa17 	ldw	r2,-24(fp)
   1a56c:	10800217 	ldw	r2,8(r2)
   1a570:	108000cc 	andi	r2,r2,3
   1a574:	10800060 	cmpeqi	r2,r2,1
   1a578:	10001a1e 	bne	r2,zero,1a5e4 <read+0xdc>
   1a57c:	e0bffa17 	ldw	r2,-24(fp)
   1a580:	10800017 	ldw	r2,0(r2)
   1a584:	10800517 	ldw	r2,20(r2)
   1a588:	1005003a 	cmpeq	r2,r2,zero
   1a58c:	1000151e 	bne	r2,zero,1a5e4 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1a590:	e0bffa17 	ldw	r2,-24(fp)
   1a594:	10800017 	ldw	r2,0(r2)
   1a598:	10800517 	ldw	r2,20(r2)
   1a59c:	e17ffc17 	ldw	r5,-16(fp)
   1a5a0:	e1bffd17 	ldw	r6,-12(fp)
   1a5a4:	e13ffa17 	ldw	r4,-24(fp)
   1a5a8:	103ee83a 	callr	r2
   1a5ac:	e0bff915 	stw	r2,-28(fp)
   1a5b0:	e0bff917 	ldw	r2,-28(fp)
   1a5b4:	1004403a 	cmpge	r2,r2,zero
   1a5b8:	1000071e 	bne	r2,zero,1a5d8 <read+0xd0>
        {
          ALT_ERRNO = -rval;
   1a5bc:	001a6280 	call	1a628 <alt_get_errno>
   1a5c0:	e0fff917 	ldw	r3,-28(fp)
   1a5c4:	00c7c83a 	sub	r3,zero,r3
   1a5c8:	10c00015 	stw	r3,0(r2)
          return -1;
   1a5cc:	00bfffc4 	movi	r2,-1
   1a5d0:	e0bffe15 	stw	r2,-8(fp)
   1a5d4:	00000e06 	br	1a610 <read+0x108>
        }
        return rval;
   1a5d8:	e0bff917 	ldw	r2,-28(fp)
   1a5dc:	e0bffe15 	stw	r2,-8(fp)
   1a5e0:	00000b06 	br	1a610 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1a5e4:	001a6280 	call	1a628 <alt_get_errno>
   1a5e8:	1007883a 	mov	r3,r2
   1a5ec:	00800344 	movi	r2,13
   1a5f0:	18800015 	stw	r2,0(r3)
   1a5f4:	00000406 	br	1a608 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1a5f8:	001a6280 	call	1a628 <alt_get_errno>
   1a5fc:	1007883a 	mov	r3,r2
   1a600:	00801444 	movi	r2,81
   1a604:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1a608:	00bfffc4 	movi	r2,-1
   1a60c:	e0bffe15 	stw	r2,-8(fp)
   1a610:	e0bffe17 	ldw	r2,-8(fp)
}
   1a614:	e037883a 	mov	sp,fp
   1a618:	dfc00117 	ldw	ra,4(sp)
   1a61c:	df000017 	ldw	fp,0(sp)
   1a620:	dec00204 	addi	sp,sp,8
   1a624:	f800283a 	ret

0001a628 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a628:	defffd04 	addi	sp,sp,-12
   1a62c:	dfc00215 	stw	ra,8(sp)
   1a630:	df000115 	stw	fp,4(sp)
   1a634:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1a638:	00800174 	movhi	r2,5
   1a63c:	10a77b04 	addi	r2,r2,-25108
   1a640:	10800017 	ldw	r2,0(r2)
   1a644:	1005003a 	cmpeq	r2,r2,zero
   1a648:	1000061e 	bne	r2,zero,1a664 <alt_get_errno+0x3c>
   1a64c:	00800174 	movhi	r2,5
   1a650:	10a77b04 	addi	r2,r2,-25108
   1a654:	10800017 	ldw	r2,0(r2)
   1a658:	103ee83a 	callr	r2
   1a65c:	e0bfff15 	stw	r2,-4(fp)
   1a660:	00000306 	br	1a670 <alt_get_errno+0x48>
   1a664:	00800174 	movhi	r2,5
   1a668:	10a78b04 	addi	r2,r2,-25044
   1a66c:	e0bfff15 	stw	r2,-4(fp)
   1a670:	e0bfff17 	ldw	r2,-4(fp)
}
   1a674:	e037883a 	mov	sp,fp
   1a678:	dfc00117 	ldw	ra,4(sp)
   1a67c:	df000017 	ldw	fp,0(sp)
   1a680:	dec00204 	addi	sp,sp,8
   1a684:	f800283a 	ret

0001a688 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1a688:	defffe04 	addi	sp,sp,-8
   1a68c:	df000115 	stw	fp,4(sp)
   1a690:	df000104 	addi	fp,sp,4
   1a694:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   1a698:	e0bfff17 	ldw	r2,-4(fp)
   1a69c:	108000d0 	cmplti	r2,r2,3
   1a6a0:	10000d1e 	bne	r2,zero,1a6d8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   1a6a4:	e0bfff17 	ldw	r2,-4(fp)
   1a6a8:	00c00174 	movhi	r3,5
   1a6ac:	18e2f804 	addi	r3,r3,-29728
   1a6b0:	10800324 	muli	r2,r2,12
   1a6b4:	10c5883a 	add	r2,r2,r3
   1a6b8:	10800204 	addi	r2,r2,8
   1a6bc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1a6c0:	e0bfff17 	ldw	r2,-4(fp)
   1a6c4:	00c00174 	movhi	r3,5
   1a6c8:	18e2f804 	addi	r3,r3,-29728
   1a6cc:	10800324 	muli	r2,r2,12
   1a6d0:	10c5883a 	add	r2,r2,r3
   1a6d4:	10000015 	stw	zero,0(r2)
  }
}
   1a6d8:	e037883a 	mov	sp,fp
   1a6dc:	df000017 	ldw	fp,0(sp)
   1a6e0:	dec00104 	addi	sp,sp,4
   1a6e4:	f800283a 	ret

0001a6e8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1a6e8:	defff804 	addi	sp,sp,-32
   1a6ec:	df000715 	stw	fp,28(sp)
   1a6f0:	df000704 	addi	fp,sp,28
   1a6f4:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a6f8:	0005303a 	rdctl	r2,status
   1a6fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a700:	e0fffb17 	ldw	r3,-20(fp)
   1a704:	00bfff84 	movi	r2,-2
   1a708:	1884703a 	and	r2,r3,r2
   1a70c:	1001703a 	wrctl	status,r2
  
  return context;
   1a710:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1a714:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1a718:	d0a00c17 	ldw	r2,-32720(gp)
   1a71c:	10c000c4 	addi	r3,r2,3
   1a720:	00bfff04 	movi	r2,-4
   1a724:	1884703a 	and	r2,r3,r2
   1a728:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1a72c:	d0e00c17 	ldw	r3,-32720(gp)
   1a730:	e0bffe17 	ldw	r2,-8(fp)
   1a734:	1887883a 	add	r3,r3,r2
   1a738:	00800174 	movhi	r2,5
   1a73c:	10800004 	addi	r2,r2,0
   1a740:	10c0072e 	bgeu	r2,r3,1a760 <sbrk+0x78>
   1a744:	e0bffd17 	ldw	r2,-12(fp)
   1a748:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a74c:	e0bffa17 	ldw	r2,-24(fp)
   1a750:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1a754:	00bfffc4 	movi	r2,-1
   1a758:	e0bfff15 	stw	r2,-4(fp)
   1a75c:	00000c06 	br	1a790 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   1a760:	d0a00c17 	ldw	r2,-32720(gp)
   1a764:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   1a768:	d0e00c17 	ldw	r3,-32720(gp)
   1a76c:	e0bffe17 	ldw	r2,-8(fp)
   1a770:	1885883a 	add	r2,r3,r2
   1a774:	d0a00c15 	stw	r2,-32720(gp)
   1a778:	e0bffd17 	ldw	r2,-12(fp)
   1a77c:	e0bff915 	stw	r2,-28(fp)
   1a780:	e0bff917 	ldw	r2,-28(fp)
   1a784:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1a788:	e0bffc17 	ldw	r2,-16(fp)
   1a78c:	e0bfff15 	stw	r2,-4(fp)
   1a790:	e0bfff17 	ldw	r2,-4(fp)
} 
   1a794:	e037883a 	mov	sp,fp
   1a798:	df000017 	ldw	fp,0(sp)
   1a79c:	dec00104 	addi	sp,sp,4
   1a7a0:	f800283a 	ret

0001a7a4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1a7a4:	defff704 	addi	sp,sp,-36
   1a7a8:	dfc00815 	stw	ra,32(sp)
   1a7ac:	df000715 	stw	fp,28(sp)
   1a7b0:	df000704 	addi	fp,sp,28
   1a7b4:	e13ffb15 	stw	r4,-20(fp)
   1a7b8:	e17ffc15 	stw	r5,-16(fp)
   1a7bc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a7c0:	e0bffb17 	ldw	r2,-20(fp)
   1a7c4:	1004803a 	cmplt	r2,r2,zero
   1a7c8:	1000081e 	bne	r2,zero,1a7ec <write+0x48>
   1a7cc:	e0bffb17 	ldw	r2,-20(fp)
   1a7d0:	10800324 	muli	r2,r2,12
   1a7d4:	1007883a 	mov	r3,r2
   1a7d8:	00800174 	movhi	r2,5
   1a7dc:	10a2f804 	addi	r2,r2,-29728
   1a7e0:	1887883a 	add	r3,r3,r2
   1a7e4:	e0ffff15 	stw	r3,-4(fp)
   1a7e8:	00000106 	br	1a7f0 <write+0x4c>
   1a7ec:	e03fff15 	stw	zero,-4(fp)
   1a7f0:	e0bfff17 	ldw	r2,-4(fp)
   1a7f4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   1a7f8:	e0bffa17 	ldw	r2,-24(fp)
   1a7fc:	1005003a 	cmpeq	r2,r2,zero
   1a800:	1000241e 	bne	r2,zero,1a894 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1a804:	e0bffa17 	ldw	r2,-24(fp)
   1a808:	10800217 	ldw	r2,8(r2)
   1a80c:	108000cc 	andi	r2,r2,3
   1a810:	1005003a 	cmpeq	r2,r2,zero
   1a814:	10001a1e 	bne	r2,zero,1a880 <write+0xdc>
   1a818:	e0bffa17 	ldw	r2,-24(fp)
   1a81c:	10800017 	ldw	r2,0(r2)
   1a820:	10800617 	ldw	r2,24(r2)
   1a824:	1005003a 	cmpeq	r2,r2,zero
   1a828:	1000151e 	bne	r2,zero,1a880 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1a82c:	e0bffa17 	ldw	r2,-24(fp)
   1a830:	10800017 	ldw	r2,0(r2)
   1a834:	10800617 	ldw	r2,24(r2)
   1a838:	e17ffc17 	ldw	r5,-16(fp)
   1a83c:	e1bffd17 	ldw	r6,-12(fp)
   1a840:	e13ffa17 	ldw	r4,-24(fp)
   1a844:	103ee83a 	callr	r2
   1a848:	e0bff915 	stw	r2,-28(fp)
   1a84c:	e0bff917 	ldw	r2,-28(fp)
   1a850:	1004403a 	cmpge	r2,r2,zero
   1a854:	1000071e 	bne	r2,zero,1a874 <write+0xd0>
      {
        ALT_ERRNO = -rval;
   1a858:	001a8c40 	call	1a8c4 <alt_get_errno>
   1a85c:	e0fff917 	ldw	r3,-28(fp)
   1a860:	00c7c83a 	sub	r3,zero,r3
   1a864:	10c00015 	stw	r3,0(r2)
        return -1;
   1a868:	00bfffc4 	movi	r2,-1
   1a86c:	e0bffe15 	stw	r2,-8(fp)
   1a870:	00000e06 	br	1a8ac <write+0x108>
      }
      return rval;
   1a874:	e0bff917 	ldw	r2,-28(fp)
   1a878:	e0bffe15 	stw	r2,-8(fp)
   1a87c:	00000b06 	br	1a8ac <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1a880:	001a8c40 	call	1a8c4 <alt_get_errno>
   1a884:	1007883a 	mov	r3,r2
   1a888:	00800344 	movi	r2,13
   1a88c:	18800015 	stw	r2,0(r3)
   1a890:	00000406 	br	1a8a4 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1a894:	001a8c40 	call	1a8c4 <alt_get_errno>
   1a898:	1007883a 	mov	r3,r2
   1a89c:	00801444 	movi	r2,81
   1a8a0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1a8a4:	00bfffc4 	movi	r2,-1
   1a8a8:	e0bffe15 	stw	r2,-8(fp)
   1a8ac:	e0bffe17 	ldw	r2,-8(fp)
}
   1a8b0:	e037883a 	mov	sp,fp
   1a8b4:	dfc00117 	ldw	ra,4(sp)
   1a8b8:	df000017 	ldw	fp,0(sp)
   1a8bc:	dec00204 	addi	sp,sp,8
   1a8c0:	f800283a 	ret

0001a8c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a8c4:	defffd04 	addi	sp,sp,-12
   1a8c8:	dfc00215 	stw	ra,8(sp)
   1a8cc:	df000115 	stw	fp,4(sp)
   1a8d0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1a8d4:	00800174 	movhi	r2,5
   1a8d8:	10a77b04 	addi	r2,r2,-25108
   1a8dc:	10800017 	ldw	r2,0(r2)
   1a8e0:	1005003a 	cmpeq	r2,r2,zero
   1a8e4:	1000061e 	bne	r2,zero,1a900 <alt_get_errno+0x3c>
   1a8e8:	00800174 	movhi	r2,5
   1a8ec:	10a77b04 	addi	r2,r2,-25108
   1a8f0:	10800017 	ldw	r2,0(r2)
   1a8f4:	103ee83a 	callr	r2
   1a8f8:	e0bfff15 	stw	r2,-4(fp)
   1a8fc:	00000306 	br	1a90c <alt_get_errno+0x48>
   1a900:	00800174 	movhi	r2,5
   1a904:	10a78b04 	addi	r2,r2,-25044
   1a908:	e0bfff15 	stw	r2,-4(fp)
   1a90c:	e0bfff17 	ldw	r2,-4(fp)
}
   1a910:	e037883a 	mov	sp,fp
   1a914:	dfc00117 	ldw	ra,4(sp)
   1a918:	df000017 	ldw	fp,0(sp)
   1a91c:	dec00204 	addi	sp,sp,8
   1a920:	f800283a 	ret

0001a924 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1a924:	defffd04 	addi	sp,sp,-12
   1a928:	dfc00215 	stw	ra,8(sp)
   1a92c:	df000115 	stw	fp,4(sp)
   1a930:	df000104 	addi	fp,sp,4
   1a934:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU0, cpu0);
   1a938:	001c3140 	call	1c314 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1a93c:	00800044 	movi	r2,1
   1a940:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1a944:	e037883a 	mov	sp,fp
   1a948:	dfc00117 	ldw	ra,4(sp)
   1a94c:	df000017 	ldw	fp,0(sp)
   1a950:	dec00204 	addi	sp,sp,8
   1a954:	f800283a 	ret

0001a958 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1a958:	defffe04 	addi	sp,sp,-8
   1a95c:	dfc00115 	stw	ra,4(sp)
   1a960:	df000015 	stw	fp,0(sp)
   1a964:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIGH_SCALE_TIMER_0, high_scale_timer_0);
   1a968:	00c00174 	movhi	r3,5
   1a96c:	18e78f04 	addi	r3,r3,-25028
   1a970:	00800174 	movhi	r2,5
   1a974:	10840004 	addi	r2,r2,4096
   1a978:	18800015 	stw	r2,0(r3)
   1a97c:	00c00174 	movhi	r3,5
   1a980:	18e79004 	addi	r3,r3,-25024
   1a984:	0080bef4 	movhi	r2,763
   1a988:	10bc2004 	addi	r2,r2,-3968
   1a98c:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   1a990:	01000174 	movhi	r4,5
   1a994:	21040804 	addi	r4,r4,4128
   1a998:	000b883a 	mov	r5,zero
   1a99c:	01800044 	movi	r6,1
   1a9a0:	01c0fa04 	movi	r7,1000
   1a9a4:	001b5300 	call	1b530 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   1a9a8:	01000174 	movhi	r4,5
   1a9ac:	21236204 	addi	r4,r4,-29304
   1a9b0:	000b883a 	mov	r5,zero
   1a9b4:	01800404 	movi	r6,16
   1a9b8:	001ab5c0 	call	1ab5c <altera_avalon_jtag_uart_init>
   1a9bc:	01000174 	movhi	r4,5
   1a9c0:	21235804 	addi	r4,r4,-29344
   1a9c4:	001a9dc0 	call	1a9dc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
   1a9c8:	e037883a 	mov	sp,fp
   1a9cc:	dfc00117 	ldw	ra,4(sp)
   1a9d0:	df000017 	ldw	fp,0(sp)
   1a9d4:	dec00204 	addi	sp,sp,8
   1a9d8:	f800283a 	ret

0001a9dc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1a9dc:	defffd04 	addi	sp,sp,-12
   1a9e0:	dfc00215 	stw	ra,8(sp)
   1a9e4:	df000115 	stw	fp,4(sp)
   1a9e8:	df000104 	addi	fp,sp,4
   1a9ec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1a9f0:	e13fff17 	ldw	r4,-4(fp)
   1a9f4:	01400174 	movhi	r5,5
   1a9f8:	29677804 	addi	r5,r5,-25120
   1a9fc:	001b8980 	call	1b898 <alt_dev_llist_insert>
}
   1aa00:	e037883a 	mov	sp,fp
   1aa04:	dfc00117 	ldw	ra,4(sp)
   1aa08:	df000017 	ldw	fp,0(sp)
   1aa0c:	dec00204 	addi	sp,sp,8
   1aa10:	f800283a 	ret

0001aa14 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1aa14:	defffa04 	addi	sp,sp,-24
   1aa18:	dfc00515 	stw	ra,20(sp)
   1aa1c:	df000415 	stw	fp,16(sp)
   1aa20:	df000404 	addi	fp,sp,16
   1aa24:	e13ffd15 	stw	r4,-12(fp)
   1aa28:	e17ffe15 	stw	r5,-8(fp)
   1aa2c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1aa30:	e0bffd17 	ldw	r2,-12(fp)
   1aa34:	10800017 	ldw	r2,0(r2)
   1aa38:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1aa3c:	e0bffc17 	ldw	r2,-16(fp)
   1aa40:	11000a04 	addi	r4,r2,40
   1aa44:	e0bffd17 	ldw	r2,-12(fp)
   1aa48:	11c00217 	ldw	r7,8(r2)
   1aa4c:	e17ffe17 	ldw	r5,-8(fp)
   1aa50:	e1bfff17 	ldw	r6,-4(fp)
   1aa54:	001b05c0 	call	1b05c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1aa58:	e037883a 	mov	sp,fp
   1aa5c:	dfc00117 	ldw	ra,4(sp)
   1aa60:	df000017 	ldw	fp,0(sp)
   1aa64:	dec00204 	addi	sp,sp,8
   1aa68:	f800283a 	ret

0001aa6c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1aa6c:	defffa04 	addi	sp,sp,-24
   1aa70:	dfc00515 	stw	ra,20(sp)
   1aa74:	df000415 	stw	fp,16(sp)
   1aa78:	df000404 	addi	fp,sp,16
   1aa7c:	e13ffd15 	stw	r4,-12(fp)
   1aa80:	e17ffe15 	stw	r5,-8(fp)
   1aa84:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1aa88:	e0bffd17 	ldw	r2,-12(fp)
   1aa8c:	10800017 	ldw	r2,0(r2)
   1aa90:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1aa94:	e0bffc17 	ldw	r2,-16(fp)
   1aa98:	11000a04 	addi	r4,r2,40
   1aa9c:	e0bffd17 	ldw	r2,-12(fp)
   1aaa0:	11c00217 	ldw	r7,8(r2)
   1aaa4:	e17ffe17 	ldw	r5,-8(fp)
   1aaa8:	e1bfff17 	ldw	r6,-4(fp)
   1aaac:	001b2800 	call	1b280 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1aab0:	e037883a 	mov	sp,fp
   1aab4:	dfc00117 	ldw	ra,4(sp)
   1aab8:	df000017 	ldw	fp,0(sp)
   1aabc:	dec00204 	addi	sp,sp,8
   1aac0:	f800283a 	ret

0001aac4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1aac4:	defffc04 	addi	sp,sp,-16
   1aac8:	dfc00315 	stw	ra,12(sp)
   1aacc:	df000215 	stw	fp,8(sp)
   1aad0:	df000204 	addi	fp,sp,8
   1aad4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1aad8:	e0bfff17 	ldw	r2,-4(fp)
   1aadc:	10800017 	ldw	r2,0(r2)
   1aae0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1aae4:	e0bffe17 	ldw	r2,-8(fp)
   1aae8:	11000a04 	addi	r4,r2,40
   1aaec:	e0bfff17 	ldw	r2,-4(fp)
   1aaf0:	11400217 	ldw	r5,8(r2)
   1aaf4:	001aef40 	call	1aef4 <altera_avalon_jtag_uart_close>
}
   1aaf8:	e037883a 	mov	sp,fp
   1aafc:	dfc00117 	ldw	ra,4(sp)
   1ab00:	df000017 	ldw	fp,0(sp)
   1ab04:	dec00204 	addi	sp,sp,8
   1ab08:	f800283a 	ret

0001ab0c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1ab0c:	defffa04 	addi	sp,sp,-24
   1ab10:	dfc00515 	stw	ra,20(sp)
   1ab14:	df000415 	stw	fp,16(sp)
   1ab18:	df000404 	addi	fp,sp,16
   1ab1c:	e13ffd15 	stw	r4,-12(fp)
   1ab20:	e17ffe15 	stw	r5,-8(fp)
   1ab24:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1ab28:	e0bffd17 	ldw	r2,-12(fp)
   1ab2c:	10800017 	ldw	r2,0(r2)
   1ab30:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1ab34:	e0bffc17 	ldw	r2,-16(fp)
   1ab38:	11000a04 	addi	r4,r2,40
   1ab3c:	e17ffe17 	ldw	r5,-8(fp)
   1ab40:	e1bfff17 	ldw	r6,-4(fp)
   1ab44:	001af680 	call	1af68 <altera_avalon_jtag_uart_ioctl>
}
   1ab48:	e037883a 	mov	sp,fp
   1ab4c:	dfc00117 	ldw	ra,4(sp)
   1ab50:	df000017 	ldw	fp,0(sp)
   1ab54:	dec00204 	addi	sp,sp,8
   1ab58:	f800283a 	ret

0001ab5c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1ab5c:	defffa04 	addi	sp,sp,-24
   1ab60:	dfc00515 	stw	ra,20(sp)
   1ab64:	df000415 	stw	fp,16(sp)
   1ab68:	df000404 	addi	fp,sp,16
   1ab6c:	e13ffd15 	stw	r4,-12(fp)
   1ab70:	e17ffe15 	stw	r5,-8(fp)
   1ab74:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1ab78:	e0fffd17 	ldw	r3,-12(fp)
   1ab7c:	00800044 	movi	r2,1
   1ab80:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1ab84:	e0bffd17 	ldw	r2,-12(fp)
   1ab88:	10800017 	ldw	r2,0(r2)
   1ab8c:	11000104 	addi	r4,r2,4
   1ab90:	e0bffd17 	ldw	r2,-12(fp)
   1ab94:	10800817 	ldw	r2,32(r2)
   1ab98:	1007883a 	mov	r3,r2
   1ab9c:	2005883a 	mov	r2,r4
   1aba0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   1aba4:	e13ffe17 	ldw	r4,-8(fp)
   1aba8:	e17fff17 	ldw	r5,-4(fp)
   1abac:	d8000015 	stw	zero,0(sp)
   1abb0:	018000b4 	movhi	r6,2
   1abb4:	31ab0704 	addi	r6,r6,-21476
   1abb8:	e1fffd17 	ldw	r7,-12(fp)
   1abbc:	001baa40 	call	1baa4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1abc0:	e0bffd17 	ldw	r2,-12(fp)
   1abc4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1abc8:	e0bffd17 	ldw	r2,-12(fp)
   1abcc:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1abd0:	00800174 	movhi	r2,5
   1abd4:	10a79204 	addi	r2,r2,-25016
   1abd8:	10800017 	ldw	r2,0(r2)
   1abdc:	100b883a 	mov	r5,r2
   1abe0:	018000b4 	movhi	r6,2
   1abe4:	31ab9104 	addi	r6,r6,-20924
   1abe8:	e1fffd17 	ldw	r7,-12(fp)
   1abec:	001b7280 	call	1b728 <alt_alarm_start>
   1abf0:	1004403a 	cmpge	r2,r2,zero
   1abf4:	1000041e 	bne	r2,zero,1ac08 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1abf8:	e0fffd17 	ldw	r3,-12(fp)
   1abfc:	00a00034 	movhi	r2,32768
   1ac00:	10bfffc4 	addi	r2,r2,-1
   1ac04:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1ac08:	e037883a 	mov	sp,fp
   1ac0c:	dfc00117 	ldw	ra,4(sp)
   1ac10:	df000017 	ldw	fp,0(sp)
   1ac14:	dec00204 	addi	sp,sp,8
   1ac18:	f800283a 	ret

0001ac1c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1ac1c:	defff804 	addi	sp,sp,-32
   1ac20:	df000715 	stw	fp,28(sp)
   1ac24:	df000704 	addi	fp,sp,28
   1ac28:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1ac2c:	e0bfff17 	ldw	r2,-4(fp)
   1ac30:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   1ac34:	e0bffe17 	ldw	r2,-8(fp)
   1ac38:	10800017 	ldw	r2,0(r2)
   1ac3c:	e0bffd15 	stw	r2,-12(fp)
   1ac40:	00000006 	br	1ac44 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1ac44:	e0bffd17 	ldw	r2,-12(fp)
   1ac48:	10800104 	addi	r2,r2,4
   1ac4c:	10800037 	ldwio	r2,0(r2)
   1ac50:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1ac54:	e0bffc17 	ldw	r2,-16(fp)
   1ac58:	1080c00c 	andi	r2,r2,768
   1ac5c:	1005003a 	cmpeq	r2,r2,zero
   1ac60:	1000741e 	bne	r2,zero,1ae34 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1ac64:	e0bffc17 	ldw	r2,-16(fp)
   1ac68:	1080400c 	andi	r2,r2,256
   1ac6c:	1005003a 	cmpeq	r2,r2,zero
   1ac70:	1000351e 	bne	r2,zero,1ad48 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1ac74:	00800074 	movhi	r2,1
   1ac78:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1ac7c:	e0bffe17 	ldw	r2,-8(fp)
   1ac80:	10800a17 	ldw	r2,40(r2)
   1ac84:	10800044 	addi	r2,r2,1
   1ac88:	1081ffcc 	andi	r2,r2,2047
   1ac8c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   1ac90:	e0bffe17 	ldw	r2,-8(fp)
   1ac94:	10c00b17 	ldw	r3,44(r2)
   1ac98:	e0bffa17 	ldw	r2,-24(fp)
   1ac9c:	18801626 	beq	r3,r2,1acf8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1aca0:	e0bffd17 	ldw	r2,-12(fp)
   1aca4:	10800037 	ldwio	r2,0(r2)
   1aca8:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1acac:	e0bffb17 	ldw	r2,-20(fp)
   1acb0:	10a0000c 	andi	r2,r2,32768
   1acb4:	1005003a 	cmpeq	r2,r2,zero
   1acb8:	10000f1e 	bne	r2,zero,1acf8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1acbc:	e0bffe17 	ldw	r2,-8(fp)
   1acc0:	10c00a17 	ldw	r3,40(r2)
   1acc4:	e0bffb17 	ldw	r2,-20(fp)
   1acc8:	1009883a 	mov	r4,r2
   1accc:	e0bffe17 	ldw	r2,-8(fp)
   1acd0:	1885883a 	add	r2,r3,r2
   1acd4:	10800e04 	addi	r2,r2,56
   1acd8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1acdc:	e0bffe17 	ldw	r2,-8(fp)
   1ace0:	10800a17 	ldw	r2,40(r2)
   1ace4:	10800044 	addi	r2,r2,1
   1ace8:	10c1ffcc 	andi	r3,r2,2047
   1acec:	e0bffe17 	ldw	r2,-8(fp)
   1acf0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   1acf4:	003fe106 	br	1ac7c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1acf8:	e0bffb17 	ldw	r2,-20(fp)
   1acfc:	10bfffec 	andhi	r2,r2,65535
   1ad00:	1005003a 	cmpeq	r2,r2,zero
   1ad04:	1000101e 	bne	r2,zero,1ad48 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1ad08:	e0bffe17 	ldw	r2,-8(fp)
   1ad0c:	10c00817 	ldw	r3,32(r2)
   1ad10:	00bfff84 	movi	r2,-2
   1ad14:	1886703a 	and	r3,r3,r2
   1ad18:	e0bffe17 	ldw	r2,-8(fp)
   1ad1c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1ad20:	e0bffd17 	ldw	r2,-12(fp)
   1ad24:	11000104 	addi	r4,r2,4
   1ad28:	e0bffe17 	ldw	r2,-8(fp)
   1ad2c:	10800817 	ldw	r2,32(r2)
   1ad30:	1007883a 	mov	r3,r2
   1ad34:	2005883a 	mov	r2,r4
   1ad38:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1ad3c:	e0bffd17 	ldw	r2,-12(fp)
   1ad40:	10800104 	addi	r2,r2,4
   1ad44:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1ad48:	e0bffc17 	ldw	r2,-16(fp)
   1ad4c:	1080800c 	andi	r2,r2,512
   1ad50:	1005003a 	cmpeq	r2,r2,zero
   1ad54:	103fbb1e 	bne	r2,zero,1ac44 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1ad58:	e0bffc17 	ldw	r2,-16(fp)
   1ad5c:	10bfffec 	andhi	r2,r2,65535
   1ad60:	1004d43a 	srli	r2,r2,16
   1ad64:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1ad68:	00001506 	br	1adc0 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1ad6c:	e13ffd17 	ldw	r4,-12(fp)
   1ad70:	e0bffe17 	ldw	r2,-8(fp)
   1ad74:	10c00d17 	ldw	r3,52(r2)
   1ad78:	e0bffe17 	ldw	r2,-8(fp)
   1ad7c:	1885883a 	add	r2,r3,r2
   1ad80:	10820e04 	addi	r2,r2,2104
   1ad84:	10800003 	ldbu	r2,0(r2)
   1ad88:	10c03fcc 	andi	r3,r2,255
   1ad8c:	18c0201c 	xori	r3,r3,128
   1ad90:	18ffe004 	addi	r3,r3,-128
   1ad94:	2005883a 	mov	r2,r4
   1ad98:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1ad9c:	e0bffe17 	ldw	r2,-8(fp)
   1ada0:	10800d17 	ldw	r2,52(r2)
   1ada4:	10800044 	addi	r2,r2,1
   1ada8:	10c1ffcc 	andi	r3,r2,2047
   1adac:	e0bffe17 	ldw	r2,-8(fp)
   1adb0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   1adb4:	e0bff917 	ldw	r2,-28(fp)
   1adb8:	10bfffc4 	addi	r2,r2,-1
   1adbc:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1adc0:	e0bff917 	ldw	r2,-28(fp)
   1adc4:	1005003a 	cmpeq	r2,r2,zero
   1adc8:	1000051e 	bne	r2,zero,1ade0 <altera_avalon_jtag_uart_irq+0x1c4>
   1adcc:	e0bffe17 	ldw	r2,-8(fp)
   1add0:	10c00d17 	ldw	r3,52(r2)
   1add4:	e0bffe17 	ldw	r2,-8(fp)
   1add8:	10800c17 	ldw	r2,48(r2)
   1addc:	18bfe31e 	bne	r3,r2,1ad6c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1ade0:	e0bff917 	ldw	r2,-28(fp)
   1ade4:	1005003a 	cmpeq	r2,r2,zero
   1ade8:	103f961e 	bne	r2,zero,1ac44 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1adec:	e0bffe17 	ldw	r2,-8(fp)
   1adf0:	10c00817 	ldw	r3,32(r2)
   1adf4:	00bfff44 	movi	r2,-3
   1adf8:	1886703a 	and	r3,r3,r2
   1adfc:	e0bffe17 	ldw	r2,-8(fp)
   1ae00:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1ae04:	e0bffe17 	ldw	r2,-8(fp)
   1ae08:	10800017 	ldw	r2,0(r2)
   1ae0c:	11000104 	addi	r4,r2,4
   1ae10:	e0bffe17 	ldw	r2,-8(fp)
   1ae14:	10800817 	ldw	r2,32(r2)
   1ae18:	1007883a 	mov	r3,r2
   1ae1c:	2005883a 	mov	r2,r4
   1ae20:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1ae24:	e0bffd17 	ldw	r2,-12(fp)
   1ae28:	10800104 	addi	r2,r2,4
   1ae2c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1ae30:	003f8406 	br	1ac44 <altera_avalon_jtag_uart_irq+0x28>
}
   1ae34:	e037883a 	mov	sp,fp
   1ae38:	df000017 	ldw	fp,0(sp)
   1ae3c:	dec00104 	addi	sp,sp,4
   1ae40:	f800283a 	ret

0001ae44 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1ae44:	defffc04 	addi	sp,sp,-16
   1ae48:	df000315 	stw	fp,12(sp)
   1ae4c:	df000304 	addi	fp,sp,12
   1ae50:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1ae54:	e0bfff17 	ldw	r2,-4(fp)
   1ae58:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1ae5c:	e0bffe17 	ldw	r2,-8(fp)
   1ae60:	10800017 	ldw	r2,0(r2)
   1ae64:	10800104 	addi	r2,r2,4
   1ae68:	10800037 	ldwio	r2,0(r2)
   1ae6c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1ae70:	e0bffd17 	ldw	r2,-12(fp)
   1ae74:	1081000c 	andi	r2,r2,1024
   1ae78:	1005003a 	cmpeq	r2,r2,zero
   1ae7c:	10000c1e 	bne	r2,zero,1aeb0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1ae80:	e0bffe17 	ldw	r2,-8(fp)
   1ae84:	10800017 	ldw	r2,0(r2)
   1ae88:	11000104 	addi	r4,r2,4
   1ae8c:	e0bffe17 	ldw	r2,-8(fp)
   1ae90:	10800817 	ldw	r2,32(r2)
   1ae94:	10810014 	ori	r2,r2,1024
   1ae98:	1007883a 	mov	r3,r2
   1ae9c:	2005883a 	mov	r2,r4
   1aea0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   1aea4:	e0bffe17 	ldw	r2,-8(fp)
   1aea8:	10000915 	stw	zero,36(r2)
   1aeac:	00000a06 	br	1aed8 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1aeb0:	e0bffe17 	ldw	r2,-8(fp)
   1aeb4:	10c00917 	ldw	r3,36(r2)
   1aeb8:	00a00034 	movhi	r2,32768
   1aebc:	10bfff04 	addi	r2,r2,-4
   1aec0:	10c00536 	bltu	r2,r3,1aed8 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   1aec4:	e0bffe17 	ldw	r2,-8(fp)
   1aec8:	10800917 	ldw	r2,36(r2)
   1aecc:	10c00044 	addi	r3,r2,1
   1aed0:	e0bffe17 	ldw	r2,-8(fp)
   1aed4:	10c00915 	stw	r3,36(r2)
   1aed8:	00800174 	movhi	r2,5
   1aedc:	10a79204 	addi	r2,r2,-25016
   1aee0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   1aee4:	e037883a 	mov	sp,fp
   1aee8:	df000017 	ldw	fp,0(sp)
   1aeec:	dec00104 	addi	sp,sp,4
   1aef0:	f800283a 	ret

0001aef4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1aef4:	defffc04 	addi	sp,sp,-16
   1aef8:	df000315 	stw	fp,12(sp)
   1aefc:	df000304 	addi	fp,sp,12
   1af00:	e13ffd15 	stw	r4,-12(fp)
   1af04:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1af08:	00000706 	br	1af28 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   1af0c:	e0bffe17 	ldw	r2,-8(fp)
   1af10:	1090000c 	andi	r2,r2,16384
   1af14:	1005003a 	cmpeq	r2,r2,zero
   1af18:	1000031e 	bne	r2,zero,1af28 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   1af1c:	00bffd44 	movi	r2,-11
   1af20:	e0bfff15 	stw	r2,-4(fp)
   1af24:	00000b06 	br	1af54 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1af28:	e0bffd17 	ldw	r2,-12(fp)
   1af2c:	10c00d17 	ldw	r3,52(r2)
   1af30:	e0bffd17 	ldw	r2,-12(fp)
   1af34:	10800c17 	ldw	r2,48(r2)
   1af38:	18800526 	beq	r3,r2,1af50 <altera_avalon_jtag_uart_close+0x5c>
   1af3c:	e0bffd17 	ldw	r2,-12(fp)
   1af40:	10c00917 	ldw	r3,36(r2)
   1af44:	e0bffd17 	ldw	r2,-12(fp)
   1af48:	10800117 	ldw	r2,4(r2)
   1af4c:	18bfef36 	bltu	r3,r2,1af0c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1af50:	e03fff15 	stw	zero,-4(fp)
   1af54:	e0bfff17 	ldw	r2,-4(fp)
}
   1af58:	e037883a 	mov	sp,fp
   1af5c:	df000017 	ldw	fp,0(sp)
   1af60:	dec00104 	addi	sp,sp,4
   1af64:	f800283a 	ret

0001af68 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1af68:	defff804 	addi	sp,sp,-32
   1af6c:	df000715 	stw	fp,28(sp)
   1af70:	df000704 	addi	fp,sp,28
   1af74:	e13ffb15 	stw	r4,-20(fp)
   1af78:	e17ffc15 	stw	r5,-16(fp)
   1af7c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   1af80:	00bff9c4 	movi	r2,-25
   1af84:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   1af88:	e0bffc17 	ldw	r2,-16(fp)
   1af8c:	e0bfff15 	stw	r2,-4(fp)
   1af90:	e0ffff17 	ldw	r3,-4(fp)
   1af94:	189a8060 	cmpeqi	r2,r3,27137
   1af98:	1000041e 	bne	r2,zero,1afac <altera_avalon_jtag_uart_ioctl+0x44>
   1af9c:	e0ffff17 	ldw	r3,-4(fp)
   1afa0:	189a80a0 	cmpeqi	r2,r3,27138
   1afa4:	10001b1e 	bne	r2,zero,1b014 <altera_avalon_jtag_uart_ioctl+0xac>
   1afa8:	00002706 	br	1b048 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1afac:	e0bffb17 	ldw	r2,-20(fp)
   1afb0:	10c00117 	ldw	r3,4(r2)
   1afb4:	00a00034 	movhi	r2,32768
   1afb8:	10bfffc4 	addi	r2,r2,-1
   1afbc:	18802226 	beq	r3,r2,1b048 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   1afc0:	e0bffd17 	ldw	r2,-12(fp)
   1afc4:	10800017 	ldw	r2,0(r2)
   1afc8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1afcc:	e0bff917 	ldw	r2,-28(fp)
   1afd0:	10800090 	cmplti	r2,r2,2
   1afd4:	1000071e 	bne	r2,zero,1aff4 <altera_avalon_jtag_uart_ioctl+0x8c>
   1afd8:	e0fff917 	ldw	r3,-28(fp)
   1afdc:	00a00034 	movhi	r2,32768
   1afe0:	10bfffc4 	addi	r2,r2,-1
   1afe4:	18800326 	beq	r3,r2,1aff4 <altera_avalon_jtag_uart_ioctl+0x8c>
   1afe8:	e0bff917 	ldw	r2,-28(fp)
   1afec:	e0bffe15 	stw	r2,-8(fp)
   1aff0:	00000306 	br	1b000 <altera_avalon_jtag_uart_ioctl+0x98>
   1aff4:	00e00034 	movhi	r3,32768
   1aff8:	18ffff84 	addi	r3,r3,-2
   1affc:	e0fffe15 	stw	r3,-8(fp)
   1b000:	e0bffb17 	ldw	r2,-20(fp)
   1b004:	e0fffe17 	ldw	r3,-8(fp)
   1b008:	10c00115 	stw	r3,4(r2)
      rc = 0;
   1b00c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   1b010:	00000d06 	br	1b048 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1b014:	e0bffb17 	ldw	r2,-20(fp)
   1b018:	10c00117 	ldw	r3,4(r2)
   1b01c:	00a00034 	movhi	r2,32768
   1b020:	10bfffc4 	addi	r2,r2,-1
   1b024:	18800826 	beq	r3,r2,1b048 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1b028:	e13ffd17 	ldw	r4,-12(fp)
   1b02c:	e0bffb17 	ldw	r2,-20(fp)
   1b030:	10c00917 	ldw	r3,36(r2)
   1b034:	e0bffb17 	ldw	r2,-20(fp)
   1b038:	10800117 	ldw	r2,4(r2)
   1b03c:	1885803a 	cmpltu	r2,r3,r2
   1b040:	20800015 	stw	r2,0(r4)
      rc = 0;
   1b044:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   1b048:	e0bffa17 	ldw	r2,-24(fp)
}
   1b04c:	e037883a 	mov	sp,fp
   1b050:	df000017 	ldw	fp,0(sp)
   1b054:	dec00104 	addi	sp,sp,4
   1b058:	f800283a 	ret

0001b05c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1b05c:	defff204 	addi	sp,sp,-56
   1b060:	dfc00d15 	stw	ra,52(sp)
   1b064:	df000c15 	stw	fp,48(sp)
   1b068:	df000c04 	addi	fp,sp,48
   1b06c:	e13ffb15 	stw	r4,-20(fp)
   1b070:	e17ffc15 	stw	r5,-16(fp)
   1b074:	e1bffd15 	stw	r6,-12(fp)
   1b078:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   1b07c:	e0bffc17 	ldw	r2,-16(fp)
   1b080:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1b084:	00004806 	br	1b1a8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1b088:	e0bffb17 	ldw	r2,-20(fp)
   1b08c:	10800a17 	ldw	r2,40(r2)
   1b090:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   1b094:	e0bffb17 	ldw	r2,-20(fp)
   1b098:	10800b17 	ldw	r2,44(r2)
   1b09c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   1b0a0:	e0fff717 	ldw	r3,-36(fp)
   1b0a4:	e0bff617 	ldw	r2,-40(fp)
   1b0a8:	18800536 	bltu	r3,r2,1b0c0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1b0ac:	e0bff717 	ldw	r2,-36(fp)
   1b0b0:	e0fff617 	ldw	r3,-40(fp)
   1b0b4:	10c5c83a 	sub	r2,r2,r3
   1b0b8:	e0bff815 	stw	r2,-32(fp)
   1b0bc:	00000406 	br	1b0d0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1b0c0:	00820004 	movi	r2,2048
   1b0c4:	e0fff617 	ldw	r3,-40(fp)
   1b0c8:	10c5c83a 	sub	r2,r2,r3
   1b0cc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   1b0d0:	e0bff817 	ldw	r2,-32(fp)
   1b0d4:	1005003a 	cmpeq	r2,r2,zero
   1b0d8:	10001f1e 	bne	r2,zero,1b158 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   1b0dc:	e0fffd17 	ldw	r3,-12(fp)
   1b0e0:	e0bff817 	ldw	r2,-32(fp)
   1b0e4:	1880022e 	bgeu	r3,r2,1b0f0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   1b0e8:	e0bffd17 	ldw	r2,-12(fp)
   1b0ec:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1b0f0:	e0bffb17 	ldw	r2,-20(fp)
   1b0f4:	10c00e04 	addi	r3,r2,56
   1b0f8:	e0bff617 	ldw	r2,-40(fp)
   1b0fc:	1887883a 	add	r3,r3,r2
   1b100:	e0bffa17 	ldw	r2,-24(fp)
   1b104:	1009883a 	mov	r4,r2
   1b108:	180b883a 	mov	r5,r3
   1b10c:	e1bff817 	ldw	r6,-32(fp)
   1b110:	0015a980 	call	15a98 <memcpy>
      ptr   += n;
   1b114:	e0fff817 	ldw	r3,-32(fp)
   1b118:	e0bffa17 	ldw	r2,-24(fp)
   1b11c:	10c5883a 	add	r2,r2,r3
   1b120:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   1b124:	e0fffd17 	ldw	r3,-12(fp)
   1b128:	e0bff817 	ldw	r2,-32(fp)
   1b12c:	1885c83a 	sub	r2,r3,r2
   1b130:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b134:	e0fff617 	ldw	r3,-40(fp)
   1b138:	e0bff817 	ldw	r2,-32(fp)
   1b13c:	1885883a 	add	r2,r3,r2
   1b140:	10c1ffcc 	andi	r3,r2,2047
   1b144:	e0bffb17 	ldw	r2,-20(fp)
   1b148:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   1b14c:	e0bffd17 	ldw	r2,-12(fp)
   1b150:	10800048 	cmpgei	r2,r2,1
   1b154:	103fcc1e 	bne	r2,zero,1b088 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   1b158:	e0fffa17 	ldw	r3,-24(fp)
   1b15c:	e0bffc17 	ldw	r2,-16(fp)
   1b160:	1880141e 	bne	r3,r2,1b1b4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1b164:	e0bffe17 	ldw	r2,-8(fp)
   1b168:	1090000c 	andi	r2,r2,16384
   1b16c:	1004c03a 	cmpne	r2,r2,zero
   1b170:	1000101e 	bne	r2,zero,1b1b4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1b174:	e0bffb17 	ldw	r2,-20(fp)
   1b178:	10c00a17 	ldw	r3,40(r2)
   1b17c:	e0bff717 	ldw	r2,-36(fp)
   1b180:	1880051e 	bne	r3,r2,1b198 <altera_avalon_jtag_uart_read+0x13c>
   1b184:	e0bffb17 	ldw	r2,-20(fp)
   1b188:	10c00917 	ldw	r3,36(r2)
   1b18c:	e0bffb17 	ldw	r2,-20(fp)
   1b190:	10800117 	ldw	r2,4(r2)
   1b194:	18bff736 	bltu	r3,r2,1b174 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1b198:	e0bffb17 	ldw	r2,-20(fp)
   1b19c:	10c00a17 	ldw	r3,40(r2)
   1b1a0:	e0bff717 	ldw	r2,-36(fp)
   1b1a4:	18800326 	beq	r3,r2,1b1b4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1b1a8:	e0bffd17 	ldw	r2,-12(fp)
   1b1ac:	10800048 	cmpgei	r2,r2,1
   1b1b0:	103fb51e 	bne	r2,zero,1b088 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1b1b4:	e0fffa17 	ldw	r3,-24(fp)
   1b1b8:	e0bffc17 	ldw	r2,-16(fp)
   1b1bc:	18801926 	beq	r3,r2,1b224 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b1c0:	0005303a 	rdctl	r2,status
   1b1c4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b1c8:	e0fff517 	ldw	r3,-44(fp)
   1b1cc:	00bfff84 	movi	r2,-2
   1b1d0:	1884703a 	and	r2,r3,r2
   1b1d4:	1001703a 	wrctl	status,r2
  
  return context;
   1b1d8:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1b1dc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1b1e0:	e0bffb17 	ldw	r2,-20(fp)
   1b1e4:	10800817 	ldw	r2,32(r2)
   1b1e8:	10c00054 	ori	r3,r2,1
   1b1ec:	e0bffb17 	ldw	r2,-20(fp)
   1b1f0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1b1f4:	e0bffb17 	ldw	r2,-20(fp)
   1b1f8:	10800017 	ldw	r2,0(r2)
   1b1fc:	11000104 	addi	r4,r2,4
   1b200:	e0bffb17 	ldw	r2,-20(fp)
   1b204:	10800817 	ldw	r2,32(r2)
   1b208:	1007883a 	mov	r3,r2
   1b20c:	2005883a 	mov	r2,r4
   1b210:	10c00035 	stwio	r3,0(r2)
   1b214:	e0bff917 	ldw	r2,-28(fp)
   1b218:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b21c:	e0bff417 	ldw	r2,-48(fp)
   1b220:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1b224:	e0fffa17 	ldw	r3,-24(fp)
   1b228:	e0bffc17 	ldw	r2,-16(fp)
   1b22c:	18800526 	beq	r3,r2,1b244 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   1b230:	e0fffa17 	ldw	r3,-24(fp)
   1b234:	e0bffc17 	ldw	r2,-16(fp)
   1b238:	1887c83a 	sub	r3,r3,r2
   1b23c:	e0ffff15 	stw	r3,-4(fp)
   1b240:	00000906 	br	1b268 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   1b244:	e0bffe17 	ldw	r2,-8(fp)
   1b248:	1090000c 	andi	r2,r2,16384
   1b24c:	1005003a 	cmpeq	r2,r2,zero
   1b250:	1000031e 	bne	r2,zero,1b260 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   1b254:	00bffd44 	movi	r2,-11
   1b258:	e0bfff15 	stw	r2,-4(fp)
   1b25c:	00000206 	br	1b268 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   1b260:	00bffec4 	movi	r2,-5
   1b264:	e0bfff15 	stw	r2,-4(fp)
   1b268:	e0bfff17 	ldw	r2,-4(fp)
}
   1b26c:	e037883a 	mov	sp,fp
   1b270:	dfc00117 	ldw	ra,4(sp)
   1b274:	df000017 	ldw	fp,0(sp)
   1b278:	dec00204 	addi	sp,sp,8
   1b27c:	f800283a 	ret

0001b280 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1b280:	defff204 	addi	sp,sp,-56
   1b284:	dfc00d15 	stw	ra,52(sp)
   1b288:	df000c15 	stw	fp,48(sp)
   1b28c:	df000c04 	addi	fp,sp,48
   1b290:	e13ffb15 	stw	r4,-20(fp)
   1b294:	e17ffc15 	stw	r5,-16(fp)
   1b298:	e1bffd15 	stw	r6,-12(fp)
   1b29c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1b2a0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1b2a4:	e0bffc17 	ldw	r2,-16(fp)
   1b2a8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1b2ac:	00003a06 	br	1b398 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1b2b0:	e0bffb17 	ldw	r2,-20(fp)
   1b2b4:	10800c17 	ldw	r2,48(r2)
   1b2b8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   1b2bc:	e0bffb17 	ldw	r2,-20(fp)
   1b2c0:	10800d17 	ldw	r2,52(r2)
   1b2c4:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   1b2c8:	e0fffa17 	ldw	r3,-24(fp)
   1b2cc:	e0bff917 	ldw	r2,-28(fp)
   1b2d0:	1880062e 	bgeu	r3,r2,1b2ec <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1b2d4:	e0fff917 	ldw	r3,-28(fp)
   1b2d8:	e0bffa17 	ldw	r2,-24(fp)
   1b2dc:	1885c83a 	sub	r2,r3,r2
   1b2e0:	10bfffc4 	addi	r2,r2,-1
   1b2e4:	e0bff815 	stw	r2,-32(fp)
   1b2e8:	00000c06 	br	1b31c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   1b2ec:	e0bff917 	ldw	r2,-28(fp)
   1b2f0:	1005003a 	cmpeq	r2,r2,zero
   1b2f4:	1000051e 	bne	r2,zero,1b30c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1b2f8:	00820004 	movi	r2,2048
   1b2fc:	e0fffa17 	ldw	r3,-24(fp)
   1b300:	10c5c83a 	sub	r2,r2,r3
   1b304:	e0bff815 	stw	r2,-32(fp)
   1b308:	00000406 	br	1b31c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1b30c:	0081ffc4 	movi	r2,2047
   1b310:	e0fffa17 	ldw	r3,-24(fp)
   1b314:	10c5c83a 	sub	r2,r2,r3
   1b318:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   1b31c:	e0bff817 	ldw	r2,-32(fp)
   1b320:	1005003a 	cmpeq	r2,r2,zero
   1b324:	10001f1e 	bne	r2,zero,1b3a4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   1b328:	e0fffd17 	ldw	r3,-12(fp)
   1b32c:	e0bff817 	ldw	r2,-32(fp)
   1b330:	1880022e 	bgeu	r3,r2,1b33c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   1b334:	e0bffd17 	ldw	r2,-12(fp)
   1b338:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1b33c:	e0bffb17 	ldw	r2,-20(fp)
   1b340:	10c20e04 	addi	r3,r2,2104
   1b344:	e0bffa17 	ldw	r2,-24(fp)
   1b348:	1885883a 	add	r2,r3,r2
   1b34c:	e0fffc17 	ldw	r3,-16(fp)
   1b350:	1009883a 	mov	r4,r2
   1b354:	180b883a 	mov	r5,r3
   1b358:	e1bff817 	ldw	r6,-32(fp)
   1b35c:	0015a980 	call	15a98 <memcpy>
      ptr   += n;
   1b360:	e0fff817 	ldw	r3,-32(fp)
   1b364:	e0bffc17 	ldw	r2,-16(fp)
   1b368:	10c5883a 	add	r2,r2,r3
   1b36c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   1b370:	e0fffd17 	ldw	r3,-12(fp)
   1b374:	e0bff817 	ldw	r2,-32(fp)
   1b378:	1885c83a 	sub	r2,r3,r2
   1b37c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b380:	e0fffa17 	ldw	r3,-24(fp)
   1b384:	e0bff817 	ldw	r2,-32(fp)
   1b388:	1885883a 	add	r2,r3,r2
   1b38c:	10c1ffcc 	andi	r3,r2,2047
   1b390:	e0bffb17 	ldw	r2,-20(fp)
   1b394:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1b398:	e0bffd17 	ldw	r2,-12(fp)
   1b39c:	10800048 	cmpgei	r2,r2,1
   1b3a0:	103fc31e 	bne	r2,zero,1b2b0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b3a4:	0005303a 	rdctl	r2,status
   1b3a8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b3ac:	e0fff517 	ldw	r3,-44(fp)
   1b3b0:	00bfff84 	movi	r2,-2
   1b3b4:	1884703a 	and	r2,r3,r2
   1b3b8:	1001703a 	wrctl	status,r2
  
  return context;
   1b3bc:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1b3c0:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1b3c4:	e0bffb17 	ldw	r2,-20(fp)
   1b3c8:	10800817 	ldw	r2,32(r2)
   1b3cc:	10c00094 	ori	r3,r2,2
   1b3d0:	e0bffb17 	ldw	r2,-20(fp)
   1b3d4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1b3d8:	e0bffb17 	ldw	r2,-20(fp)
   1b3dc:	10800017 	ldw	r2,0(r2)
   1b3e0:	11000104 	addi	r4,r2,4
   1b3e4:	e0bffb17 	ldw	r2,-20(fp)
   1b3e8:	10800817 	ldw	r2,32(r2)
   1b3ec:	1007883a 	mov	r3,r2
   1b3f0:	2005883a 	mov	r2,r4
   1b3f4:	10c00035 	stwio	r3,0(r2)
   1b3f8:	e0bff717 	ldw	r2,-36(fp)
   1b3fc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b400:	e0bff417 	ldw	r2,-48(fp)
   1b404:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1b408:	e0bffd17 	ldw	r2,-12(fp)
   1b40c:	10800050 	cmplti	r2,r2,1
   1b410:	1000111e 	bne	r2,zero,1b458 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   1b414:	e0bffe17 	ldw	r2,-8(fp)
   1b418:	1090000c 	andi	r2,r2,16384
   1b41c:	1004c03a 	cmpne	r2,r2,zero
   1b420:	1000101e 	bne	r2,zero,1b464 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1b424:	e0bffb17 	ldw	r2,-20(fp)
   1b428:	10c00d17 	ldw	r3,52(r2)
   1b42c:	e0bff917 	ldw	r2,-28(fp)
   1b430:	1880051e 	bne	r3,r2,1b448 <altera_avalon_jtag_uart_write+0x1c8>
   1b434:	e0bffb17 	ldw	r2,-20(fp)
   1b438:	10c00917 	ldw	r3,36(r2)
   1b43c:	e0bffb17 	ldw	r2,-20(fp)
   1b440:	10800117 	ldw	r2,4(r2)
   1b444:	18bff736 	bltu	r3,r2,1b424 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   1b448:	e0bffb17 	ldw	r2,-20(fp)
   1b44c:	10c00d17 	ldw	r3,52(r2)
   1b450:	e0bff917 	ldw	r2,-28(fp)
   1b454:	18800326 	beq	r3,r2,1b464 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   1b458:	e0bffd17 	ldw	r2,-12(fp)
   1b45c:	10800048 	cmpgei	r2,r2,1
   1b460:	103fcd1e 	bne	r2,zero,1b398 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1b464:	e0fffc17 	ldw	r3,-16(fp)
   1b468:	e0bff617 	ldw	r2,-40(fp)
   1b46c:	18800526 	beq	r3,r2,1b484 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   1b470:	e0fffc17 	ldw	r3,-16(fp)
   1b474:	e0bff617 	ldw	r2,-40(fp)
   1b478:	1887c83a 	sub	r3,r3,r2
   1b47c:	e0ffff15 	stw	r3,-4(fp)
   1b480:	00000906 	br	1b4a8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   1b484:	e0bffe17 	ldw	r2,-8(fp)
   1b488:	1090000c 	andi	r2,r2,16384
   1b48c:	1005003a 	cmpeq	r2,r2,zero
   1b490:	1000031e 	bne	r2,zero,1b4a0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   1b494:	00bffd44 	movi	r2,-11
   1b498:	e0bfff15 	stw	r2,-4(fp)
   1b49c:	00000206 	br	1b4a8 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   1b4a0:	00bffec4 	movi	r2,-5
   1b4a4:	e0bfff15 	stw	r2,-4(fp)
   1b4a8:	e0bfff17 	ldw	r2,-4(fp)
}
   1b4ac:	e037883a 	mov	sp,fp
   1b4b0:	dfc00117 	ldw	ra,4(sp)
   1b4b4:	df000017 	ldw	fp,0(sp)
   1b4b8:	dec00204 	addi	sp,sp,8
   1b4bc:	f800283a 	ret

0001b4c0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1b4c0:	defffa04 	addi	sp,sp,-24
   1b4c4:	dfc00515 	stw	ra,20(sp)
   1b4c8:	df000415 	stw	fp,16(sp)
   1b4cc:	df000404 	addi	fp,sp,16
   1b4d0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1b4d4:	e0bfff17 	ldw	r2,-4(fp)
   1b4d8:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1b4dc:	e0bfff17 	ldw	r2,-4(fp)
   1b4e0:	10800104 	addi	r2,r2,4
   1b4e4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b4e8:	0005303a 	rdctl	r2,status
   1b4ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b4f0:	e0fffd17 	ldw	r3,-12(fp)
   1b4f4:	00bfff84 	movi	r2,-2
   1b4f8:	1884703a 	and	r2,r3,r2
   1b4fc:	1001703a 	wrctl	status,r2
  
  return context;
   1b500:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1b504:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   1b508:	001c2080 	call	1c208 <alt_tick>
   1b50c:	e0bffe17 	ldw	r2,-8(fp)
   1b510:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b514:	e0bffc17 	ldw	r2,-16(fp)
   1b518:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1b51c:	e037883a 	mov	sp,fp
   1b520:	dfc00117 	ldw	ra,4(sp)
   1b524:	df000017 	ldw	fp,0(sp)
   1b528:	dec00204 	addi	sp,sp,8
   1b52c:	f800283a 	ret

0001b530 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1b530:	defff804 	addi	sp,sp,-32
   1b534:	dfc00715 	stw	ra,28(sp)
   1b538:	df000615 	stw	fp,24(sp)
   1b53c:	df000604 	addi	fp,sp,24
   1b540:	e13ffc15 	stw	r4,-16(fp)
   1b544:	e17ffd15 	stw	r5,-12(fp)
   1b548:	e1bffe15 	stw	r6,-8(fp)
   1b54c:	e1ffff15 	stw	r7,-4(fp)
   1b550:	e0bfff17 	ldw	r2,-4(fp)
   1b554:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1b558:	00800174 	movhi	r2,5
   1b55c:	10a79204 	addi	r2,r2,-25016
   1b560:	10800017 	ldw	r2,0(r2)
   1b564:	1004c03a 	cmpne	r2,r2,zero
   1b568:	1000041e 	bne	r2,zero,1b57c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   1b56c:	00c00174 	movhi	r3,5
   1b570:	18e79204 	addi	r3,r3,-25016
   1b574:	e0bffb17 	ldw	r2,-20(fp)
   1b578:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1b57c:	e0bffc17 	ldw	r2,-16(fp)
   1b580:	10800104 	addi	r2,r2,4
   1b584:	1007883a 	mov	r3,r2
   1b588:	008001c4 	movi	r2,7
   1b58c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   1b590:	d8000015 	stw	zero,0(sp)
   1b594:	e13ffd17 	ldw	r4,-12(fp)
   1b598:	e17ffe17 	ldw	r5,-8(fp)
   1b59c:	018000b4 	movhi	r6,2
   1b5a0:	31ad3004 	addi	r6,r6,-19264
   1b5a4:	e1fffc17 	ldw	r7,-16(fp)
   1b5a8:	001baa40 	call	1baa4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   1b5ac:	e037883a 	mov	sp,fp
   1b5b0:	dfc00117 	ldw	ra,4(sp)
   1b5b4:	df000017 	ldw	fp,0(sp)
   1b5b8:	dec00204 	addi	sp,sp,8
   1b5bc:	f800283a 	ret

0001b5c0 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   1b5c0:	defffd04 	addi	sp,sp,-12
   1b5c4:	df000215 	stw	fp,8(sp)
   1b5c8:	df000204 	addi	fp,sp,8
  void* base = altera_avalon_timer_ts_base;
   1b5cc:	00800174 	movhi	r2,5
   1b5d0:	10a78f04 	addi	r2,r2,-25028
   1b5d4:	10800017 	ldw	r2,0(r2)
   1b5d8:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
   1b5dc:	00800174 	movhi	r2,5
   1b5e0:	10a79004 	addi	r2,r2,-25024
   1b5e4:	10800017 	ldw	r2,0(r2)
   1b5e8:	1004c03a 	cmpne	r2,r2,zero
   1b5ec:	1000031e 	bne	r2,zero,1b5fc <alt_timestamp_start+0x3c>
  {
    return -1;
   1b5f0:	00bfffc4 	movi	r2,-1
   1b5f4:	e0bfff15 	stw	r2,-4(fp)
   1b5f8:	00001506 	br	1b650 <alt_timestamp_start+0x90>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   1b5fc:	e0bffe17 	ldw	r2,-8(fp)
   1b600:	10800104 	addi	r2,r2,4
   1b604:	1007883a 	mov	r3,r2
   1b608:	00800204 	movi	r2,8
   1b60c:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   1b610:	e0bffe17 	ldw	r2,-8(fp)
   1b614:	10800204 	addi	r2,r2,8
   1b618:	1007883a 	mov	r3,r2
   1b61c:	00bfffd4 	movui	r2,65535
   1b620:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   1b624:	e0bffe17 	ldw	r2,-8(fp)
   1b628:	10800304 	addi	r2,r2,12
   1b62c:	1007883a 	mov	r3,r2
   1b630:	00bfffd4 	movui	r2,65535
   1b634:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   1b638:	e0bffe17 	ldw	r2,-8(fp)
   1b63c:	10800104 	addi	r2,r2,4
   1b640:	1007883a 	mov	r3,r2
   1b644:	00800104 	movi	r2,4
   1b648:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
   1b64c:	e03fff15 	stw	zero,-4(fp)
   1b650:	e0bfff17 	ldw	r2,-4(fp)
}
   1b654:	e037883a 	mov	sp,fp
   1b658:	df000017 	ldw	fp,0(sp)
   1b65c:	dec00104 	addi	sp,sp,4
   1b660:	f800283a 	ret

0001b664 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   1b664:	defffb04 	addi	sp,sp,-20
   1b668:	df000415 	stw	fp,16(sp)
   1b66c:	df000404 	addi	fp,sp,16

  void* base = altera_avalon_timer_ts_base;
   1b670:	00800174 	movhi	r2,5
   1b674:	10a78f04 	addi	r2,r2,-25028
   1b678:	10800017 	ldw	r2,0(r2)
   1b67c:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
   1b680:	00800174 	movhi	r2,5
   1b684:	10a79004 	addi	r2,r2,-25024
   1b688:	10800017 	ldw	r2,0(r2)
   1b68c:	1004c03a 	cmpne	r2,r2,zero
   1b690:	1000031e 	bne	r2,zero,1b6a0 <alt_timestamp+0x3c>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
   1b694:	00bfffc4 	movi	r2,-1
   1b698:	e0bfff15 	stw	r2,-4(fp)
   1b69c:	00001306 	br	1b6ec <alt_timestamp+0x88>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   1b6a0:	e0bffe17 	ldw	r2,-8(fp)
   1b6a4:	10800404 	addi	r2,r2,16
   1b6a8:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   1b6ac:	e0bffe17 	ldw	r2,-8(fp)
   1b6b0:	10800404 	addi	r2,r2,16
   1b6b4:	10800037 	ldwio	r2,0(r2)
   1b6b8:	10bfffcc 	andi	r2,r2,65535
   1b6bc:	e0bffd15 	stw	r2,-12(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   1b6c0:	e0bffe17 	ldw	r2,-8(fp)
   1b6c4:	10800504 	addi	r2,r2,20
   1b6c8:	10800037 	ldwio	r2,0(r2)
   1b6cc:	10bfffcc 	andi	r2,r2,65535
   1b6d0:	e0bffc15 	stw	r2,-16(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   1b6d4:	e0bffc17 	ldw	r2,-16(fp)
   1b6d8:	1006943a 	slli	r3,r2,16
   1b6dc:	e0bffd17 	ldw	r2,-12(fp)
   1b6e0:	1884b03a 	or	r2,r3,r2
   1b6e4:	0084303a 	nor	r2,zero,r2
   1b6e8:	e0bfff15 	stw	r2,-4(fp)
   1b6ec:	e0bfff17 	ldw	r2,-4(fp)
    }  
  }
}
   1b6f0:	e037883a 	mov	sp,fp
   1b6f4:	df000017 	ldw	fp,0(sp)
   1b6f8:	dec00104 	addi	sp,sp,4
   1b6fc:	f800283a 	ret

0001b700 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   1b700:	deffff04 	addi	sp,sp,-4
   1b704:	df000015 	stw	fp,0(sp)
   1b708:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   1b70c:	00800174 	movhi	r2,5
   1b710:	10a79004 	addi	r2,r2,-25024
   1b714:	10800017 	ldw	r2,0(r2)
}
   1b718:	e037883a 	mov	sp,fp
   1b71c:	df000017 	ldw	fp,0(sp)
   1b720:	dec00104 	addi	sp,sp,4
   1b724:	f800283a 	ret

0001b728 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1b728:	defff404 	addi	sp,sp,-48
   1b72c:	df000b15 	stw	fp,44(sp)
   1b730:	df000b04 	addi	fp,sp,44
   1b734:	e13ffb15 	stw	r4,-20(fp)
   1b738:	e17ffc15 	stw	r5,-16(fp)
   1b73c:	e1bffd15 	stw	r6,-12(fp)
   1b740:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1b744:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1b748:	00800174 	movhi	r2,5
   1b74c:	10a79204 	addi	r2,r2,-25016
   1b750:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1b754:	1005003a 	cmpeq	r2,r2,zero
   1b758:	1000411e 	bne	r2,zero,1b860 <alt_alarm_start+0x138>
  {
    if (alarm)
   1b75c:	e0bffb17 	ldw	r2,-20(fp)
   1b760:	1005003a 	cmpeq	r2,r2,zero
   1b764:	10003b1e 	bne	r2,zero,1b854 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   1b768:	e0fffb17 	ldw	r3,-20(fp)
   1b76c:	e0bffd17 	ldw	r2,-12(fp)
   1b770:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   1b774:	e0fffb17 	ldw	r3,-20(fp)
   1b778:	e0bffe17 	ldw	r2,-8(fp)
   1b77c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b780:	0005303a 	rdctl	r2,status
   1b784:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b788:	e0fff817 	ldw	r3,-32(fp)
   1b78c:	00bfff84 	movi	r2,-2
   1b790:	1884703a 	and	r2,r3,r2
   1b794:	1001703a 	wrctl	status,r2
  
  return context;
   1b798:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1b79c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1b7a0:	00800174 	movhi	r2,5
   1b7a4:	10a79304 	addi	r2,r2,-25012
   1b7a8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1b7ac:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1b7b0:	e0fffc17 	ldw	r3,-16(fp)
   1b7b4:	e0bff917 	ldw	r2,-28(fp)
   1b7b8:	1885883a 	add	r2,r3,r2
   1b7bc:	10c00044 	addi	r3,r2,1
   1b7c0:	e0bffb17 	ldw	r2,-20(fp)
   1b7c4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1b7c8:	e0bffb17 	ldw	r2,-20(fp)
   1b7cc:	10c00217 	ldw	r3,8(r2)
   1b7d0:	e0bff917 	ldw	r2,-28(fp)
   1b7d4:	1880042e 	bgeu	r3,r2,1b7e8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   1b7d8:	e0fffb17 	ldw	r3,-20(fp)
   1b7dc:	00800044 	movi	r2,1
   1b7e0:	18800405 	stb	r2,16(r3)
   1b7e4:	00000206 	br	1b7f0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   1b7e8:	e0bffb17 	ldw	r2,-20(fp)
   1b7ec:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1b7f0:	e0fffb17 	ldw	r3,-20(fp)
   1b7f4:	00800174 	movhi	r2,5
   1b7f8:	10a77e04 	addi	r2,r2,-25096
   1b7fc:	e0bff615 	stw	r2,-40(fp)
   1b800:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1b804:	e0fff717 	ldw	r3,-36(fp)
   1b808:	e0bff617 	ldw	r2,-40(fp)
   1b80c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   1b810:	e0bff617 	ldw	r2,-40(fp)
   1b814:	10c00017 	ldw	r3,0(r2)
   1b818:	e0bff717 	ldw	r2,-36(fp)
   1b81c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1b820:	e0bff617 	ldw	r2,-40(fp)
   1b824:	10c00017 	ldw	r3,0(r2)
   1b828:	e0bff717 	ldw	r2,-36(fp)
   1b82c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   1b830:	e0fff617 	ldw	r3,-40(fp)
   1b834:	e0bff717 	ldw	r2,-36(fp)
   1b838:	18800015 	stw	r2,0(r3)
   1b83c:	e0bffa17 	ldw	r2,-24(fp)
   1b840:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b844:	e0bff517 	ldw	r2,-44(fp)
   1b848:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1b84c:	e03fff15 	stw	zero,-4(fp)
   1b850:	00000506 	br	1b868 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   1b854:	00bffa84 	movi	r2,-22
   1b858:	e0bfff15 	stw	r2,-4(fp)
   1b85c:	00000206 	br	1b868 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   1b860:	00bfde84 	movi	r2,-134
   1b864:	e0bfff15 	stw	r2,-4(fp)
   1b868:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   1b86c:	e037883a 	mov	sp,fp
   1b870:	df000017 	ldw	fp,0(sp)
   1b874:	dec00104 	addi	sp,sp,4
   1b878:	f800283a 	ret

0001b87c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1b87c:	deffff04 	addi	sp,sp,-4
   1b880:	df000015 	stw	fp,0(sp)
   1b884:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1b888:	e037883a 	mov	sp,fp
   1b88c:	df000017 	ldw	fp,0(sp)
   1b890:	dec00104 	addi	sp,sp,4
   1b894:	f800283a 	ret

0001b898 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1b898:	defff904 	addi	sp,sp,-28
   1b89c:	dfc00615 	stw	ra,24(sp)
   1b8a0:	df000515 	stw	fp,20(sp)
   1b8a4:	df000504 	addi	fp,sp,20
   1b8a8:	e13ffd15 	stw	r4,-12(fp)
   1b8ac:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1b8b0:	e0bffd17 	ldw	r2,-12(fp)
   1b8b4:	1005003a 	cmpeq	r2,r2,zero
   1b8b8:	1000041e 	bne	r2,zero,1b8cc <alt_dev_llist_insert+0x34>
   1b8bc:	e0bffd17 	ldw	r2,-12(fp)
   1b8c0:	10800217 	ldw	r2,8(r2)
   1b8c4:	1004c03a 	cmpne	r2,r2,zero
   1b8c8:	1000071e 	bne	r2,zero,1b8e8 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   1b8cc:	001b94c0 	call	1b94c <alt_get_errno>
   1b8d0:	1007883a 	mov	r3,r2
   1b8d4:	00800584 	movi	r2,22
   1b8d8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1b8dc:	00bffa84 	movi	r2,-22
   1b8e0:	e0bfff15 	stw	r2,-4(fp)
   1b8e4:	00001306 	br	1b934 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1b8e8:	e0fffd17 	ldw	r3,-12(fp)
   1b8ec:	e0bffe17 	ldw	r2,-8(fp)
   1b8f0:	e0bffb15 	stw	r2,-20(fp)
   1b8f4:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1b8f8:	e0fffc17 	ldw	r3,-16(fp)
   1b8fc:	e0bffb17 	ldw	r2,-20(fp)
   1b900:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   1b904:	e0bffb17 	ldw	r2,-20(fp)
   1b908:	10c00017 	ldw	r3,0(r2)
   1b90c:	e0bffc17 	ldw	r2,-16(fp)
   1b910:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1b914:	e0bffb17 	ldw	r2,-20(fp)
   1b918:	10c00017 	ldw	r3,0(r2)
   1b91c:	e0bffc17 	ldw	r2,-16(fp)
   1b920:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   1b924:	e0fffb17 	ldw	r3,-20(fp)
   1b928:	e0bffc17 	ldw	r2,-16(fp)
   1b92c:	18800015 	stw	r2,0(r3)

  return 0;  
   1b930:	e03fff15 	stw	zero,-4(fp)
   1b934:	e0bfff17 	ldw	r2,-4(fp)
}
   1b938:	e037883a 	mov	sp,fp
   1b93c:	dfc00117 	ldw	ra,4(sp)
   1b940:	df000017 	ldw	fp,0(sp)
   1b944:	dec00204 	addi	sp,sp,8
   1b948:	f800283a 	ret

0001b94c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b94c:	defffd04 	addi	sp,sp,-12
   1b950:	dfc00215 	stw	ra,8(sp)
   1b954:	df000115 	stw	fp,4(sp)
   1b958:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1b95c:	00800174 	movhi	r2,5
   1b960:	10a77b04 	addi	r2,r2,-25108
   1b964:	10800017 	ldw	r2,0(r2)
   1b968:	1005003a 	cmpeq	r2,r2,zero
   1b96c:	1000061e 	bne	r2,zero,1b988 <alt_get_errno+0x3c>
   1b970:	00800174 	movhi	r2,5
   1b974:	10a77b04 	addi	r2,r2,-25108
   1b978:	10800017 	ldw	r2,0(r2)
   1b97c:	103ee83a 	callr	r2
   1b980:	e0bfff15 	stw	r2,-4(fp)
   1b984:	00000306 	br	1b994 <alt_get_errno+0x48>
   1b988:	00800174 	movhi	r2,5
   1b98c:	10a78b04 	addi	r2,r2,-25044
   1b990:	e0bfff15 	stw	r2,-4(fp)
   1b994:	e0bfff17 	ldw	r2,-4(fp)
}
   1b998:	e037883a 	mov	sp,fp
   1b99c:	dfc00117 	ldw	ra,4(sp)
   1b9a0:	df000017 	ldw	fp,0(sp)
   1b9a4:	dec00204 	addi	sp,sp,8
   1b9a8:	f800283a 	ret

0001b9ac <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1b9ac:	defffd04 	addi	sp,sp,-12
   1b9b0:	dfc00215 	stw	ra,8(sp)
   1b9b4:	df000115 	stw	fp,4(sp)
   1b9b8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1b9bc:	00bfff04 	movi	r2,-4
   1b9c0:	00c000b4 	movhi	r3,2
   1b9c4:	18f28f04 	addi	r3,r3,-13764
   1b9c8:	1885883a 	add	r2,r3,r2
   1b9cc:	e0bfff15 	stw	r2,-4(fp)
   1b9d0:	00000606 	br	1b9ec <_do_ctors+0x40>
        (*ctor) (); 
   1b9d4:	e0bfff17 	ldw	r2,-4(fp)
   1b9d8:	10800017 	ldw	r2,0(r2)
   1b9dc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1b9e0:	e0bfff17 	ldw	r2,-4(fp)
   1b9e4:	10bfff04 	addi	r2,r2,-4
   1b9e8:	e0bfff15 	stw	r2,-4(fp)
   1b9ec:	e0ffff17 	ldw	r3,-4(fp)
   1b9f0:	008000b4 	movhi	r2,2
   1b9f4:	10b28e04 	addi	r2,r2,-13768
   1b9f8:	18bff62e 	bgeu	r3,r2,1b9d4 <_do_ctors+0x28>
        (*ctor) (); 
}
   1b9fc:	e037883a 	mov	sp,fp
   1ba00:	dfc00117 	ldw	ra,4(sp)
   1ba04:	df000017 	ldw	fp,0(sp)
   1ba08:	dec00204 	addi	sp,sp,8
   1ba0c:	f800283a 	ret

0001ba10 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1ba10:	defffd04 	addi	sp,sp,-12
   1ba14:	dfc00215 	stw	ra,8(sp)
   1ba18:	df000115 	stw	fp,4(sp)
   1ba1c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1ba20:	00bfff04 	movi	r2,-4
   1ba24:	00c000b4 	movhi	r3,2
   1ba28:	18f28f04 	addi	r3,r3,-13764
   1ba2c:	1885883a 	add	r2,r3,r2
   1ba30:	e0bfff15 	stw	r2,-4(fp)
   1ba34:	00000606 	br	1ba50 <_do_dtors+0x40>
        (*dtor) (); 
   1ba38:	e0bfff17 	ldw	r2,-4(fp)
   1ba3c:	10800017 	ldw	r2,0(r2)
   1ba40:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1ba44:	e0bfff17 	ldw	r2,-4(fp)
   1ba48:	10bfff04 	addi	r2,r2,-4
   1ba4c:	e0bfff15 	stw	r2,-4(fp)
   1ba50:	e0ffff17 	ldw	r3,-4(fp)
   1ba54:	008000b4 	movhi	r2,2
   1ba58:	10b28f04 	addi	r2,r2,-13764
   1ba5c:	18bff62e 	bgeu	r3,r2,1ba38 <_do_dtors+0x28>
        (*dtor) (); 
}
   1ba60:	e037883a 	mov	sp,fp
   1ba64:	dfc00117 	ldw	ra,4(sp)
   1ba68:	df000017 	ldw	fp,0(sp)
   1ba6c:	dec00204 	addi	sp,sp,8
   1ba70:	f800283a 	ret

0001ba74 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1ba74:	defffe04 	addi	sp,sp,-8
   1ba78:	dfc00115 	stw	ra,4(sp)
   1ba7c:	df000015 	stw	fp,0(sp)
   1ba80:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1ba84:	0009883a 	mov	r4,zero
   1ba88:	01440004 	movi	r5,4096
   1ba8c:	001c5a00 	call	1c5a0 <alt_icache_flush>
#endif
}
   1ba90:	e037883a 	mov	sp,fp
   1ba94:	dfc00117 	ldw	ra,4(sp)
   1ba98:	df000017 	ldw	fp,0(sp)
   1ba9c:	dec00204 	addi	sp,sp,8
   1baa0:	f800283a 	ret

0001baa4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1baa4:	defff904 	addi	sp,sp,-28
   1baa8:	dfc00615 	stw	ra,24(sp)
   1baac:	df000515 	stw	fp,20(sp)
   1bab0:	df000504 	addi	fp,sp,20
   1bab4:	e13ffc15 	stw	r4,-16(fp)
   1bab8:	e17ffd15 	stw	r5,-12(fp)
   1babc:	e1bffe15 	stw	r6,-8(fp)
   1bac0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1bac4:	e0800217 	ldw	r2,8(fp)
   1bac8:	d8800015 	stw	r2,0(sp)
   1bacc:	e13ffc17 	ldw	r4,-16(fp)
   1bad0:	e17ffd17 	ldw	r5,-12(fp)
   1bad4:	e1bffe17 	ldw	r6,-8(fp)
   1bad8:	e1ffff17 	ldw	r7,-4(fp)
   1badc:	001bc780 	call	1bc78 <alt_iic_isr_register>
}  
   1bae0:	e037883a 	mov	sp,fp
   1bae4:	dfc00117 	ldw	ra,4(sp)
   1bae8:	df000017 	ldw	fp,0(sp)
   1baec:	dec00204 	addi	sp,sp,8
   1baf0:	f800283a 	ret

0001baf4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1baf4:	defff904 	addi	sp,sp,-28
   1baf8:	df000615 	stw	fp,24(sp)
   1bafc:	df000604 	addi	fp,sp,24
   1bb00:	e13ffe15 	stw	r4,-8(fp)
   1bb04:	e17fff15 	stw	r5,-4(fp)
   1bb08:	e0bfff17 	ldw	r2,-4(fp)
   1bb0c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bb10:	0005303a 	rdctl	r2,status
   1bb14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bb18:	e0fffb17 	ldw	r3,-20(fp)
   1bb1c:	00bfff84 	movi	r2,-2
   1bb20:	1884703a 	and	r2,r3,r2
   1bb24:	1001703a 	wrctl	status,r2
  
  return context;
   1bb28:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1bb2c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   1bb30:	e0fffc17 	ldw	r3,-16(fp)
   1bb34:	00800044 	movi	r2,1
   1bb38:	10c4983a 	sll	r2,r2,r3
   1bb3c:	1007883a 	mov	r3,r2
   1bb40:	00800174 	movhi	r2,5
   1bb44:	10a79104 	addi	r2,r2,-25020
   1bb48:	10800017 	ldw	r2,0(r2)
   1bb4c:	1886b03a 	or	r3,r3,r2
   1bb50:	00800174 	movhi	r2,5
   1bb54:	10a79104 	addi	r2,r2,-25020
   1bb58:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1bb5c:	00800174 	movhi	r2,5
   1bb60:	10a79104 	addi	r2,r2,-25020
   1bb64:	10800017 	ldw	r2,0(r2)
   1bb68:	100170fa 	wrctl	ienable,r2
   1bb6c:	e0bffd17 	ldw	r2,-12(fp)
   1bb70:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bb74:	e0bffa17 	ldw	r2,-24(fp)
   1bb78:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1bb7c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   1bb80:	e037883a 	mov	sp,fp
   1bb84:	df000017 	ldw	fp,0(sp)
   1bb88:	dec00104 	addi	sp,sp,4
   1bb8c:	f800283a 	ret

0001bb90 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1bb90:	defff904 	addi	sp,sp,-28
   1bb94:	df000615 	stw	fp,24(sp)
   1bb98:	df000604 	addi	fp,sp,24
   1bb9c:	e13ffe15 	stw	r4,-8(fp)
   1bba0:	e17fff15 	stw	r5,-4(fp)
   1bba4:	e0bfff17 	ldw	r2,-4(fp)
   1bba8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bbac:	0005303a 	rdctl	r2,status
   1bbb0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bbb4:	e0fffb17 	ldw	r3,-20(fp)
   1bbb8:	00bfff84 	movi	r2,-2
   1bbbc:	1884703a 	and	r2,r3,r2
   1bbc0:	1001703a 	wrctl	status,r2
  
  return context;
   1bbc4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1bbc8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   1bbcc:	e0fffc17 	ldw	r3,-16(fp)
   1bbd0:	00800044 	movi	r2,1
   1bbd4:	10c4983a 	sll	r2,r2,r3
   1bbd8:	0084303a 	nor	r2,zero,r2
   1bbdc:	1007883a 	mov	r3,r2
   1bbe0:	00800174 	movhi	r2,5
   1bbe4:	10a79104 	addi	r2,r2,-25020
   1bbe8:	10800017 	ldw	r2,0(r2)
   1bbec:	1886703a 	and	r3,r3,r2
   1bbf0:	00800174 	movhi	r2,5
   1bbf4:	10a79104 	addi	r2,r2,-25020
   1bbf8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1bbfc:	00800174 	movhi	r2,5
   1bc00:	10a79104 	addi	r2,r2,-25020
   1bc04:	10800017 	ldw	r2,0(r2)
   1bc08:	100170fa 	wrctl	ienable,r2
   1bc0c:	e0bffd17 	ldw	r2,-12(fp)
   1bc10:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bc14:	e0bffa17 	ldw	r2,-24(fp)
   1bc18:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1bc1c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   1bc20:	e037883a 	mov	sp,fp
   1bc24:	df000017 	ldw	fp,0(sp)
   1bc28:	dec00104 	addi	sp,sp,4
   1bc2c:	f800283a 	ret

0001bc30 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   1bc30:	defffc04 	addi	sp,sp,-16
   1bc34:	df000315 	stw	fp,12(sp)
   1bc38:	df000304 	addi	fp,sp,12
   1bc3c:	e13ffe15 	stw	r4,-8(fp)
   1bc40:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1bc44:	000530fa 	rdctl	r2,ienable
   1bc48:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1bc4c:	e0ffff17 	ldw	r3,-4(fp)
   1bc50:	00800044 	movi	r2,1
   1bc54:	10c4983a 	sll	r2,r2,r3
   1bc58:	1007883a 	mov	r3,r2
   1bc5c:	e0bffd17 	ldw	r2,-12(fp)
   1bc60:	1884703a 	and	r2,r3,r2
   1bc64:	1004c03a 	cmpne	r2,r2,zero
}
   1bc68:	e037883a 	mov	sp,fp
   1bc6c:	df000017 	ldw	fp,0(sp)
   1bc70:	dec00104 	addi	sp,sp,4
   1bc74:	f800283a 	ret

0001bc78 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1bc78:	defff404 	addi	sp,sp,-48
   1bc7c:	dfc00b15 	stw	ra,44(sp)
   1bc80:	df000a15 	stw	fp,40(sp)
   1bc84:	df000a04 	addi	fp,sp,40
   1bc88:	e13ffb15 	stw	r4,-20(fp)
   1bc8c:	e17ffc15 	stw	r5,-16(fp)
   1bc90:	e1bffd15 	stw	r6,-12(fp)
   1bc94:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   1bc98:	00bffa84 	movi	r2,-22
   1bc9c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1bca0:	e0bffc17 	ldw	r2,-16(fp)
   1bca4:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1bca8:	e0bff917 	ldw	r2,-28(fp)
   1bcac:	10800808 	cmpgei	r2,r2,32
   1bcb0:	1000291e 	bne	r2,zero,1bd58 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bcb4:	0005303a 	rdctl	r2,status
   1bcb8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bcbc:	e0fff717 	ldw	r3,-36(fp)
   1bcc0:	00bfff84 	movi	r2,-2
   1bcc4:	1884703a 	and	r2,r3,r2
   1bcc8:	1001703a 	wrctl	status,r2
  
  return context;
   1bccc:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1bcd0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   1bcd4:	e0bff917 	ldw	r2,-28(fp)
   1bcd8:	00c00174 	movhi	r3,5
   1bcdc:	18e79e04 	addi	r3,r3,-24968
   1bce0:	100490fa 	slli	r2,r2,3
   1bce4:	10c7883a 	add	r3,r2,r3
   1bce8:	e0bffd17 	ldw	r2,-12(fp)
   1bcec:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   1bcf0:	e0bff917 	ldw	r2,-28(fp)
   1bcf4:	00c00174 	movhi	r3,5
   1bcf8:	18e79e04 	addi	r3,r3,-24968
   1bcfc:	100490fa 	slli	r2,r2,3
   1bd00:	10c5883a 	add	r2,r2,r3
   1bd04:	10c00104 	addi	r3,r2,4
   1bd08:	e0bffe17 	ldw	r2,-8(fp)
   1bd0c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1bd10:	e0bffd17 	ldw	r2,-12(fp)
   1bd14:	1005003a 	cmpeq	r2,r2,zero
   1bd18:	1000051e 	bne	r2,zero,1bd30 <alt_iic_isr_register+0xb8>
   1bd1c:	e17ff917 	ldw	r5,-28(fp)
   1bd20:	e13ffb17 	ldw	r4,-20(fp)
   1bd24:	001baf40 	call	1baf4 <alt_ic_irq_enable>
   1bd28:	e0bfff15 	stw	r2,-4(fp)
   1bd2c:	00000406 	br	1bd40 <alt_iic_isr_register+0xc8>
   1bd30:	e17ff917 	ldw	r5,-28(fp)
   1bd34:	e13ffb17 	ldw	r4,-20(fp)
   1bd38:	001bb900 	call	1bb90 <alt_ic_irq_disable>
   1bd3c:	e0bfff15 	stw	r2,-4(fp)
   1bd40:	e0bfff17 	ldw	r2,-4(fp)
   1bd44:	e0bffa15 	stw	r2,-24(fp)
   1bd48:	e0bff817 	ldw	r2,-32(fp)
   1bd4c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bd50:	e0bff617 	ldw	r2,-40(fp)
   1bd54:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1bd58:	e0bffa17 	ldw	r2,-24(fp)
}
   1bd5c:	e037883a 	mov	sp,fp
   1bd60:	dfc00117 	ldw	ra,4(sp)
   1bd64:	df000017 	ldw	fp,0(sp)
   1bd68:	dec00204 	addi	sp,sp,8
   1bd6c:	f800283a 	ret

0001bd70 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1bd70:	defff904 	addi	sp,sp,-28
   1bd74:	dfc00615 	stw	ra,24(sp)
   1bd78:	df000515 	stw	fp,20(sp)
   1bd7c:	df000504 	addi	fp,sp,20
   1bd80:	e13ffc15 	stw	r4,-16(fp)
   1bd84:	e17ffd15 	stw	r5,-12(fp)
   1bd88:	e1bffe15 	stw	r6,-8(fp)
   1bd8c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1bd90:	e13ffd17 	ldw	r4,-12(fp)
   1bd94:	e17ffe17 	ldw	r5,-8(fp)
   1bd98:	e1bfff17 	ldw	r6,-4(fp)
   1bd9c:	001bf880 	call	1bf88 <open>
   1bda0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1bda4:	e0bffb17 	ldw	r2,-20(fp)
   1bda8:	1004803a 	cmplt	r2,r2,zero
   1bdac:	10001c1e 	bne	r2,zero,1be20 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   1bdb0:	e0bffb17 	ldw	r2,-20(fp)
   1bdb4:	00c00174 	movhi	r3,5
   1bdb8:	18e2f804 	addi	r3,r3,-29728
   1bdbc:	10800324 	muli	r2,r2,12
   1bdc0:	10c5883a 	add	r2,r2,r3
   1bdc4:	10c00017 	ldw	r3,0(r2)
   1bdc8:	e0bffc17 	ldw	r2,-16(fp)
   1bdcc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1bdd0:	e0bffb17 	ldw	r2,-20(fp)
   1bdd4:	00c00174 	movhi	r3,5
   1bdd8:	18e2f804 	addi	r3,r3,-29728
   1bddc:	10800324 	muli	r2,r2,12
   1bde0:	10c5883a 	add	r2,r2,r3
   1bde4:	10800104 	addi	r2,r2,4
   1bde8:	10c00017 	ldw	r3,0(r2)
   1bdec:	e0bffc17 	ldw	r2,-16(fp)
   1bdf0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1bdf4:	e0bffb17 	ldw	r2,-20(fp)
   1bdf8:	00c00174 	movhi	r3,5
   1bdfc:	18e2f804 	addi	r3,r3,-29728
   1be00:	10800324 	muli	r2,r2,12
   1be04:	10c5883a 	add	r2,r2,r3
   1be08:	10800204 	addi	r2,r2,8
   1be0c:	10c00017 	ldw	r3,0(r2)
   1be10:	e0bffc17 	ldw	r2,-16(fp)
   1be14:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1be18:	e13ffb17 	ldw	r4,-20(fp)
   1be1c:	001a6880 	call	1a688 <alt_release_fd>
  }
} 
   1be20:	e037883a 	mov	sp,fp
   1be24:	dfc00117 	ldw	ra,4(sp)
   1be28:	df000017 	ldw	fp,0(sp)
   1be2c:	dec00204 	addi	sp,sp,8
   1be30:	f800283a 	ret

0001be34 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1be34:	defffb04 	addi	sp,sp,-20
   1be38:	dfc00415 	stw	ra,16(sp)
   1be3c:	df000315 	stw	fp,12(sp)
   1be40:	df000304 	addi	fp,sp,12
   1be44:	e13ffd15 	stw	r4,-12(fp)
   1be48:	e17ffe15 	stw	r5,-8(fp)
   1be4c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1be50:	01000174 	movhi	r4,5
   1be54:	2122fb04 	addi	r4,r4,-29716
   1be58:	e17ffd17 	ldw	r5,-12(fp)
   1be5c:	01800044 	movi	r6,1
   1be60:	01c07fc4 	movi	r7,511
   1be64:	001bd700 	call	1bd70 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1be68:	01000174 	movhi	r4,5
   1be6c:	2122f804 	addi	r4,r4,-29728
   1be70:	e17ffe17 	ldw	r5,-8(fp)
   1be74:	000d883a 	mov	r6,zero
   1be78:	01c07fc4 	movi	r7,511
   1be7c:	001bd700 	call	1bd70 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1be80:	01000174 	movhi	r4,5
   1be84:	2122fe04 	addi	r4,r4,-29704
   1be88:	e17fff17 	ldw	r5,-4(fp)
   1be8c:	01800044 	movi	r6,1
   1be90:	01c07fc4 	movi	r7,511
   1be94:	001bd700 	call	1bd70 <alt_open_fd>
}  
   1be98:	e037883a 	mov	sp,fp
   1be9c:	dfc00117 	ldw	ra,4(sp)
   1bea0:	df000017 	ldw	fp,0(sp)
   1bea4:	dec00204 	addi	sp,sp,8
   1bea8:	f800283a 	ret

0001beac <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1beac:	defffc04 	addi	sp,sp,-16
   1beb0:	df000315 	stw	fp,12(sp)
   1beb4:	df000304 	addi	fp,sp,12
   1beb8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1bebc:	e0bffe17 	ldw	r2,-8(fp)
   1bec0:	10800217 	ldw	r2,8(r2)
   1bec4:	10d00034 	orhi	r3,r2,16384
   1bec8:	e0bffe17 	ldw	r2,-8(fp)
   1becc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1bed0:	e03ffd15 	stw	zero,-12(fp)
   1bed4:	00002006 	br	1bf58 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1bed8:	e0bffd17 	ldw	r2,-12(fp)
   1bedc:	00c00174 	movhi	r3,5
   1bee0:	18e2f804 	addi	r3,r3,-29728
   1bee4:	10800324 	muli	r2,r2,12
   1bee8:	10c5883a 	add	r2,r2,r3
   1beec:	10c00017 	ldw	r3,0(r2)
   1bef0:	e0bffe17 	ldw	r2,-8(fp)
   1bef4:	10800017 	ldw	r2,0(r2)
   1bef8:	1880141e 	bne	r3,r2,1bf4c <alt_file_locked+0xa0>
   1befc:	e0bffd17 	ldw	r2,-12(fp)
   1bf00:	00c00174 	movhi	r3,5
   1bf04:	18e2f804 	addi	r3,r3,-29728
   1bf08:	10800324 	muli	r2,r2,12
   1bf0c:	10c5883a 	add	r2,r2,r3
   1bf10:	10800204 	addi	r2,r2,8
   1bf14:	10800017 	ldw	r2,0(r2)
   1bf18:	1004403a 	cmpge	r2,r2,zero
   1bf1c:	10000b1e 	bne	r2,zero,1bf4c <alt_file_locked+0xa0>
   1bf20:	e0bffd17 	ldw	r2,-12(fp)
   1bf24:	10800324 	muli	r2,r2,12
   1bf28:	1007883a 	mov	r3,r2
   1bf2c:	00800174 	movhi	r2,5
   1bf30:	10a2f804 	addi	r2,r2,-29728
   1bf34:	1887883a 	add	r3,r3,r2
   1bf38:	e0bffe17 	ldw	r2,-8(fp)
   1bf3c:	18800326 	beq	r3,r2,1bf4c <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1bf40:	00bffcc4 	movi	r2,-13
   1bf44:	e0bfff15 	stw	r2,-4(fp)
   1bf48:	00000a06 	br	1bf74 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1bf4c:	e0bffd17 	ldw	r2,-12(fp)
   1bf50:	10800044 	addi	r2,r2,1
   1bf54:	e0bffd15 	stw	r2,-12(fp)
   1bf58:	00800174 	movhi	r2,5
   1bf5c:	10a77a04 	addi	r2,r2,-25112
   1bf60:	10800017 	ldw	r2,0(r2)
   1bf64:	1007883a 	mov	r3,r2
   1bf68:	e0bffd17 	ldw	r2,-12(fp)
   1bf6c:	18bfda2e 	bgeu	r3,r2,1bed8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1bf70:	e03fff15 	stw	zero,-4(fp)
   1bf74:	e0bfff17 	ldw	r2,-4(fp)
}
   1bf78:	e037883a 	mov	sp,fp
   1bf7c:	df000017 	ldw	fp,0(sp)
   1bf80:	dec00104 	addi	sp,sp,4
   1bf84:	f800283a 	ret

0001bf88 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1bf88:	defff404 	addi	sp,sp,-48
   1bf8c:	dfc00b15 	stw	ra,44(sp)
   1bf90:	df000a15 	stw	fp,40(sp)
   1bf94:	df000a04 	addi	fp,sp,40
   1bf98:	e13ffb15 	stw	r4,-20(fp)
   1bf9c:	e17ffc15 	stw	r5,-16(fp)
   1bfa0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1bfa4:	00bfffc4 	movi	r2,-1
   1bfa8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   1bfac:	00bffb44 	movi	r2,-19
   1bfb0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   1bfb4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1bfb8:	e13ffb17 	ldw	r4,-20(fp)
   1bfbc:	01400174 	movhi	r5,5
   1bfc0:	29677804 	addi	r5,r5,-25120
   1bfc4:	001c3340 	call	1c334 <alt_find_dev>
   1bfc8:	e0bffa15 	stw	r2,-24(fp)
   1bfcc:	e0bffa17 	ldw	r2,-24(fp)
   1bfd0:	1004c03a 	cmpne	r2,r2,zero
   1bfd4:	1000051e 	bne	r2,zero,1bfec <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1bfd8:	e13ffb17 	ldw	r4,-20(fp)
   1bfdc:	001c3c80 	call	1c3c8 <alt_find_file>
   1bfe0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   1bfe4:	00800044 	movi	r2,1
   1bfe8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1bfec:	e0bffa17 	ldw	r2,-24(fp)
   1bff0:	1005003a 	cmpeq	r2,r2,zero
   1bff4:	1000301e 	bne	r2,zero,1c0b8 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1bff8:	e13ffa17 	ldw	r4,-24(fp)
   1bffc:	001c4e80 	call	1c4e8 <alt_get_fd>
   1c000:	e0bff815 	stw	r2,-32(fp)
   1c004:	e0bff817 	ldw	r2,-32(fp)
   1c008:	1004403a 	cmpge	r2,r2,zero
   1c00c:	1000031e 	bne	r2,zero,1c01c <open+0x94>
    {
      status = index;
   1c010:	e0bff817 	ldw	r2,-32(fp)
   1c014:	e0bff715 	stw	r2,-36(fp)
   1c018:	00002906 	br	1c0c0 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   1c01c:	e0bff817 	ldw	r2,-32(fp)
   1c020:	10800324 	muli	r2,r2,12
   1c024:	1007883a 	mov	r3,r2
   1c028:	00800174 	movhi	r2,5
   1c02c:	10a2f804 	addi	r2,r2,-29728
   1c030:	1885883a 	add	r2,r3,r2
   1c034:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1c038:	e0fffc17 	ldw	r3,-16(fp)
   1c03c:	00900034 	movhi	r2,16384
   1c040:	10bfffc4 	addi	r2,r2,-1
   1c044:	1886703a 	and	r3,r3,r2
   1c048:	e0bff917 	ldw	r2,-28(fp)
   1c04c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1c050:	e0bff617 	ldw	r2,-40(fp)
   1c054:	1004c03a 	cmpne	r2,r2,zero
   1c058:	1000061e 	bne	r2,zero,1c074 <open+0xec>
   1c05c:	e13ff917 	ldw	r4,-28(fp)
   1c060:	001beac0 	call	1beac <alt_file_locked>
   1c064:	e0bff715 	stw	r2,-36(fp)
   1c068:	e0bff717 	ldw	r2,-36(fp)
   1c06c:	1004803a 	cmplt	r2,r2,zero
   1c070:	1000131e 	bne	r2,zero,1c0c0 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1c074:	e0bffa17 	ldw	r2,-24(fp)
   1c078:	10800317 	ldw	r2,12(r2)
   1c07c:	1005003a 	cmpeq	r2,r2,zero
   1c080:	1000091e 	bne	r2,zero,1c0a8 <open+0x120>
   1c084:	e0bffa17 	ldw	r2,-24(fp)
   1c088:	10800317 	ldw	r2,12(r2)
   1c08c:	e13ff917 	ldw	r4,-28(fp)
   1c090:	e17ffb17 	ldw	r5,-20(fp)
   1c094:	e1bffc17 	ldw	r6,-16(fp)
   1c098:	e1fffd17 	ldw	r7,-12(fp)
   1c09c:	103ee83a 	callr	r2
   1c0a0:	e0bfff15 	stw	r2,-4(fp)
   1c0a4:	00000106 	br	1c0ac <open+0x124>
   1c0a8:	e03fff15 	stw	zero,-4(fp)
   1c0ac:	e0bfff17 	ldw	r2,-4(fp)
   1c0b0:	e0bff715 	stw	r2,-36(fp)
   1c0b4:	00000206 	br	1c0c0 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1c0b8:	00bffb44 	movi	r2,-19
   1c0bc:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1c0c0:	e0bff717 	ldw	r2,-36(fp)
   1c0c4:	1004403a 	cmpge	r2,r2,zero
   1c0c8:	1000091e 	bne	r2,zero,1c0f0 <open+0x168>
  {
    alt_release_fd (index);  
   1c0cc:	e13ff817 	ldw	r4,-32(fp)
   1c0d0:	001a6880 	call	1a688 <alt_release_fd>
    ALT_ERRNO = -status;
   1c0d4:	001c1100 	call	1c110 <alt_get_errno>
   1c0d8:	e0fff717 	ldw	r3,-36(fp)
   1c0dc:	00c7c83a 	sub	r3,zero,r3
   1c0e0:	10c00015 	stw	r3,0(r2)
    return -1;
   1c0e4:	00bfffc4 	movi	r2,-1
   1c0e8:	e0bffe15 	stw	r2,-8(fp)
   1c0ec:	00000206 	br	1c0f8 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   1c0f0:	e0bff817 	ldw	r2,-32(fp)
   1c0f4:	e0bffe15 	stw	r2,-8(fp)
   1c0f8:	e0bffe17 	ldw	r2,-8(fp)
}
   1c0fc:	e037883a 	mov	sp,fp
   1c100:	dfc00117 	ldw	ra,4(sp)
   1c104:	df000017 	ldw	fp,0(sp)
   1c108:	dec00204 	addi	sp,sp,8
   1c10c:	f800283a 	ret

0001c110 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1c110:	defffd04 	addi	sp,sp,-12
   1c114:	dfc00215 	stw	ra,8(sp)
   1c118:	df000115 	stw	fp,4(sp)
   1c11c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1c120:	00800174 	movhi	r2,5
   1c124:	10a77b04 	addi	r2,r2,-25108
   1c128:	10800017 	ldw	r2,0(r2)
   1c12c:	1005003a 	cmpeq	r2,r2,zero
   1c130:	1000061e 	bne	r2,zero,1c14c <alt_get_errno+0x3c>
   1c134:	00800174 	movhi	r2,5
   1c138:	10a77b04 	addi	r2,r2,-25108
   1c13c:	10800017 	ldw	r2,0(r2)
   1c140:	103ee83a 	callr	r2
   1c144:	e0bfff15 	stw	r2,-4(fp)
   1c148:	00000306 	br	1c158 <alt_get_errno+0x48>
   1c14c:	00800174 	movhi	r2,5
   1c150:	10a78b04 	addi	r2,r2,-25044
   1c154:	e0bfff15 	stw	r2,-4(fp)
   1c158:	e0bfff17 	ldw	r2,-4(fp)
}
   1c15c:	e037883a 	mov	sp,fp
   1c160:	dfc00117 	ldw	ra,4(sp)
   1c164:	df000017 	ldw	fp,0(sp)
   1c168:	dec00204 	addi	sp,sp,8
   1c16c:	f800283a 	ret

0001c170 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1c170:	defffa04 	addi	sp,sp,-24
   1c174:	df000515 	stw	fp,20(sp)
   1c178:	df000504 	addi	fp,sp,20
   1c17c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c180:	0005303a 	rdctl	r2,status
   1c184:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c188:	e0fffd17 	ldw	r3,-12(fp)
   1c18c:	00bfff84 	movi	r2,-2
   1c190:	1884703a 	and	r2,r3,r2
   1c194:	1001703a 	wrctl	status,r2
  
  return context;
   1c198:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1c19c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   1c1a0:	e0bfff17 	ldw	r2,-4(fp)
   1c1a4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1c1a8:	e0bffc17 	ldw	r2,-16(fp)
   1c1ac:	10c00017 	ldw	r3,0(r2)
   1c1b0:	e0bffc17 	ldw	r2,-16(fp)
   1c1b4:	10800117 	ldw	r2,4(r2)
   1c1b8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   1c1bc:	e0bffc17 	ldw	r2,-16(fp)
   1c1c0:	10c00117 	ldw	r3,4(r2)
   1c1c4:	e0bffc17 	ldw	r2,-16(fp)
   1c1c8:	10800017 	ldw	r2,0(r2)
   1c1cc:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1c1d0:	e0fffc17 	ldw	r3,-16(fp)
   1c1d4:	e0bffc17 	ldw	r2,-16(fp)
   1c1d8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   1c1dc:	e0fffc17 	ldw	r3,-16(fp)
   1c1e0:	e0bffc17 	ldw	r2,-16(fp)
   1c1e4:	18800015 	stw	r2,0(r3)
   1c1e8:	e0bffe17 	ldw	r2,-8(fp)
   1c1ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c1f0:	e0bffb17 	ldw	r2,-20(fp)
   1c1f4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1c1f8:	e037883a 	mov	sp,fp
   1c1fc:	df000017 	ldw	fp,0(sp)
   1c200:	dec00104 	addi	sp,sp,4
   1c204:	f800283a 	ret

0001c208 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1c208:	defffb04 	addi	sp,sp,-20
   1c20c:	dfc00415 	stw	ra,16(sp)
   1c210:	df000315 	stw	fp,12(sp)
   1c214:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1c218:	d0a00e17 	ldw	r2,-32712(gp)
   1c21c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1c220:	d0a02317 	ldw	r2,-32628(gp)
   1c224:	10800044 	addi	r2,r2,1
   1c228:	d0a02315 	stw	r2,-32628(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1c22c:	00003106 	br	1c2f4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   1c230:	e0bffe17 	ldw	r2,-8(fp)
   1c234:	10800017 	ldw	r2,0(r2)
   1c238:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1c23c:	e0bffe17 	ldw	r2,-8(fp)
   1c240:	10800403 	ldbu	r2,16(r2)
   1c244:	10803fcc 	andi	r2,r2,255
   1c248:	1005003a 	cmpeq	r2,r2,zero
   1c24c:	1000051e 	bne	r2,zero,1c264 <alt_tick+0x5c>
   1c250:	d0a02317 	ldw	r2,-32628(gp)
   1c254:	1004c03a 	cmpne	r2,r2,zero
   1c258:	1000021e 	bne	r2,zero,1c264 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   1c25c:	e0bffe17 	ldw	r2,-8(fp)
   1c260:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1c264:	e0bffe17 	ldw	r2,-8(fp)
   1c268:	10c00217 	ldw	r3,8(r2)
   1c26c:	d0a02317 	ldw	r2,-32628(gp)
   1c270:	10c01e36 	bltu	r2,r3,1c2ec <alt_tick+0xe4>
   1c274:	e0bffe17 	ldw	r2,-8(fp)
   1c278:	10800403 	ldbu	r2,16(r2)
   1c27c:	10803fcc 	andi	r2,r2,255
   1c280:	1004c03a 	cmpne	r2,r2,zero
   1c284:	1000191e 	bne	r2,zero,1c2ec <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   1c288:	e0bffe17 	ldw	r2,-8(fp)
   1c28c:	10c00317 	ldw	r3,12(r2)
   1c290:	e0bffe17 	ldw	r2,-8(fp)
   1c294:	11000517 	ldw	r4,20(r2)
   1c298:	183ee83a 	callr	r3
   1c29c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1c2a0:	e0bffd17 	ldw	r2,-12(fp)
   1c2a4:	1004c03a 	cmpne	r2,r2,zero
   1c2a8:	1000031e 	bne	r2,zero,1c2b8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   1c2ac:	e13ffe17 	ldw	r4,-8(fp)
   1c2b0:	001c1700 	call	1c170 <alt_alarm_stop>
   1c2b4:	00000d06 	br	1c2ec <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   1c2b8:	e0bffe17 	ldw	r2,-8(fp)
   1c2bc:	10c00217 	ldw	r3,8(r2)
   1c2c0:	e0bffd17 	ldw	r2,-12(fp)
   1c2c4:	1887883a 	add	r3,r3,r2
   1c2c8:	e0bffe17 	ldw	r2,-8(fp)
   1c2cc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1c2d0:	e0bffe17 	ldw	r2,-8(fp)
   1c2d4:	10c00217 	ldw	r3,8(r2)
   1c2d8:	d0a02317 	ldw	r2,-32628(gp)
   1c2dc:	1880032e 	bgeu	r3,r2,1c2ec <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   1c2e0:	e0fffe17 	ldw	r3,-8(fp)
   1c2e4:	00800044 	movi	r2,1
   1c2e8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   1c2ec:	e0bfff17 	ldw	r2,-4(fp)
   1c2f0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1c2f4:	d0e00e04 	addi	r3,gp,-32712
   1c2f8:	e0bffe17 	ldw	r2,-8(fp)
   1c2fc:	10ffcc1e 	bne	r2,r3,1c230 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   1c300:	e037883a 	mov	sp,fp
   1c304:	dfc00117 	ldw	ra,4(sp)
   1c308:	df000017 	ldw	fp,0(sp)
   1c30c:	dec00204 	addi	sp,sp,8
   1c310:	f800283a 	ret

0001c314 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   1c314:	deffff04 	addi	sp,sp,-4
   1c318:	df000015 	stw	fp,0(sp)
   1c31c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1c320:	000170fa 	wrctl	ienable,zero
}
   1c324:	e037883a 	mov	sp,fp
   1c328:	df000017 	ldw	fp,0(sp)
   1c32c:	dec00104 	addi	sp,sp,4
   1c330:	f800283a 	ret

0001c334 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1c334:	defff904 	addi	sp,sp,-28
   1c338:	dfc00615 	stw	ra,24(sp)
   1c33c:	df000515 	stw	fp,20(sp)
   1c340:	df000504 	addi	fp,sp,20
   1c344:	e13ffd15 	stw	r4,-12(fp)
   1c348:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1c34c:	e0bffe17 	ldw	r2,-8(fp)
   1c350:	10800017 	ldw	r2,0(r2)
   1c354:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1c358:	e13ffd17 	ldw	r4,-12(fp)
   1c35c:	001082c0 	call	1082c <strlen>
   1c360:	10800044 	addi	r2,r2,1
   1c364:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1c368:	00000d06 	br	1c3a0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1c36c:	e0bffc17 	ldw	r2,-16(fp)
   1c370:	11000217 	ldw	r4,8(r2)
   1c374:	e1bffb17 	ldw	r6,-20(fp)
   1c378:	e17ffd17 	ldw	r5,-12(fp)
   1c37c:	001c67c0 	call	1c67c <memcmp>
   1c380:	1004c03a 	cmpne	r2,r2,zero
   1c384:	1000031e 	bne	r2,zero,1c394 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1c388:	e0bffc17 	ldw	r2,-16(fp)
   1c38c:	e0bfff15 	stw	r2,-4(fp)
   1c390:	00000706 	br	1c3b0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1c394:	e0bffc17 	ldw	r2,-16(fp)
   1c398:	10800017 	ldw	r2,0(r2)
   1c39c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1c3a0:	e0fffe17 	ldw	r3,-8(fp)
   1c3a4:	e0bffc17 	ldw	r2,-16(fp)
   1c3a8:	10fff01e 	bne	r2,r3,1c36c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1c3ac:	e03fff15 	stw	zero,-4(fp)
   1c3b0:	e0bfff17 	ldw	r2,-4(fp)
}
   1c3b4:	e037883a 	mov	sp,fp
   1c3b8:	dfc00117 	ldw	ra,4(sp)
   1c3bc:	df000017 	ldw	fp,0(sp)
   1c3c0:	dec00204 	addi	sp,sp,8
   1c3c4:	f800283a 	ret

0001c3c8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1c3c8:	defffa04 	addi	sp,sp,-24
   1c3cc:	dfc00515 	stw	ra,20(sp)
   1c3d0:	df000415 	stw	fp,16(sp)
   1c3d4:	df000404 	addi	fp,sp,16
   1c3d8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1c3dc:	00800174 	movhi	r2,5
   1c3e0:	10a77604 	addi	r2,r2,-25128
   1c3e4:	10800017 	ldw	r2,0(r2)
   1c3e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1c3ec:	00003306 	br	1c4bc <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   1c3f0:	e0bffd17 	ldw	r2,-12(fp)
   1c3f4:	11000217 	ldw	r4,8(r2)
   1c3f8:	001082c0 	call	1082c <strlen>
   1c3fc:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   1c400:	e0bffd17 	ldw	r2,-12(fp)
   1c404:	10c00217 	ldw	r3,8(r2)
   1c408:	e0bffc17 	ldw	r2,-16(fp)
   1c40c:	1885883a 	add	r2,r3,r2
   1c410:	10bfffc4 	addi	r2,r2,-1
   1c414:	10800003 	ldbu	r2,0(r2)
   1c418:	10803fcc 	andi	r2,r2,255
   1c41c:	1080201c 	xori	r2,r2,128
   1c420:	10bfe004 	addi	r2,r2,-128
   1c424:	10800bd8 	cmpnei	r2,r2,47
   1c428:	1000031e 	bne	r2,zero,1c438 <alt_find_file+0x70>
    {
      len -= 1;
   1c42c:	e0bffc17 	ldw	r2,-16(fp)
   1c430:	10bfffc4 	addi	r2,r2,-1
   1c434:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1c438:	e0bffc17 	ldw	r2,-16(fp)
   1c43c:	1007883a 	mov	r3,r2
   1c440:	e0bffe17 	ldw	r2,-8(fp)
   1c444:	1885883a 	add	r2,r3,r2
   1c448:	10800003 	ldbu	r2,0(r2)
   1c44c:	10803fcc 	andi	r2,r2,255
   1c450:	1080201c 	xori	r2,r2,128
   1c454:	10bfe004 	addi	r2,r2,-128
   1c458:	10800be0 	cmpeqi	r2,r2,47
   1c45c:	10000a1e 	bne	r2,zero,1c488 <alt_find_file+0xc0>
   1c460:	e0bffc17 	ldw	r2,-16(fp)
   1c464:	1007883a 	mov	r3,r2
   1c468:	e0bffe17 	ldw	r2,-8(fp)
   1c46c:	1885883a 	add	r2,r3,r2
   1c470:	10800003 	ldbu	r2,0(r2)
   1c474:	10803fcc 	andi	r2,r2,255
   1c478:	1080201c 	xori	r2,r2,128
   1c47c:	10bfe004 	addi	r2,r2,-128
   1c480:	1004c03a 	cmpne	r2,r2,zero
   1c484:	10000a1e 	bne	r2,zero,1c4b0 <alt_find_file+0xe8>
   1c488:	e0bffd17 	ldw	r2,-12(fp)
   1c48c:	11000217 	ldw	r4,8(r2)
   1c490:	e1bffc17 	ldw	r6,-16(fp)
   1c494:	e17ffe17 	ldw	r5,-8(fp)
   1c498:	001c67c0 	call	1c67c <memcmp>
   1c49c:	1004c03a 	cmpne	r2,r2,zero
   1c4a0:	1000031e 	bne	r2,zero,1c4b0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1c4a4:	e0bffd17 	ldw	r2,-12(fp)
   1c4a8:	e0bfff15 	stw	r2,-4(fp)
   1c4ac:	00000806 	br	1c4d0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   1c4b0:	e0bffd17 	ldw	r2,-12(fp)
   1c4b4:	10800017 	ldw	r2,0(r2)
   1c4b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1c4bc:	00c00174 	movhi	r3,5
   1c4c0:	18e77604 	addi	r3,r3,-25128
   1c4c4:	e0bffd17 	ldw	r2,-12(fp)
   1c4c8:	10ffc91e 	bne	r2,r3,1c3f0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1c4cc:	e03fff15 	stw	zero,-4(fp)
   1c4d0:	e0bfff17 	ldw	r2,-4(fp)
}
   1c4d4:	e037883a 	mov	sp,fp
   1c4d8:	dfc00117 	ldw	ra,4(sp)
   1c4dc:	df000017 	ldw	fp,0(sp)
   1c4e0:	dec00204 	addi	sp,sp,8
   1c4e4:	f800283a 	ret

0001c4e8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1c4e8:	defffc04 	addi	sp,sp,-16
   1c4ec:	df000315 	stw	fp,12(sp)
   1c4f0:	df000304 	addi	fp,sp,12
   1c4f4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1c4f8:	00bffa04 	movi	r2,-24
   1c4fc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1c500:	e03ffe15 	stw	zero,-8(fp)
   1c504:	00001e06 	br	1c580 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   1c508:	e0bffe17 	ldw	r2,-8(fp)
   1c50c:	00c00174 	movhi	r3,5
   1c510:	18e2f804 	addi	r3,r3,-29728
   1c514:	10800324 	muli	r2,r2,12
   1c518:	10c5883a 	add	r2,r2,r3
   1c51c:	10800017 	ldw	r2,0(r2)
   1c520:	1004c03a 	cmpne	r2,r2,zero
   1c524:	1000131e 	bne	r2,zero,1c574 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   1c528:	e0bffe17 	ldw	r2,-8(fp)
   1c52c:	00c00174 	movhi	r3,5
   1c530:	18e2f804 	addi	r3,r3,-29728
   1c534:	10800324 	muli	r2,r2,12
   1c538:	10c7883a 	add	r3,r2,r3
   1c53c:	e0bfff17 	ldw	r2,-4(fp)
   1c540:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   1c544:	00800174 	movhi	r2,5
   1c548:	10a77a04 	addi	r2,r2,-25112
   1c54c:	10c00017 	ldw	r3,0(r2)
   1c550:	e0bffe17 	ldw	r2,-8(fp)
   1c554:	1880040e 	bge	r3,r2,1c568 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   1c558:	00c00174 	movhi	r3,5
   1c55c:	18e77a04 	addi	r3,r3,-25112
   1c560:	e0bffe17 	ldw	r2,-8(fp)
   1c564:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   1c568:	e0bffe17 	ldw	r2,-8(fp)
   1c56c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   1c570:	00000606 	br	1c58c <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1c574:	e0bffe17 	ldw	r2,-8(fp)
   1c578:	10800044 	addi	r2,r2,1
   1c57c:	e0bffe15 	stw	r2,-8(fp)
   1c580:	e0bffe17 	ldw	r2,-8(fp)
   1c584:	10800810 	cmplti	r2,r2,32
   1c588:	103fdf1e 	bne	r2,zero,1c508 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1c58c:	e0bffd17 	ldw	r2,-12(fp)
}
   1c590:	e037883a 	mov	sp,fp
   1c594:	df000017 	ldw	fp,0(sp)
   1c598:	dec00104 	addi	sp,sp,4
   1c59c:	f800283a 	ret

0001c5a0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1c5a0:	defffb04 	addi	sp,sp,-20
   1c5a4:	df000415 	stw	fp,16(sp)
   1c5a8:	df000404 	addi	fp,sp,16
   1c5ac:	e13ffe15 	stw	r4,-8(fp)
   1c5b0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1c5b4:	e0bfff17 	ldw	r2,-4(fp)
   1c5b8:	10840070 	cmpltui	r2,r2,4097
   1c5bc:	1000021e 	bne	r2,zero,1c5c8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1c5c0:	00840004 	movi	r2,4096
   1c5c4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1c5c8:	e0fffe17 	ldw	r3,-8(fp)
   1c5cc:	e0bfff17 	ldw	r2,-4(fp)
   1c5d0:	1885883a 	add	r2,r3,r2
   1c5d4:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1c5d8:	e0bffe17 	ldw	r2,-8(fp)
   1c5dc:	e0bffd15 	stw	r2,-12(fp)
   1c5e0:	00000506 	br	1c5f8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1c5e4:	e0bffd17 	ldw	r2,-12(fp)
   1c5e8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1c5ec:	e0bffd17 	ldw	r2,-12(fp)
   1c5f0:	10800804 	addi	r2,r2,32
   1c5f4:	e0bffd15 	stw	r2,-12(fp)
   1c5f8:	e0fffd17 	ldw	r3,-12(fp)
   1c5fc:	e0bffc17 	ldw	r2,-16(fp)
   1c600:	18bff836 	bltu	r3,r2,1c5e4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1c604:	e0bffe17 	ldw	r2,-8(fp)
   1c608:	108007cc 	andi	r2,r2,31
   1c60c:	1005003a 	cmpeq	r2,r2,zero
   1c610:	1000021e 	bne	r2,zero,1c61c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1c614:	e0bffd17 	ldw	r2,-12(fp)
   1c618:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1c61c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1c620:	e037883a 	mov	sp,fp
   1c624:	df000017 	ldw	fp,0(sp)
   1c628:	dec00104 	addi	sp,sp,4
   1c62c:	f800283a 	ret

0001c630 <atexit>:
   1c630:	200b883a 	mov	r5,r4
   1c634:	000d883a 	mov	r6,zero
   1c638:	0009883a 	mov	r4,zero
   1c63c:	000f883a 	mov	r7,zero
   1c640:	001c6f01 	jmpi	1c6f0 <__register_exitproc>

0001c644 <exit>:
   1c644:	defffe04 	addi	sp,sp,-8
   1c648:	000b883a 	mov	r5,zero
   1c64c:	dc000015 	stw	r16,0(sp)
   1c650:	dfc00115 	stw	ra,4(sp)
   1c654:	2021883a 	mov	r16,r4
   1c658:	001c8280 	call	1c828 <__call_exitprocs>
   1c65c:	00800174 	movhi	r2,5
   1c660:	10a77104 	addi	r2,r2,-25148
   1c664:	11000017 	ldw	r4,0(r2)
   1c668:	20800f17 	ldw	r2,60(r4)
   1c66c:	10000126 	beq	r2,zero,1c674 <exit+0x30>
   1c670:	103ee83a 	callr	r2
   1c674:	8009883a 	mov	r4,r16
   1c678:	001ca180 	call	1ca18 <_exit>

0001c67c <memcmp>:
   1c67c:	00c000c4 	movi	r3,3
   1c680:	1980032e 	bgeu	r3,r6,1c690 <memcmp+0x14>
   1c684:	2144b03a 	or	r2,r4,r5
   1c688:	10c4703a 	and	r2,r2,r3
   1c68c:	10000f26 	beq	r2,zero,1c6cc <memcmp+0x50>
   1c690:	31ffffc4 	addi	r7,r6,-1
   1c694:	3000061e 	bne	r6,zero,1c6b0 <memcmp+0x34>
   1c698:	00000a06 	br	1c6c4 <memcmp+0x48>
   1c69c:	39ffffc4 	addi	r7,r7,-1
   1c6a0:	00bfffc4 	movi	r2,-1
   1c6a4:	21000044 	addi	r4,r4,1
   1c6a8:	29400044 	addi	r5,r5,1
   1c6ac:	38800526 	beq	r7,r2,1c6c4 <memcmp+0x48>
   1c6b0:	20c00003 	ldbu	r3,0(r4)
   1c6b4:	28800003 	ldbu	r2,0(r5)
   1c6b8:	18bff826 	beq	r3,r2,1c69c <memcmp+0x20>
   1c6bc:	1885c83a 	sub	r2,r3,r2
   1c6c0:	f800283a 	ret
   1c6c4:	0005883a 	mov	r2,zero
   1c6c8:	f800283a 	ret
   1c6cc:	180f883a 	mov	r7,r3
   1c6d0:	20c00017 	ldw	r3,0(r4)
   1c6d4:	28800017 	ldw	r2,0(r5)
   1c6d8:	18bfed1e 	bne	r3,r2,1c690 <memcmp+0x14>
   1c6dc:	31bfff04 	addi	r6,r6,-4
   1c6e0:	21000104 	addi	r4,r4,4
   1c6e4:	29400104 	addi	r5,r5,4
   1c6e8:	39bff936 	bltu	r7,r6,1c6d0 <memcmp+0x54>
   1c6ec:	003fe806 	br	1c690 <memcmp+0x14>

0001c6f0 <__register_exitproc>:
   1c6f0:	defffa04 	addi	sp,sp,-24
   1c6f4:	00800174 	movhi	r2,5
   1c6f8:	10a77104 	addi	r2,r2,-25148
   1c6fc:	dc000015 	stw	r16,0(sp)
   1c700:	14000017 	ldw	r16,0(r2)
   1c704:	dd000415 	stw	r20,16(sp)
   1c708:	2829883a 	mov	r20,r5
   1c70c:	81405217 	ldw	r5,328(r16)
   1c710:	dcc00315 	stw	r19,12(sp)
   1c714:	dc800215 	stw	r18,8(sp)
   1c718:	dc400115 	stw	r17,4(sp)
   1c71c:	dfc00515 	stw	ra,20(sp)
   1c720:	2023883a 	mov	r17,r4
   1c724:	3027883a 	mov	r19,r6
   1c728:	3825883a 	mov	r18,r7
   1c72c:	28002526 	beq	r5,zero,1c7c4 <__register_exitproc+0xd4>
   1c730:	29000117 	ldw	r4,4(r5)
   1c734:	008007c4 	movi	r2,31
   1c738:	11002716 	blt	r2,r4,1c7d8 <__register_exitproc+0xe8>
   1c73c:	8800101e 	bne	r17,zero,1c780 <__register_exitproc+0x90>
   1c740:	2105883a 	add	r2,r4,r4
   1c744:	1085883a 	add	r2,r2,r2
   1c748:	20c00044 	addi	r3,r4,1
   1c74c:	1145883a 	add	r2,r2,r5
   1c750:	0009883a 	mov	r4,zero
   1c754:	15000215 	stw	r20,8(r2)
   1c758:	28c00115 	stw	r3,4(r5)
   1c75c:	2005883a 	mov	r2,r4
   1c760:	dfc00517 	ldw	ra,20(sp)
   1c764:	dd000417 	ldw	r20,16(sp)
   1c768:	dcc00317 	ldw	r19,12(sp)
   1c76c:	dc800217 	ldw	r18,8(sp)
   1c770:	dc400117 	ldw	r17,4(sp)
   1c774:	dc000017 	ldw	r16,0(sp)
   1c778:	dec00604 	addi	sp,sp,24
   1c77c:	f800283a 	ret
   1c780:	29802204 	addi	r6,r5,136
   1c784:	00800044 	movi	r2,1
   1c788:	110e983a 	sll	r7,r2,r4
   1c78c:	30c04017 	ldw	r3,256(r6)
   1c790:	2105883a 	add	r2,r4,r4
   1c794:	1085883a 	add	r2,r2,r2
   1c798:	1185883a 	add	r2,r2,r6
   1c79c:	19c6b03a 	or	r3,r3,r7
   1c7a0:	14802015 	stw	r18,128(r2)
   1c7a4:	14c00015 	stw	r19,0(r2)
   1c7a8:	00800084 	movi	r2,2
   1c7ac:	30c04015 	stw	r3,256(r6)
   1c7b0:	88bfe31e 	bne	r17,r2,1c740 <__register_exitproc+0x50>
   1c7b4:	30804117 	ldw	r2,260(r6)
   1c7b8:	11c4b03a 	or	r2,r2,r7
   1c7bc:	30804115 	stw	r2,260(r6)
   1c7c0:	003fdf06 	br	1c740 <__register_exitproc+0x50>
   1c7c4:	00800174 	movhi	r2,5
   1c7c8:	10a7de04 	addi	r2,r2,-24712
   1c7cc:	100b883a 	mov	r5,r2
   1c7d0:	80805215 	stw	r2,328(r16)
   1c7d4:	003fd606 	br	1c730 <__register_exitproc+0x40>
   1c7d8:	00800034 	movhi	r2,0
   1c7dc:	10800004 	addi	r2,r2,0
   1c7e0:	1000021e 	bne	r2,zero,1c7ec <__register_exitproc+0xfc>
   1c7e4:	013fffc4 	movi	r4,-1
   1c7e8:	003fdc06 	br	1c75c <__register_exitproc+0x6c>
   1c7ec:	01006404 	movi	r4,400
   1c7f0:	103ee83a 	callr	r2
   1c7f4:	1007883a 	mov	r3,r2
   1c7f8:	103ffa26 	beq	r2,zero,1c7e4 <__register_exitproc+0xf4>
   1c7fc:	80805217 	ldw	r2,328(r16)
   1c800:	180b883a 	mov	r5,r3
   1c804:	18000115 	stw	zero,4(r3)
   1c808:	18800015 	stw	r2,0(r3)
   1c80c:	80c05215 	stw	r3,328(r16)
   1c810:	18006215 	stw	zero,392(r3)
   1c814:	18006315 	stw	zero,396(r3)
   1c818:	0009883a 	mov	r4,zero
   1c81c:	883fc826 	beq	r17,zero,1c740 <__register_exitproc+0x50>
   1c820:	003fd706 	br	1c780 <__register_exitproc+0x90>

0001c824 <register_fini>:
   1c824:	f800283a 	ret

0001c828 <__call_exitprocs>:
   1c828:	00800174 	movhi	r2,5
   1c82c:	10a77104 	addi	r2,r2,-25148
   1c830:	10800017 	ldw	r2,0(r2)
   1c834:	defff304 	addi	sp,sp,-52
   1c838:	df000b15 	stw	fp,44(sp)
   1c83c:	d8800115 	stw	r2,4(sp)
   1c840:	00800034 	movhi	r2,0
   1c844:	10800004 	addi	r2,r2,0
   1c848:	1005003a 	cmpeq	r2,r2,zero
   1c84c:	d8800215 	stw	r2,8(sp)
   1c850:	d8800117 	ldw	r2,4(sp)
   1c854:	dd400815 	stw	r21,32(sp)
   1c858:	dd000715 	stw	r20,28(sp)
   1c85c:	10805204 	addi	r2,r2,328
   1c860:	dfc00c15 	stw	ra,48(sp)
   1c864:	ddc00a15 	stw	r23,40(sp)
   1c868:	dd800915 	stw	r22,36(sp)
   1c86c:	dcc00615 	stw	r19,24(sp)
   1c870:	dc800515 	stw	r18,20(sp)
   1c874:	dc400415 	stw	r17,16(sp)
   1c878:	dc000315 	stw	r16,12(sp)
   1c87c:	282b883a 	mov	r21,r5
   1c880:	2039883a 	mov	fp,r4
   1c884:	d8800015 	stw	r2,0(sp)
   1c888:	2829003a 	cmpeq	r20,r5,zero
   1c88c:	d8800117 	ldw	r2,4(sp)
   1c890:	14405217 	ldw	r17,328(r2)
   1c894:	88001026 	beq	r17,zero,1c8d8 <__call_exitprocs+0xb0>
   1c898:	ddc00017 	ldw	r23,0(sp)
   1c89c:	88800117 	ldw	r2,4(r17)
   1c8a0:	8c802204 	addi	r18,r17,136
   1c8a4:	143fffc4 	addi	r16,r2,-1
   1c8a8:	80000916 	blt	r16,zero,1c8d0 <__call_exitprocs+0xa8>
   1c8ac:	05bfffc4 	movi	r22,-1
   1c8b0:	a000151e 	bne	r20,zero,1c908 <__call_exitprocs+0xe0>
   1c8b4:	8409883a 	add	r4,r16,r16
   1c8b8:	2105883a 	add	r2,r4,r4
   1c8bc:	1485883a 	add	r2,r2,r18
   1c8c0:	10c02017 	ldw	r3,128(r2)
   1c8c4:	a8c01126 	beq	r21,r3,1c90c <__call_exitprocs+0xe4>
   1c8c8:	843fffc4 	addi	r16,r16,-1
   1c8cc:	85bff81e 	bne	r16,r22,1c8b0 <__call_exitprocs+0x88>
   1c8d0:	d8800217 	ldw	r2,8(sp)
   1c8d4:	10003126 	beq	r2,zero,1c99c <__call_exitprocs+0x174>
   1c8d8:	dfc00c17 	ldw	ra,48(sp)
   1c8dc:	df000b17 	ldw	fp,44(sp)
   1c8e0:	ddc00a17 	ldw	r23,40(sp)
   1c8e4:	dd800917 	ldw	r22,36(sp)
   1c8e8:	dd400817 	ldw	r21,32(sp)
   1c8ec:	dd000717 	ldw	r20,28(sp)
   1c8f0:	dcc00617 	ldw	r19,24(sp)
   1c8f4:	dc800517 	ldw	r18,20(sp)
   1c8f8:	dc400417 	ldw	r17,16(sp)
   1c8fc:	dc000317 	ldw	r16,12(sp)
   1c900:	dec00d04 	addi	sp,sp,52
   1c904:	f800283a 	ret
   1c908:	8409883a 	add	r4,r16,r16
   1c90c:	88c00117 	ldw	r3,4(r17)
   1c910:	2105883a 	add	r2,r4,r4
   1c914:	1445883a 	add	r2,r2,r17
   1c918:	18ffffc4 	addi	r3,r3,-1
   1c91c:	11800217 	ldw	r6,8(r2)
   1c920:	1c001526 	beq	r3,r16,1c978 <__call_exitprocs+0x150>
   1c924:	10000215 	stw	zero,8(r2)
   1c928:	303fe726 	beq	r6,zero,1c8c8 <__call_exitprocs+0xa0>
   1c92c:	00c00044 	movi	r3,1
   1c930:	1c06983a 	sll	r3,r3,r16
   1c934:	90804017 	ldw	r2,256(r18)
   1c938:	8cc00117 	ldw	r19,4(r17)
   1c93c:	1884703a 	and	r2,r3,r2
   1c940:	10001426 	beq	r2,zero,1c994 <__call_exitprocs+0x16c>
   1c944:	90804117 	ldw	r2,260(r18)
   1c948:	1884703a 	and	r2,r3,r2
   1c94c:	10000c1e 	bne	r2,zero,1c980 <__call_exitprocs+0x158>
   1c950:	2105883a 	add	r2,r4,r4
   1c954:	1485883a 	add	r2,r2,r18
   1c958:	11400017 	ldw	r5,0(r2)
   1c95c:	e009883a 	mov	r4,fp
   1c960:	303ee83a 	callr	r6
   1c964:	88800117 	ldw	r2,4(r17)
   1c968:	98bfc81e 	bne	r19,r2,1c88c <__call_exitprocs+0x64>
   1c96c:	b8800017 	ldw	r2,0(r23)
   1c970:	147fd526 	beq	r2,r17,1c8c8 <__call_exitprocs+0xa0>
   1c974:	003fc506 	br	1c88c <__call_exitprocs+0x64>
   1c978:	8c000115 	stw	r16,4(r17)
   1c97c:	003fea06 	br	1c928 <__call_exitprocs+0x100>
   1c980:	2105883a 	add	r2,r4,r4
   1c984:	1485883a 	add	r2,r2,r18
   1c988:	11000017 	ldw	r4,0(r2)
   1c98c:	303ee83a 	callr	r6
   1c990:	003ff406 	br	1c964 <__call_exitprocs+0x13c>
   1c994:	303ee83a 	callr	r6
   1c998:	003ff206 	br	1c964 <__call_exitprocs+0x13c>
   1c99c:	88800117 	ldw	r2,4(r17)
   1c9a0:	1000081e 	bne	r2,zero,1c9c4 <__call_exitprocs+0x19c>
   1c9a4:	89000017 	ldw	r4,0(r17)
   1c9a8:	20000726 	beq	r4,zero,1c9c8 <__call_exitprocs+0x1a0>
   1c9ac:	b9000015 	stw	r4,0(r23)
   1c9b0:	8809883a 	mov	r4,r17
   1c9b4:	00000000 	call	0 <__alt_mem_ins_mem0-0x10000>
   1c9b8:	bc400017 	ldw	r17,0(r23)
   1c9bc:	883fb71e 	bne	r17,zero,1c89c <__call_exitprocs+0x74>
   1c9c0:	003fc506 	br	1c8d8 <__call_exitprocs+0xb0>
   1c9c4:	89000017 	ldw	r4,0(r17)
   1c9c8:	882f883a 	mov	r23,r17
   1c9cc:	2023883a 	mov	r17,r4
   1c9d0:	883fb21e 	bne	r17,zero,1c89c <__call_exitprocs+0x74>
   1c9d4:	003fc006 	br	1c8d8 <__call_exitprocs+0xb0>

0001c9d8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   1c9d8:	defffd04 	addi	sp,sp,-12
   1c9dc:	df000215 	stw	fp,8(sp)
   1c9e0:	df000204 	addi	fp,sp,8
   1c9e4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   1c9e8:	e0bfff17 	ldw	r2,-4(fp)
   1c9ec:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1c9f0:	e0bffe17 	ldw	r2,-8(fp)
   1c9f4:	1005003a 	cmpeq	r2,r2,zero
   1c9f8:	1000021e 	bne	r2,zero,1ca04 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   1c9fc:	002af070 	cmpltui	zero,zero,43969
   1ca00:	00000106 	br	1ca08 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   1ca04:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   1ca08:	e037883a 	mov	sp,fp
   1ca0c:	df000017 	ldw	fp,0(sp)
   1ca10:	dec00104 	addi	sp,sp,4
   1ca14:	f800283a 	ret

0001ca18 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1ca18:	defffd04 	addi	sp,sp,-12
   1ca1c:	dfc00215 	stw	ra,8(sp)
   1ca20:	df000115 	stw	fp,4(sp)
   1ca24:	df000104 	addi	fp,sp,4
   1ca28:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   1ca2c:	e13fff17 	ldw	r4,-4(fp)
   1ca30:	001c9d80 	call	1c9d8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1ca34:	003fff06 	br	1ca34 <_exit+0x1c>
   1ca38:	0001c824 	muli	zero,zero,1824
