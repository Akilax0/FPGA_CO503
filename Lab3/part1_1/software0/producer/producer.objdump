
producer.elf:     file format elf32-littlenios2
producer.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000c7c4 memsz 0x0000c7c4 flags r-x
    LOAD off    0x0000e384 vaddr 0x00030384 paddr 0x0000c7e4 align 2**12
         filesz 0x00001a5c memsz 0x00001d5c flags rw-
    LOAD off    0x00010000 vaddr 0x00030000 paddr 0x00030000 align 2**12
         filesz 0x00000384 memsz 0x00000384 flags r--

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c630  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000384  00030000  00030000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  00030384  0000c7e4  0000e384  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000300  00031de0  0000e240  0000fde0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00010384  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000c98  00000000  00000000  000103a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000013ef  00000000  00000000  00011040  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023196  00000000  00000000  0001242f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007976  00000000  00000000  000355c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013555  00000000  00000000  0003cf3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000018a4  00000000  00000000  00050490  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002154  00000000  00000000  00051d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000be16  00000000  00000000  00053e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0005fca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  0005fcc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00063659  2**0
                  CONTENTS, READONLY
 18 .cpu          00000004  00000000  00000000  0006365c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00063660  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00063661  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00063662  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00063666  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006366a  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0006366e  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00063679  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00063684  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  0006368f  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000044  00000000  00000000  00063692  2**0
                  CONTENTS, READONLY
 29 .jdi          00008508  00000000  00000000  000636d6  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00062901  00000000  00000000  0006bbde  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
00030000 l    d  .rodata	00000000 .rodata
00030384 l    d  .rwdata	00000000 .rwdata
00031de0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO_1.c
00000000 l    df *ABS*	00000000 producer.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000007d8 l     F .text	00000058 __sprint_r
000300b2 l     O .rodata	00000010 blanks.3452
000300a2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000283c l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004238 l     F .text	00000058 std
00004344 l     F .text	00000008 __fp_lock
0000434c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00030384 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00031dac l     O .rwdata	00000004 charset
000300e8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00030230 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
000084d8 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00009604 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00009e78 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00009ed8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00009fd8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000a0f8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000a1d8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000a334 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000a560 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00031dd0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000a7fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00030d40 l     O .rwdata	00001060 jtag_uart_0
0000a8ec l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000ab2c l     F .text	00000228 altera_avalon_jtag_uart_irq
0000ad54 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000b3d0 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000b6f4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000bb18 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000bc54 l     F .text	000000dc alt_file_locked
0000beb8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000c5cc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000c780 l     F .text	00000040 alt_sim_halt
00005ff4 g     F .text	00000094 _mprec_log10
000060e0 g     F .text	00000088 __any_on
000077ec g     F .text	00000070 _isatty_r
00030208 g     O .rodata	00000028 __mprec_tinytens
0000a394 g     F .text	0000006c alt_main
000006b0 g     F .text	000000a0 _puts_r
00031de0 g     O .bss	00000004 writep
00031e50 g     O .bss	00000100 alt_irq
0000785c g     F .text	00000078 _lseek_r
0000c7e4 g       *ABS*	00000000 __flash_rwdata_start
00008ff8 g     F .text	00000088 __eqdf2
000004a8 g     F .text	00000098 FIFO_1_INIT
000320e0 g       *ABS*	00000000 __alt_heap_start
00000638 g     F .text	00000044 printf
000072b8 g     F .text	00000068 __sseek
000042a0 g     F .text	000000a4 __sinit
00004f78 g     F .text	00000084 _setlocale_r
000043a0 g     F .text	00000068 __sfmoreglue
0000a420 g     F .text	00000020 __malloc_unlock
00031de4 g     O .bss	00000004 readp
00005a70 g     F .text	000000e0 memmove
00004390 g     F .text	00000010 _cleanup
00006168 g     F .text	000000bc _Balloc
00009108 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00007778 g     F .text	00000074 _fstat_r
00031e0c g     O .bss	00000004 errno
00031e14 g     O .bss	00000004 alt_argv
00039da0 g       *ABS*	00000000 _gp
00030000 g       *ABS*	00000000 __alt_mem_data_mem0
00030bc0 g     O .rwdata	00000180 alt_fd_list
0000c0dc g     F .text	00000094 alt_find_dev
000059d0 g     F .text	000000a0 memcpy
00004384 g     F .text	0000000c _cleanup_r
000092a0 g     F .text	000000f8 __floatsidf
0000bbdc g     F .text	00000078 alt_io_redirect
00009218 g     F .text	00000088 __ltdf2
0000c7e4 g       *ABS*	00000000 __DTOR_END__
00000750 g     F .text	00000014 puts
00005f44 g     F .text	000000b0 __ratio
0000af6c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0000067c g     F .text	00000034 _printf_r
00009740 g     F .text	00000008 __udivsi3
0000a038 g     F .text	000000c0 isatty
00030118 g     O .rodata	000000c8 __mprec_tens
00000000 g       *ABS*	00000000 __alt_mem_ins_mem0
00004f54 g     F .text	00000008 __locale_charset
0000c348 g     F .text	00000090 alt_icache_flush
00031e00 g     O .bss	00000004 __malloc_top_pad
00031da8 g     O .rwdata	00000004 __mb_cur_max
00004f5c g     F .text	0000000c _localeconv_r
00006860 g     F .text	0000003c __i2b
00004938 g     F .text	0000049c __sfvwrite_r
00007240 g     F .text	00000070 _sbrk_r
00031de8 g     O .bss	00000004 fullp
000078d4 g     F .text	00000078 _read_r
00030784 g     O .rwdata	0000000c __lc_ctype
00031dc8 g     O .rwdata	00000004 alt_max_fd
00009b7c g     F .text	00000138 __unpack_d
00007654 g     F .text	00000110 _fclose_r
00004204 g     F .text	00000034 fflush
00031e04 g     O .bss	00000004 __malloc_max_sbrked_mem
00008968 g     F .text	00000074 __adddf3
00005e24 g     F .text	00000120 __b2d
00007f28 g     F .text	000005b0 __umoddi3
0000a244 g     F .text	000000f0 lseek
00031da4 g     O .rwdata	00000004 _global_impure_ptr
00006bdc g     F .text	000005f4 _realloc_r
000320e0 g       *ABS*	00000000 __bss_end
0000ba20 g     F .text	000000f8 alt_iic_isr_register
0000bfb0 g     F .text	0000010c alt_tick
0000794c g     F .text	000005dc __udivdi3
000301e0 g     O .rodata	00000028 __mprec_bigtens
00006abc g     F .text	00000120 __s2b
00009470 g     F .text	00000194 __floatunsidf
00005d44 g     F .text	00000060 __mcmp
0000436c g     F .text	00000018 __fp_lock_all
0000b9d8 g     F .text	00000048 alt_ic_irq_enabled
00000558 g     F .text	0000009c producer
0000bf18 g     F .text	00000098 alt_alarm_stop
00031e1c g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
00030b98 g     O .rwdata	00000028 alt_dev_null
0000b624 g     F .text	0000001c alt_dcache_flush_all
00005c10 g     F .text	00000070 __hi0bits
00009398 g     F .text	000000d8 __fixdfsi
00031de0 g       *ABS*	00000000 __ram_rwdata_end
00031dc0 g     O .rwdata	00000008 alt_dev_list
0000a6dc g     F .text	00000120 write
00030384 g       *ABS*	00000000 __ram_rodata_end
00009f04 g     F .text	000000d4 fstat
0000699c g     F .text	00000120 __pow5mult
00031df4 g     O .bss	00000004 __nlocale_changed
00009748 g     F .text	00000008 __umodsi3
000320e0 g       *ABS*	00000000 end
0000aa6c g     F .text	000000c0 altera_avalon_jtag_uart_init
0000c7e0 g       *ABS*	00000000 __CTOR_LIST__
00038000 g       *ABS*	00000000 __alt_stack_pointer
0000b440 g     F .text	00000090 alt_avalon_timer_sc_init
000097e8 g     F .text	00000080 __clzsi2
0000b190 g     F .text	00000240 altera_avalon_jtag_uart_write
00004290 g     F .text	00000004 __sfp_lock_acquire
000058ec g     F .text	000000e4 memchr
00000830 g     F .text	00001eac ___vfprintf_internal_r
00004624 g     F .text	00000314 _free_r
0000c5d0 g     F .text	000001b0 __call_exitprocs
00031df8 g     O .bss	00000004 __mlocale_changed
00031db4 g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000003c _start
00031e20 g     O .bss	00000004 _alt_tick_rate
0000652c g     F .text	0000014c __lshift
00031e24 g     O .bss	00000004 _alt_nticks
0000a440 g     F .text	00000120 read
0000a890 g     F .text	0000005c alt_sys_init
0000c498 g     F .text	00000134 __register_exitproc
00006678 g     F .text	000001e8 __multiply
0000ae04 g     F .text	00000074 altera_avalon_jtag_uart_close
00030384 g       *ABS*	00000000 __ram_rwdata_start
00030000 g       *ABS*	00000000 __ram_rodata_start
00031e28 g     O .bss	00000028 __malloc_current_mallinfo
00006224 g     F .text	0000017c __d2b
0000a924 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000c290 g     F .text	000000b8 alt_get_fd
00009cb4 g     F .text	000000c8 __fpcmp_parts_d
000075e4 g     F .text	00000070 _close_r
0000c424 g     F .text	00000074 memcmp
0000a9d4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
000320e0 g       *ABS*	00000000 __alt_stack_base
0000aa1c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00002700 g     F .text	0000013c __swsetup_r
00008da0 g     F .text	00000258 __divdf3
00004408 g     F .text	000000f0 __sfp
00006088 g     F .text	00000058 __copybits
00030790 g     O .rwdata	00000408 __malloc_av_
0000429c g     F .text	00000004 __sinit_lock_release
000089dc g     F .text	000003c4 __muldf3
0000739c g     F .text	00000060 __sread
0000c170 g     F .text	00000120 alt_find_file
0000b640 g     F .text	000000b4 alt_dev_llist_insert
0000a400 g     F .text	00000020 __malloc_lock
0000a620 g     F .text	000000bc sbrk
00004008 g     F .text	000001fc _fflush_r
00007530 g     F .text	000000b4 _calloc_r
00031de0 g       *ABS*	00000000 __bss_start
00005b50 g     F .text	00000098 memset
00000540 g     F .text	00000018 main
00031e18 g     O .bss	00000004 alt_envp
00031e08 g     O .bss	00000004 __malloc_max_total_mem
0000a97c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000072b0 g     F .text	00000008 __sclose
00038000 g       *ABS*	00000000 __alt_heap_limit
00007764 g     F .text	00000014 fclose
00031f50 g     O .bss	00000190 _atexit0
00002a54 g     F .text	000015b4 _dtoa_r
000051ac g     F .text	00000740 _malloc_r
00031dcc g     O .rwdata	00000004 alt_errno
00004e9c g     F .text	000000b8 _fwalk
000001f0 g     F .text	00000160 WRITE_FIFO_1
00009680 g     F .text	00000060 __divsi3
0003023c g     O .rodata	00000014 __thenan_df
000044f8 g     F .text	0000012c _malloc_trim_r
0000c7e4 g       *ABS*	00000000 __CTOR_END__
000073fc g     F .text	000000bc strcmp
00030000 g       *ABS*	00000000 __flash_rodata_start
0000c7e4 g       *ABS*	00000000 __DTOR_LIST__
000005f4 g     F .text	00000044 delay
00009080 g     F .text	00000088 __nedf2
0000a85c g     F .text	00000034 alt_irq_init
0000a5c0 g     F .text	00000060 alt_release_fd
00030250 g     O .rodata	00000100 __clz_tab
00031dfc g     O .bss	00000004 _PathLocale
0000c3d8 g     F .text	00000014 atexit
000074b8 g     F .text	00000078 _write_r
00004ffc g     F .text	0000001c setlocale
00031da0 g     O .rwdata	00000004 _impure_ptr
00031e10 g     O .bss	00000004 alt_argc
0000b7b8 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00005da4 g     F .text	00000080 __ulp
000071d0 g     F .text	00000040 __isinfd
00004354 g     F .text	00000018 __fp_unlock_all
00031db8 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00004f68 g     F .text	00000010 localeconv
0000b84c g     F .text	00000050 alt_ic_isr_register
00031de0 g       *ABS*	00000000 _edata
000320e0 g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
0000ae78 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000b938 g     F .text	000000a0 alt_ic_irq_disable
00007320 g     F .text	0000007c __swrite
00031db0 g     O .rwdata	00000004 __malloc_trim_threshold
0000c0bc g     F .text	00000020 altera_nios2_qsys_irq_init
0000c3ec g     F .text	00000038 exit
00004dd4 g     F .text	000000c8 _fwalk_reent
000063a0 g     F .text	0000018c __mdiff
000096e0 g     F .text	00000060 __modsi3
00038000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004294 g     F .text	00000004 __sfp_lock_release
0000c7c0 g     F .text	00000020 _exit
00007210 g     F .text	00000030 __isnand
0000b4d0 g     F .text	00000154 alt_alarm_start
00009750 g     F .text	00000098 __muldi3
00005018 g     F .text	00000194 __smakebuf_r
00000764 g     F .text	00000074 strlen
0000bd30 g     F .text	00000188 open
00009190 g     F .text	00000088 __gedf2
00000350 g     F .text	00000158 READ_FIFO_1
0000b81c g     F .text	00000030 alt_icache_flush_all
00031dd4 g     O .rwdata	00000004 alt_priority_mask
00031dec g     O .bss	00000004 emptyp
0000b89c g     F .text	0000009c alt_ic_irq_enable
000026dc g     F .text	00000024 __vfprintf_internal
000088e8 g     F .text	00000080 __subdf3
00005c80 g     F .text	000000c4 __lo0bits
00031dd8 g     O .rwdata	00000008 alt_alarm_list
0000b754 g     F .text	00000064 _do_ctors
00031df0 g     O .bss	00000004 countp
00009d7c g     F .text	000000fc close
0000a158 g     F .text	00000080 alt_load
00009868 g     F .text	00000314 __pack_d
00020000 g       *ABS*	00000000 __alt_mem_shared_mem
00000000  w      *UND*	00000000 free
00004298 g     F .text	00000004 __sinit_lock_acquire
0000689c g     F .text	00000100 __multadd
00005be8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c000f4 	movhi	r3,3
 134:	18c79404 	addi	r3,r3,7760
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c000f4 	movhi	r3,3
 14c:	18c79404 	addi	r3,r3,7760
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	dee00014 	ori	sp,sp,32768

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
     1c0:	d6a76814 	ori	gp,gp,40352
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
     1c8:	10877814 	ori	r2,r2,7648

    movhi r3, %hi(__bss_end)
     1cc:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
     1d0:	18c83814 	ori	r3,r3,8416

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e4:	000a1580 	call	a158 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e8:	000a3940 	call	a394 <alt_main>

000001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1ec:	003fff06 	br	1ec <alt_after_alt_main>

000001f0 <WRITE_FIFO_1>:


#include "FIFO_1.h"

void WRITE_FIFO_1(int *buffer)
{
     1f0:	defffe04 	addi	sp,sp,-8
     1f4:	df000115 	stw	fp,4(sp)
     1f8:	df000104 	addi	fp,sp,4
     1fc:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is full
	while(IORD_32DIRECT(MEM_BASE,fullp)==0x1){}
     200:	d0a01217 	ldw	r2,-32696(gp)
     204:	1007883a 	mov	r3,r2
     208:	008000b4 	movhi	r2,2
     20c:	10801204 	addi	r2,r2,72
     210:	1885883a 	add	r2,r3,r2
     214:	10800037 	ldwio	r2,0(r2)
     218:	10800060 	cmpeqi	r2,r2,1
     21c:	103ff81e 	bne	r2,zero,200 <WRITE_FIFO_1+0x10>

	// Write the data to FIFO
	IOWR_32DIRECT(MEM_BASE,writep,*buffer);
     220:	d0a01017 	ldw	r2,-32704(gp)
     224:	1007883a 	mov	r3,r2
     228:	008000b4 	movhi	r2,2
     22c:	10801204 	addi	r2,r2,72
     230:	1889883a 	add	r4,r3,r2
     234:	e0bfff17 	ldw	r2,-4(fp)
     238:	10c00017 	ldw	r3,0(r2)
     23c:	2005883a 	mov	r2,r4
     240:	10c00035 	stwio	r3,0(r2)
	//printf("Producer sent [%i]\t%x\t%i\n",*buffer,writep,IORD_32DIRECT(MEM_BASE,writep));
	// Update the write pointer
	writep += UNIT_SIZE;
     244:	d0a01017 	ldw	r2,-32704(gp)
     248:	10800104 	addi	r2,r2,4
     24c:	d0a01015 	stw	r2,-32704(gp)

	// Update "count" in shared mem
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE,countp) + 0x1);
     250:	d0a01417 	ldw	r2,-32688(gp)
     254:	1007883a 	mov	r3,r2
     258:	008000b4 	movhi	r2,2
     25c:	10801204 	addi	r2,r2,72
     260:	1889883a 	add	r4,r3,r2
     264:	d0a01417 	ldw	r2,-32688(gp)
     268:	1007883a 	mov	r3,r2
     26c:	008000b4 	movhi	r2,2
     270:	10801204 	addi	r2,r2,72
     274:	1885883a 	add	r2,r3,r2
     278:	10800037 	ldwio	r2,0(r2)
     27c:	10c00044 	addi	r3,r2,1
     280:	2005883a 	mov	r2,r4
     284:	10c00035 	stwio	r3,0(r2)

	// Update the "full?" and "empty?" flags accordingly
	// Set the full flag if FIFO is now full
	// Reset the empty flag if FIFO now has 1 entry
	if(IORD_32DIRECT(MEM_BASE,countp)==CAPACITY){
     288:	d0a01417 	ldw	r2,-32688(gp)
     28c:	1007883a 	mov	r3,r2
     290:	008000b4 	movhi	r2,2
     294:	10801204 	addi	r2,r2,72
     298:	1885883a 	add	r2,r3,r2
     29c:	10800037 	ldwio	r2,0(r2)
     2a0:	10800a18 	cmpnei	r2,r2,40
     2a4:	1000091e 	bne	r2,zero,2cc <WRITE_FIFO_1+0xdc>
		IOWR_32DIRECT(MEM_BASE,fullp,0x1);
     2a8:	d0a01217 	ldw	r2,-32696(gp)
     2ac:	1007883a 	mov	r3,r2
     2b0:	008000b4 	movhi	r2,2
     2b4:	10801204 	addi	r2,r2,72
     2b8:	1885883a 	add	r2,r3,r2
     2bc:	1007883a 	mov	r3,r2
     2c0:	00800044 	movi	r2,1
     2c4:	18800035 	stwio	r2,0(r3)
     2c8:	00000606 	br	2e4 <WRITE_FIFO_1+0xf4>
	}else{
		IOWR_32DIRECT(MEM_BASE,fullp,0x0);
     2cc:	d0a01217 	ldw	r2,-32696(gp)
     2d0:	1007883a 	mov	r3,r2
     2d4:	008000b4 	movhi	r2,2
     2d8:	10801204 	addi	r2,r2,72
     2dc:	1885883a 	add	r2,r3,r2
     2e0:	10000035 	stwio	zero,0(r2)
	}
	if(IORD_32DIRECT(MEM_BASE,countp)==0x0){
     2e4:	d0a01417 	ldw	r2,-32688(gp)
     2e8:	1007883a 	mov	r3,r2
     2ec:	008000b4 	movhi	r2,2
     2f0:	10801204 	addi	r2,r2,72
     2f4:	1885883a 	add	r2,r3,r2
     2f8:	10800037 	ldwio	r2,0(r2)
     2fc:	1004c03a 	cmpne	r2,r2,zero
     300:	1000091e 	bne	r2,zero,328 <WRITE_FIFO_1+0x138>
		IOWR_32DIRECT(MEM_BASE,emptyp,0x1);
     304:	d0a01317 	ldw	r2,-32692(gp)
     308:	1007883a 	mov	r3,r2
     30c:	008000b4 	movhi	r2,2
     310:	10801204 	addi	r2,r2,72
     314:	1885883a 	add	r2,r3,r2
     318:	1007883a 	mov	r3,r2
     31c:	00800044 	movi	r2,1
     320:	18800035 	stwio	r2,0(r3)
     324:	00000606 	br	340 <WRITE_FIFO_1+0x150>
	}else{
		IOWR_32DIRECT(MEM_BASE,emptyp,0x0);
     328:	d0a01317 	ldw	r2,-32692(gp)
     32c:	1007883a 	mov	r3,r2
     330:	008000b4 	movhi	r2,2
     334:	10801204 	addi	r2,r2,72
     338:	1885883a 	add	r2,r3,r2
     33c:	10000035 	stwio	zero,0(r2)
	}
}
     340:	e037883a 	mov	sp,fp
     344:	df000017 	ldw	fp,0(sp)
     348:	dec00104 	addi	sp,sp,4
     34c:	f800283a 	ret

00000350 <READ_FIFO_1>:


void READ_FIFO_1(int *buffer)
{
     350:	defffe04 	addi	sp,sp,-8
     354:	df000115 	stw	fp,4(sp)
     358:	df000104 	addi	fp,sp,4
     35c:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is empty
	while(IORD_32DIRECT(MEM_BASE,emptyp)==0x1){}
     360:	d0a01317 	ldw	r2,-32692(gp)
     364:	1007883a 	mov	r3,r2
     368:	008000b4 	movhi	r2,2
     36c:	10801204 	addi	r2,r2,72
     370:	1885883a 	add	r2,r3,r2
     374:	10800037 	ldwio	r2,0(r2)
     378:	10800060 	cmpeqi	r2,r2,1
     37c:	103ff81e 	bne	r2,zero,360 <READ_FIFO_1+0x10>

	// Read the data
	buffer = IORD_32DIRECT(MEM_BASE,readp);
     380:	d0a01117 	ldw	r2,-32700(gp)
     384:	1007883a 	mov	r3,r2
     388:	008000b4 	movhi	r2,2
     38c:	10801204 	addi	r2,r2,72
     390:	1885883a 	add	r2,r3,r2
     394:	10800037 	ldwio	r2,0(r2)
     398:	e0bfff15 	stw	r2,-4(fp)

	// Update the read pointer
	readp += UNIT_SIZE;
     39c:	d0a01117 	ldw	r2,-32700(gp)
     3a0:	10800104 	addi	r2,r2,4
     3a4:	d0a01115 	stw	r2,-32700(gp)

	// Update "count" in shared mem
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE,countp) - 0x1);
     3a8:	d0a01417 	ldw	r2,-32688(gp)
     3ac:	1007883a 	mov	r3,r2
     3b0:	008000b4 	movhi	r2,2
     3b4:	10801204 	addi	r2,r2,72
     3b8:	1889883a 	add	r4,r3,r2
     3bc:	d0a01417 	ldw	r2,-32688(gp)
     3c0:	1007883a 	mov	r3,r2
     3c4:	008000b4 	movhi	r2,2
     3c8:	10801204 	addi	r2,r2,72
     3cc:	1885883a 	add	r2,r3,r2
     3d0:	10800037 	ldwio	r2,0(r2)
     3d4:	10ffffc4 	addi	r3,r2,-1
     3d8:	2005883a 	mov	r2,r4
     3dc:	10c00035 	stwio	r3,0(r2)

	// Update the "full?" and "empty?" flags accordingly
	// Set the empty flag if FIFO is now empty
	// Reset the full flag if FIFO now has 1 entry less than capacity
	if(IORD_32DIRECT(MEM_BASE,countp)==CAPACITY){
     3e0:	d0a01417 	ldw	r2,-32688(gp)
     3e4:	1007883a 	mov	r3,r2
     3e8:	008000b4 	movhi	r2,2
     3ec:	10801204 	addi	r2,r2,72
     3f0:	1885883a 	add	r2,r3,r2
     3f4:	10800037 	ldwio	r2,0(r2)
     3f8:	10800a18 	cmpnei	r2,r2,40
     3fc:	1000091e 	bne	r2,zero,424 <READ_FIFO_1+0xd4>
		IOWR_32DIRECT(MEM_BASE,fullp,0x1);
     400:	d0a01217 	ldw	r2,-32696(gp)
     404:	1007883a 	mov	r3,r2
     408:	008000b4 	movhi	r2,2
     40c:	10801204 	addi	r2,r2,72
     410:	1885883a 	add	r2,r3,r2
     414:	1007883a 	mov	r3,r2
     418:	00800044 	movi	r2,1
     41c:	18800035 	stwio	r2,0(r3)
     420:	00000606 	br	43c <READ_FIFO_1+0xec>
	}else{
		IOWR_32DIRECT(MEM_BASE,fullp,0x0);
     424:	d0a01217 	ldw	r2,-32696(gp)
     428:	1007883a 	mov	r3,r2
     42c:	008000b4 	movhi	r2,2
     430:	10801204 	addi	r2,r2,72
     434:	1885883a 	add	r2,r3,r2
     438:	10000035 	stwio	zero,0(r2)
	}
	if(IORD_32DIRECT(MEM_BASE,countp)==0x0){
     43c:	d0a01417 	ldw	r2,-32688(gp)
     440:	1007883a 	mov	r3,r2
     444:	008000b4 	movhi	r2,2
     448:	10801204 	addi	r2,r2,72
     44c:	1885883a 	add	r2,r3,r2
     450:	10800037 	ldwio	r2,0(r2)
     454:	1004c03a 	cmpne	r2,r2,zero
     458:	1000091e 	bne	r2,zero,480 <READ_FIFO_1+0x130>
		IOWR_32DIRECT(MEM_BASE,emptyp,0x1);
     45c:	d0a01317 	ldw	r2,-32692(gp)
     460:	1007883a 	mov	r3,r2
     464:	008000b4 	movhi	r2,2
     468:	10801204 	addi	r2,r2,72
     46c:	1885883a 	add	r2,r3,r2
     470:	1007883a 	mov	r3,r2
     474:	00800044 	movi	r2,1
     478:	18800035 	stwio	r2,0(r3)
     47c:	00000606 	br	498 <READ_FIFO_1+0x148>
	}else{
		IOWR_32DIRECT(MEM_BASE,emptyp,0x0);
     480:	d0a01317 	ldw	r2,-32692(gp)
     484:	1007883a 	mov	r3,r2
     488:	008000b4 	movhi	r2,2
     48c:	10801204 	addi	r2,r2,72
     490:	1885883a 	add	r2,r3,r2
     494:	10000035 	stwio	zero,0(r2)
	}
}
     498:	e037883a 	mov	sp,fp
     49c:	df000017 	ldw	fp,0(sp)
     4a0:	dec00104 	addi	sp,sp,4
     4a4:	f800283a 	ret

000004a8 <FIFO_1_INIT>:

//Initialization
void FIFO_1_INIT()
{
     4a8:	deffff04 	addi	sp,sp,-4
     4ac:	df000015 	stw	fp,0(sp)
     4b0:	d839883a 	mov	fp,sp
	writep = STARTP; // Initially the FIFO is empty, so start writing at the first slot
     4b4:	00800304 	movi	r2,12
     4b8:	d0a01015 	stw	r2,-32704(gp)
	readp  = STARTP;
     4bc:	00800304 	movi	r2,12
     4c0:	d0a01115 	stw	r2,-32700(gp)
	fullp   = 0x0; // SET THIS OFFSET (If there are previous FIFOs in shared memory, use Prev Fifo's STARTP + Prev Fifo's size)
     4c4:	d0201215 	stw	zero,-32696(gp)
	emptyp   = fullp + UNIT_SIZE;
     4c8:	d0a01217 	ldw	r2,-32696(gp)
     4cc:	10800104 	addi	r2,r2,4
     4d0:	d0a01315 	stw	r2,-32692(gp)
	countp  = emptyp + UNIT_SIZE;
     4d4:	d0a01317 	ldw	r2,-32692(gp)
     4d8:	10800104 	addi	r2,r2,4
     4dc:	d0a01415 	stw	r2,-32688(gp)

	// Assigning values for the flags.
	IOWR_32DIRECT(MEM_BASE, fullp, 0x0);
     4e0:	d0a01217 	ldw	r2,-32696(gp)
     4e4:	1007883a 	mov	r3,r2
     4e8:	008000b4 	movhi	r2,2
     4ec:	10801204 	addi	r2,r2,72
     4f0:	1885883a 	add	r2,r3,r2
     4f4:	10000035 	stwio	zero,0(r2)
	IOWR_32DIRECT(MEM_BASE, emptyp, 0x1); // The fifo is empty at the start
     4f8:	d0a01317 	ldw	r2,-32692(gp)
     4fc:	1007883a 	mov	r3,r2
     500:	008000b4 	movhi	r2,2
     504:	10801204 	addi	r2,r2,72
     508:	1885883a 	add	r2,r3,r2
     50c:	1007883a 	mov	r3,r2
     510:	00800044 	movi	r2,1
     514:	18800035 	stwio	r2,0(r3)
	IOWR_32DIRECT(MEM_BASE, countp, 0x0); // The fifo is empty at the start
     518:	d0a01417 	ldw	r2,-32688(gp)
     51c:	1007883a 	mov	r3,r2
     520:	008000b4 	movhi	r2,2
     524:	10801204 	addi	r2,r2,72
     528:	1885883a 	add	r2,r3,r2
     52c:	10000035 	stwio	zero,0(r2)
}
     530:	e037883a 	mov	sp,fp
     534:	df000017 	ldw	fp,0(sp)
     538:	dec00104 	addi	sp,sp,4
     53c:	f800283a 	ret

00000540 <main>:
void delay(int n);
int producer();


int main()
{
     540:	defffe04 	addi	sp,sp,-8
     544:	dfc00115 	stw	ra,4(sp)
     548:	df000015 	stw	fp,0(sp)
     54c:	d839883a 	mov	fp,sp
	producer();
     550:	00005580 	call	558 <producer>

	while(1) { }
     554:	003fff06 	br	554 <main+0x14>

00000558 <producer>:
//	while(1){}
	return 0;
}

int producer()
{
     558:	defffd04 	addi	sp,sp,-12
     55c:	dfc00215 	stw	ra,8(sp)
     560:	df000115 	stw	fp,4(sp)
     564:	df000104 	addi	fp,sp,4
	printf("Producer starting..\n");
     568:	010000f4 	movhi	r4,3
     56c:	21000004 	addi	r4,r4,0
     570:	00007500 	call	750 <puts>

	FIFO_1_INIT(); // Initialize the FIFO
     574:	00004a80 	call	4a8 <FIFO_1_INIT>

	int j = 5;
     578:	00800144 	movi	r2,5
     57c:	e0bfff15 	stw	r2,-4(fp)
	while(j<=500)
     580:	00001006 	br	5c4 <producer+0x6c>
	{
		delay(100000);
     584:	010000b4 	movhi	r4,2
     588:	2121a804 	addi	r4,r4,-31072
     58c:	00005f40 	call	5f4 <delay>
		WRITE_FIFO_1(&j); // Write to the producer-consumer fifo
     590:	e13fff04 	addi	r4,fp,-4
     594:	00001f00 	call	1f0 <WRITE_FIFO_1>
		delay(100000);
     598:	010000b4 	movhi	r4,2
     59c:	2121a804 	addi	r4,r4,-31072
     5a0:	00005f40 	call	5f4 <delay>

		printf("Producer sent [%i]\t%x\n",j,writep);
     5a4:	e17fff17 	ldw	r5,-4(fp)
     5a8:	d1a01017 	ldw	r6,-32704(gp)
     5ac:	010000f4 	movhi	r4,3
     5b0:	21000504 	addi	r4,r4,20
     5b4:	00006380 	call	638 <printf>
		j+=10;
     5b8:	e0bfff17 	ldw	r2,-4(fp)
     5bc:	10800284 	addi	r2,r2,10
     5c0:	e0bfff15 	stw	r2,-4(fp)
	printf("Producer starting..\n");

	FIFO_1_INIT(); // Initialize the FIFO

	int j = 5;
	while(j<=500)
     5c4:	e0bfff17 	ldw	r2,-4(fp)
     5c8:	10807d50 	cmplti	r2,r2,501
     5cc:	103fed1e 	bne	r2,zero,584 <producer+0x2c>

		printf("Producer sent [%i]\t%x\n",j,writep);
		j+=10;
	}

	printf("Producer finished..\n");
     5d0:	010000f4 	movhi	r4,3
     5d4:	21000b04 	addi	r4,r4,44
     5d8:	00007500 	call	750 <puts>
	return 0;
     5dc:	0005883a 	mov	r2,zero
}
     5e0:	e037883a 	mov	sp,fp
     5e4:	dfc00117 	ldw	ra,4(sp)
     5e8:	df000017 	ldw	fp,0(sp)
     5ec:	dec00204 	addi	sp,sp,8
     5f0:	f800283a 	ret

000005f4 <delay>:


void delay(int n)
{
     5f4:	defffd04 	addi	sp,sp,-12
     5f8:	df000215 	stw	fp,8(sp)
     5fc:	df000204 	addi	fp,sp,8
     600:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i=n; i>0; i--)
     604:	e0bfff17 	ldw	r2,-4(fp)
     608:	e0bffe15 	stw	r2,-8(fp)
     60c:	00000306 	br	61c <delay+0x28>
     610:	e0bffe17 	ldw	r2,-8(fp)
     614:	10bfffc4 	addi	r2,r2,-1
     618:	e0bffe15 	stw	r2,-8(fp)
     61c:	e0bffe17 	ldw	r2,-8(fp)
     620:	10800048 	cmpgei	r2,r2,1
     624:	103ffa1e 	bne	r2,zero,610 <delay+0x1c>
	{
		continue;
	}
}
     628:	e037883a 	mov	sp,fp
     62c:	df000017 	ldw	fp,0(sp)
     630:	dec00104 	addi	sp,sp,4
     634:	f800283a 	ret

00000638 <printf>:
     638:	defffb04 	addi	sp,sp,-20
     63c:	dfc00115 	stw	ra,4(sp)
     640:	d9400215 	stw	r5,8(sp)
     644:	d9800315 	stw	r6,12(sp)
     648:	d9c00415 	stw	r7,16(sp)
     64c:	008000f4 	movhi	r2,3
     650:	10876804 	addi	r2,r2,7584
     654:	10c00017 	ldw	r3,0(r2)
     658:	200b883a 	mov	r5,r4
     65c:	d8800204 	addi	r2,sp,8
     660:	19000217 	ldw	r4,8(r3)
     664:	100d883a 	mov	r6,r2
     668:	d8800015 	stw	r2,0(sp)
     66c:	00026dc0 	call	26dc <__vfprintf_internal>
     670:	dfc00117 	ldw	ra,4(sp)
     674:	dec00504 	addi	sp,sp,20
     678:	f800283a 	ret

0000067c <_printf_r>:
     67c:	defffc04 	addi	sp,sp,-16
     680:	dfc00115 	stw	ra,4(sp)
     684:	d9800215 	stw	r6,8(sp)
     688:	d9c00315 	stw	r7,12(sp)
     68c:	280d883a 	mov	r6,r5
     690:	21400217 	ldw	r5,8(r4)
     694:	d8c00204 	addi	r3,sp,8
     698:	180f883a 	mov	r7,r3
     69c:	d8c00015 	stw	r3,0(sp)
     6a0:	00008300 	call	830 <___vfprintf_internal_r>
     6a4:	dfc00117 	ldw	ra,4(sp)
     6a8:	dec00404 	addi	sp,sp,16
     6ac:	f800283a 	ret

000006b0 <_puts_r>:
     6b0:	defff604 	addi	sp,sp,-40
     6b4:	dc400715 	stw	r17,28(sp)
     6b8:	2023883a 	mov	r17,r4
     6bc:	2809883a 	mov	r4,r5
     6c0:	dfc00915 	stw	ra,36(sp)
     6c4:	dcc00815 	stw	r19,32(sp)
     6c8:	2827883a 	mov	r19,r5
     6cc:	00007640 	call	764 <strlen>
     6d0:	89400217 	ldw	r5,8(r17)
     6d4:	00c000f4 	movhi	r3,3
     6d8:	18c01004 	addi	r3,r3,64
     6dc:	01c00044 	movi	r7,1
     6e0:	12000044 	addi	r8,r2,1
     6e4:	d8c00515 	stw	r3,20(sp)
     6e8:	d9c00615 	stw	r7,24(sp)
     6ec:	d8c00304 	addi	r3,sp,12
     6f0:	01c00084 	movi	r7,2
     6f4:	8809883a 	mov	r4,r17
     6f8:	d80d883a 	mov	r6,sp
     6fc:	d8c00015 	stw	r3,0(sp)
     700:	dcc00315 	stw	r19,12(sp)
     704:	da000215 	stw	r8,8(sp)
     708:	d9c00115 	stw	r7,4(sp)
     70c:	d8800415 	stw	r2,16(sp)
     710:	00049380 	call	4938 <__sfvwrite_r>
     714:	00ffffc4 	movi	r3,-1
     718:	10000626 	beq	r2,zero,734 <_puts_r+0x84>
     71c:	1805883a 	mov	r2,r3
     720:	dfc00917 	ldw	ra,36(sp)
     724:	dcc00817 	ldw	r19,32(sp)
     728:	dc400717 	ldw	r17,28(sp)
     72c:	dec00a04 	addi	sp,sp,40
     730:	f800283a 	ret
     734:	00c00284 	movi	r3,10
     738:	1805883a 	mov	r2,r3
     73c:	dfc00917 	ldw	ra,36(sp)
     740:	dcc00817 	ldw	r19,32(sp)
     744:	dc400717 	ldw	r17,28(sp)
     748:	dec00a04 	addi	sp,sp,40
     74c:	f800283a 	ret

00000750 <puts>:
     750:	008000f4 	movhi	r2,3
     754:	10876804 	addi	r2,r2,7584
     758:	200b883a 	mov	r5,r4
     75c:	11000017 	ldw	r4,0(r2)
     760:	00006b01 	jmpi	6b0 <_puts_r>

00000764 <strlen>:
     764:	208000cc 	andi	r2,r4,3
     768:	2011883a 	mov	r8,r4
     76c:	1000161e 	bne	r2,zero,7c8 <strlen+0x64>
     770:	20c00017 	ldw	r3,0(r4)
     774:	017fbff4 	movhi	r5,65279
     778:	297fbfc4 	addi	r5,r5,-257
     77c:	01e02074 	movhi	r7,32897
     780:	39e02004 	addi	r7,r7,-32640
     784:	1945883a 	add	r2,r3,r5
     788:	11c4703a 	and	r2,r2,r7
     78c:	00c6303a 	nor	r3,zero,r3
     790:	1886703a 	and	r3,r3,r2
     794:	18000c1e 	bne	r3,zero,7c8 <strlen+0x64>
     798:	280d883a 	mov	r6,r5
     79c:	380b883a 	mov	r5,r7
     7a0:	21000104 	addi	r4,r4,4
     7a4:	20800017 	ldw	r2,0(r4)
     7a8:	1187883a 	add	r3,r2,r6
     7ac:	1946703a 	and	r3,r3,r5
     7b0:	0084303a 	nor	r2,zero,r2
     7b4:	10c4703a 	and	r2,r2,r3
     7b8:	103ff926 	beq	r2,zero,7a0 <strlen+0x3c>
     7bc:	20800007 	ldb	r2,0(r4)
     7c0:	10000326 	beq	r2,zero,7d0 <strlen+0x6c>
     7c4:	21000044 	addi	r4,r4,1
     7c8:	20800007 	ldb	r2,0(r4)
     7cc:	103ffd1e 	bne	r2,zero,7c4 <strlen+0x60>
     7d0:	2205c83a 	sub	r2,r4,r8
     7d4:	f800283a 	ret

000007d8 <__sprint_r>:
     7d8:	30800217 	ldw	r2,8(r6)
     7dc:	defffe04 	addi	sp,sp,-8
     7e0:	dc000015 	stw	r16,0(sp)
     7e4:	dfc00115 	stw	ra,4(sp)
     7e8:	3021883a 	mov	r16,r6
     7ec:	0007883a 	mov	r3,zero
     7f0:	1000061e 	bne	r2,zero,80c <__sprint_r+0x34>
     7f4:	1805883a 	mov	r2,r3
     7f8:	30000115 	stw	zero,4(r6)
     7fc:	dfc00117 	ldw	ra,4(sp)
     800:	dc000017 	ldw	r16,0(sp)
     804:	dec00204 	addi	sp,sp,8
     808:	f800283a 	ret
     80c:	00049380 	call	4938 <__sfvwrite_r>
     810:	1007883a 	mov	r3,r2
     814:	1805883a 	mov	r2,r3
     818:	80000115 	stw	zero,4(r16)
     81c:	80000215 	stw	zero,8(r16)
     820:	dfc00117 	ldw	ra,4(sp)
     824:	dc000017 	ldw	r16,0(sp)
     828:	dec00204 	addi	sp,sp,8
     82c:	f800283a 	ret

00000830 <___vfprintf_internal_r>:
     830:	defea404 	addi	sp,sp,-1392
     834:	dd815815 	stw	r22,1376(sp)
     838:	dc015215 	stw	r16,1352(sp)
     83c:	d9c15115 	stw	r7,1348(sp)
     840:	dfc15b15 	stw	ra,1388(sp)
     844:	df015a15 	stw	fp,1384(sp)
     848:	ddc15915 	stw	r23,1380(sp)
     84c:	dd415715 	stw	r21,1372(sp)
     850:	dd015615 	stw	r20,1368(sp)
     854:	dcc15515 	stw	r19,1364(sp)
     858:	dc815415 	stw	r18,1360(sp)
     85c:	dc415315 	stw	r17,1356(sp)
     860:	282d883a 	mov	r22,r5
     864:	3021883a 	mov	r16,r6
     868:	d9014f15 	stw	r4,1340(sp)
     86c:	0004f5c0 	call	4f5c <_localeconv_r>
     870:	10800017 	ldw	r2,0(r2)
     874:	d9c15117 	ldw	r7,1348(sp)
     878:	d8814915 	stw	r2,1316(sp)
     87c:	d8814f17 	ldw	r2,1340(sp)
     880:	10000226 	beq	r2,zero,88c <___vfprintf_internal_r+0x5c>
     884:	10800e17 	ldw	r2,56(r2)
     888:	10020d26 	beq	r2,zero,10c0 <___vfprintf_internal_r+0x890>
     88c:	b080030b 	ldhu	r2,12(r22)
     890:	1080020c 	andi	r2,r2,8
     894:	10020e26 	beq	r2,zero,10d0 <___vfprintf_internal_r+0x8a0>
     898:	b0800417 	ldw	r2,16(r22)
     89c:	10020c26 	beq	r2,zero,10d0 <___vfprintf_internal_r+0x8a0>
     8a0:	b200030b 	ldhu	r8,12(r22)
     8a4:	00800284 	movi	r2,10
     8a8:	40c0068c 	andi	r3,r8,26
     8ac:	18802f1e 	bne	r3,r2,96c <___vfprintf_internal_r+0x13c>
     8b0:	b080038f 	ldh	r2,14(r22)
     8b4:	10002d16 	blt	r2,zero,96c <___vfprintf_internal_r+0x13c>
     8b8:	b240038b 	ldhu	r9,14(r22)
     8bc:	b2800717 	ldw	r10,28(r22)
     8c0:	b2c00917 	ldw	r11,36(r22)
     8c4:	d9014f17 	ldw	r4,1340(sp)
     8c8:	dc402904 	addi	r17,sp,164
     8cc:	d8804004 	addi	r2,sp,256
     8d0:	00c10004 	movi	r3,1024
     8d4:	423fff4c 	andi	r8,r8,65533
     8d8:	800d883a 	mov	r6,r16
     8dc:	880b883a 	mov	r5,r17
     8e0:	da002c0d 	sth	r8,176(sp)
     8e4:	da402c8d 	sth	r9,178(sp)
     8e8:	da803015 	stw	r10,192(sp)
     8ec:	dac03215 	stw	r11,200(sp)
     8f0:	d8802d15 	stw	r2,180(sp)
     8f4:	d8c02e15 	stw	r3,184(sp)
     8f8:	d8802915 	stw	r2,164(sp)
     8fc:	d8c02b15 	stw	r3,172(sp)
     900:	d8002f15 	stw	zero,188(sp)
     904:	00008300 	call	830 <___vfprintf_internal_r>
     908:	d8814b15 	stw	r2,1324(sp)
     90c:	10000416 	blt	r2,zero,920 <___vfprintf_internal_r+0xf0>
     910:	d9014f17 	ldw	r4,1340(sp)
     914:	880b883a 	mov	r5,r17
     918:	00040080 	call	4008 <_fflush_r>
     91c:	1002321e 	bne	r2,zero,11e8 <___vfprintf_internal_r+0x9b8>
     920:	d8802c0b 	ldhu	r2,176(sp)
     924:	1080100c 	andi	r2,r2,64
     928:	10000326 	beq	r2,zero,938 <___vfprintf_internal_r+0x108>
     92c:	b080030b 	ldhu	r2,12(r22)
     930:	10801014 	ori	r2,r2,64
     934:	b080030d 	sth	r2,12(r22)
     938:	d8814b17 	ldw	r2,1324(sp)
     93c:	dfc15b17 	ldw	ra,1388(sp)
     940:	df015a17 	ldw	fp,1384(sp)
     944:	ddc15917 	ldw	r23,1380(sp)
     948:	dd815817 	ldw	r22,1376(sp)
     94c:	dd415717 	ldw	r21,1372(sp)
     950:	dd015617 	ldw	r20,1368(sp)
     954:	dcc15517 	ldw	r19,1364(sp)
     958:	dc815417 	ldw	r18,1360(sp)
     95c:	dc415317 	ldw	r17,1356(sp)
     960:	dc015217 	ldw	r16,1352(sp)
     964:	dec15c04 	addi	sp,sp,1392
     968:	f800283a 	ret
     96c:	0005883a 	mov	r2,zero
     970:	0007883a 	mov	r3,zero
     974:	dd401904 	addi	r21,sp,100
     978:	d8814215 	stw	r2,1288(sp)
     97c:	802f883a 	mov	r23,r16
     980:	d8c14315 	stw	r3,1292(sp)
     984:	d8014b15 	stw	zero,1324(sp)
     988:	d8014815 	stw	zero,1312(sp)
     98c:	d8014415 	stw	zero,1296(sp)
     990:	d8014715 	stw	zero,1308(sp)
     994:	dd400c15 	stw	r21,48(sp)
     998:	d8000e15 	stw	zero,56(sp)
     99c:	d8000d15 	stw	zero,52(sp)
     9a0:	b8800007 	ldb	r2,0(r23)
     9a4:	10001926 	beq	r2,zero,a0c <___vfprintf_internal_r+0x1dc>
     9a8:	00c00944 	movi	r3,37
     9ac:	10c01726 	beq	r2,r3,a0c <___vfprintf_internal_r+0x1dc>
     9b0:	b821883a 	mov	r16,r23
     9b4:	00000106 	br	9bc <___vfprintf_internal_r+0x18c>
     9b8:	10c00326 	beq	r2,r3,9c8 <___vfprintf_internal_r+0x198>
     9bc:	84000044 	addi	r16,r16,1
     9c0:	80800007 	ldb	r2,0(r16)
     9c4:	103ffc1e 	bne	r2,zero,9b8 <___vfprintf_internal_r+0x188>
     9c8:	85e7c83a 	sub	r19,r16,r23
     9cc:	98000e26 	beq	r19,zero,a08 <___vfprintf_internal_r+0x1d8>
     9d0:	dc800e17 	ldw	r18,56(sp)
     9d4:	dc400d17 	ldw	r17,52(sp)
     9d8:	008001c4 	movi	r2,7
     9dc:	94e5883a 	add	r18,r18,r19
     9e0:	8c400044 	addi	r17,r17,1
     9e4:	adc00015 	stw	r23,0(r21)
     9e8:	dc800e15 	stw	r18,56(sp)
     9ec:	acc00115 	stw	r19,4(r21)
     9f0:	dc400d15 	stw	r17,52(sp)
     9f4:	14428b16 	blt	r2,r17,1424 <___vfprintf_internal_r+0xbf4>
     9f8:	ad400204 	addi	r21,r21,8
     9fc:	d9014b17 	ldw	r4,1324(sp)
     a00:	24c9883a 	add	r4,r4,r19
     a04:	d9014b15 	stw	r4,1324(sp)
     a08:	802f883a 	mov	r23,r16
     a0c:	b8800007 	ldb	r2,0(r23)
     a10:	10013c26 	beq	r2,zero,f04 <___vfprintf_internal_r+0x6d4>
     a14:	bdc00044 	addi	r23,r23,1
     a18:	d8000405 	stb	zero,16(sp)
     a1c:	b8c00007 	ldb	r3,0(r23)
     a20:	04ffffc4 	movi	r19,-1
     a24:	d8014c15 	stw	zero,1328(sp)
     a28:	d8014a15 	stw	zero,1320(sp)
     a2c:	d8c14d15 	stw	r3,1332(sp)
     a30:	bdc00044 	addi	r23,r23,1
     a34:	d9414d17 	ldw	r5,1332(sp)
     a38:	00801604 	movi	r2,88
     a3c:	28fff804 	addi	r3,r5,-32
     a40:	10c06036 	bltu	r2,r3,bc4 <___vfprintf_internal_r+0x394>
     a44:	18c5883a 	add	r2,r3,r3
     a48:	1085883a 	add	r2,r2,r2
     a4c:	00c00034 	movhi	r3,0
     a50:	18c29804 	addi	r3,r3,2656
     a54:	10c5883a 	add	r2,r2,r3
     a58:	11000017 	ldw	r4,0(r2)
     a5c:	2000683a 	jmp	r4
     a60:	000019d4 	movui	zero,103
     a64:	00000bc4 	movi	zero,47
     a68:	00000bc4 	movi	zero,47
     a6c:	000019c0 	call	19c <alt_irq_handler+0xb0>
     a70:	00000bc4 	movi	zero,47
     a74:	00000bc4 	movi	zero,47
     a78:	00000bc4 	movi	zero,47
     a7c:	00000bc4 	movi	zero,47
     a80:	00000bc4 	movi	zero,47
     a84:	00000bc4 	movi	zero,47
     a88:	000017a0 	cmpeqi	zero,zero,94
     a8c:	000019b0 	cmpltui	zero,zero,102
     a90:	00000bc4 	movi	zero,47
     a94:	000017b8 	rdprs	zero,zero,94
     a98:	00001a4c 	andi	zero,zero,105
     a9c:	00000bc4 	movi	zero,47
     aa0:	00001a38 	rdprs	zero,zero,104
     aa4:	00001a00 	call	1a0 <alt_irq_handler+0xb4>
     aa8:	00001a00 	call	1a0 <alt_irq_handler+0xb4>
     aac:	00001a00 	call	1a0 <alt_irq_handler+0xb4>
     ab0:	00001a00 	call	1a0 <alt_irq_handler+0xb4>
     ab4:	00001a00 	call	1a0 <alt_irq_handler+0xb4>
     ab8:	00001a00 	call	1a0 <alt_irq_handler+0xb4>
     abc:	00001a00 	call	1a0 <alt_irq_handler+0xb4>
     ac0:	00001a00 	call	1a0 <alt_irq_handler+0xb4>
     ac4:	00001a00 	call	1a0 <alt_irq_handler+0xb4>
     ac8:	00000bc4 	movi	zero,47
     acc:	00000bc4 	movi	zero,47
     ad0:	00000bc4 	movi	zero,47
     ad4:	00000bc4 	movi	zero,47
     ad8:	00000bc4 	movi	zero,47
     adc:	00000bc4 	movi	zero,47
     ae0:	00000bc4 	movi	zero,47
     ae4:	00000bc4 	movi	zero,47
     ae8:	00000bc4 	movi	zero,47
     aec:	00000bc4 	movi	zero,47
     af0:	0000121c 	xori	zero,zero,72
     af4:	00001888 	cmpgei	zero,zero,98
     af8:	00000bc4 	movi	zero,47
     afc:	00001888 	cmpgei	zero,zero,98
     b00:	00000bc4 	movi	zero,47
     b04:	00000bc4 	movi	zero,47
     b08:	00000bc4 	movi	zero,47
     b0c:	00000bc4 	movi	zero,47
     b10:	000019ec 	andhi	zero,zero,103
     b14:	00000bc4 	movi	zero,47
     b18:	00000bc4 	movi	zero,47
     b1c:	000012d0 	cmplti	zero,zero,75
     b20:	00000bc4 	movi	zero,47
     b24:	00000bc4 	movi	zero,47
     b28:	00000bc4 	movi	zero,47
     b2c:	00000bc4 	movi	zero,47
     b30:	00000bc4 	movi	zero,47
     b34:	0000131c 	xori	zero,zero,76
     b38:	00000bc4 	movi	zero,47
     b3c:	00000bc4 	movi	zero,47
     b40:	0000193c 	xorhi	zero,zero,100
     b44:	00000bc4 	movi	zero,47
     b48:	00000bc4 	movi	zero,47
     b4c:	00000bc4 	movi	zero,47
     b50:	00000bc4 	movi	zero,47
     b54:	00000bc4 	movi	zero,47
     b58:	00000bc4 	movi	zero,47
     b5c:	00000bc4 	movi	zero,47
     b60:	00000bc4 	movi	zero,47
     b64:	00000bc4 	movi	zero,47
     b68:	00000bc4 	movi	zero,47
     b6c:	00001910 	cmplti	zero,zero,100
     b70:	00001228 	cmpgeui	zero,zero,72
     b74:	00001888 	cmpgei	zero,zero,98
     b78:	00001888 	cmpgei	zero,zero,98
     b7c:	00001888 	cmpgei	zero,zero,98
     b80:	00001874 	movhi	zero,97
     b84:	00001228 	cmpgeui	zero,zero,72
     b88:	00000bc4 	movi	zero,47
     b8c:	00000bc4 	movi	zero,47
     b90:	000017fc 	xorhi	zero,zero,95
     b94:	00000bc4 	movi	zero,47
     b98:	000017cc 	andi	zero,zero,95
     b9c:	000012dc 	xori	zero,zero,75
     ba0:	0000182c 	andhi	zero,zero,96
     ba4:	00001818 	cmpnei	zero,zero,96
     ba8:	00000bc4 	movi	zero,47
     bac:	00001aa8 	cmpgeui	zero,zero,106
     bb0:	00000bc4 	movi	zero,47
     bb4:	00001328 	cmpgeui	zero,zero,76
     bb8:	00000bc4 	movi	zero,47
     bbc:	00000bc4 	movi	zero,47
     bc0:	000019a0 	cmpeqi	zero,zero,102
     bc4:	d9014d17 	ldw	r4,1332(sp)
     bc8:	2000ce26 	beq	r4,zero,f04 <___vfprintf_internal_r+0x6d4>
     bcc:	01400044 	movi	r5,1
     bd0:	d9800f04 	addi	r6,sp,60
     bd4:	d9c14015 	stw	r7,1280(sp)
     bd8:	d9414515 	stw	r5,1300(sp)
     bdc:	d9814115 	stw	r6,1284(sp)
     be0:	280f883a 	mov	r7,r5
     be4:	d9000f05 	stb	r4,60(sp)
     be8:	d8000405 	stb	zero,16(sp)
     bec:	d8014615 	stw	zero,1304(sp)
     bf0:	d8c14c17 	ldw	r3,1328(sp)
     bf4:	1880008c 	andi	r2,r3,2
     bf8:	1005003a 	cmpeq	r2,r2,zero
     bfc:	d8815015 	stw	r2,1344(sp)
     c00:	1000031e 	bne	r2,zero,c10 <___vfprintf_internal_r+0x3e0>
     c04:	d9014517 	ldw	r4,1300(sp)
     c08:	21000084 	addi	r4,r4,2
     c0c:	d9014515 	stw	r4,1300(sp)
     c10:	d9414c17 	ldw	r5,1328(sp)
     c14:	2940210c 	andi	r5,r5,132
     c18:	d9414e15 	stw	r5,1336(sp)
     c1c:	28002d1e 	bne	r5,zero,cd4 <___vfprintf_internal_r+0x4a4>
     c20:	d9814a17 	ldw	r6,1320(sp)
     c24:	d8814517 	ldw	r2,1300(sp)
     c28:	30a1c83a 	sub	r16,r6,r2
     c2c:	0400290e 	bge	zero,r16,cd4 <___vfprintf_internal_r+0x4a4>
     c30:	00800404 	movi	r2,16
     c34:	1404580e 	bge	r2,r16,1d98 <___vfprintf_internal_r+0x1568>
     c38:	dc800e17 	ldw	r18,56(sp)
     c3c:	dc400d17 	ldw	r17,52(sp)
     c40:	1027883a 	mov	r19,r2
     c44:	070000f4 	movhi	fp,3
     c48:	e7002c84 	addi	fp,fp,178
     c4c:	050001c4 	movi	r20,7
     c50:	00000306 	br	c60 <___vfprintf_internal_r+0x430>
     c54:	843ffc04 	addi	r16,r16,-16
     c58:	ad400204 	addi	r21,r21,8
     c5c:	9c00130e 	bge	r19,r16,cac <___vfprintf_internal_r+0x47c>
     c60:	94800404 	addi	r18,r18,16
     c64:	8c400044 	addi	r17,r17,1
     c68:	af000015 	stw	fp,0(r21)
     c6c:	acc00115 	stw	r19,4(r21)
     c70:	dc800e15 	stw	r18,56(sp)
     c74:	dc400d15 	stw	r17,52(sp)
     c78:	a47ff60e 	bge	r20,r17,c54 <___vfprintf_internal_r+0x424>
     c7c:	d9014f17 	ldw	r4,1340(sp)
     c80:	b00b883a 	mov	r5,r22
     c84:	d9800c04 	addi	r6,sp,48
     c88:	d9c15115 	stw	r7,1348(sp)
     c8c:	00007d80 	call	7d8 <__sprint_r>
     c90:	d9c15117 	ldw	r7,1348(sp)
     c94:	10009e1e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
     c98:	843ffc04 	addi	r16,r16,-16
     c9c:	dc800e17 	ldw	r18,56(sp)
     ca0:	dc400d17 	ldw	r17,52(sp)
     ca4:	dd401904 	addi	r21,sp,100
     ca8:	9c3fed16 	blt	r19,r16,c60 <___vfprintf_internal_r+0x430>
     cac:	9425883a 	add	r18,r18,r16
     cb0:	8c400044 	addi	r17,r17,1
     cb4:	008001c4 	movi	r2,7
     cb8:	af000015 	stw	fp,0(r21)
     cbc:	ac000115 	stw	r16,4(r21)
     cc0:	dc800e15 	stw	r18,56(sp)
     cc4:	dc400d15 	stw	r17,52(sp)
     cc8:	1441f516 	blt	r2,r17,14a0 <___vfprintf_internal_r+0xc70>
     ccc:	ad400204 	addi	r21,r21,8
     cd0:	00000206 	br	cdc <___vfprintf_internal_r+0x4ac>
     cd4:	dc800e17 	ldw	r18,56(sp)
     cd8:	dc400d17 	ldw	r17,52(sp)
     cdc:	d8800407 	ldb	r2,16(sp)
     ce0:	10000b26 	beq	r2,zero,d10 <___vfprintf_internal_r+0x4e0>
     ce4:	00800044 	movi	r2,1
     ce8:	94800044 	addi	r18,r18,1
     cec:	8c400044 	addi	r17,r17,1
     cf0:	a8800115 	stw	r2,4(r21)
     cf4:	d8c00404 	addi	r3,sp,16
     cf8:	008001c4 	movi	r2,7
     cfc:	a8c00015 	stw	r3,0(r21)
     d00:	dc800e15 	stw	r18,56(sp)
     d04:	dc400d15 	stw	r17,52(sp)
     d08:	1441da16 	blt	r2,r17,1474 <___vfprintf_internal_r+0xc44>
     d0c:	ad400204 	addi	r21,r21,8
     d10:	d9015017 	ldw	r4,1344(sp)
     d14:	20000b1e 	bne	r4,zero,d44 <___vfprintf_internal_r+0x514>
     d18:	d8800444 	addi	r2,sp,17
     d1c:	94800084 	addi	r18,r18,2
     d20:	8c400044 	addi	r17,r17,1
     d24:	a8800015 	stw	r2,0(r21)
     d28:	00c00084 	movi	r3,2
     d2c:	008001c4 	movi	r2,7
     d30:	a8c00115 	stw	r3,4(r21)
     d34:	dc800e15 	stw	r18,56(sp)
     d38:	dc400d15 	stw	r17,52(sp)
     d3c:	1441c216 	blt	r2,r17,1448 <___vfprintf_internal_r+0xc18>
     d40:	ad400204 	addi	r21,r21,8
     d44:	d9414e17 	ldw	r5,1336(sp)
     d48:	00802004 	movi	r2,128
     d4c:	2880b126 	beq	r5,r2,1014 <___vfprintf_internal_r+0x7e4>
     d50:	d8c14617 	ldw	r3,1304(sp)
     d54:	19e1c83a 	sub	r16,r3,r7
     d58:	0400260e 	bge	zero,r16,df4 <___vfprintf_internal_r+0x5c4>
     d5c:	00800404 	movi	r2,16
     d60:	1403c90e 	bge	r2,r16,1c88 <___vfprintf_internal_r+0x1458>
     d64:	1027883a 	mov	r19,r2
     d68:	070000f4 	movhi	fp,3
     d6c:	e7002884 	addi	fp,fp,162
     d70:	050001c4 	movi	r20,7
     d74:	00000306 	br	d84 <___vfprintf_internal_r+0x554>
     d78:	843ffc04 	addi	r16,r16,-16
     d7c:	ad400204 	addi	r21,r21,8
     d80:	9c00130e 	bge	r19,r16,dd0 <___vfprintf_internal_r+0x5a0>
     d84:	94800404 	addi	r18,r18,16
     d88:	8c400044 	addi	r17,r17,1
     d8c:	af000015 	stw	fp,0(r21)
     d90:	acc00115 	stw	r19,4(r21)
     d94:	dc800e15 	stw	r18,56(sp)
     d98:	dc400d15 	stw	r17,52(sp)
     d9c:	a47ff60e 	bge	r20,r17,d78 <___vfprintf_internal_r+0x548>
     da0:	d9014f17 	ldw	r4,1340(sp)
     da4:	b00b883a 	mov	r5,r22
     da8:	d9800c04 	addi	r6,sp,48
     dac:	d9c15115 	stw	r7,1348(sp)
     db0:	00007d80 	call	7d8 <__sprint_r>
     db4:	d9c15117 	ldw	r7,1348(sp)
     db8:	1000551e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
     dbc:	843ffc04 	addi	r16,r16,-16
     dc0:	dc800e17 	ldw	r18,56(sp)
     dc4:	dc400d17 	ldw	r17,52(sp)
     dc8:	dd401904 	addi	r21,sp,100
     dcc:	9c3fed16 	blt	r19,r16,d84 <___vfprintf_internal_r+0x554>
     dd0:	9425883a 	add	r18,r18,r16
     dd4:	8c400044 	addi	r17,r17,1
     dd8:	008001c4 	movi	r2,7
     ddc:	af000015 	stw	fp,0(r21)
     de0:	ac000115 	stw	r16,4(r21)
     de4:	dc800e15 	stw	r18,56(sp)
     de8:	dc400d15 	stw	r17,52(sp)
     dec:	14418216 	blt	r2,r17,13f8 <___vfprintf_internal_r+0xbc8>
     df0:	ad400204 	addi	r21,r21,8
     df4:	d9014c17 	ldw	r4,1328(sp)
     df8:	2080400c 	andi	r2,r4,256
     dfc:	10004a1e 	bne	r2,zero,f28 <___vfprintf_internal_r+0x6f8>
     e00:	d9414117 	ldw	r5,1284(sp)
     e04:	91e5883a 	add	r18,r18,r7
     e08:	8c400044 	addi	r17,r17,1
     e0c:	008001c4 	movi	r2,7
     e10:	a9400015 	stw	r5,0(r21)
     e14:	a9c00115 	stw	r7,4(r21)
     e18:	dc800e15 	stw	r18,56(sp)
     e1c:	dc400d15 	stw	r17,52(sp)
     e20:	14416716 	blt	r2,r17,13c0 <___vfprintf_internal_r+0xb90>
     e24:	a8c00204 	addi	r3,r21,8
     e28:	d9814c17 	ldw	r6,1328(sp)
     e2c:	3080010c 	andi	r2,r6,4
     e30:	10002826 	beq	r2,zero,ed4 <___vfprintf_internal_r+0x6a4>
     e34:	d8814a17 	ldw	r2,1320(sp)
     e38:	d9014517 	ldw	r4,1300(sp)
     e3c:	1121c83a 	sub	r16,r2,r4
     e40:	0400240e 	bge	zero,r16,ed4 <___vfprintf_internal_r+0x6a4>
     e44:	00800404 	movi	r2,16
     e48:	14044f0e 	bge	r2,r16,1f88 <___vfprintf_internal_r+0x1758>
     e4c:	dc400d17 	ldw	r17,52(sp)
     e50:	1027883a 	mov	r19,r2
     e54:	070000f4 	movhi	fp,3
     e58:	e7002c84 	addi	fp,fp,178
     e5c:	050001c4 	movi	r20,7
     e60:	00000306 	br	e70 <___vfprintf_internal_r+0x640>
     e64:	843ffc04 	addi	r16,r16,-16
     e68:	18c00204 	addi	r3,r3,8
     e6c:	9c00110e 	bge	r19,r16,eb4 <___vfprintf_internal_r+0x684>
     e70:	94800404 	addi	r18,r18,16
     e74:	8c400044 	addi	r17,r17,1
     e78:	1f000015 	stw	fp,0(r3)
     e7c:	1cc00115 	stw	r19,4(r3)
     e80:	dc800e15 	stw	r18,56(sp)
     e84:	dc400d15 	stw	r17,52(sp)
     e88:	a47ff60e 	bge	r20,r17,e64 <___vfprintf_internal_r+0x634>
     e8c:	d9014f17 	ldw	r4,1340(sp)
     e90:	b00b883a 	mov	r5,r22
     e94:	d9800c04 	addi	r6,sp,48
     e98:	00007d80 	call	7d8 <__sprint_r>
     e9c:	10001c1e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
     ea0:	843ffc04 	addi	r16,r16,-16
     ea4:	dc800e17 	ldw	r18,56(sp)
     ea8:	dc400d17 	ldw	r17,52(sp)
     eac:	d8c01904 	addi	r3,sp,100
     eb0:	9c3fef16 	blt	r19,r16,e70 <___vfprintf_internal_r+0x640>
     eb4:	9425883a 	add	r18,r18,r16
     eb8:	8c400044 	addi	r17,r17,1
     ebc:	008001c4 	movi	r2,7
     ec0:	1f000015 	stw	fp,0(r3)
     ec4:	1c000115 	stw	r16,4(r3)
     ec8:	dc800e15 	stw	r18,56(sp)
     ecc:	dc400d15 	stw	r17,52(sp)
     ed0:	1440cb16 	blt	r2,r17,1200 <___vfprintf_internal_r+0x9d0>
     ed4:	d8814a17 	ldw	r2,1320(sp)
     ed8:	d9414517 	ldw	r5,1300(sp)
     edc:	1140010e 	bge	r2,r5,ee4 <___vfprintf_internal_r+0x6b4>
     ee0:	2805883a 	mov	r2,r5
     ee4:	d9814b17 	ldw	r6,1324(sp)
     ee8:	308d883a 	add	r6,r6,r2
     eec:	d9814b15 	stw	r6,1324(sp)
     ef0:	90013b1e 	bne	r18,zero,13e0 <___vfprintf_internal_r+0xbb0>
     ef4:	d9c14017 	ldw	r7,1280(sp)
     ef8:	dd401904 	addi	r21,sp,100
     efc:	d8000d15 	stw	zero,52(sp)
     f00:	003ea706 	br	9a0 <___vfprintf_internal_r+0x170>
     f04:	d8800e17 	ldw	r2,56(sp)
     f08:	10053f1e 	bne	r2,zero,2408 <___vfprintf_internal_r+0x1bd8>
     f0c:	d8000d15 	stw	zero,52(sp)
     f10:	b080030b 	ldhu	r2,12(r22)
     f14:	1080100c 	andi	r2,r2,64
     f18:	103e8726 	beq	r2,zero,938 <___vfprintf_internal_r+0x108>
     f1c:	00bfffc4 	movi	r2,-1
     f20:	d8814b15 	stw	r2,1324(sp)
     f24:	003e8406 	br	938 <___vfprintf_internal_r+0x108>
     f28:	d9814d17 	ldw	r6,1332(sp)
     f2c:	00801944 	movi	r2,101
     f30:	11806e16 	blt	r2,r6,10ec <___vfprintf_internal_r+0x8bc>
     f34:	d9414717 	ldw	r5,1308(sp)
     f38:	00c00044 	movi	r3,1
     f3c:	1943430e 	bge	r3,r5,1c4c <___vfprintf_internal_r+0x141c>
     f40:	d8814117 	ldw	r2,1284(sp)
     f44:	94800044 	addi	r18,r18,1
     f48:	8c400044 	addi	r17,r17,1
     f4c:	a8800015 	stw	r2,0(r21)
     f50:	008001c4 	movi	r2,7
     f54:	a8c00115 	stw	r3,4(r21)
     f58:	dc800e15 	stw	r18,56(sp)
     f5c:	dc400d15 	stw	r17,52(sp)
     f60:	1441ca16 	blt	r2,r17,168c <___vfprintf_internal_r+0xe5c>
     f64:	a8c00204 	addi	r3,r21,8
     f68:	d9014917 	ldw	r4,1316(sp)
     f6c:	00800044 	movi	r2,1
     f70:	94800044 	addi	r18,r18,1
     f74:	8c400044 	addi	r17,r17,1
     f78:	18800115 	stw	r2,4(r3)
     f7c:	008001c4 	movi	r2,7
     f80:	19000015 	stw	r4,0(r3)
     f84:	dc800e15 	stw	r18,56(sp)
     f88:	dc400d15 	stw	r17,52(sp)
     f8c:	1441b616 	blt	r2,r17,1668 <___vfprintf_internal_r+0xe38>
     f90:	1cc00204 	addi	r19,r3,8
     f94:	d9014217 	ldw	r4,1288(sp)
     f98:	d9414317 	ldw	r5,1292(sp)
     f9c:	000d883a 	mov	r6,zero
     fa0:	000f883a 	mov	r7,zero
     fa4:	00090800 	call	9080 <__nedf2>
     fa8:	10017426 	beq	r2,zero,157c <___vfprintf_internal_r+0xd4c>
     fac:	d9414717 	ldw	r5,1308(sp)
     fb0:	d9814117 	ldw	r6,1284(sp)
     fb4:	8c400044 	addi	r17,r17,1
     fb8:	2c85883a 	add	r2,r5,r18
     fbc:	14bfffc4 	addi	r18,r2,-1
     fc0:	28bfffc4 	addi	r2,r5,-1
     fc4:	30c00044 	addi	r3,r6,1
     fc8:	98800115 	stw	r2,4(r19)
     fcc:	008001c4 	movi	r2,7
     fd0:	98c00015 	stw	r3,0(r19)
     fd4:	dc800e15 	stw	r18,56(sp)
     fd8:	dc400d15 	stw	r17,52(sp)
     fdc:	14418e16 	blt	r2,r17,1618 <___vfprintf_internal_r+0xde8>
     fe0:	9cc00204 	addi	r19,r19,8
     fe4:	d9414817 	ldw	r5,1312(sp)
     fe8:	d8800804 	addi	r2,sp,32
     fec:	8c400044 	addi	r17,r17,1
     ff0:	9165883a 	add	r18,r18,r5
     ff4:	98800015 	stw	r2,0(r19)
     ff8:	008001c4 	movi	r2,7
     ffc:	99400115 	stw	r5,4(r19)
    1000:	dc800e15 	stw	r18,56(sp)
    1004:	dc400d15 	stw	r17,52(sp)
    1008:	1440ed16 	blt	r2,r17,13c0 <___vfprintf_internal_r+0xb90>
    100c:	98c00204 	addi	r3,r19,8
    1010:	003f8506 	br	e28 <___vfprintf_internal_r+0x5f8>
    1014:	d9814a17 	ldw	r6,1320(sp)
    1018:	d8814517 	ldw	r2,1300(sp)
    101c:	30a1c83a 	sub	r16,r6,r2
    1020:	043f4b0e 	bge	zero,r16,d50 <___vfprintf_internal_r+0x520>
    1024:	00800404 	movi	r2,16
    1028:	1404340e 	bge	r2,r16,20fc <___vfprintf_internal_r+0x18cc>
    102c:	1027883a 	mov	r19,r2
    1030:	070000f4 	movhi	fp,3
    1034:	e7002884 	addi	fp,fp,162
    1038:	050001c4 	movi	r20,7
    103c:	00000306 	br	104c <___vfprintf_internal_r+0x81c>
    1040:	843ffc04 	addi	r16,r16,-16
    1044:	ad400204 	addi	r21,r21,8
    1048:	9c00130e 	bge	r19,r16,1098 <___vfprintf_internal_r+0x868>
    104c:	94800404 	addi	r18,r18,16
    1050:	8c400044 	addi	r17,r17,1
    1054:	af000015 	stw	fp,0(r21)
    1058:	acc00115 	stw	r19,4(r21)
    105c:	dc800e15 	stw	r18,56(sp)
    1060:	dc400d15 	stw	r17,52(sp)
    1064:	a47ff60e 	bge	r20,r17,1040 <___vfprintf_internal_r+0x810>
    1068:	d9014f17 	ldw	r4,1340(sp)
    106c:	b00b883a 	mov	r5,r22
    1070:	d9800c04 	addi	r6,sp,48
    1074:	d9c15115 	stw	r7,1348(sp)
    1078:	00007d80 	call	7d8 <__sprint_r>
    107c:	d9c15117 	ldw	r7,1348(sp)
    1080:	103fa31e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
    1084:	843ffc04 	addi	r16,r16,-16
    1088:	dc800e17 	ldw	r18,56(sp)
    108c:	dc400d17 	ldw	r17,52(sp)
    1090:	dd401904 	addi	r21,sp,100
    1094:	9c3fed16 	blt	r19,r16,104c <___vfprintf_internal_r+0x81c>
    1098:	9425883a 	add	r18,r18,r16
    109c:	8c400044 	addi	r17,r17,1
    10a0:	008001c4 	movi	r2,7
    10a4:	af000015 	stw	fp,0(r21)
    10a8:	ac000115 	stw	r16,4(r21)
    10ac:	dc800e15 	stw	r18,56(sp)
    10b0:	dc400d15 	stw	r17,52(sp)
    10b4:	14416116 	blt	r2,r17,163c <___vfprintf_internal_r+0xe0c>
    10b8:	ad400204 	addi	r21,r21,8
    10bc:	003f2406 	br	d50 <___vfprintf_internal_r+0x520>
    10c0:	d9014f17 	ldw	r4,1340(sp)
    10c4:	00042a00 	call	42a0 <__sinit>
    10c8:	d9c15117 	ldw	r7,1348(sp)
    10cc:	003def06 	br	88c <___vfprintf_internal_r+0x5c>
    10d0:	d9014f17 	ldw	r4,1340(sp)
    10d4:	b00b883a 	mov	r5,r22
    10d8:	d9c15115 	stw	r7,1348(sp)
    10dc:	00027000 	call	2700 <__swsetup_r>
    10e0:	d9c15117 	ldw	r7,1348(sp)
    10e4:	103dee26 	beq	r2,zero,8a0 <___vfprintf_internal_r+0x70>
    10e8:	003f8c06 	br	f1c <___vfprintf_internal_r+0x6ec>
    10ec:	d9014217 	ldw	r4,1288(sp)
    10f0:	d9414317 	ldw	r5,1292(sp)
    10f4:	000d883a 	mov	r6,zero
    10f8:	000f883a 	mov	r7,zero
    10fc:	0008ff80 	call	8ff8 <__eqdf2>
    1100:	1000f21e 	bne	r2,zero,14cc <___vfprintf_internal_r+0xc9c>
    1104:	008000f4 	movhi	r2,3
    1108:	10802804 	addi	r2,r2,160
    110c:	94800044 	addi	r18,r18,1
    1110:	8c400044 	addi	r17,r17,1
    1114:	a8800015 	stw	r2,0(r21)
    1118:	00c00044 	movi	r3,1
    111c:	008001c4 	movi	r2,7
    1120:	a8c00115 	stw	r3,4(r21)
    1124:	dc800e15 	stw	r18,56(sp)
    1128:	dc400d15 	stw	r17,52(sp)
    112c:	1442fa16 	blt	r2,r17,1d18 <___vfprintf_internal_r+0x14e8>
    1130:	a8c00204 	addi	r3,r21,8
    1134:	d8800517 	ldw	r2,20(sp)
    1138:	d9014717 	ldw	r4,1308(sp)
    113c:	11015c0e 	bge	r2,r4,16b0 <___vfprintf_internal_r+0xe80>
    1140:	dc400d17 	ldw	r17,52(sp)
    1144:	d9814917 	ldw	r6,1316(sp)
    1148:	00800044 	movi	r2,1
    114c:	94800044 	addi	r18,r18,1
    1150:	8c400044 	addi	r17,r17,1
    1154:	18800115 	stw	r2,4(r3)
    1158:	008001c4 	movi	r2,7
    115c:	19800015 	stw	r6,0(r3)
    1160:	dc800e15 	stw	r18,56(sp)
    1164:	dc400d15 	stw	r17,52(sp)
    1168:	14431016 	blt	r2,r17,1dac <___vfprintf_internal_r+0x157c>
    116c:	18c00204 	addi	r3,r3,8
    1170:	d8814717 	ldw	r2,1308(sp)
    1174:	143fffc4 	addi	r16,r2,-1
    1178:	043f2b0e 	bge	zero,r16,e28 <___vfprintf_internal_r+0x5f8>
    117c:	00800404 	movi	r2,16
    1180:	1402a20e 	bge	r2,r16,1c0c <___vfprintf_internal_r+0x13dc>
    1184:	dc400d17 	ldw	r17,52(sp)
    1188:	1027883a 	mov	r19,r2
    118c:	070000f4 	movhi	fp,3
    1190:	e7002884 	addi	fp,fp,162
    1194:	050001c4 	movi	r20,7
    1198:	00000306 	br	11a8 <___vfprintf_internal_r+0x978>
    119c:	18c00204 	addi	r3,r3,8
    11a0:	843ffc04 	addi	r16,r16,-16
    11a4:	9c029c0e 	bge	r19,r16,1c18 <___vfprintf_internal_r+0x13e8>
    11a8:	94800404 	addi	r18,r18,16
    11ac:	8c400044 	addi	r17,r17,1
    11b0:	1f000015 	stw	fp,0(r3)
    11b4:	1cc00115 	stw	r19,4(r3)
    11b8:	dc800e15 	stw	r18,56(sp)
    11bc:	dc400d15 	stw	r17,52(sp)
    11c0:	a47ff60e 	bge	r20,r17,119c <___vfprintf_internal_r+0x96c>
    11c4:	d9014f17 	ldw	r4,1340(sp)
    11c8:	b00b883a 	mov	r5,r22
    11cc:	d9800c04 	addi	r6,sp,48
    11d0:	00007d80 	call	7d8 <__sprint_r>
    11d4:	103f4e1e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
    11d8:	dc800e17 	ldw	r18,56(sp)
    11dc:	dc400d17 	ldw	r17,52(sp)
    11e0:	d8c01904 	addi	r3,sp,100
    11e4:	003fee06 	br	11a0 <___vfprintf_internal_r+0x970>
    11e8:	d8802c0b 	ldhu	r2,176(sp)
    11ec:	00ffffc4 	movi	r3,-1
    11f0:	d8c14b15 	stw	r3,1324(sp)
    11f4:	1080100c 	andi	r2,r2,64
    11f8:	103dcc1e 	bne	r2,zero,92c <___vfprintf_internal_r+0xfc>
    11fc:	003dce06 	br	938 <___vfprintf_internal_r+0x108>
    1200:	d9014f17 	ldw	r4,1340(sp)
    1204:	b00b883a 	mov	r5,r22
    1208:	d9800c04 	addi	r6,sp,48
    120c:	00007d80 	call	7d8 <__sprint_r>
    1210:	103f3f1e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
    1214:	dc800e17 	ldw	r18,56(sp)
    1218:	003f2e06 	br	ed4 <___vfprintf_internal_r+0x6a4>
    121c:	d9414c17 	ldw	r5,1328(sp)
    1220:	29400414 	ori	r5,r5,16
    1224:	d9414c15 	stw	r5,1328(sp)
    1228:	d9814c17 	ldw	r6,1328(sp)
    122c:	3080080c 	andi	r2,r6,32
    1230:	10014f1e 	bne	r2,zero,1770 <___vfprintf_internal_r+0xf40>
    1234:	d8c14c17 	ldw	r3,1328(sp)
    1238:	1880040c 	andi	r2,r3,16
    123c:	1002ea1e 	bne	r2,zero,1de8 <___vfprintf_internal_r+0x15b8>
    1240:	d9014c17 	ldw	r4,1328(sp)
    1244:	2080100c 	andi	r2,r4,64
    1248:	1002e726 	beq	r2,zero,1de8 <___vfprintf_internal_r+0x15b8>
    124c:	3880000f 	ldh	r2,0(r7)
    1250:	39c00104 	addi	r7,r7,4
    1254:	d9c14015 	stw	r7,1280(sp)
    1258:	1023d7fa 	srai	r17,r2,31
    125c:	1021883a 	mov	r16,r2
    1260:	88037216 	blt	r17,zero,202c <___vfprintf_internal_r+0x17fc>
    1264:	01000044 	movi	r4,1
    1268:	98000416 	blt	r19,zero,127c <___vfprintf_internal_r+0xa4c>
    126c:	d8c14c17 	ldw	r3,1328(sp)
    1270:	00bfdfc4 	movi	r2,-129
    1274:	1886703a 	and	r3,r3,r2
    1278:	d8c14c15 	stw	r3,1328(sp)
    127c:	8444b03a 	or	r2,r16,r17
    1280:	1002261e 	bne	r2,zero,1b1c <___vfprintf_internal_r+0x12ec>
    1284:	9802251e 	bne	r19,zero,1b1c <___vfprintf_internal_r+0x12ec>
    1288:	20803fcc 	andi	r2,r4,255
    128c:	10029b26 	beq	r2,zero,1cfc <___vfprintf_internal_r+0x14cc>
    1290:	d8c01904 	addi	r3,sp,100
    1294:	dd000f04 	addi	r20,sp,60
    1298:	d8c14115 	stw	r3,1284(sp)
    129c:	d8c14117 	ldw	r3,1284(sp)
    12a0:	dcc14515 	stw	r19,1300(sp)
    12a4:	a0c5c83a 	sub	r2,r20,r3
    12a8:	11c00a04 	addi	r7,r2,40
    12ac:	99c0010e 	bge	r19,r7,12b4 <___vfprintf_internal_r+0xa84>
    12b0:	d9c14515 	stw	r7,1300(sp)
    12b4:	dcc14615 	stw	r19,1304(sp)
    12b8:	d8800407 	ldb	r2,16(sp)
    12bc:	103e4c26 	beq	r2,zero,bf0 <___vfprintf_internal_r+0x3c0>
    12c0:	d8814517 	ldw	r2,1300(sp)
    12c4:	10800044 	addi	r2,r2,1
    12c8:	d8814515 	stw	r2,1300(sp)
    12cc:	003e4806 	br	bf0 <___vfprintf_internal_r+0x3c0>
    12d0:	d9814c17 	ldw	r6,1328(sp)
    12d4:	31800414 	ori	r6,r6,16
    12d8:	d9814c15 	stw	r6,1328(sp)
    12dc:	d8c14c17 	ldw	r3,1328(sp)
    12e0:	1880080c 	andi	r2,r3,32
    12e4:	1001271e 	bne	r2,zero,1784 <___vfprintf_internal_r+0xf54>
    12e8:	d9414c17 	ldw	r5,1328(sp)
    12ec:	2880040c 	andi	r2,r5,16
    12f0:	1002b61e 	bne	r2,zero,1dcc <___vfprintf_internal_r+0x159c>
    12f4:	d9814c17 	ldw	r6,1328(sp)
    12f8:	3080100c 	andi	r2,r6,64
    12fc:	1002b326 	beq	r2,zero,1dcc <___vfprintf_internal_r+0x159c>
    1300:	3c00000b 	ldhu	r16,0(r7)
    1304:	0009883a 	mov	r4,zero
    1308:	39c00104 	addi	r7,r7,4
    130c:	0023883a 	mov	r17,zero
    1310:	d9c14015 	stw	r7,1280(sp)
    1314:	d8000405 	stb	zero,16(sp)
    1318:	003fd306 	br	1268 <___vfprintf_internal_r+0xa38>
    131c:	d9014c17 	ldw	r4,1328(sp)
    1320:	21000414 	ori	r4,r4,16
    1324:	d9014c15 	stw	r4,1328(sp)
    1328:	d9414c17 	ldw	r5,1328(sp)
    132c:	2880080c 	andi	r2,r5,32
    1330:	1001081e 	bne	r2,zero,1754 <___vfprintf_internal_r+0xf24>
    1334:	d8c14c17 	ldw	r3,1328(sp)
    1338:	1880040c 	andi	r2,r3,16
    133c:	1002b01e 	bne	r2,zero,1e00 <___vfprintf_internal_r+0x15d0>
    1340:	d9014c17 	ldw	r4,1328(sp)
    1344:	2080100c 	andi	r2,r4,64
    1348:	1002ad26 	beq	r2,zero,1e00 <___vfprintf_internal_r+0x15d0>
    134c:	3c00000b 	ldhu	r16,0(r7)
    1350:	01000044 	movi	r4,1
    1354:	39c00104 	addi	r7,r7,4
    1358:	0023883a 	mov	r17,zero
    135c:	d9c14015 	stw	r7,1280(sp)
    1360:	d8000405 	stb	zero,16(sp)
    1364:	003fc006 	br	1268 <___vfprintf_internal_r+0xa38>
    1368:	d9014f17 	ldw	r4,1340(sp)
    136c:	b00b883a 	mov	r5,r22
    1370:	d9800c04 	addi	r6,sp,48
    1374:	00007d80 	call	7d8 <__sprint_r>
    1378:	103ee51e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
    137c:	dc800e17 	ldw	r18,56(sp)
    1380:	d8c01904 	addi	r3,sp,100
    1384:	d9814c17 	ldw	r6,1328(sp)
    1388:	3080004c 	andi	r2,r6,1
    138c:	1005003a 	cmpeq	r2,r2,zero
    1390:	103ea51e 	bne	r2,zero,e28 <___vfprintf_internal_r+0x5f8>
    1394:	00800044 	movi	r2,1
    1398:	dc400d17 	ldw	r17,52(sp)
    139c:	18800115 	stw	r2,4(r3)
    13a0:	d8814917 	ldw	r2,1316(sp)
    13a4:	94800044 	addi	r18,r18,1
    13a8:	8c400044 	addi	r17,r17,1
    13ac:	18800015 	stw	r2,0(r3)
    13b0:	008001c4 	movi	r2,7
    13b4:	dc800e15 	stw	r18,56(sp)
    13b8:	dc400d15 	stw	r17,52(sp)
    13bc:	14421e0e 	bge	r2,r17,1c38 <___vfprintf_internal_r+0x1408>
    13c0:	d9014f17 	ldw	r4,1340(sp)
    13c4:	b00b883a 	mov	r5,r22
    13c8:	d9800c04 	addi	r6,sp,48
    13cc:	00007d80 	call	7d8 <__sprint_r>
    13d0:	103ecf1e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
    13d4:	dc800e17 	ldw	r18,56(sp)
    13d8:	d8c01904 	addi	r3,sp,100
    13dc:	003e9206 	br	e28 <___vfprintf_internal_r+0x5f8>
    13e0:	d9014f17 	ldw	r4,1340(sp)
    13e4:	b00b883a 	mov	r5,r22
    13e8:	d9800c04 	addi	r6,sp,48
    13ec:	00007d80 	call	7d8 <__sprint_r>
    13f0:	103ec026 	beq	r2,zero,ef4 <___vfprintf_internal_r+0x6c4>
    13f4:	003ec606 	br	f10 <___vfprintf_internal_r+0x6e0>
    13f8:	d9014f17 	ldw	r4,1340(sp)
    13fc:	b00b883a 	mov	r5,r22
    1400:	d9800c04 	addi	r6,sp,48
    1404:	d9c15115 	stw	r7,1348(sp)
    1408:	00007d80 	call	7d8 <__sprint_r>
    140c:	d9c15117 	ldw	r7,1348(sp)
    1410:	103ebf1e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
    1414:	dc800e17 	ldw	r18,56(sp)
    1418:	dc400d17 	ldw	r17,52(sp)
    141c:	dd401904 	addi	r21,sp,100
    1420:	003e7406 	br	df4 <___vfprintf_internal_r+0x5c4>
    1424:	d9014f17 	ldw	r4,1340(sp)
    1428:	b00b883a 	mov	r5,r22
    142c:	d9800c04 	addi	r6,sp,48
    1430:	d9c15115 	stw	r7,1348(sp)
    1434:	00007d80 	call	7d8 <__sprint_r>
    1438:	d9c15117 	ldw	r7,1348(sp)
    143c:	103eb41e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
    1440:	dd401904 	addi	r21,sp,100
    1444:	003d6d06 	br	9fc <___vfprintf_internal_r+0x1cc>
    1448:	d9014f17 	ldw	r4,1340(sp)
    144c:	b00b883a 	mov	r5,r22
    1450:	d9800c04 	addi	r6,sp,48
    1454:	d9c15115 	stw	r7,1348(sp)
    1458:	00007d80 	call	7d8 <__sprint_r>
    145c:	d9c15117 	ldw	r7,1348(sp)
    1460:	103eab1e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
    1464:	dc800e17 	ldw	r18,56(sp)
    1468:	dc400d17 	ldw	r17,52(sp)
    146c:	dd401904 	addi	r21,sp,100
    1470:	003e3406 	br	d44 <___vfprintf_internal_r+0x514>
    1474:	d9014f17 	ldw	r4,1340(sp)
    1478:	b00b883a 	mov	r5,r22
    147c:	d9800c04 	addi	r6,sp,48
    1480:	d9c15115 	stw	r7,1348(sp)
    1484:	00007d80 	call	7d8 <__sprint_r>
    1488:	d9c15117 	ldw	r7,1348(sp)
    148c:	103ea01e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
    1490:	dc800e17 	ldw	r18,56(sp)
    1494:	dc400d17 	ldw	r17,52(sp)
    1498:	dd401904 	addi	r21,sp,100
    149c:	003e1c06 	br	d10 <___vfprintf_internal_r+0x4e0>
    14a0:	d9014f17 	ldw	r4,1340(sp)
    14a4:	b00b883a 	mov	r5,r22
    14a8:	d9800c04 	addi	r6,sp,48
    14ac:	d9c15115 	stw	r7,1348(sp)
    14b0:	00007d80 	call	7d8 <__sprint_r>
    14b4:	d9c15117 	ldw	r7,1348(sp)
    14b8:	103e951e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
    14bc:	dc800e17 	ldw	r18,56(sp)
    14c0:	dc400d17 	ldw	r17,52(sp)
    14c4:	dd401904 	addi	r21,sp,100
    14c8:	003e0406 	br	cdc <___vfprintf_internal_r+0x4ac>
    14cc:	d9000517 	ldw	r4,20(sp)
    14d0:	0102520e 	bge	zero,r4,1e1c <___vfprintf_internal_r+0x15ec>
    14d4:	d9814717 	ldw	r6,1308(sp)
    14d8:	21807a16 	blt	r4,r6,16c4 <___vfprintf_internal_r+0xe94>
    14dc:	d8814117 	ldw	r2,1284(sp)
    14e0:	91a5883a 	add	r18,r18,r6
    14e4:	8c400044 	addi	r17,r17,1
    14e8:	a8800015 	stw	r2,0(r21)
    14ec:	008001c4 	movi	r2,7
    14f0:	a9800115 	stw	r6,4(r21)
    14f4:	dc800e15 	stw	r18,56(sp)
    14f8:	dc400d15 	stw	r17,52(sp)
    14fc:	1442f616 	blt	r2,r17,20d8 <___vfprintf_internal_r+0x18a8>
    1500:	a8c00204 	addi	r3,r21,8
    1504:	d9414717 	ldw	r5,1308(sp)
    1508:	2161c83a 	sub	r16,r4,r5
    150c:	043f9d0e 	bge	zero,r16,1384 <___vfprintf_internal_r+0xb54>
    1510:	00800404 	movi	r2,16
    1514:	1402130e 	bge	r2,r16,1d64 <___vfprintf_internal_r+0x1534>
    1518:	dc400d17 	ldw	r17,52(sp)
    151c:	1027883a 	mov	r19,r2
    1520:	070000f4 	movhi	fp,3
    1524:	e7002884 	addi	fp,fp,162
    1528:	050001c4 	movi	r20,7
    152c:	00000306 	br	153c <___vfprintf_internal_r+0xd0c>
    1530:	18c00204 	addi	r3,r3,8
    1534:	843ffc04 	addi	r16,r16,-16
    1538:	9c020d0e 	bge	r19,r16,1d70 <___vfprintf_internal_r+0x1540>
    153c:	94800404 	addi	r18,r18,16
    1540:	8c400044 	addi	r17,r17,1
    1544:	1f000015 	stw	fp,0(r3)
    1548:	1cc00115 	stw	r19,4(r3)
    154c:	dc800e15 	stw	r18,56(sp)
    1550:	dc400d15 	stw	r17,52(sp)
    1554:	a47ff60e 	bge	r20,r17,1530 <___vfprintf_internal_r+0xd00>
    1558:	d9014f17 	ldw	r4,1340(sp)
    155c:	b00b883a 	mov	r5,r22
    1560:	d9800c04 	addi	r6,sp,48
    1564:	00007d80 	call	7d8 <__sprint_r>
    1568:	103e691e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
    156c:	dc800e17 	ldw	r18,56(sp)
    1570:	dc400d17 	ldw	r17,52(sp)
    1574:	d8c01904 	addi	r3,sp,100
    1578:	003fee06 	br	1534 <___vfprintf_internal_r+0xd04>
    157c:	d8814717 	ldw	r2,1308(sp)
    1580:	143fffc4 	addi	r16,r2,-1
    1584:	043e970e 	bge	zero,r16,fe4 <___vfprintf_internal_r+0x7b4>
    1588:	00800404 	movi	r2,16
    158c:	1400180e 	bge	r2,r16,15f0 <___vfprintf_internal_r+0xdc0>
    1590:	1029883a 	mov	r20,r2
    1594:	070000f4 	movhi	fp,3
    1598:	e7002884 	addi	fp,fp,162
    159c:	054001c4 	movi	r21,7
    15a0:	00000306 	br	15b0 <___vfprintf_internal_r+0xd80>
    15a4:	9cc00204 	addi	r19,r19,8
    15a8:	843ffc04 	addi	r16,r16,-16
    15ac:	a400120e 	bge	r20,r16,15f8 <___vfprintf_internal_r+0xdc8>
    15b0:	94800404 	addi	r18,r18,16
    15b4:	8c400044 	addi	r17,r17,1
    15b8:	9f000015 	stw	fp,0(r19)
    15bc:	9d000115 	stw	r20,4(r19)
    15c0:	dc800e15 	stw	r18,56(sp)
    15c4:	dc400d15 	stw	r17,52(sp)
    15c8:	ac7ff60e 	bge	r21,r17,15a4 <___vfprintf_internal_r+0xd74>
    15cc:	d9014f17 	ldw	r4,1340(sp)
    15d0:	b00b883a 	mov	r5,r22
    15d4:	d9800c04 	addi	r6,sp,48
    15d8:	00007d80 	call	7d8 <__sprint_r>
    15dc:	103e4c1e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
    15e0:	dc800e17 	ldw	r18,56(sp)
    15e4:	dc400d17 	ldw	r17,52(sp)
    15e8:	dcc01904 	addi	r19,sp,100
    15ec:	003fee06 	br	15a8 <___vfprintf_internal_r+0xd78>
    15f0:	070000f4 	movhi	fp,3
    15f4:	e7002884 	addi	fp,fp,162
    15f8:	9425883a 	add	r18,r18,r16
    15fc:	8c400044 	addi	r17,r17,1
    1600:	008001c4 	movi	r2,7
    1604:	9f000015 	stw	fp,0(r19)
    1608:	9c000115 	stw	r16,4(r19)
    160c:	dc800e15 	stw	r18,56(sp)
    1610:	dc400d15 	stw	r17,52(sp)
    1614:	147e720e 	bge	r2,r17,fe0 <___vfprintf_internal_r+0x7b0>
    1618:	d9014f17 	ldw	r4,1340(sp)
    161c:	b00b883a 	mov	r5,r22
    1620:	d9800c04 	addi	r6,sp,48
    1624:	00007d80 	call	7d8 <__sprint_r>
    1628:	103e391e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
    162c:	dc800e17 	ldw	r18,56(sp)
    1630:	dc400d17 	ldw	r17,52(sp)
    1634:	dcc01904 	addi	r19,sp,100
    1638:	003e6a06 	br	fe4 <___vfprintf_internal_r+0x7b4>
    163c:	d9014f17 	ldw	r4,1340(sp)
    1640:	b00b883a 	mov	r5,r22
    1644:	d9800c04 	addi	r6,sp,48
    1648:	d9c15115 	stw	r7,1348(sp)
    164c:	00007d80 	call	7d8 <__sprint_r>
    1650:	d9c15117 	ldw	r7,1348(sp)
    1654:	103e2e1e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
    1658:	dc800e17 	ldw	r18,56(sp)
    165c:	dc400d17 	ldw	r17,52(sp)
    1660:	dd401904 	addi	r21,sp,100
    1664:	003dba06 	br	d50 <___vfprintf_internal_r+0x520>
    1668:	d9014f17 	ldw	r4,1340(sp)
    166c:	b00b883a 	mov	r5,r22
    1670:	d9800c04 	addi	r6,sp,48
    1674:	00007d80 	call	7d8 <__sprint_r>
    1678:	103e251e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
    167c:	dc800e17 	ldw	r18,56(sp)
    1680:	dc400d17 	ldw	r17,52(sp)
    1684:	dcc01904 	addi	r19,sp,100
    1688:	003e4206 	br	f94 <___vfprintf_internal_r+0x764>
    168c:	d9014f17 	ldw	r4,1340(sp)
    1690:	b00b883a 	mov	r5,r22
    1694:	d9800c04 	addi	r6,sp,48
    1698:	00007d80 	call	7d8 <__sprint_r>
    169c:	103e1c1e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
    16a0:	dc800e17 	ldw	r18,56(sp)
    16a4:	dc400d17 	ldw	r17,52(sp)
    16a8:	d8c01904 	addi	r3,sp,100
    16ac:	003e2e06 	br	f68 <___vfprintf_internal_r+0x738>
    16b0:	d9414c17 	ldw	r5,1328(sp)
    16b4:	2880004c 	andi	r2,r5,1
    16b8:	1005003a 	cmpeq	r2,r2,zero
    16bc:	103dda1e 	bne	r2,zero,e28 <___vfprintf_internal_r+0x5f8>
    16c0:	003e9f06 	br	1140 <___vfprintf_internal_r+0x910>
    16c4:	d8c14117 	ldw	r3,1284(sp)
    16c8:	9125883a 	add	r18,r18,r4
    16cc:	8c400044 	addi	r17,r17,1
    16d0:	008001c4 	movi	r2,7
    16d4:	a8c00015 	stw	r3,0(r21)
    16d8:	a9000115 	stw	r4,4(r21)
    16dc:	dc800e15 	stw	r18,56(sp)
    16e0:	dc400d15 	stw	r17,52(sp)
    16e4:	14426616 	blt	r2,r17,2080 <___vfprintf_internal_r+0x1850>
    16e8:	a8c00204 	addi	r3,r21,8
    16ec:	d9414917 	ldw	r5,1316(sp)
    16f0:	00800044 	movi	r2,1
    16f4:	94800044 	addi	r18,r18,1
    16f8:	8c400044 	addi	r17,r17,1
    16fc:	18800115 	stw	r2,4(r3)
    1700:	008001c4 	movi	r2,7
    1704:	19400015 	stw	r5,0(r3)
    1708:	dc800e15 	stw	r18,56(sp)
    170c:	dc400d15 	stw	r17,52(sp)
    1710:	2021883a 	mov	r16,r4
    1714:	14425016 	blt	r2,r17,2058 <___vfprintf_internal_r+0x1828>
    1718:	19400204 	addi	r5,r3,8
    171c:	d9814717 	ldw	r6,1308(sp)
    1720:	8c400044 	addi	r17,r17,1
    1724:	dc400d15 	stw	r17,52(sp)
    1728:	3107c83a 	sub	r3,r6,r4
    172c:	d9014117 	ldw	r4,1284(sp)
    1730:	90e5883a 	add	r18,r18,r3
    1734:	28c00115 	stw	r3,4(r5)
    1738:	8105883a 	add	r2,r16,r4
    173c:	28800015 	stw	r2,0(r5)
    1740:	008001c4 	movi	r2,7
    1744:	dc800e15 	stw	r18,56(sp)
    1748:	147f1d16 	blt	r2,r17,13c0 <___vfprintf_internal_r+0xb90>
    174c:	28c00204 	addi	r3,r5,8
    1750:	003db506 	br	e28 <___vfprintf_internal_r+0x5f8>
    1754:	3c000017 	ldw	r16,0(r7)
    1758:	3c400117 	ldw	r17,4(r7)
    175c:	39800204 	addi	r6,r7,8
    1760:	01000044 	movi	r4,1
    1764:	d9814015 	stw	r6,1280(sp)
    1768:	d8000405 	stb	zero,16(sp)
    176c:	003ebe06 	br	1268 <___vfprintf_internal_r+0xa38>
    1770:	3c000017 	ldw	r16,0(r7)
    1774:	3c400117 	ldw	r17,4(r7)
    1778:	38800204 	addi	r2,r7,8
    177c:	d8814015 	stw	r2,1280(sp)
    1780:	003eb706 	br	1260 <___vfprintf_internal_r+0xa30>
    1784:	3c000017 	ldw	r16,0(r7)
    1788:	3c400117 	ldw	r17,4(r7)
    178c:	39000204 	addi	r4,r7,8
    1790:	d9014015 	stw	r4,1280(sp)
    1794:	0009883a 	mov	r4,zero
    1798:	d8000405 	stb	zero,16(sp)
    179c:	003eb206 	br	1268 <___vfprintf_internal_r+0xa38>
    17a0:	38c00017 	ldw	r3,0(r7)
    17a4:	39c00104 	addi	r7,r7,4
    17a8:	d8c14a15 	stw	r3,1320(sp)
    17ac:	1800d10e 	bge	r3,zero,1af4 <___vfprintf_internal_r+0x12c4>
    17b0:	00c7c83a 	sub	r3,zero,r3
    17b4:	d8c14a15 	stw	r3,1320(sp)
    17b8:	d9014c17 	ldw	r4,1328(sp)
    17bc:	b8c00007 	ldb	r3,0(r23)
    17c0:	21000114 	ori	r4,r4,4
    17c4:	d9014c15 	stw	r4,1328(sp)
    17c8:	003c9806 	br	a2c <___vfprintf_internal_r+0x1fc>
    17cc:	d9814c17 	ldw	r6,1328(sp)
    17d0:	3080080c 	andi	r2,r6,32
    17d4:	1001f026 	beq	r2,zero,1f98 <___vfprintf_internal_r+0x1768>
    17d8:	d9014b17 	ldw	r4,1324(sp)
    17dc:	38800017 	ldw	r2,0(r7)
    17e0:	39c00104 	addi	r7,r7,4
    17e4:	d9c14015 	stw	r7,1280(sp)
    17e8:	2007d7fa 	srai	r3,r4,31
    17ec:	d9c14017 	ldw	r7,1280(sp)
    17f0:	11000015 	stw	r4,0(r2)
    17f4:	10c00115 	stw	r3,4(r2)
    17f8:	003c6906 	br	9a0 <___vfprintf_internal_r+0x170>
    17fc:	b8c00007 	ldb	r3,0(r23)
    1800:	00801b04 	movi	r2,108
    1804:	18824f26 	beq	r3,r2,2144 <___vfprintf_internal_r+0x1914>
    1808:	d9414c17 	ldw	r5,1328(sp)
    180c:	29400414 	ori	r5,r5,16
    1810:	d9414c15 	stw	r5,1328(sp)
    1814:	003c8506 	br	a2c <___vfprintf_internal_r+0x1fc>
    1818:	d9814c17 	ldw	r6,1328(sp)
    181c:	b8c00007 	ldb	r3,0(r23)
    1820:	31800814 	ori	r6,r6,32
    1824:	d9814c15 	stw	r6,1328(sp)
    1828:	003c8006 	br	a2c <___vfprintf_internal_r+0x1fc>
    182c:	d8814c17 	ldw	r2,1328(sp)
    1830:	3c000017 	ldw	r16,0(r7)
    1834:	00c01e04 	movi	r3,120
    1838:	10800094 	ori	r2,r2,2
    183c:	d8814c15 	stw	r2,1328(sp)
    1840:	39c00104 	addi	r7,r7,4
    1844:	014000f4 	movhi	r5,3
    1848:	29401104 	addi	r5,r5,68
    184c:	00800c04 	movi	r2,48
    1850:	0023883a 	mov	r17,zero
    1854:	01000084 	movi	r4,2
    1858:	d9c14015 	stw	r7,1280(sp)
    185c:	d8c14d15 	stw	r3,1332(sp)
    1860:	d9414415 	stw	r5,1296(sp)
    1864:	d8800445 	stb	r2,17(sp)
    1868:	d8c00485 	stb	r3,18(sp)
    186c:	d8000405 	stb	zero,16(sp)
    1870:	003e7d06 	br	1268 <___vfprintf_internal_r+0xa38>
    1874:	d8814c17 	ldw	r2,1328(sp)
    1878:	b8c00007 	ldb	r3,0(r23)
    187c:	10801014 	ori	r2,r2,64
    1880:	d8814c15 	stw	r2,1328(sp)
    1884:	003c6906 	br	a2c <___vfprintf_internal_r+0x1fc>
    1888:	d9414c17 	ldw	r5,1328(sp)
    188c:	2880020c 	andi	r2,r5,8
    1890:	1001df26 	beq	r2,zero,2010 <___vfprintf_internal_r+0x17e0>
    1894:	39800017 	ldw	r6,0(r7)
    1898:	38800204 	addi	r2,r7,8
    189c:	d8814015 	stw	r2,1280(sp)
    18a0:	d9814215 	stw	r6,1288(sp)
    18a4:	39c00117 	ldw	r7,4(r7)
    18a8:	d9c14315 	stw	r7,1292(sp)
    18ac:	d9014217 	ldw	r4,1288(sp)
    18b0:	d9414317 	ldw	r5,1292(sp)
    18b4:	00071d00 	call	71d0 <__isinfd>
    18b8:	10021726 	beq	r2,zero,2118 <___vfprintf_internal_r+0x18e8>
    18bc:	d9014217 	ldw	r4,1288(sp)
    18c0:	d9414317 	ldw	r5,1292(sp)
    18c4:	000d883a 	mov	r6,zero
    18c8:	000f883a 	mov	r7,zero
    18cc:	00092180 	call	9218 <__ltdf2>
    18d0:	1002ca16 	blt	r2,zero,23fc <___vfprintf_internal_r+0x1bcc>
    18d4:	d9414d17 	ldw	r5,1332(sp)
    18d8:	008011c4 	movi	r2,71
    18dc:	11420a16 	blt	r2,r5,2108 <___vfprintf_internal_r+0x18d8>
    18e0:	018000f4 	movhi	r6,3
    18e4:	31801604 	addi	r6,r6,88
    18e8:	d9814115 	stw	r6,1284(sp)
    18ec:	d9014c17 	ldw	r4,1328(sp)
    18f0:	00c000c4 	movi	r3,3
    18f4:	00bfdfc4 	movi	r2,-129
    18f8:	2088703a 	and	r4,r4,r2
    18fc:	180f883a 	mov	r7,r3
    1900:	d8c14515 	stw	r3,1300(sp)
    1904:	d9014c15 	stw	r4,1328(sp)
    1908:	d8014615 	stw	zero,1304(sp)
    190c:	003e6a06 	br	12b8 <___vfprintf_internal_r+0xa88>
    1910:	38800017 	ldw	r2,0(r7)
    1914:	00c00044 	movi	r3,1
    1918:	39c00104 	addi	r7,r7,4
    191c:	d9c14015 	stw	r7,1280(sp)
    1920:	d9000f04 	addi	r4,sp,60
    1924:	180f883a 	mov	r7,r3
    1928:	d8c14515 	stw	r3,1300(sp)
    192c:	d9014115 	stw	r4,1284(sp)
    1930:	d8800f05 	stb	r2,60(sp)
    1934:	d8000405 	stb	zero,16(sp)
    1938:	003cac06 	br	bec <___vfprintf_internal_r+0x3bc>
    193c:	014000f4 	movhi	r5,3
    1940:	29401c04 	addi	r5,r5,112
    1944:	d9414415 	stw	r5,1296(sp)
    1948:	d9814c17 	ldw	r6,1328(sp)
    194c:	3080080c 	andi	r2,r6,32
    1950:	1000f926 	beq	r2,zero,1d38 <___vfprintf_internal_r+0x1508>
    1954:	3c000017 	ldw	r16,0(r7)
    1958:	3c400117 	ldw	r17,4(r7)
    195c:	38800204 	addi	r2,r7,8
    1960:	d8814015 	stw	r2,1280(sp)
    1964:	d9414c17 	ldw	r5,1328(sp)
    1968:	2880004c 	andi	r2,r5,1
    196c:	1005003a 	cmpeq	r2,r2,zero
    1970:	1000b31e 	bne	r2,zero,1c40 <___vfprintf_internal_r+0x1410>
    1974:	8444b03a 	or	r2,r16,r17
    1978:	1000b126 	beq	r2,zero,1c40 <___vfprintf_internal_r+0x1410>
    197c:	d9814d17 	ldw	r6,1332(sp)
    1980:	29400094 	ori	r5,r5,2
    1984:	00800c04 	movi	r2,48
    1988:	01000084 	movi	r4,2
    198c:	d9414c15 	stw	r5,1328(sp)
    1990:	d8800445 	stb	r2,17(sp)
    1994:	d9800485 	stb	r6,18(sp)
    1998:	d8000405 	stb	zero,16(sp)
    199c:	003e3206 	br	1268 <___vfprintf_internal_r+0xa38>
    19a0:	018000f4 	movhi	r6,3
    19a4:	31801104 	addi	r6,r6,68
    19a8:	d9814415 	stw	r6,1296(sp)
    19ac:	003fe606 	br	1948 <___vfprintf_internal_r+0x1118>
    19b0:	00800ac4 	movi	r2,43
    19b4:	d8800405 	stb	r2,16(sp)
    19b8:	b8c00007 	ldb	r3,0(r23)
    19bc:	003c1b06 	br	a2c <___vfprintf_internal_r+0x1fc>
    19c0:	d8814c17 	ldw	r2,1328(sp)
    19c4:	b8c00007 	ldb	r3,0(r23)
    19c8:	10800054 	ori	r2,r2,1
    19cc:	d8814c15 	stw	r2,1328(sp)
    19d0:	003c1606 	br	a2c <___vfprintf_internal_r+0x1fc>
    19d4:	d8800407 	ldb	r2,16(sp)
    19d8:	1000461e 	bne	r2,zero,1af4 <___vfprintf_internal_r+0x12c4>
    19dc:	00800804 	movi	r2,32
    19e0:	d8800405 	stb	r2,16(sp)
    19e4:	b8c00007 	ldb	r3,0(r23)
    19e8:	003c1006 	br	a2c <___vfprintf_internal_r+0x1fc>
    19ec:	d9814c17 	ldw	r6,1328(sp)
    19f0:	b8c00007 	ldb	r3,0(r23)
    19f4:	31800214 	ori	r6,r6,8
    19f8:	d9814c15 	stw	r6,1328(sp)
    19fc:	003c0b06 	br	a2c <___vfprintf_internal_r+0x1fc>
    1a00:	0007883a 	mov	r3,zero
    1a04:	01000244 	movi	r4,9
    1a08:	188002a4 	muli	r2,r3,10
    1a0c:	b8c00007 	ldb	r3,0(r23)
    1a10:	d9814d17 	ldw	r6,1332(sp)
    1a14:	bdc00044 	addi	r23,r23,1
    1a18:	d8c14d15 	stw	r3,1332(sp)
    1a1c:	d9414d17 	ldw	r5,1332(sp)
    1a20:	3085883a 	add	r2,r6,r2
    1a24:	10fff404 	addi	r3,r2,-48
    1a28:	28bff404 	addi	r2,r5,-48
    1a2c:	20bff62e 	bgeu	r4,r2,1a08 <___vfprintf_internal_r+0x11d8>
    1a30:	d8c14a15 	stw	r3,1320(sp)
    1a34:	003bff06 	br	a34 <___vfprintf_internal_r+0x204>
    1a38:	d9414c17 	ldw	r5,1328(sp)
    1a3c:	b8c00007 	ldb	r3,0(r23)
    1a40:	29402014 	ori	r5,r5,128
    1a44:	d9414c15 	stw	r5,1328(sp)
    1a48:	003bf806 	br	a2c <___vfprintf_internal_r+0x1fc>
    1a4c:	b8c00007 	ldb	r3,0(r23)
    1a50:	00800a84 	movi	r2,42
    1a54:	bdc00044 	addi	r23,r23,1
    1a58:	18831526 	beq	r3,r2,26b0 <___vfprintf_internal_r+0x1e80>
    1a5c:	d8c14d15 	stw	r3,1332(sp)
    1a60:	18bff404 	addi	r2,r3,-48
    1a64:	00c00244 	movi	r3,9
    1a68:	18827836 	bltu	r3,r2,244c <___vfprintf_internal_r+0x1c1c>
    1a6c:	000d883a 	mov	r6,zero
    1a70:	308002a4 	muli	r2,r6,10
    1a74:	b9800007 	ldb	r6,0(r23)
    1a78:	d9414d17 	ldw	r5,1332(sp)
    1a7c:	bdc00044 	addi	r23,r23,1
    1a80:	d9814d15 	stw	r6,1332(sp)
    1a84:	d9014d17 	ldw	r4,1332(sp)
    1a88:	1145883a 	add	r2,r2,r5
    1a8c:	11bff404 	addi	r6,r2,-48
    1a90:	20bff404 	addi	r2,r4,-48
    1a94:	18bff62e 	bgeu	r3,r2,1a70 <___vfprintf_internal_r+0x1240>
    1a98:	3027883a 	mov	r19,r6
    1a9c:	303be50e 	bge	r6,zero,a34 <___vfprintf_internal_r+0x204>
    1aa0:	04ffffc4 	movi	r19,-1
    1aa4:	003be306 	br	a34 <___vfprintf_internal_r+0x204>
    1aa8:	d8000405 	stb	zero,16(sp)
    1aac:	39800017 	ldw	r6,0(r7)
    1ab0:	39c00104 	addi	r7,r7,4
    1ab4:	d9c14015 	stw	r7,1280(sp)
    1ab8:	d9814115 	stw	r6,1284(sp)
    1abc:	3001c926 	beq	r6,zero,21e4 <___vfprintf_internal_r+0x19b4>
    1ac0:	98000e16 	blt	r19,zero,1afc <___vfprintf_internal_r+0x12cc>
    1ac4:	d9014117 	ldw	r4,1284(sp)
    1ac8:	000b883a 	mov	r5,zero
    1acc:	980d883a 	mov	r6,r19
    1ad0:	00058ec0 	call	58ec <memchr>
    1ad4:	10025926 	beq	r2,zero,243c <___vfprintf_internal_r+0x1c0c>
    1ad8:	d8c14117 	ldw	r3,1284(sp)
    1adc:	10cfc83a 	sub	r7,r2,r3
    1ae0:	99c19e16 	blt	r19,r7,215c <___vfprintf_internal_r+0x192c>
    1ae4:	d9c14515 	stw	r7,1300(sp)
    1ae8:	38000916 	blt	r7,zero,1b10 <___vfprintf_internal_r+0x12e0>
    1aec:	d8014615 	stw	zero,1304(sp)
    1af0:	003df106 	br	12b8 <___vfprintf_internal_r+0xa88>
    1af4:	b8c00007 	ldb	r3,0(r23)
    1af8:	003bcc06 	br	a2c <___vfprintf_internal_r+0x1fc>
    1afc:	d9014117 	ldw	r4,1284(sp)
    1b00:	00007640 	call	764 <strlen>
    1b04:	d8814515 	stw	r2,1300(sp)
    1b08:	100f883a 	mov	r7,r2
    1b0c:	103ff70e 	bge	r2,zero,1aec <___vfprintf_internal_r+0x12bc>
    1b10:	d8014515 	stw	zero,1300(sp)
    1b14:	d8014615 	stw	zero,1304(sp)
    1b18:	003de706 	br	12b8 <___vfprintf_internal_r+0xa88>
    1b1c:	20c03fcc 	andi	r3,r4,255
    1b20:	00800044 	movi	r2,1
    1b24:	18802d26 	beq	r3,r2,1bdc <___vfprintf_internal_r+0x13ac>
    1b28:	18800e36 	bltu	r3,r2,1b64 <___vfprintf_internal_r+0x1334>
    1b2c:	00800084 	movi	r2,2
    1b30:	1880fa26 	beq	r3,r2,1f1c <___vfprintf_internal_r+0x16ec>
    1b34:	010000f4 	movhi	r4,3
    1b38:	21002104 	addi	r4,r4,132
    1b3c:	00007640 	call	764 <strlen>
    1b40:	100f883a 	mov	r7,r2
    1b44:	dcc14515 	stw	r19,1300(sp)
    1b48:	9880010e 	bge	r19,r2,1b50 <___vfprintf_internal_r+0x1320>
    1b4c:	d8814515 	stw	r2,1300(sp)
    1b50:	008000f4 	movhi	r2,3
    1b54:	10802104 	addi	r2,r2,132
    1b58:	dcc14615 	stw	r19,1304(sp)
    1b5c:	d8814115 	stw	r2,1284(sp)
    1b60:	003dd506 	br	12b8 <___vfprintf_internal_r+0xa88>
    1b64:	d9401904 	addi	r5,sp,100
    1b68:	dd000f04 	addi	r20,sp,60
    1b6c:	d9414115 	stw	r5,1284(sp)
    1b70:	880a977a 	slli	r5,r17,29
    1b74:	d9814117 	ldw	r6,1284(sp)
    1b78:	8004d0fa 	srli	r2,r16,3
    1b7c:	8806d0fa 	srli	r3,r17,3
    1b80:	810001cc 	andi	r4,r16,7
    1b84:	2884b03a 	or	r2,r5,r2
    1b88:	31bfffc4 	addi	r6,r6,-1
    1b8c:	21000c04 	addi	r4,r4,48
    1b90:	d9814115 	stw	r6,1284(sp)
    1b94:	10cab03a 	or	r5,r2,r3
    1b98:	31000005 	stb	r4,0(r6)
    1b9c:	1021883a 	mov	r16,r2
    1ba0:	1823883a 	mov	r17,r3
    1ba4:	283ff21e 	bne	r5,zero,1b70 <___vfprintf_internal_r+0x1340>
    1ba8:	d8c14c17 	ldw	r3,1328(sp)
    1bac:	1880004c 	andi	r2,r3,1
    1bb0:	1005003a 	cmpeq	r2,r2,zero
    1bb4:	103db91e 	bne	r2,zero,129c <___vfprintf_internal_r+0xa6c>
    1bb8:	20803fcc 	andi	r2,r4,255
    1bbc:	1080201c 	xori	r2,r2,128
    1bc0:	10bfe004 	addi	r2,r2,-128
    1bc4:	00c00c04 	movi	r3,48
    1bc8:	10fdb426 	beq	r2,r3,129c <___vfprintf_internal_r+0xa6c>
    1bcc:	31bfffc4 	addi	r6,r6,-1
    1bd0:	d9814115 	stw	r6,1284(sp)
    1bd4:	30c00005 	stb	r3,0(r6)
    1bd8:	003db006 	br	129c <___vfprintf_internal_r+0xa6c>
    1bdc:	88800068 	cmpgeui	r2,r17,1
    1be0:	10002c1e 	bne	r2,zero,1c94 <___vfprintf_internal_r+0x1464>
    1be4:	8800021e 	bne	r17,zero,1bf0 <___vfprintf_internal_r+0x13c0>
    1be8:	00800244 	movi	r2,9
    1bec:	14002936 	bltu	r2,r16,1c94 <___vfprintf_internal_r+0x1464>
    1bf0:	d90018c4 	addi	r4,sp,99
    1bf4:	dd000f04 	addi	r20,sp,60
    1bf8:	d9014115 	stw	r4,1284(sp)
    1bfc:	d9014117 	ldw	r4,1284(sp)
    1c00:	80800c04 	addi	r2,r16,48
    1c04:	20800005 	stb	r2,0(r4)
    1c08:	003da406 	br	129c <___vfprintf_internal_r+0xa6c>
    1c0c:	dc400d17 	ldw	r17,52(sp)
    1c10:	070000f4 	movhi	fp,3
    1c14:	e7002884 	addi	fp,fp,162
    1c18:	9425883a 	add	r18,r18,r16
    1c1c:	8c400044 	addi	r17,r17,1
    1c20:	008001c4 	movi	r2,7
    1c24:	1f000015 	stw	fp,0(r3)
    1c28:	1c000115 	stw	r16,4(r3)
    1c2c:	dc800e15 	stw	r18,56(sp)
    1c30:	dc400d15 	stw	r17,52(sp)
    1c34:	147de216 	blt	r2,r17,13c0 <___vfprintf_internal_r+0xb90>
    1c38:	18c00204 	addi	r3,r3,8
    1c3c:	003c7a06 	br	e28 <___vfprintf_internal_r+0x5f8>
    1c40:	01000084 	movi	r4,2
    1c44:	d8000405 	stb	zero,16(sp)
    1c48:	003d8706 	br	1268 <___vfprintf_internal_r+0xa38>
    1c4c:	d9814c17 	ldw	r6,1328(sp)
    1c50:	30c4703a 	and	r2,r6,r3
    1c54:	1005003a 	cmpeq	r2,r2,zero
    1c58:	103cb926 	beq	r2,zero,f40 <___vfprintf_internal_r+0x710>
    1c5c:	d9014117 	ldw	r4,1284(sp)
    1c60:	94800044 	addi	r18,r18,1
    1c64:	8c400044 	addi	r17,r17,1
    1c68:	008001c4 	movi	r2,7
    1c6c:	a9000015 	stw	r4,0(r21)
    1c70:	a8c00115 	stw	r3,4(r21)
    1c74:	dc800e15 	stw	r18,56(sp)
    1c78:	dc400d15 	stw	r17,52(sp)
    1c7c:	147e6616 	blt	r2,r17,1618 <___vfprintf_internal_r+0xde8>
    1c80:	acc00204 	addi	r19,r21,8
    1c84:	003cd706 	br	fe4 <___vfprintf_internal_r+0x7b4>
    1c88:	070000f4 	movhi	fp,3
    1c8c:	e7002884 	addi	fp,fp,162
    1c90:	003c4f06 	br	dd0 <___vfprintf_internal_r+0x5a0>
    1c94:	dd000f04 	addi	r20,sp,60
    1c98:	dc801904 	addi	r18,sp,100
    1c9c:	8009883a 	mov	r4,r16
    1ca0:	880b883a 	mov	r5,r17
    1ca4:	01800284 	movi	r6,10
    1ca8:	000f883a 	mov	r7,zero
    1cac:	0007f280 	call	7f28 <__umoddi3>
    1cb0:	12000c04 	addi	r8,r2,48
    1cb4:	94bfffc4 	addi	r18,r18,-1
    1cb8:	8009883a 	mov	r4,r16
    1cbc:	880b883a 	mov	r5,r17
    1cc0:	01800284 	movi	r6,10
    1cc4:	000f883a 	mov	r7,zero
    1cc8:	92000005 	stb	r8,0(r18)
    1ccc:	000794c0 	call	794c <__udivdi3>
    1cd0:	1009883a 	mov	r4,r2
    1cd4:	1021883a 	mov	r16,r2
    1cd8:	18800068 	cmpgeui	r2,r3,1
    1cdc:	1823883a 	mov	r17,r3
    1ce0:	103fee1e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x146c>
    1ce4:	1800021e 	bne	r3,zero,1cf0 <___vfprintf_internal_r+0x14c0>
    1ce8:	00800244 	movi	r2,9
    1cec:	113feb36 	bltu	r2,r4,1c9c <___vfprintf_internal_r+0x146c>
    1cf0:	94bfffc4 	addi	r18,r18,-1
    1cf4:	dc814115 	stw	r18,1284(sp)
    1cf8:	003fc006 	br	1bfc <___vfprintf_internal_r+0x13cc>
    1cfc:	d9014c17 	ldw	r4,1328(sp)
    1d00:	2080004c 	andi	r2,r4,1
    1d04:	10009a1e 	bne	r2,zero,1f70 <___vfprintf_internal_r+0x1740>
    1d08:	d9401904 	addi	r5,sp,100
    1d0c:	dd000f04 	addi	r20,sp,60
    1d10:	d9414115 	stw	r5,1284(sp)
    1d14:	003d6106 	br	129c <___vfprintf_internal_r+0xa6c>
    1d18:	d9014f17 	ldw	r4,1340(sp)
    1d1c:	b00b883a 	mov	r5,r22
    1d20:	d9800c04 	addi	r6,sp,48
    1d24:	00007d80 	call	7d8 <__sprint_r>
    1d28:	103c791e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
    1d2c:	dc800e17 	ldw	r18,56(sp)
    1d30:	d8c01904 	addi	r3,sp,100
    1d34:	003cff06 	br	1134 <___vfprintf_internal_r+0x904>
    1d38:	d8c14c17 	ldw	r3,1328(sp)
    1d3c:	1880040c 	andi	r2,r3,16
    1d40:	1000711e 	bne	r2,zero,1f08 <___vfprintf_internal_r+0x16d8>
    1d44:	d9014c17 	ldw	r4,1328(sp)
    1d48:	2080100c 	andi	r2,r4,64
    1d4c:	10006e26 	beq	r2,zero,1f08 <___vfprintf_internal_r+0x16d8>
    1d50:	3c00000b 	ldhu	r16,0(r7)
    1d54:	0023883a 	mov	r17,zero
    1d58:	39c00104 	addi	r7,r7,4
    1d5c:	d9c14015 	stw	r7,1280(sp)
    1d60:	003f0006 	br	1964 <___vfprintf_internal_r+0x1134>
    1d64:	dc400d17 	ldw	r17,52(sp)
    1d68:	070000f4 	movhi	fp,3
    1d6c:	e7002884 	addi	fp,fp,162
    1d70:	9425883a 	add	r18,r18,r16
    1d74:	8c400044 	addi	r17,r17,1
    1d78:	008001c4 	movi	r2,7
    1d7c:	1f000015 	stw	fp,0(r3)
    1d80:	1c000115 	stw	r16,4(r3)
    1d84:	dc800e15 	stw	r18,56(sp)
    1d88:	dc400d15 	stw	r17,52(sp)
    1d8c:	147d7616 	blt	r2,r17,1368 <___vfprintf_internal_r+0xb38>
    1d90:	18c00204 	addi	r3,r3,8
    1d94:	003d7b06 	br	1384 <___vfprintf_internal_r+0xb54>
    1d98:	dc800e17 	ldw	r18,56(sp)
    1d9c:	dc400d17 	ldw	r17,52(sp)
    1da0:	070000f4 	movhi	fp,3
    1da4:	e7002c84 	addi	fp,fp,178
    1da8:	003bc006 	br	cac <___vfprintf_internal_r+0x47c>
    1dac:	d9014f17 	ldw	r4,1340(sp)
    1db0:	b00b883a 	mov	r5,r22
    1db4:	d9800c04 	addi	r6,sp,48
    1db8:	00007d80 	call	7d8 <__sprint_r>
    1dbc:	103c541e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
    1dc0:	dc800e17 	ldw	r18,56(sp)
    1dc4:	d8c01904 	addi	r3,sp,100
    1dc8:	003ce906 	br	1170 <___vfprintf_internal_r+0x940>
    1dcc:	3c000017 	ldw	r16,0(r7)
    1dd0:	0009883a 	mov	r4,zero
    1dd4:	39c00104 	addi	r7,r7,4
    1dd8:	0023883a 	mov	r17,zero
    1ddc:	d9c14015 	stw	r7,1280(sp)
    1de0:	d8000405 	stb	zero,16(sp)
    1de4:	003d2006 	br	1268 <___vfprintf_internal_r+0xa38>
    1de8:	38800017 	ldw	r2,0(r7)
    1dec:	39c00104 	addi	r7,r7,4
    1df0:	d9c14015 	stw	r7,1280(sp)
    1df4:	1023d7fa 	srai	r17,r2,31
    1df8:	1021883a 	mov	r16,r2
    1dfc:	003d1806 	br	1260 <___vfprintf_internal_r+0xa30>
    1e00:	3c000017 	ldw	r16,0(r7)
    1e04:	01000044 	movi	r4,1
    1e08:	39c00104 	addi	r7,r7,4
    1e0c:	0023883a 	mov	r17,zero
    1e10:	d9c14015 	stw	r7,1280(sp)
    1e14:	d8000405 	stb	zero,16(sp)
    1e18:	003d1306 	br	1268 <___vfprintf_internal_r+0xa38>
    1e1c:	008000f4 	movhi	r2,3
    1e20:	10802804 	addi	r2,r2,160
    1e24:	94800044 	addi	r18,r18,1
    1e28:	8c400044 	addi	r17,r17,1
    1e2c:	a8800015 	stw	r2,0(r21)
    1e30:	00c00044 	movi	r3,1
    1e34:	008001c4 	movi	r2,7
    1e38:	a8c00115 	stw	r3,4(r21)
    1e3c:	dc800e15 	stw	r18,56(sp)
    1e40:	dc400d15 	stw	r17,52(sp)
    1e44:	1440ca16 	blt	r2,r17,2170 <___vfprintf_internal_r+0x1940>
    1e48:	a8c00204 	addi	r3,r21,8
    1e4c:	2000061e 	bne	r4,zero,1e68 <___vfprintf_internal_r+0x1638>
    1e50:	d9414717 	ldw	r5,1308(sp)
    1e54:	2800041e 	bne	r5,zero,1e68 <___vfprintf_internal_r+0x1638>
    1e58:	d9814c17 	ldw	r6,1328(sp)
    1e5c:	3080004c 	andi	r2,r6,1
    1e60:	1005003a 	cmpeq	r2,r2,zero
    1e64:	103bf01e 	bne	r2,zero,e28 <___vfprintf_internal_r+0x5f8>
    1e68:	00800044 	movi	r2,1
    1e6c:	dc400d17 	ldw	r17,52(sp)
    1e70:	18800115 	stw	r2,4(r3)
    1e74:	d8814917 	ldw	r2,1316(sp)
    1e78:	94800044 	addi	r18,r18,1
    1e7c:	8c400044 	addi	r17,r17,1
    1e80:	18800015 	stw	r2,0(r3)
    1e84:	008001c4 	movi	r2,7
    1e88:	dc800e15 	stw	r18,56(sp)
    1e8c:	dc400d15 	stw	r17,52(sp)
    1e90:	1440ca16 	blt	r2,r17,21bc <___vfprintf_internal_r+0x198c>
    1e94:	18c00204 	addi	r3,r3,8
    1e98:	0121c83a 	sub	r16,zero,r4
    1e9c:	0400500e 	bge	zero,r16,1fe0 <___vfprintf_internal_r+0x17b0>
    1ea0:	00800404 	movi	r2,16
    1ea4:	1400800e 	bge	r2,r16,20a8 <___vfprintf_internal_r+0x1878>
    1ea8:	1027883a 	mov	r19,r2
    1eac:	070000f4 	movhi	fp,3
    1eb0:	e7002884 	addi	fp,fp,162
    1eb4:	050001c4 	movi	r20,7
    1eb8:	00000306 	br	1ec8 <___vfprintf_internal_r+0x1698>
    1ebc:	18c00204 	addi	r3,r3,8
    1ec0:	843ffc04 	addi	r16,r16,-16
    1ec4:	9c007a0e 	bge	r19,r16,20b0 <___vfprintf_internal_r+0x1880>
    1ec8:	94800404 	addi	r18,r18,16
    1ecc:	8c400044 	addi	r17,r17,1
    1ed0:	1f000015 	stw	fp,0(r3)
    1ed4:	1cc00115 	stw	r19,4(r3)
    1ed8:	dc800e15 	stw	r18,56(sp)
    1edc:	dc400d15 	stw	r17,52(sp)
    1ee0:	a47ff60e 	bge	r20,r17,1ebc <___vfprintf_internal_r+0x168c>
    1ee4:	d9014f17 	ldw	r4,1340(sp)
    1ee8:	b00b883a 	mov	r5,r22
    1eec:	d9800c04 	addi	r6,sp,48
    1ef0:	00007d80 	call	7d8 <__sprint_r>
    1ef4:	103c061e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
    1ef8:	dc800e17 	ldw	r18,56(sp)
    1efc:	dc400d17 	ldw	r17,52(sp)
    1f00:	d8c01904 	addi	r3,sp,100
    1f04:	003fee06 	br	1ec0 <___vfprintf_internal_r+0x1690>
    1f08:	3c000017 	ldw	r16,0(r7)
    1f0c:	0023883a 	mov	r17,zero
    1f10:	39c00104 	addi	r7,r7,4
    1f14:	d9c14015 	stw	r7,1280(sp)
    1f18:	003e9206 	br	1964 <___vfprintf_internal_r+0x1134>
    1f1c:	d9401904 	addi	r5,sp,100
    1f20:	dd000f04 	addi	r20,sp,60
    1f24:	d9414115 	stw	r5,1284(sp)
    1f28:	d9814417 	ldw	r6,1296(sp)
    1f2c:	880a973a 	slli	r5,r17,28
    1f30:	8004d13a 	srli	r2,r16,4
    1f34:	810003cc 	andi	r4,r16,15
    1f38:	3109883a 	add	r4,r6,r4
    1f3c:	2884b03a 	or	r2,r5,r2
    1f40:	21400003 	ldbu	r5,0(r4)
    1f44:	d9014117 	ldw	r4,1284(sp)
    1f48:	8806d13a 	srli	r3,r17,4
    1f4c:	1021883a 	mov	r16,r2
    1f50:	213fffc4 	addi	r4,r4,-1
    1f54:	d9014115 	stw	r4,1284(sp)
    1f58:	d9814117 	ldw	r6,1284(sp)
    1f5c:	10c8b03a 	or	r4,r2,r3
    1f60:	1823883a 	mov	r17,r3
    1f64:	31400005 	stb	r5,0(r6)
    1f68:	203fef1e 	bne	r4,zero,1f28 <___vfprintf_internal_r+0x16f8>
    1f6c:	003ccb06 	br	129c <___vfprintf_internal_r+0xa6c>
    1f70:	00800c04 	movi	r2,48
    1f74:	d98018c4 	addi	r6,sp,99
    1f78:	dd000f04 	addi	r20,sp,60
    1f7c:	d88018c5 	stb	r2,99(sp)
    1f80:	d9814115 	stw	r6,1284(sp)
    1f84:	003cc506 	br	129c <___vfprintf_internal_r+0xa6c>
    1f88:	dc400d17 	ldw	r17,52(sp)
    1f8c:	070000f4 	movhi	fp,3
    1f90:	e7002c84 	addi	fp,fp,178
    1f94:	003bc706 	br	eb4 <___vfprintf_internal_r+0x684>
    1f98:	d9414c17 	ldw	r5,1328(sp)
    1f9c:	2880040c 	andi	r2,r5,16
    1fa0:	10007c26 	beq	r2,zero,2194 <___vfprintf_internal_r+0x1964>
    1fa4:	38800017 	ldw	r2,0(r7)
    1fa8:	39c00104 	addi	r7,r7,4
    1fac:	d9c14015 	stw	r7,1280(sp)
    1fb0:	d9814b17 	ldw	r6,1324(sp)
    1fb4:	d9c14017 	ldw	r7,1280(sp)
    1fb8:	11800015 	stw	r6,0(r2)
    1fbc:	003a7806 	br	9a0 <___vfprintf_internal_r+0x170>
    1fc0:	d9014f17 	ldw	r4,1340(sp)
    1fc4:	b00b883a 	mov	r5,r22
    1fc8:	d9800c04 	addi	r6,sp,48
    1fcc:	00007d80 	call	7d8 <__sprint_r>
    1fd0:	103bcf1e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
    1fd4:	dc800e17 	ldw	r18,56(sp)
    1fd8:	dc400d17 	ldw	r17,52(sp)
    1fdc:	d8c01904 	addi	r3,sp,100
    1fe0:	d9014717 	ldw	r4,1308(sp)
    1fe4:	d9414117 	ldw	r5,1284(sp)
    1fe8:	8c400044 	addi	r17,r17,1
    1fec:	9125883a 	add	r18,r18,r4
    1ff0:	008001c4 	movi	r2,7
    1ff4:	19400015 	stw	r5,0(r3)
    1ff8:	19000115 	stw	r4,4(r3)
    1ffc:	dc800e15 	stw	r18,56(sp)
    2000:	dc400d15 	stw	r17,52(sp)
    2004:	147cee16 	blt	r2,r17,13c0 <___vfprintf_internal_r+0xb90>
    2008:	18c00204 	addi	r3,r3,8
    200c:	003b8606 	br	e28 <___vfprintf_internal_r+0x5f8>
    2010:	38c00017 	ldw	r3,0(r7)
    2014:	39000204 	addi	r4,r7,8
    2018:	d9014015 	stw	r4,1280(sp)
    201c:	d8c14215 	stw	r3,1288(sp)
    2020:	39c00117 	ldw	r7,4(r7)
    2024:	d9c14315 	stw	r7,1292(sp)
    2028:	003e2006 	br	18ac <___vfprintf_internal_r+0x107c>
    202c:	0005883a 	mov	r2,zero
    2030:	1409c83a 	sub	r4,r2,r16
    2034:	1105803a 	cmpltu	r2,r2,r4
    2038:	044bc83a 	sub	r5,zero,r17
    203c:	2885c83a 	sub	r2,r5,r2
    2040:	2021883a 	mov	r16,r4
    2044:	1023883a 	mov	r17,r2
    2048:	01000044 	movi	r4,1
    204c:	00800b44 	movi	r2,45
    2050:	d8800405 	stb	r2,16(sp)
    2054:	003c8406 	br	1268 <___vfprintf_internal_r+0xa38>
    2058:	d9014f17 	ldw	r4,1340(sp)
    205c:	b00b883a 	mov	r5,r22
    2060:	d9800c04 	addi	r6,sp,48
    2064:	00007d80 	call	7d8 <__sprint_r>
    2068:	103ba91e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
    206c:	dc800e17 	ldw	r18,56(sp)
    2070:	dc400d17 	ldw	r17,52(sp)
    2074:	d9000517 	ldw	r4,20(sp)
    2078:	d9401904 	addi	r5,sp,100
    207c:	003da706 	br	171c <___vfprintf_internal_r+0xeec>
    2080:	d9014f17 	ldw	r4,1340(sp)
    2084:	b00b883a 	mov	r5,r22
    2088:	d9800c04 	addi	r6,sp,48
    208c:	00007d80 	call	7d8 <__sprint_r>
    2090:	103b9f1e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
    2094:	dc800e17 	ldw	r18,56(sp)
    2098:	dc400d17 	ldw	r17,52(sp)
    209c:	d9000517 	ldw	r4,20(sp)
    20a0:	d8c01904 	addi	r3,sp,100
    20a4:	003d9106 	br	16ec <___vfprintf_internal_r+0xebc>
    20a8:	070000f4 	movhi	fp,3
    20ac:	e7002884 	addi	fp,fp,162
    20b0:	9425883a 	add	r18,r18,r16
    20b4:	8c400044 	addi	r17,r17,1
    20b8:	008001c4 	movi	r2,7
    20bc:	1f000015 	stw	fp,0(r3)
    20c0:	1c000115 	stw	r16,4(r3)
    20c4:	dc800e15 	stw	r18,56(sp)
    20c8:	dc400d15 	stw	r17,52(sp)
    20cc:	147fbc16 	blt	r2,r17,1fc0 <___vfprintf_internal_r+0x1790>
    20d0:	18c00204 	addi	r3,r3,8
    20d4:	003fc206 	br	1fe0 <___vfprintf_internal_r+0x17b0>
    20d8:	d9014f17 	ldw	r4,1340(sp)
    20dc:	b00b883a 	mov	r5,r22
    20e0:	d9800c04 	addi	r6,sp,48
    20e4:	00007d80 	call	7d8 <__sprint_r>
    20e8:	103b891e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
    20ec:	dc800e17 	ldw	r18,56(sp)
    20f0:	d9000517 	ldw	r4,20(sp)
    20f4:	d8c01904 	addi	r3,sp,100
    20f8:	003d0206 	br	1504 <___vfprintf_internal_r+0xcd4>
    20fc:	070000f4 	movhi	fp,3
    2100:	e7002884 	addi	fp,fp,162
    2104:	003be406 	br	1098 <___vfprintf_internal_r+0x868>
    2108:	008000f4 	movhi	r2,3
    210c:	10801704 	addi	r2,r2,92
    2110:	d8814115 	stw	r2,1284(sp)
    2114:	003df506 	br	18ec <___vfprintf_internal_r+0x10bc>
    2118:	d9014217 	ldw	r4,1288(sp)
    211c:	d9414317 	ldw	r5,1292(sp)
    2120:	00072100 	call	7210 <__isnand>
    2124:	10003926 	beq	r2,zero,220c <___vfprintf_internal_r+0x19dc>
    2128:	d9414d17 	ldw	r5,1332(sp)
    212c:	008011c4 	movi	r2,71
    2130:	1140ce16 	blt	r2,r5,246c <___vfprintf_internal_r+0x1c3c>
    2134:	018000f4 	movhi	r6,3
    2138:	31801804 	addi	r6,r6,96
    213c:	d9814115 	stw	r6,1284(sp)
    2140:	003dea06 	br	18ec <___vfprintf_internal_r+0x10bc>
    2144:	d9014c17 	ldw	r4,1328(sp)
    2148:	bdc00044 	addi	r23,r23,1
    214c:	b8c00007 	ldb	r3,0(r23)
    2150:	21000814 	ori	r4,r4,32
    2154:	d9014c15 	stw	r4,1328(sp)
    2158:	003a3406 	br	a2c <___vfprintf_internal_r+0x1fc>
    215c:	dcc14515 	stw	r19,1300(sp)
    2160:	98011016 	blt	r19,zero,25a4 <___vfprintf_internal_r+0x1d74>
    2164:	980f883a 	mov	r7,r19
    2168:	d8014615 	stw	zero,1304(sp)
    216c:	003c5206 	br	12b8 <___vfprintf_internal_r+0xa88>
    2170:	d9014f17 	ldw	r4,1340(sp)
    2174:	b00b883a 	mov	r5,r22
    2178:	d9800c04 	addi	r6,sp,48
    217c:	00007d80 	call	7d8 <__sprint_r>
    2180:	103b631e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
    2184:	dc800e17 	ldw	r18,56(sp)
    2188:	d9000517 	ldw	r4,20(sp)
    218c:	d8c01904 	addi	r3,sp,100
    2190:	003f2e06 	br	1e4c <___vfprintf_internal_r+0x161c>
    2194:	d8c14c17 	ldw	r3,1328(sp)
    2198:	1880100c 	andi	r2,r3,64
    219c:	1000a026 	beq	r2,zero,2420 <___vfprintf_internal_r+0x1bf0>
    21a0:	38800017 	ldw	r2,0(r7)
    21a4:	39c00104 	addi	r7,r7,4
    21a8:	d9c14015 	stw	r7,1280(sp)
    21ac:	d9014b17 	ldw	r4,1324(sp)
    21b0:	d9c14017 	ldw	r7,1280(sp)
    21b4:	1100000d 	sth	r4,0(r2)
    21b8:	0039f906 	br	9a0 <___vfprintf_internal_r+0x170>
    21bc:	d9014f17 	ldw	r4,1340(sp)
    21c0:	b00b883a 	mov	r5,r22
    21c4:	d9800c04 	addi	r6,sp,48
    21c8:	00007d80 	call	7d8 <__sprint_r>
    21cc:	103b501e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
    21d0:	dc800e17 	ldw	r18,56(sp)
    21d4:	dc400d17 	ldw	r17,52(sp)
    21d8:	d9000517 	ldw	r4,20(sp)
    21dc:	d8c01904 	addi	r3,sp,100
    21e0:	003f2d06 	br	1e98 <___vfprintf_internal_r+0x1668>
    21e4:	00800184 	movi	r2,6
    21e8:	14c09a36 	bltu	r2,r19,2454 <___vfprintf_internal_r+0x1c24>
    21ec:	dcc14515 	stw	r19,1300(sp)
    21f0:	9800010e 	bge	r19,zero,21f8 <___vfprintf_internal_r+0x19c8>
    21f4:	d8014515 	stw	zero,1300(sp)
    21f8:	008000f4 	movhi	r2,3
    21fc:	10801a04 	addi	r2,r2,104
    2200:	980f883a 	mov	r7,r19
    2204:	d8814115 	stw	r2,1284(sp)
    2208:	003a7806 	br	bec <___vfprintf_internal_r+0x3bc>
    220c:	00bfffc4 	movi	r2,-1
    2210:	9880e226 	beq	r19,r2,259c <___vfprintf_internal_r+0x1d6c>
    2214:	d9414d17 	ldw	r5,1332(sp)
    2218:	008019c4 	movi	r2,103
    221c:	2880dc26 	beq	r5,r2,2590 <___vfprintf_internal_r+0x1d60>
    2220:	008011c4 	movi	r2,71
    2224:	2880da26 	beq	r5,r2,2590 <___vfprintf_internal_r+0x1d60>
    2228:	d9414c17 	ldw	r5,1328(sp)
    222c:	d9014317 	ldw	r4,1292(sp)
    2230:	d9814217 	ldw	r6,1288(sp)
    2234:	29404014 	ori	r5,r5,256
    2238:	d9414c15 	stw	r5,1328(sp)
    223c:	2000cc16 	blt	r4,zero,2570 <___vfprintf_internal_r+0x1d40>
    2240:	3021883a 	mov	r16,r6
    2244:	2023883a 	mov	r17,r4
    2248:	0039883a 	mov	fp,zero
    224c:	d9414d17 	ldw	r5,1332(sp)
    2250:	00801984 	movi	r2,102
    2254:	2880b726 	beq	r5,r2,2534 <___vfprintf_internal_r+0x1d04>
    2258:	00801184 	movi	r2,70
    225c:	2880b526 	beq	r5,r2,2534 <___vfprintf_internal_r+0x1d04>
    2260:	00801944 	movi	r2,101
    2264:	2880c826 	beq	r5,r2,2588 <___vfprintf_internal_r+0x1d58>
    2268:	00801144 	movi	r2,69
    226c:	2880c626 	beq	r5,r2,2588 <___vfprintf_internal_r+0x1d58>
    2270:	9829883a 	mov	r20,r19
    2274:	d9014f17 	ldw	r4,1340(sp)
    2278:	d8800504 	addi	r2,sp,20
    227c:	880d883a 	mov	r6,r17
    2280:	d8800115 	stw	r2,4(sp)
    2284:	d8c00604 	addi	r3,sp,24
    2288:	d8800704 	addi	r2,sp,28
    228c:	800b883a 	mov	r5,r16
    2290:	01c00084 	movi	r7,2
    2294:	d8c00215 	stw	r3,8(sp)
    2298:	d8800315 	stw	r2,12(sp)
    229c:	dd000015 	stw	r20,0(sp)
    22a0:	0002a540 	call	2a54 <_dtoa_r>
    22a4:	d9814d17 	ldw	r6,1332(sp)
    22a8:	d8814115 	stw	r2,1284(sp)
    22ac:	008019c4 	movi	r2,103
    22b0:	30809526 	beq	r6,r2,2508 <___vfprintf_internal_r+0x1cd8>
    22b4:	d8c14d17 	ldw	r3,1332(sp)
    22b8:	008011c4 	movi	r2,71
    22bc:	18809226 	beq	r3,r2,2508 <___vfprintf_internal_r+0x1cd8>
    22c0:	d9414117 	ldw	r5,1284(sp)
    22c4:	d9814d17 	ldw	r6,1332(sp)
    22c8:	00801984 	movi	r2,102
    22cc:	2d25883a 	add	r18,r5,r20
    22d0:	30808626 	beq	r6,r2,24ec <___vfprintf_internal_r+0x1cbc>
    22d4:	00801184 	movi	r2,70
    22d8:	30808426 	beq	r6,r2,24ec <___vfprintf_internal_r+0x1cbc>
    22dc:	000d883a 	mov	r6,zero
    22e0:	000f883a 	mov	r7,zero
    22e4:	880b883a 	mov	r5,r17
    22e8:	8009883a 	mov	r4,r16
    22ec:	0008ff80 	call	8ff8 <__eqdf2>
    22f0:	1000751e 	bne	r2,zero,24c8 <___vfprintf_internal_r+0x1c98>
    22f4:	9005883a 	mov	r2,r18
    22f8:	dc800715 	stw	r18,28(sp)
    22fc:	d9014117 	ldw	r4,1284(sp)
    2300:	d9414d17 	ldw	r5,1332(sp)
    2304:	00c019c4 	movi	r3,103
    2308:	1125c83a 	sub	r18,r2,r4
    230c:	28c06826 	beq	r5,r3,24b0 <___vfprintf_internal_r+0x1c80>
    2310:	008011c4 	movi	r2,71
    2314:	28806626 	beq	r5,r2,24b0 <___vfprintf_internal_r+0x1c80>
    2318:	d9000517 	ldw	r4,20(sp)
    231c:	d8c14d17 	ldw	r3,1332(sp)
    2320:	00801944 	movi	r2,101
    2324:	10c05516 	blt	r2,r3,247c <___vfprintf_internal_r+0x1c4c>
    2328:	213fffc4 	addi	r4,r4,-1
    232c:	d9000515 	stw	r4,20(sp)
    2330:	d8c00805 	stb	r3,32(sp)
    2334:	2021883a 	mov	r16,r4
    2338:	2000c116 	blt	r4,zero,2640 <___vfprintf_internal_r+0x1e10>
    233c:	00800ac4 	movi	r2,43
    2340:	d8800845 	stb	r2,33(sp)
    2344:	00800244 	movi	r2,9
    2348:	1400af0e 	bge	r2,r16,2608 <___vfprintf_internal_r+0x1dd8>
    234c:	1027883a 	mov	r19,r2
    2350:	dc400b84 	addi	r17,sp,46
    2354:	8009883a 	mov	r4,r16
    2358:	01400284 	movi	r5,10
    235c:	00096e00 	call	96e0 <__modsi3>
    2360:	10800c04 	addi	r2,r2,48
    2364:	8c7fffc4 	addi	r17,r17,-1
    2368:	8009883a 	mov	r4,r16
    236c:	01400284 	movi	r5,10
    2370:	88800005 	stb	r2,0(r17)
    2374:	00096800 	call	9680 <__divsi3>
    2378:	1021883a 	mov	r16,r2
    237c:	98bff516 	blt	r19,r2,2354 <___vfprintf_internal_r+0x1b24>
    2380:	10c00c04 	addi	r3,r2,48
    2384:	d88009c4 	addi	r2,sp,39
    2388:	108001c4 	addi	r2,r2,7
    238c:	897fffc4 	addi	r5,r17,-1
    2390:	88ffffc5 	stb	r3,-1(r17)
    2394:	2880a72e 	bgeu	r5,r2,2634 <___vfprintf_internal_r+0x1e04>
    2398:	1009883a 	mov	r4,r2
    239c:	d9800804 	addi	r6,sp,32
    23a0:	d8c00884 	addi	r3,sp,34
    23a4:	28800003 	ldbu	r2,0(r5)
    23a8:	29400044 	addi	r5,r5,1
    23ac:	18800005 	stb	r2,0(r3)
    23b0:	18c00044 	addi	r3,r3,1
    23b4:	293ffb36 	bltu	r5,r4,23a4 <___vfprintf_internal_r+0x1b74>
    23b8:	1987c83a 	sub	r3,r3,r6
    23bc:	00800044 	movi	r2,1
    23c0:	d8c14815 	stw	r3,1312(sp)
    23c4:	90cf883a 	add	r7,r18,r3
    23c8:	1480960e 	bge	r2,r18,2624 <___vfprintf_internal_r+0x1df4>
    23cc:	39c00044 	addi	r7,r7,1
    23d0:	d9c14515 	stw	r7,1300(sp)
    23d4:	38003416 	blt	r7,zero,24a8 <___vfprintf_internal_r+0x1c78>
    23d8:	e0803fcc 	andi	r2,fp,255
    23dc:	1080201c 	xori	r2,r2,128
    23e0:	10bfe004 	addi	r2,r2,-128
    23e4:	10004e26 	beq	r2,zero,2520 <___vfprintf_internal_r+0x1cf0>
    23e8:	00800b44 	movi	r2,45
    23ec:	dc814715 	stw	r18,1308(sp)
    23f0:	d8014615 	stw	zero,1304(sp)
    23f4:	d8800405 	stb	r2,16(sp)
    23f8:	003bb106 	br	12c0 <___vfprintf_internal_r+0xa90>
    23fc:	00800b44 	movi	r2,45
    2400:	d8800405 	stb	r2,16(sp)
    2404:	003d3306 	br	18d4 <___vfprintf_internal_r+0x10a4>
    2408:	d9014f17 	ldw	r4,1340(sp)
    240c:	b00b883a 	mov	r5,r22
    2410:	d9800c04 	addi	r6,sp,48
    2414:	00007d80 	call	7d8 <__sprint_r>
    2418:	103abd1e 	bne	r2,zero,f10 <___vfprintf_internal_r+0x6e0>
    241c:	003abb06 	br	f0c <___vfprintf_internal_r+0x6dc>
    2420:	38800017 	ldw	r2,0(r7)
    2424:	39c00104 	addi	r7,r7,4
    2428:	d9c14015 	stw	r7,1280(sp)
    242c:	d9414b17 	ldw	r5,1324(sp)
    2430:	d9c14017 	ldw	r7,1280(sp)
    2434:	11400015 	stw	r5,0(r2)
    2438:	00395906 	br	9a0 <___vfprintf_internal_r+0x170>
    243c:	980f883a 	mov	r7,r19
    2440:	dcc14515 	stw	r19,1300(sp)
    2444:	d8014615 	stw	zero,1304(sp)
    2448:	003b9b06 	br	12b8 <___vfprintf_internal_r+0xa88>
    244c:	0027883a 	mov	r19,zero
    2450:	00397806 	br	a34 <___vfprintf_internal_r+0x204>
    2454:	00c000f4 	movhi	r3,3
    2458:	18c01a04 	addi	r3,r3,104
    245c:	100f883a 	mov	r7,r2
    2460:	d8814515 	stw	r2,1300(sp)
    2464:	d8c14115 	stw	r3,1284(sp)
    2468:	0039e006 	br	bec <___vfprintf_internal_r+0x3bc>
    246c:	008000f4 	movhi	r2,3
    2470:	10801904 	addi	r2,r2,100
    2474:	d8814115 	stw	r2,1284(sp)
    2478:	003d1c06 	br	18ec <___vfprintf_internal_r+0x10bc>
    247c:	d9414d17 	ldw	r5,1332(sp)
    2480:	00801984 	movi	r2,102
    2484:	28804926 	beq	r5,r2,25ac <___vfprintf_internal_r+0x1d7c>
    2488:	200f883a 	mov	r7,r4
    248c:	24805716 	blt	r4,r18,25ec <___vfprintf_internal_r+0x1dbc>
    2490:	d9414c17 	ldw	r5,1328(sp)
    2494:	2880004c 	andi	r2,r5,1
    2498:	10000126 	beq	r2,zero,24a0 <___vfprintf_internal_r+0x1c70>
    249c:	21c00044 	addi	r7,r4,1
    24a0:	d9c14515 	stw	r7,1300(sp)
    24a4:	383fcc0e 	bge	r7,zero,23d8 <___vfprintf_internal_r+0x1ba8>
    24a8:	d8014515 	stw	zero,1300(sp)
    24ac:	003fca06 	br	23d8 <___vfprintf_internal_r+0x1ba8>
    24b0:	d9000517 	ldw	r4,20(sp)
    24b4:	00bfff04 	movi	r2,-4
    24b8:	1100480e 	bge	r2,r4,25dc <___vfprintf_internal_r+0x1dac>
    24bc:	99004716 	blt	r19,r4,25dc <___vfprintf_internal_r+0x1dac>
    24c0:	d8c14d15 	stw	r3,1332(sp)
    24c4:	003ff006 	br	2488 <___vfprintf_internal_r+0x1c58>
    24c8:	d8800717 	ldw	r2,28(sp)
    24cc:	14bf8b2e 	bgeu	r2,r18,22fc <___vfprintf_internal_r+0x1acc>
    24d0:	9007883a 	mov	r3,r18
    24d4:	01000c04 	movi	r4,48
    24d8:	11000005 	stb	r4,0(r2)
    24dc:	10800044 	addi	r2,r2,1
    24e0:	d8800715 	stw	r2,28(sp)
    24e4:	18bffc1e 	bne	r3,r2,24d8 <___vfprintf_internal_r+0x1ca8>
    24e8:	003f8406 	br	22fc <___vfprintf_internal_r+0x1acc>
    24ec:	d8814117 	ldw	r2,1284(sp)
    24f0:	10c00007 	ldb	r3,0(r2)
    24f4:	00800c04 	movi	r2,48
    24f8:	18805b26 	beq	r3,r2,2668 <___vfprintf_internal_r+0x1e38>
    24fc:	d9000517 	ldw	r4,20(sp)
    2500:	9125883a 	add	r18,r18,r4
    2504:	003f7506 	br	22dc <___vfprintf_internal_r+0x1aac>
    2508:	d9014c17 	ldw	r4,1328(sp)
    250c:	2080004c 	andi	r2,r4,1
    2510:	1005003a 	cmpeq	r2,r2,zero
    2514:	103f6a26 	beq	r2,zero,22c0 <___vfprintf_internal_r+0x1a90>
    2518:	d8800717 	ldw	r2,28(sp)
    251c:	003f7706 	br	22fc <___vfprintf_internal_r+0x1acc>
    2520:	d9c14515 	stw	r7,1300(sp)
    2524:	38004d16 	blt	r7,zero,265c <___vfprintf_internal_r+0x1e2c>
    2528:	dc814715 	stw	r18,1308(sp)
    252c:	d8014615 	stw	zero,1304(sp)
    2530:	003b6106 	br	12b8 <___vfprintf_internal_r+0xa88>
    2534:	d9014f17 	ldw	r4,1340(sp)
    2538:	d8800504 	addi	r2,sp,20
    253c:	d8800115 	stw	r2,4(sp)
    2540:	d8c00604 	addi	r3,sp,24
    2544:	d8800704 	addi	r2,sp,28
    2548:	800b883a 	mov	r5,r16
    254c:	880d883a 	mov	r6,r17
    2550:	01c000c4 	movi	r7,3
    2554:	d8c00215 	stw	r3,8(sp)
    2558:	d8800315 	stw	r2,12(sp)
    255c:	dcc00015 	stw	r19,0(sp)
    2560:	9829883a 	mov	r20,r19
    2564:	0002a540 	call	2a54 <_dtoa_r>
    2568:	d8814115 	stw	r2,1284(sp)
    256c:	003f5106 	br	22b4 <___vfprintf_internal_r+0x1a84>
    2570:	d8c14217 	ldw	r3,1288(sp)
    2574:	d9014317 	ldw	r4,1292(sp)
    2578:	07000b44 	movi	fp,45
    257c:	1821883a 	mov	r16,r3
    2580:	2460003c 	xorhi	r17,r4,32768
    2584:	003f3106 	br	224c <___vfprintf_internal_r+0x1a1c>
    2588:	9d000044 	addi	r20,r19,1
    258c:	003f3906 	br	2274 <___vfprintf_internal_r+0x1a44>
    2590:	983f251e 	bne	r19,zero,2228 <___vfprintf_internal_r+0x19f8>
    2594:	04c00044 	movi	r19,1
    2598:	003f2306 	br	2228 <___vfprintf_internal_r+0x19f8>
    259c:	04c00184 	movi	r19,6
    25a0:	003f2106 	br	2228 <___vfprintf_internal_r+0x19f8>
    25a4:	d8014515 	stw	zero,1300(sp)
    25a8:	003eee06 	br	2164 <___vfprintf_internal_r+0x1934>
    25ac:	200f883a 	mov	r7,r4
    25b0:	0100370e 	bge	zero,r4,2690 <___vfprintf_internal_r+0x1e60>
    25b4:	9800031e 	bne	r19,zero,25c4 <___vfprintf_internal_r+0x1d94>
    25b8:	d9814c17 	ldw	r6,1328(sp)
    25bc:	3080004c 	andi	r2,r6,1
    25c0:	103fb726 	beq	r2,zero,24a0 <___vfprintf_internal_r+0x1c70>
    25c4:	20800044 	addi	r2,r4,1
    25c8:	98a7883a 	add	r19,r19,r2
    25cc:	dcc14515 	stw	r19,1300(sp)
    25d0:	980f883a 	mov	r7,r19
    25d4:	983f800e 	bge	r19,zero,23d8 <___vfprintf_internal_r+0x1ba8>
    25d8:	003fb306 	br	24a8 <___vfprintf_internal_r+0x1c78>
    25dc:	d9814d17 	ldw	r6,1332(sp)
    25e0:	31bfff84 	addi	r6,r6,-2
    25e4:	d9814d15 	stw	r6,1332(sp)
    25e8:	003f4c06 	br	231c <___vfprintf_internal_r+0x1aec>
    25ec:	0100180e 	bge	zero,r4,2650 <___vfprintf_internal_r+0x1e20>
    25f0:	00800044 	movi	r2,1
    25f4:	1485883a 	add	r2,r2,r18
    25f8:	d8814515 	stw	r2,1300(sp)
    25fc:	100f883a 	mov	r7,r2
    2600:	103f750e 	bge	r2,zero,23d8 <___vfprintf_internal_r+0x1ba8>
    2604:	003fa806 	br	24a8 <___vfprintf_internal_r+0x1c78>
    2608:	80c00c04 	addi	r3,r16,48
    260c:	00800c04 	movi	r2,48
    2610:	d8c008c5 	stb	r3,35(sp)
    2614:	d9800804 	addi	r6,sp,32
    2618:	d8c00904 	addi	r3,sp,36
    261c:	d8800885 	stb	r2,34(sp)
    2620:	003f6506 	br	23b8 <___vfprintf_internal_r+0x1b88>
    2624:	d9014c17 	ldw	r4,1328(sp)
    2628:	2084703a 	and	r2,r4,r2
    262c:	103f9c26 	beq	r2,zero,24a0 <___vfprintf_internal_r+0x1c70>
    2630:	003f6606 	br	23cc <___vfprintf_internal_r+0x1b9c>
    2634:	d9800804 	addi	r6,sp,32
    2638:	d8c00884 	addi	r3,sp,34
    263c:	003f5e06 	br	23b8 <___vfprintf_internal_r+0x1b88>
    2640:	00800b44 	movi	r2,45
    2644:	0121c83a 	sub	r16,zero,r4
    2648:	d8800845 	stb	r2,33(sp)
    264c:	003f3d06 	br	2344 <___vfprintf_internal_r+0x1b14>
    2650:	00800084 	movi	r2,2
    2654:	1105c83a 	sub	r2,r2,r4
    2658:	003fe606 	br	25f4 <___vfprintf_internal_r+0x1dc4>
    265c:	d8014515 	stw	zero,1300(sp)
    2660:	dc814715 	stw	r18,1308(sp)
    2664:	003fb106 	br	252c <___vfprintf_internal_r+0x1cfc>
    2668:	000d883a 	mov	r6,zero
    266c:	000f883a 	mov	r7,zero
    2670:	8009883a 	mov	r4,r16
    2674:	880b883a 	mov	r5,r17
    2678:	00090800 	call	9080 <__nedf2>
    267c:	103f9f26 	beq	r2,zero,24fc <___vfprintf_internal_r+0x1ccc>
    2680:	00800044 	movi	r2,1
    2684:	1509c83a 	sub	r4,r2,r20
    2688:	d9000515 	stw	r4,20(sp)
    268c:	003f9b06 	br	24fc <___vfprintf_internal_r+0x1ccc>
    2690:	98000d1e 	bne	r19,zero,26c8 <___vfprintf_internal_r+0x1e98>
    2694:	d8c14c17 	ldw	r3,1328(sp)
    2698:	1880004c 	andi	r2,r3,1
    269c:	10000a1e 	bne	r2,zero,26c8 <___vfprintf_internal_r+0x1e98>
    26a0:	01000044 	movi	r4,1
    26a4:	200f883a 	mov	r7,r4
    26a8:	d9014515 	stw	r4,1300(sp)
    26ac:	003f4a06 	br	23d8 <___vfprintf_internal_r+0x1ba8>
    26b0:	3cc00017 	ldw	r19,0(r7)
    26b4:	39c00104 	addi	r7,r7,4
    26b8:	983d0e0e 	bge	r19,zero,1af4 <___vfprintf_internal_r+0x12c4>
    26bc:	b8c00007 	ldb	r3,0(r23)
    26c0:	04ffffc4 	movi	r19,-1
    26c4:	0038d906 	br	a2c <___vfprintf_internal_r+0x1fc>
    26c8:	9cc00084 	addi	r19,r19,2
    26cc:	dcc14515 	stw	r19,1300(sp)
    26d0:	980f883a 	mov	r7,r19
    26d4:	983f400e 	bge	r19,zero,23d8 <___vfprintf_internal_r+0x1ba8>
    26d8:	003f7306 	br	24a8 <___vfprintf_internal_r+0x1c78>

000026dc <__vfprintf_internal>:
    26dc:	008000f4 	movhi	r2,3
    26e0:	10876804 	addi	r2,r2,7584
    26e4:	2013883a 	mov	r9,r4
    26e8:	11000017 	ldw	r4,0(r2)
    26ec:	2805883a 	mov	r2,r5
    26f0:	300f883a 	mov	r7,r6
    26f4:	480b883a 	mov	r5,r9
    26f8:	100d883a 	mov	r6,r2
    26fc:	00008301 	jmpi	830 <___vfprintf_internal_r>

00002700 <__swsetup_r>:
    2700:	008000f4 	movhi	r2,3
    2704:	10876804 	addi	r2,r2,7584
    2708:	10c00017 	ldw	r3,0(r2)
    270c:	defffd04 	addi	sp,sp,-12
    2710:	dc400115 	stw	r17,4(sp)
    2714:	dc000015 	stw	r16,0(sp)
    2718:	dfc00215 	stw	ra,8(sp)
    271c:	2023883a 	mov	r17,r4
    2720:	2821883a 	mov	r16,r5
    2724:	18000226 	beq	r3,zero,2730 <__swsetup_r+0x30>
    2728:	18800e17 	ldw	r2,56(r3)
    272c:	10001f26 	beq	r2,zero,27ac <__swsetup_r+0xac>
    2730:	8100030b 	ldhu	r4,12(r16)
    2734:	2080020c 	andi	r2,r4,8
    2738:	10002826 	beq	r2,zero,27dc <__swsetup_r+0xdc>
    273c:	81400417 	ldw	r5,16(r16)
    2740:	28001d26 	beq	r5,zero,27b8 <__swsetup_r+0xb8>
    2744:	2080004c 	andi	r2,r4,1
    2748:	1005003a 	cmpeq	r2,r2,zero
    274c:	10000b26 	beq	r2,zero,277c <__swsetup_r+0x7c>
    2750:	2080008c 	andi	r2,r4,2
    2754:	10001226 	beq	r2,zero,27a0 <__swsetup_r+0xa0>
    2758:	0005883a 	mov	r2,zero
    275c:	80800215 	stw	r2,8(r16)
    2760:	28000b26 	beq	r5,zero,2790 <__swsetup_r+0x90>
    2764:	0005883a 	mov	r2,zero
    2768:	dfc00217 	ldw	ra,8(sp)
    276c:	dc400117 	ldw	r17,4(sp)
    2770:	dc000017 	ldw	r16,0(sp)
    2774:	dec00304 	addi	sp,sp,12
    2778:	f800283a 	ret
    277c:	80800517 	ldw	r2,20(r16)
    2780:	80000215 	stw	zero,8(r16)
    2784:	0085c83a 	sub	r2,zero,r2
    2788:	80800615 	stw	r2,24(r16)
    278c:	283ff51e 	bne	r5,zero,2764 <__swsetup_r+0x64>
    2790:	2080200c 	andi	r2,r4,128
    2794:	103ff326 	beq	r2,zero,2764 <__swsetup_r+0x64>
    2798:	00bfffc4 	movi	r2,-1
    279c:	003ff206 	br	2768 <__swsetup_r+0x68>
    27a0:	80800517 	ldw	r2,20(r16)
    27a4:	80800215 	stw	r2,8(r16)
    27a8:	003fed06 	br	2760 <__swsetup_r+0x60>
    27ac:	1809883a 	mov	r4,r3
    27b0:	00042a00 	call	42a0 <__sinit>
    27b4:	003fde06 	br	2730 <__swsetup_r+0x30>
    27b8:	20c0a00c 	andi	r3,r4,640
    27bc:	00808004 	movi	r2,512
    27c0:	18bfe026 	beq	r3,r2,2744 <__swsetup_r+0x44>
    27c4:	8809883a 	mov	r4,r17
    27c8:	800b883a 	mov	r5,r16
    27cc:	00050180 	call	5018 <__smakebuf_r>
    27d0:	8100030b 	ldhu	r4,12(r16)
    27d4:	81400417 	ldw	r5,16(r16)
    27d8:	003fda06 	br	2744 <__swsetup_r+0x44>
    27dc:	2080040c 	andi	r2,r4,16
    27e0:	103fed26 	beq	r2,zero,2798 <__swsetup_r+0x98>
    27e4:	2080010c 	andi	r2,r4,4
    27e8:	10001226 	beq	r2,zero,2834 <__swsetup_r+0x134>
    27ec:	81400c17 	ldw	r5,48(r16)
    27f0:	28000526 	beq	r5,zero,2808 <__swsetup_r+0x108>
    27f4:	80801004 	addi	r2,r16,64
    27f8:	28800226 	beq	r5,r2,2804 <__swsetup_r+0x104>
    27fc:	8809883a 	mov	r4,r17
    2800:	00046240 	call	4624 <_free_r>
    2804:	80000c15 	stw	zero,48(r16)
    2808:	8080030b 	ldhu	r2,12(r16)
    280c:	81400417 	ldw	r5,16(r16)
    2810:	80000115 	stw	zero,4(r16)
    2814:	10bff6cc 	andi	r2,r2,65499
    2818:	8080030d 	sth	r2,12(r16)
    281c:	81400015 	stw	r5,0(r16)
    2820:	8080030b 	ldhu	r2,12(r16)
    2824:	10800214 	ori	r2,r2,8
    2828:	113fffcc 	andi	r4,r2,65535
    282c:	8080030d 	sth	r2,12(r16)
    2830:	003fc306 	br	2740 <__swsetup_r+0x40>
    2834:	81400417 	ldw	r5,16(r16)
    2838:	003ff906 	br	2820 <__swsetup_r+0x120>

0000283c <quorem>:
    283c:	28c00417 	ldw	r3,16(r5)
    2840:	20800417 	ldw	r2,16(r4)
    2844:	defff604 	addi	sp,sp,-40
    2848:	ddc00715 	stw	r23,28(sp)
    284c:	dd400515 	stw	r21,20(sp)
    2850:	dfc00915 	stw	ra,36(sp)
    2854:	df000815 	stw	fp,32(sp)
    2858:	dd800615 	stw	r22,24(sp)
    285c:	dd000415 	stw	r20,16(sp)
    2860:	dcc00315 	stw	r19,12(sp)
    2864:	dc800215 	stw	r18,8(sp)
    2868:	dc400115 	stw	r17,4(sp)
    286c:	dc000015 	stw	r16,0(sp)
    2870:	202f883a 	mov	r23,r4
    2874:	282b883a 	mov	r21,r5
    2878:	10c07416 	blt	r2,r3,2a4c <quorem+0x210>
    287c:	1c7fffc4 	addi	r17,r3,-1
    2880:	8c45883a 	add	r2,r17,r17
    2884:	1085883a 	add	r2,r2,r2
    2888:	2c000504 	addi	r16,r5,20
    288c:	24c00504 	addi	r19,r4,20
    2890:	14ed883a 	add	r22,r2,r19
    2894:	80a5883a 	add	r18,r16,r2
    2898:	b7000017 	ldw	fp,0(r22)
    289c:	91400017 	ldw	r5,0(r18)
    28a0:	e009883a 	mov	r4,fp
    28a4:	29400044 	addi	r5,r5,1
    28a8:	00097400 	call	9740 <__udivsi3>
    28ac:	1029883a 	mov	r20,r2
    28b0:	10003c1e 	bne	r2,zero,29a4 <quorem+0x168>
    28b4:	a80b883a 	mov	r5,r21
    28b8:	b809883a 	mov	r4,r23
    28bc:	0005d440 	call	5d44 <__mcmp>
    28c0:	10002b16 	blt	r2,zero,2970 <quorem+0x134>
    28c4:	a5000044 	addi	r20,r20,1
    28c8:	980f883a 	mov	r7,r19
    28cc:	0011883a 	mov	r8,zero
    28d0:	0009883a 	mov	r4,zero
    28d4:	81400017 	ldw	r5,0(r16)
    28d8:	38c00017 	ldw	r3,0(r7)
    28dc:	84000104 	addi	r16,r16,4
    28e0:	28bfffcc 	andi	r2,r5,65535
    28e4:	2085883a 	add	r2,r4,r2
    28e8:	11bfffcc 	andi	r6,r2,65535
    28ec:	193fffcc 	andi	r4,r3,65535
    28f0:	1004d43a 	srli	r2,r2,16
    28f4:	280ad43a 	srli	r5,r5,16
    28f8:	2189c83a 	sub	r4,r4,r6
    28fc:	2209883a 	add	r4,r4,r8
    2900:	1806d43a 	srli	r3,r3,16
    2904:	288b883a 	add	r5,r5,r2
    2908:	200dd43a 	srai	r6,r4,16
    290c:	28bfffcc 	andi	r2,r5,65535
    2910:	1887c83a 	sub	r3,r3,r2
    2914:	1987883a 	add	r3,r3,r6
    2918:	3900000d 	sth	r4,0(r7)
    291c:	38c0008d 	sth	r3,2(r7)
    2920:	2808d43a 	srli	r4,r5,16
    2924:	39c00104 	addi	r7,r7,4
    2928:	1811d43a 	srai	r8,r3,16
    292c:	943fe92e 	bgeu	r18,r16,28d4 <quorem+0x98>
    2930:	8c45883a 	add	r2,r17,r17
    2934:	1085883a 	add	r2,r2,r2
    2938:	9885883a 	add	r2,r19,r2
    293c:	10c00017 	ldw	r3,0(r2)
    2940:	18000b1e 	bne	r3,zero,2970 <quorem+0x134>
    2944:	113fff04 	addi	r4,r2,-4
    2948:	9900082e 	bgeu	r19,r4,296c <quorem+0x130>
    294c:	10bfff17 	ldw	r2,-4(r2)
    2950:	10000326 	beq	r2,zero,2960 <quorem+0x124>
    2954:	00000506 	br	296c <quorem+0x130>
    2958:	20800017 	ldw	r2,0(r4)
    295c:	1000031e 	bne	r2,zero,296c <quorem+0x130>
    2960:	213fff04 	addi	r4,r4,-4
    2964:	8c7fffc4 	addi	r17,r17,-1
    2968:	993ffb36 	bltu	r19,r4,2958 <quorem+0x11c>
    296c:	bc400415 	stw	r17,16(r23)
    2970:	a005883a 	mov	r2,r20
    2974:	dfc00917 	ldw	ra,36(sp)
    2978:	df000817 	ldw	fp,32(sp)
    297c:	ddc00717 	ldw	r23,28(sp)
    2980:	dd800617 	ldw	r22,24(sp)
    2984:	dd400517 	ldw	r21,20(sp)
    2988:	dd000417 	ldw	r20,16(sp)
    298c:	dcc00317 	ldw	r19,12(sp)
    2990:	dc800217 	ldw	r18,8(sp)
    2994:	dc400117 	ldw	r17,4(sp)
    2998:	dc000017 	ldw	r16,0(sp)
    299c:	dec00a04 	addi	sp,sp,40
    29a0:	f800283a 	ret
    29a4:	980f883a 	mov	r7,r19
    29a8:	8011883a 	mov	r8,r16
    29ac:	0013883a 	mov	r9,zero
    29b0:	000d883a 	mov	r6,zero
    29b4:	40c00017 	ldw	r3,0(r8)
    29b8:	39000017 	ldw	r4,0(r7)
    29bc:	42000104 	addi	r8,r8,4
    29c0:	18bfffcc 	andi	r2,r3,65535
    29c4:	a085383a 	mul	r2,r20,r2
    29c8:	1806d43a 	srli	r3,r3,16
    29cc:	217fffcc 	andi	r5,r4,65535
    29d0:	3085883a 	add	r2,r6,r2
    29d4:	11bfffcc 	andi	r6,r2,65535
    29d8:	a0c7383a 	mul	r3,r20,r3
    29dc:	1004d43a 	srli	r2,r2,16
    29e0:	298bc83a 	sub	r5,r5,r6
    29e4:	2a4b883a 	add	r5,r5,r9
    29e8:	2008d43a 	srli	r4,r4,16
    29ec:	1887883a 	add	r3,r3,r2
    29f0:	280dd43a 	srai	r6,r5,16
    29f4:	18bfffcc 	andi	r2,r3,65535
    29f8:	2089c83a 	sub	r4,r4,r2
    29fc:	2189883a 	add	r4,r4,r6
    2a00:	3900008d 	sth	r4,2(r7)
    2a04:	3940000d 	sth	r5,0(r7)
    2a08:	180cd43a 	srli	r6,r3,16
    2a0c:	39c00104 	addi	r7,r7,4
    2a10:	2013d43a 	srai	r9,r4,16
    2a14:	923fe72e 	bgeu	r18,r8,29b4 <quorem+0x178>
    2a18:	e03fa61e 	bne	fp,zero,28b4 <quorem+0x78>
    2a1c:	b0ffff04 	addi	r3,r22,-4
    2a20:	98c0082e 	bgeu	r19,r3,2a44 <quorem+0x208>
    2a24:	b0bfff17 	ldw	r2,-4(r22)
    2a28:	10000326 	beq	r2,zero,2a38 <quorem+0x1fc>
    2a2c:	00000506 	br	2a44 <quorem+0x208>
    2a30:	18800017 	ldw	r2,0(r3)
    2a34:	1000031e 	bne	r2,zero,2a44 <quorem+0x208>
    2a38:	18ffff04 	addi	r3,r3,-4
    2a3c:	8c7fffc4 	addi	r17,r17,-1
    2a40:	98fffb36 	bltu	r19,r3,2a30 <quorem+0x1f4>
    2a44:	bc400415 	stw	r17,16(r23)
    2a48:	003f9a06 	br	28b4 <quorem+0x78>
    2a4c:	0005883a 	mov	r2,zero
    2a50:	003fc806 	br	2974 <quorem+0x138>

00002a54 <_dtoa_r>:
    2a54:	22001017 	ldw	r8,64(r4)
    2a58:	deffda04 	addi	sp,sp,-152
    2a5c:	dd402115 	stw	r21,132(sp)
    2a60:	dd002015 	stw	r20,128(sp)
    2a64:	dc801e15 	stw	r18,120(sp)
    2a68:	dc401d15 	stw	r17,116(sp)
    2a6c:	dfc02515 	stw	ra,148(sp)
    2a70:	df002415 	stw	fp,144(sp)
    2a74:	ddc02315 	stw	r23,140(sp)
    2a78:	dd802215 	stw	r22,136(sp)
    2a7c:	dcc01f15 	stw	r19,124(sp)
    2a80:	dc001c15 	stw	r16,112(sp)
    2a84:	d9001615 	stw	r4,88(sp)
    2a88:	3023883a 	mov	r17,r6
    2a8c:	2829883a 	mov	r20,r5
    2a90:	d9c01715 	stw	r7,92(sp)
    2a94:	dc802817 	ldw	r18,160(sp)
    2a98:	302b883a 	mov	r21,r6
    2a9c:	40000a26 	beq	r8,zero,2ac8 <_dtoa_r+0x74>
    2aa0:	20801117 	ldw	r2,68(r4)
    2aa4:	400b883a 	mov	r5,r8
    2aa8:	40800115 	stw	r2,4(r8)
    2aac:	20c01117 	ldw	r3,68(r4)
    2ab0:	00800044 	movi	r2,1
    2ab4:	10c4983a 	sll	r2,r2,r3
    2ab8:	40800215 	stw	r2,8(r8)
    2abc:	0005be80 	call	5be8 <_Bfree>
    2ac0:	d8c01617 	ldw	r3,88(sp)
    2ac4:	18001015 	stw	zero,64(r3)
    2ac8:	8800a316 	blt	r17,zero,2d58 <_dtoa_r+0x304>
    2acc:	90000015 	stw	zero,0(r18)
    2ad0:	a8dffc2c 	andhi	r3,r21,32752
    2ad4:	009ffc34 	movhi	r2,32752
    2ad8:	18809126 	beq	r3,r2,2d20 <_dtoa_r+0x2cc>
    2adc:	000d883a 	mov	r6,zero
    2ae0:	000f883a 	mov	r7,zero
    2ae4:	a009883a 	mov	r4,r20
    2ae8:	a80b883a 	mov	r5,r21
    2aec:	dd001215 	stw	r20,72(sp)
    2af0:	dd401315 	stw	r21,76(sp)
    2af4:	00090800 	call	9080 <__nedf2>
    2af8:	1000171e 	bne	r2,zero,2b58 <_dtoa_r+0x104>
    2afc:	d9802717 	ldw	r6,156(sp)
    2b00:	00800044 	movi	r2,1
    2b04:	30800015 	stw	r2,0(r6)
    2b08:	d8802917 	ldw	r2,164(sp)
    2b0c:	10029b26 	beq	r2,zero,357c <_dtoa_r+0xb28>
    2b10:	d9002917 	ldw	r4,164(sp)
    2b14:	008000f4 	movhi	r2,3
    2b18:	10802844 	addi	r2,r2,161
    2b1c:	10ffffc4 	addi	r3,r2,-1
    2b20:	20800015 	stw	r2,0(r4)
    2b24:	1805883a 	mov	r2,r3
    2b28:	dfc02517 	ldw	ra,148(sp)
    2b2c:	df002417 	ldw	fp,144(sp)
    2b30:	ddc02317 	ldw	r23,140(sp)
    2b34:	dd802217 	ldw	r22,136(sp)
    2b38:	dd402117 	ldw	r21,132(sp)
    2b3c:	dd002017 	ldw	r20,128(sp)
    2b40:	dcc01f17 	ldw	r19,124(sp)
    2b44:	dc801e17 	ldw	r18,120(sp)
    2b48:	dc401d17 	ldw	r17,116(sp)
    2b4c:	dc001c17 	ldw	r16,112(sp)
    2b50:	dec02604 	addi	sp,sp,152
    2b54:	f800283a 	ret
    2b58:	d9001617 	ldw	r4,88(sp)
    2b5c:	d9401217 	ldw	r5,72(sp)
    2b60:	d8800104 	addi	r2,sp,4
    2b64:	a80d883a 	mov	r6,r21
    2b68:	d9c00204 	addi	r7,sp,8
    2b6c:	d8800015 	stw	r2,0(sp)
    2b70:	00062240 	call	6224 <__d2b>
    2b74:	d8800715 	stw	r2,28(sp)
    2b78:	a804d53a 	srli	r2,r21,20
    2b7c:	1101ffcc 	andi	r4,r2,2047
    2b80:	20008626 	beq	r4,zero,2d9c <_dtoa_r+0x348>
    2b84:	d8c01217 	ldw	r3,72(sp)
    2b88:	00800434 	movhi	r2,16
    2b8c:	10bfffc4 	addi	r2,r2,-1
    2b90:	ddc00117 	ldw	r23,4(sp)
    2b94:	a884703a 	and	r2,r21,r2
    2b98:	1811883a 	mov	r8,r3
    2b9c:	124ffc34 	orhi	r9,r2,16368
    2ba0:	25bf0044 	addi	r22,r4,-1023
    2ba4:	d8000815 	stw	zero,32(sp)
    2ba8:	0005883a 	mov	r2,zero
    2bac:	00cffe34 	movhi	r3,16376
    2bb0:	480b883a 	mov	r5,r9
    2bb4:	4009883a 	mov	r4,r8
    2bb8:	180f883a 	mov	r7,r3
    2bbc:	100d883a 	mov	r6,r2
    2bc0:	00088e80 	call	88e8 <__subdf3>
    2bc4:	0218dbf4 	movhi	r8,25455
    2bc8:	4210d844 	addi	r8,r8,17249
    2bcc:	024ff4f4 	movhi	r9,16339
    2bd0:	4a61e9c4 	addi	r9,r9,-30809
    2bd4:	480f883a 	mov	r7,r9
    2bd8:	400d883a 	mov	r6,r8
    2bdc:	180b883a 	mov	r5,r3
    2be0:	1009883a 	mov	r4,r2
    2be4:	00089dc0 	call	89dc <__muldf3>
    2be8:	0222d874 	movhi	r8,35681
    2bec:	42322cc4 	addi	r8,r8,-14157
    2bf0:	024ff1f4 	movhi	r9,16327
    2bf4:	4a628a04 	addi	r9,r9,-30168
    2bf8:	480f883a 	mov	r7,r9
    2bfc:	400d883a 	mov	r6,r8
    2c00:	180b883a 	mov	r5,r3
    2c04:	1009883a 	mov	r4,r2
    2c08:	00089680 	call	8968 <__adddf3>
    2c0c:	b009883a 	mov	r4,r22
    2c10:	1021883a 	mov	r16,r2
    2c14:	1823883a 	mov	r17,r3
    2c18:	00092a00 	call	92a0 <__floatsidf>
    2c1c:	021427f4 	movhi	r8,20639
    2c20:	421e7ec4 	addi	r8,r8,31227
    2c24:	024ff4f4 	movhi	r9,16339
    2c28:	4a5104c4 	addi	r9,r9,17427
    2c2c:	480f883a 	mov	r7,r9
    2c30:	400d883a 	mov	r6,r8
    2c34:	180b883a 	mov	r5,r3
    2c38:	1009883a 	mov	r4,r2
    2c3c:	00089dc0 	call	89dc <__muldf3>
    2c40:	180f883a 	mov	r7,r3
    2c44:	880b883a 	mov	r5,r17
    2c48:	100d883a 	mov	r6,r2
    2c4c:	8009883a 	mov	r4,r16
    2c50:	00089680 	call	8968 <__adddf3>
    2c54:	1009883a 	mov	r4,r2
    2c58:	180b883a 	mov	r5,r3
    2c5c:	1021883a 	mov	r16,r2
    2c60:	1823883a 	mov	r17,r3
    2c64:	00093980 	call	9398 <__fixdfsi>
    2c68:	000d883a 	mov	r6,zero
    2c6c:	000f883a 	mov	r7,zero
    2c70:	8009883a 	mov	r4,r16
    2c74:	880b883a 	mov	r5,r17
    2c78:	d8800d15 	stw	r2,52(sp)
    2c7c:	00092180 	call	9218 <__ltdf2>
    2c80:	10031716 	blt	r2,zero,38e0 <_dtoa_r+0xe8c>
    2c84:	d8c00d17 	ldw	r3,52(sp)
    2c88:	00800584 	movi	r2,22
    2c8c:	10c1482e 	bgeu	r2,r3,31b0 <_dtoa_r+0x75c>
    2c90:	01000044 	movi	r4,1
    2c94:	d9000c15 	stw	r4,48(sp)
    2c98:	bd85c83a 	sub	r2,r23,r22
    2c9c:	11bfffc4 	addi	r6,r2,-1
    2ca0:	30030b16 	blt	r6,zero,38d0 <_dtoa_r+0xe7c>
    2ca4:	d9800a15 	stw	r6,40(sp)
    2ca8:	d8001115 	stw	zero,68(sp)
    2cac:	d8c00d17 	ldw	r3,52(sp)
    2cb0:	1802ff16 	blt	r3,zero,38b0 <_dtoa_r+0xe5c>
    2cb4:	d9000a17 	ldw	r4,40(sp)
    2cb8:	d8c00915 	stw	r3,36(sp)
    2cbc:	d8001015 	stw	zero,64(sp)
    2cc0:	20c9883a 	add	r4,r4,r3
    2cc4:	d9000a15 	stw	r4,40(sp)
    2cc8:	d9001717 	ldw	r4,92(sp)
    2ccc:	00800244 	movi	r2,9
    2cd0:	11004636 	bltu	r2,r4,2dec <_dtoa_r+0x398>
    2cd4:	00800144 	movi	r2,5
    2cd8:	11020416 	blt	r2,r4,34ec <_dtoa_r+0xa98>
    2cdc:	04400044 	movi	r17,1
    2ce0:	d8c01717 	ldw	r3,92(sp)
    2ce4:	00800144 	movi	r2,5
    2ce8:	10c1ed36 	bltu	r2,r3,34a0 <_dtoa_r+0xa4c>
    2cec:	18c5883a 	add	r2,r3,r3
    2cf0:	1085883a 	add	r2,r2,r2
    2cf4:	00c00034 	movhi	r3,0
    2cf8:	18cb4204 	addi	r3,r3,11528
    2cfc:	10c5883a 	add	r2,r2,r3
    2d00:	11000017 	ldw	r4,0(r2)
    2d04:	2000683a 	jmp	r4
    2d08:	00002df4 	movhi	zero,183
    2d0c:	00002df4 	movhi	zero,183
    2d10:	000037f4 	movhi	zero,223
    2d14:	000037cc 	andi	zero,zero,223
    2d18:	00003810 	cmplti	zero,zero,224
    2d1c:	0000381c 	xori	zero,zero,224
    2d20:	d9002717 	ldw	r4,156(sp)
    2d24:	0089c3c4 	movi	r2,9999
    2d28:	20800015 	stw	r2,0(r4)
    2d2c:	a0001026 	beq	r20,zero,2d70 <_dtoa_r+0x31c>
    2d30:	00c000f4 	movhi	r3,3
    2d34:	18c03404 	addi	r3,r3,208
    2d38:	d9802917 	ldw	r6,164(sp)
    2d3c:	303f7926 	beq	r6,zero,2b24 <_dtoa_r+0xd0>
    2d40:	188000c7 	ldb	r2,3(r3)
    2d44:	190000c4 	addi	r4,r3,3
    2d48:	1000101e 	bne	r2,zero,2d8c <_dtoa_r+0x338>
    2d4c:	d8802917 	ldw	r2,164(sp)
    2d50:	11000015 	stw	r4,0(r2)
    2d54:	003f7306 	br	2b24 <_dtoa_r+0xd0>
    2d58:	00a00034 	movhi	r2,32768
    2d5c:	10bfffc4 	addi	r2,r2,-1
    2d60:	00c00044 	movi	r3,1
    2d64:	88aa703a 	and	r21,r17,r2
    2d68:	90c00015 	stw	r3,0(r18)
    2d6c:	003f5806 	br	2ad0 <_dtoa_r+0x7c>
    2d70:	00800434 	movhi	r2,16
    2d74:	10bfffc4 	addi	r2,r2,-1
    2d78:	a884703a 	and	r2,r21,r2
    2d7c:	103fec1e 	bne	r2,zero,2d30 <_dtoa_r+0x2dc>
    2d80:	00c000f4 	movhi	r3,3
    2d84:	18c03104 	addi	r3,r3,196
    2d88:	003feb06 	br	2d38 <_dtoa_r+0x2e4>
    2d8c:	d8802917 	ldw	r2,164(sp)
    2d90:	19000204 	addi	r4,r3,8
    2d94:	11000015 	stw	r4,0(r2)
    2d98:	003f6206 	br	2b24 <_dtoa_r+0xd0>
    2d9c:	ddc00117 	ldw	r23,4(sp)
    2da0:	d8800217 	ldw	r2,8(sp)
    2da4:	01000804 	movi	r4,32
    2da8:	b8c10c84 	addi	r3,r23,1074
    2dac:	18a3883a 	add	r17,r3,r2
    2db0:	2441b80e 	bge	r4,r17,3494 <_dtoa_r+0xa40>
    2db4:	00c01004 	movi	r3,64
    2db8:	1c47c83a 	sub	r3,r3,r17
    2dbc:	88bff804 	addi	r2,r17,-32
    2dc0:	a8c6983a 	sll	r3,r21,r3
    2dc4:	a084d83a 	srl	r2,r20,r2
    2dc8:	1888b03a 	or	r4,r3,r2
    2dcc:	00094700 	call	9470 <__floatunsidf>
    2dd0:	1011883a 	mov	r8,r2
    2dd4:	00bf8434 	movhi	r2,65040
    2dd8:	01000044 	movi	r4,1
    2ddc:	10d3883a 	add	r9,r2,r3
    2de0:	8dbef344 	addi	r22,r17,-1075
    2de4:	d9000815 	stw	r4,32(sp)
    2de8:	003f6f06 	br	2ba8 <_dtoa_r+0x154>
    2dec:	d8001715 	stw	zero,92(sp)
    2df0:	04400044 	movi	r17,1
    2df4:	00bfffc4 	movi	r2,-1
    2df8:	00c00044 	movi	r3,1
    2dfc:	d8800e15 	stw	r2,56(sp)
    2e00:	d8002615 	stw	zero,152(sp)
    2e04:	d8800f15 	stw	r2,60(sp)
    2e08:	d8c00b15 	stw	r3,44(sp)
    2e0c:	1021883a 	mov	r16,r2
    2e10:	d8801617 	ldw	r2,88(sp)
    2e14:	10001115 	stw	zero,68(r2)
    2e18:	d8801617 	ldw	r2,88(sp)
    2e1c:	11401117 	ldw	r5,68(r2)
    2e20:	1009883a 	mov	r4,r2
    2e24:	00061680 	call	6168 <_Balloc>
    2e28:	d8c01617 	ldw	r3,88(sp)
    2e2c:	d8800515 	stw	r2,20(sp)
    2e30:	18801015 	stw	r2,64(r3)
    2e34:	00800384 	movi	r2,14
    2e38:	14006836 	bltu	r2,r16,2fdc <_dtoa_r+0x588>
    2e3c:	8805003a 	cmpeq	r2,r17,zero
    2e40:	1000661e 	bne	r2,zero,2fdc <_dtoa_r+0x588>
    2e44:	d9000d17 	ldw	r4,52(sp)
    2e48:	0102300e 	bge	zero,r4,370c <_dtoa_r+0xcb8>
    2e4c:	208003cc 	andi	r2,r4,15
    2e50:	100490fa 	slli	r2,r2,3
    2e54:	2025d13a 	srai	r18,r4,4
    2e58:	00c000f4 	movhi	r3,3
    2e5c:	18c04604 	addi	r3,r3,280
    2e60:	10c5883a 	add	r2,r2,r3
    2e64:	90c0040c 	andi	r3,r18,16
    2e68:	14000017 	ldw	r16,0(r2)
    2e6c:	14400117 	ldw	r17,4(r2)
    2e70:	18036a1e 	bne	r3,zero,3c1c <_dtoa_r+0x11c8>
    2e74:	05800084 	movi	r22,2
    2e78:	90001026 	beq	r18,zero,2ebc <_dtoa_r+0x468>
    2e7c:	04c000f4 	movhi	r19,3
    2e80:	9cc07804 	addi	r19,r19,480
    2e84:	9080004c 	andi	r2,r18,1
    2e88:	1005003a 	cmpeq	r2,r2,zero
    2e8c:	1000081e 	bne	r2,zero,2eb0 <_dtoa_r+0x45c>
    2e90:	99800017 	ldw	r6,0(r19)
    2e94:	99c00117 	ldw	r7,4(r19)
    2e98:	880b883a 	mov	r5,r17
    2e9c:	8009883a 	mov	r4,r16
    2ea0:	00089dc0 	call	89dc <__muldf3>
    2ea4:	1021883a 	mov	r16,r2
    2ea8:	b5800044 	addi	r22,r22,1
    2eac:	1823883a 	mov	r17,r3
    2eb0:	9025d07a 	srai	r18,r18,1
    2eb4:	9cc00204 	addi	r19,r19,8
    2eb8:	903ff21e 	bne	r18,zero,2e84 <_dtoa_r+0x430>
    2ebc:	a80b883a 	mov	r5,r21
    2ec0:	a009883a 	mov	r4,r20
    2ec4:	880f883a 	mov	r7,r17
    2ec8:	800d883a 	mov	r6,r16
    2ecc:	0008da00 	call	8da0 <__divdf3>
    2ed0:	1029883a 	mov	r20,r2
    2ed4:	182b883a 	mov	r21,r3
    2ed8:	d8c00c17 	ldw	r3,48(sp)
    2edc:	1805003a 	cmpeq	r2,r3,zero
    2ee0:	1000081e 	bne	r2,zero,2f04 <_dtoa_r+0x4b0>
    2ee4:	0005883a 	mov	r2,zero
    2ee8:	00cffc34 	movhi	r3,16368
    2eec:	180f883a 	mov	r7,r3
    2ef0:	a009883a 	mov	r4,r20
    2ef4:	a80b883a 	mov	r5,r21
    2ef8:	100d883a 	mov	r6,r2
    2efc:	00092180 	call	9218 <__ltdf2>
    2f00:	1003fe16 	blt	r2,zero,3efc <_dtoa_r+0x14a8>
    2f04:	b009883a 	mov	r4,r22
    2f08:	00092a00 	call	92a0 <__floatsidf>
    2f0c:	180b883a 	mov	r5,r3
    2f10:	1009883a 	mov	r4,r2
    2f14:	a00d883a 	mov	r6,r20
    2f18:	a80f883a 	mov	r7,r21
    2f1c:	00089dc0 	call	89dc <__muldf3>
    2f20:	0011883a 	mov	r8,zero
    2f24:	02500734 	movhi	r9,16412
    2f28:	1009883a 	mov	r4,r2
    2f2c:	180b883a 	mov	r5,r3
    2f30:	480f883a 	mov	r7,r9
    2f34:	400d883a 	mov	r6,r8
    2f38:	00089680 	call	8968 <__adddf3>
    2f3c:	d9000f17 	ldw	r4,60(sp)
    2f40:	102d883a 	mov	r22,r2
    2f44:	00bf3034 	movhi	r2,64704
    2f48:	18b9883a 	add	fp,r3,r2
    2f4c:	e02f883a 	mov	r23,fp
    2f50:	20028f1e 	bne	r4,zero,3990 <_dtoa_r+0xf3c>
    2f54:	0005883a 	mov	r2,zero
    2f58:	00d00534 	movhi	r3,16404
    2f5c:	a009883a 	mov	r4,r20
    2f60:	a80b883a 	mov	r5,r21
    2f64:	180f883a 	mov	r7,r3
    2f68:	100d883a 	mov	r6,r2
    2f6c:	00088e80 	call	88e8 <__subdf3>
    2f70:	1009883a 	mov	r4,r2
    2f74:	e00f883a 	mov	r7,fp
    2f78:	180b883a 	mov	r5,r3
    2f7c:	b00d883a 	mov	r6,r22
    2f80:	1025883a 	mov	r18,r2
    2f84:	1827883a 	mov	r19,r3
    2f88:	00091080 	call	9108 <__gtdf2>
    2f8c:	00834f16 	blt	zero,r2,3ccc <_dtoa_r+0x1278>
    2f90:	e0e0003c 	xorhi	r3,fp,32768
    2f94:	9009883a 	mov	r4,r18
    2f98:	980b883a 	mov	r5,r19
    2f9c:	180f883a 	mov	r7,r3
    2fa0:	b00d883a 	mov	r6,r22
    2fa4:	00092180 	call	9218 <__ltdf2>
    2fa8:	1000080e 	bge	r2,zero,2fcc <_dtoa_r+0x578>
    2fac:	0027883a 	mov	r19,zero
    2fb0:	0025883a 	mov	r18,zero
    2fb4:	d8802617 	ldw	r2,152(sp)
    2fb8:	df000517 	ldw	fp,20(sp)
    2fbc:	d8000615 	stw	zero,24(sp)
    2fc0:	0084303a 	nor	r2,zero,r2
    2fc4:	d8800d15 	stw	r2,52(sp)
    2fc8:	00019b06 	br	3638 <_dtoa_r+0xbe4>
    2fcc:	d9801217 	ldw	r6,72(sp)
    2fd0:	d8801317 	ldw	r2,76(sp)
    2fd4:	3029883a 	mov	r20,r6
    2fd8:	102b883a 	mov	r21,r2
    2fdc:	d8c00217 	ldw	r3,8(sp)
    2fe0:	18008516 	blt	r3,zero,31f8 <_dtoa_r+0x7a4>
    2fe4:	d9000d17 	ldw	r4,52(sp)
    2fe8:	00800384 	movi	r2,14
    2fec:	11008216 	blt	r2,r4,31f8 <_dtoa_r+0x7a4>
    2ff0:	200490fa 	slli	r2,r4,3
    2ff4:	d9802617 	ldw	r6,152(sp)
    2ff8:	00c000f4 	movhi	r3,3
    2ffc:	18c04604 	addi	r3,r3,280
    3000:	10c5883a 	add	r2,r2,r3
    3004:	14800017 	ldw	r18,0(r2)
    3008:	14c00117 	ldw	r19,4(r2)
    300c:	30031e16 	blt	r6,zero,3c88 <_dtoa_r+0x1234>
    3010:	d9000517 	ldw	r4,20(sp)
    3014:	d8c00f17 	ldw	r3,60(sp)
    3018:	a823883a 	mov	r17,r21
    301c:	a021883a 	mov	r16,r20
    3020:	192b883a 	add	r21,r3,r4
    3024:	2039883a 	mov	fp,r4
    3028:	00000f06 	br	3068 <_dtoa_r+0x614>
    302c:	0005883a 	mov	r2,zero
    3030:	00d00934 	movhi	r3,16420
    3034:	5009883a 	mov	r4,r10
    3038:	580b883a 	mov	r5,r11
    303c:	180f883a 	mov	r7,r3
    3040:	100d883a 	mov	r6,r2
    3044:	00089dc0 	call	89dc <__muldf3>
    3048:	180b883a 	mov	r5,r3
    304c:	000d883a 	mov	r6,zero
    3050:	000f883a 	mov	r7,zero
    3054:	1009883a 	mov	r4,r2
    3058:	1021883a 	mov	r16,r2
    305c:	1823883a 	mov	r17,r3
    3060:	00090800 	call	9080 <__nedf2>
    3064:	10004526 	beq	r2,zero,317c <_dtoa_r+0x728>
    3068:	900d883a 	mov	r6,r18
    306c:	980f883a 	mov	r7,r19
    3070:	8009883a 	mov	r4,r16
    3074:	880b883a 	mov	r5,r17
    3078:	0008da00 	call	8da0 <__divdf3>
    307c:	180b883a 	mov	r5,r3
    3080:	1009883a 	mov	r4,r2
    3084:	00093980 	call	9398 <__fixdfsi>
    3088:	1009883a 	mov	r4,r2
    308c:	1029883a 	mov	r20,r2
    3090:	00092a00 	call	92a0 <__floatsidf>
    3094:	180f883a 	mov	r7,r3
    3098:	9009883a 	mov	r4,r18
    309c:	980b883a 	mov	r5,r19
    30a0:	100d883a 	mov	r6,r2
    30a4:	00089dc0 	call	89dc <__muldf3>
    30a8:	180f883a 	mov	r7,r3
    30ac:	880b883a 	mov	r5,r17
    30b0:	8009883a 	mov	r4,r16
    30b4:	100d883a 	mov	r6,r2
    30b8:	00088e80 	call	88e8 <__subdf3>
    30bc:	1015883a 	mov	r10,r2
    30c0:	a0800c04 	addi	r2,r20,48
    30c4:	e0800005 	stb	r2,0(fp)
    30c8:	e7000044 	addi	fp,fp,1
    30cc:	1817883a 	mov	r11,r3
    30d0:	e57fd61e 	bne	fp,r21,302c <_dtoa_r+0x5d8>
    30d4:	500d883a 	mov	r6,r10
    30d8:	180f883a 	mov	r7,r3
    30dc:	5009883a 	mov	r4,r10
    30e0:	180b883a 	mov	r5,r3
    30e4:	00089680 	call	8968 <__adddf3>
    30e8:	100d883a 	mov	r6,r2
    30ec:	9009883a 	mov	r4,r18
    30f0:	980b883a 	mov	r5,r19
    30f4:	180f883a 	mov	r7,r3
    30f8:	1021883a 	mov	r16,r2
    30fc:	1823883a 	mov	r17,r3
    3100:	00092180 	call	9218 <__ltdf2>
    3104:	10000816 	blt	r2,zero,3128 <_dtoa_r+0x6d4>
    3108:	980b883a 	mov	r5,r19
    310c:	800d883a 	mov	r6,r16
    3110:	880f883a 	mov	r7,r17
    3114:	9009883a 	mov	r4,r18
    3118:	0008ff80 	call	8ff8 <__eqdf2>
    311c:	1000171e 	bne	r2,zero,317c <_dtoa_r+0x728>
    3120:	a080004c 	andi	r2,r20,1
    3124:	10001526 	beq	r2,zero,317c <_dtoa_r+0x728>
    3128:	d8800d17 	ldw	r2,52(sp)
    312c:	d8800415 	stw	r2,16(sp)
    3130:	e009883a 	mov	r4,fp
    3134:	213fffc4 	addi	r4,r4,-1
    3138:	20c00007 	ldb	r3,0(r4)
    313c:	00800e44 	movi	r2,57
    3140:	1880081e 	bne	r3,r2,3164 <_dtoa_r+0x710>
    3144:	d8800517 	ldw	r2,20(sp)
    3148:	113ffa1e 	bne	r2,r4,3134 <_dtoa_r+0x6e0>
    314c:	d8c00417 	ldw	r3,16(sp)
    3150:	d9800517 	ldw	r6,20(sp)
    3154:	00800c04 	movi	r2,48
    3158:	18c00044 	addi	r3,r3,1
    315c:	d8c00415 	stw	r3,16(sp)
    3160:	30800005 	stb	r2,0(r6)
    3164:	20800003 	ldbu	r2,0(r4)
    3168:	d8c00417 	ldw	r3,16(sp)
    316c:	27000044 	addi	fp,r4,1
    3170:	10800044 	addi	r2,r2,1
    3174:	d8c00d15 	stw	r3,52(sp)
    3178:	20800005 	stb	r2,0(r4)
    317c:	d9001617 	ldw	r4,88(sp)
    3180:	d9400717 	ldw	r5,28(sp)
    3184:	0005be80 	call	5be8 <_Bfree>
    3188:	e0000005 	stb	zero,0(fp)
    318c:	d9800d17 	ldw	r6,52(sp)
    3190:	d8c02717 	ldw	r3,156(sp)
    3194:	d9002917 	ldw	r4,164(sp)
    3198:	30800044 	addi	r2,r6,1
    319c:	18800015 	stw	r2,0(r3)
    31a0:	20029c26 	beq	r4,zero,3c14 <_dtoa_r+0x11c0>
    31a4:	d8c00517 	ldw	r3,20(sp)
    31a8:	27000015 	stw	fp,0(r4)
    31ac:	003e5d06 	br	2b24 <_dtoa_r+0xd0>
    31b0:	d9800d17 	ldw	r6,52(sp)
    31b4:	00c000f4 	movhi	r3,3
    31b8:	18c04604 	addi	r3,r3,280
    31bc:	d9001217 	ldw	r4,72(sp)
    31c0:	300490fa 	slli	r2,r6,3
    31c4:	d9401317 	ldw	r5,76(sp)
    31c8:	10c5883a 	add	r2,r2,r3
    31cc:	12000017 	ldw	r8,0(r2)
    31d0:	12400117 	ldw	r9,4(r2)
    31d4:	400d883a 	mov	r6,r8
    31d8:	480f883a 	mov	r7,r9
    31dc:	00092180 	call	9218 <__ltdf2>
    31e0:	1000030e 	bge	r2,zero,31f0 <_dtoa_r+0x79c>
    31e4:	d8800d17 	ldw	r2,52(sp)
    31e8:	10bfffc4 	addi	r2,r2,-1
    31ec:	d8800d15 	stw	r2,52(sp)
    31f0:	d8000c15 	stw	zero,48(sp)
    31f4:	003ea806 	br	2c98 <_dtoa_r+0x244>
    31f8:	d9000b17 	ldw	r4,44(sp)
    31fc:	202cc03a 	cmpne	r22,r4,zero
    3200:	b000c71e 	bne	r22,zero,3520 <_dtoa_r+0xacc>
    3204:	dc001117 	ldw	r16,68(sp)
    3208:	dc801017 	ldw	r18,64(sp)
    320c:	0027883a 	mov	r19,zero
    3210:	04000b0e 	bge	zero,r16,3240 <_dtoa_r+0x7ec>
    3214:	d8c00a17 	ldw	r3,40(sp)
    3218:	00c0090e 	bge	zero,r3,3240 <_dtoa_r+0x7ec>
    321c:	8005883a 	mov	r2,r16
    3220:	1c011316 	blt	r3,r16,3670 <_dtoa_r+0xc1c>
    3224:	d9000a17 	ldw	r4,40(sp)
    3228:	d9801117 	ldw	r6,68(sp)
    322c:	80a1c83a 	sub	r16,r16,r2
    3230:	2089c83a 	sub	r4,r4,r2
    3234:	308dc83a 	sub	r6,r6,r2
    3238:	d9000a15 	stw	r4,40(sp)
    323c:	d9801115 	stw	r6,68(sp)
    3240:	d8801017 	ldw	r2,64(sp)
    3244:	0080150e 	bge	zero,r2,329c <_dtoa_r+0x848>
    3248:	d8c00b17 	ldw	r3,44(sp)
    324c:	1805003a 	cmpeq	r2,r3,zero
    3250:	1001c91e 	bne	r2,zero,3978 <_dtoa_r+0xf24>
    3254:	04800e0e 	bge	zero,r18,3290 <_dtoa_r+0x83c>
    3258:	d9001617 	ldw	r4,88(sp)
    325c:	980b883a 	mov	r5,r19
    3260:	900d883a 	mov	r6,r18
    3264:	000699c0 	call	699c <__pow5mult>
    3268:	d9001617 	ldw	r4,88(sp)
    326c:	d9800717 	ldw	r6,28(sp)
    3270:	100b883a 	mov	r5,r2
    3274:	1027883a 	mov	r19,r2
    3278:	00066780 	call	6678 <__multiply>
    327c:	d9001617 	ldw	r4,88(sp)
    3280:	d9400717 	ldw	r5,28(sp)
    3284:	1023883a 	mov	r17,r2
    3288:	0005be80 	call	5be8 <_Bfree>
    328c:	dc400715 	stw	r17,28(sp)
    3290:	d9001017 	ldw	r4,64(sp)
    3294:	248dc83a 	sub	r6,r4,r18
    3298:	30010e1e 	bne	r6,zero,36d4 <_dtoa_r+0xc80>
    329c:	d9001617 	ldw	r4,88(sp)
    32a0:	04400044 	movi	r17,1
    32a4:	880b883a 	mov	r5,r17
    32a8:	00068600 	call	6860 <__i2b>
    32ac:	d9800917 	ldw	r6,36(sp)
    32b0:	1025883a 	mov	r18,r2
    32b4:	0180040e 	bge	zero,r6,32c8 <_dtoa_r+0x874>
    32b8:	d9001617 	ldw	r4,88(sp)
    32bc:	100b883a 	mov	r5,r2
    32c0:	000699c0 	call	699c <__pow5mult>
    32c4:	1025883a 	mov	r18,r2
    32c8:	d8801717 	ldw	r2,92(sp)
    32cc:	8880f30e 	bge	r17,r2,369c <_dtoa_r+0xc48>
    32d0:	0023883a 	mov	r17,zero
    32d4:	d9800917 	ldw	r6,36(sp)
    32d8:	30019e1e 	bne	r6,zero,3954 <_dtoa_r+0xf00>
    32dc:	00c00044 	movi	r3,1
    32e0:	d9000a17 	ldw	r4,40(sp)
    32e4:	20c5883a 	add	r2,r4,r3
    32e8:	10c007cc 	andi	r3,r2,31
    32ec:	1800841e 	bne	r3,zero,3500 <_dtoa_r+0xaac>
    32f0:	00800704 	movi	r2,28
    32f4:	d9000a17 	ldw	r4,40(sp)
    32f8:	d9801117 	ldw	r6,68(sp)
    32fc:	80a1883a 	add	r16,r16,r2
    3300:	2089883a 	add	r4,r4,r2
    3304:	308d883a 	add	r6,r6,r2
    3308:	d9000a15 	stw	r4,40(sp)
    330c:	d9801115 	stw	r6,68(sp)
    3310:	d8801117 	ldw	r2,68(sp)
    3314:	0080050e 	bge	zero,r2,332c <_dtoa_r+0x8d8>
    3318:	d9400717 	ldw	r5,28(sp)
    331c:	d9001617 	ldw	r4,88(sp)
    3320:	100d883a 	mov	r6,r2
    3324:	000652c0 	call	652c <__lshift>
    3328:	d8800715 	stw	r2,28(sp)
    332c:	d8c00a17 	ldw	r3,40(sp)
    3330:	00c0050e 	bge	zero,r3,3348 <_dtoa_r+0x8f4>
    3334:	d9001617 	ldw	r4,88(sp)
    3338:	900b883a 	mov	r5,r18
    333c:	180d883a 	mov	r6,r3
    3340:	000652c0 	call	652c <__lshift>
    3344:	1025883a 	mov	r18,r2
    3348:	d9000c17 	ldw	r4,48(sp)
    334c:	2005003a 	cmpeq	r2,r4,zero
    3350:	10016f26 	beq	r2,zero,3910 <_dtoa_r+0xebc>
    3354:	d9000f17 	ldw	r4,60(sp)
    3358:	0102170e 	bge	zero,r4,3bb8 <_dtoa_r+0x1164>
    335c:	d9800b17 	ldw	r6,44(sp)
    3360:	3005003a 	cmpeq	r2,r6,zero
    3364:	1000881e 	bne	r2,zero,3588 <_dtoa_r+0xb34>
    3368:	0400050e 	bge	zero,r16,3380 <_dtoa_r+0x92c>
    336c:	d9001617 	ldw	r4,88(sp)
    3370:	980b883a 	mov	r5,r19
    3374:	800d883a 	mov	r6,r16
    3378:	000652c0 	call	652c <__lshift>
    337c:	1027883a 	mov	r19,r2
    3380:	8804c03a 	cmpne	r2,r17,zero
    3384:	1002541e 	bne	r2,zero,3cd8 <_dtoa_r+0x1284>
    3388:	980b883a 	mov	r5,r19
    338c:	dd800517 	ldw	r22,20(sp)
    3390:	dcc00615 	stw	r19,24(sp)
    3394:	a700004c 	andi	fp,r20,1
    3398:	2827883a 	mov	r19,r5
    339c:	d9000717 	ldw	r4,28(sp)
    33a0:	900b883a 	mov	r5,r18
    33a4:	000283c0 	call	283c <quorem>
    33a8:	d9000717 	ldw	r4,28(sp)
    33ac:	d9400617 	ldw	r5,24(sp)
    33b0:	1023883a 	mov	r17,r2
    33b4:	8dc00c04 	addi	r23,r17,48
    33b8:	0005d440 	call	5d44 <__mcmp>
    33bc:	d9001617 	ldw	r4,88(sp)
    33c0:	900b883a 	mov	r5,r18
    33c4:	980d883a 	mov	r6,r19
    33c8:	1029883a 	mov	r20,r2
    33cc:	00063a00 	call	63a0 <__mdiff>
    33d0:	102b883a 	mov	r21,r2
    33d4:	10800317 	ldw	r2,12(r2)
    33d8:	1001281e 	bne	r2,zero,387c <_dtoa_r+0xe28>
    33dc:	d9000717 	ldw	r4,28(sp)
    33e0:	a80b883a 	mov	r5,r21
    33e4:	0005d440 	call	5d44 <__mcmp>
    33e8:	d9001617 	ldw	r4,88(sp)
    33ec:	1021883a 	mov	r16,r2
    33f0:	a80b883a 	mov	r5,r21
    33f4:	0005be80 	call	5be8 <_Bfree>
    33f8:	8000041e 	bne	r16,zero,340c <_dtoa_r+0x9b8>
    33fc:	d8801717 	ldw	r2,92(sp)
    3400:	1000021e 	bne	r2,zero,340c <_dtoa_r+0x9b8>
    3404:	e004c03a 	cmpne	r2,fp,zero
    3408:	10011726 	beq	r2,zero,3868 <_dtoa_r+0xe14>
    340c:	a0010616 	blt	r20,zero,3828 <_dtoa_r+0xdd4>
    3410:	a000041e 	bne	r20,zero,3424 <_dtoa_r+0x9d0>
    3414:	d8c01717 	ldw	r3,92(sp)
    3418:	1800021e 	bne	r3,zero,3424 <_dtoa_r+0x9d0>
    341c:	e004c03a 	cmpne	r2,fp,zero
    3420:	10010126 	beq	r2,zero,3828 <_dtoa_r+0xdd4>
    3424:	04023d16 	blt	zero,r16,3d1c <_dtoa_r+0x12c8>
    3428:	b5c00005 	stb	r23,0(r22)
    342c:	d9800517 	ldw	r6,20(sp)
    3430:	d9000f17 	ldw	r4,60(sp)
    3434:	b5800044 	addi	r22,r22,1
    3438:	3105883a 	add	r2,r6,r4
    343c:	b0806526 	beq	r22,r2,35d4 <_dtoa_r+0xb80>
    3440:	d9400717 	ldw	r5,28(sp)
    3444:	d9001617 	ldw	r4,88(sp)
    3448:	01800284 	movi	r6,10
    344c:	000f883a 	mov	r7,zero
    3450:	000689c0 	call	689c <__multadd>
    3454:	d8800715 	stw	r2,28(sp)
    3458:	d8800617 	ldw	r2,24(sp)
    345c:	14c10c26 	beq	r2,r19,3890 <_dtoa_r+0xe3c>
    3460:	d9400617 	ldw	r5,24(sp)
    3464:	d9001617 	ldw	r4,88(sp)
    3468:	01800284 	movi	r6,10
    346c:	000f883a 	mov	r7,zero
    3470:	000689c0 	call	689c <__multadd>
    3474:	d9001617 	ldw	r4,88(sp)
    3478:	980b883a 	mov	r5,r19
    347c:	01800284 	movi	r6,10
    3480:	000f883a 	mov	r7,zero
    3484:	d8800615 	stw	r2,24(sp)
    3488:	000689c0 	call	689c <__multadd>
    348c:	1027883a 	mov	r19,r2
    3490:	003fc206 	br	339c <_dtoa_r+0x948>
    3494:	2445c83a 	sub	r2,r4,r17
    3498:	a088983a 	sll	r4,r20,r2
    349c:	003e4b06 	br	2dcc <_dtoa_r+0x378>
    34a0:	01bfffc4 	movi	r6,-1
    34a4:	00800044 	movi	r2,1
    34a8:	d9800e15 	stw	r6,56(sp)
    34ac:	d9800f15 	stw	r6,60(sp)
    34b0:	d8800b15 	stw	r2,44(sp)
    34b4:	d8c01617 	ldw	r3,88(sp)
    34b8:	008005c4 	movi	r2,23
    34bc:	18001115 	stw	zero,68(r3)
    34c0:	1580082e 	bgeu	r2,r22,34e4 <_dtoa_r+0xa90>
    34c4:	00c00104 	movi	r3,4
    34c8:	0009883a 	mov	r4,zero
    34cc:	18c7883a 	add	r3,r3,r3
    34d0:	18800504 	addi	r2,r3,20
    34d4:	21000044 	addi	r4,r4,1
    34d8:	b0bffc2e 	bgeu	r22,r2,34cc <_dtoa_r+0xa78>
    34dc:	d9801617 	ldw	r6,88(sp)
    34e0:	31001115 	stw	r4,68(r6)
    34e4:	dc000f17 	ldw	r16,60(sp)
    34e8:	003e4b06 	br	2e18 <_dtoa_r+0x3c4>
    34ec:	d9801717 	ldw	r6,92(sp)
    34f0:	0023883a 	mov	r17,zero
    34f4:	31bfff04 	addi	r6,r6,-4
    34f8:	d9801715 	stw	r6,92(sp)
    34fc:	003df806 	br	2ce0 <_dtoa_r+0x28c>
    3500:	00800804 	movi	r2,32
    3504:	10c9c83a 	sub	r4,r2,r3
    3508:	00c00104 	movi	r3,4
    350c:	19005a16 	blt	r3,r4,3678 <_dtoa_r+0xc24>
    3510:	008000c4 	movi	r2,3
    3514:	113f7e16 	blt	r2,r4,3310 <_dtoa_r+0x8bc>
    3518:	20800704 	addi	r2,r4,28
    351c:	003f7506 	br	32f4 <_dtoa_r+0x8a0>
    3520:	d9801717 	ldw	r6,92(sp)
    3524:	00800044 	movi	r2,1
    3528:	1180a10e 	bge	r2,r6,37b0 <_dtoa_r+0xd5c>
    352c:	d9800f17 	ldw	r6,60(sp)
    3530:	d8c01017 	ldw	r3,64(sp)
    3534:	30bfffc4 	addi	r2,r6,-1
    3538:	1881c616 	blt	r3,r2,3c54 <_dtoa_r+0x1200>
    353c:	18a5c83a 	sub	r18,r3,r2
    3540:	d8800f17 	ldw	r2,60(sp)
    3544:	10026216 	blt	r2,zero,3ed0 <_dtoa_r+0x147c>
    3548:	dc001117 	ldw	r16,68(sp)
    354c:	1007883a 	mov	r3,r2
    3550:	d9800a17 	ldw	r6,40(sp)
    3554:	d8801117 	ldw	r2,68(sp)
    3558:	d9001617 	ldw	r4,88(sp)
    355c:	30cd883a 	add	r6,r6,r3
    3560:	10c5883a 	add	r2,r2,r3
    3564:	01400044 	movi	r5,1
    3568:	d9800a15 	stw	r6,40(sp)
    356c:	d8801115 	stw	r2,68(sp)
    3570:	00068600 	call	6860 <__i2b>
    3574:	1027883a 	mov	r19,r2
    3578:	003f2506 	br	3210 <_dtoa_r+0x7bc>
    357c:	00c000f4 	movhi	r3,3
    3580:	18c02804 	addi	r3,r3,160
    3584:	003d6706 	br	2b24 <_dtoa_r+0xd0>
    3588:	dd800517 	ldw	r22,20(sp)
    358c:	04000044 	movi	r16,1
    3590:	00000706 	br	35b0 <_dtoa_r+0xb5c>
    3594:	d9400717 	ldw	r5,28(sp)
    3598:	d9001617 	ldw	r4,88(sp)
    359c:	01800284 	movi	r6,10
    35a0:	000f883a 	mov	r7,zero
    35a4:	000689c0 	call	689c <__multadd>
    35a8:	d8800715 	stw	r2,28(sp)
    35ac:	84000044 	addi	r16,r16,1
    35b0:	d9000717 	ldw	r4,28(sp)
    35b4:	900b883a 	mov	r5,r18
    35b8:	000283c0 	call	283c <quorem>
    35bc:	15c00c04 	addi	r23,r2,48
    35c0:	b5c00005 	stb	r23,0(r22)
    35c4:	d8c00f17 	ldw	r3,60(sp)
    35c8:	b5800044 	addi	r22,r22,1
    35cc:	80fff116 	blt	r16,r3,3594 <_dtoa_r+0xb40>
    35d0:	d8000615 	stw	zero,24(sp)
    35d4:	d9400717 	ldw	r5,28(sp)
    35d8:	d9001617 	ldw	r4,88(sp)
    35dc:	01800044 	movi	r6,1
    35e0:	000652c0 	call	652c <__lshift>
    35e4:	1009883a 	mov	r4,r2
    35e8:	900b883a 	mov	r5,r18
    35ec:	d8800715 	stw	r2,28(sp)
    35f0:	0005d440 	call	5d44 <__mcmp>
    35f4:	00803c0e 	bge	zero,r2,36e8 <_dtoa_r+0xc94>
    35f8:	b009883a 	mov	r4,r22
    35fc:	213fffc4 	addi	r4,r4,-1
    3600:	21400003 	ldbu	r5,0(r4)
    3604:	00800e44 	movi	r2,57
    3608:	28c03fcc 	andi	r3,r5,255
    360c:	18c0201c 	xori	r3,r3,128
    3610:	18ffe004 	addi	r3,r3,-128
    3614:	1881981e 	bne	r3,r2,3c78 <_dtoa_r+0x1224>
    3618:	d9800517 	ldw	r6,20(sp)
    361c:	21bff71e 	bne	r4,r6,35fc <_dtoa_r+0xba8>
    3620:	d8800d17 	ldw	r2,52(sp)
    3624:	37000044 	addi	fp,r6,1
    3628:	10800044 	addi	r2,r2,1
    362c:	d8800d15 	stw	r2,52(sp)
    3630:	00800c44 	movi	r2,49
    3634:	30800005 	stb	r2,0(r6)
    3638:	d9001617 	ldw	r4,88(sp)
    363c:	900b883a 	mov	r5,r18
    3640:	0005be80 	call	5be8 <_Bfree>
    3644:	983ecd26 	beq	r19,zero,317c <_dtoa_r+0x728>
    3648:	d8c00617 	ldw	r3,24(sp)
    364c:	18000426 	beq	r3,zero,3660 <_dtoa_r+0xc0c>
    3650:	1cc00326 	beq	r3,r19,3660 <_dtoa_r+0xc0c>
    3654:	d9001617 	ldw	r4,88(sp)
    3658:	180b883a 	mov	r5,r3
    365c:	0005be80 	call	5be8 <_Bfree>
    3660:	d9001617 	ldw	r4,88(sp)
    3664:	980b883a 	mov	r5,r19
    3668:	0005be80 	call	5be8 <_Bfree>
    366c:	003ec306 	br	317c <_dtoa_r+0x728>
    3670:	1805883a 	mov	r2,r3
    3674:	003eeb06 	br	3224 <_dtoa_r+0x7d0>
    3678:	d9800a17 	ldw	r6,40(sp)
    367c:	d8c01117 	ldw	r3,68(sp)
    3680:	20bfff04 	addi	r2,r4,-4
    3684:	308d883a 	add	r6,r6,r2
    3688:	1887883a 	add	r3,r3,r2
    368c:	80a1883a 	add	r16,r16,r2
    3690:	d9800a15 	stw	r6,40(sp)
    3694:	d8c01115 	stw	r3,68(sp)
    3698:	003f1d06 	br	3310 <_dtoa_r+0x8bc>
    369c:	a03f0c1e 	bne	r20,zero,32d0 <_dtoa_r+0x87c>
    36a0:	00800434 	movhi	r2,16
    36a4:	10bfffc4 	addi	r2,r2,-1
    36a8:	a884703a 	and	r2,r21,r2
    36ac:	103f081e 	bne	r2,zero,32d0 <_dtoa_r+0x87c>
    36b0:	a89ffc2c 	andhi	r2,r21,32752
    36b4:	103f0626 	beq	r2,zero,32d0 <_dtoa_r+0x87c>
    36b8:	d8c01117 	ldw	r3,68(sp)
    36bc:	d9000a17 	ldw	r4,40(sp)
    36c0:	18c00044 	addi	r3,r3,1
    36c4:	21000044 	addi	r4,r4,1
    36c8:	d8c01115 	stw	r3,68(sp)
    36cc:	d9000a15 	stw	r4,40(sp)
    36d0:	003f0006 	br	32d4 <_dtoa_r+0x880>
    36d4:	d9400717 	ldw	r5,28(sp)
    36d8:	d9001617 	ldw	r4,88(sp)
    36dc:	000699c0 	call	699c <__pow5mult>
    36e0:	d8800715 	stw	r2,28(sp)
    36e4:	003eed06 	br	329c <_dtoa_r+0x848>
    36e8:	1000021e 	bne	r2,zero,36f4 <_dtoa_r+0xca0>
    36ec:	b880004c 	andi	r2,r23,1
    36f0:	103fc11e 	bne	r2,zero,35f8 <_dtoa_r+0xba4>
    36f4:	b5bfffc4 	addi	r22,r22,-1
    36f8:	b0c00007 	ldb	r3,0(r22)
    36fc:	00800c04 	movi	r2,48
    3700:	18bffc26 	beq	r3,r2,36f4 <_dtoa_r+0xca0>
    3704:	b7000044 	addi	fp,r22,1
    3708:	003fcb06 	br	3638 <_dtoa_r+0xbe4>
    370c:	d9800d17 	ldw	r6,52(sp)
    3710:	018fc83a 	sub	r7,zero,r6
    3714:	3801f726 	beq	r7,zero,3ef4 <_dtoa_r+0x14a0>
    3718:	398003cc 	andi	r6,r7,15
    371c:	300c90fa 	slli	r6,r6,3
    3720:	014000f4 	movhi	r5,3
    3724:	29404604 	addi	r5,r5,280
    3728:	d9001217 	ldw	r4,72(sp)
    372c:	314d883a 	add	r6,r6,r5
    3730:	30c00117 	ldw	r3,4(r6)
    3734:	30800017 	ldw	r2,0(r6)
    3738:	d9401317 	ldw	r5,76(sp)
    373c:	3821d13a 	srai	r16,r7,4
    3740:	100d883a 	mov	r6,r2
    3744:	180f883a 	mov	r7,r3
    3748:	00089dc0 	call	89dc <__muldf3>
    374c:	1011883a 	mov	r8,r2
    3750:	1813883a 	mov	r9,r3
    3754:	1029883a 	mov	r20,r2
    3758:	182b883a 	mov	r21,r3
    375c:	8001e526 	beq	r16,zero,3ef4 <_dtoa_r+0x14a0>
    3760:	05800084 	movi	r22,2
    3764:	044000f4 	movhi	r17,3
    3768:	8c407804 	addi	r17,r17,480
    376c:	8080004c 	andi	r2,r16,1
    3770:	1005003a 	cmpeq	r2,r2,zero
    3774:	1000081e 	bne	r2,zero,3798 <_dtoa_r+0xd44>
    3778:	89800017 	ldw	r6,0(r17)
    377c:	89c00117 	ldw	r7,4(r17)
    3780:	480b883a 	mov	r5,r9
    3784:	4009883a 	mov	r4,r8
    3788:	00089dc0 	call	89dc <__muldf3>
    378c:	1011883a 	mov	r8,r2
    3790:	b5800044 	addi	r22,r22,1
    3794:	1813883a 	mov	r9,r3
    3798:	8021d07a 	srai	r16,r16,1
    379c:	8c400204 	addi	r17,r17,8
    37a0:	803ff21e 	bne	r16,zero,376c <_dtoa_r+0xd18>
    37a4:	4029883a 	mov	r20,r8
    37a8:	482b883a 	mov	r21,r9
    37ac:	003dca06 	br	2ed8 <_dtoa_r+0x484>
    37b0:	d9000817 	ldw	r4,32(sp)
    37b4:	2005003a 	cmpeq	r2,r4,zero
    37b8:	1001f61e 	bne	r2,zero,3f94 <_dtoa_r+0x1540>
    37bc:	dc001117 	ldw	r16,68(sp)
    37c0:	dc801017 	ldw	r18,64(sp)
    37c4:	18c10cc4 	addi	r3,r3,1075
    37c8:	003f6106 	br	3550 <_dtoa_r+0xafc>
    37cc:	d8000b15 	stw	zero,44(sp)
    37d0:	d9802617 	ldw	r6,152(sp)
    37d4:	d8c00d17 	ldw	r3,52(sp)
    37d8:	30800044 	addi	r2,r6,1
    37dc:	18ad883a 	add	r22,r3,r2
    37e0:	b13fffc4 	addi	r4,r22,-1
    37e4:	d9000e15 	stw	r4,56(sp)
    37e8:	0581f60e 	bge	zero,r22,3fc4 <_dtoa_r+0x1570>
    37ec:	dd800f15 	stw	r22,60(sp)
    37f0:	003f3006 	br	34b4 <_dtoa_r+0xa60>
    37f4:	d8000b15 	stw	zero,44(sp)
    37f8:	d9002617 	ldw	r4,152(sp)
    37fc:	0101eb0e 	bge	zero,r4,3fac <_dtoa_r+0x1558>
    3800:	202d883a 	mov	r22,r4
    3804:	d9000e15 	stw	r4,56(sp)
    3808:	d9000f15 	stw	r4,60(sp)
    380c:	003f2906 	br	34b4 <_dtoa_r+0xa60>
    3810:	01800044 	movi	r6,1
    3814:	d9800b15 	stw	r6,44(sp)
    3818:	003ff706 	br	37f8 <_dtoa_r+0xda4>
    381c:	01000044 	movi	r4,1
    3820:	d9000b15 	stw	r4,44(sp)
    3824:	003fea06 	br	37d0 <_dtoa_r+0xd7c>
    3828:	04000c0e 	bge	zero,r16,385c <_dtoa_r+0xe08>
    382c:	d9400717 	ldw	r5,28(sp)
    3830:	d9001617 	ldw	r4,88(sp)
    3834:	01800044 	movi	r6,1
    3838:	000652c0 	call	652c <__lshift>
    383c:	1009883a 	mov	r4,r2
    3840:	900b883a 	mov	r5,r18
    3844:	d8800715 	stw	r2,28(sp)
    3848:	0005d440 	call	5d44 <__mcmp>
    384c:	0081e00e 	bge	zero,r2,3fd0 <_dtoa_r+0x157c>
    3850:	bdc00044 	addi	r23,r23,1
    3854:	00800e84 	movi	r2,58
    3858:	b881a226 	beq	r23,r2,3ee4 <_dtoa_r+0x1490>
    385c:	b7000044 	addi	fp,r22,1
    3860:	b5c00005 	stb	r23,0(r22)
    3864:	003f7406 	br	3638 <_dtoa_r+0xbe4>
    3868:	00800e44 	movi	r2,57
    386c:	b8819d26 	beq	r23,r2,3ee4 <_dtoa_r+0x1490>
    3870:	053ffa0e 	bge	zero,r20,385c <_dtoa_r+0xe08>
    3874:	8dc00c44 	addi	r23,r17,49
    3878:	003ff806 	br	385c <_dtoa_r+0xe08>
    387c:	d9001617 	ldw	r4,88(sp)
    3880:	a80b883a 	mov	r5,r21
    3884:	04000044 	movi	r16,1
    3888:	0005be80 	call	5be8 <_Bfree>
    388c:	003edf06 	br	340c <_dtoa_r+0x9b8>
    3890:	d9001617 	ldw	r4,88(sp)
    3894:	980b883a 	mov	r5,r19
    3898:	01800284 	movi	r6,10
    389c:	000f883a 	mov	r7,zero
    38a0:	000689c0 	call	689c <__multadd>
    38a4:	1027883a 	mov	r19,r2
    38a8:	d8800615 	stw	r2,24(sp)
    38ac:	003ebb06 	br	339c <_dtoa_r+0x948>
    38b0:	d9801117 	ldw	r6,68(sp)
    38b4:	d8800d17 	ldw	r2,52(sp)
    38b8:	d8000915 	stw	zero,36(sp)
    38bc:	308dc83a 	sub	r6,r6,r2
    38c0:	0087c83a 	sub	r3,zero,r2
    38c4:	d9801115 	stw	r6,68(sp)
    38c8:	d8c01015 	stw	r3,64(sp)
    38cc:	003cfe06 	br	2cc8 <_dtoa_r+0x274>
    38d0:	018dc83a 	sub	r6,zero,r6
    38d4:	d9801115 	stw	r6,68(sp)
    38d8:	d8000a15 	stw	zero,40(sp)
    38dc:	003cf306 	br	2cac <_dtoa_r+0x258>
    38e0:	d9000d17 	ldw	r4,52(sp)
    38e4:	00092a00 	call	92a0 <__floatsidf>
    38e8:	880b883a 	mov	r5,r17
    38ec:	8009883a 	mov	r4,r16
    38f0:	180f883a 	mov	r7,r3
    38f4:	100d883a 	mov	r6,r2
    38f8:	00090800 	call	9080 <__nedf2>
    38fc:	103ce126 	beq	r2,zero,2c84 <_dtoa_r+0x230>
    3900:	d9800d17 	ldw	r6,52(sp)
    3904:	31bfffc4 	addi	r6,r6,-1
    3908:	d9800d15 	stw	r6,52(sp)
    390c:	003cdd06 	br	2c84 <_dtoa_r+0x230>
    3910:	d9000717 	ldw	r4,28(sp)
    3914:	900b883a 	mov	r5,r18
    3918:	0005d440 	call	5d44 <__mcmp>
    391c:	103e8d0e 	bge	r2,zero,3354 <_dtoa_r+0x900>
    3920:	d9400717 	ldw	r5,28(sp)
    3924:	d9001617 	ldw	r4,88(sp)
    3928:	01800284 	movi	r6,10
    392c:	000f883a 	mov	r7,zero
    3930:	000689c0 	call	689c <__multadd>
    3934:	d9800d17 	ldw	r6,52(sp)
    3938:	d8800715 	stw	r2,28(sp)
    393c:	31bfffc4 	addi	r6,r6,-1
    3940:	d9800d15 	stw	r6,52(sp)
    3944:	b001a71e 	bne	r22,zero,3fe4 <_dtoa_r+0x1590>
    3948:	d8800e17 	ldw	r2,56(sp)
    394c:	d8800f15 	stw	r2,60(sp)
    3950:	003e8006 	br	3354 <_dtoa_r+0x900>
    3954:	90800417 	ldw	r2,16(r18)
    3958:	1085883a 	add	r2,r2,r2
    395c:	1085883a 	add	r2,r2,r2
    3960:	1485883a 	add	r2,r2,r18
    3964:	11000417 	ldw	r4,16(r2)
    3968:	0005c100 	call	5c10 <__hi0bits>
    396c:	00c00804 	movi	r3,32
    3970:	1887c83a 	sub	r3,r3,r2
    3974:	003e5a06 	br	32e0 <_dtoa_r+0x88c>
    3978:	d9400717 	ldw	r5,28(sp)
    397c:	d9801017 	ldw	r6,64(sp)
    3980:	d9001617 	ldw	r4,88(sp)
    3984:	000699c0 	call	699c <__pow5mult>
    3988:	d8800715 	stw	r2,28(sp)
    398c:	003e4306 	br	329c <_dtoa_r+0x848>
    3990:	d9800f17 	ldw	r6,60(sp)
    3994:	d8800d17 	ldw	r2,52(sp)
    3998:	d9800315 	stw	r6,12(sp)
    399c:	d8800415 	stw	r2,16(sp)
    39a0:	d8c00b17 	ldw	r3,44(sp)
    39a4:	1805003a 	cmpeq	r2,r3,zero
    39a8:	1000e21e 	bne	r2,zero,3d34 <_dtoa_r+0x12e0>
    39ac:	d9000317 	ldw	r4,12(sp)
    39b0:	0005883a 	mov	r2,zero
    39b4:	00cff834 	movhi	r3,16352
    39b8:	200c90fa 	slli	r6,r4,3
    39bc:	010000f4 	movhi	r4,3
    39c0:	21004604 	addi	r4,r4,280
    39c4:	180b883a 	mov	r5,r3
    39c8:	310d883a 	add	r6,r6,r4
    39cc:	327fff17 	ldw	r9,-4(r6)
    39d0:	323ffe17 	ldw	r8,-8(r6)
    39d4:	1009883a 	mov	r4,r2
    39d8:	480f883a 	mov	r7,r9
    39dc:	400d883a 	mov	r6,r8
    39e0:	0008da00 	call	8da0 <__divdf3>
    39e4:	180b883a 	mov	r5,r3
    39e8:	b00d883a 	mov	r6,r22
    39ec:	b80f883a 	mov	r7,r23
    39f0:	1009883a 	mov	r4,r2
    39f4:	00088e80 	call	88e8 <__subdf3>
    39f8:	a80b883a 	mov	r5,r21
    39fc:	a009883a 	mov	r4,r20
    3a00:	d8c01915 	stw	r3,100(sp)
    3a04:	d8801815 	stw	r2,96(sp)
    3a08:	00093980 	call	9398 <__fixdfsi>
    3a0c:	1009883a 	mov	r4,r2
    3a10:	1027883a 	mov	r19,r2
    3a14:	00092a00 	call	92a0 <__floatsidf>
    3a18:	a80b883a 	mov	r5,r21
    3a1c:	a009883a 	mov	r4,r20
    3a20:	180f883a 	mov	r7,r3
    3a24:	100d883a 	mov	r6,r2
    3a28:	00088e80 	call	88e8 <__subdf3>
    3a2c:	d9801817 	ldw	r6,96(sp)
    3a30:	1823883a 	mov	r17,r3
    3a34:	d8801415 	stw	r2,80(sp)
    3a38:	302d883a 	mov	r22,r6
    3a3c:	d9800517 	ldw	r6,20(sp)
    3a40:	9cc00c04 	addi	r19,r19,48
    3a44:	dc401515 	stw	r17,84(sp)
    3a48:	d8c01917 	ldw	r3,100(sp)
    3a4c:	34c00005 	stb	r19,0(r6)
    3a50:	d8800517 	ldw	r2,20(sp)
    3a54:	d9401917 	ldw	r5,100(sp)
    3a58:	d9801417 	ldw	r6,80(sp)
    3a5c:	b009883a 	mov	r4,r22
    3a60:	880f883a 	mov	r7,r17
    3a64:	182f883a 	mov	r23,r3
    3a68:	17000044 	addi	fp,r2,1
    3a6c:	00091080 	call	9108 <__gtdf2>
    3a70:	00804e16 	blt	zero,r2,3bac <_dtoa_r+0x1158>
    3a74:	d9801417 	ldw	r6,80(sp)
    3a78:	0005883a 	mov	r2,zero
    3a7c:	00cffc34 	movhi	r3,16368
    3a80:	180b883a 	mov	r5,r3
    3a84:	880f883a 	mov	r7,r17
    3a88:	1009883a 	mov	r4,r2
    3a8c:	00088e80 	call	88e8 <__subdf3>
    3a90:	d9401917 	ldw	r5,100(sp)
    3a94:	180f883a 	mov	r7,r3
    3a98:	b009883a 	mov	r4,r22
    3a9c:	100d883a 	mov	r6,r2
    3aa0:	00091080 	call	9108 <__gtdf2>
    3aa4:	00bda216 	blt	zero,r2,3130 <_dtoa_r+0x6dc>
    3aa8:	d8c00317 	ldw	r3,12(sp)
    3aac:	00800044 	movi	r2,1
    3ab0:	10c01216 	blt	r2,r3,3afc <_dtoa_r+0x10a8>
    3ab4:	003d4506 	br	2fcc <_dtoa_r+0x578>
    3ab8:	d9801417 	ldw	r6,80(sp)
    3abc:	0005883a 	mov	r2,zero
    3ac0:	00cffc34 	movhi	r3,16368
    3ac4:	180b883a 	mov	r5,r3
    3ac8:	880f883a 	mov	r7,r17
    3acc:	1009883a 	mov	r4,r2
    3ad0:	00088e80 	call	88e8 <__subdf3>
    3ad4:	d9c01b17 	ldw	r7,108(sp)
    3ad8:	180b883a 	mov	r5,r3
    3adc:	1009883a 	mov	r4,r2
    3ae0:	b00d883a 	mov	r6,r22
    3ae4:	00092180 	call	9218 <__ltdf2>
    3ae8:	103d9116 	blt	r2,zero,3130 <_dtoa_r+0x6dc>
    3aec:	d9800517 	ldw	r6,20(sp)
    3af0:	d9000317 	ldw	r4,12(sp)
    3af4:	3105883a 	add	r2,r6,r4
    3af8:	e0bd3426 	beq	fp,r2,2fcc <_dtoa_r+0x578>
    3afc:	04500934 	movhi	r17,16420
    3b00:	0021883a 	mov	r16,zero
    3b04:	b80b883a 	mov	r5,r23
    3b08:	b009883a 	mov	r4,r22
    3b0c:	800d883a 	mov	r6,r16
    3b10:	880f883a 	mov	r7,r17
    3b14:	00089dc0 	call	89dc <__muldf3>
    3b18:	d9401517 	ldw	r5,84(sp)
    3b1c:	d9001417 	ldw	r4,80(sp)
    3b20:	880f883a 	mov	r7,r17
    3b24:	000d883a 	mov	r6,zero
    3b28:	d8801a15 	stw	r2,104(sp)
    3b2c:	d8c01b15 	stw	r3,108(sp)
    3b30:	00089dc0 	call	89dc <__muldf3>
    3b34:	180b883a 	mov	r5,r3
    3b38:	1009883a 	mov	r4,r2
    3b3c:	1823883a 	mov	r17,r3
    3b40:	1021883a 	mov	r16,r2
    3b44:	00093980 	call	9398 <__fixdfsi>
    3b48:	1009883a 	mov	r4,r2
    3b4c:	102b883a 	mov	r21,r2
    3b50:	00092a00 	call	92a0 <__floatsidf>
    3b54:	880b883a 	mov	r5,r17
    3b58:	8009883a 	mov	r4,r16
    3b5c:	180f883a 	mov	r7,r3
    3b60:	100d883a 	mov	r6,r2
    3b64:	00088e80 	call	88e8 <__subdf3>
    3b68:	1021883a 	mov	r16,r2
    3b6c:	d9001b17 	ldw	r4,108(sp)
    3b70:	1823883a 	mov	r17,r3
    3b74:	dc001415 	stw	r16,80(sp)
    3b78:	ad400c04 	addi	r21,r21,48
    3b7c:	dc401515 	stw	r17,84(sp)
    3b80:	d8801a17 	ldw	r2,104(sp)
    3b84:	e5400005 	stb	r21,0(fp)
    3b88:	202f883a 	mov	r23,r4
    3b8c:	d9c01b17 	ldw	r7,108(sp)
    3b90:	d9001417 	ldw	r4,80(sp)
    3b94:	880b883a 	mov	r5,r17
    3b98:	100d883a 	mov	r6,r2
    3b9c:	102d883a 	mov	r22,r2
    3ba0:	e7000044 	addi	fp,fp,1
    3ba4:	00092180 	call	9218 <__ltdf2>
    3ba8:	103fc30e 	bge	r2,zero,3ab8 <_dtoa_r+0x1064>
    3bac:	d9000417 	ldw	r4,16(sp)
    3bb0:	d9000d15 	stw	r4,52(sp)
    3bb4:	003d7106 	br	317c <_dtoa_r+0x728>
    3bb8:	d9801717 	ldw	r6,92(sp)
    3bbc:	00800084 	movi	r2,2
    3bc0:	11bde60e 	bge	r2,r6,335c <_dtoa_r+0x908>
    3bc4:	203cfb1e 	bne	r4,zero,2fb4 <_dtoa_r+0x560>
    3bc8:	d9001617 	ldw	r4,88(sp)
    3bcc:	900b883a 	mov	r5,r18
    3bd0:	01800144 	movi	r6,5
    3bd4:	000f883a 	mov	r7,zero
    3bd8:	000689c0 	call	689c <__multadd>
    3bdc:	d9000717 	ldw	r4,28(sp)
    3be0:	100b883a 	mov	r5,r2
    3be4:	1025883a 	mov	r18,r2
    3be8:	0005d440 	call	5d44 <__mcmp>
    3bec:	00bcf10e 	bge	zero,r2,2fb4 <_dtoa_r+0x560>
    3bf0:	d8c00d17 	ldw	r3,52(sp)
    3bf4:	d9000517 	ldw	r4,20(sp)
    3bf8:	d8000615 	stw	zero,24(sp)
    3bfc:	18c00044 	addi	r3,r3,1
    3c00:	d8c00d15 	stw	r3,52(sp)
    3c04:	00800c44 	movi	r2,49
    3c08:	27000044 	addi	fp,r4,1
    3c0c:	20800005 	stb	r2,0(r4)
    3c10:	003e8906 	br	3638 <_dtoa_r+0xbe4>
    3c14:	d8c00517 	ldw	r3,20(sp)
    3c18:	003bc206 	br	2b24 <_dtoa_r+0xd0>
    3c1c:	018000f4 	movhi	r6,3
    3c20:	31807804 	addi	r6,r6,480
    3c24:	30c00917 	ldw	r3,36(r6)
    3c28:	30800817 	ldw	r2,32(r6)
    3c2c:	d9001217 	ldw	r4,72(sp)
    3c30:	d9401317 	ldw	r5,76(sp)
    3c34:	180f883a 	mov	r7,r3
    3c38:	100d883a 	mov	r6,r2
    3c3c:	0008da00 	call	8da0 <__divdf3>
    3c40:	948003cc 	andi	r18,r18,15
    3c44:	058000c4 	movi	r22,3
    3c48:	1029883a 	mov	r20,r2
    3c4c:	182b883a 	mov	r21,r3
    3c50:	003c8906 	br	2e78 <_dtoa_r+0x424>
    3c54:	d9001017 	ldw	r4,64(sp)
    3c58:	d9800917 	ldw	r6,36(sp)
    3c5c:	0025883a 	mov	r18,zero
    3c60:	1105c83a 	sub	r2,r2,r4
    3c64:	2089883a 	add	r4,r4,r2
    3c68:	308d883a 	add	r6,r6,r2
    3c6c:	d9001015 	stw	r4,64(sp)
    3c70:	d9800915 	stw	r6,36(sp)
    3c74:	003e3206 	br	3540 <_dtoa_r+0xaec>
    3c78:	28800044 	addi	r2,r5,1
    3c7c:	27000044 	addi	fp,r4,1
    3c80:	20800005 	stb	r2,0(r4)
    3c84:	003e6c06 	br	3638 <_dtoa_r+0xbe4>
    3c88:	d8800f17 	ldw	r2,60(sp)
    3c8c:	00bce016 	blt	zero,r2,3010 <_dtoa_r+0x5bc>
    3c90:	d9800f17 	ldw	r6,60(sp)
    3c94:	303cc51e 	bne	r6,zero,2fac <_dtoa_r+0x558>
    3c98:	0005883a 	mov	r2,zero
    3c9c:	00d00534 	movhi	r3,16404
    3ca0:	980b883a 	mov	r5,r19
    3ca4:	180f883a 	mov	r7,r3
    3ca8:	9009883a 	mov	r4,r18
    3cac:	100d883a 	mov	r6,r2
    3cb0:	00089dc0 	call	89dc <__muldf3>
    3cb4:	180b883a 	mov	r5,r3
    3cb8:	a80f883a 	mov	r7,r21
    3cbc:	1009883a 	mov	r4,r2
    3cc0:	a00d883a 	mov	r6,r20
    3cc4:	00091900 	call	9190 <__gedf2>
    3cc8:	103cb80e 	bge	r2,zero,2fac <_dtoa_r+0x558>
    3ccc:	0027883a 	mov	r19,zero
    3cd0:	0025883a 	mov	r18,zero
    3cd4:	003fc606 	br	3bf0 <_dtoa_r+0x119c>
    3cd8:	99400117 	ldw	r5,4(r19)
    3cdc:	d9001617 	ldw	r4,88(sp)
    3ce0:	00061680 	call	6168 <_Balloc>
    3ce4:	99800417 	ldw	r6,16(r19)
    3ce8:	11000304 	addi	r4,r2,12
    3cec:	99400304 	addi	r5,r19,12
    3cf0:	318d883a 	add	r6,r6,r6
    3cf4:	318d883a 	add	r6,r6,r6
    3cf8:	31800204 	addi	r6,r6,8
    3cfc:	1023883a 	mov	r17,r2
    3d00:	00059d00 	call	59d0 <memcpy>
    3d04:	d9001617 	ldw	r4,88(sp)
    3d08:	880b883a 	mov	r5,r17
    3d0c:	01800044 	movi	r6,1
    3d10:	000652c0 	call	652c <__lshift>
    3d14:	100b883a 	mov	r5,r2
    3d18:	003d9c06 	br	338c <_dtoa_r+0x938>
    3d1c:	00800e44 	movi	r2,57
    3d20:	b8807026 	beq	r23,r2,3ee4 <_dtoa_r+0x1490>
    3d24:	b8800044 	addi	r2,r23,1
    3d28:	b7000044 	addi	fp,r22,1
    3d2c:	b0800005 	stb	r2,0(r22)
    3d30:	003e4106 	br	3638 <_dtoa_r+0xbe4>
    3d34:	d8800317 	ldw	r2,12(sp)
    3d38:	018000f4 	movhi	r6,3
    3d3c:	31804604 	addi	r6,r6,280
    3d40:	b009883a 	mov	r4,r22
    3d44:	100e90fa 	slli	r7,r2,3
    3d48:	b80b883a 	mov	r5,r23
    3d4c:	398f883a 	add	r7,r7,r6
    3d50:	38bffe17 	ldw	r2,-8(r7)
    3d54:	d9800517 	ldw	r6,20(sp)
    3d58:	38ffff17 	ldw	r3,-4(r7)
    3d5c:	37000044 	addi	fp,r6,1
    3d60:	180f883a 	mov	r7,r3
    3d64:	100d883a 	mov	r6,r2
    3d68:	00089dc0 	call	89dc <__muldf3>
    3d6c:	a80b883a 	mov	r5,r21
    3d70:	a009883a 	mov	r4,r20
    3d74:	182f883a 	mov	r23,r3
    3d78:	102d883a 	mov	r22,r2
    3d7c:	00093980 	call	9398 <__fixdfsi>
    3d80:	1009883a 	mov	r4,r2
    3d84:	1027883a 	mov	r19,r2
    3d88:	00092a00 	call	92a0 <__floatsidf>
    3d8c:	a80b883a 	mov	r5,r21
    3d90:	a009883a 	mov	r4,r20
    3d94:	180f883a 	mov	r7,r3
    3d98:	100d883a 	mov	r6,r2
    3d9c:	00088e80 	call	88e8 <__subdf3>
    3da0:	180b883a 	mov	r5,r3
    3da4:	d8c00517 	ldw	r3,20(sp)
    3da8:	9cc00c04 	addi	r19,r19,48
    3dac:	1009883a 	mov	r4,r2
    3db0:	1cc00005 	stb	r19,0(r3)
    3db4:	2021883a 	mov	r16,r4
    3db8:	d9000317 	ldw	r4,12(sp)
    3dbc:	00800044 	movi	r2,1
    3dc0:	2823883a 	mov	r17,r5
    3dc4:	20802226 	beq	r4,r2,3e50 <_dtoa_r+0x13fc>
    3dc8:	1029883a 	mov	r20,r2
    3dcc:	0005883a 	mov	r2,zero
    3dd0:	00d00934 	movhi	r3,16420
    3dd4:	180f883a 	mov	r7,r3
    3dd8:	100d883a 	mov	r6,r2
    3ddc:	880b883a 	mov	r5,r17
    3de0:	8009883a 	mov	r4,r16
    3de4:	00089dc0 	call	89dc <__muldf3>
    3de8:	180b883a 	mov	r5,r3
    3dec:	1009883a 	mov	r4,r2
    3df0:	1823883a 	mov	r17,r3
    3df4:	1021883a 	mov	r16,r2
    3df8:	00093980 	call	9398 <__fixdfsi>
    3dfc:	1009883a 	mov	r4,r2
    3e00:	102b883a 	mov	r21,r2
    3e04:	00092a00 	call	92a0 <__floatsidf>
    3e08:	880b883a 	mov	r5,r17
    3e0c:	8009883a 	mov	r4,r16
    3e10:	180f883a 	mov	r7,r3
    3e14:	100d883a 	mov	r6,r2
    3e18:	00088e80 	call	88e8 <__subdf3>
    3e1c:	180b883a 	mov	r5,r3
    3e20:	d8c00517 	ldw	r3,20(sp)
    3e24:	1009883a 	mov	r4,r2
    3e28:	ad400c04 	addi	r21,r21,48
    3e2c:	1d05883a 	add	r2,r3,r20
    3e30:	15400005 	stb	r21,0(r2)
    3e34:	2021883a 	mov	r16,r4
    3e38:	d9000317 	ldw	r4,12(sp)
    3e3c:	a5000044 	addi	r20,r20,1
    3e40:	2823883a 	mov	r17,r5
    3e44:	a13fe11e 	bne	r20,r4,3dcc <_dtoa_r+0x1378>
    3e48:	e505883a 	add	r2,fp,r20
    3e4c:	173fffc4 	addi	fp,r2,-1
    3e50:	0025883a 	mov	r18,zero
    3e54:	04cff834 	movhi	r19,16352
    3e58:	b009883a 	mov	r4,r22
    3e5c:	b80b883a 	mov	r5,r23
    3e60:	900d883a 	mov	r6,r18
    3e64:	980f883a 	mov	r7,r19
    3e68:	00089680 	call	8968 <__adddf3>
    3e6c:	180b883a 	mov	r5,r3
    3e70:	1009883a 	mov	r4,r2
    3e74:	800d883a 	mov	r6,r16
    3e78:	880f883a 	mov	r7,r17
    3e7c:	00092180 	call	9218 <__ltdf2>
    3e80:	103cab16 	blt	r2,zero,3130 <_dtoa_r+0x6dc>
    3e84:	0009883a 	mov	r4,zero
    3e88:	980b883a 	mov	r5,r19
    3e8c:	b80f883a 	mov	r7,r23
    3e90:	b00d883a 	mov	r6,r22
    3e94:	00088e80 	call	88e8 <__subdf3>
    3e98:	180b883a 	mov	r5,r3
    3e9c:	880f883a 	mov	r7,r17
    3ea0:	1009883a 	mov	r4,r2
    3ea4:	800d883a 	mov	r6,r16
    3ea8:	00091080 	call	9108 <__gtdf2>
    3eac:	00bc470e 	bge	zero,r2,2fcc <_dtoa_r+0x578>
    3eb0:	00c00c04 	movi	r3,48
    3eb4:	e73fffc4 	addi	fp,fp,-1
    3eb8:	e0800007 	ldb	r2,0(fp)
    3ebc:	10fffd26 	beq	r2,r3,3eb4 <_dtoa_r+0x1460>
    3ec0:	d9800417 	ldw	r6,16(sp)
    3ec4:	e7000044 	addi	fp,fp,1
    3ec8:	d9800d15 	stw	r6,52(sp)
    3ecc:	003cab06 	br	317c <_dtoa_r+0x728>
    3ed0:	d8c00f17 	ldw	r3,60(sp)
    3ed4:	d9001117 	ldw	r4,68(sp)
    3ed8:	20e1c83a 	sub	r16,r4,r3
    3edc:	0007883a 	mov	r3,zero
    3ee0:	003d9b06 	br	3550 <_dtoa_r+0xafc>
    3ee4:	00800e44 	movi	r2,57
    3ee8:	b0800005 	stb	r2,0(r22)
    3eec:	b5800044 	addi	r22,r22,1
    3ef0:	003dc106 	br	35f8 <_dtoa_r+0xba4>
    3ef4:	05800084 	movi	r22,2
    3ef8:	003bf706 	br	2ed8 <_dtoa_r+0x484>
    3efc:	d9000f17 	ldw	r4,60(sp)
    3f00:	013c000e 	bge	zero,r4,2f04 <_dtoa_r+0x4b0>
    3f04:	d9800e17 	ldw	r6,56(sp)
    3f08:	01bc300e 	bge	zero,r6,2fcc <_dtoa_r+0x578>
    3f0c:	0005883a 	mov	r2,zero
    3f10:	00d00934 	movhi	r3,16420
    3f14:	a80b883a 	mov	r5,r21
    3f18:	180f883a 	mov	r7,r3
    3f1c:	a009883a 	mov	r4,r20
    3f20:	100d883a 	mov	r6,r2
    3f24:	00089dc0 	call	89dc <__muldf3>
    3f28:	b1000044 	addi	r4,r22,1
    3f2c:	1021883a 	mov	r16,r2
    3f30:	1823883a 	mov	r17,r3
    3f34:	00092a00 	call	92a0 <__floatsidf>
    3f38:	880b883a 	mov	r5,r17
    3f3c:	8009883a 	mov	r4,r16
    3f40:	180f883a 	mov	r7,r3
    3f44:	100d883a 	mov	r6,r2
    3f48:	00089dc0 	call	89dc <__muldf3>
    3f4c:	0011883a 	mov	r8,zero
    3f50:	02500734 	movhi	r9,16412
    3f54:	180b883a 	mov	r5,r3
    3f58:	480f883a 	mov	r7,r9
    3f5c:	1009883a 	mov	r4,r2
    3f60:	400d883a 	mov	r6,r8
    3f64:	00089680 	call	8968 <__adddf3>
    3f68:	102d883a 	mov	r22,r2
    3f6c:	00bf3034 	movhi	r2,64704
    3f70:	10ef883a 	add	r23,r2,r3
    3f74:	d8800d17 	ldw	r2,52(sp)
    3f78:	d8c00e17 	ldw	r3,56(sp)
    3f7c:	8029883a 	mov	r20,r16
    3f80:	10bfffc4 	addi	r2,r2,-1
    3f84:	882b883a 	mov	r21,r17
    3f88:	d8800415 	stw	r2,16(sp)
    3f8c:	d8c00315 	stw	r3,12(sp)
    3f90:	003e8306 	br	39a0 <_dtoa_r+0xf4c>
    3f94:	d8800117 	ldw	r2,4(sp)
    3f98:	dc001117 	ldw	r16,68(sp)
    3f9c:	dc801017 	ldw	r18,64(sp)
    3fa0:	00c00d84 	movi	r3,54
    3fa4:	1887c83a 	sub	r3,r3,r2
    3fa8:	003d6906 	br	3550 <_dtoa_r+0xafc>
    3fac:	01800044 	movi	r6,1
    3fb0:	3021883a 	mov	r16,r6
    3fb4:	d9800f15 	stw	r6,60(sp)
    3fb8:	d9802615 	stw	r6,152(sp)
    3fbc:	d9800e15 	stw	r6,56(sp)
    3fc0:	003b9306 	br	2e10 <_dtoa_r+0x3bc>
    3fc4:	b021883a 	mov	r16,r22
    3fc8:	dd800f15 	stw	r22,60(sp)
    3fcc:	003b9006 	br	2e10 <_dtoa_r+0x3bc>
    3fd0:	103e221e 	bne	r2,zero,385c <_dtoa_r+0xe08>
    3fd4:	b880004c 	andi	r2,r23,1
    3fd8:	1005003a 	cmpeq	r2,r2,zero
    3fdc:	103e1f1e 	bne	r2,zero,385c <_dtoa_r+0xe08>
    3fe0:	003e1b06 	br	3850 <_dtoa_r+0xdfc>
    3fe4:	d9001617 	ldw	r4,88(sp)
    3fe8:	980b883a 	mov	r5,r19
    3fec:	01800284 	movi	r6,10
    3ff0:	000f883a 	mov	r7,zero
    3ff4:	000689c0 	call	689c <__multadd>
    3ff8:	d8c00e17 	ldw	r3,56(sp)
    3ffc:	1027883a 	mov	r19,r2
    4000:	d8c00f15 	stw	r3,60(sp)
    4004:	003cd306 	br	3354 <_dtoa_r+0x900>

00004008 <_fflush_r>:
    4008:	defffb04 	addi	sp,sp,-20
    400c:	dcc00315 	stw	r19,12(sp)
    4010:	dc800215 	stw	r18,8(sp)
    4014:	dfc00415 	stw	ra,16(sp)
    4018:	dc400115 	stw	r17,4(sp)
    401c:	dc000015 	stw	r16,0(sp)
    4020:	2027883a 	mov	r19,r4
    4024:	2825883a 	mov	r18,r5
    4028:	20000226 	beq	r4,zero,4034 <_fflush_r+0x2c>
    402c:	20800e17 	ldw	r2,56(r4)
    4030:	10005626 	beq	r2,zero,418c <_fflush_r+0x184>
    4034:	9100030b 	ldhu	r4,12(r18)
    4038:	20ffffcc 	andi	r3,r4,65535
    403c:	18e0001c 	xori	r3,r3,32768
    4040:	18e00004 	addi	r3,r3,-32768
    4044:	1880020c 	andi	r2,r3,8
    4048:	1000261e 	bne	r2,zero,40e4 <_fflush_r+0xdc>
    404c:	90c00117 	ldw	r3,4(r18)
    4050:	20820014 	ori	r2,r4,2048
    4054:	9080030d 	sth	r2,12(r18)
    4058:	1009883a 	mov	r4,r2
    405c:	00c0400e 	bge	zero,r3,4160 <_fflush_r+0x158>
    4060:	92000a17 	ldw	r8,40(r18)
    4064:	40004026 	beq	r8,zero,4168 <_fflush_r+0x160>
    4068:	2084000c 	andi	r2,r4,4096
    406c:	10005326 	beq	r2,zero,41bc <_fflush_r+0x1b4>
    4070:	94001417 	ldw	r16,80(r18)
    4074:	9080030b 	ldhu	r2,12(r18)
    4078:	1080010c 	andi	r2,r2,4
    407c:	1000481e 	bne	r2,zero,41a0 <_fflush_r+0x198>
    4080:	91400717 	ldw	r5,28(r18)
    4084:	9809883a 	mov	r4,r19
    4088:	800d883a 	mov	r6,r16
    408c:	000f883a 	mov	r7,zero
    4090:	403ee83a 	callr	r8
    4094:	8080261e 	bne	r16,r2,4130 <_fflush_r+0x128>
    4098:	9080030b 	ldhu	r2,12(r18)
    409c:	91000417 	ldw	r4,16(r18)
    40a0:	90000115 	stw	zero,4(r18)
    40a4:	10bdffcc 	andi	r2,r2,63487
    40a8:	10ffffcc 	andi	r3,r2,65535
    40ac:	18c4000c 	andi	r3,r3,4096
    40b0:	9080030d 	sth	r2,12(r18)
    40b4:	91000015 	stw	r4,0(r18)
    40b8:	18002b26 	beq	r3,zero,4168 <_fflush_r+0x160>
    40bc:	0007883a 	mov	r3,zero
    40c0:	1805883a 	mov	r2,r3
    40c4:	94001415 	stw	r16,80(r18)
    40c8:	dfc00417 	ldw	ra,16(sp)
    40cc:	dcc00317 	ldw	r19,12(sp)
    40d0:	dc800217 	ldw	r18,8(sp)
    40d4:	dc400117 	ldw	r17,4(sp)
    40d8:	dc000017 	ldw	r16,0(sp)
    40dc:	dec00504 	addi	sp,sp,20
    40e0:	f800283a 	ret
    40e4:	94400417 	ldw	r17,16(r18)
    40e8:	88001f26 	beq	r17,zero,4168 <_fflush_r+0x160>
    40ec:	90800017 	ldw	r2,0(r18)
    40f0:	18c000cc 	andi	r3,r3,3
    40f4:	94400015 	stw	r17,0(r18)
    40f8:	1461c83a 	sub	r16,r2,r17
    40fc:	18002526 	beq	r3,zero,4194 <_fflush_r+0x18c>
    4100:	0005883a 	mov	r2,zero
    4104:	90800215 	stw	r2,8(r18)
    4108:	0400170e 	bge	zero,r16,4168 <_fflush_r+0x160>
    410c:	90c00917 	ldw	r3,36(r18)
    4110:	91400717 	ldw	r5,28(r18)
    4114:	880d883a 	mov	r6,r17
    4118:	800f883a 	mov	r7,r16
    411c:	9809883a 	mov	r4,r19
    4120:	183ee83a 	callr	r3
    4124:	88a3883a 	add	r17,r17,r2
    4128:	80a1c83a 	sub	r16,r16,r2
    412c:	00bff616 	blt	zero,r2,4108 <_fflush_r+0x100>
    4130:	9080030b 	ldhu	r2,12(r18)
    4134:	00ffffc4 	movi	r3,-1
    4138:	10801014 	ori	r2,r2,64
    413c:	9080030d 	sth	r2,12(r18)
    4140:	1805883a 	mov	r2,r3
    4144:	dfc00417 	ldw	ra,16(sp)
    4148:	dcc00317 	ldw	r19,12(sp)
    414c:	dc800217 	ldw	r18,8(sp)
    4150:	dc400117 	ldw	r17,4(sp)
    4154:	dc000017 	ldw	r16,0(sp)
    4158:	dec00504 	addi	sp,sp,20
    415c:	f800283a 	ret
    4160:	90800f17 	ldw	r2,60(r18)
    4164:	00bfbe16 	blt	zero,r2,4060 <_fflush_r+0x58>
    4168:	0007883a 	mov	r3,zero
    416c:	1805883a 	mov	r2,r3
    4170:	dfc00417 	ldw	ra,16(sp)
    4174:	dcc00317 	ldw	r19,12(sp)
    4178:	dc800217 	ldw	r18,8(sp)
    417c:	dc400117 	ldw	r17,4(sp)
    4180:	dc000017 	ldw	r16,0(sp)
    4184:	dec00504 	addi	sp,sp,20
    4188:	f800283a 	ret
    418c:	00042a00 	call	42a0 <__sinit>
    4190:	003fa806 	br	4034 <_fflush_r+0x2c>
    4194:	90800517 	ldw	r2,20(r18)
    4198:	90800215 	stw	r2,8(r18)
    419c:	003fda06 	br	4108 <_fflush_r+0x100>
    41a0:	90800117 	ldw	r2,4(r18)
    41a4:	90c00c17 	ldw	r3,48(r18)
    41a8:	80a1c83a 	sub	r16,r16,r2
    41ac:	183fb426 	beq	r3,zero,4080 <_fflush_r+0x78>
    41b0:	90800f17 	ldw	r2,60(r18)
    41b4:	80a1c83a 	sub	r16,r16,r2
    41b8:	003fb106 	br	4080 <_fflush_r+0x78>
    41bc:	91400717 	ldw	r5,28(r18)
    41c0:	9809883a 	mov	r4,r19
    41c4:	000d883a 	mov	r6,zero
    41c8:	01c00044 	movi	r7,1
    41cc:	403ee83a 	callr	r8
    41d0:	1021883a 	mov	r16,r2
    41d4:	00bfffc4 	movi	r2,-1
    41d8:	80800226 	beq	r16,r2,41e4 <_fflush_r+0x1dc>
    41dc:	92000a17 	ldw	r8,40(r18)
    41e0:	003fa406 	br	4074 <_fflush_r+0x6c>
    41e4:	98c00017 	ldw	r3,0(r19)
    41e8:	00800744 	movi	r2,29
    41ec:	18bfde26 	beq	r3,r2,4168 <_fflush_r+0x160>
    41f0:	9080030b 	ldhu	r2,12(r18)
    41f4:	8007883a 	mov	r3,r16
    41f8:	10801014 	ori	r2,r2,64
    41fc:	9080030d 	sth	r2,12(r18)
    4200:	003fcf06 	br	4140 <_fflush_r+0x138>

00004204 <fflush>:
    4204:	01400034 	movhi	r5,0
    4208:	29500204 	addi	r5,r5,16392
    420c:	2007883a 	mov	r3,r4
    4210:	20000526 	beq	r4,zero,4228 <fflush+0x24>
    4214:	008000f4 	movhi	r2,3
    4218:	10876804 	addi	r2,r2,7584
    421c:	11000017 	ldw	r4,0(r2)
    4220:	180b883a 	mov	r5,r3
    4224:	00040081 	jmpi	4008 <_fflush_r>
    4228:	008000f4 	movhi	r2,3
    422c:	10876904 	addi	r2,r2,7588
    4230:	11000017 	ldw	r4,0(r2)
    4234:	0004dd41 	jmpi	4dd4 <_fwalk_reent>

00004238 <std>:
    4238:	00800034 	movhi	r2,0
    423c:	109cac04 	addi	r2,r2,29360
    4240:	20800b15 	stw	r2,44(r4)
    4244:	00800034 	movhi	r2,0
    4248:	109ce704 	addi	r2,r2,29596
    424c:	20800815 	stw	r2,32(r4)
    4250:	00c00034 	movhi	r3,0
    4254:	18dcc804 	addi	r3,r3,29472
    4258:	00800034 	movhi	r2,0
    425c:	109cae04 	addi	r2,r2,29368
    4260:	2140030d 	sth	r5,12(r4)
    4264:	2180038d 	sth	r6,14(r4)
    4268:	20c00915 	stw	r3,36(r4)
    426c:	20800a15 	stw	r2,40(r4)
    4270:	20000015 	stw	zero,0(r4)
    4274:	20000115 	stw	zero,4(r4)
    4278:	20000215 	stw	zero,8(r4)
    427c:	20000415 	stw	zero,16(r4)
    4280:	20000515 	stw	zero,20(r4)
    4284:	20000615 	stw	zero,24(r4)
    4288:	21000715 	stw	r4,28(r4)
    428c:	f800283a 	ret

00004290 <__sfp_lock_acquire>:
    4290:	f800283a 	ret

00004294 <__sfp_lock_release>:
    4294:	f800283a 	ret

00004298 <__sinit_lock_acquire>:
    4298:	f800283a 	ret

0000429c <__sinit_lock_release>:
    429c:	f800283a 	ret

000042a0 <__sinit>:
    42a0:	20800e17 	ldw	r2,56(r4)
    42a4:	defffd04 	addi	sp,sp,-12
    42a8:	dc400115 	stw	r17,4(sp)
    42ac:	dc000015 	stw	r16,0(sp)
    42b0:	dfc00215 	stw	ra,8(sp)
    42b4:	04400044 	movi	r17,1
    42b8:	01400104 	movi	r5,4
    42bc:	000d883a 	mov	r6,zero
    42c0:	2021883a 	mov	r16,r4
    42c4:	2200bb04 	addi	r8,r4,748
    42c8:	200f883a 	mov	r7,r4
    42cc:	10000526 	beq	r2,zero,42e4 <__sinit+0x44>
    42d0:	dfc00217 	ldw	ra,8(sp)
    42d4:	dc400117 	ldw	r17,4(sp)
    42d8:	dc000017 	ldw	r16,0(sp)
    42dc:	dec00304 	addi	sp,sp,12
    42e0:	f800283a 	ret
    42e4:	21000117 	ldw	r4,4(r4)
    42e8:	00800034 	movhi	r2,0
    42ec:	1090e104 	addi	r2,r2,17284
    42f0:	00c000c4 	movi	r3,3
    42f4:	80800f15 	stw	r2,60(r16)
    42f8:	80c0b915 	stw	r3,740(r16)
    42fc:	8200ba15 	stw	r8,744(r16)
    4300:	84400e15 	stw	r17,56(r16)
    4304:	8000b815 	stw	zero,736(r16)
    4308:	00042380 	call	4238 <std>
    430c:	81000217 	ldw	r4,8(r16)
    4310:	880d883a 	mov	r6,r17
    4314:	800f883a 	mov	r7,r16
    4318:	01400284 	movi	r5,10
    431c:	00042380 	call	4238 <std>
    4320:	81000317 	ldw	r4,12(r16)
    4324:	800f883a 	mov	r7,r16
    4328:	01400484 	movi	r5,18
    432c:	01800084 	movi	r6,2
    4330:	dfc00217 	ldw	ra,8(sp)
    4334:	dc400117 	ldw	r17,4(sp)
    4338:	dc000017 	ldw	r16,0(sp)
    433c:	dec00304 	addi	sp,sp,12
    4340:	00042381 	jmpi	4238 <std>

00004344 <__fp_lock>:
    4344:	0005883a 	mov	r2,zero
    4348:	f800283a 	ret

0000434c <__fp_unlock>:
    434c:	0005883a 	mov	r2,zero
    4350:	f800283a 	ret

00004354 <__fp_unlock_all>:
    4354:	008000f4 	movhi	r2,3
    4358:	10876804 	addi	r2,r2,7584
    435c:	11000017 	ldw	r4,0(r2)
    4360:	01400034 	movhi	r5,0
    4364:	2950d304 	addi	r5,r5,17228
    4368:	0004e9c1 	jmpi	4e9c <_fwalk>

0000436c <__fp_lock_all>:
    436c:	008000f4 	movhi	r2,3
    4370:	10876804 	addi	r2,r2,7584
    4374:	11000017 	ldw	r4,0(r2)
    4378:	01400034 	movhi	r5,0
    437c:	2950d104 	addi	r5,r5,17220
    4380:	0004e9c1 	jmpi	4e9c <_fwalk>

00004384 <_cleanup_r>:
    4384:	01400034 	movhi	r5,0
    4388:	295dd904 	addi	r5,r5,30564
    438c:	0004e9c1 	jmpi	4e9c <_fwalk>

00004390 <_cleanup>:
    4390:	008000f4 	movhi	r2,3
    4394:	10876904 	addi	r2,r2,7588
    4398:	11000017 	ldw	r4,0(r2)
    439c:	00043841 	jmpi	4384 <_cleanup_r>

000043a0 <__sfmoreglue>:
    43a0:	defffc04 	addi	sp,sp,-16
    43a4:	dc400115 	stw	r17,4(sp)
    43a8:	2c401724 	muli	r17,r5,92
    43ac:	dc800215 	stw	r18,8(sp)
    43b0:	2825883a 	mov	r18,r5
    43b4:	89400304 	addi	r5,r17,12
    43b8:	dc000015 	stw	r16,0(sp)
    43bc:	dfc00315 	stw	ra,12(sp)
    43c0:	00051ac0 	call	51ac <_malloc_r>
    43c4:	0021883a 	mov	r16,zero
    43c8:	880d883a 	mov	r6,r17
    43cc:	000b883a 	mov	r5,zero
    43d0:	10000626 	beq	r2,zero,43ec <__sfmoreglue+0x4c>
    43d4:	11000304 	addi	r4,r2,12
    43d8:	14800115 	stw	r18,4(r2)
    43dc:	10000015 	stw	zero,0(r2)
    43e0:	11000215 	stw	r4,8(r2)
    43e4:	1021883a 	mov	r16,r2
    43e8:	0005b500 	call	5b50 <memset>
    43ec:	8005883a 	mov	r2,r16
    43f0:	dfc00317 	ldw	ra,12(sp)
    43f4:	dc800217 	ldw	r18,8(sp)
    43f8:	dc400117 	ldw	r17,4(sp)
    43fc:	dc000017 	ldw	r16,0(sp)
    4400:	dec00404 	addi	sp,sp,16
    4404:	f800283a 	ret

00004408 <__sfp>:
    4408:	defffd04 	addi	sp,sp,-12
    440c:	008000f4 	movhi	r2,3
    4410:	10876904 	addi	r2,r2,7588
    4414:	dc000015 	stw	r16,0(sp)
    4418:	14000017 	ldw	r16,0(r2)
    441c:	dc400115 	stw	r17,4(sp)
    4420:	dfc00215 	stw	ra,8(sp)
    4424:	80800e17 	ldw	r2,56(r16)
    4428:	2023883a 	mov	r17,r4
    442c:	10002626 	beq	r2,zero,44c8 <__sfp+0xc0>
    4430:	8400b804 	addi	r16,r16,736
    4434:	80800117 	ldw	r2,4(r16)
    4438:	81000217 	ldw	r4,8(r16)
    443c:	10ffffc4 	addi	r3,r2,-1
    4440:	18000916 	blt	r3,zero,4468 <__sfp+0x60>
    4444:	2080030f 	ldh	r2,12(r4)
    4448:	10000b26 	beq	r2,zero,4478 <__sfp+0x70>
    444c:	017fffc4 	movi	r5,-1
    4450:	00000206 	br	445c <__sfp+0x54>
    4454:	2080030f 	ldh	r2,12(r4)
    4458:	10000726 	beq	r2,zero,4478 <__sfp+0x70>
    445c:	18ffffc4 	addi	r3,r3,-1
    4460:	21001704 	addi	r4,r4,92
    4464:	197ffb1e 	bne	r3,r5,4454 <__sfp+0x4c>
    4468:	80800017 	ldw	r2,0(r16)
    446c:	10001926 	beq	r2,zero,44d4 <__sfp+0xcc>
    4470:	1021883a 	mov	r16,r2
    4474:	003fef06 	br	4434 <__sfp+0x2c>
    4478:	00bfffc4 	movi	r2,-1
    447c:	00c00044 	movi	r3,1
    4480:	2080038d 	sth	r2,14(r4)
    4484:	20c0030d 	sth	r3,12(r4)
    4488:	20000015 	stw	zero,0(r4)
    448c:	20000215 	stw	zero,8(r4)
    4490:	20000115 	stw	zero,4(r4)
    4494:	20000415 	stw	zero,16(r4)
    4498:	20000515 	stw	zero,20(r4)
    449c:	20000615 	stw	zero,24(r4)
    44a0:	20000c15 	stw	zero,48(r4)
    44a4:	20000d15 	stw	zero,52(r4)
    44a8:	20001115 	stw	zero,68(r4)
    44ac:	20001215 	stw	zero,72(r4)
    44b0:	2005883a 	mov	r2,r4
    44b4:	dfc00217 	ldw	ra,8(sp)
    44b8:	dc400117 	ldw	r17,4(sp)
    44bc:	dc000017 	ldw	r16,0(sp)
    44c0:	dec00304 	addi	sp,sp,12
    44c4:	f800283a 	ret
    44c8:	8009883a 	mov	r4,r16
    44cc:	00042a00 	call	42a0 <__sinit>
    44d0:	003fd706 	br	4430 <__sfp+0x28>
    44d4:	8809883a 	mov	r4,r17
    44d8:	01400104 	movi	r5,4
    44dc:	00043a00 	call	43a0 <__sfmoreglue>
    44e0:	80800015 	stw	r2,0(r16)
    44e4:	103fe21e 	bne	r2,zero,4470 <__sfp+0x68>
    44e8:	00800304 	movi	r2,12
    44ec:	0009883a 	mov	r4,zero
    44f0:	88800015 	stw	r2,0(r17)
    44f4:	003fee06 	br	44b0 <__sfp+0xa8>

000044f8 <_malloc_trim_r>:
    44f8:	defffb04 	addi	sp,sp,-20
    44fc:	dcc00315 	stw	r19,12(sp)
    4500:	04c000f4 	movhi	r19,3
    4504:	9cc1e404 	addi	r19,r19,1936
    4508:	dc800215 	stw	r18,8(sp)
    450c:	dc400115 	stw	r17,4(sp)
    4510:	dc000015 	stw	r16,0(sp)
    4514:	2823883a 	mov	r17,r5
    4518:	2025883a 	mov	r18,r4
    451c:	dfc00415 	stw	ra,16(sp)
    4520:	000a4000 	call	a400 <__malloc_lock>
    4524:	98800217 	ldw	r2,8(r19)
    4528:	9009883a 	mov	r4,r18
    452c:	000b883a 	mov	r5,zero
    4530:	10c00117 	ldw	r3,4(r2)
    4534:	00bfff04 	movi	r2,-4
    4538:	18a0703a 	and	r16,r3,r2
    453c:	8463c83a 	sub	r17,r16,r17
    4540:	8c43fbc4 	addi	r17,r17,4079
    4544:	8822d33a 	srli	r17,r17,12
    4548:	0083ffc4 	movi	r2,4095
    454c:	8c7fffc4 	addi	r17,r17,-1
    4550:	8822933a 	slli	r17,r17,12
    4554:	1440060e 	bge	r2,r17,4570 <_malloc_trim_r+0x78>
    4558:	00072400 	call	7240 <_sbrk_r>
    455c:	98c00217 	ldw	r3,8(r19)
    4560:	9009883a 	mov	r4,r18
    4564:	044bc83a 	sub	r5,zero,r17
    4568:	80c7883a 	add	r3,r16,r3
    456c:	10c00926 	beq	r2,r3,4594 <_malloc_trim_r+0x9c>
    4570:	000a4200 	call	a420 <__malloc_unlock>
    4574:	0005883a 	mov	r2,zero
    4578:	dfc00417 	ldw	ra,16(sp)
    457c:	dcc00317 	ldw	r19,12(sp)
    4580:	dc800217 	ldw	r18,8(sp)
    4584:	dc400117 	ldw	r17,4(sp)
    4588:	dc000017 	ldw	r16,0(sp)
    458c:	dec00504 	addi	sp,sp,20
    4590:	f800283a 	ret
    4594:	9009883a 	mov	r4,r18
    4598:	00072400 	call	7240 <_sbrk_r>
    459c:	844dc83a 	sub	r6,r16,r17
    45a0:	00ffffc4 	movi	r3,-1
    45a4:	9009883a 	mov	r4,r18
    45a8:	000b883a 	mov	r5,zero
    45ac:	01c000f4 	movhi	r7,3
    45b0:	39c78a04 	addi	r7,r7,7720
    45b4:	31800054 	ori	r6,r6,1
    45b8:	10c00926 	beq	r2,r3,45e0 <_malloc_trim_r+0xe8>
    45bc:	38800017 	ldw	r2,0(r7)
    45c0:	98c00217 	ldw	r3,8(r19)
    45c4:	9009883a 	mov	r4,r18
    45c8:	1445c83a 	sub	r2,r2,r17
    45cc:	38800015 	stw	r2,0(r7)
    45d0:	19800115 	stw	r6,4(r3)
    45d4:	000a4200 	call	a420 <__malloc_unlock>
    45d8:	00800044 	movi	r2,1
    45dc:	003fe606 	br	4578 <_malloc_trim_r+0x80>
    45e0:	00072400 	call	7240 <_sbrk_r>
    45e4:	99800217 	ldw	r6,8(r19)
    45e8:	100f883a 	mov	r7,r2
    45ec:	9009883a 	mov	r4,r18
    45f0:	1187c83a 	sub	r3,r2,r6
    45f4:	008003c4 	movi	r2,15
    45f8:	19400054 	ori	r5,r3,1
    45fc:	10ffdc0e 	bge	r2,r3,4570 <_malloc_trim_r+0x78>
    4600:	008000f4 	movhi	r2,3
    4604:	10876d04 	addi	r2,r2,7604
    4608:	10c00017 	ldw	r3,0(r2)
    460c:	008000f4 	movhi	r2,3
    4610:	10878a04 	addi	r2,r2,7720
    4614:	31400115 	stw	r5,4(r6)
    4618:	38c7c83a 	sub	r3,r7,r3
    461c:	10c00015 	stw	r3,0(r2)
    4620:	003fd306 	br	4570 <_malloc_trim_r+0x78>

00004624 <_free_r>:
    4624:	defffd04 	addi	sp,sp,-12
    4628:	dc400115 	stw	r17,4(sp)
    462c:	dc000015 	stw	r16,0(sp)
    4630:	dfc00215 	stw	ra,8(sp)
    4634:	2821883a 	mov	r16,r5
    4638:	2023883a 	mov	r17,r4
    463c:	28005a26 	beq	r5,zero,47a8 <_free_r+0x184>
    4640:	000a4000 	call	a400 <__malloc_lock>
    4644:	823ffe04 	addi	r8,r16,-8
    4648:	41400117 	ldw	r5,4(r8)
    464c:	00bfff84 	movi	r2,-2
    4650:	028000f4 	movhi	r10,3
    4654:	5281e404 	addi	r10,r10,1936
    4658:	288e703a 	and	r7,r5,r2
    465c:	41cd883a 	add	r6,r8,r7
    4660:	30c00117 	ldw	r3,4(r6)
    4664:	51000217 	ldw	r4,8(r10)
    4668:	00bfff04 	movi	r2,-4
    466c:	1892703a 	and	r9,r3,r2
    4670:	5017883a 	mov	r11,r10
    4674:	31006726 	beq	r6,r4,4814 <_free_r+0x1f0>
    4678:	2880004c 	andi	r2,r5,1
    467c:	1005003a 	cmpeq	r2,r2,zero
    4680:	32400115 	stw	r9,4(r6)
    4684:	10001a1e 	bne	r2,zero,46f0 <_free_r+0xcc>
    4688:	000b883a 	mov	r5,zero
    468c:	3247883a 	add	r3,r6,r9
    4690:	18800117 	ldw	r2,4(r3)
    4694:	1080004c 	andi	r2,r2,1
    4698:	1000231e 	bne	r2,zero,4728 <_free_r+0x104>
    469c:	280ac03a 	cmpne	r5,r5,zero
    46a0:	3a4f883a 	add	r7,r7,r9
    46a4:	2800451e 	bne	r5,zero,47bc <_free_r+0x198>
    46a8:	31000217 	ldw	r4,8(r6)
    46ac:	008000f4 	movhi	r2,3
    46b0:	1081e604 	addi	r2,r2,1944
    46b4:	20807b26 	beq	r4,r2,48a4 <_free_r+0x280>
    46b8:	30800317 	ldw	r2,12(r6)
    46bc:	3a07883a 	add	r3,r7,r8
    46c0:	19c00015 	stw	r7,0(r3)
    46c4:	11000215 	stw	r4,8(r2)
    46c8:	20800315 	stw	r2,12(r4)
    46cc:	38800054 	ori	r2,r7,1
    46d0:	40800115 	stw	r2,4(r8)
    46d4:	28001a26 	beq	r5,zero,4740 <_free_r+0x11c>
    46d8:	8809883a 	mov	r4,r17
    46dc:	dfc00217 	ldw	ra,8(sp)
    46e0:	dc400117 	ldw	r17,4(sp)
    46e4:	dc000017 	ldw	r16,0(sp)
    46e8:	dec00304 	addi	sp,sp,12
    46ec:	000a4201 	jmpi	a420 <__malloc_unlock>
    46f0:	80bffe17 	ldw	r2,-8(r16)
    46f4:	50c00204 	addi	r3,r10,8
    46f8:	4091c83a 	sub	r8,r8,r2
    46fc:	41000217 	ldw	r4,8(r8)
    4700:	388f883a 	add	r7,r7,r2
    4704:	20c06126 	beq	r4,r3,488c <_free_r+0x268>
    4708:	40800317 	ldw	r2,12(r8)
    470c:	3247883a 	add	r3,r6,r9
    4710:	000b883a 	mov	r5,zero
    4714:	11000215 	stw	r4,8(r2)
    4718:	20800315 	stw	r2,12(r4)
    471c:	18800117 	ldw	r2,4(r3)
    4720:	1080004c 	andi	r2,r2,1
    4724:	103fdd26 	beq	r2,zero,469c <_free_r+0x78>
    4728:	38800054 	ori	r2,r7,1
    472c:	3a07883a 	add	r3,r7,r8
    4730:	280ac03a 	cmpne	r5,r5,zero
    4734:	40800115 	stw	r2,4(r8)
    4738:	19c00015 	stw	r7,0(r3)
    473c:	283fe61e 	bne	r5,zero,46d8 <_free_r+0xb4>
    4740:	00807fc4 	movi	r2,511
    4744:	11c01f2e 	bgeu	r2,r7,47c4 <_free_r+0x1a0>
    4748:	3806d27a 	srli	r3,r7,9
    474c:	1800481e 	bne	r3,zero,4870 <_free_r+0x24c>
    4750:	3804d0fa 	srli	r2,r7,3
    4754:	100690fa 	slli	r3,r2,3
    4758:	1acd883a 	add	r6,r3,r11
    475c:	31400217 	ldw	r5,8(r6)
    4760:	31405926 	beq	r6,r5,48c8 <_free_r+0x2a4>
    4764:	28800117 	ldw	r2,4(r5)
    4768:	00ffff04 	movi	r3,-4
    476c:	10c4703a 	and	r2,r2,r3
    4770:	3880022e 	bgeu	r7,r2,477c <_free_r+0x158>
    4774:	29400217 	ldw	r5,8(r5)
    4778:	317ffa1e 	bne	r6,r5,4764 <_free_r+0x140>
    477c:	29800317 	ldw	r6,12(r5)
    4780:	41800315 	stw	r6,12(r8)
    4784:	41400215 	stw	r5,8(r8)
    4788:	8809883a 	mov	r4,r17
    478c:	2a000315 	stw	r8,12(r5)
    4790:	32000215 	stw	r8,8(r6)
    4794:	dfc00217 	ldw	ra,8(sp)
    4798:	dc400117 	ldw	r17,4(sp)
    479c:	dc000017 	ldw	r16,0(sp)
    47a0:	dec00304 	addi	sp,sp,12
    47a4:	000a4201 	jmpi	a420 <__malloc_unlock>
    47a8:	dfc00217 	ldw	ra,8(sp)
    47ac:	dc400117 	ldw	r17,4(sp)
    47b0:	dc000017 	ldw	r16,0(sp)
    47b4:	dec00304 	addi	sp,sp,12
    47b8:	f800283a 	ret
    47bc:	31000217 	ldw	r4,8(r6)
    47c0:	003fbd06 	br	46b8 <_free_r+0x94>
    47c4:	3806d0fa 	srli	r3,r7,3
    47c8:	00800044 	movi	r2,1
    47cc:	51400117 	ldw	r5,4(r10)
    47d0:	180890fa 	slli	r4,r3,3
    47d4:	1807d0ba 	srai	r3,r3,2
    47d8:	22c9883a 	add	r4,r4,r11
    47dc:	21800217 	ldw	r6,8(r4)
    47e0:	10c4983a 	sll	r2,r2,r3
    47e4:	41000315 	stw	r4,12(r8)
    47e8:	41800215 	stw	r6,8(r8)
    47ec:	288ab03a 	or	r5,r5,r2
    47f0:	22000215 	stw	r8,8(r4)
    47f4:	8809883a 	mov	r4,r17
    47f8:	51400115 	stw	r5,4(r10)
    47fc:	32000315 	stw	r8,12(r6)
    4800:	dfc00217 	ldw	ra,8(sp)
    4804:	dc400117 	ldw	r17,4(sp)
    4808:	dc000017 	ldw	r16,0(sp)
    480c:	dec00304 	addi	sp,sp,12
    4810:	000a4201 	jmpi	a420 <__malloc_unlock>
    4814:	2880004c 	andi	r2,r5,1
    4818:	3a4d883a 	add	r6,r7,r9
    481c:	1000071e 	bne	r2,zero,483c <_free_r+0x218>
    4820:	80bffe17 	ldw	r2,-8(r16)
    4824:	4091c83a 	sub	r8,r8,r2
    4828:	41000317 	ldw	r4,12(r8)
    482c:	40c00217 	ldw	r3,8(r8)
    4830:	308d883a 	add	r6,r6,r2
    4834:	20c00215 	stw	r3,8(r4)
    4838:	19000315 	stw	r4,12(r3)
    483c:	008000f4 	movhi	r2,3
    4840:	10876c04 	addi	r2,r2,7600
    4844:	11000017 	ldw	r4,0(r2)
    4848:	30c00054 	ori	r3,r6,1
    484c:	52000215 	stw	r8,8(r10)
    4850:	40c00115 	stw	r3,4(r8)
    4854:	313fa036 	bltu	r6,r4,46d8 <_free_r+0xb4>
    4858:	008000f4 	movhi	r2,3
    485c:	10878004 	addi	r2,r2,7680
    4860:	11400017 	ldw	r5,0(r2)
    4864:	8809883a 	mov	r4,r17
    4868:	00044f80 	call	44f8 <_malloc_trim_r>
    486c:	003f9a06 	br	46d8 <_free_r+0xb4>
    4870:	00800104 	movi	r2,4
    4874:	10c0072e 	bgeu	r2,r3,4894 <_free_r+0x270>
    4878:	00800504 	movi	r2,20
    487c:	10c01936 	bltu	r2,r3,48e4 <_free_r+0x2c0>
    4880:	188016c4 	addi	r2,r3,91
    4884:	100690fa 	slli	r3,r2,3
    4888:	003fb306 	br	4758 <_free_r+0x134>
    488c:	01400044 	movi	r5,1
    4890:	003f7e06 	br	468c <_free_r+0x68>
    4894:	3804d1ba 	srli	r2,r7,6
    4898:	10800e04 	addi	r2,r2,56
    489c:	100690fa 	slli	r3,r2,3
    48a0:	003fad06 	br	4758 <_free_r+0x134>
    48a4:	22000315 	stw	r8,12(r4)
    48a8:	22000215 	stw	r8,8(r4)
    48ac:	3a05883a 	add	r2,r7,r8
    48b0:	38c00054 	ori	r3,r7,1
    48b4:	11c00015 	stw	r7,0(r2)
    48b8:	41000215 	stw	r4,8(r8)
    48bc:	40c00115 	stw	r3,4(r8)
    48c0:	41000315 	stw	r4,12(r8)
    48c4:	003f8406 	br	46d8 <_free_r+0xb4>
    48c8:	1005d0ba 	srai	r2,r2,2
    48cc:	00c00044 	movi	r3,1
    48d0:	51000117 	ldw	r4,4(r10)
    48d4:	1886983a 	sll	r3,r3,r2
    48d8:	20c8b03a 	or	r4,r4,r3
    48dc:	51000115 	stw	r4,4(r10)
    48e0:	003fa706 	br	4780 <_free_r+0x15c>
    48e4:	00801504 	movi	r2,84
    48e8:	10c00436 	bltu	r2,r3,48fc <_free_r+0x2d8>
    48ec:	3804d33a 	srli	r2,r7,12
    48f0:	10801b84 	addi	r2,r2,110
    48f4:	100690fa 	slli	r3,r2,3
    48f8:	003f9706 	br	4758 <_free_r+0x134>
    48fc:	00805504 	movi	r2,340
    4900:	10c00436 	bltu	r2,r3,4914 <_free_r+0x2f0>
    4904:	3804d3fa 	srli	r2,r7,15
    4908:	10801dc4 	addi	r2,r2,119
    490c:	100690fa 	slli	r3,r2,3
    4910:	003f9106 	br	4758 <_free_r+0x134>
    4914:	00815504 	movi	r2,1364
    4918:	10c0032e 	bgeu	r2,r3,4928 <_free_r+0x304>
    491c:	00801f84 	movi	r2,126
    4920:	00c0fc04 	movi	r3,1008
    4924:	003f8c06 	br	4758 <_free_r+0x134>
    4928:	3804d4ba 	srli	r2,r7,18
    492c:	10801f04 	addi	r2,r2,124
    4930:	100690fa 	slli	r3,r2,3
    4934:	003f8806 	br	4758 <_free_r+0x134>

00004938 <__sfvwrite_r>:
    4938:	30800217 	ldw	r2,8(r6)
    493c:	defff504 	addi	sp,sp,-44
    4940:	df000915 	stw	fp,36(sp)
    4944:	dd800715 	stw	r22,28(sp)
    4948:	dc800315 	stw	r18,12(sp)
    494c:	dfc00a15 	stw	ra,40(sp)
    4950:	ddc00815 	stw	r23,32(sp)
    4954:	dd400615 	stw	r21,24(sp)
    4958:	dd000515 	stw	r20,20(sp)
    495c:	dcc00415 	stw	r19,16(sp)
    4960:	dc400215 	stw	r17,8(sp)
    4964:	dc000115 	stw	r16,4(sp)
    4968:	302d883a 	mov	r22,r6
    496c:	2039883a 	mov	fp,r4
    4970:	2825883a 	mov	r18,r5
    4974:	10001c26 	beq	r2,zero,49e8 <__sfvwrite_r+0xb0>
    4978:	29c0030b 	ldhu	r7,12(r5)
    497c:	3880020c 	andi	r2,r7,8
    4980:	10002726 	beq	r2,zero,4a20 <__sfvwrite_r+0xe8>
    4984:	28800417 	ldw	r2,16(r5)
    4988:	10002526 	beq	r2,zero,4a20 <__sfvwrite_r+0xe8>
    498c:	3880008c 	andi	r2,r7,2
    4990:	b5400017 	ldw	r21,0(r22)
    4994:	10002826 	beq	r2,zero,4a38 <__sfvwrite_r+0x100>
    4998:	0021883a 	mov	r16,zero
    499c:	0023883a 	mov	r17,zero
    49a0:	880d883a 	mov	r6,r17
    49a4:	e009883a 	mov	r4,fp
    49a8:	00810004 	movi	r2,1024
    49ac:	80006e26 	beq	r16,zero,4b68 <__sfvwrite_r+0x230>
    49b0:	800f883a 	mov	r7,r16
    49b4:	91400717 	ldw	r5,28(r18)
    49b8:	1400012e 	bgeu	r2,r16,49c0 <__sfvwrite_r+0x88>
    49bc:	100f883a 	mov	r7,r2
    49c0:	90c00917 	ldw	r3,36(r18)
    49c4:	183ee83a 	callr	r3
    49c8:	1007883a 	mov	r3,r2
    49cc:	80a1c83a 	sub	r16,r16,r2
    49d0:	88a3883a 	add	r17,r17,r2
    49d4:	00806d0e 	bge	zero,r2,4b8c <__sfvwrite_r+0x254>
    49d8:	b0800217 	ldw	r2,8(r22)
    49dc:	10c5c83a 	sub	r2,r2,r3
    49e0:	b0800215 	stw	r2,8(r22)
    49e4:	103fee1e 	bne	r2,zero,49a0 <__sfvwrite_r+0x68>
    49e8:	0009883a 	mov	r4,zero
    49ec:	2005883a 	mov	r2,r4
    49f0:	dfc00a17 	ldw	ra,40(sp)
    49f4:	df000917 	ldw	fp,36(sp)
    49f8:	ddc00817 	ldw	r23,32(sp)
    49fc:	dd800717 	ldw	r22,28(sp)
    4a00:	dd400617 	ldw	r21,24(sp)
    4a04:	dd000517 	ldw	r20,20(sp)
    4a08:	dcc00417 	ldw	r19,16(sp)
    4a0c:	dc800317 	ldw	r18,12(sp)
    4a10:	dc400217 	ldw	r17,8(sp)
    4a14:	dc000117 	ldw	r16,4(sp)
    4a18:	dec00b04 	addi	sp,sp,44
    4a1c:	f800283a 	ret
    4a20:	00027000 	call	2700 <__swsetup_r>
    4a24:	1000e41e 	bne	r2,zero,4db8 <__sfvwrite_r+0x480>
    4a28:	91c0030b 	ldhu	r7,12(r18)
    4a2c:	b5400017 	ldw	r21,0(r22)
    4a30:	3880008c 	andi	r2,r7,2
    4a34:	103fd81e 	bne	r2,zero,4998 <__sfvwrite_r+0x60>
    4a38:	3880004c 	andi	r2,r7,1
    4a3c:	1005003a 	cmpeq	r2,r2,zero
    4a40:	10005726 	beq	r2,zero,4ba0 <__sfvwrite_r+0x268>
    4a44:	0029883a 	mov	r20,zero
    4a48:	002f883a 	mov	r23,zero
    4a4c:	a0004226 	beq	r20,zero,4b58 <__sfvwrite_r+0x220>
    4a50:	3880800c 	andi	r2,r7,512
    4a54:	94000217 	ldw	r16,8(r18)
    4a58:	10008b26 	beq	r2,zero,4c88 <__sfvwrite_r+0x350>
    4a5c:	800d883a 	mov	r6,r16
    4a60:	a400a536 	bltu	r20,r16,4cf8 <__sfvwrite_r+0x3c0>
    4a64:	3881200c 	andi	r2,r7,1152
    4a68:	10002726 	beq	r2,zero,4b08 <__sfvwrite_r+0x1d0>
    4a6c:	90800517 	ldw	r2,20(r18)
    4a70:	92000417 	ldw	r8,16(r18)
    4a74:	91400017 	ldw	r5,0(r18)
    4a78:	1087883a 	add	r3,r2,r2
    4a7c:	1887883a 	add	r3,r3,r2
    4a80:	1808d7fa 	srli	r4,r3,31
    4a84:	2a21c83a 	sub	r16,r5,r8
    4a88:	80800044 	addi	r2,r16,1
    4a8c:	20c9883a 	add	r4,r4,r3
    4a90:	2027d07a 	srai	r19,r4,1
    4a94:	a085883a 	add	r2,r20,r2
    4a98:	980d883a 	mov	r6,r19
    4a9c:	9880022e 	bgeu	r19,r2,4aa8 <__sfvwrite_r+0x170>
    4aa0:	1027883a 	mov	r19,r2
    4aa4:	100d883a 	mov	r6,r2
    4aa8:	3881000c 	andi	r2,r7,1024
    4aac:	1000b826 	beq	r2,zero,4d90 <__sfvwrite_r+0x458>
    4ab0:	300b883a 	mov	r5,r6
    4ab4:	e009883a 	mov	r4,fp
    4ab8:	00051ac0 	call	51ac <_malloc_r>
    4abc:	10003126 	beq	r2,zero,4b84 <__sfvwrite_r+0x24c>
    4ac0:	91400417 	ldw	r5,16(r18)
    4ac4:	1009883a 	mov	r4,r2
    4ac8:	800d883a 	mov	r6,r16
    4acc:	1023883a 	mov	r17,r2
    4ad0:	00059d00 	call	59d0 <memcpy>
    4ad4:	90c0030b 	ldhu	r3,12(r18)
    4ad8:	00beffc4 	movi	r2,-1025
    4adc:	1886703a 	and	r3,r3,r2
    4ae0:	18c02014 	ori	r3,r3,128
    4ae4:	90c0030d 	sth	r3,12(r18)
    4ae8:	9c07c83a 	sub	r3,r19,r16
    4aec:	8c05883a 	add	r2,r17,r16
    4af0:	a00d883a 	mov	r6,r20
    4af4:	a021883a 	mov	r16,r20
    4af8:	90800015 	stw	r2,0(r18)
    4afc:	90c00215 	stw	r3,8(r18)
    4b00:	94400415 	stw	r17,16(r18)
    4b04:	94c00515 	stw	r19,20(r18)
    4b08:	91000017 	ldw	r4,0(r18)
    4b0c:	b80b883a 	mov	r5,r23
    4b10:	a023883a 	mov	r17,r20
    4b14:	0005a700 	call	5a70 <memmove>
    4b18:	90c00217 	ldw	r3,8(r18)
    4b1c:	90800017 	ldw	r2,0(r18)
    4b20:	a027883a 	mov	r19,r20
    4b24:	1c07c83a 	sub	r3,r3,r16
    4b28:	1405883a 	add	r2,r2,r16
    4b2c:	90c00215 	stw	r3,8(r18)
    4b30:	a021883a 	mov	r16,r20
    4b34:	90800015 	stw	r2,0(r18)
    4b38:	b0800217 	ldw	r2,8(r22)
    4b3c:	1405c83a 	sub	r2,r2,r16
    4b40:	b0800215 	stw	r2,8(r22)
    4b44:	103fa826 	beq	r2,zero,49e8 <__sfvwrite_r+0xb0>
    4b48:	a469c83a 	sub	r20,r20,r17
    4b4c:	91c0030b 	ldhu	r7,12(r18)
    4b50:	bcef883a 	add	r23,r23,r19
    4b54:	a03fbe1e 	bne	r20,zero,4a50 <__sfvwrite_r+0x118>
    4b58:	adc00017 	ldw	r23,0(r21)
    4b5c:	ad000117 	ldw	r20,4(r21)
    4b60:	ad400204 	addi	r21,r21,8
    4b64:	003fb906 	br	4a4c <__sfvwrite_r+0x114>
    4b68:	ac400017 	ldw	r17,0(r21)
    4b6c:	ac000117 	ldw	r16,4(r21)
    4b70:	ad400204 	addi	r21,r21,8
    4b74:	003f8a06 	br	49a0 <__sfvwrite_r+0x68>
    4b78:	91400417 	ldw	r5,16(r18)
    4b7c:	e009883a 	mov	r4,fp
    4b80:	00046240 	call	4624 <_free_r>
    4b84:	00800304 	movi	r2,12
    4b88:	e0800015 	stw	r2,0(fp)
    4b8c:	9080030b 	ldhu	r2,12(r18)
    4b90:	013fffc4 	movi	r4,-1
    4b94:	10801014 	ori	r2,r2,64
    4b98:	9080030d 	sth	r2,12(r18)
    4b9c:	003f9306 	br	49ec <__sfvwrite_r+0xb4>
    4ba0:	0027883a 	mov	r19,zero
    4ba4:	002f883a 	mov	r23,zero
    4ba8:	d8000015 	stw	zero,0(sp)
    4bac:	0029883a 	mov	r20,zero
    4bb0:	98001e26 	beq	r19,zero,4c2c <__sfvwrite_r+0x2f4>
    4bb4:	d8c00017 	ldw	r3,0(sp)
    4bb8:	1804c03a 	cmpne	r2,r3,zero
    4bbc:	10005e26 	beq	r2,zero,4d38 <__sfvwrite_r+0x400>
    4bc0:	9821883a 	mov	r16,r19
    4bc4:	a4c0012e 	bgeu	r20,r19,4bcc <__sfvwrite_r+0x294>
    4bc8:	a021883a 	mov	r16,r20
    4bcc:	91000017 	ldw	r4,0(r18)
    4bd0:	90800417 	ldw	r2,16(r18)
    4bd4:	91800217 	ldw	r6,8(r18)
    4bd8:	91c00517 	ldw	r7,20(r18)
    4bdc:	1100022e 	bgeu	r2,r4,4be8 <__sfvwrite_r+0x2b0>
    4be0:	31e3883a 	add	r17,r6,r7
    4be4:	8c001616 	blt	r17,r16,4c40 <__sfvwrite_r+0x308>
    4be8:	81c03816 	blt	r16,r7,4ccc <__sfvwrite_r+0x394>
    4bec:	90c00917 	ldw	r3,36(r18)
    4bf0:	91400717 	ldw	r5,28(r18)
    4bf4:	e009883a 	mov	r4,fp
    4bf8:	b80d883a 	mov	r6,r23
    4bfc:	183ee83a 	callr	r3
    4c00:	1023883a 	mov	r17,r2
    4c04:	00bfe10e 	bge	zero,r2,4b8c <__sfvwrite_r+0x254>
    4c08:	a469c83a 	sub	r20,r20,r17
    4c0c:	a0001826 	beq	r20,zero,4c70 <__sfvwrite_r+0x338>
    4c10:	b0800217 	ldw	r2,8(r22)
    4c14:	1445c83a 	sub	r2,r2,r17
    4c18:	b0800215 	stw	r2,8(r22)
    4c1c:	103f7226 	beq	r2,zero,49e8 <__sfvwrite_r+0xb0>
    4c20:	9c67c83a 	sub	r19,r19,r17
    4c24:	bc6f883a 	add	r23,r23,r17
    4c28:	983fe21e 	bne	r19,zero,4bb4 <__sfvwrite_r+0x27c>
    4c2c:	adc00017 	ldw	r23,0(r21)
    4c30:	acc00117 	ldw	r19,4(r21)
    4c34:	ad400204 	addi	r21,r21,8
    4c38:	d8000015 	stw	zero,0(sp)
    4c3c:	003fdc06 	br	4bb0 <__sfvwrite_r+0x278>
    4c40:	b80b883a 	mov	r5,r23
    4c44:	880d883a 	mov	r6,r17
    4c48:	0005a700 	call	5a70 <memmove>
    4c4c:	90c00017 	ldw	r3,0(r18)
    4c50:	e009883a 	mov	r4,fp
    4c54:	900b883a 	mov	r5,r18
    4c58:	1c47883a 	add	r3,r3,r17
    4c5c:	90c00015 	stw	r3,0(r18)
    4c60:	00040080 	call	4008 <_fflush_r>
    4c64:	103fc91e 	bne	r2,zero,4b8c <__sfvwrite_r+0x254>
    4c68:	a469c83a 	sub	r20,r20,r17
    4c6c:	a03fe81e 	bne	r20,zero,4c10 <__sfvwrite_r+0x2d8>
    4c70:	e009883a 	mov	r4,fp
    4c74:	900b883a 	mov	r5,r18
    4c78:	00040080 	call	4008 <_fflush_r>
    4c7c:	103fc31e 	bne	r2,zero,4b8c <__sfvwrite_r+0x254>
    4c80:	d8000015 	stw	zero,0(sp)
    4c84:	003fe206 	br	4c10 <__sfvwrite_r+0x2d8>
    4c88:	91000017 	ldw	r4,0(r18)
    4c8c:	90800417 	ldw	r2,16(r18)
    4c90:	1100022e 	bgeu	r2,r4,4c9c <__sfvwrite_r+0x364>
    4c94:	8023883a 	mov	r17,r16
    4c98:	85003136 	bltu	r16,r20,4d60 <__sfvwrite_r+0x428>
    4c9c:	91c00517 	ldw	r7,20(r18)
    4ca0:	a1c01836 	bltu	r20,r7,4d04 <__sfvwrite_r+0x3cc>
    4ca4:	90c00917 	ldw	r3,36(r18)
    4ca8:	91400717 	ldw	r5,28(r18)
    4cac:	e009883a 	mov	r4,fp
    4cb0:	b80d883a 	mov	r6,r23
    4cb4:	183ee83a 	callr	r3
    4cb8:	1021883a 	mov	r16,r2
    4cbc:	00bfb30e 	bge	zero,r2,4b8c <__sfvwrite_r+0x254>
    4cc0:	1023883a 	mov	r17,r2
    4cc4:	1027883a 	mov	r19,r2
    4cc8:	003f9b06 	br	4b38 <__sfvwrite_r+0x200>
    4ccc:	b80b883a 	mov	r5,r23
    4cd0:	800d883a 	mov	r6,r16
    4cd4:	0005a700 	call	5a70 <memmove>
    4cd8:	90c00217 	ldw	r3,8(r18)
    4cdc:	90800017 	ldw	r2,0(r18)
    4ce0:	8023883a 	mov	r17,r16
    4ce4:	1c07c83a 	sub	r3,r3,r16
    4ce8:	1405883a 	add	r2,r2,r16
    4cec:	90c00215 	stw	r3,8(r18)
    4cf0:	90800015 	stw	r2,0(r18)
    4cf4:	003fc406 	br	4c08 <__sfvwrite_r+0x2d0>
    4cf8:	a00d883a 	mov	r6,r20
    4cfc:	a021883a 	mov	r16,r20
    4d00:	003f8106 	br	4b08 <__sfvwrite_r+0x1d0>
    4d04:	b80b883a 	mov	r5,r23
    4d08:	a00d883a 	mov	r6,r20
    4d0c:	0005a700 	call	5a70 <memmove>
    4d10:	90c00217 	ldw	r3,8(r18)
    4d14:	90800017 	ldw	r2,0(r18)
    4d18:	a021883a 	mov	r16,r20
    4d1c:	1d07c83a 	sub	r3,r3,r20
    4d20:	1505883a 	add	r2,r2,r20
    4d24:	a023883a 	mov	r17,r20
    4d28:	a027883a 	mov	r19,r20
    4d2c:	90c00215 	stw	r3,8(r18)
    4d30:	90800015 	stw	r2,0(r18)
    4d34:	003f8006 	br	4b38 <__sfvwrite_r+0x200>
    4d38:	b809883a 	mov	r4,r23
    4d3c:	01400284 	movi	r5,10
    4d40:	980d883a 	mov	r6,r19
    4d44:	00058ec0 	call	58ec <memchr>
    4d48:	10001726 	beq	r2,zero,4da8 <__sfvwrite_r+0x470>
    4d4c:	15c5c83a 	sub	r2,r2,r23
    4d50:	15000044 	addi	r20,r2,1
    4d54:	00800044 	movi	r2,1
    4d58:	d8800015 	stw	r2,0(sp)
    4d5c:	003f9806 	br	4bc0 <__sfvwrite_r+0x288>
    4d60:	b80b883a 	mov	r5,r23
    4d64:	800d883a 	mov	r6,r16
    4d68:	0005a700 	call	5a70 <memmove>
    4d6c:	90c00017 	ldw	r3,0(r18)
    4d70:	e009883a 	mov	r4,fp
    4d74:	900b883a 	mov	r5,r18
    4d78:	1c07883a 	add	r3,r3,r16
    4d7c:	90c00015 	stw	r3,0(r18)
    4d80:	8027883a 	mov	r19,r16
    4d84:	00040080 	call	4008 <_fflush_r>
    4d88:	103f6b26 	beq	r2,zero,4b38 <__sfvwrite_r+0x200>
    4d8c:	003f7f06 	br	4b8c <__sfvwrite_r+0x254>
    4d90:	400b883a 	mov	r5,r8
    4d94:	e009883a 	mov	r4,fp
    4d98:	0006bdc0 	call	6bdc <_realloc_r>
    4d9c:	103f7626 	beq	r2,zero,4b78 <__sfvwrite_r+0x240>
    4da0:	1023883a 	mov	r17,r2
    4da4:	003f5006 	br	4ae8 <__sfvwrite_r+0x1b0>
    4da8:	00c00044 	movi	r3,1
    4dac:	9d000044 	addi	r20,r19,1
    4db0:	d8c00015 	stw	r3,0(sp)
    4db4:	003f8206 	br	4bc0 <__sfvwrite_r+0x288>
    4db8:	9080030b 	ldhu	r2,12(r18)
    4dbc:	00c00244 	movi	r3,9
    4dc0:	013fffc4 	movi	r4,-1
    4dc4:	10801014 	ori	r2,r2,64
    4dc8:	9080030d 	sth	r2,12(r18)
    4dcc:	e0c00015 	stw	r3,0(fp)
    4dd0:	003f0606 	br	49ec <__sfvwrite_r+0xb4>

00004dd4 <_fwalk_reent>:
    4dd4:	defff704 	addi	sp,sp,-36
    4dd8:	dcc00315 	stw	r19,12(sp)
    4ddc:	24c0b804 	addi	r19,r4,736
    4de0:	dd800615 	stw	r22,24(sp)
    4de4:	dd400515 	stw	r21,20(sp)
    4de8:	dfc00815 	stw	ra,32(sp)
    4dec:	ddc00715 	stw	r23,28(sp)
    4df0:	dd000415 	stw	r20,16(sp)
    4df4:	dc800215 	stw	r18,8(sp)
    4df8:	dc400115 	stw	r17,4(sp)
    4dfc:	dc000015 	stw	r16,0(sp)
    4e00:	202b883a 	mov	r21,r4
    4e04:	282d883a 	mov	r22,r5
    4e08:	00042900 	call	4290 <__sfp_lock_acquire>
    4e0c:	98002126 	beq	r19,zero,4e94 <_fwalk_reent+0xc0>
    4e10:	002f883a 	mov	r23,zero
    4e14:	9c800117 	ldw	r18,4(r19)
    4e18:	9c000217 	ldw	r16,8(r19)
    4e1c:	90bfffc4 	addi	r2,r18,-1
    4e20:	10000d16 	blt	r2,zero,4e58 <_fwalk_reent+0x84>
    4e24:	0023883a 	mov	r17,zero
    4e28:	053fffc4 	movi	r20,-1
    4e2c:	8080030f 	ldh	r2,12(r16)
    4e30:	8c400044 	addi	r17,r17,1
    4e34:	10000626 	beq	r2,zero,4e50 <_fwalk_reent+0x7c>
    4e38:	8080038f 	ldh	r2,14(r16)
    4e3c:	800b883a 	mov	r5,r16
    4e40:	a809883a 	mov	r4,r21
    4e44:	15000226 	beq	r2,r20,4e50 <_fwalk_reent+0x7c>
    4e48:	b03ee83a 	callr	r22
    4e4c:	b8aeb03a 	or	r23,r23,r2
    4e50:	84001704 	addi	r16,r16,92
    4e54:	947ff51e 	bne	r18,r17,4e2c <_fwalk_reent+0x58>
    4e58:	9cc00017 	ldw	r19,0(r19)
    4e5c:	983fed1e 	bne	r19,zero,4e14 <_fwalk_reent+0x40>
    4e60:	00042940 	call	4294 <__sfp_lock_release>
    4e64:	b805883a 	mov	r2,r23
    4e68:	dfc00817 	ldw	ra,32(sp)
    4e6c:	ddc00717 	ldw	r23,28(sp)
    4e70:	dd800617 	ldw	r22,24(sp)
    4e74:	dd400517 	ldw	r21,20(sp)
    4e78:	dd000417 	ldw	r20,16(sp)
    4e7c:	dcc00317 	ldw	r19,12(sp)
    4e80:	dc800217 	ldw	r18,8(sp)
    4e84:	dc400117 	ldw	r17,4(sp)
    4e88:	dc000017 	ldw	r16,0(sp)
    4e8c:	dec00904 	addi	sp,sp,36
    4e90:	f800283a 	ret
    4e94:	002f883a 	mov	r23,zero
    4e98:	003ff106 	br	4e60 <_fwalk_reent+0x8c>

00004e9c <_fwalk>:
    4e9c:	defff804 	addi	sp,sp,-32
    4ea0:	dcc00315 	stw	r19,12(sp)
    4ea4:	24c0b804 	addi	r19,r4,736
    4ea8:	dd400515 	stw	r21,20(sp)
    4eac:	dfc00715 	stw	ra,28(sp)
    4eb0:	dd800615 	stw	r22,24(sp)
    4eb4:	dd000415 	stw	r20,16(sp)
    4eb8:	dc800215 	stw	r18,8(sp)
    4ebc:	dc400115 	stw	r17,4(sp)
    4ec0:	dc000015 	stw	r16,0(sp)
    4ec4:	282b883a 	mov	r21,r5
    4ec8:	00042900 	call	4290 <__sfp_lock_acquire>
    4ecc:	98001f26 	beq	r19,zero,4f4c <_fwalk+0xb0>
    4ed0:	002d883a 	mov	r22,zero
    4ed4:	9c800117 	ldw	r18,4(r19)
    4ed8:	9c000217 	ldw	r16,8(r19)
    4edc:	90bfffc4 	addi	r2,r18,-1
    4ee0:	10000c16 	blt	r2,zero,4f14 <_fwalk+0x78>
    4ee4:	0023883a 	mov	r17,zero
    4ee8:	053fffc4 	movi	r20,-1
    4eec:	8080030f 	ldh	r2,12(r16)
    4ef0:	8c400044 	addi	r17,r17,1
    4ef4:	10000526 	beq	r2,zero,4f0c <_fwalk+0x70>
    4ef8:	8080038f 	ldh	r2,14(r16)
    4efc:	8009883a 	mov	r4,r16
    4f00:	15000226 	beq	r2,r20,4f0c <_fwalk+0x70>
    4f04:	a83ee83a 	callr	r21
    4f08:	b0acb03a 	or	r22,r22,r2
    4f0c:	84001704 	addi	r16,r16,92
    4f10:	947ff61e 	bne	r18,r17,4eec <_fwalk+0x50>
    4f14:	9cc00017 	ldw	r19,0(r19)
    4f18:	983fee1e 	bne	r19,zero,4ed4 <_fwalk+0x38>
    4f1c:	00042940 	call	4294 <__sfp_lock_release>
    4f20:	b005883a 	mov	r2,r22
    4f24:	dfc00717 	ldw	ra,28(sp)
    4f28:	dd800617 	ldw	r22,24(sp)
    4f2c:	dd400517 	ldw	r21,20(sp)
    4f30:	dd000417 	ldw	r20,16(sp)
    4f34:	dcc00317 	ldw	r19,12(sp)
    4f38:	dc800217 	ldw	r18,8(sp)
    4f3c:	dc400117 	ldw	r17,4(sp)
    4f40:	dc000017 	ldw	r16,0(sp)
    4f44:	dec00804 	addi	sp,sp,32
    4f48:	f800283a 	ret
    4f4c:	002d883a 	mov	r22,zero
    4f50:	003ff206 	br	4f1c <_fwalk+0x80>

00004f54 <__locale_charset>:
    4f54:	d0a00317 	ldw	r2,-32756(gp)
    4f58:	f800283a 	ret

00004f5c <_localeconv_r>:
    4f5c:	008000f4 	movhi	r2,3
    4f60:	10803a04 	addi	r2,r2,232
    4f64:	f800283a 	ret

00004f68 <localeconv>:
    4f68:	008000f4 	movhi	r2,3
    4f6c:	10876804 	addi	r2,r2,7584
    4f70:	11000017 	ldw	r4,0(r2)
    4f74:	0004f5c1 	jmpi	4f5c <_localeconv_r>

00004f78 <_setlocale_r>:
    4f78:	defffc04 	addi	sp,sp,-16
    4f7c:	00c000f4 	movhi	r3,3
    4f80:	18c03504 	addi	r3,r3,212
    4f84:	dc800215 	stw	r18,8(sp)
    4f88:	dc400115 	stw	r17,4(sp)
    4f8c:	dc000015 	stw	r16,0(sp)
    4f90:	2023883a 	mov	r17,r4
    4f94:	2825883a 	mov	r18,r5
    4f98:	dfc00315 	stw	ra,12(sp)
    4f9c:	3021883a 	mov	r16,r6
    4fa0:	3009883a 	mov	r4,r6
    4fa4:	180b883a 	mov	r5,r3
    4fa8:	30000926 	beq	r6,zero,4fd0 <_setlocale_r+0x58>
    4fac:	00073fc0 	call	73fc <strcmp>
    4fb0:	8009883a 	mov	r4,r16
    4fb4:	014000f4 	movhi	r5,3
    4fb8:	29402004 	addi	r5,r5,128
    4fbc:	10000b1e 	bne	r2,zero,4fec <_setlocale_r+0x74>
    4fc0:	8c000d15 	stw	r16,52(r17)
    4fc4:	8c800c15 	stw	r18,48(r17)
    4fc8:	00c000f4 	movhi	r3,3
    4fcc:	18c03504 	addi	r3,r3,212
    4fd0:	1805883a 	mov	r2,r3
    4fd4:	dfc00317 	ldw	ra,12(sp)
    4fd8:	dc800217 	ldw	r18,8(sp)
    4fdc:	dc400117 	ldw	r17,4(sp)
    4fe0:	dc000017 	ldw	r16,0(sp)
    4fe4:	dec00404 	addi	sp,sp,16
    4fe8:	f800283a 	ret
    4fec:	00073fc0 	call	73fc <strcmp>
    4ff0:	0007883a 	mov	r3,zero
    4ff4:	103ff226 	beq	r2,zero,4fc0 <_setlocale_r+0x48>
    4ff8:	003ff506 	br	4fd0 <_setlocale_r+0x58>

00004ffc <setlocale>:
    4ffc:	018000f4 	movhi	r6,3
    5000:	31876804 	addi	r6,r6,7584
    5004:	2007883a 	mov	r3,r4
    5008:	31000017 	ldw	r4,0(r6)
    500c:	280d883a 	mov	r6,r5
    5010:	180b883a 	mov	r5,r3
    5014:	0004f781 	jmpi	4f78 <_setlocale_r>

00005018 <__smakebuf_r>:
    5018:	2880030b 	ldhu	r2,12(r5)
    501c:	deffed04 	addi	sp,sp,-76
    5020:	dc401015 	stw	r17,64(sp)
    5024:	1080008c 	andi	r2,r2,2
    5028:	dc000f15 	stw	r16,60(sp)
    502c:	dfc01215 	stw	ra,72(sp)
    5030:	dc801115 	stw	r18,68(sp)
    5034:	2821883a 	mov	r16,r5
    5038:	2023883a 	mov	r17,r4
    503c:	10000b26 	beq	r2,zero,506c <__smakebuf_r+0x54>
    5040:	28c010c4 	addi	r3,r5,67
    5044:	00800044 	movi	r2,1
    5048:	28800515 	stw	r2,20(r5)
    504c:	28c00415 	stw	r3,16(r5)
    5050:	28c00015 	stw	r3,0(r5)
    5054:	dfc01217 	ldw	ra,72(sp)
    5058:	dc801117 	ldw	r18,68(sp)
    505c:	dc401017 	ldw	r17,64(sp)
    5060:	dc000f17 	ldw	r16,60(sp)
    5064:	dec01304 	addi	sp,sp,76
    5068:	f800283a 	ret
    506c:	2940038f 	ldh	r5,14(r5)
    5070:	28002116 	blt	r5,zero,50f8 <__smakebuf_r+0xe0>
    5074:	d80d883a 	mov	r6,sp
    5078:	00077780 	call	7778 <_fstat_r>
    507c:	10001e16 	blt	r2,zero,50f8 <__smakebuf_r+0xe0>
    5080:	d8800117 	ldw	r2,4(sp)
    5084:	00e00014 	movui	r3,32768
    5088:	113c000c 	andi	r4,r2,61440
    508c:	20c03126 	beq	r4,r3,5154 <__smakebuf_r+0x13c>
    5090:	8080030b 	ldhu	r2,12(r16)
    5094:	00c80004 	movi	r3,8192
    5098:	10820014 	ori	r2,r2,2048
    509c:	8080030d 	sth	r2,12(r16)
    50a0:	20c01e26 	beq	r4,r3,511c <__smakebuf_r+0x104>
    50a4:	04810004 	movi	r18,1024
    50a8:	8809883a 	mov	r4,r17
    50ac:	900b883a 	mov	r5,r18
    50b0:	00051ac0 	call	51ac <_malloc_r>
    50b4:	1009883a 	mov	r4,r2
    50b8:	10003126 	beq	r2,zero,5180 <__smakebuf_r+0x168>
    50bc:	80c0030b 	ldhu	r3,12(r16)
    50c0:	00800034 	movhi	r2,0
    50c4:	1090e104 	addi	r2,r2,17284
    50c8:	88800f15 	stw	r2,60(r17)
    50cc:	18c02014 	ori	r3,r3,128
    50d0:	84800515 	stw	r18,20(r16)
    50d4:	80c0030d 	sth	r3,12(r16)
    50d8:	81000415 	stw	r4,16(r16)
    50dc:	81000015 	stw	r4,0(r16)
    50e0:	dfc01217 	ldw	ra,72(sp)
    50e4:	dc801117 	ldw	r18,68(sp)
    50e8:	dc401017 	ldw	r17,64(sp)
    50ec:	dc000f17 	ldw	r16,60(sp)
    50f0:	dec01304 	addi	sp,sp,76
    50f4:	f800283a 	ret
    50f8:	80c0030b 	ldhu	r3,12(r16)
    50fc:	1880200c 	andi	r2,r3,128
    5100:	10000426 	beq	r2,zero,5114 <__smakebuf_r+0xfc>
    5104:	04801004 	movi	r18,64
    5108:	18820014 	ori	r2,r3,2048
    510c:	8080030d 	sth	r2,12(r16)
    5110:	003fe506 	br	50a8 <__smakebuf_r+0x90>
    5114:	04810004 	movi	r18,1024
    5118:	003ffb06 	br	5108 <__smakebuf_r+0xf0>
    511c:	8140038f 	ldh	r5,14(r16)
    5120:	8809883a 	mov	r4,r17
    5124:	00077ec0 	call	77ec <_isatty_r>
    5128:	103fde26 	beq	r2,zero,50a4 <__smakebuf_r+0x8c>
    512c:	8080030b 	ldhu	r2,12(r16)
    5130:	80c010c4 	addi	r3,r16,67
    5134:	04810004 	movi	r18,1024
    5138:	10800054 	ori	r2,r2,1
    513c:	8080030d 	sth	r2,12(r16)
    5140:	00800044 	movi	r2,1
    5144:	80c00415 	stw	r3,16(r16)
    5148:	80800515 	stw	r2,20(r16)
    514c:	80c00015 	stw	r3,0(r16)
    5150:	003fd506 	br	50a8 <__smakebuf_r+0x90>
    5154:	80c00a17 	ldw	r3,40(r16)
    5158:	00800034 	movhi	r2,0
    515c:	109cae04 	addi	r2,r2,29368
    5160:	18bfcb1e 	bne	r3,r2,5090 <__smakebuf_r+0x78>
    5164:	8080030b 	ldhu	r2,12(r16)
    5168:	00c10004 	movi	r3,1024
    516c:	1825883a 	mov	r18,r3
    5170:	10c4b03a 	or	r2,r2,r3
    5174:	8080030d 	sth	r2,12(r16)
    5178:	80c01315 	stw	r3,76(r16)
    517c:	003fca06 	br	50a8 <__smakebuf_r+0x90>
    5180:	8100030b 	ldhu	r4,12(r16)
    5184:	2080800c 	andi	r2,r4,512
    5188:	103fb21e 	bne	r2,zero,5054 <__smakebuf_r+0x3c>
    518c:	80c010c4 	addi	r3,r16,67
    5190:	21000094 	ori	r4,r4,2
    5194:	00800044 	movi	r2,1
    5198:	80800515 	stw	r2,20(r16)
    519c:	8100030d 	sth	r4,12(r16)
    51a0:	80c00415 	stw	r3,16(r16)
    51a4:	80c00015 	stw	r3,0(r16)
    51a8:	003faa06 	br	5054 <__smakebuf_r+0x3c>

000051ac <_malloc_r>:
    51ac:	defff604 	addi	sp,sp,-40
    51b0:	28c002c4 	addi	r3,r5,11
    51b4:	00800584 	movi	r2,22
    51b8:	dc800215 	stw	r18,8(sp)
    51bc:	dfc00915 	stw	ra,36(sp)
    51c0:	df000815 	stw	fp,32(sp)
    51c4:	ddc00715 	stw	r23,28(sp)
    51c8:	dd800615 	stw	r22,24(sp)
    51cc:	dd400515 	stw	r21,20(sp)
    51d0:	dd000415 	stw	r20,16(sp)
    51d4:	dcc00315 	stw	r19,12(sp)
    51d8:	dc400115 	stw	r17,4(sp)
    51dc:	dc000015 	stw	r16,0(sp)
    51e0:	2025883a 	mov	r18,r4
    51e4:	10c01236 	bltu	r2,r3,5230 <_malloc_r+0x84>
    51e8:	04400404 	movi	r17,16
    51ec:	8940142e 	bgeu	r17,r5,5240 <_malloc_r+0x94>
    51f0:	00800304 	movi	r2,12
    51f4:	0007883a 	mov	r3,zero
    51f8:	90800015 	stw	r2,0(r18)
    51fc:	1805883a 	mov	r2,r3
    5200:	dfc00917 	ldw	ra,36(sp)
    5204:	df000817 	ldw	fp,32(sp)
    5208:	ddc00717 	ldw	r23,28(sp)
    520c:	dd800617 	ldw	r22,24(sp)
    5210:	dd400517 	ldw	r21,20(sp)
    5214:	dd000417 	ldw	r20,16(sp)
    5218:	dcc00317 	ldw	r19,12(sp)
    521c:	dc800217 	ldw	r18,8(sp)
    5220:	dc400117 	ldw	r17,4(sp)
    5224:	dc000017 	ldw	r16,0(sp)
    5228:	dec00a04 	addi	sp,sp,40
    522c:	f800283a 	ret
    5230:	00bffe04 	movi	r2,-8
    5234:	18a2703a 	and	r17,r3,r2
    5238:	883fed16 	blt	r17,zero,51f0 <_malloc_r+0x44>
    523c:	897fec36 	bltu	r17,r5,51f0 <_malloc_r+0x44>
    5240:	9009883a 	mov	r4,r18
    5244:	000a4000 	call	a400 <__malloc_lock>
    5248:	00807dc4 	movi	r2,503
    524c:	14402b2e 	bgeu	r2,r17,52fc <_malloc_r+0x150>
    5250:	8806d27a 	srli	r3,r17,9
    5254:	18003f1e 	bne	r3,zero,5354 <_malloc_r+0x1a8>
    5258:	880cd0fa 	srli	r6,r17,3
    525c:	300490fa 	slli	r2,r6,3
    5260:	02c000f4 	movhi	r11,3
    5264:	5ac1e404 	addi	r11,r11,1936
    5268:	12cb883a 	add	r5,r2,r11
    526c:	2c000317 	ldw	r16,12(r5)
    5270:	580f883a 	mov	r7,r11
    5274:	2c00041e 	bne	r5,r16,5288 <_malloc_r+0xdc>
    5278:	00000a06 	br	52a4 <_malloc_r+0xf8>
    527c:	1800860e 	bge	r3,zero,5498 <_malloc_r+0x2ec>
    5280:	84000317 	ldw	r16,12(r16)
    5284:	2c000726 	beq	r5,r16,52a4 <_malloc_r+0xf8>
    5288:	80800117 	ldw	r2,4(r16)
    528c:	00ffff04 	movi	r3,-4
    5290:	10c8703a 	and	r4,r2,r3
    5294:	2447c83a 	sub	r3,r4,r17
    5298:	008003c4 	movi	r2,15
    529c:	10fff70e 	bge	r2,r3,527c <_malloc_r+0xd0>
    52a0:	31bfffc4 	addi	r6,r6,-1
    52a4:	32400044 	addi	r9,r6,1
    52a8:	028000f4 	movhi	r10,3
    52ac:	5281e604 	addi	r10,r10,1944
    52b0:	54000217 	ldw	r16,8(r10)
    52b4:	8280a026 	beq	r16,r10,5538 <_malloc_r+0x38c>
    52b8:	80800117 	ldw	r2,4(r16)
    52bc:	00ffff04 	movi	r3,-4
    52c0:	10ca703a 	and	r5,r2,r3
    52c4:	2c4dc83a 	sub	r6,r5,r17
    52c8:	008003c4 	movi	r2,15
    52cc:	11808316 	blt	r2,r6,54dc <_malloc_r+0x330>
    52d0:	52800315 	stw	r10,12(r10)
    52d4:	52800215 	stw	r10,8(r10)
    52d8:	30002916 	blt	r6,zero,5380 <_malloc_r+0x1d4>
    52dc:	8147883a 	add	r3,r16,r5
    52e0:	18800117 	ldw	r2,4(r3)
    52e4:	9009883a 	mov	r4,r18
    52e8:	10800054 	ori	r2,r2,1
    52ec:	18800115 	stw	r2,4(r3)
    52f0:	000a4200 	call	a420 <__malloc_unlock>
    52f4:	80c00204 	addi	r3,r16,8
    52f8:	003fc006 	br	51fc <_malloc_r+0x50>
    52fc:	02c000f4 	movhi	r11,3
    5300:	5ac1e404 	addi	r11,r11,1936
    5304:	8ac5883a 	add	r2,r17,r11
    5308:	14000317 	ldw	r16,12(r2)
    530c:	580f883a 	mov	r7,r11
    5310:	8806d0fa 	srli	r3,r17,3
    5314:	14006c26 	beq	r2,r16,54c8 <_malloc_r+0x31c>
    5318:	80c00117 	ldw	r3,4(r16)
    531c:	00bfff04 	movi	r2,-4
    5320:	81800317 	ldw	r6,12(r16)
    5324:	1886703a 	and	r3,r3,r2
    5328:	80c7883a 	add	r3,r16,r3
    532c:	18800117 	ldw	r2,4(r3)
    5330:	81400217 	ldw	r5,8(r16)
    5334:	9009883a 	mov	r4,r18
    5338:	10800054 	ori	r2,r2,1
    533c:	18800115 	stw	r2,4(r3)
    5340:	31400215 	stw	r5,8(r6)
    5344:	29800315 	stw	r6,12(r5)
    5348:	000a4200 	call	a420 <__malloc_unlock>
    534c:	80c00204 	addi	r3,r16,8
    5350:	003faa06 	br	51fc <_malloc_r+0x50>
    5354:	00800104 	movi	r2,4
    5358:	10c0052e 	bgeu	r2,r3,5370 <_malloc_r+0x1c4>
    535c:	00800504 	movi	r2,20
    5360:	10c07836 	bltu	r2,r3,5544 <_malloc_r+0x398>
    5364:	198016c4 	addi	r6,r3,91
    5368:	300490fa 	slli	r2,r6,3
    536c:	003fbc06 	br	5260 <_malloc_r+0xb4>
    5370:	8804d1ba 	srli	r2,r17,6
    5374:	11800e04 	addi	r6,r2,56
    5378:	300490fa 	slli	r2,r6,3
    537c:	003fb806 	br	5260 <_malloc_r+0xb4>
    5380:	00807fc4 	movi	r2,511
    5384:	1140bb36 	bltu	r2,r5,5674 <_malloc_r+0x4c8>
    5388:	2806d0fa 	srli	r3,r5,3
    538c:	573ffe04 	addi	fp,r10,-8
    5390:	00800044 	movi	r2,1
    5394:	180890fa 	slli	r4,r3,3
    5398:	1807d0ba 	srai	r3,r3,2
    539c:	e1c00117 	ldw	r7,4(fp)
    53a0:	5909883a 	add	r4,r11,r4
    53a4:	21400217 	ldw	r5,8(r4)
    53a8:	10c4983a 	sll	r2,r2,r3
    53ac:	81000315 	stw	r4,12(r16)
    53b0:	81400215 	stw	r5,8(r16)
    53b4:	388eb03a 	or	r7,r7,r2
    53b8:	2c000315 	stw	r16,12(r5)
    53bc:	24000215 	stw	r16,8(r4)
    53c0:	e1c00115 	stw	r7,4(fp)
    53c4:	4807883a 	mov	r3,r9
    53c8:	4800cd16 	blt	r9,zero,5700 <_malloc_r+0x554>
    53cc:	1807d0ba 	srai	r3,r3,2
    53d0:	00800044 	movi	r2,1
    53d4:	10c8983a 	sll	r4,r2,r3
    53d8:	39004436 	bltu	r7,r4,54ec <_malloc_r+0x340>
    53dc:	21c4703a 	and	r2,r4,r7
    53e0:	10000a1e 	bne	r2,zero,540c <_malloc_r+0x260>
    53e4:	2109883a 	add	r4,r4,r4
    53e8:	00bfff04 	movi	r2,-4
    53ec:	4884703a 	and	r2,r9,r2
    53f0:	3906703a 	and	r3,r7,r4
    53f4:	12400104 	addi	r9,r2,4
    53f8:	1800041e 	bne	r3,zero,540c <_malloc_r+0x260>
    53fc:	2109883a 	add	r4,r4,r4
    5400:	3904703a 	and	r2,r7,r4
    5404:	4a400104 	addi	r9,r9,4
    5408:	103ffc26 	beq	r2,zero,53fc <_malloc_r+0x250>
    540c:	480490fa 	slli	r2,r9,3
    5410:	4819883a 	mov	r12,r9
    5414:	023fff04 	movi	r8,-4
    5418:	589b883a 	add	r13,r11,r2
    541c:	6807883a 	mov	r3,r13
    5420:	014003c4 	movi	r5,15
    5424:	1c000317 	ldw	r16,12(r3)
    5428:	1c00041e 	bne	r3,r16,543c <_malloc_r+0x290>
    542c:	0000a706 	br	56cc <_malloc_r+0x520>
    5430:	3000ab0e 	bge	r6,zero,56e0 <_malloc_r+0x534>
    5434:	84000317 	ldw	r16,12(r16)
    5438:	1c00a426 	beq	r3,r16,56cc <_malloc_r+0x520>
    543c:	80800117 	ldw	r2,4(r16)
    5440:	1204703a 	and	r2,r2,r8
    5444:	144dc83a 	sub	r6,r2,r17
    5448:	29bff90e 	bge	r5,r6,5430 <_malloc_r+0x284>
    544c:	81000317 	ldw	r4,12(r16)
    5450:	80c00217 	ldw	r3,8(r16)
    5454:	89400054 	ori	r5,r17,1
    5458:	8445883a 	add	r2,r16,r17
    545c:	20c00215 	stw	r3,8(r4)
    5460:	19000315 	stw	r4,12(r3)
    5464:	81400115 	stw	r5,4(r16)
    5468:	1187883a 	add	r3,r2,r6
    546c:	31000054 	ori	r4,r6,1
    5470:	50800315 	stw	r2,12(r10)
    5474:	50800215 	stw	r2,8(r10)
    5478:	19800015 	stw	r6,0(r3)
    547c:	11000115 	stw	r4,4(r2)
    5480:	12800215 	stw	r10,8(r2)
    5484:	12800315 	stw	r10,12(r2)
    5488:	9009883a 	mov	r4,r18
    548c:	000a4200 	call	a420 <__malloc_unlock>
    5490:	80c00204 	addi	r3,r16,8
    5494:	003f5906 	br	51fc <_malloc_r+0x50>
    5498:	8109883a 	add	r4,r16,r4
    549c:	20800117 	ldw	r2,4(r4)
    54a0:	80c00217 	ldw	r3,8(r16)
    54a4:	81400317 	ldw	r5,12(r16)
    54a8:	10800054 	ori	r2,r2,1
    54ac:	20800115 	stw	r2,4(r4)
    54b0:	28c00215 	stw	r3,8(r5)
    54b4:	19400315 	stw	r5,12(r3)
    54b8:	9009883a 	mov	r4,r18
    54bc:	000a4200 	call	a420 <__malloc_unlock>
    54c0:	80c00204 	addi	r3,r16,8
    54c4:	003f4d06 	br	51fc <_malloc_r+0x50>
    54c8:	80800204 	addi	r2,r16,8
    54cc:	14000317 	ldw	r16,12(r2)
    54d0:	143f911e 	bne	r2,r16,5318 <_malloc_r+0x16c>
    54d4:	1a400084 	addi	r9,r3,2
    54d8:	003f7306 	br	52a8 <_malloc_r+0xfc>
    54dc:	88c00054 	ori	r3,r17,1
    54e0:	8445883a 	add	r2,r16,r17
    54e4:	80c00115 	stw	r3,4(r16)
    54e8:	003fdf06 	br	5468 <_malloc_r+0x2bc>
    54ec:	e4000217 	ldw	r16,8(fp)
    54f0:	00bfff04 	movi	r2,-4
    54f4:	80c00117 	ldw	r3,4(r16)
    54f8:	802d883a 	mov	r22,r16
    54fc:	18aa703a 	and	r21,r3,r2
    5500:	ac401636 	bltu	r21,r17,555c <_malloc_r+0x3b0>
    5504:	ac49c83a 	sub	r4,r21,r17
    5508:	008003c4 	movi	r2,15
    550c:	1100130e 	bge	r2,r4,555c <_malloc_r+0x3b0>
    5510:	88800054 	ori	r2,r17,1
    5514:	8447883a 	add	r3,r16,r17
    5518:	80800115 	stw	r2,4(r16)
    551c:	20800054 	ori	r2,r4,1
    5520:	18800115 	stw	r2,4(r3)
    5524:	e0c00215 	stw	r3,8(fp)
    5528:	9009883a 	mov	r4,r18
    552c:	000a4200 	call	a420 <__malloc_unlock>
    5530:	80c00204 	addi	r3,r16,8
    5534:	003f3106 	br	51fc <_malloc_r+0x50>
    5538:	39c00117 	ldw	r7,4(r7)
    553c:	573ffe04 	addi	fp,r10,-8
    5540:	003fa006 	br	53c4 <_malloc_r+0x218>
    5544:	00801504 	movi	r2,84
    5548:	10c06736 	bltu	r2,r3,56e8 <_malloc_r+0x53c>
    554c:	8804d33a 	srli	r2,r17,12
    5550:	11801b84 	addi	r6,r2,110
    5554:	300490fa 	slli	r2,r6,3
    5558:	003f4106 	br	5260 <_malloc_r+0xb4>
    555c:	d0a01817 	ldw	r2,-32672(gp)
    5560:	d0e00517 	ldw	r3,-32748(gp)
    5564:	053fffc4 	movi	r20,-1
    5568:	10800404 	addi	r2,r2,16
    556c:	88a7883a 	add	r19,r17,r2
    5570:	1d000326 	beq	r3,r20,5580 <_malloc_r+0x3d4>
    5574:	98c3ffc4 	addi	r3,r19,4095
    5578:	00bc0004 	movi	r2,-4096
    557c:	18a6703a 	and	r19,r3,r2
    5580:	9009883a 	mov	r4,r18
    5584:	980b883a 	mov	r5,r19
    5588:	00072400 	call	7240 <_sbrk_r>
    558c:	1009883a 	mov	r4,r2
    5590:	15000426 	beq	r2,r20,55a4 <_malloc_r+0x3f8>
    5594:	854b883a 	add	r5,r16,r21
    5598:	1029883a 	mov	r20,r2
    559c:	11405a2e 	bgeu	r2,r5,5708 <_malloc_r+0x55c>
    55a0:	87000c26 	beq	r16,fp,55d4 <_malloc_r+0x428>
    55a4:	e4000217 	ldw	r16,8(fp)
    55a8:	80c00117 	ldw	r3,4(r16)
    55ac:	00bfff04 	movi	r2,-4
    55b0:	1884703a 	and	r2,r3,r2
    55b4:	14400336 	bltu	r2,r17,55c4 <_malloc_r+0x418>
    55b8:	1449c83a 	sub	r4,r2,r17
    55bc:	008003c4 	movi	r2,15
    55c0:	113fd316 	blt	r2,r4,5510 <_malloc_r+0x364>
    55c4:	9009883a 	mov	r4,r18
    55c8:	000a4200 	call	a420 <__malloc_unlock>
    55cc:	0007883a 	mov	r3,zero
    55d0:	003f0a06 	br	51fc <_malloc_r+0x50>
    55d4:	05c000f4 	movhi	r23,3
    55d8:	bdc78a04 	addi	r23,r23,7720
    55dc:	b8800017 	ldw	r2,0(r23)
    55e0:	988d883a 	add	r6,r19,r2
    55e4:	b9800015 	stw	r6,0(r23)
    55e8:	d0e00517 	ldw	r3,-32748(gp)
    55ec:	00bfffc4 	movi	r2,-1
    55f0:	18808e26 	beq	r3,r2,582c <_malloc_r+0x680>
    55f4:	2145c83a 	sub	r2,r4,r5
    55f8:	3085883a 	add	r2,r6,r2
    55fc:	b8800015 	stw	r2,0(r23)
    5600:	20c001cc 	andi	r3,r4,7
    5604:	18005f1e 	bne	r3,zero,5784 <_malloc_r+0x5d8>
    5608:	000b883a 	mov	r5,zero
    560c:	a4c5883a 	add	r2,r20,r19
    5610:	1083ffcc 	andi	r2,r2,4095
    5614:	00c40004 	movi	r3,4096
    5618:	1887c83a 	sub	r3,r3,r2
    561c:	28e7883a 	add	r19,r5,r3
    5620:	9009883a 	mov	r4,r18
    5624:	980b883a 	mov	r5,r19
    5628:	00072400 	call	7240 <_sbrk_r>
    562c:	1007883a 	mov	r3,r2
    5630:	00bfffc4 	movi	r2,-1
    5634:	18807a26 	beq	r3,r2,5820 <_malloc_r+0x674>
    5638:	1d05c83a 	sub	r2,r3,r20
    563c:	9885883a 	add	r2,r19,r2
    5640:	10c00054 	ori	r3,r2,1
    5644:	b8800017 	ldw	r2,0(r23)
    5648:	a021883a 	mov	r16,r20
    564c:	a0c00115 	stw	r3,4(r20)
    5650:	9885883a 	add	r2,r19,r2
    5654:	b8800015 	stw	r2,0(r23)
    5658:	e5000215 	stw	r20,8(fp)
    565c:	b7003626 	beq	r22,fp,5738 <_malloc_r+0x58c>
    5660:	018003c4 	movi	r6,15
    5664:	35404b36 	bltu	r6,r21,5794 <_malloc_r+0x5e8>
    5668:	00800044 	movi	r2,1
    566c:	a0800115 	stw	r2,4(r20)
    5670:	003fcd06 	br	55a8 <_malloc_r+0x3fc>
    5674:	2808d27a 	srli	r4,r5,9
    5678:	2000371e 	bne	r4,zero,5758 <_malloc_r+0x5ac>
    567c:	2808d0fa 	srli	r4,r5,3
    5680:	200690fa 	slli	r3,r4,3
    5684:	1ad1883a 	add	r8,r3,r11
    5688:	41800217 	ldw	r6,8(r8)
    568c:	41805b26 	beq	r8,r6,57fc <_malloc_r+0x650>
    5690:	30800117 	ldw	r2,4(r6)
    5694:	00ffff04 	movi	r3,-4
    5698:	10c4703a 	and	r2,r2,r3
    569c:	2880022e 	bgeu	r5,r2,56a8 <_malloc_r+0x4fc>
    56a0:	31800217 	ldw	r6,8(r6)
    56a4:	41bffa1e 	bne	r8,r6,5690 <_malloc_r+0x4e4>
    56a8:	32000317 	ldw	r8,12(r6)
    56ac:	39c00117 	ldw	r7,4(r7)
    56b0:	82000315 	stw	r8,12(r16)
    56b4:	81800215 	stw	r6,8(r16)
    56b8:	070000f4 	movhi	fp,3
    56bc:	e701e404 	addi	fp,fp,1936
    56c0:	34000315 	stw	r16,12(r6)
    56c4:	44000215 	stw	r16,8(r8)
    56c8:	003f3e06 	br	53c4 <_malloc_r+0x218>
    56cc:	63000044 	addi	r12,r12,1
    56d0:	608000cc 	andi	r2,r12,3
    56d4:	10005d26 	beq	r2,zero,584c <_malloc_r+0x6a0>
    56d8:	18c00204 	addi	r3,r3,8
    56dc:	003f5106 	br	5424 <_malloc_r+0x278>
    56e0:	8089883a 	add	r4,r16,r2
    56e4:	003f6d06 	br	549c <_malloc_r+0x2f0>
    56e8:	00805504 	movi	r2,340
    56ec:	10c02036 	bltu	r2,r3,5770 <_malloc_r+0x5c4>
    56f0:	8804d3fa 	srli	r2,r17,15
    56f4:	11801dc4 	addi	r6,r2,119
    56f8:	300490fa 	slli	r2,r6,3
    56fc:	003ed806 	br	5260 <_malloc_r+0xb4>
    5700:	48c000c4 	addi	r3,r9,3
    5704:	003f3106 	br	53cc <_malloc_r+0x220>
    5708:	05c000f4 	movhi	r23,3
    570c:	bdc78a04 	addi	r23,r23,7720
    5710:	b8800017 	ldw	r2,0(r23)
    5714:	988d883a 	add	r6,r19,r2
    5718:	b9800015 	stw	r6,0(r23)
    571c:	293fb21e 	bne	r5,r4,55e8 <_malloc_r+0x43c>
    5720:	2083ffcc 	andi	r2,r4,4095
    5724:	103fb01e 	bne	r2,zero,55e8 <_malloc_r+0x43c>
    5728:	e4000217 	ldw	r16,8(fp)
    572c:	9d45883a 	add	r2,r19,r21
    5730:	10800054 	ori	r2,r2,1
    5734:	80800115 	stw	r2,4(r16)
    5738:	b8c00017 	ldw	r3,0(r23)
    573c:	d0a01917 	ldw	r2,-32668(gp)
    5740:	10c0012e 	bgeu	r2,r3,5748 <_malloc_r+0x59c>
    5744:	d0e01915 	stw	r3,-32668(gp)
    5748:	d0a01a17 	ldw	r2,-32664(gp)
    574c:	10ff962e 	bgeu	r2,r3,55a8 <_malloc_r+0x3fc>
    5750:	d0e01a15 	stw	r3,-32664(gp)
    5754:	003f9406 	br	55a8 <_malloc_r+0x3fc>
    5758:	00800104 	movi	r2,4
    575c:	11001e36 	bltu	r2,r4,57d8 <_malloc_r+0x62c>
    5760:	2804d1ba 	srli	r2,r5,6
    5764:	11000e04 	addi	r4,r2,56
    5768:	200690fa 	slli	r3,r4,3
    576c:	003fc506 	br	5684 <_malloc_r+0x4d8>
    5770:	00815504 	movi	r2,1364
    5774:	10c01d2e 	bgeu	r2,r3,57ec <_malloc_r+0x640>
    5778:	01801f84 	movi	r6,126
    577c:	0080fc04 	movi	r2,1008
    5780:	003eb706 	br	5260 <_malloc_r+0xb4>
    5784:	00800204 	movi	r2,8
    5788:	10cbc83a 	sub	r5,r2,r3
    578c:	2169883a 	add	r20,r4,r5
    5790:	003f9e06 	br	560c <_malloc_r+0x460>
    5794:	00bffe04 	movi	r2,-8
    5798:	a93ffd04 	addi	r4,r21,-12
    579c:	2088703a 	and	r4,r4,r2
    57a0:	b10b883a 	add	r5,r22,r4
    57a4:	00c00144 	movi	r3,5
    57a8:	28c00215 	stw	r3,8(r5)
    57ac:	28c00115 	stw	r3,4(r5)
    57b0:	b0800117 	ldw	r2,4(r22)
    57b4:	1080004c 	andi	r2,r2,1
    57b8:	2084b03a 	or	r2,r4,r2
    57bc:	b0800115 	stw	r2,4(r22)
    57c0:	313fdd2e 	bgeu	r6,r4,5738 <_malloc_r+0x58c>
    57c4:	b1400204 	addi	r5,r22,8
    57c8:	9009883a 	mov	r4,r18
    57cc:	00046240 	call	4624 <_free_r>
    57d0:	e4000217 	ldw	r16,8(fp)
    57d4:	003fd806 	br	5738 <_malloc_r+0x58c>
    57d8:	00800504 	movi	r2,20
    57dc:	11001536 	bltu	r2,r4,5834 <_malloc_r+0x688>
    57e0:	210016c4 	addi	r4,r4,91
    57e4:	200690fa 	slli	r3,r4,3
    57e8:	003fa606 	br	5684 <_malloc_r+0x4d8>
    57ec:	8804d4ba 	srli	r2,r17,18
    57f0:	11801f04 	addi	r6,r2,124
    57f4:	300490fa 	slli	r2,r6,3
    57f8:	003e9906 	br	5260 <_malloc_r+0xb4>
    57fc:	2009d0ba 	srai	r4,r4,2
    5800:	014000f4 	movhi	r5,3
    5804:	2941e404 	addi	r5,r5,1936
    5808:	00c00044 	movi	r3,1
    580c:	28800117 	ldw	r2,4(r5)
    5810:	1906983a 	sll	r3,r3,r4
    5814:	10c4b03a 	or	r2,r2,r3
    5818:	28800115 	stw	r2,4(r5)
    581c:	003fa306 	br	56ac <_malloc_r+0x500>
    5820:	0027883a 	mov	r19,zero
    5824:	00c00044 	movi	r3,1
    5828:	003f8606 	br	5644 <_malloc_r+0x498>
    582c:	d1200515 	stw	r4,-32748(gp)
    5830:	003f7306 	br	5600 <_malloc_r+0x454>
    5834:	00801504 	movi	r2,84
    5838:	11001936 	bltu	r2,r4,58a0 <_malloc_r+0x6f4>
    583c:	2804d33a 	srli	r2,r5,12
    5840:	11001b84 	addi	r4,r2,110
    5844:	200690fa 	slli	r3,r4,3
    5848:	003f8e06 	br	5684 <_malloc_r+0x4d8>
    584c:	480b883a 	mov	r5,r9
    5850:	6807883a 	mov	r3,r13
    5854:	288000cc 	andi	r2,r5,3
    5858:	18fffe04 	addi	r3,r3,-8
    585c:	297fffc4 	addi	r5,r5,-1
    5860:	10001526 	beq	r2,zero,58b8 <_malloc_r+0x70c>
    5864:	18800217 	ldw	r2,8(r3)
    5868:	10fffa26 	beq	r2,r3,5854 <_malloc_r+0x6a8>
    586c:	2109883a 	add	r4,r4,r4
    5870:	393f1e36 	bltu	r7,r4,54ec <_malloc_r+0x340>
    5874:	203f1d26 	beq	r4,zero,54ec <_malloc_r+0x340>
    5878:	21c4703a 	and	r2,r4,r7
    587c:	10000226 	beq	r2,zero,5888 <_malloc_r+0x6dc>
    5880:	6013883a 	mov	r9,r12
    5884:	003ee106 	br	540c <_malloc_r+0x260>
    5888:	2109883a 	add	r4,r4,r4
    588c:	3904703a 	and	r2,r7,r4
    5890:	63000104 	addi	r12,r12,4
    5894:	103ffc26 	beq	r2,zero,5888 <_malloc_r+0x6dc>
    5898:	6013883a 	mov	r9,r12
    589c:	003edb06 	br	540c <_malloc_r+0x260>
    58a0:	00805504 	movi	r2,340
    58a4:	11000836 	bltu	r2,r4,58c8 <_malloc_r+0x71c>
    58a8:	2804d3fa 	srli	r2,r5,15
    58ac:	11001dc4 	addi	r4,r2,119
    58b0:	200690fa 	slli	r3,r4,3
    58b4:	003f7306 	br	5684 <_malloc_r+0x4d8>
    58b8:	0104303a 	nor	r2,zero,r4
    58bc:	388e703a 	and	r7,r7,r2
    58c0:	e1c00115 	stw	r7,4(fp)
    58c4:	003fe906 	br	586c <_malloc_r+0x6c0>
    58c8:	00815504 	movi	r2,1364
    58cc:	1100032e 	bgeu	r2,r4,58dc <_malloc_r+0x730>
    58d0:	01001f84 	movi	r4,126
    58d4:	00c0fc04 	movi	r3,1008
    58d8:	003f6a06 	br	5684 <_malloc_r+0x4d8>
    58dc:	2804d4ba 	srli	r2,r5,18
    58e0:	11001f04 	addi	r4,r2,124
    58e4:	200690fa 	slli	r3,r4,3
    58e8:	003f6606 	br	5684 <_malloc_r+0x4d8>

000058ec <memchr>:
    58ec:	008000c4 	movi	r2,3
    58f0:	29403fcc 	andi	r5,r5,255
    58f4:	2007883a 	mov	r3,r4
    58f8:	1180022e 	bgeu	r2,r6,5904 <memchr+0x18>
    58fc:	2084703a 	and	r2,r4,r2
    5900:	10000b26 	beq	r2,zero,5930 <memchr+0x44>
    5904:	313fffc4 	addi	r4,r6,-1
    5908:	3000051e 	bne	r6,zero,5920 <memchr+0x34>
    590c:	00002c06 	br	59c0 <memchr+0xd4>
    5910:	213fffc4 	addi	r4,r4,-1
    5914:	00bfffc4 	movi	r2,-1
    5918:	18c00044 	addi	r3,r3,1
    591c:	20802826 	beq	r4,r2,59c0 <memchr+0xd4>
    5920:	18800003 	ldbu	r2,0(r3)
    5924:	28bffa1e 	bne	r5,r2,5910 <memchr+0x24>
    5928:	1805883a 	mov	r2,r3
    592c:	f800283a 	ret
    5930:	0011883a 	mov	r8,zero
    5934:	0007883a 	mov	r3,zero
    5938:	01c00104 	movi	r7,4
    593c:	4004923a 	slli	r2,r8,8
    5940:	18c00044 	addi	r3,r3,1
    5944:	1151883a 	add	r8,r2,r5
    5948:	19fffc1e 	bne	r3,r7,593c <memchr+0x50>
    594c:	02bfbff4 	movhi	r10,65279
    5950:	52bfbfc4 	addi	r10,r10,-257
    5954:	02602074 	movhi	r9,32897
    5958:	4a602004 	addi	r9,r9,-32640
    595c:	02c000c4 	movi	r11,3
    5960:	20800017 	ldw	r2,0(r4)
    5964:	31bfff04 	addi	r6,r6,-4
    5968:	200f883a 	mov	r7,r4
    596c:	1204f03a 	xor	r2,r2,r8
    5970:	1287883a 	add	r3,r2,r10
    5974:	1a46703a 	and	r3,r3,r9
    5978:	0084303a 	nor	r2,zero,r2
    597c:	10c4703a 	and	r2,r2,r3
    5980:	10000b26 	beq	r2,zero,59b0 <memchr+0xc4>
    5984:	20800003 	ldbu	r2,0(r4)
    5988:	28800f26 	beq	r5,r2,59c8 <memchr+0xdc>
    598c:	20800043 	ldbu	r2,1(r4)
    5990:	21c00044 	addi	r7,r4,1
    5994:	28800c26 	beq	r5,r2,59c8 <memchr+0xdc>
    5998:	20800083 	ldbu	r2,2(r4)
    599c:	21c00084 	addi	r7,r4,2
    59a0:	28800926 	beq	r5,r2,59c8 <memchr+0xdc>
    59a4:	208000c3 	ldbu	r2,3(r4)
    59a8:	21c000c4 	addi	r7,r4,3
    59ac:	28800626 	beq	r5,r2,59c8 <memchr+0xdc>
    59b0:	21000104 	addi	r4,r4,4
    59b4:	59bfea36 	bltu	r11,r6,5960 <memchr+0x74>
    59b8:	2007883a 	mov	r3,r4
    59bc:	003fd106 	br	5904 <memchr+0x18>
    59c0:	0005883a 	mov	r2,zero
    59c4:	f800283a 	ret
    59c8:	3805883a 	mov	r2,r7
    59cc:	f800283a 	ret

000059d0 <memcpy>:
    59d0:	01c003c4 	movi	r7,15
    59d4:	2007883a 	mov	r3,r4
    59d8:	3980032e 	bgeu	r7,r6,59e8 <memcpy+0x18>
    59dc:	2904b03a 	or	r2,r5,r4
    59e0:	108000cc 	andi	r2,r2,3
    59e4:	10000926 	beq	r2,zero,5a0c <memcpy+0x3c>
    59e8:	30000626 	beq	r6,zero,5a04 <memcpy+0x34>
    59ec:	30cd883a 	add	r6,r6,r3
    59f0:	28800003 	ldbu	r2,0(r5)
    59f4:	29400044 	addi	r5,r5,1
    59f8:	18800005 	stb	r2,0(r3)
    59fc:	18c00044 	addi	r3,r3,1
    5a00:	30fffb1e 	bne	r6,r3,59f0 <memcpy+0x20>
    5a04:	2005883a 	mov	r2,r4
    5a08:	f800283a 	ret
    5a0c:	3811883a 	mov	r8,r7
    5a10:	200f883a 	mov	r7,r4
    5a14:	28c00017 	ldw	r3,0(r5)
    5a18:	31bffc04 	addi	r6,r6,-16
    5a1c:	38c00015 	stw	r3,0(r7)
    5a20:	28800117 	ldw	r2,4(r5)
    5a24:	38800115 	stw	r2,4(r7)
    5a28:	28c00217 	ldw	r3,8(r5)
    5a2c:	38c00215 	stw	r3,8(r7)
    5a30:	28800317 	ldw	r2,12(r5)
    5a34:	29400404 	addi	r5,r5,16
    5a38:	38800315 	stw	r2,12(r7)
    5a3c:	39c00404 	addi	r7,r7,16
    5a40:	41bff436 	bltu	r8,r6,5a14 <memcpy+0x44>
    5a44:	008000c4 	movi	r2,3
    5a48:	1180072e 	bgeu	r2,r6,5a68 <memcpy+0x98>
    5a4c:	1007883a 	mov	r3,r2
    5a50:	28800017 	ldw	r2,0(r5)
    5a54:	31bfff04 	addi	r6,r6,-4
    5a58:	29400104 	addi	r5,r5,4
    5a5c:	38800015 	stw	r2,0(r7)
    5a60:	39c00104 	addi	r7,r7,4
    5a64:	19bffa36 	bltu	r3,r6,5a50 <memcpy+0x80>
    5a68:	3807883a 	mov	r3,r7
    5a6c:	003fde06 	br	59e8 <memcpy+0x18>

00005a70 <memmove>:
    5a70:	2807883a 	mov	r3,r5
    5a74:	2011883a 	mov	r8,r4
    5a78:	29000c2e 	bgeu	r5,r4,5aac <memmove+0x3c>
    5a7c:	298f883a 	add	r7,r5,r6
    5a80:	21c00a2e 	bgeu	r4,r7,5aac <memmove+0x3c>
    5a84:	30000726 	beq	r6,zero,5aa4 <memmove+0x34>
    5a88:	2187883a 	add	r3,r4,r6
    5a8c:	198dc83a 	sub	r6,r3,r6
    5a90:	39ffffc4 	addi	r7,r7,-1
    5a94:	38800003 	ldbu	r2,0(r7)
    5a98:	18ffffc4 	addi	r3,r3,-1
    5a9c:	18800005 	stb	r2,0(r3)
    5aa0:	19bffb1e 	bne	r3,r6,5a90 <memmove+0x20>
    5aa4:	2005883a 	mov	r2,r4
    5aa8:	f800283a 	ret
    5aac:	01c003c4 	movi	r7,15
    5ab0:	39800a36 	bltu	r7,r6,5adc <memmove+0x6c>
    5ab4:	303ffb26 	beq	r6,zero,5aa4 <memmove+0x34>
    5ab8:	400f883a 	mov	r7,r8
    5abc:	320d883a 	add	r6,r6,r8
    5ac0:	28800003 	ldbu	r2,0(r5)
    5ac4:	29400044 	addi	r5,r5,1
    5ac8:	38800005 	stb	r2,0(r7)
    5acc:	39c00044 	addi	r7,r7,1
    5ad0:	39bffb1e 	bne	r7,r6,5ac0 <memmove+0x50>
    5ad4:	2005883a 	mov	r2,r4
    5ad8:	f800283a 	ret
    5adc:	1904b03a 	or	r2,r3,r4
    5ae0:	108000cc 	andi	r2,r2,3
    5ae4:	103ff31e 	bne	r2,zero,5ab4 <memmove+0x44>
    5ae8:	3811883a 	mov	r8,r7
    5aec:	180b883a 	mov	r5,r3
    5af0:	200f883a 	mov	r7,r4
    5af4:	28c00017 	ldw	r3,0(r5)
    5af8:	31bffc04 	addi	r6,r6,-16
    5afc:	38c00015 	stw	r3,0(r7)
    5b00:	28800117 	ldw	r2,4(r5)
    5b04:	38800115 	stw	r2,4(r7)
    5b08:	28c00217 	ldw	r3,8(r5)
    5b0c:	38c00215 	stw	r3,8(r7)
    5b10:	28800317 	ldw	r2,12(r5)
    5b14:	29400404 	addi	r5,r5,16
    5b18:	38800315 	stw	r2,12(r7)
    5b1c:	39c00404 	addi	r7,r7,16
    5b20:	41bff436 	bltu	r8,r6,5af4 <memmove+0x84>
    5b24:	008000c4 	movi	r2,3
    5b28:	1180072e 	bgeu	r2,r6,5b48 <memmove+0xd8>
    5b2c:	1007883a 	mov	r3,r2
    5b30:	28800017 	ldw	r2,0(r5)
    5b34:	31bfff04 	addi	r6,r6,-4
    5b38:	29400104 	addi	r5,r5,4
    5b3c:	38800015 	stw	r2,0(r7)
    5b40:	39c00104 	addi	r7,r7,4
    5b44:	19bffa36 	bltu	r3,r6,5b30 <memmove+0xc0>
    5b48:	3811883a 	mov	r8,r7
    5b4c:	003fd906 	br	5ab4 <memmove+0x44>

00005b50 <memset>:
    5b50:	008000c4 	movi	r2,3
    5b54:	29403fcc 	andi	r5,r5,255
    5b58:	2007883a 	mov	r3,r4
    5b5c:	1180022e 	bgeu	r2,r6,5b68 <memset+0x18>
    5b60:	2084703a 	and	r2,r4,r2
    5b64:	10000826 	beq	r2,zero,5b88 <memset+0x38>
    5b68:	30000526 	beq	r6,zero,5b80 <memset+0x30>
    5b6c:	2805883a 	mov	r2,r5
    5b70:	30cd883a 	add	r6,r6,r3
    5b74:	18800005 	stb	r2,0(r3)
    5b78:	18c00044 	addi	r3,r3,1
    5b7c:	19bffd1e 	bne	r3,r6,5b74 <memset+0x24>
    5b80:	2005883a 	mov	r2,r4
    5b84:	f800283a 	ret
    5b88:	2804923a 	slli	r2,r5,8
    5b8c:	020003c4 	movi	r8,15
    5b90:	200f883a 	mov	r7,r4
    5b94:	2884b03a 	or	r2,r5,r2
    5b98:	1006943a 	slli	r3,r2,16
    5b9c:	10c6b03a 	or	r3,r2,r3
    5ba0:	41800a2e 	bgeu	r8,r6,5bcc <memset+0x7c>
    5ba4:	4005883a 	mov	r2,r8
    5ba8:	31bffc04 	addi	r6,r6,-16
    5bac:	38c00015 	stw	r3,0(r7)
    5bb0:	38c00115 	stw	r3,4(r7)
    5bb4:	38c00215 	stw	r3,8(r7)
    5bb8:	38c00315 	stw	r3,12(r7)
    5bbc:	39c00404 	addi	r7,r7,16
    5bc0:	11bff936 	bltu	r2,r6,5ba8 <memset+0x58>
    5bc4:	008000c4 	movi	r2,3
    5bc8:	1180052e 	bgeu	r2,r6,5be0 <memset+0x90>
    5bcc:	31bfff04 	addi	r6,r6,-4
    5bd0:	008000c4 	movi	r2,3
    5bd4:	38c00015 	stw	r3,0(r7)
    5bd8:	39c00104 	addi	r7,r7,4
    5bdc:	11bffb36 	bltu	r2,r6,5bcc <memset+0x7c>
    5be0:	3807883a 	mov	r3,r7
    5be4:	003fe006 	br	5b68 <memset+0x18>

00005be8 <_Bfree>:
    5be8:	28000826 	beq	r5,zero,5c0c <_Bfree+0x24>
    5bec:	28800117 	ldw	r2,4(r5)
    5bf0:	21001317 	ldw	r4,76(r4)
    5bf4:	1085883a 	add	r2,r2,r2
    5bf8:	1085883a 	add	r2,r2,r2
    5bfc:	1105883a 	add	r2,r2,r4
    5c00:	10c00017 	ldw	r3,0(r2)
    5c04:	28c00015 	stw	r3,0(r5)
    5c08:	11400015 	stw	r5,0(r2)
    5c0c:	f800283a 	ret

00005c10 <__hi0bits>:
    5c10:	20bfffec 	andhi	r2,r4,65535
    5c14:	10001426 	beq	r2,zero,5c68 <__hi0bits+0x58>
    5c18:	0007883a 	mov	r3,zero
    5c1c:	20bfc02c 	andhi	r2,r4,65280
    5c20:	1000021e 	bne	r2,zero,5c2c <__hi0bits+0x1c>
    5c24:	2008923a 	slli	r4,r4,8
    5c28:	18c00204 	addi	r3,r3,8
    5c2c:	20bc002c 	andhi	r2,r4,61440
    5c30:	1000021e 	bne	r2,zero,5c3c <__hi0bits+0x2c>
    5c34:	2008913a 	slli	r4,r4,4
    5c38:	18c00104 	addi	r3,r3,4
    5c3c:	20b0002c 	andhi	r2,r4,49152
    5c40:	1000031e 	bne	r2,zero,5c50 <__hi0bits+0x40>
    5c44:	2105883a 	add	r2,r4,r4
    5c48:	18c00084 	addi	r3,r3,2
    5c4c:	1089883a 	add	r4,r2,r2
    5c50:	20000316 	blt	r4,zero,5c60 <__hi0bits+0x50>
    5c54:	2090002c 	andhi	r2,r4,16384
    5c58:	10000626 	beq	r2,zero,5c74 <__hi0bits+0x64>
    5c5c:	18c00044 	addi	r3,r3,1
    5c60:	1805883a 	mov	r2,r3
    5c64:	f800283a 	ret
    5c68:	2008943a 	slli	r4,r4,16
    5c6c:	00c00404 	movi	r3,16
    5c70:	003fea06 	br	5c1c <__hi0bits+0xc>
    5c74:	00c00804 	movi	r3,32
    5c78:	1805883a 	mov	r2,r3
    5c7c:	f800283a 	ret

00005c80 <__lo0bits>:
    5c80:	20c00017 	ldw	r3,0(r4)
    5c84:	188001cc 	andi	r2,r3,7
    5c88:	10000a26 	beq	r2,zero,5cb4 <__lo0bits+0x34>
    5c8c:	1880004c 	andi	r2,r3,1
    5c90:	1005003a 	cmpeq	r2,r2,zero
    5c94:	10002126 	beq	r2,zero,5d1c <__lo0bits+0x9c>
    5c98:	1880008c 	andi	r2,r3,2
    5c9c:	1000251e 	bne	r2,zero,5d34 <__lo0bits+0xb4>
    5ca0:	1804d0ba 	srli	r2,r3,2
    5ca4:	01400084 	movi	r5,2
    5ca8:	20800015 	stw	r2,0(r4)
    5cac:	2805883a 	mov	r2,r5
    5cb0:	f800283a 	ret
    5cb4:	18bfffcc 	andi	r2,r3,65535
    5cb8:	10001526 	beq	r2,zero,5d10 <__lo0bits+0x90>
    5cbc:	000b883a 	mov	r5,zero
    5cc0:	18803fcc 	andi	r2,r3,255
    5cc4:	1000021e 	bne	r2,zero,5cd0 <__lo0bits+0x50>
    5cc8:	1806d23a 	srli	r3,r3,8
    5ccc:	29400204 	addi	r5,r5,8
    5cd0:	188003cc 	andi	r2,r3,15
    5cd4:	1000021e 	bne	r2,zero,5ce0 <__lo0bits+0x60>
    5cd8:	1806d13a 	srli	r3,r3,4
    5cdc:	29400104 	addi	r5,r5,4
    5ce0:	188000cc 	andi	r2,r3,3
    5ce4:	1000021e 	bne	r2,zero,5cf0 <__lo0bits+0x70>
    5ce8:	1806d0ba 	srli	r3,r3,2
    5cec:	29400084 	addi	r5,r5,2
    5cf0:	1880004c 	andi	r2,r3,1
    5cf4:	1000031e 	bne	r2,zero,5d04 <__lo0bits+0x84>
    5cf8:	1806d07a 	srli	r3,r3,1
    5cfc:	18000a26 	beq	r3,zero,5d28 <__lo0bits+0xa8>
    5d00:	29400044 	addi	r5,r5,1
    5d04:	2805883a 	mov	r2,r5
    5d08:	20c00015 	stw	r3,0(r4)
    5d0c:	f800283a 	ret
    5d10:	1806d43a 	srli	r3,r3,16
    5d14:	01400404 	movi	r5,16
    5d18:	003fe906 	br	5cc0 <__lo0bits+0x40>
    5d1c:	000b883a 	mov	r5,zero
    5d20:	2805883a 	mov	r2,r5
    5d24:	f800283a 	ret
    5d28:	01400804 	movi	r5,32
    5d2c:	2805883a 	mov	r2,r5
    5d30:	f800283a 	ret
    5d34:	1804d07a 	srli	r2,r3,1
    5d38:	01400044 	movi	r5,1
    5d3c:	20800015 	stw	r2,0(r4)
    5d40:	003fda06 	br	5cac <__lo0bits+0x2c>

00005d44 <__mcmp>:
    5d44:	20800417 	ldw	r2,16(r4)
    5d48:	28c00417 	ldw	r3,16(r5)
    5d4c:	10cfc83a 	sub	r7,r2,r3
    5d50:	38000c1e 	bne	r7,zero,5d84 <__mcmp+0x40>
    5d54:	18c5883a 	add	r2,r3,r3
    5d58:	1085883a 	add	r2,r2,r2
    5d5c:	10c00504 	addi	r3,r2,20
    5d60:	21000504 	addi	r4,r4,20
    5d64:	28cb883a 	add	r5,r5,r3
    5d68:	2085883a 	add	r2,r4,r2
    5d6c:	10bfff04 	addi	r2,r2,-4
    5d70:	297fff04 	addi	r5,r5,-4
    5d74:	11800017 	ldw	r6,0(r2)
    5d78:	28c00017 	ldw	r3,0(r5)
    5d7c:	30c0031e 	bne	r6,r3,5d8c <__mcmp+0x48>
    5d80:	20bffa36 	bltu	r4,r2,5d6c <__mcmp+0x28>
    5d84:	3805883a 	mov	r2,r7
    5d88:	f800283a 	ret
    5d8c:	30c00336 	bltu	r6,r3,5d9c <__mcmp+0x58>
    5d90:	01c00044 	movi	r7,1
    5d94:	3805883a 	mov	r2,r7
    5d98:	f800283a 	ret
    5d9c:	01ffffc4 	movi	r7,-1
    5da0:	003ff806 	br	5d84 <__mcmp+0x40>

00005da4 <__ulp>:
    5da4:	295ffc2c 	andhi	r5,r5,32752
    5da8:	013f3034 	movhi	r4,64704
    5dac:	290b883a 	add	r5,r5,r4
    5db0:	0145c83a 	sub	r2,zero,r5
    5db4:	1007d53a 	srai	r3,r2,20
    5db8:	000d883a 	mov	r6,zero
    5dbc:	0140040e 	bge	zero,r5,5dd0 <__ulp+0x2c>
    5dc0:	280f883a 	mov	r7,r5
    5dc4:	3807883a 	mov	r3,r7
    5dc8:	3005883a 	mov	r2,r6
    5dcc:	f800283a 	ret
    5dd0:	008004c4 	movi	r2,19
    5dd4:	193ffb04 	addi	r4,r3,-20
    5dd8:	10c00c0e 	bge	r2,r3,5e0c <__ulp+0x68>
    5ddc:	008007c4 	movi	r2,31
    5de0:	1107c83a 	sub	r3,r2,r4
    5de4:	00800784 	movi	r2,30
    5de8:	01400044 	movi	r5,1
    5dec:	11000216 	blt	r2,r4,5df8 <__ulp+0x54>
    5df0:	00800044 	movi	r2,1
    5df4:	10ca983a 	sll	r5,r2,r3
    5df8:	000f883a 	mov	r7,zero
    5dfc:	280d883a 	mov	r6,r5
    5e00:	3807883a 	mov	r3,r7
    5e04:	3005883a 	mov	r2,r6
    5e08:	f800283a 	ret
    5e0c:	00800234 	movhi	r2,8
    5e10:	10cfd83a 	sra	r7,r2,r3
    5e14:	000d883a 	mov	r6,zero
    5e18:	3005883a 	mov	r2,r6
    5e1c:	3807883a 	mov	r3,r7
    5e20:	f800283a 	ret

00005e24 <__b2d>:
    5e24:	20800417 	ldw	r2,16(r4)
    5e28:	defff904 	addi	sp,sp,-28
    5e2c:	dd000415 	stw	r20,16(sp)
    5e30:	1085883a 	add	r2,r2,r2
    5e34:	25000504 	addi	r20,r4,20
    5e38:	1085883a 	add	r2,r2,r2
    5e3c:	dc000015 	stw	r16,0(sp)
    5e40:	a0a1883a 	add	r16,r20,r2
    5e44:	dd400515 	stw	r21,20(sp)
    5e48:	857fff17 	ldw	r21,-4(r16)
    5e4c:	dc400115 	stw	r17,4(sp)
    5e50:	dfc00615 	stw	ra,24(sp)
    5e54:	a809883a 	mov	r4,r21
    5e58:	2823883a 	mov	r17,r5
    5e5c:	dcc00315 	stw	r19,12(sp)
    5e60:	dc800215 	stw	r18,8(sp)
    5e64:	0005c100 	call	5c10 <__hi0bits>
    5e68:	100b883a 	mov	r5,r2
    5e6c:	00800804 	movi	r2,32
    5e70:	1145c83a 	sub	r2,r2,r5
    5e74:	88800015 	stw	r2,0(r17)
    5e78:	00800284 	movi	r2,10
    5e7c:	80ffff04 	addi	r3,r16,-4
    5e80:	11401416 	blt	r2,r5,5ed4 <__b2d+0xb0>
    5e84:	008002c4 	movi	r2,11
    5e88:	1149c83a 	sub	r4,r2,r5
    5e8c:	a0c02736 	bltu	r20,r3,5f2c <__b2d+0x108>
    5e90:	000d883a 	mov	r6,zero
    5e94:	28800544 	addi	r2,r5,21
    5e98:	a906d83a 	srl	r3,r21,r4
    5e9c:	a884983a 	sll	r2,r21,r2
    5ea0:	1ccffc34 	orhi	r19,r3,16368
    5ea4:	11a4b03a 	or	r18,r2,r6
    5ea8:	9005883a 	mov	r2,r18
    5eac:	9807883a 	mov	r3,r19
    5eb0:	dfc00617 	ldw	ra,24(sp)
    5eb4:	dd400517 	ldw	r21,20(sp)
    5eb8:	dd000417 	ldw	r20,16(sp)
    5ebc:	dcc00317 	ldw	r19,12(sp)
    5ec0:	dc800217 	ldw	r18,8(sp)
    5ec4:	dc400117 	ldw	r17,4(sp)
    5ec8:	dc000017 	ldw	r16,0(sp)
    5ecc:	dec00704 	addi	sp,sp,28
    5ed0:	f800283a 	ret
    5ed4:	a0c00e36 	bltu	r20,r3,5f10 <__b2d+0xec>
    5ed8:	293ffd44 	addi	r4,r5,-11
    5edc:	000d883a 	mov	r6,zero
    5ee0:	20000f26 	beq	r4,zero,5f20 <__b2d+0xfc>
    5ee4:	00800804 	movi	r2,32
    5ee8:	110bc83a 	sub	r5,r2,r4
    5eec:	a0c01236 	bltu	r20,r3,5f38 <__b2d+0x114>
    5ef0:	000f883a 	mov	r7,zero
    5ef4:	a904983a 	sll	r2,r21,r4
    5ef8:	3146d83a 	srl	r3,r6,r5
    5efc:	3108983a 	sll	r4,r6,r4
    5f00:	108ffc34 	orhi	r2,r2,16368
    5f04:	18a6b03a 	or	r19,r3,r2
    5f08:	3924b03a 	or	r18,r7,r4
    5f0c:	003fe606 	br	5ea8 <__b2d+0x84>
    5f10:	293ffd44 	addi	r4,r5,-11
    5f14:	81bffe17 	ldw	r6,-8(r16)
    5f18:	80fffe04 	addi	r3,r16,-8
    5f1c:	203ff11e 	bne	r4,zero,5ee4 <__b2d+0xc0>
    5f20:	accffc34 	orhi	r19,r21,16368
    5f24:	3025883a 	mov	r18,r6
    5f28:	003fdf06 	br	5ea8 <__b2d+0x84>
    5f2c:	18bfff17 	ldw	r2,-4(r3)
    5f30:	110cd83a 	srl	r6,r2,r4
    5f34:	003fd706 	br	5e94 <__b2d+0x70>
    5f38:	18bfff17 	ldw	r2,-4(r3)
    5f3c:	114ed83a 	srl	r7,r2,r5
    5f40:	003fec06 	br	5ef4 <__b2d+0xd0>

00005f44 <__ratio>:
    5f44:	defff904 	addi	sp,sp,-28
    5f48:	dc400215 	stw	r17,8(sp)
    5f4c:	2823883a 	mov	r17,r5
    5f50:	d80b883a 	mov	r5,sp
    5f54:	dfc00615 	stw	ra,24(sp)
    5f58:	dd000515 	stw	r20,20(sp)
    5f5c:	dcc00415 	stw	r19,16(sp)
    5f60:	dc800315 	stw	r18,12(sp)
    5f64:	2025883a 	mov	r18,r4
    5f68:	0005e240 	call	5e24 <__b2d>
    5f6c:	8809883a 	mov	r4,r17
    5f70:	d9400104 	addi	r5,sp,4
    5f74:	1027883a 	mov	r19,r2
    5f78:	1829883a 	mov	r20,r3
    5f7c:	0005e240 	call	5e24 <__b2d>
    5f80:	89000417 	ldw	r4,16(r17)
    5f84:	91c00417 	ldw	r7,16(r18)
    5f88:	d9800117 	ldw	r6,4(sp)
    5f8c:	180b883a 	mov	r5,r3
    5f90:	390fc83a 	sub	r7,r7,r4
    5f94:	1009883a 	mov	r4,r2
    5f98:	d8800017 	ldw	r2,0(sp)
    5f9c:	380e917a 	slli	r7,r7,5
    5fa0:	2011883a 	mov	r8,r4
    5fa4:	1185c83a 	sub	r2,r2,r6
    5fa8:	11c5883a 	add	r2,r2,r7
    5fac:	1006953a 	slli	r3,r2,20
    5fb0:	2813883a 	mov	r9,r5
    5fb4:	00800d0e 	bge	zero,r2,5fec <__ratio+0xa8>
    5fb8:	1d29883a 	add	r20,r3,r20
    5fbc:	a00b883a 	mov	r5,r20
    5fc0:	480f883a 	mov	r7,r9
    5fc4:	9809883a 	mov	r4,r19
    5fc8:	400d883a 	mov	r6,r8
    5fcc:	0008da00 	call	8da0 <__divdf3>
    5fd0:	dfc00617 	ldw	ra,24(sp)
    5fd4:	dd000517 	ldw	r20,20(sp)
    5fd8:	dcc00417 	ldw	r19,16(sp)
    5fdc:	dc800317 	ldw	r18,12(sp)
    5fe0:	dc400217 	ldw	r17,8(sp)
    5fe4:	dec00704 	addi	sp,sp,28
    5fe8:	f800283a 	ret
    5fec:	28d3c83a 	sub	r9,r5,r3
    5ff0:	003ff206 	br	5fbc <__ratio+0x78>

00005ff4 <_mprec_log10>:
    5ff4:	defffe04 	addi	sp,sp,-8
    5ff8:	008005c4 	movi	r2,23
    5ffc:	dc000015 	stw	r16,0(sp)
    6000:	dfc00115 	stw	ra,4(sp)
    6004:	2021883a 	mov	r16,r4
    6008:	11000c16 	blt	r2,r4,603c <_mprec_log10+0x48>
    600c:	200490fa 	slli	r2,r4,3
    6010:	00c000f4 	movhi	r3,3
    6014:	18c04604 	addi	r3,r3,280
    6018:	10c5883a 	add	r2,r2,r3
    601c:	12400117 	ldw	r9,4(r2)
    6020:	12000017 	ldw	r8,0(r2)
    6024:	4807883a 	mov	r3,r9
    6028:	4005883a 	mov	r2,r8
    602c:	dfc00117 	ldw	ra,4(sp)
    6030:	dc000017 	ldw	r16,0(sp)
    6034:	dec00204 	addi	sp,sp,8
    6038:	f800283a 	ret
    603c:	0011883a 	mov	r8,zero
    6040:	024ffc34 	movhi	r9,16368
    6044:	0005883a 	mov	r2,zero
    6048:	00d00934 	movhi	r3,16420
    604c:	480b883a 	mov	r5,r9
    6050:	4009883a 	mov	r4,r8
    6054:	180f883a 	mov	r7,r3
    6058:	100d883a 	mov	r6,r2
    605c:	00089dc0 	call	89dc <__muldf3>
    6060:	843fffc4 	addi	r16,r16,-1
    6064:	1011883a 	mov	r8,r2
    6068:	1813883a 	mov	r9,r3
    606c:	803ff51e 	bne	r16,zero,6044 <_mprec_log10+0x50>
    6070:	4005883a 	mov	r2,r8
    6074:	4807883a 	mov	r3,r9
    6078:	dfc00117 	ldw	ra,4(sp)
    607c:	dc000017 	ldw	r16,0(sp)
    6080:	dec00204 	addi	sp,sp,8
    6084:	f800283a 	ret

00006088 <__copybits>:
    6088:	297fffc4 	addi	r5,r5,-1
    608c:	30800417 	ldw	r2,16(r6)
    6090:	280bd17a 	srai	r5,r5,5
    6094:	31800504 	addi	r6,r6,20
    6098:	1085883a 	add	r2,r2,r2
    609c:	294b883a 	add	r5,r5,r5
    60a0:	294b883a 	add	r5,r5,r5
    60a4:	1085883a 	add	r2,r2,r2
    60a8:	290b883a 	add	r5,r5,r4
    60ac:	3087883a 	add	r3,r6,r2
    60b0:	29400104 	addi	r5,r5,4
    60b4:	30c0052e 	bgeu	r6,r3,60cc <__copybits+0x44>
    60b8:	30800017 	ldw	r2,0(r6)
    60bc:	31800104 	addi	r6,r6,4
    60c0:	20800015 	stw	r2,0(r4)
    60c4:	21000104 	addi	r4,r4,4
    60c8:	30fffb36 	bltu	r6,r3,60b8 <__copybits+0x30>
    60cc:	2140032e 	bgeu	r4,r5,60dc <__copybits+0x54>
    60d0:	20000015 	stw	zero,0(r4)
    60d4:	21000104 	addi	r4,r4,4
    60d8:	217ffd36 	bltu	r4,r5,60d0 <__copybits+0x48>
    60dc:	f800283a 	ret

000060e0 <__any_on>:
    60e0:	20800417 	ldw	r2,16(r4)
    60e4:	2807d17a 	srai	r3,r5,5
    60e8:	21000504 	addi	r4,r4,20
    60ec:	10c00d0e 	bge	r2,r3,6124 <__any_on+0x44>
    60f0:	1085883a 	add	r2,r2,r2
    60f4:	1085883a 	add	r2,r2,r2
    60f8:	208d883a 	add	r6,r4,r2
    60fc:	2180182e 	bgeu	r4,r6,6160 <__any_on+0x80>
    6100:	30bfff17 	ldw	r2,-4(r6)
    6104:	30ffff04 	addi	r3,r6,-4
    6108:	1000041e 	bne	r2,zero,611c <__any_on+0x3c>
    610c:	20c0142e 	bgeu	r4,r3,6160 <__any_on+0x80>
    6110:	18ffff04 	addi	r3,r3,-4
    6114:	18800017 	ldw	r2,0(r3)
    6118:	103ffc26 	beq	r2,zero,610c <__any_on+0x2c>
    611c:	00800044 	movi	r2,1
    6120:	f800283a 	ret
    6124:	18800a0e 	bge	r3,r2,6150 <__any_on+0x70>
    6128:	294007cc 	andi	r5,r5,31
    612c:	28000826 	beq	r5,zero,6150 <__any_on+0x70>
    6130:	18c5883a 	add	r2,r3,r3
    6134:	1085883a 	add	r2,r2,r2
    6138:	208d883a 	add	r6,r4,r2
    613c:	30c00017 	ldw	r3,0(r6)
    6140:	1944d83a 	srl	r2,r3,r5
    6144:	1144983a 	sll	r2,r2,r5
    6148:	18bff41e 	bne	r3,r2,611c <__any_on+0x3c>
    614c:	003feb06 	br	60fc <__any_on+0x1c>
    6150:	18c5883a 	add	r2,r3,r3
    6154:	1085883a 	add	r2,r2,r2
    6158:	208d883a 	add	r6,r4,r2
    615c:	003fe706 	br	60fc <__any_on+0x1c>
    6160:	0005883a 	mov	r2,zero
    6164:	f800283a 	ret

00006168 <_Balloc>:
    6168:	20c01317 	ldw	r3,76(r4)
    616c:	defffb04 	addi	sp,sp,-20
    6170:	dcc00315 	stw	r19,12(sp)
    6174:	dc800215 	stw	r18,8(sp)
    6178:	dfc00415 	stw	ra,16(sp)
    617c:	2825883a 	mov	r18,r5
    6180:	dc400115 	stw	r17,4(sp)
    6184:	dc000015 	stw	r16,0(sp)
    6188:	2027883a 	mov	r19,r4
    618c:	01800404 	movi	r6,16
    6190:	01400104 	movi	r5,4
    6194:	18001726 	beq	r3,zero,61f4 <_Balloc+0x8c>
    6198:	01400044 	movi	r5,1
    619c:	9485883a 	add	r2,r18,r18
    61a0:	2ca2983a 	sll	r17,r5,r18
    61a4:	1085883a 	add	r2,r2,r2
    61a8:	10c7883a 	add	r3,r2,r3
    61ac:	1c000017 	ldw	r16,0(r3)
    61b0:	8c4d883a 	add	r6,r17,r17
    61b4:	318d883a 	add	r6,r6,r6
    61b8:	9809883a 	mov	r4,r19
    61bc:	31800504 	addi	r6,r6,20
    61c0:	80001226 	beq	r16,zero,620c <_Balloc+0xa4>
    61c4:	80800017 	ldw	r2,0(r16)
    61c8:	18800015 	stw	r2,0(r3)
    61cc:	80000415 	stw	zero,16(r16)
    61d0:	80000315 	stw	zero,12(r16)
    61d4:	8005883a 	mov	r2,r16
    61d8:	dfc00417 	ldw	ra,16(sp)
    61dc:	dcc00317 	ldw	r19,12(sp)
    61e0:	dc800217 	ldw	r18,8(sp)
    61e4:	dc400117 	ldw	r17,4(sp)
    61e8:	dc000017 	ldw	r16,0(sp)
    61ec:	dec00504 	addi	sp,sp,20
    61f0:	f800283a 	ret
    61f4:	00075300 	call	7530 <_calloc_r>
    61f8:	1007883a 	mov	r3,r2
    61fc:	0021883a 	mov	r16,zero
    6200:	98801315 	stw	r2,76(r19)
    6204:	103fe41e 	bne	r2,zero,6198 <_Balloc+0x30>
    6208:	003ff206 	br	61d4 <_Balloc+0x6c>
    620c:	00075300 	call	7530 <_calloc_r>
    6210:	103ff026 	beq	r2,zero,61d4 <_Balloc+0x6c>
    6214:	1021883a 	mov	r16,r2
    6218:	14800115 	stw	r18,4(r2)
    621c:	14400215 	stw	r17,8(r2)
    6220:	003fea06 	br	61cc <_Balloc+0x64>

00006224 <__d2b>:
    6224:	defff504 	addi	sp,sp,-44
    6228:	dcc00515 	stw	r19,20(sp)
    622c:	04c00044 	movi	r19,1
    6230:	dc000215 	stw	r16,8(sp)
    6234:	2821883a 	mov	r16,r5
    6238:	980b883a 	mov	r5,r19
    623c:	ddc00915 	stw	r23,36(sp)
    6240:	dd800815 	stw	r22,32(sp)
    6244:	dd400715 	stw	r21,28(sp)
    6248:	dd000615 	stw	r20,24(sp)
    624c:	dc800415 	stw	r18,16(sp)
    6250:	dc400315 	stw	r17,12(sp)
    6254:	dfc00a15 	stw	ra,40(sp)
    6258:	3023883a 	mov	r17,r6
    625c:	382d883a 	mov	r22,r7
    6260:	ddc00b17 	ldw	r23,44(sp)
    6264:	00061680 	call	6168 <_Balloc>
    6268:	1025883a 	mov	r18,r2
    626c:	00a00034 	movhi	r2,32768
    6270:	10bfffc4 	addi	r2,r2,-1
    6274:	8888703a 	and	r4,r17,r2
    6278:	202ad53a 	srli	r21,r4,20
    627c:	00800434 	movhi	r2,16
    6280:	10bfffc4 	addi	r2,r2,-1
    6284:	8886703a 	and	r3,r17,r2
    6288:	a829003a 	cmpeq	r20,r21,zero
    628c:	800b883a 	mov	r5,r16
    6290:	d8c00115 	stw	r3,4(sp)
    6294:	94000504 	addi	r16,r18,20
    6298:	a000021e 	bne	r20,zero,62a4 <__d2b+0x80>
    629c:	18c00434 	orhi	r3,r3,16
    62a0:	d8c00115 	stw	r3,4(sp)
    62a4:	28002726 	beq	r5,zero,6344 <__d2b+0x120>
    62a8:	d809883a 	mov	r4,sp
    62ac:	d9400015 	stw	r5,0(sp)
    62b0:	0005c800 	call	5c80 <__lo0bits>
    62b4:	100d883a 	mov	r6,r2
    62b8:	10003526 	beq	r2,zero,6390 <__d2b+0x16c>
    62bc:	d8c00117 	ldw	r3,4(sp)
    62c0:	00800804 	movi	r2,32
    62c4:	1185c83a 	sub	r2,r2,r6
    62c8:	d9000017 	ldw	r4,0(sp)
    62cc:	1886983a 	sll	r3,r3,r2
    62d0:	1906b03a 	or	r3,r3,r4
    62d4:	90c00515 	stw	r3,20(r18)
    62d8:	d8c00117 	ldw	r3,4(sp)
    62dc:	1986d83a 	srl	r3,r3,r6
    62e0:	d8c00115 	stw	r3,4(sp)
    62e4:	180b003a 	cmpeq	r5,r3,zero
    62e8:	00800084 	movi	r2,2
    62ec:	114bc83a 	sub	r5,r2,r5
    62f0:	80c00115 	stw	r3,4(r16)
    62f4:	91400415 	stw	r5,16(r18)
    62f8:	a0001a1e 	bne	r20,zero,6364 <__d2b+0x140>
    62fc:	3545883a 	add	r2,r6,r21
    6300:	10bef344 	addi	r2,r2,-1075
    6304:	00c00d44 	movi	r3,53
    6308:	b0800015 	stw	r2,0(r22)
    630c:	1987c83a 	sub	r3,r3,r6
    6310:	b8c00015 	stw	r3,0(r23)
    6314:	9005883a 	mov	r2,r18
    6318:	dfc00a17 	ldw	ra,40(sp)
    631c:	ddc00917 	ldw	r23,36(sp)
    6320:	dd800817 	ldw	r22,32(sp)
    6324:	dd400717 	ldw	r21,28(sp)
    6328:	dd000617 	ldw	r20,24(sp)
    632c:	dcc00517 	ldw	r19,20(sp)
    6330:	dc800417 	ldw	r18,16(sp)
    6334:	dc400317 	ldw	r17,12(sp)
    6338:	dc000217 	ldw	r16,8(sp)
    633c:	dec00b04 	addi	sp,sp,44
    6340:	f800283a 	ret
    6344:	d9000104 	addi	r4,sp,4
    6348:	0005c800 	call	5c80 <__lo0bits>
    634c:	11800804 	addi	r6,r2,32
    6350:	d8800117 	ldw	r2,4(sp)
    6354:	94c00415 	stw	r19,16(r18)
    6358:	980b883a 	mov	r5,r19
    635c:	90800515 	stw	r2,20(r18)
    6360:	a03fe626 	beq	r20,zero,62fc <__d2b+0xd8>
    6364:	2945883a 	add	r2,r5,r5
    6368:	1085883a 	add	r2,r2,r2
    636c:	1405883a 	add	r2,r2,r16
    6370:	113fff17 	ldw	r4,-4(r2)
    6374:	30fef384 	addi	r3,r6,-1074
    6378:	2820917a 	slli	r16,r5,5
    637c:	b0c00015 	stw	r3,0(r22)
    6380:	0005c100 	call	5c10 <__hi0bits>
    6384:	80a1c83a 	sub	r16,r16,r2
    6388:	bc000015 	stw	r16,0(r23)
    638c:	003fe106 	br	6314 <__d2b+0xf0>
    6390:	d8800017 	ldw	r2,0(sp)
    6394:	90800515 	stw	r2,20(r18)
    6398:	d8c00117 	ldw	r3,4(sp)
    639c:	003fd106 	br	62e4 <__d2b+0xc0>

000063a0 <__mdiff>:
    63a0:	defffb04 	addi	sp,sp,-20
    63a4:	dc000015 	stw	r16,0(sp)
    63a8:	2821883a 	mov	r16,r5
    63ac:	dc800215 	stw	r18,8(sp)
    63b0:	300b883a 	mov	r5,r6
    63b4:	2025883a 	mov	r18,r4
    63b8:	8009883a 	mov	r4,r16
    63bc:	dc400115 	stw	r17,4(sp)
    63c0:	dfc00415 	stw	ra,16(sp)
    63c4:	dcc00315 	stw	r19,12(sp)
    63c8:	3023883a 	mov	r17,r6
    63cc:	0005d440 	call	5d44 <__mcmp>
    63d0:	10004226 	beq	r2,zero,64dc <__mdiff+0x13c>
    63d4:	10005016 	blt	r2,zero,6518 <__mdiff+0x178>
    63d8:	0027883a 	mov	r19,zero
    63dc:	81400117 	ldw	r5,4(r16)
    63e0:	9009883a 	mov	r4,r18
    63e4:	00061680 	call	6168 <_Balloc>
    63e8:	1019883a 	mov	r12,r2
    63ec:	82800417 	ldw	r10,16(r16)
    63f0:	88800417 	ldw	r2,16(r17)
    63f4:	81800504 	addi	r6,r16,20
    63f8:	5287883a 	add	r3,r10,r10
    63fc:	1085883a 	add	r2,r2,r2
    6400:	18c7883a 	add	r3,r3,r3
    6404:	1085883a 	add	r2,r2,r2
    6408:	8a000504 	addi	r8,r17,20
    640c:	64c00315 	stw	r19,12(r12)
    6410:	30db883a 	add	r13,r6,r3
    6414:	4097883a 	add	r11,r8,r2
    6418:	61c00504 	addi	r7,r12,20
    641c:	0013883a 	mov	r9,zero
    6420:	31000017 	ldw	r4,0(r6)
    6424:	41400017 	ldw	r5,0(r8)
    6428:	42000104 	addi	r8,r8,4
    642c:	20bfffcc 	andi	r2,r4,65535
    6430:	28ffffcc 	andi	r3,r5,65535
    6434:	10c5c83a 	sub	r2,r2,r3
    6438:	1245883a 	add	r2,r2,r9
    643c:	2008d43a 	srli	r4,r4,16
    6440:	280ad43a 	srli	r5,r5,16
    6444:	1007d43a 	srai	r3,r2,16
    6448:	3880000d 	sth	r2,0(r7)
    644c:	2149c83a 	sub	r4,r4,r5
    6450:	20c9883a 	add	r4,r4,r3
    6454:	3900008d 	sth	r4,2(r7)
    6458:	31800104 	addi	r6,r6,4
    645c:	39c00104 	addi	r7,r7,4
    6460:	2013d43a 	srai	r9,r4,16
    6464:	42ffee36 	bltu	r8,r11,6420 <__mdiff+0x80>
    6468:	33400c2e 	bgeu	r6,r13,649c <__mdiff+0xfc>
    646c:	30800017 	ldw	r2,0(r6)
    6470:	31800104 	addi	r6,r6,4
    6474:	10ffffcc 	andi	r3,r2,65535
    6478:	1a47883a 	add	r3,r3,r9
    647c:	1004d43a 	srli	r2,r2,16
    6480:	1809d43a 	srai	r4,r3,16
    6484:	38c0000d 	sth	r3,0(r7)
    6488:	1105883a 	add	r2,r2,r4
    648c:	3880008d 	sth	r2,2(r7)
    6490:	1013d43a 	srai	r9,r2,16
    6494:	39c00104 	addi	r7,r7,4
    6498:	337ff436 	bltu	r6,r13,646c <__mdiff+0xcc>
    649c:	38bfff17 	ldw	r2,-4(r7)
    64a0:	38ffff04 	addi	r3,r7,-4
    64a4:	1000041e 	bne	r2,zero,64b8 <__mdiff+0x118>
    64a8:	18ffff04 	addi	r3,r3,-4
    64ac:	18800017 	ldw	r2,0(r3)
    64b0:	52bfffc4 	addi	r10,r10,-1
    64b4:	103ffc26 	beq	r2,zero,64a8 <__mdiff+0x108>
    64b8:	6005883a 	mov	r2,r12
    64bc:	62800415 	stw	r10,16(r12)
    64c0:	dfc00417 	ldw	ra,16(sp)
    64c4:	dcc00317 	ldw	r19,12(sp)
    64c8:	dc800217 	ldw	r18,8(sp)
    64cc:	dc400117 	ldw	r17,4(sp)
    64d0:	dc000017 	ldw	r16,0(sp)
    64d4:	dec00504 	addi	sp,sp,20
    64d8:	f800283a 	ret
    64dc:	9009883a 	mov	r4,r18
    64e0:	000b883a 	mov	r5,zero
    64e4:	00061680 	call	6168 <_Balloc>
    64e8:	1019883a 	mov	r12,r2
    64ec:	00800044 	movi	r2,1
    64f0:	60800415 	stw	r2,16(r12)
    64f4:	6005883a 	mov	r2,r12
    64f8:	60000515 	stw	zero,20(r12)
    64fc:	dfc00417 	ldw	ra,16(sp)
    6500:	dcc00317 	ldw	r19,12(sp)
    6504:	dc800217 	ldw	r18,8(sp)
    6508:	dc400117 	ldw	r17,4(sp)
    650c:	dc000017 	ldw	r16,0(sp)
    6510:	dec00504 	addi	sp,sp,20
    6514:	f800283a 	ret
    6518:	880d883a 	mov	r6,r17
    651c:	04c00044 	movi	r19,1
    6520:	8023883a 	mov	r17,r16
    6524:	3021883a 	mov	r16,r6
    6528:	003fac06 	br	63dc <__mdiff+0x3c>

0000652c <__lshift>:
    652c:	defff904 	addi	sp,sp,-28
    6530:	28800417 	ldw	r2,16(r5)
    6534:	dc000015 	stw	r16,0(sp)
    6538:	3021d17a 	srai	r16,r6,5
    653c:	28c00217 	ldw	r3,8(r5)
    6540:	10800044 	addi	r2,r2,1
    6544:	dc400115 	stw	r17,4(sp)
    6548:	80a3883a 	add	r17,r16,r2
    654c:	dd400515 	stw	r21,20(sp)
    6550:	dd000415 	stw	r20,16(sp)
    6554:	dc800215 	stw	r18,8(sp)
    6558:	dfc00615 	stw	ra,24(sp)
    655c:	2825883a 	mov	r18,r5
    6560:	dcc00315 	stw	r19,12(sp)
    6564:	3029883a 	mov	r20,r6
    6568:	202b883a 	mov	r21,r4
    656c:	29400117 	ldw	r5,4(r5)
    6570:	1c40030e 	bge	r3,r17,6580 <__lshift+0x54>
    6574:	18c7883a 	add	r3,r3,r3
    6578:	29400044 	addi	r5,r5,1
    657c:	1c7ffd16 	blt	r3,r17,6574 <__lshift+0x48>
    6580:	a809883a 	mov	r4,r21
    6584:	00061680 	call	6168 <_Balloc>
    6588:	1027883a 	mov	r19,r2
    658c:	11400504 	addi	r5,r2,20
    6590:	0400090e 	bge	zero,r16,65b8 <__lshift+0x8c>
    6594:	2805883a 	mov	r2,r5
    6598:	0007883a 	mov	r3,zero
    659c:	18c00044 	addi	r3,r3,1
    65a0:	10000015 	stw	zero,0(r2)
    65a4:	10800104 	addi	r2,r2,4
    65a8:	80fffc1e 	bne	r16,r3,659c <__lshift+0x70>
    65ac:	8405883a 	add	r2,r16,r16
    65b0:	1085883a 	add	r2,r2,r2
    65b4:	288b883a 	add	r5,r5,r2
    65b8:	90800417 	ldw	r2,16(r18)
    65bc:	91000504 	addi	r4,r18,20
    65c0:	a18007cc 	andi	r6,r20,31
    65c4:	1085883a 	add	r2,r2,r2
    65c8:	1085883a 	add	r2,r2,r2
    65cc:	208f883a 	add	r7,r4,r2
    65d0:	30001e26 	beq	r6,zero,664c <__lshift+0x120>
    65d4:	00800804 	movi	r2,32
    65d8:	1191c83a 	sub	r8,r2,r6
    65dc:	0007883a 	mov	r3,zero
    65e0:	20800017 	ldw	r2,0(r4)
    65e4:	1184983a 	sll	r2,r2,r6
    65e8:	1884b03a 	or	r2,r3,r2
    65ec:	28800015 	stw	r2,0(r5)
    65f0:	20c00017 	ldw	r3,0(r4)
    65f4:	21000104 	addi	r4,r4,4
    65f8:	29400104 	addi	r5,r5,4
    65fc:	1a06d83a 	srl	r3,r3,r8
    6600:	21fff736 	bltu	r4,r7,65e0 <__lshift+0xb4>
    6604:	28c00015 	stw	r3,0(r5)
    6608:	18000126 	beq	r3,zero,6610 <__lshift+0xe4>
    660c:	8c400044 	addi	r17,r17,1
    6610:	88bfffc4 	addi	r2,r17,-1
    6614:	98800415 	stw	r2,16(r19)
    6618:	a809883a 	mov	r4,r21
    661c:	900b883a 	mov	r5,r18
    6620:	0005be80 	call	5be8 <_Bfree>
    6624:	9805883a 	mov	r2,r19
    6628:	dfc00617 	ldw	ra,24(sp)
    662c:	dd400517 	ldw	r21,20(sp)
    6630:	dd000417 	ldw	r20,16(sp)
    6634:	dcc00317 	ldw	r19,12(sp)
    6638:	dc800217 	ldw	r18,8(sp)
    663c:	dc400117 	ldw	r17,4(sp)
    6640:	dc000017 	ldw	r16,0(sp)
    6644:	dec00704 	addi	sp,sp,28
    6648:	f800283a 	ret
    664c:	20800017 	ldw	r2,0(r4)
    6650:	21000104 	addi	r4,r4,4
    6654:	28800015 	stw	r2,0(r5)
    6658:	29400104 	addi	r5,r5,4
    665c:	21ffec2e 	bgeu	r4,r7,6610 <__lshift+0xe4>
    6660:	20800017 	ldw	r2,0(r4)
    6664:	21000104 	addi	r4,r4,4
    6668:	28800015 	stw	r2,0(r5)
    666c:	29400104 	addi	r5,r5,4
    6670:	21fff636 	bltu	r4,r7,664c <__lshift+0x120>
    6674:	003fe606 	br	6610 <__lshift+0xe4>

00006678 <__multiply>:
    6678:	defff904 	addi	sp,sp,-28
    667c:	dcc00315 	stw	r19,12(sp)
    6680:	dc800215 	stw	r18,8(sp)
    6684:	2cc00417 	ldw	r19,16(r5)
    6688:	34800417 	ldw	r18,16(r6)
    668c:	dd000415 	stw	r20,16(sp)
    6690:	dc400115 	stw	r17,4(sp)
    6694:	dfc00615 	stw	ra,24(sp)
    6698:	dd400515 	stw	r21,20(sp)
    669c:	dc000015 	stw	r16,0(sp)
    66a0:	2823883a 	mov	r17,r5
    66a4:	3029883a 	mov	r20,r6
    66a8:	9c80040e 	bge	r19,r18,66bc <__multiply+0x44>
    66ac:	9027883a 	mov	r19,r18
    66b0:	2c800417 	ldw	r18,16(r5)
    66b4:	2829883a 	mov	r20,r5
    66b8:	3023883a 	mov	r17,r6
    66bc:	88800217 	ldw	r2,8(r17)
    66c0:	9ca1883a 	add	r16,r19,r18
    66c4:	89400117 	ldw	r5,4(r17)
    66c8:	1400010e 	bge	r2,r16,66d0 <__multiply+0x58>
    66cc:	29400044 	addi	r5,r5,1
    66d0:	00061680 	call	6168 <_Balloc>
    66d4:	102b883a 	mov	r21,r2
    66d8:	8405883a 	add	r2,r16,r16
    66dc:	1085883a 	add	r2,r2,r2
    66e0:	a9000504 	addi	r4,r21,20
    66e4:	209d883a 	add	r14,r4,r2
    66e8:	2380042e 	bgeu	r4,r14,66fc <__multiply+0x84>
    66ec:	2005883a 	mov	r2,r4
    66f0:	10000015 	stw	zero,0(r2)
    66f4:	10800104 	addi	r2,r2,4
    66f8:	13bffd36 	bltu	r2,r14,66f0 <__multiply+0x78>
    66fc:	9485883a 	add	r2,r18,r18
    6700:	9cc7883a 	add	r3,r19,r19
    6704:	a1800504 	addi	r6,r20,20
    6708:	1085883a 	add	r2,r2,r2
    670c:	8b400504 	addi	r13,r17,20
    6710:	18c7883a 	add	r3,r3,r3
    6714:	309f883a 	add	r15,r6,r2
    6718:	68d7883a 	add	r11,r13,r3
    671c:	33c03b2e 	bgeu	r6,r15,680c <__multiply+0x194>
    6720:	2019883a 	mov	r12,r4
    6724:	30800017 	ldw	r2,0(r6)
    6728:	127fffcc 	andi	r9,r2,65535
    672c:	48001826 	beq	r9,zero,6790 <__multiply+0x118>
    6730:	6811883a 	mov	r8,r13
    6734:	600f883a 	mov	r7,r12
    6738:	0015883a 	mov	r10,zero
    673c:	40c00017 	ldw	r3,0(r8)
    6740:	39400017 	ldw	r5,0(r7)
    6744:	42000104 	addi	r8,r8,4
    6748:	193fffcc 	andi	r4,r3,65535
    674c:	4909383a 	mul	r4,r9,r4
    6750:	1806d43a 	srli	r3,r3,16
    6754:	28bfffcc 	andi	r2,r5,65535
    6758:	5085883a 	add	r2,r10,r2
    675c:	2089883a 	add	r4,r4,r2
    6760:	48c7383a 	mul	r3,r9,r3
    6764:	280ad43a 	srli	r5,r5,16
    6768:	2004d43a 	srli	r2,r4,16
    676c:	3900000d 	sth	r4,0(r7)
    6770:	1947883a 	add	r3,r3,r5
    6774:	10c5883a 	add	r2,r2,r3
    6778:	3880008d 	sth	r2,2(r7)
    677c:	1014d43a 	srli	r10,r2,16
    6780:	39c00104 	addi	r7,r7,4
    6784:	42ffed36 	bltu	r8,r11,673c <__multiply+0xc4>
    6788:	3a800015 	stw	r10,0(r7)
    678c:	30800017 	ldw	r2,0(r6)
    6790:	1012d43a 	srli	r9,r2,16
    6794:	48001926 	beq	r9,zero,67fc <__multiply+0x184>
    6798:	60800017 	ldw	r2,0(r12)
    679c:	6811883a 	mov	r8,r13
    67a0:	600f883a 	mov	r7,r12
    67a4:	0015883a 	mov	r10,zero
    67a8:	100b883a 	mov	r5,r2
    67ac:	41000017 	ldw	r4,0(r8)
    67b0:	2806d43a 	srli	r3,r5,16
    67b4:	3880000d 	sth	r2,0(r7)
    67b8:	20bfffcc 	andi	r2,r4,65535
    67bc:	4885383a 	mul	r2,r9,r2
    67c0:	50c7883a 	add	r3,r10,r3
    67c4:	2008d43a 	srli	r4,r4,16
    67c8:	10c5883a 	add	r2,r2,r3
    67cc:	3880008d 	sth	r2,2(r7)
    67d0:	39c00104 	addi	r7,r7,4
    67d4:	39400017 	ldw	r5,0(r7)
    67d8:	4909383a 	mul	r4,r9,r4
    67dc:	1004d43a 	srli	r2,r2,16
    67e0:	28ffffcc 	andi	r3,r5,65535
    67e4:	20c9883a 	add	r4,r4,r3
    67e8:	1105883a 	add	r2,r2,r4
    67ec:	42000104 	addi	r8,r8,4
    67f0:	1014d43a 	srli	r10,r2,16
    67f4:	42ffed36 	bltu	r8,r11,67ac <__multiply+0x134>
    67f8:	38800015 	stw	r2,0(r7)
    67fc:	31800104 	addi	r6,r6,4
    6800:	33c0022e 	bgeu	r6,r15,680c <__multiply+0x194>
    6804:	63000104 	addi	r12,r12,4
    6808:	003fc606 	br	6724 <__multiply+0xac>
    680c:	0400090e 	bge	zero,r16,6834 <__multiply+0x1bc>
    6810:	70bfff17 	ldw	r2,-4(r14)
    6814:	70ffff04 	addi	r3,r14,-4
    6818:	10000326 	beq	r2,zero,6828 <__multiply+0x1b0>
    681c:	00000506 	br	6834 <__multiply+0x1bc>
    6820:	18800017 	ldw	r2,0(r3)
    6824:	1000031e 	bne	r2,zero,6834 <__multiply+0x1bc>
    6828:	843fffc4 	addi	r16,r16,-1
    682c:	18ffff04 	addi	r3,r3,-4
    6830:	803ffb1e 	bne	r16,zero,6820 <__multiply+0x1a8>
    6834:	a805883a 	mov	r2,r21
    6838:	ac000415 	stw	r16,16(r21)
    683c:	dfc00617 	ldw	ra,24(sp)
    6840:	dd400517 	ldw	r21,20(sp)
    6844:	dd000417 	ldw	r20,16(sp)
    6848:	dcc00317 	ldw	r19,12(sp)
    684c:	dc800217 	ldw	r18,8(sp)
    6850:	dc400117 	ldw	r17,4(sp)
    6854:	dc000017 	ldw	r16,0(sp)
    6858:	dec00704 	addi	sp,sp,28
    685c:	f800283a 	ret

00006860 <__i2b>:
    6860:	defffd04 	addi	sp,sp,-12
    6864:	dc000015 	stw	r16,0(sp)
    6868:	04000044 	movi	r16,1
    686c:	dc800115 	stw	r18,4(sp)
    6870:	2825883a 	mov	r18,r5
    6874:	800b883a 	mov	r5,r16
    6878:	dfc00215 	stw	ra,8(sp)
    687c:	00061680 	call	6168 <_Balloc>
    6880:	14000415 	stw	r16,16(r2)
    6884:	14800515 	stw	r18,20(r2)
    6888:	dfc00217 	ldw	ra,8(sp)
    688c:	dc800117 	ldw	r18,4(sp)
    6890:	dc000017 	ldw	r16,0(sp)
    6894:	dec00304 	addi	sp,sp,12
    6898:	f800283a 	ret

0000689c <__multadd>:
    689c:	defffa04 	addi	sp,sp,-24
    68a0:	dc800215 	stw	r18,8(sp)
    68a4:	2c800417 	ldw	r18,16(r5)
    68a8:	dd000415 	stw	r20,16(sp)
    68ac:	dcc00315 	stw	r19,12(sp)
    68b0:	dc000015 	stw	r16,0(sp)
    68b4:	dfc00515 	stw	ra,20(sp)
    68b8:	3821883a 	mov	r16,r7
    68bc:	dc400115 	stw	r17,4(sp)
    68c0:	2827883a 	mov	r19,r5
    68c4:	2029883a 	mov	r20,r4
    68c8:	2a000504 	addi	r8,r5,20
    68cc:	000f883a 	mov	r7,zero
    68d0:	40800017 	ldw	r2,0(r8)
    68d4:	39c00044 	addi	r7,r7,1
    68d8:	10ffffcc 	andi	r3,r2,65535
    68dc:	1987383a 	mul	r3,r3,r6
    68e0:	1004d43a 	srli	r2,r2,16
    68e4:	1c07883a 	add	r3,r3,r16
    68e8:	180ad43a 	srli	r5,r3,16
    68ec:	1185383a 	mul	r2,r2,r6
    68f0:	18ffffcc 	andi	r3,r3,65535
    68f4:	1145883a 	add	r2,r2,r5
    68f8:	1008943a 	slli	r4,r2,16
    68fc:	1020d43a 	srli	r16,r2,16
    6900:	20c9883a 	add	r4,r4,r3
    6904:	41000015 	stw	r4,0(r8)
    6908:	42000104 	addi	r8,r8,4
    690c:	3cbff016 	blt	r7,r18,68d0 <__multadd+0x34>
    6910:	80000826 	beq	r16,zero,6934 <__multadd+0x98>
    6914:	98800217 	ldw	r2,8(r19)
    6918:	90800f0e 	bge	r18,r2,6958 <__multadd+0xbc>
    691c:	9485883a 	add	r2,r18,r18
    6920:	1085883a 	add	r2,r2,r2
    6924:	14c5883a 	add	r2,r2,r19
    6928:	90c00044 	addi	r3,r18,1
    692c:	14000515 	stw	r16,20(r2)
    6930:	98c00415 	stw	r3,16(r19)
    6934:	9805883a 	mov	r2,r19
    6938:	dfc00517 	ldw	ra,20(sp)
    693c:	dd000417 	ldw	r20,16(sp)
    6940:	dcc00317 	ldw	r19,12(sp)
    6944:	dc800217 	ldw	r18,8(sp)
    6948:	dc400117 	ldw	r17,4(sp)
    694c:	dc000017 	ldw	r16,0(sp)
    6950:	dec00604 	addi	sp,sp,24
    6954:	f800283a 	ret
    6958:	99400117 	ldw	r5,4(r19)
    695c:	a009883a 	mov	r4,r20
    6960:	29400044 	addi	r5,r5,1
    6964:	00061680 	call	6168 <_Balloc>
    6968:	99800417 	ldw	r6,16(r19)
    696c:	99400304 	addi	r5,r19,12
    6970:	11000304 	addi	r4,r2,12
    6974:	318d883a 	add	r6,r6,r6
    6978:	318d883a 	add	r6,r6,r6
    697c:	31800204 	addi	r6,r6,8
    6980:	1023883a 	mov	r17,r2
    6984:	00059d00 	call	59d0 <memcpy>
    6988:	980b883a 	mov	r5,r19
    698c:	a009883a 	mov	r4,r20
    6990:	0005be80 	call	5be8 <_Bfree>
    6994:	8827883a 	mov	r19,r17
    6998:	003fe006 	br	691c <__multadd+0x80>

0000699c <__pow5mult>:
    699c:	defffa04 	addi	sp,sp,-24
    69a0:	308000cc 	andi	r2,r6,3
    69a4:	dd000415 	stw	r20,16(sp)
    69a8:	dcc00315 	stw	r19,12(sp)
    69ac:	dc000015 	stw	r16,0(sp)
    69b0:	dfc00515 	stw	ra,20(sp)
    69b4:	dc800215 	stw	r18,8(sp)
    69b8:	dc400115 	stw	r17,4(sp)
    69bc:	3021883a 	mov	r16,r6
    69c0:	2027883a 	mov	r19,r4
    69c4:	2829883a 	mov	r20,r5
    69c8:	10002b1e 	bne	r2,zero,6a78 <__pow5mult+0xdc>
    69cc:	8025d0ba 	srai	r18,r16,2
    69d0:	90001b26 	beq	r18,zero,6a40 <__pow5mult+0xa4>
    69d4:	9c001217 	ldw	r16,72(r19)
    69d8:	8000081e 	bne	r16,zero,69fc <__pow5mult+0x60>
    69dc:	00003006 	br	6aa0 <__pow5mult+0x104>
    69e0:	800b883a 	mov	r5,r16
    69e4:	800d883a 	mov	r6,r16
    69e8:	9809883a 	mov	r4,r19
    69ec:	90001426 	beq	r18,zero,6a40 <__pow5mult+0xa4>
    69f0:	80800017 	ldw	r2,0(r16)
    69f4:	10001b26 	beq	r2,zero,6a64 <__pow5mult+0xc8>
    69f8:	1021883a 	mov	r16,r2
    69fc:	9080004c 	andi	r2,r18,1
    6a00:	1005003a 	cmpeq	r2,r2,zero
    6a04:	9025d07a 	srai	r18,r18,1
    6a08:	800d883a 	mov	r6,r16
    6a0c:	9809883a 	mov	r4,r19
    6a10:	a00b883a 	mov	r5,r20
    6a14:	103ff21e 	bne	r2,zero,69e0 <__pow5mult+0x44>
    6a18:	00066780 	call	6678 <__multiply>
    6a1c:	a00b883a 	mov	r5,r20
    6a20:	9809883a 	mov	r4,r19
    6a24:	1023883a 	mov	r17,r2
    6a28:	0005be80 	call	5be8 <_Bfree>
    6a2c:	8829883a 	mov	r20,r17
    6a30:	800b883a 	mov	r5,r16
    6a34:	800d883a 	mov	r6,r16
    6a38:	9809883a 	mov	r4,r19
    6a3c:	903fec1e 	bne	r18,zero,69f0 <__pow5mult+0x54>
    6a40:	a005883a 	mov	r2,r20
    6a44:	dfc00517 	ldw	ra,20(sp)
    6a48:	dd000417 	ldw	r20,16(sp)
    6a4c:	dcc00317 	ldw	r19,12(sp)
    6a50:	dc800217 	ldw	r18,8(sp)
    6a54:	dc400117 	ldw	r17,4(sp)
    6a58:	dc000017 	ldw	r16,0(sp)
    6a5c:	dec00604 	addi	sp,sp,24
    6a60:	f800283a 	ret
    6a64:	00066780 	call	6678 <__multiply>
    6a68:	80800015 	stw	r2,0(r16)
    6a6c:	1021883a 	mov	r16,r2
    6a70:	10000015 	stw	zero,0(r2)
    6a74:	003fe106 	br	69fc <__pow5mult+0x60>
    6a78:	1085883a 	add	r2,r2,r2
    6a7c:	00c000f4 	movhi	r3,3
    6a80:	18c08c04 	addi	r3,r3,560
    6a84:	1085883a 	add	r2,r2,r2
    6a88:	10c5883a 	add	r2,r2,r3
    6a8c:	11bfff17 	ldw	r6,-4(r2)
    6a90:	000f883a 	mov	r7,zero
    6a94:	000689c0 	call	689c <__multadd>
    6a98:	1029883a 	mov	r20,r2
    6a9c:	003fcb06 	br	69cc <__pow5mult+0x30>
    6aa0:	9809883a 	mov	r4,r19
    6aa4:	01409c44 	movi	r5,625
    6aa8:	00068600 	call	6860 <__i2b>
    6aac:	98801215 	stw	r2,72(r19)
    6ab0:	1021883a 	mov	r16,r2
    6ab4:	10000015 	stw	zero,0(r2)
    6ab8:	003fd006 	br	69fc <__pow5mult+0x60>

00006abc <__s2b>:
    6abc:	defff904 	addi	sp,sp,-28
    6ac0:	dcc00315 	stw	r19,12(sp)
    6ac4:	dc800215 	stw	r18,8(sp)
    6ac8:	2827883a 	mov	r19,r5
    6acc:	2025883a 	mov	r18,r4
    6ad0:	01400244 	movi	r5,9
    6ad4:	39000204 	addi	r4,r7,8
    6ad8:	dd000415 	stw	r20,16(sp)
    6adc:	dc400115 	stw	r17,4(sp)
    6ae0:	dfc00615 	stw	ra,24(sp)
    6ae4:	dd400515 	stw	r21,20(sp)
    6ae8:	dc000015 	stw	r16,0(sp)
    6aec:	3829883a 	mov	r20,r7
    6af0:	3023883a 	mov	r17,r6
    6af4:	00096800 	call	9680 <__divsi3>
    6af8:	00c00044 	movi	r3,1
    6afc:	1880350e 	bge	r3,r2,6bd4 <__s2b+0x118>
    6b00:	000b883a 	mov	r5,zero
    6b04:	18c7883a 	add	r3,r3,r3
    6b08:	29400044 	addi	r5,r5,1
    6b0c:	18bffd16 	blt	r3,r2,6b04 <__s2b+0x48>
    6b10:	9009883a 	mov	r4,r18
    6b14:	00061680 	call	6168 <_Balloc>
    6b18:	1011883a 	mov	r8,r2
    6b1c:	d8800717 	ldw	r2,28(sp)
    6b20:	00c00044 	movi	r3,1
    6b24:	01800244 	movi	r6,9
    6b28:	40800515 	stw	r2,20(r8)
    6b2c:	40c00415 	stw	r3,16(r8)
    6b30:	3440260e 	bge	r6,r17,6bcc <__s2b+0x110>
    6b34:	3021883a 	mov	r16,r6
    6b38:	99ab883a 	add	r21,r19,r6
    6b3c:	9c05883a 	add	r2,r19,r16
    6b40:	11c00007 	ldb	r7,0(r2)
    6b44:	400b883a 	mov	r5,r8
    6b48:	9009883a 	mov	r4,r18
    6b4c:	39fff404 	addi	r7,r7,-48
    6b50:	01800284 	movi	r6,10
    6b54:	000689c0 	call	689c <__multadd>
    6b58:	84000044 	addi	r16,r16,1
    6b5c:	1011883a 	mov	r8,r2
    6b60:	8c3ff61e 	bne	r17,r16,6b3c <__s2b+0x80>
    6b64:	ac45883a 	add	r2,r21,r17
    6b68:	117ffe04 	addi	r5,r2,-8
    6b6c:	880d883a 	mov	r6,r17
    6b70:	35000c0e 	bge	r6,r20,6ba4 <__s2b+0xe8>
    6b74:	a185c83a 	sub	r2,r20,r6
    6b78:	2821883a 	mov	r16,r5
    6b7c:	28a3883a 	add	r17,r5,r2
    6b80:	81c00007 	ldb	r7,0(r16)
    6b84:	400b883a 	mov	r5,r8
    6b88:	9009883a 	mov	r4,r18
    6b8c:	39fff404 	addi	r7,r7,-48
    6b90:	01800284 	movi	r6,10
    6b94:	000689c0 	call	689c <__multadd>
    6b98:	84000044 	addi	r16,r16,1
    6b9c:	1011883a 	mov	r8,r2
    6ba0:	847ff71e 	bne	r16,r17,6b80 <__s2b+0xc4>
    6ba4:	4005883a 	mov	r2,r8
    6ba8:	dfc00617 	ldw	ra,24(sp)
    6bac:	dd400517 	ldw	r21,20(sp)
    6bb0:	dd000417 	ldw	r20,16(sp)
    6bb4:	dcc00317 	ldw	r19,12(sp)
    6bb8:	dc800217 	ldw	r18,8(sp)
    6bbc:	dc400117 	ldw	r17,4(sp)
    6bc0:	dc000017 	ldw	r16,0(sp)
    6bc4:	dec00704 	addi	sp,sp,28
    6bc8:	f800283a 	ret
    6bcc:	99400284 	addi	r5,r19,10
    6bd0:	003fe706 	br	6b70 <__s2b+0xb4>
    6bd4:	000b883a 	mov	r5,zero
    6bd8:	003fcd06 	br	6b10 <__s2b+0x54>

00006bdc <_realloc_r>:
    6bdc:	defff404 	addi	sp,sp,-48
    6be0:	dd800815 	stw	r22,32(sp)
    6be4:	dc800415 	stw	r18,16(sp)
    6be8:	dc400315 	stw	r17,12(sp)
    6bec:	dfc00b15 	stw	ra,44(sp)
    6bf0:	df000a15 	stw	fp,40(sp)
    6bf4:	ddc00915 	stw	r23,36(sp)
    6bf8:	dd400715 	stw	r21,28(sp)
    6bfc:	dd000615 	stw	r20,24(sp)
    6c00:	dcc00515 	stw	r19,20(sp)
    6c04:	dc000215 	stw	r16,8(sp)
    6c08:	2825883a 	mov	r18,r5
    6c0c:	3023883a 	mov	r17,r6
    6c10:	202d883a 	mov	r22,r4
    6c14:	2800c926 	beq	r5,zero,6f3c <_realloc_r+0x360>
    6c18:	000a4000 	call	a400 <__malloc_lock>
    6c1c:	943ffe04 	addi	r16,r18,-8
    6c20:	88c002c4 	addi	r3,r17,11
    6c24:	00800584 	movi	r2,22
    6c28:	82000117 	ldw	r8,4(r16)
    6c2c:	10c01b2e 	bgeu	r2,r3,6c9c <_realloc_r+0xc0>
    6c30:	00bffe04 	movi	r2,-8
    6c34:	188e703a 	and	r7,r3,r2
    6c38:	3839883a 	mov	fp,r7
    6c3c:	38001a16 	blt	r7,zero,6ca8 <_realloc_r+0xcc>
    6c40:	e4401936 	bltu	fp,r17,6ca8 <_realloc_r+0xcc>
    6c44:	013fff04 	movi	r4,-4
    6c48:	4126703a 	and	r19,r8,r4
    6c4c:	99c02616 	blt	r19,r7,6ce8 <_realloc_r+0x10c>
    6c50:	802b883a 	mov	r21,r16
    6c54:	9829883a 	mov	r20,r19
    6c58:	84000204 	addi	r16,r16,8
    6c5c:	a80f883a 	mov	r7,r21
    6c60:	a70dc83a 	sub	r6,r20,fp
    6c64:	008003c4 	movi	r2,15
    6c68:	1180c136 	bltu	r2,r6,6f70 <_realloc_r+0x394>
    6c6c:	38800117 	ldw	r2,4(r7)
    6c70:	a549883a 	add	r4,r20,r21
    6c74:	1080004c 	andi	r2,r2,1
    6c78:	a084b03a 	or	r2,r20,r2
    6c7c:	38800115 	stw	r2,4(r7)
    6c80:	20c00117 	ldw	r3,4(r4)
    6c84:	18c00054 	ori	r3,r3,1
    6c88:	20c00115 	stw	r3,4(r4)
    6c8c:	b009883a 	mov	r4,r22
    6c90:	000a4200 	call	a420 <__malloc_unlock>
    6c94:	8023883a 	mov	r17,r16
    6c98:	00000606 	br	6cb4 <_realloc_r+0xd8>
    6c9c:	01c00404 	movi	r7,16
    6ca0:	3839883a 	mov	fp,r7
    6ca4:	e47fe72e 	bgeu	fp,r17,6c44 <_realloc_r+0x68>
    6ca8:	00800304 	movi	r2,12
    6cac:	0023883a 	mov	r17,zero
    6cb0:	b0800015 	stw	r2,0(r22)
    6cb4:	8805883a 	mov	r2,r17
    6cb8:	dfc00b17 	ldw	ra,44(sp)
    6cbc:	df000a17 	ldw	fp,40(sp)
    6cc0:	ddc00917 	ldw	r23,36(sp)
    6cc4:	dd800817 	ldw	r22,32(sp)
    6cc8:	dd400717 	ldw	r21,28(sp)
    6ccc:	dd000617 	ldw	r20,24(sp)
    6cd0:	dcc00517 	ldw	r19,20(sp)
    6cd4:	dc800417 	ldw	r18,16(sp)
    6cd8:	dc400317 	ldw	r17,12(sp)
    6cdc:	dc000217 	ldw	r16,8(sp)
    6ce0:	dec00c04 	addi	sp,sp,48
    6ce4:	f800283a 	ret
    6ce8:	008000f4 	movhi	r2,3
    6cec:	1081e404 	addi	r2,r2,1936
    6cf0:	12400217 	ldw	r9,8(r2)
    6cf4:	84cd883a 	add	r6,r16,r19
    6cf8:	802b883a 	mov	r21,r16
    6cfc:	3240b926 	beq	r6,r9,6fe4 <_realloc_r+0x408>
    6d00:	31400117 	ldw	r5,4(r6)
    6d04:	00bfff84 	movi	r2,-2
    6d08:	2884703a 	and	r2,r5,r2
    6d0c:	1185883a 	add	r2,r2,r6
    6d10:	10c00117 	ldw	r3,4(r2)
    6d14:	18c0004c 	andi	r3,r3,1
    6d18:	1807003a 	cmpeq	r3,r3,zero
    6d1c:	1800a326 	beq	r3,zero,6fac <_realloc_r+0x3d0>
    6d20:	2908703a 	and	r4,r5,r4
    6d24:	9929883a 	add	r20,r19,r4
    6d28:	a1c0a30e 	bge	r20,r7,6fb8 <_realloc_r+0x3dc>
    6d2c:	4080004c 	andi	r2,r8,1
    6d30:	1000551e 	bne	r2,zero,6e88 <_realloc_r+0x2ac>
    6d34:	80800017 	ldw	r2,0(r16)
    6d38:	80afc83a 	sub	r23,r16,r2
    6d3c:	b8c00117 	ldw	r3,4(r23)
    6d40:	00bfff04 	movi	r2,-4
    6d44:	1884703a 	and	r2,r3,r2
    6d48:	30002e26 	beq	r6,zero,6e04 <_realloc_r+0x228>
    6d4c:	3240b926 	beq	r6,r9,7034 <_realloc_r+0x458>
    6d50:	98a9883a 	add	r20,r19,r2
    6d54:	2509883a 	add	r4,r4,r20
    6d58:	d9000015 	stw	r4,0(sp)
    6d5c:	21c02a16 	blt	r4,r7,6e08 <_realloc_r+0x22c>
    6d60:	30800317 	ldw	r2,12(r6)
    6d64:	30c00217 	ldw	r3,8(r6)
    6d68:	01400904 	movi	r5,36
    6d6c:	99bfff04 	addi	r6,r19,-4
    6d70:	18800315 	stw	r2,12(r3)
    6d74:	10c00215 	stw	r3,8(r2)
    6d78:	b9000317 	ldw	r4,12(r23)
    6d7c:	b8800217 	ldw	r2,8(r23)
    6d80:	b82b883a 	mov	r21,r23
    6d84:	bc000204 	addi	r16,r23,8
    6d88:	20800215 	stw	r2,8(r4)
    6d8c:	11000315 	stw	r4,12(r2)
    6d90:	2980e436 	bltu	r5,r6,7124 <_realloc_r+0x548>
    6d94:	008004c4 	movi	r2,19
    6d98:	9009883a 	mov	r4,r18
    6d9c:	8011883a 	mov	r8,r16
    6da0:	11800f2e 	bgeu	r2,r6,6de0 <_realloc_r+0x204>
    6da4:	90800017 	ldw	r2,0(r18)
    6da8:	ba000404 	addi	r8,r23,16
    6dac:	91000204 	addi	r4,r18,8
    6db0:	b8800215 	stw	r2,8(r23)
    6db4:	90c00117 	ldw	r3,4(r18)
    6db8:	008006c4 	movi	r2,27
    6dbc:	b8c00315 	stw	r3,12(r23)
    6dc0:	1180072e 	bgeu	r2,r6,6de0 <_realloc_r+0x204>
    6dc4:	90c00217 	ldw	r3,8(r18)
    6dc8:	ba000604 	addi	r8,r23,24
    6dcc:	91000404 	addi	r4,r18,16
    6dd0:	b8c00415 	stw	r3,16(r23)
    6dd4:	90800317 	ldw	r2,12(r18)
    6dd8:	b8800515 	stw	r2,20(r23)
    6ddc:	3140e726 	beq	r6,r5,717c <_realloc_r+0x5a0>
    6de0:	20800017 	ldw	r2,0(r4)
    6de4:	dd000017 	ldw	r20,0(sp)
    6de8:	b80f883a 	mov	r7,r23
    6dec:	40800015 	stw	r2,0(r8)
    6df0:	20c00117 	ldw	r3,4(r4)
    6df4:	40c00115 	stw	r3,4(r8)
    6df8:	20800217 	ldw	r2,8(r4)
    6dfc:	40800215 	stw	r2,8(r8)
    6e00:	003f9706 	br	6c60 <_realloc_r+0x84>
    6e04:	98a9883a 	add	r20,r19,r2
    6e08:	a1c01f16 	blt	r20,r7,6e88 <_realloc_r+0x2ac>
    6e0c:	b8c00317 	ldw	r3,12(r23)
    6e10:	b8800217 	ldw	r2,8(r23)
    6e14:	99bfff04 	addi	r6,r19,-4
    6e18:	01400904 	movi	r5,36
    6e1c:	b82b883a 	mov	r21,r23
    6e20:	18800215 	stw	r2,8(r3)
    6e24:	10c00315 	stw	r3,12(r2)
    6e28:	bc000204 	addi	r16,r23,8
    6e2c:	2980c336 	bltu	r5,r6,713c <_realloc_r+0x560>
    6e30:	008004c4 	movi	r2,19
    6e34:	9009883a 	mov	r4,r18
    6e38:	8011883a 	mov	r8,r16
    6e3c:	11800f2e 	bgeu	r2,r6,6e7c <_realloc_r+0x2a0>
    6e40:	90800017 	ldw	r2,0(r18)
    6e44:	ba000404 	addi	r8,r23,16
    6e48:	91000204 	addi	r4,r18,8
    6e4c:	b8800215 	stw	r2,8(r23)
    6e50:	90c00117 	ldw	r3,4(r18)
    6e54:	008006c4 	movi	r2,27
    6e58:	b8c00315 	stw	r3,12(r23)
    6e5c:	1180072e 	bgeu	r2,r6,6e7c <_realloc_r+0x2a0>
    6e60:	90c00217 	ldw	r3,8(r18)
    6e64:	ba000604 	addi	r8,r23,24
    6e68:	91000404 	addi	r4,r18,16
    6e6c:	b8c00415 	stw	r3,16(r23)
    6e70:	90800317 	ldw	r2,12(r18)
    6e74:	b8800515 	stw	r2,20(r23)
    6e78:	3140c726 	beq	r6,r5,7198 <_realloc_r+0x5bc>
    6e7c:	20800017 	ldw	r2,0(r4)
    6e80:	b80f883a 	mov	r7,r23
    6e84:	003fd906 	br	6dec <_realloc_r+0x210>
    6e88:	880b883a 	mov	r5,r17
    6e8c:	b009883a 	mov	r4,r22
    6e90:	00051ac0 	call	51ac <_malloc_r>
    6e94:	1023883a 	mov	r17,r2
    6e98:	10002526 	beq	r2,zero,6f30 <_realloc_r+0x354>
    6e9c:	80800117 	ldw	r2,4(r16)
    6ea0:	00ffff84 	movi	r3,-2
    6ea4:	893ffe04 	addi	r4,r17,-8
    6ea8:	10c4703a 	and	r2,r2,r3
    6eac:	8085883a 	add	r2,r16,r2
    6eb0:	20809526 	beq	r4,r2,7108 <_realloc_r+0x52c>
    6eb4:	99bfff04 	addi	r6,r19,-4
    6eb8:	01c00904 	movi	r7,36
    6ebc:	39804536 	bltu	r7,r6,6fd4 <_realloc_r+0x3f8>
    6ec0:	008004c4 	movi	r2,19
    6ec4:	9009883a 	mov	r4,r18
    6ec8:	880b883a 	mov	r5,r17
    6ecc:	11800f2e 	bgeu	r2,r6,6f0c <_realloc_r+0x330>
    6ed0:	90800017 	ldw	r2,0(r18)
    6ed4:	89400204 	addi	r5,r17,8
    6ed8:	91000204 	addi	r4,r18,8
    6edc:	88800015 	stw	r2,0(r17)
    6ee0:	90c00117 	ldw	r3,4(r18)
    6ee4:	008006c4 	movi	r2,27
    6ee8:	88c00115 	stw	r3,4(r17)
    6eec:	1180072e 	bgeu	r2,r6,6f0c <_realloc_r+0x330>
    6ef0:	90c00217 	ldw	r3,8(r18)
    6ef4:	89400404 	addi	r5,r17,16
    6ef8:	91000404 	addi	r4,r18,16
    6efc:	88c00215 	stw	r3,8(r17)
    6f00:	90800317 	ldw	r2,12(r18)
    6f04:	88800315 	stw	r2,12(r17)
    6f08:	31c09126 	beq	r6,r7,7150 <_realloc_r+0x574>
    6f0c:	20800017 	ldw	r2,0(r4)
    6f10:	28800015 	stw	r2,0(r5)
    6f14:	20c00117 	ldw	r3,4(r4)
    6f18:	28c00115 	stw	r3,4(r5)
    6f1c:	20800217 	ldw	r2,8(r4)
    6f20:	28800215 	stw	r2,8(r5)
    6f24:	900b883a 	mov	r5,r18
    6f28:	b009883a 	mov	r4,r22
    6f2c:	00046240 	call	4624 <_free_r>
    6f30:	b009883a 	mov	r4,r22
    6f34:	000a4200 	call	a420 <__malloc_unlock>
    6f38:	003f5e06 	br	6cb4 <_realloc_r+0xd8>
    6f3c:	300b883a 	mov	r5,r6
    6f40:	dfc00b17 	ldw	ra,44(sp)
    6f44:	df000a17 	ldw	fp,40(sp)
    6f48:	ddc00917 	ldw	r23,36(sp)
    6f4c:	dd800817 	ldw	r22,32(sp)
    6f50:	dd400717 	ldw	r21,28(sp)
    6f54:	dd000617 	ldw	r20,24(sp)
    6f58:	dcc00517 	ldw	r19,20(sp)
    6f5c:	dc800417 	ldw	r18,16(sp)
    6f60:	dc400317 	ldw	r17,12(sp)
    6f64:	dc000217 	ldw	r16,8(sp)
    6f68:	dec00c04 	addi	sp,sp,48
    6f6c:	00051ac1 	jmpi	51ac <_malloc_r>
    6f70:	38800117 	ldw	r2,4(r7)
    6f74:	e54b883a 	add	r5,fp,r21
    6f78:	31000054 	ori	r4,r6,1
    6f7c:	1080004c 	andi	r2,r2,1
    6f80:	1704b03a 	or	r2,r2,fp
    6f84:	38800115 	stw	r2,4(r7)
    6f88:	29000115 	stw	r4,4(r5)
    6f8c:	2987883a 	add	r3,r5,r6
    6f90:	18800117 	ldw	r2,4(r3)
    6f94:	29400204 	addi	r5,r5,8
    6f98:	b009883a 	mov	r4,r22
    6f9c:	10800054 	ori	r2,r2,1
    6fa0:	18800115 	stw	r2,4(r3)
    6fa4:	00046240 	call	4624 <_free_r>
    6fa8:	003f3806 	br	6c8c <_realloc_r+0xb0>
    6fac:	000d883a 	mov	r6,zero
    6fb0:	0009883a 	mov	r4,zero
    6fb4:	003f5d06 	br	6d2c <_realloc_r+0x150>
    6fb8:	30c00217 	ldw	r3,8(r6)
    6fbc:	30800317 	ldw	r2,12(r6)
    6fc0:	800f883a 	mov	r7,r16
    6fc4:	84000204 	addi	r16,r16,8
    6fc8:	10c00215 	stw	r3,8(r2)
    6fcc:	18800315 	stw	r2,12(r3)
    6fd0:	003f2306 	br	6c60 <_realloc_r+0x84>
    6fd4:	8809883a 	mov	r4,r17
    6fd8:	900b883a 	mov	r5,r18
    6fdc:	0005a700 	call	5a70 <memmove>
    6fe0:	003fd006 	br	6f24 <_realloc_r+0x348>
    6fe4:	30800117 	ldw	r2,4(r6)
    6fe8:	e0c00404 	addi	r3,fp,16
    6fec:	1108703a 	and	r4,r2,r4
    6ff0:	9905883a 	add	r2,r19,r4
    6ff4:	10ff4d16 	blt	r2,r3,6d2c <_realloc_r+0x150>
    6ff8:	1705c83a 	sub	r2,r2,fp
    6ffc:	870b883a 	add	r5,r16,fp
    7000:	10800054 	ori	r2,r2,1
    7004:	28800115 	stw	r2,4(r5)
    7008:	80c00117 	ldw	r3,4(r16)
    700c:	008000f4 	movhi	r2,3
    7010:	1081e404 	addi	r2,r2,1936
    7014:	b009883a 	mov	r4,r22
    7018:	18c0004c 	andi	r3,r3,1
    701c:	e0c6b03a 	or	r3,fp,r3
    7020:	11400215 	stw	r5,8(r2)
    7024:	80c00115 	stw	r3,4(r16)
    7028:	000a4200 	call	a420 <__malloc_unlock>
    702c:	84400204 	addi	r17,r16,8
    7030:	003f2006 	br	6cb4 <_realloc_r+0xd8>
    7034:	98a9883a 	add	r20,r19,r2
    7038:	2509883a 	add	r4,r4,r20
    703c:	e0800404 	addi	r2,fp,16
    7040:	d9000115 	stw	r4,4(sp)
    7044:	20bf7016 	blt	r4,r2,6e08 <_realloc_r+0x22c>
    7048:	b8c00317 	ldw	r3,12(r23)
    704c:	b8800217 	ldw	r2,8(r23)
    7050:	99bfff04 	addi	r6,r19,-4
    7054:	01400904 	movi	r5,36
    7058:	18800215 	stw	r2,8(r3)
    705c:	10c00315 	stw	r3,12(r2)
    7060:	bc400204 	addi	r17,r23,8
    7064:	29804136 	bltu	r5,r6,716c <_realloc_r+0x590>
    7068:	008004c4 	movi	r2,19
    706c:	9009883a 	mov	r4,r18
    7070:	880f883a 	mov	r7,r17
    7074:	11800f2e 	bgeu	r2,r6,70b4 <_realloc_r+0x4d8>
    7078:	90800017 	ldw	r2,0(r18)
    707c:	b9c00404 	addi	r7,r23,16
    7080:	91000204 	addi	r4,r18,8
    7084:	b8800215 	stw	r2,8(r23)
    7088:	90c00117 	ldw	r3,4(r18)
    708c:	008006c4 	movi	r2,27
    7090:	b8c00315 	stw	r3,12(r23)
    7094:	1180072e 	bgeu	r2,r6,70b4 <_realloc_r+0x4d8>
    7098:	90c00217 	ldw	r3,8(r18)
    709c:	b9c00604 	addi	r7,r23,24
    70a0:	91000404 	addi	r4,r18,16
    70a4:	b8c00415 	stw	r3,16(r23)
    70a8:	90800317 	ldw	r2,12(r18)
    70ac:	b8800515 	stw	r2,20(r23)
    70b0:	31404026 	beq	r6,r5,71b4 <_realloc_r+0x5d8>
    70b4:	20800017 	ldw	r2,0(r4)
    70b8:	38800015 	stw	r2,0(r7)
    70bc:	20c00117 	ldw	r3,4(r4)
    70c0:	38c00115 	stw	r3,4(r7)
    70c4:	20800217 	ldw	r2,8(r4)
    70c8:	38800215 	stw	r2,8(r7)
    70cc:	d8c00117 	ldw	r3,4(sp)
    70d0:	bf0b883a 	add	r5,r23,fp
    70d4:	b009883a 	mov	r4,r22
    70d8:	1f05c83a 	sub	r2,r3,fp
    70dc:	10800054 	ori	r2,r2,1
    70e0:	28800115 	stw	r2,4(r5)
    70e4:	b8c00117 	ldw	r3,4(r23)
    70e8:	008000f4 	movhi	r2,3
    70ec:	1081e404 	addi	r2,r2,1936
    70f0:	11400215 	stw	r5,8(r2)
    70f4:	18c0004c 	andi	r3,r3,1
    70f8:	e0c6b03a 	or	r3,fp,r3
    70fc:	b8c00115 	stw	r3,4(r23)
    7100:	000a4200 	call	a420 <__malloc_unlock>
    7104:	003eeb06 	br	6cb4 <_realloc_r+0xd8>
    7108:	20800117 	ldw	r2,4(r4)
    710c:	00ffff04 	movi	r3,-4
    7110:	800f883a 	mov	r7,r16
    7114:	10c4703a 	and	r2,r2,r3
    7118:	98a9883a 	add	r20,r19,r2
    711c:	84000204 	addi	r16,r16,8
    7120:	003ecf06 	br	6c60 <_realloc_r+0x84>
    7124:	900b883a 	mov	r5,r18
    7128:	8009883a 	mov	r4,r16
    712c:	0005a700 	call	5a70 <memmove>
    7130:	dd000017 	ldw	r20,0(sp)
    7134:	b80f883a 	mov	r7,r23
    7138:	003ec906 	br	6c60 <_realloc_r+0x84>
    713c:	900b883a 	mov	r5,r18
    7140:	8009883a 	mov	r4,r16
    7144:	0005a700 	call	5a70 <memmove>
    7148:	b80f883a 	mov	r7,r23
    714c:	003ec406 	br	6c60 <_realloc_r+0x84>
    7150:	90c00417 	ldw	r3,16(r18)
    7154:	89400604 	addi	r5,r17,24
    7158:	91000604 	addi	r4,r18,24
    715c:	88c00415 	stw	r3,16(r17)
    7160:	90800517 	ldw	r2,20(r18)
    7164:	88800515 	stw	r2,20(r17)
    7168:	003f6806 	br	6f0c <_realloc_r+0x330>
    716c:	900b883a 	mov	r5,r18
    7170:	8809883a 	mov	r4,r17
    7174:	0005a700 	call	5a70 <memmove>
    7178:	003fd406 	br	70cc <_realloc_r+0x4f0>
    717c:	90c00417 	ldw	r3,16(r18)
    7180:	91000604 	addi	r4,r18,24
    7184:	ba000804 	addi	r8,r23,32
    7188:	b8c00615 	stw	r3,24(r23)
    718c:	90800517 	ldw	r2,20(r18)
    7190:	b8800715 	stw	r2,28(r23)
    7194:	003f1206 	br	6de0 <_realloc_r+0x204>
    7198:	90c00417 	ldw	r3,16(r18)
    719c:	91000604 	addi	r4,r18,24
    71a0:	ba000804 	addi	r8,r23,32
    71a4:	b8c00615 	stw	r3,24(r23)
    71a8:	90800517 	ldw	r2,20(r18)
    71ac:	b8800715 	stw	r2,28(r23)
    71b0:	003f3206 	br	6e7c <_realloc_r+0x2a0>
    71b4:	90c00417 	ldw	r3,16(r18)
    71b8:	91000604 	addi	r4,r18,24
    71bc:	b9c00804 	addi	r7,r23,32
    71c0:	b8c00615 	stw	r3,24(r23)
    71c4:	90800517 	ldw	r2,20(r18)
    71c8:	b8800715 	stw	r2,28(r23)
    71cc:	003fb906 	br	70b4 <_realloc_r+0x4d8>

000071d0 <__isinfd>:
    71d0:	200d883a 	mov	r6,r4
    71d4:	0109c83a 	sub	r4,zero,r4
    71d8:	2188b03a 	or	r4,r4,r6
    71dc:	2008d7fa 	srli	r4,r4,31
    71e0:	00a00034 	movhi	r2,32768
    71e4:	10bfffc4 	addi	r2,r2,-1
    71e8:	1144703a 	and	r2,r2,r5
    71ec:	2088b03a 	or	r4,r4,r2
    71f0:	009ffc34 	movhi	r2,32752
    71f4:	1105c83a 	sub	r2,r2,r4
    71f8:	0087c83a 	sub	r3,zero,r2
    71fc:	10c4b03a 	or	r2,r2,r3
    7200:	1004d7fa 	srli	r2,r2,31
    7204:	00c00044 	movi	r3,1
    7208:	1885c83a 	sub	r2,r3,r2
    720c:	f800283a 	ret

00007210 <__isnand>:
    7210:	200d883a 	mov	r6,r4
    7214:	0109c83a 	sub	r4,zero,r4
    7218:	2188b03a 	or	r4,r4,r6
    721c:	2008d7fa 	srli	r4,r4,31
    7220:	00a00034 	movhi	r2,32768
    7224:	10bfffc4 	addi	r2,r2,-1
    7228:	1144703a 	and	r2,r2,r5
    722c:	2088b03a 	or	r4,r4,r2
    7230:	009ffc34 	movhi	r2,32752
    7234:	1105c83a 	sub	r2,r2,r4
    7238:	1004d7fa 	srli	r2,r2,31
    723c:	f800283a 	ret

00007240 <_sbrk_r>:
    7240:	defffd04 	addi	sp,sp,-12
    7244:	dc000015 	stw	r16,0(sp)
    7248:	040000f4 	movhi	r16,3
    724c:	84078304 	addi	r16,r16,7692
    7250:	dc400115 	stw	r17,4(sp)
    7254:	80000015 	stw	zero,0(r16)
    7258:	2023883a 	mov	r17,r4
    725c:	2809883a 	mov	r4,r5
    7260:	dfc00215 	stw	ra,8(sp)
    7264:	000a6200 	call	a620 <sbrk>
    7268:	1007883a 	mov	r3,r2
    726c:	00bfffc4 	movi	r2,-1
    7270:	18800626 	beq	r3,r2,728c <_sbrk_r+0x4c>
    7274:	1805883a 	mov	r2,r3
    7278:	dfc00217 	ldw	ra,8(sp)
    727c:	dc400117 	ldw	r17,4(sp)
    7280:	dc000017 	ldw	r16,0(sp)
    7284:	dec00304 	addi	sp,sp,12
    7288:	f800283a 	ret
    728c:	80800017 	ldw	r2,0(r16)
    7290:	103ff826 	beq	r2,zero,7274 <_sbrk_r+0x34>
    7294:	88800015 	stw	r2,0(r17)
    7298:	1805883a 	mov	r2,r3
    729c:	dfc00217 	ldw	ra,8(sp)
    72a0:	dc400117 	ldw	r17,4(sp)
    72a4:	dc000017 	ldw	r16,0(sp)
    72a8:	dec00304 	addi	sp,sp,12
    72ac:	f800283a 	ret

000072b0 <__sclose>:
    72b0:	2940038f 	ldh	r5,14(r5)
    72b4:	00075e41 	jmpi	75e4 <_close_r>

000072b8 <__sseek>:
    72b8:	defffe04 	addi	sp,sp,-8
    72bc:	dc000015 	stw	r16,0(sp)
    72c0:	2821883a 	mov	r16,r5
    72c4:	2940038f 	ldh	r5,14(r5)
    72c8:	dfc00115 	stw	ra,4(sp)
    72cc:	000785c0 	call	785c <_lseek_r>
    72d0:	1007883a 	mov	r3,r2
    72d4:	00bfffc4 	movi	r2,-1
    72d8:	18800926 	beq	r3,r2,7300 <__sseek+0x48>
    72dc:	8080030b 	ldhu	r2,12(r16)
    72e0:	80c01415 	stw	r3,80(r16)
    72e4:	10840014 	ori	r2,r2,4096
    72e8:	8080030d 	sth	r2,12(r16)
    72ec:	1805883a 	mov	r2,r3
    72f0:	dfc00117 	ldw	ra,4(sp)
    72f4:	dc000017 	ldw	r16,0(sp)
    72f8:	dec00204 	addi	sp,sp,8
    72fc:	f800283a 	ret
    7300:	8080030b 	ldhu	r2,12(r16)
    7304:	10bbffcc 	andi	r2,r2,61439
    7308:	8080030d 	sth	r2,12(r16)
    730c:	1805883a 	mov	r2,r3
    7310:	dfc00117 	ldw	ra,4(sp)
    7314:	dc000017 	ldw	r16,0(sp)
    7318:	dec00204 	addi	sp,sp,8
    731c:	f800283a 	ret

00007320 <__swrite>:
    7320:	2880030b 	ldhu	r2,12(r5)
    7324:	defffb04 	addi	sp,sp,-20
    7328:	dcc00315 	stw	r19,12(sp)
    732c:	1080400c 	andi	r2,r2,256
    7330:	dc800215 	stw	r18,8(sp)
    7334:	dc400115 	stw	r17,4(sp)
    7338:	dc000015 	stw	r16,0(sp)
    733c:	3027883a 	mov	r19,r6
    7340:	3825883a 	mov	r18,r7
    7344:	dfc00415 	stw	ra,16(sp)
    7348:	2821883a 	mov	r16,r5
    734c:	000d883a 	mov	r6,zero
    7350:	01c00084 	movi	r7,2
    7354:	2023883a 	mov	r17,r4
    7358:	10000226 	beq	r2,zero,7364 <__swrite+0x44>
    735c:	2940038f 	ldh	r5,14(r5)
    7360:	000785c0 	call	785c <_lseek_r>
    7364:	8080030b 	ldhu	r2,12(r16)
    7368:	8140038f 	ldh	r5,14(r16)
    736c:	8809883a 	mov	r4,r17
    7370:	10bbffcc 	andi	r2,r2,61439
    7374:	980d883a 	mov	r6,r19
    7378:	900f883a 	mov	r7,r18
    737c:	8080030d 	sth	r2,12(r16)
    7380:	dfc00417 	ldw	ra,16(sp)
    7384:	dcc00317 	ldw	r19,12(sp)
    7388:	dc800217 	ldw	r18,8(sp)
    738c:	dc400117 	ldw	r17,4(sp)
    7390:	dc000017 	ldw	r16,0(sp)
    7394:	dec00504 	addi	sp,sp,20
    7398:	00074b81 	jmpi	74b8 <_write_r>

0000739c <__sread>:
    739c:	defffe04 	addi	sp,sp,-8
    73a0:	dc000015 	stw	r16,0(sp)
    73a4:	2821883a 	mov	r16,r5
    73a8:	2940038f 	ldh	r5,14(r5)
    73ac:	dfc00115 	stw	ra,4(sp)
    73b0:	00078d40 	call	78d4 <_read_r>
    73b4:	1007883a 	mov	r3,r2
    73b8:	10000816 	blt	r2,zero,73dc <__sread+0x40>
    73bc:	80801417 	ldw	r2,80(r16)
    73c0:	10c5883a 	add	r2,r2,r3
    73c4:	80801415 	stw	r2,80(r16)
    73c8:	1805883a 	mov	r2,r3
    73cc:	dfc00117 	ldw	ra,4(sp)
    73d0:	dc000017 	ldw	r16,0(sp)
    73d4:	dec00204 	addi	sp,sp,8
    73d8:	f800283a 	ret
    73dc:	8080030b 	ldhu	r2,12(r16)
    73e0:	10bbffcc 	andi	r2,r2,61439
    73e4:	8080030d 	sth	r2,12(r16)
    73e8:	1805883a 	mov	r2,r3
    73ec:	dfc00117 	ldw	ra,4(sp)
    73f0:	dc000017 	ldw	r16,0(sp)
    73f4:	dec00204 	addi	sp,sp,8
    73f8:	f800283a 	ret

000073fc <strcmp>:
    73fc:	2144b03a 	or	r2,r4,r5
    7400:	108000cc 	andi	r2,r2,3
    7404:	10001d1e 	bne	r2,zero,747c <strcmp+0x80>
    7408:	200f883a 	mov	r7,r4
    740c:	28800017 	ldw	r2,0(r5)
    7410:	21000017 	ldw	r4,0(r4)
    7414:	280d883a 	mov	r6,r5
    7418:	2080161e 	bne	r4,r2,7474 <strcmp+0x78>
    741c:	023fbff4 	movhi	r8,65279
    7420:	423fbfc4 	addi	r8,r8,-257
    7424:	2207883a 	add	r3,r4,r8
    7428:	01602074 	movhi	r5,32897
    742c:	29602004 	addi	r5,r5,-32640
    7430:	1946703a 	and	r3,r3,r5
    7434:	0104303a 	nor	r2,zero,r4
    7438:	10c4703a 	and	r2,r2,r3
    743c:	10001c1e 	bne	r2,zero,74b0 <strcmp+0xb4>
    7440:	4013883a 	mov	r9,r8
    7444:	2811883a 	mov	r8,r5
    7448:	00000106 	br	7450 <strcmp+0x54>
    744c:	1800181e 	bne	r3,zero,74b0 <strcmp+0xb4>
    7450:	39c00104 	addi	r7,r7,4
    7454:	39000017 	ldw	r4,0(r7)
    7458:	31800104 	addi	r6,r6,4
    745c:	31400017 	ldw	r5,0(r6)
    7460:	2245883a 	add	r2,r4,r9
    7464:	1204703a 	and	r2,r2,r8
    7468:	0106303a 	nor	r3,zero,r4
    746c:	1886703a 	and	r3,r3,r2
    7470:	217ff626 	beq	r4,r5,744c <strcmp+0x50>
    7474:	3809883a 	mov	r4,r7
    7478:	300b883a 	mov	r5,r6
    747c:	20c00007 	ldb	r3,0(r4)
    7480:	1800051e 	bne	r3,zero,7498 <strcmp+0x9c>
    7484:	00000606 	br	74a0 <strcmp+0xa4>
    7488:	21000044 	addi	r4,r4,1
    748c:	20c00007 	ldb	r3,0(r4)
    7490:	29400044 	addi	r5,r5,1
    7494:	18000226 	beq	r3,zero,74a0 <strcmp+0xa4>
    7498:	28800007 	ldb	r2,0(r5)
    749c:	18bffa26 	beq	r3,r2,7488 <strcmp+0x8c>
    74a0:	20c00003 	ldbu	r3,0(r4)
    74a4:	28800003 	ldbu	r2,0(r5)
    74a8:	1885c83a 	sub	r2,r3,r2
    74ac:	f800283a 	ret
    74b0:	0005883a 	mov	r2,zero
    74b4:	f800283a 	ret

000074b8 <_write_r>:
    74b8:	defffd04 	addi	sp,sp,-12
    74bc:	dc000015 	stw	r16,0(sp)
    74c0:	040000f4 	movhi	r16,3
    74c4:	84078304 	addi	r16,r16,7692
    74c8:	dc400115 	stw	r17,4(sp)
    74cc:	80000015 	stw	zero,0(r16)
    74d0:	2023883a 	mov	r17,r4
    74d4:	2809883a 	mov	r4,r5
    74d8:	300b883a 	mov	r5,r6
    74dc:	380d883a 	mov	r6,r7
    74e0:	dfc00215 	stw	ra,8(sp)
    74e4:	000a6dc0 	call	a6dc <write>
    74e8:	1007883a 	mov	r3,r2
    74ec:	00bfffc4 	movi	r2,-1
    74f0:	18800626 	beq	r3,r2,750c <_write_r+0x54>
    74f4:	1805883a 	mov	r2,r3
    74f8:	dfc00217 	ldw	ra,8(sp)
    74fc:	dc400117 	ldw	r17,4(sp)
    7500:	dc000017 	ldw	r16,0(sp)
    7504:	dec00304 	addi	sp,sp,12
    7508:	f800283a 	ret
    750c:	80800017 	ldw	r2,0(r16)
    7510:	103ff826 	beq	r2,zero,74f4 <_write_r+0x3c>
    7514:	88800015 	stw	r2,0(r17)
    7518:	1805883a 	mov	r2,r3
    751c:	dfc00217 	ldw	ra,8(sp)
    7520:	dc400117 	ldw	r17,4(sp)
    7524:	dc000017 	ldw	r16,0(sp)
    7528:	dec00304 	addi	sp,sp,12
    752c:	f800283a 	ret

00007530 <_calloc_r>:
    7530:	298b383a 	mul	r5,r5,r6
    7534:	defffe04 	addi	sp,sp,-8
    7538:	dc000015 	stw	r16,0(sp)
    753c:	dfc00115 	stw	ra,4(sp)
    7540:	00051ac0 	call	51ac <_malloc_r>
    7544:	1021883a 	mov	r16,r2
    7548:	01c00904 	movi	r7,36
    754c:	10000d26 	beq	r2,zero,7584 <_calloc_r+0x54>
    7550:	10ffff17 	ldw	r3,-4(r2)
    7554:	1009883a 	mov	r4,r2
    7558:	00bfff04 	movi	r2,-4
    755c:	1886703a 	and	r3,r3,r2
    7560:	1887883a 	add	r3,r3,r2
    7564:	180d883a 	mov	r6,r3
    7568:	000b883a 	mov	r5,zero
    756c:	38c01736 	bltu	r7,r3,75cc <_calloc_r+0x9c>
    7570:	008004c4 	movi	r2,19
    7574:	10c00836 	bltu	r2,r3,7598 <_calloc_r+0x68>
    7578:	20000215 	stw	zero,8(r4)
    757c:	20000015 	stw	zero,0(r4)
    7580:	20000115 	stw	zero,4(r4)
    7584:	8005883a 	mov	r2,r16
    7588:	dfc00117 	ldw	ra,4(sp)
    758c:	dc000017 	ldw	r16,0(sp)
    7590:	dec00204 	addi	sp,sp,8
    7594:	f800283a 	ret
    7598:	008006c4 	movi	r2,27
    759c:	80000015 	stw	zero,0(r16)
    75a0:	80000115 	stw	zero,4(r16)
    75a4:	81000204 	addi	r4,r16,8
    75a8:	10fff32e 	bgeu	r2,r3,7578 <_calloc_r+0x48>
    75ac:	80000215 	stw	zero,8(r16)
    75b0:	80000315 	stw	zero,12(r16)
    75b4:	81000404 	addi	r4,r16,16
    75b8:	19ffef1e 	bne	r3,r7,7578 <_calloc_r+0x48>
    75bc:	81000604 	addi	r4,r16,24
    75c0:	80000415 	stw	zero,16(r16)
    75c4:	80000515 	stw	zero,20(r16)
    75c8:	003feb06 	br	7578 <_calloc_r+0x48>
    75cc:	0005b500 	call	5b50 <memset>
    75d0:	8005883a 	mov	r2,r16
    75d4:	dfc00117 	ldw	ra,4(sp)
    75d8:	dc000017 	ldw	r16,0(sp)
    75dc:	dec00204 	addi	sp,sp,8
    75e0:	f800283a 	ret

000075e4 <_close_r>:
    75e4:	defffd04 	addi	sp,sp,-12
    75e8:	dc000015 	stw	r16,0(sp)
    75ec:	040000f4 	movhi	r16,3
    75f0:	84078304 	addi	r16,r16,7692
    75f4:	dc400115 	stw	r17,4(sp)
    75f8:	80000015 	stw	zero,0(r16)
    75fc:	2023883a 	mov	r17,r4
    7600:	2809883a 	mov	r4,r5
    7604:	dfc00215 	stw	ra,8(sp)
    7608:	0009d7c0 	call	9d7c <close>
    760c:	1007883a 	mov	r3,r2
    7610:	00bfffc4 	movi	r2,-1
    7614:	18800626 	beq	r3,r2,7630 <_close_r+0x4c>
    7618:	1805883a 	mov	r2,r3
    761c:	dfc00217 	ldw	ra,8(sp)
    7620:	dc400117 	ldw	r17,4(sp)
    7624:	dc000017 	ldw	r16,0(sp)
    7628:	dec00304 	addi	sp,sp,12
    762c:	f800283a 	ret
    7630:	80800017 	ldw	r2,0(r16)
    7634:	103ff826 	beq	r2,zero,7618 <_close_r+0x34>
    7638:	88800015 	stw	r2,0(r17)
    763c:	1805883a 	mov	r2,r3
    7640:	dfc00217 	ldw	ra,8(sp)
    7644:	dc400117 	ldw	r17,4(sp)
    7648:	dc000017 	ldw	r16,0(sp)
    764c:	dec00304 	addi	sp,sp,12
    7650:	f800283a 	ret

00007654 <_fclose_r>:
    7654:	defffc04 	addi	sp,sp,-16
    7658:	dc400115 	stw	r17,4(sp)
    765c:	dc000015 	stw	r16,0(sp)
    7660:	dfc00315 	stw	ra,12(sp)
    7664:	dc800215 	stw	r18,8(sp)
    7668:	2821883a 	mov	r16,r5
    766c:	2023883a 	mov	r17,r4
    7670:	28002926 	beq	r5,zero,7718 <_fclose_r+0xc4>
    7674:	00042900 	call	4290 <__sfp_lock_acquire>
    7678:	88000226 	beq	r17,zero,7684 <_fclose_r+0x30>
    767c:	88800e17 	ldw	r2,56(r17)
    7680:	10002d26 	beq	r2,zero,7738 <_fclose_r+0xe4>
    7684:	8080030f 	ldh	r2,12(r16)
    7688:	10002226 	beq	r2,zero,7714 <_fclose_r+0xc0>
    768c:	8809883a 	mov	r4,r17
    7690:	800b883a 	mov	r5,r16
    7694:	00040080 	call	4008 <_fflush_r>
    7698:	1025883a 	mov	r18,r2
    769c:	80800b17 	ldw	r2,44(r16)
    76a0:	10000426 	beq	r2,zero,76b4 <_fclose_r+0x60>
    76a4:	81400717 	ldw	r5,28(r16)
    76a8:	8809883a 	mov	r4,r17
    76ac:	103ee83a 	callr	r2
    76b0:	10002a16 	blt	r2,zero,775c <_fclose_r+0x108>
    76b4:	8080030b 	ldhu	r2,12(r16)
    76b8:	1080200c 	andi	r2,r2,128
    76bc:	1000231e 	bne	r2,zero,774c <_fclose_r+0xf8>
    76c0:	81400c17 	ldw	r5,48(r16)
    76c4:	28000526 	beq	r5,zero,76dc <_fclose_r+0x88>
    76c8:	80801004 	addi	r2,r16,64
    76cc:	28800226 	beq	r5,r2,76d8 <_fclose_r+0x84>
    76d0:	8809883a 	mov	r4,r17
    76d4:	00046240 	call	4624 <_free_r>
    76d8:	80000c15 	stw	zero,48(r16)
    76dc:	81401117 	ldw	r5,68(r16)
    76e0:	28000326 	beq	r5,zero,76f0 <_fclose_r+0x9c>
    76e4:	8809883a 	mov	r4,r17
    76e8:	00046240 	call	4624 <_free_r>
    76ec:	80001115 	stw	zero,68(r16)
    76f0:	8000030d 	sth	zero,12(r16)
    76f4:	00042940 	call	4294 <__sfp_lock_release>
    76f8:	9005883a 	mov	r2,r18
    76fc:	dfc00317 	ldw	ra,12(sp)
    7700:	dc800217 	ldw	r18,8(sp)
    7704:	dc400117 	ldw	r17,4(sp)
    7708:	dc000017 	ldw	r16,0(sp)
    770c:	dec00404 	addi	sp,sp,16
    7710:	f800283a 	ret
    7714:	00042940 	call	4294 <__sfp_lock_release>
    7718:	0025883a 	mov	r18,zero
    771c:	9005883a 	mov	r2,r18
    7720:	dfc00317 	ldw	ra,12(sp)
    7724:	dc800217 	ldw	r18,8(sp)
    7728:	dc400117 	ldw	r17,4(sp)
    772c:	dc000017 	ldw	r16,0(sp)
    7730:	dec00404 	addi	sp,sp,16
    7734:	f800283a 	ret
    7738:	8809883a 	mov	r4,r17
    773c:	00042a00 	call	42a0 <__sinit>
    7740:	8080030f 	ldh	r2,12(r16)
    7744:	103fd11e 	bne	r2,zero,768c <_fclose_r+0x38>
    7748:	003ff206 	br	7714 <_fclose_r+0xc0>
    774c:	81400417 	ldw	r5,16(r16)
    7750:	8809883a 	mov	r4,r17
    7754:	00046240 	call	4624 <_free_r>
    7758:	003fd906 	br	76c0 <_fclose_r+0x6c>
    775c:	04bfffc4 	movi	r18,-1
    7760:	003fd406 	br	76b4 <_fclose_r+0x60>

00007764 <fclose>:
    7764:	008000f4 	movhi	r2,3
    7768:	10876804 	addi	r2,r2,7584
    776c:	200b883a 	mov	r5,r4
    7770:	11000017 	ldw	r4,0(r2)
    7774:	00076541 	jmpi	7654 <_fclose_r>

00007778 <_fstat_r>:
    7778:	defffd04 	addi	sp,sp,-12
    777c:	dc000015 	stw	r16,0(sp)
    7780:	040000f4 	movhi	r16,3
    7784:	84078304 	addi	r16,r16,7692
    7788:	dc400115 	stw	r17,4(sp)
    778c:	80000015 	stw	zero,0(r16)
    7790:	2023883a 	mov	r17,r4
    7794:	2809883a 	mov	r4,r5
    7798:	300b883a 	mov	r5,r6
    779c:	dfc00215 	stw	ra,8(sp)
    77a0:	0009f040 	call	9f04 <fstat>
    77a4:	1007883a 	mov	r3,r2
    77a8:	00bfffc4 	movi	r2,-1
    77ac:	18800626 	beq	r3,r2,77c8 <_fstat_r+0x50>
    77b0:	1805883a 	mov	r2,r3
    77b4:	dfc00217 	ldw	ra,8(sp)
    77b8:	dc400117 	ldw	r17,4(sp)
    77bc:	dc000017 	ldw	r16,0(sp)
    77c0:	dec00304 	addi	sp,sp,12
    77c4:	f800283a 	ret
    77c8:	80800017 	ldw	r2,0(r16)
    77cc:	103ff826 	beq	r2,zero,77b0 <_fstat_r+0x38>
    77d0:	88800015 	stw	r2,0(r17)
    77d4:	1805883a 	mov	r2,r3
    77d8:	dfc00217 	ldw	ra,8(sp)
    77dc:	dc400117 	ldw	r17,4(sp)
    77e0:	dc000017 	ldw	r16,0(sp)
    77e4:	dec00304 	addi	sp,sp,12
    77e8:	f800283a 	ret

000077ec <_isatty_r>:
    77ec:	defffd04 	addi	sp,sp,-12
    77f0:	dc000015 	stw	r16,0(sp)
    77f4:	040000f4 	movhi	r16,3
    77f8:	84078304 	addi	r16,r16,7692
    77fc:	dc400115 	stw	r17,4(sp)
    7800:	80000015 	stw	zero,0(r16)
    7804:	2023883a 	mov	r17,r4
    7808:	2809883a 	mov	r4,r5
    780c:	dfc00215 	stw	ra,8(sp)
    7810:	000a0380 	call	a038 <isatty>
    7814:	1007883a 	mov	r3,r2
    7818:	00bfffc4 	movi	r2,-1
    781c:	18800626 	beq	r3,r2,7838 <_isatty_r+0x4c>
    7820:	1805883a 	mov	r2,r3
    7824:	dfc00217 	ldw	ra,8(sp)
    7828:	dc400117 	ldw	r17,4(sp)
    782c:	dc000017 	ldw	r16,0(sp)
    7830:	dec00304 	addi	sp,sp,12
    7834:	f800283a 	ret
    7838:	80800017 	ldw	r2,0(r16)
    783c:	103ff826 	beq	r2,zero,7820 <_isatty_r+0x34>
    7840:	88800015 	stw	r2,0(r17)
    7844:	1805883a 	mov	r2,r3
    7848:	dfc00217 	ldw	ra,8(sp)
    784c:	dc400117 	ldw	r17,4(sp)
    7850:	dc000017 	ldw	r16,0(sp)
    7854:	dec00304 	addi	sp,sp,12
    7858:	f800283a 	ret

0000785c <_lseek_r>:
    785c:	defffd04 	addi	sp,sp,-12
    7860:	dc000015 	stw	r16,0(sp)
    7864:	040000f4 	movhi	r16,3
    7868:	84078304 	addi	r16,r16,7692
    786c:	dc400115 	stw	r17,4(sp)
    7870:	80000015 	stw	zero,0(r16)
    7874:	2023883a 	mov	r17,r4
    7878:	2809883a 	mov	r4,r5
    787c:	300b883a 	mov	r5,r6
    7880:	380d883a 	mov	r6,r7
    7884:	dfc00215 	stw	ra,8(sp)
    7888:	000a2440 	call	a244 <lseek>
    788c:	1007883a 	mov	r3,r2
    7890:	00bfffc4 	movi	r2,-1
    7894:	18800626 	beq	r3,r2,78b0 <_lseek_r+0x54>
    7898:	1805883a 	mov	r2,r3
    789c:	dfc00217 	ldw	ra,8(sp)
    78a0:	dc400117 	ldw	r17,4(sp)
    78a4:	dc000017 	ldw	r16,0(sp)
    78a8:	dec00304 	addi	sp,sp,12
    78ac:	f800283a 	ret
    78b0:	80800017 	ldw	r2,0(r16)
    78b4:	103ff826 	beq	r2,zero,7898 <_lseek_r+0x3c>
    78b8:	88800015 	stw	r2,0(r17)
    78bc:	1805883a 	mov	r2,r3
    78c0:	dfc00217 	ldw	ra,8(sp)
    78c4:	dc400117 	ldw	r17,4(sp)
    78c8:	dc000017 	ldw	r16,0(sp)
    78cc:	dec00304 	addi	sp,sp,12
    78d0:	f800283a 	ret

000078d4 <_read_r>:
    78d4:	defffd04 	addi	sp,sp,-12
    78d8:	dc000015 	stw	r16,0(sp)
    78dc:	040000f4 	movhi	r16,3
    78e0:	84078304 	addi	r16,r16,7692
    78e4:	dc400115 	stw	r17,4(sp)
    78e8:	80000015 	stw	zero,0(r16)
    78ec:	2023883a 	mov	r17,r4
    78f0:	2809883a 	mov	r4,r5
    78f4:	300b883a 	mov	r5,r6
    78f8:	380d883a 	mov	r6,r7
    78fc:	dfc00215 	stw	ra,8(sp)
    7900:	000a4400 	call	a440 <read>
    7904:	1007883a 	mov	r3,r2
    7908:	00bfffc4 	movi	r2,-1
    790c:	18800626 	beq	r3,r2,7928 <_read_r+0x54>
    7910:	1805883a 	mov	r2,r3
    7914:	dfc00217 	ldw	ra,8(sp)
    7918:	dc400117 	ldw	r17,4(sp)
    791c:	dc000017 	ldw	r16,0(sp)
    7920:	dec00304 	addi	sp,sp,12
    7924:	f800283a 	ret
    7928:	80800017 	ldw	r2,0(r16)
    792c:	103ff826 	beq	r2,zero,7910 <_read_r+0x3c>
    7930:	88800015 	stw	r2,0(r17)
    7934:	1805883a 	mov	r2,r3
    7938:	dfc00217 	ldw	ra,8(sp)
    793c:	dc400117 	ldw	r17,4(sp)
    7940:	dc000017 	ldw	r16,0(sp)
    7944:	dec00304 	addi	sp,sp,12
    7948:	f800283a 	ret

0000794c <__udivdi3>:
    794c:	defff004 	addi	sp,sp,-64
    7950:	2005883a 	mov	r2,r4
    7954:	3011883a 	mov	r8,r6
    7958:	df000e15 	stw	fp,56(sp)
    795c:	dd000a15 	stw	r20,40(sp)
    7960:	dc000615 	stw	r16,24(sp)
    7964:	dfc00f15 	stw	ra,60(sp)
    7968:	ddc00d15 	stw	r23,52(sp)
    796c:	dd800c15 	stw	r22,48(sp)
    7970:	dd400b15 	stw	r21,44(sp)
    7974:	dcc00915 	stw	r19,36(sp)
    7978:	dc800815 	stw	r18,32(sp)
    797c:	dc400715 	stw	r17,28(sp)
    7980:	4021883a 	mov	r16,r8
    7984:	1039883a 	mov	fp,r2
    7988:	2829883a 	mov	r20,r5
    798c:	38003b1e 	bne	r7,zero,7a7c <__udivdi3+0x130>
    7990:	2a005c36 	bltu	r5,r8,7b04 <__udivdi3+0x1b8>
    7994:	4000a626 	beq	r8,zero,7c30 <__udivdi3+0x2e4>
    7998:	00bfffd4 	movui	r2,65535
    799c:	14009e36 	bltu	r2,r16,7c18 <__udivdi3+0x2cc>
    79a0:	00803fc4 	movi	r2,255
    79a4:	14013d36 	bltu	r2,r16,7e9c <__udivdi3+0x550>
    79a8:	000b883a 	mov	r5,zero
    79ac:	0005883a 	mov	r2,zero
    79b0:	8084d83a 	srl	r2,r16,r2
    79b4:	010000f4 	movhi	r4,3
    79b8:	21009404 	addi	r4,r4,592
    79bc:	01800804 	movi	r6,32
    79c0:	1105883a 	add	r2,r2,r4
    79c4:	10c00003 	ldbu	r3,0(r2)
    79c8:	28c7883a 	add	r3,r5,r3
    79cc:	30edc83a 	sub	r22,r6,r3
    79d0:	b000ee1e 	bne	r22,zero,7d8c <__udivdi3+0x440>
    79d4:	802ad43a 	srli	r21,r16,16
    79d8:	00800044 	movi	r2,1
    79dc:	a423c83a 	sub	r17,r20,r16
    79e0:	85ffffcc 	andi	r23,r16,65535
    79e4:	d8800315 	stw	r2,12(sp)
    79e8:	8809883a 	mov	r4,r17
    79ec:	a80b883a 	mov	r5,r21
    79f0:	00097400 	call	9740 <__udivsi3>
    79f4:	8809883a 	mov	r4,r17
    79f8:	a80b883a 	mov	r5,r21
    79fc:	102d883a 	mov	r22,r2
    7a00:	00097480 	call	9748 <__umodsi3>
    7a04:	1004943a 	slli	r2,r2,16
    7a08:	e006d43a 	srli	r3,fp,16
    7a0c:	bda3383a 	mul	r17,r23,r22
    7a10:	10c4b03a 	or	r2,r2,r3
    7a14:	1440042e 	bgeu	r2,r17,7a28 <__udivdi3+0xdc>
    7a18:	1405883a 	add	r2,r2,r16
    7a1c:	b5bfffc4 	addi	r22,r22,-1
    7a20:	14000136 	bltu	r2,r16,7a28 <__udivdi3+0xdc>
    7a24:	14413d36 	bltu	r2,r17,7f1c <__udivdi3+0x5d0>
    7a28:	1463c83a 	sub	r17,r2,r17
    7a2c:	8809883a 	mov	r4,r17
    7a30:	a80b883a 	mov	r5,r21
    7a34:	00097400 	call	9740 <__udivsi3>
    7a38:	8809883a 	mov	r4,r17
    7a3c:	a80b883a 	mov	r5,r21
    7a40:	1029883a 	mov	r20,r2
    7a44:	00097480 	call	9748 <__umodsi3>
    7a48:	1004943a 	slli	r2,r2,16
    7a4c:	bd09383a 	mul	r4,r23,r20
    7a50:	e0ffffcc 	andi	r3,fp,65535
    7a54:	10c4b03a 	or	r2,r2,r3
    7a58:	1100042e 	bgeu	r2,r4,7a6c <__udivdi3+0x120>
    7a5c:	8085883a 	add	r2,r16,r2
    7a60:	a53fffc4 	addi	r20,r20,-1
    7a64:	14000136 	bltu	r2,r16,7a6c <__udivdi3+0x120>
    7a68:	11012036 	bltu	r2,r4,7eec <__udivdi3+0x5a0>
    7a6c:	b004943a 	slli	r2,r22,16
    7a70:	d9000317 	ldw	r4,12(sp)
    7a74:	a084b03a 	or	r2,r20,r2
    7a78:	00001506 	br	7ad0 <__udivdi3+0x184>
    7a7c:	380d883a 	mov	r6,r7
    7a80:	29c06236 	bltu	r5,r7,7c0c <__udivdi3+0x2c0>
    7a84:	00bfffd4 	movui	r2,65535
    7a88:	11c05a36 	bltu	r2,r7,7bf4 <__udivdi3+0x2a8>
    7a8c:	00803fc4 	movi	r2,255
    7a90:	11c0fc36 	bltu	r2,r7,7e84 <__udivdi3+0x538>
    7a94:	000b883a 	mov	r5,zero
    7a98:	0005883a 	mov	r2,zero
    7a9c:	3084d83a 	srl	r2,r6,r2
    7aa0:	010000f4 	movhi	r4,3
    7aa4:	21009404 	addi	r4,r4,592
    7aa8:	01c00804 	movi	r7,32
    7aac:	1105883a 	add	r2,r2,r4
    7ab0:	10c00003 	ldbu	r3,0(r2)
    7ab4:	28c7883a 	add	r3,r5,r3
    7ab8:	38efc83a 	sub	r23,r7,r3
    7abc:	b800691e 	bne	r23,zero,7c64 <__udivdi3+0x318>
    7ac0:	35000136 	bltu	r6,r20,7ac8 <__udivdi3+0x17c>
    7ac4:	e4005136 	bltu	fp,r16,7c0c <__udivdi3+0x2c0>
    7ac8:	00800044 	movi	r2,1
    7acc:	0009883a 	mov	r4,zero
    7ad0:	2007883a 	mov	r3,r4
    7ad4:	dfc00f17 	ldw	ra,60(sp)
    7ad8:	df000e17 	ldw	fp,56(sp)
    7adc:	ddc00d17 	ldw	r23,52(sp)
    7ae0:	dd800c17 	ldw	r22,48(sp)
    7ae4:	dd400b17 	ldw	r21,44(sp)
    7ae8:	dd000a17 	ldw	r20,40(sp)
    7aec:	dcc00917 	ldw	r19,36(sp)
    7af0:	dc800817 	ldw	r18,32(sp)
    7af4:	dc400717 	ldw	r17,28(sp)
    7af8:	dc000617 	ldw	r16,24(sp)
    7afc:	dec01004 	addi	sp,sp,64
    7b00:	f800283a 	ret
    7b04:	00bfffd4 	movui	r2,65535
    7b08:	12005036 	bltu	r2,r8,7c4c <__udivdi3+0x300>
    7b0c:	00803fc4 	movi	r2,255
    7b10:	1200e836 	bltu	r2,r8,7eb4 <__udivdi3+0x568>
    7b14:	000b883a 	mov	r5,zero
    7b18:	0005883a 	mov	r2,zero
    7b1c:	8084d83a 	srl	r2,r16,r2
    7b20:	010000f4 	movhi	r4,3
    7b24:	21009404 	addi	r4,r4,592
    7b28:	01800804 	movi	r6,32
    7b2c:	1105883a 	add	r2,r2,r4
    7b30:	10c00003 	ldbu	r3,0(r2)
    7b34:	28c7883a 	add	r3,r5,r3
    7b38:	30cbc83a 	sub	r5,r6,r3
    7b3c:	28000626 	beq	r5,zero,7b58 <__udivdi3+0x20c>
    7b40:	3145c83a 	sub	r2,r6,r5
    7b44:	e084d83a 	srl	r2,fp,r2
    7b48:	a146983a 	sll	r3,r20,r5
    7b4c:	e178983a 	sll	fp,fp,r5
    7b50:	8160983a 	sll	r16,r16,r5
    7b54:	18a8b03a 	or	r20,r3,r2
    7b58:	802ad43a 	srli	r21,r16,16
    7b5c:	a009883a 	mov	r4,r20
    7b60:	85ffffcc 	andi	r23,r16,65535
    7b64:	a80b883a 	mov	r5,r21
    7b68:	00097400 	call	9740 <__udivsi3>
    7b6c:	a009883a 	mov	r4,r20
    7b70:	a80b883a 	mov	r5,r21
    7b74:	102d883a 	mov	r22,r2
    7b78:	00097480 	call	9748 <__umodsi3>
    7b7c:	1004943a 	slli	r2,r2,16
    7b80:	e006d43a 	srli	r3,fp,16
    7b84:	bda3383a 	mul	r17,r23,r22
    7b88:	10c4b03a 	or	r2,r2,r3
    7b8c:	1440042e 	bgeu	r2,r17,7ba0 <__udivdi3+0x254>
    7b90:	1405883a 	add	r2,r2,r16
    7b94:	b5bfffc4 	addi	r22,r22,-1
    7b98:	14000136 	bltu	r2,r16,7ba0 <__udivdi3+0x254>
    7b9c:	1440d536 	bltu	r2,r17,7ef4 <__udivdi3+0x5a8>
    7ba0:	1463c83a 	sub	r17,r2,r17
    7ba4:	8809883a 	mov	r4,r17
    7ba8:	a80b883a 	mov	r5,r21
    7bac:	00097400 	call	9740 <__udivsi3>
    7bb0:	8809883a 	mov	r4,r17
    7bb4:	a80b883a 	mov	r5,r21
    7bb8:	1029883a 	mov	r20,r2
    7bbc:	00097480 	call	9748 <__umodsi3>
    7bc0:	1004943a 	slli	r2,r2,16
    7bc4:	bd09383a 	mul	r4,r23,r20
    7bc8:	e0ffffcc 	andi	r3,fp,65535
    7bcc:	10c4b03a 	or	r2,r2,r3
    7bd0:	1100042e 	bgeu	r2,r4,7be4 <__udivdi3+0x298>
    7bd4:	8085883a 	add	r2,r16,r2
    7bd8:	a53fffc4 	addi	r20,r20,-1
    7bdc:	14000136 	bltu	r2,r16,7be4 <__udivdi3+0x298>
    7be0:	1100c736 	bltu	r2,r4,7f00 <__udivdi3+0x5b4>
    7be4:	b004943a 	slli	r2,r22,16
    7be8:	0009883a 	mov	r4,zero
    7bec:	a084b03a 	or	r2,r20,r2
    7bf0:	003fb706 	br	7ad0 <__udivdi3+0x184>
    7bf4:	00804034 	movhi	r2,256
    7bf8:	10bfffc4 	addi	r2,r2,-1
    7bfc:	11c0a436 	bltu	r2,r7,7e90 <__udivdi3+0x544>
    7c00:	01400404 	movi	r5,16
    7c04:	2805883a 	mov	r2,r5
    7c08:	003fa406 	br	7a9c <__udivdi3+0x150>
    7c0c:	0005883a 	mov	r2,zero
    7c10:	0009883a 	mov	r4,zero
    7c14:	003fae06 	br	7ad0 <__udivdi3+0x184>
    7c18:	00804034 	movhi	r2,256
    7c1c:	10bfffc4 	addi	r2,r2,-1
    7c20:	1400a136 	bltu	r2,r16,7ea8 <__udivdi3+0x55c>
    7c24:	01400404 	movi	r5,16
    7c28:	2805883a 	mov	r2,r5
    7c2c:	003f6006 	br	79b0 <__udivdi3+0x64>
    7c30:	01000044 	movi	r4,1
    7c34:	000b883a 	mov	r5,zero
    7c38:	00097400 	call	9740 <__udivsi3>
    7c3c:	1021883a 	mov	r16,r2
    7c40:	00bfffd4 	movui	r2,65535
    7c44:	143ff436 	bltu	r2,r16,7c18 <__udivdi3+0x2cc>
    7c48:	003f5506 	br	79a0 <__udivdi3+0x54>
    7c4c:	00804034 	movhi	r2,256
    7c50:	10bfffc4 	addi	r2,r2,-1
    7c54:	12009a36 	bltu	r2,r8,7ec0 <__udivdi3+0x574>
    7c58:	01400404 	movi	r5,16
    7c5c:	2805883a 	mov	r2,r5
    7c60:	003fae06 	br	7b1c <__udivdi3+0x1d0>
    7c64:	3dc5c83a 	sub	r2,r7,r23
    7c68:	35c8983a 	sll	r4,r6,r23
    7c6c:	8086d83a 	srl	r3,r16,r2
    7c70:	a0a2d83a 	srl	r17,r20,r2
    7c74:	e084d83a 	srl	r2,fp,r2
    7c78:	20eab03a 	or	r21,r4,r3
    7c7c:	a82cd43a 	srli	r22,r21,16
    7c80:	a5c6983a 	sll	r3,r20,r23
    7c84:	8809883a 	mov	r4,r17
    7c88:	b00b883a 	mov	r5,r22
    7c8c:	1886b03a 	or	r3,r3,r2
    7c90:	d8c00215 	stw	r3,8(sp)
    7c94:	00097400 	call	9740 <__udivsi3>
    7c98:	8809883a 	mov	r4,r17
    7c9c:	b00b883a 	mov	r5,r22
    7ca0:	1029883a 	mov	r20,r2
    7ca4:	00097480 	call	9748 <__umodsi3>
    7ca8:	a8ffffcc 	andi	r3,r21,65535
    7cac:	d8c00515 	stw	r3,20(sp)
    7cb0:	d9000217 	ldw	r4,8(sp)
    7cb4:	d9400517 	ldw	r5,20(sp)
    7cb8:	1004943a 	slli	r2,r2,16
    7cbc:	2006d43a 	srli	r3,r4,16
    7cc0:	85e0983a 	sll	r16,r16,r23
    7cc4:	2d23383a 	mul	r17,r5,r20
    7cc8:	10c4b03a 	or	r2,r2,r3
    7ccc:	dc000015 	stw	r16,0(sp)
    7cd0:	1440032e 	bgeu	r2,r17,7ce0 <__udivdi3+0x394>
    7cd4:	1545883a 	add	r2,r2,r21
    7cd8:	a53fffc4 	addi	r20,r20,-1
    7cdc:	15407f2e 	bgeu	r2,r21,7edc <__udivdi3+0x590>
    7ce0:	1463c83a 	sub	r17,r2,r17
    7ce4:	8809883a 	mov	r4,r17
    7ce8:	b00b883a 	mov	r5,r22
    7cec:	00097400 	call	9740 <__udivsi3>
    7cf0:	8809883a 	mov	r4,r17
    7cf4:	b00b883a 	mov	r5,r22
    7cf8:	1021883a 	mov	r16,r2
    7cfc:	00097480 	call	9748 <__umodsi3>
    7d00:	d8c00517 	ldw	r3,20(sp)
    7d04:	d9000217 	ldw	r4,8(sp)
    7d08:	1004943a 	slli	r2,r2,16
    7d0c:	1c0f383a 	mul	r7,r3,r16
    7d10:	20ffffcc 	andi	r3,r4,65535
    7d14:	10e2b03a 	or	r17,r2,r3
    7d18:	89c0032e 	bgeu	r17,r7,7d28 <__udivdi3+0x3dc>
    7d1c:	8d63883a 	add	r17,r17,r21
    7d20:	843fffc4 	addi	r16,r16,-1
    7d24:	8d40692e 	bgeu	r17,r21,7ecc <__udivdi3+0x580>
    7d28:	a008943a 	slli	r4,r20,16
    7d2c:	d9400017 	ldw	r5,0(sp)
    7d30:	89e3c83a 	sub	r17,r17,r7
    7d34:	8110b03a 	or	r8,r16,r4
    7d38:	280cd43a 	srli	r6,r5,16
    7d3c:	28ffffcc 	andi	r3,r5,65535
    7d40:	40bfffcc 	andi	r2,r8,65535
    7d44:	400ad43a 	srli	r5,r8,16
    7d48:	10d3383a 	mul	r9,r2,r3
    7d4c:	1185383a 	mul	r2,r2,r6
    7d50:	28c7383a 	mul	r3,r5,r3
    7d54:	4808d43a 	srli	r4,r9,16
    7d58:	298b383a 	mul	r5,r5,r6
    7d5c:	10c5883a 	add	r2,r2,r3
    7d60:	2089883a 	add	r4,r4,r2
    7d64:	20c0022e 	bgeu	r4,r3,7d70 <__udivdi3+0x424>
    7d68:	00800074 	movhi	r2,1
    7d6c:	288b883a 	add	r5,r5,r2
    7d70:	2004d43a 	srli	r2,r4,16
    7d74:	288b883a 	add	r5,r5,r2
    7d78:	89403f36 	bltu	r17,r5,7e78 <__udivdi3+0x52c>
    7d7c:	89403926 	beq	r17,r5,7e64 <__udivdi3+0x518>
    7d80:	4005883a 	mov	r2,r8
    7d84:	0009883a 	mov	r4,zero
    7d88:	003f5106 	br	7ad0 <__udivdi3+0x184>
    7d8c:	85a0983a 	sll	r16,r16,r22
    7d90:	3585c83a 	sub	r2,r6,r22
    7d94:	a0a2d83a 	srl	r17,r20,r2
    7d98:	802ad43a 	srli	r21,r16,16
    7d9c:	e084d83a 	srl	r2,fp,r2
    7da0:	a586983a 	sll	r3,r20,r22
    7da4:	8809883a 	mov	r4,r17
    7da8:	a80b883a 	mov	r5,r21
    7dac:	1886b03a 	or	r3,r3,r2
    7db0:	d8c00115 	stw	r3,4(sp)
    7db4:	00097400 	call	9740 <__udivsi3>
    7db8:	8809883a 	mov	r4,r17
    7dbc:	a80b883a 	mov	r5,r21
    7dc0:	d8800415 	stw	r2,16(sp)
    7dc4:	00097480 	call	9748 <__umodsi3>
    7dc8:	d9000117 	ldw	r4,4(sp)
    7dcc:	d9400417 	ldw	r5,16(sp)
    7dd0:	1004943a 	slli	r2,r2,16
    7dd4:	85ffffcc 	andi	r23,r16,65535
    7dd8:	2006d43a 	srli	r3,r4,16
    7ddc:	b963383a 	mul	r17,r23,r5
    7de0:	10c4b03a 	or	r2,r2,r3
    7de4:	1440042e 	bgeu	r2,r17,7df8 <__udivdi3+0x4ac>
    7de8:	297fffc4 	addi	r5,r5,-1
    7dec:	1405883a 	add	r2,r2,r16
    7df0:	d9400415 	stw	r5,16(sp)
    7df4:	1400442e 	bgeu	r2,r16,7f08 <__udivdi3+0x5bc>
    7df8:	1463c83a 	sub	r17,r2,r17
    7dfc:	8809883a 	mov	r4,r17
    7e00:	a80b883a 	mov	r5,r21
    7e04:	00097400 	call	9740 <__udivsi3>
    7e08:	8809883a 	mov	r4,r17
    7e0c:	a80b883a 	mov	r5,r21
    7e10:	1029883a 	mov	r20,r2
    7e14:	00097480 	call	9748 <__umodsi3>
    7e18:	d9400117 	ldw	r5,4(sp)
    7e1c:	1004943a 	slli	r2,r2,16
    7e20:	bd09383a 	mul	r4,r23,r20
    7e24:	28ffffcc 	andi	r3,r5,65535
    7e28:	10c6b03a 	or	r3,r2,r3
    7e2c:	1900062e 	bgeu	r3,r4,7e48 <__udivdi3+0x4fc>
    7e30:	1c07883a 	add	r3,r3,r16
    7e34:	a53fffc4 	addi	r20,r20,-1
    7e38:	1c000336 	bltu	r3,r16,7e48 <__udivdi3+0x4fc>
    7e3c:	1900022e 	bgeu	r3,r4,7e48 <__udivdi3+0x4fc>
    7e40:	a53fffc4 	addi	r20,r20,-1
    7e44:	1c07883a 	add	r3,r3,r16
    7e48:	d9400417 	ldw	r5,16(sp)
    7e4c:	e5b8983a 	sll	fp,fp,r22
    7e50:	1923c83a 	sub	r17,r3,r4
    7e54:	2804943a 	slli	r2,r5,16
    7e58:	a0a8b03a 	or	r20,r20,r2
    7e5c:	dd000315 	stw	r20,12(sp)
    7e60:	003ee106 	br	79e8 <__udivdi3+0x9c>
    7e64:	2004943a 	slli	r2,r4,16
    7e68:	e5c8983a 	sll	r4,fp,r23
    7e6c:	48ffffcc 	andi	r3,r9,65535
    7e70:	10c5883a 	add	r2,r2,r3
    7e74:	20bfc22e 	bgeu	r4,r2,7d80 <__udivdi3+0x434>
    7e78:	40bfffc4 	addi	r2,r8,-1
    7e7c:	0009883a 	mov	r4,zero
    7e80:	003f1306 	br	7ad0 <__udivdi3+0x184>
    7e84:	01400204 	movi	r5,8
    7e88:	2805883a 	mov	r2,r5
    7e8c:	003f0306 	br	7a9c <__udivdi3+0x150>
    7e90:	01400604 	movi	r5,24
    7e94:	2805883a 	mov	r2,r5
    7e98:	003f0006 	br	7a9c <__udivdi3+0x150>
    7e9c:	01400204 	movi	r5,8
    7ea0:	2805883a 	mov	r2,r5
    7ea4:	003ec206 	br	79b0 <__udivdi3+0x64>
    7ea8:	01400604 	movi	r5,24
    7eac:	2805883a 	mov	r2,r5
    7eb0:	003ebf06 	br	79b0 <__udivdi3+0x64>
    7eb4:	01400204 	movi	r5,8
    7eb8:	2805883a 	mov	r2,r5
    7ebc:	003f1706 	br	7b1c <__udivdi3+0x1d0>
    7ec0:	01400604 	movi	r5,24
    7ec4:	2805883a 	mov	r2,r5
    7ec8:	003f1406 	br	7b1c <__udivdi3+0x1d0>
    7ecc:	89ff962e 	bgeu	r17,r7,7d28 <__udivdi3+0x3dc>
    7ed0:	8d63883a 	add	r17,r17,r21
    7ed4:	843fffc4 	addi	r16,r16,-1
    7ed8:	003f9306 	br	7d28 <__udivdi3+0x3dc>
    7edc:	147f802e 	bgeu	r2,r17,7ce0 <__udivdi3+0x394>
    7ee0:	a53fffc4 	addi	r20,r20,-1
    7ee4:	1545883a 	add	r2,r2,r21
    7ee8:	003f7d06 	br	7ce0 <__udivdi3+0x394>
    7eec:	a53fffc4 	addi	r20,r20,-1
    7ef0:	003ede06 	br	7a6c <__udivdi3+0x120>
    7ef4:	b5bfffc4 	addi	r22,r22,-1
    7ef8:	1405883a 	add	r2,r2,r16
    7efc:	003f2806 	br	7ba0 <__udivdi3+0x254>
    7f00:	a53fffc4 	addi	r20,r20,-1
    7f04:	003f3706 	br	7be4 <__udivdi3+0x298>
    7f08:	147fbb2e 	bgeu	r2,r17,7df8 <__udivdi3+0x4ac>
    7f0c:	297fffc4 	addi	r5,r5,-1
    7f10:	1405883a 	add	r2,r2,r16
    7f14:	d9400415 	stw	r5,16(sp)
    7f18:	003fb706 	br	7df8 <__udivdi3+0x4ac>
    7f1c:	b5bfffc4 	addi	r22,r22,-1
    7f20:	1405883a 	add	r2,r2,r16
    7f24:	003ec006 	br	7a28 <__udivdi3+0xdc>

00007f28 <__umoddi3>:
    7f28:	defff104 	addi	sp,sp,-60
    7f2c:	dd800b15 	stw	r22,44(sp)
    7f30:	dd000915 	stw	r20,36(sp)
    7f34:	dc000515 	stw	r16,20(sp)
    7f38:	dfc00e15 	stw	ra,56(sp)
    7f3c:	df000d15 	stw	fp,52(sp)
    7f40:	ddc00c15 	stw	r23,48(sp)
    7f44:	dd400a15 	stw	r21,40(sp)
    7f48:	dcc00815 	stw	r19,32(sp)
    7f4c:	dc800715 	stw	r18,28(sp)
    7f50:	dc400615 	stw	r17,24(sp)
    7f54:	3021883a 	mov	r16,r6
    7f58:	202d883a 	mov	r22,r4
    7f5c:	2829883a 	mov	r20,r5
    7f60:	38002b1e 	bne	r7,zero,8010 <__umoddi3+0xe8>
    7f64:	29805036 	bltu	r5,r6,80a8 <__umoddi3+0x180>
    7f68:	30008a26 	beq	r6,zero,8194 <__umoddi3+0x26c>
    7f6c:	00bfffd4 	movui	r2,65535
    7f70:	14008236 	bltu	r2,r16,817c <__umoddi3+0x254>
    7f74:	00803fc4 	movi	r2,255
    7f78:	14013636 	bltu	r2,r16,8454 <__umoddi3+0x52c>
    7f7c:	000b883a 	mov	r5,zero
    7f80:	0005883a 	mov	r2,zero
    7f84:	8084d83a 	srl	r2,r16,r2
    7f88:	010000f4 	movhi	r4,3
    7f8c:	21009404 	addi	r4,r4,592
    7f90:	01800804 	movi	r6,32
    7f94:	1105883a 	add	r2,r2,r4
    7f98:	10c00003 	ldbu	r3,0(r2)
    7f9c:	28c7883a 	add	r3,r5,r3
    7fa0:	30efc83a 	sub	r23,r6,r3
    7fa4:	b800941e 	bne	r23,zero,81f8 <__umoddi3+0x2d0>
    7fa8:	802ad43a 	srli	r21,r16,16
    7fac:	a423c83a 	sub	r17,r20,r16
    7fb0:	0039883a 	mov	fp,zero
    7fb4:	853fffcc 	andi	r20,r16,65535
    7fb8:	8809883a 	mov	r4,r17
    7fbc:	a80b883a 	mov	r5,r21
    7fc0:	00097400 	call	9740 <__udivsi3>
    7fc4:	8809883a 	mov	r4,r17
    7fc8:	a80b883a 	mov	r5,r21
    7fcc:	a0a3383a 	mul	r17,r20,r2
    7fd0:	00097480 	call	9748 <__umodsi3>
    7fd4:	1004943a 	slli	r2,r2,16
    7fd8:	b006d43a 	srli	r3,r22,16
    7fdc:	10c4b03a 	or	r2,r2,r3
    7fe0:	1440032e 	bgeu	r2,r17,7ff0 <__umoddi3+0xc8>
    7fe4:	1405883a 	add	r2,r2,r16
    7fe8:	14000136 	bltu	r2,r16,7ff0 <__umoddi3+0xc8>
    7fec:	14413536 	bltu	r2,r17,84c4 <__umoddi3+0x59c>
    7ff0:	1463c83a 	sub	r17,r2,r17
    7ff4:	8809883a 	mov	r4,r17
    7ff8:	a80b883a 	mov	r5,r21
    7ffc:	00097400 	call	9740 <__udivsi3>
    8000:	8809883a 	mov	r4,r17
    8004:	a0a3383a 	mul	r17,r20,r2
    8008:	a80b883a 	mov	r5,r21
    800c:	00004d06 	br	8144 <__umoddi3+0x21c>
    8010:	380d883a 	mov	r6,r7
    8014:	29c0102e 	bgeu	r5,r7,8058 <__umoddi3+0x130>
    8018:	2011883a 	mov	r8,r4
    801c:	2813883a 	mov	r9,r5
    8020:	4005883a 	mov	r2,r8
    8024:	4807883a 	mov	r3,r9
    8028:	dfc00e17 	ldw	ra,56(sp)
    802c:	df000d17 	ldw	fp,52(sp)
    8030:	ddc00c17 	ldw	r23,48(sp)
    8034:	dd800b17 	ldw	r22,44(sp)
    8038:	dd400a17 	ldw	r21,40(sp)
    803c:	dd000917 	ldw	r20,36(sp)
    8040:	dcc00817 	ldw	r19,32(sp)
    8044:	dc800717 	ldw	r18,28(sp)
    8048:	dc400617 	ldw	r17,24(sp)
    804c:	dc000517 	ldw	r16,20(sp)
    8050:	dec00f04 	addi	sp,sp,60
    8054:	f800283a 	ret
    8058:	00bfffd4 	movui	r2,65535
    805c:	11c05a36 	bltu	r2,r7,81c8 <__umoddi3+0x2a0>
    8060:	00803fc4 	movi	r2,255
    8064:	11c0fe36 	bltu	r2,r7,8460 <__umoddi3+0x538>
    8068:	000b883a 	mov	r5,zero
    806c:	0005883a 	mov	r2,zero
    8070:	3084d83a 	srl	r2,r6,r2
    8074:	010000f4 	movhi	r4,3
    8078:	21009404 	addi	r4,r4,592
    807c:	01c00804 	movi	r7,32
    8080:	1105883a 	add	r2,r2,r4
    8084:	10c00003 	ldbu	r3,0(r2)
    8088:	28c7883a 	add	r3,r5,r3
    808c:	38ebc83a 	sub	r21,r7,r3
    8090:	a800851e 	bne	r21,zero,82a8 <__umoddi3+0x380>
    8094:	35005236 	bltu	r6,r20,81e0 <__umoddi3+0x2b8>
    8098:	b400512e 	bgeu	r22,r16,81e0 <__umoddi3+0x2b8>
    809c:	b011883a 	mov	r8,r22
    80a0:	a013883a 	mov	r9,r20
    80a4:	003fde06 	br	8020 <__umoddi3+0xf8>
    80a8:	00bfffd4 	movui	r2,65535
    80ac:	11804036 	bltu	r2,r6,81b0 <__umoddi3+0x288>
    80b0:	00803fc4 	movi	r2,255
    80b4:	1180ed36 	bltu	r2,r6,846c <__umoddi3+0x544>
    80b8:	000b883a 	mov	r5,zero
    80bc:	0005883a 	mov	r2,zero
    80c0:	8084d83a 	srl	r2,r16,r2
    80c4:	010000f4 	movhi	r4,3
    80c8:	21009404 	addi	r4,r4,592
    80cc:	01800804 	movi	r6,32
    80d0:	1105883a 	add	r2,r2,r4
    80d4:	10c00003 	ldbu	r3,0(r2)
    80d8:	28c7883a 	add	r3,r5,r3
    80dc:	30c7c83a 	sub	r3,r6,r3
    80e0:	1800bf1e 	bne	r3,zero,83e0 <__umoddi3+0x4b8>
    80e4:	0039883a 	mov	fp,zero
    80e8:	802ad43a 	srli	r21,r16,16
    80ec:	a009883a 	mov	r4,r20
    80f0:	85ffffcc 	andi	r23,r16,65535
    80f4:	a80b883a 	mov	r5,r21
    80f8:	00097400 	call	9740 <__udivsi3>
    80fc:	a009883a 	mov	r4,r20
    8100:	a80b883a 	mov	r5,r21
    8104:	b8a3383a 	mul	r17,r23,r2
    8108:	00097480 	call	9748 <__umodsi3>
    810c:	1004943a 	slli	r2,r2,16
    8110:	b006d43a 	srli	r3,r22,16
    8114:	10c4b03a 	or	r2,r2,r3
    8118:	1440032e 	bgeu	r2,r17,8128 <__umoddi3+0x200>
    811c:	1405883a 	add	r2,r2,r16
    8120:	14000136 	bltu	r2,r16,8128 <__umoddi3+0x200>
    8124:	1440e536 	bltu	r2,r17,84bc <__umoddi3+0x594>
    8128:	1463c83a 	sub	r17,r2,r17
    812c:	8809883a 	mov	r4,r17
    8130:	a80b883a 	mov	r5,r21
    8134:	00097400 	call	9740 <__udivsi3>
    8138:	8809883a 	mov	r4,r17
    813c:	b8a3383a 	mul	r17,r23,r2
    8140:	a80b883a 	mov	r5,r21
    8144:	00097480 	call	9748 <__umodsi3>
    8148:	1004943a 	slli	r2,r2,16
    814c:	b0ffffcc 	andi	r3,r22,65535
    8150:	10c4b03a 	or	r2,r2,r3
    8154:	1440042e 	bgeu	r2,r17,8168 <__umoddi3+0x240>
    8158:	1405883a 	add	r2,r2,r16
    815c:	14000236 	bltu	r2,r16,8168 <__umoddi3+0x240>
    8160:	1440012e 	bgeu	r2,r17,8168 <__umoddi3+0x240>
    8164:	1405883a 	add	r2,r2,r16
    8168:	1445c83a 	sub	r2,r2,r17
    816c:	1724d83a 	srl	r18,r2,fp
    8170:	0013883a 	mov	r9,zero
    8174:	9011883a 	mov	r8,r18
    8178:	003fa906 	br	8020 <__umoddi3+0xf8>
    817c:	00804034 	movhi	r2,256
    8180:	10bfffc4 	addi	r2,r2,-1
    8184:	1400b036 	bltu	r2,r16,8448 <__umoddi3+0x520>
    8188:	01400404 	movi	r5,16
    818c:	2805883a 	mov	r2,r5
    8190:	003f7c06 	br	7f84 <__umoddi3+0x5c>
    8194:	01000044 	movi	r4,1
    8198:	000b883a 	mov	r5,zero
    819c:	00097400 	call	9740 <__udivsi3>
    81a0:	1021883a 	mov	r16,r2
    81a4:	00bfffd4 	movui	r2,65535
    81a8:	143ff436 	bltu	r2,r16,817c <__umoddi3+0x254>
    81ac:	003f7106 	br	7f74 <__umoddi3+0x4c>
    81b0:	00804034 	movhi	r2,256
    81b4:	10bfffc4 	addi	r2,r2,-1
    81b8:	1180af36 	bltu	r2,r6,8478 <__umoddi3+0x550>
    81bc:	01400404 	movi	r5,16
    81c0:	2805883a 	mov	r2,r5
    81c4:	003fbe06 	br	80c0 <__umoddi3+0x198>
    81c8:	00804034 	movhi	r2,256
    81cc:	10bfffc4 	addi	r2,r2,-1
    81d0:	11c0ac36 	bltu	r2,r7,8484 <__umoddi3+0x55c>
    81d4:	01400404 	movi	r5,16
    81d8:	2805883a 	mov	r2,r5
    81dc:	003fa406 	br	8070 <__umoddi3+0x148>
    81e0:	b409c83a 	sub	r4,r22,r16
    81e4:	b105803a 	cmpltu	r2,r22,r4
    81e8:	a187c83a 	sub	r3,r20,r6
    81ec:	18a9c83a 	sub	r20,r3,r2
    81f0:	202d883a 	mov	r22,r4
    81f4:	003fa906 	br	809c <__umoddi3+0x174>
    81f8:	85e0983a 	sll	r16,r16,r23
    81fc:	35c5c83a 	sub	r2,r6,r23
    8200:	a0a2d83a 	srl	r17,r20,r2
    8204:	802ad43a 	srli	r21,r16,16
    8208:	b084d83a 	srl	r2,r22,r2
    820c:	a5c6983a 	sll	r3,r20,r23
    8210:	8809883a 	mov	r4,r17
    8214:	a80b883a 	mov	r5,r21
    8218:	1886b03a 	or	r3,r3,r2
    821c:	d8c00115 	stw	r3,4(sp)
    8220:	853fffcc 	andi	r20,r16,65535
    8224:	00097400 	call	9740 <__udivsi3>
    8228:	8809883a 	mov	r4,r17
    822c:	a80b883a 	mov	r5,r21
    8230:	a0a3383a 	mul	r17,r20,r2
    8234:	00097480 	call	9748 <__umodsi3>
    8238:	d9000117 	ldw	r4,4(sp)
    823c:	1004943a 	slli	r2,r2,16
    8240:	b839883a 	mov	fp,r23
    8244:	2006d43a 	srli	r3,r4,16
    8248:	10c4b03a 	or	r2,r2,r3
    824c:	1440022e 	bgeu	r2,r17,8258 <__umoddi3+0x330>
    8250:	1405883a 	add	r2,r2,r16
    8254:	1400962e 	bgeu	r2,r16,84b0 <__umoddi3+0x588>
    8258:	1463c83a 	sub	r17,r2,r17
    825c:	8809883a 	mov	r4,r17
    8260:	a80b883a 	mov	r5,r21
    8264:	00097400 	call	9740 <__udivsi3>
    8268:	8809883a 	mov	r4,r17
    826c:	a80b883a 	mov	r5,r21
    8270:	a0a3383a 	mul	r17,r20,r2
    8274:	00097480 	call	9748 <__umodsi3>
    8278:	d9400117 	ldw	r5,4(sp)
    827c:	1004943a 	slli	r2,r2,16
    8280:	28ffffcc 	andi	r3,r5,65535
    8284:	10c4b03a 	or	r2,r2,r3
    8288:	1440042e 	bgeu	r2,r17,829c <__umoddi3+0x374>
    828c:	1405883a 	add	r2,r2,r16
    8290:	14000236 	bltu	r2,r16,829c <__umoddi3+0x374>
    8294:	1440012e 	bgeu	r2,r17,829c <__umoddi3+0x374>
    8298:	1405883a 	add	r2,r2,r16
    829c:	b5ec983a 	sll	r22,r22,r23
    82a0:	1463c83a 	sub	r17,r2,r17
    82a4:	003f4406 	br	7fb8 <__umoddi3+0x90>
    82a8:	3d4fc83a 	sub	r7,r7,r21
    82ac:	3546983a 	sll	r3,r6,r21
    82b0:	81c4d83a 	srl	r2,r16,r7
    82b4:	a1e2d83a 	srl	r17,r20,r7
    82b8:	a54c983a 	sll	r6,r20,r21
    82bc:	18aeb03a 	or	r23,r3,r2
    82c0:	b828d43a 	srli	r20,r23,16
    82c4:	b1c4d83a 	srl	r2,r22,r7
    82c8:	8809883a 	mov	r4,r17
    82cc:	a00b883a 	mov	r5,r20
    82d0:	308cb03a 	or	r6,r6,r2
    82d4:	d9c00315 	stw	r7,12(sp)
    82d8:	d9800215 	stw	r6,8(sp)
    82dc:	00097400 	call	9740 <__udivsi3>
    82e0:	8809883a 	mov	r4,r17
    82e4:	a00b883a 	mov	r5,r20
    82e8:	1039883a 	mov	fp,r2
    82ec:	00097480 	call	9748 <__umodsi3>
    82f0:	b8ffffcc 	andi	r3,r23,65535
    82f4:	d8c00415 	stw	r3,16(sp)
    82f8:	d9000217 	ldw	r4,8(sp)
    82fc:	d9400417 	ldw	r5,16(sp)
    8300:	1004943a 	slli	r2,r2,16
    8304:	2006d43a 	srli	r3,r4,16
    8308:	8560983a 	sll	r16,r16,r21
    830c:	2f23383a 	mul	r17,r5,fp
    8310:	10c4b03a 	or	r2,r2,r3
    8314:	dc000015 	stw	r16,0(sp)
    8318:	b56c983a 	sll	r22,r22,r21
    831c:	1440032e 	bgeu	r2,r17,832c <__umoddi3+0x404>
    8320:	15c5883a 	add	r2,r2,r23
    8324:	e73fffc4 	addi	fp,fp,-1
    8328:	15c05d2e 	bgeu	r2,r23,84a0 <__umoddi3+0x578>
    832c:	1463c83a 	sub	r17,r2,r17
    8330:	8809883a 	mov	r4,r17
    8334:	a00b883a 	mov	r5,r20
    8338:	00097400 	call	9740 <__udivsi3>
    833c:	8809883a 	mov	r4,r17
    8340:	a00b883a 	mov	r5,r20
    8344:	1021883a 	mov	r16,r2
    8348:	00097480 	call	9748 <__umodsi3>
    834c:	d8c00417 	ldw	r3,16(sp)
    8350:	d9000217 	ldw	r4,8(sp)
    8354:	1004943a 	slli	r2,r2,16
    8358:	1c23383a 	mul	r17,r3,r16
    835c:	20ffffcc 	andi	r3,r4,65535
    8360:	10ceb03a 	or	r7,r2,r3
    8364:	3c40032e 	bgeu	r7,r17,8374 <__umoddi3+0x44c>
    8368:	3dcf883a 	add	r7,r7,r23
    836c:	843fffc4 	addi	r16,r16,-1
    8370:	3dc0472e 	bgeu	r7,r23,8490 <__umoddi3+0x568>
    8374:	e004943a 	slli	r2,fp,16
    8378:	d9400017 	ldw	r5,0(sp)
    837c:	3c4fc83a 	sub	r7,r7,r17
    8380:	8084b03a 	or	r2,r16,r2
    8384:	28ffffcc 	andi	r3,r5,65535
    8388:	280cd43a 	srli	r6,r5,16
    838c:	100ad43a 	srli	r5,r2,16
    8390:	10bfffcc 	andi	r2,r2,65535
    8394:	10d1383a 	mul	r8,r2,r3
    8398:	28c7383a 	mul	r3,r5,r3
    839c:	1185383a 	mul	r2,r2,r6
    83a0:	4008d43a 	srli	r4,r8,16
    83a4:	298b383a 	mul	r5,r5,r6
    83a8:	10c5883a 	add	r2,r2,r3
    83ac:	2089883a 	add	r4,r4,r2
    83b0:	20c0022e 	bgeu	r4,r3,83bc <__umoddi3+0x494>
    83b4:	00800074 	movhi	r2,1
    83b8:	288b883a 	add	r5,r5,r2
    83bc:	2004d43a 	srli	r2,r4,16
    83c0:	2008943a 	slli	r4,r4,16
    83c4:	40ffffcc 	andi	r3,r8,65535
    83c8:	288b883a 	add	r5,r5,r2
    83cc:	20c9883a 	add	r4,r4,r3
    83d0:	39400b36 	bltu	r7,r5,8400 <__umoddi3+0x4d8>
    83d4:	39403d26 	beq	r7,r5,84cc <__umoddi3+0x5a4>
    83d8:	394bc83a 	sub	r5,r7,r5
    83dc:	00000f06 	br	841c <__umoddi3+0x4f4>
    83e0:	30c5c83a 	sub	r2,r6,r3
    83e4:	1839883a 	mov	fp,r3
    83e8:	b084d83a 	srl	r2,r22,r2
    83ec:	a0c6983a 	sll	r3,r20,r3
    83f0:	8720983a 	sll	r16,r16,fp
    83f4:	b72c983a 	sll	r22,r22,fp
    83f8:	18a8b03a 	or	r20,r3,r2
    83fc:	003f3a06 	br	80e8 <__umoddi3+0x1c0>
    8400:	d8c00017 	ldw	r3,0(sp)
    8404:	20c5c83a 	sub	r2,r4,r3
    8408:	2089803a 	cmpltu	r4,r4,r2
    840c:	2dc7c83a 	sub	r3,r5,r23
    8410:	1907c83a 	sub	r3,r3,r4
    8414:	38cbc83a 	sub	r5,r7,r3
    8418:	1009883a 	mov	r4,r2
    841c:	b105c83a 	sub	r2,r22,r4
    8420:	b087803a 	cmpltu	r3,r22,r2
    8424:	28c7c83a 	sub	r3,r5,r3
    8428:	d9400317 	ldw	r5,12(sp)
    842c:	1544d83a 	srl	r2,r2,r21
    8430:	1948983a 	sll	r4,r3,r5
    8434:	1d46d83a 	srl	r3,r3,r21
    8438:	20a4b03a 	or	r18,r4,r2
    843c:	9011883a 	mov	r8,r18
    8440:	1813883a 	mov	r9,r3
    8444:	003ef606 	br	8020 <__umoddi3+0xf8>
    8448:	01400604 	movi	r5,24
    844c:	2805883a 	mov	r2,r5
    8450:	003ecc06 	br	7f84 <__umoddi3+0x5c>
    8454:	01400204 	movi	r5,8
    8458:	2805883a 	mov	r2,r5
    845c:	003ec906 	br	7f84 <__umoddi3+0x5c>
    8460:	01400204 	movi	r5,8
    8464:	2805883a 	mov	r2,r5
    8468:	003f0106 	br	8070 <__umoddi3+0x148>
    846c:	01400204 	movi	r5,8
    8470:	2805883a 	mov	r2,r5
    8474:	003f1206 	br	80c0 <__umoddi3+0x198>
    8478:	01400604 	movi	r5,24
    847c:	2805883a 	mov	r2,r5
    8480:	003f0f06 	br	80c0 <__umoddi3+0x198>
    8484:	01400604 	movi	r5,24
    8488:	2805883a 	mov	r2,r5
    848c:	003ef806 	br	8070 <__umoddi3+0x148>
    8490:	3c7fb82e 	bgeu	r7,r17,8374 <__umoddi3+0x44c>
    8494:	843fffc4 	addi	r16,r16,-1
    8498:	3dcf883a 	add	r7,r7,r23
    849c:	003fb506 	br	8374 <__umoddi3+0x44c>
    84a0:	147fa22e 	bgeu	r2,r17,832c <__umoddi3+0x404>
    84a4:	e73fffc4 	addi	fp,fp,-1
    84a8:	15c5883a 	add	r2,r2,r23
    84ac:	003f9f06 	br	832c <__umoddi3+0x404>
    84b0:	147f692e 	bgeu	r2,r17,8258 <__umoddi3+0x330>
    84b4:	1405883a 	add	r2,r2,r16
    84b8:	003f6706 	br	8258 <__umoddi3+0x330>
    84bc:	1405883a 	add	r2,r2,r16
    84c0:	003f1906 	br	8128 <__umoddi3+0x200>
    84c4:	1405883a 	add	r2,r2,r16
    84c8:	003ec906 	br	7ff0 <__umoddi3+0xc8>
    84cc:	b13fcc36 	bltu	r22,r4,8400 <__umoddi3+0x4d8>
    84d0:	000b883a 	mov	r5,zero
    84d4:	003fd106 	br	841c <__umoddi3+0x4f4>

000084d8 <_fpadd_parts>:
    84d8:	defff804 	addi	sp,sp,-32
    84dc:	dcc00315 	stw	r19,12(sp)
    84e0:	2027883a 	mov	r19,r4
    84e4:	21000017 	ldw	r4,0(r4)
    84e8:	00c00044 	movi	r3,1
    84ec:	dd400515 	stw	r21,20(sp)
    84f0:	dd000415 	stw	r20,16(sp)
    84f4:	ddc00715 	stw	r23,28(sp)
    84f8:	dd800615 	stw	r22,24(sp)
    84fc:	dc800215 	stw	r18,8(sp)
    8500:	dc400115 	stw	r17,4(sp)
    8504:	dc000015 	stw	r16,0(sp)
    8508:	282b883a 	mov	r21,r5
    850c:	3029883a 	mov	r20,r6
    8510:	1900632e 	bgeu	r3,r4,86a0 <_fpadd_parts+0x1c8>
    8514:	28800017 	ldw	r2,0(r5)
    8518:	1880812e 	bgeu	r3,r2,8720 <_fpadd_parts+0x248>
    851c:	00c00104 	movi	r3,4
    8520:	20c0dc26 	beq	r4,r3,8894 <_fpadd_parts+0x3bc>
    8524:	10c07e26 	beq	r2,r3,8720 <_fpadd_parts+0x248>
    8528:	00c00084 	movi	r3,2
    852c:	10c06726 	beq	r2,r3,86cc <_fpadd_parts+0x1f4>
    8530:	20c07b26 	beq	r4,r3,8720 <_fpadd_parts+0x248>
    8534:	9dc00217 	ldw	r23,8(r19)
    8538:	28c00217 	ldw	r3,8(r5)
    853c:	9c400317 	ldw	r17,12(r19)
    8540:	2bc00317 	ldw	r15,12(r5)
    8544:	b8cdc83a 	sub	r6,r23,r3
    8548:	9c800417 	ldw	r18,16(r19)
    854c:	2c000417 	ldw	r16,16(r5)
    8550:	3009883a 	mov	r4,r6
    8554:	30009716 	blt	r6,zero,87b4 <_fpadd_parts+0x2dc>
    8558:	00800fc4 	movi	r2,63
    855c:	11806b16 	blt	r2,r6,870c <_fpadd_parts+0x234>
    8560:	0100a40e 	bge	zero,r4,87f4 <_fpadd_parts+0x31c>
    8564:	35bff804 	addi	r22,r6,-32
    8568:	b000bc16 	blt	r22,zero,885c <_fpadd_parts+0x384>
    856c:	8596d83a 	srl	r11,r16,r22
    8570:	0019883a 	mov	r12,zero
    8574:	0013883a 	mov	r9,zero
    8578:	01000044 	movi	r4,1
    857c:	0015883a 	mov	r10,zero
    8580:	b000be16 	blt	r22,zero,887c <_fpadd_parts+0x3a4>
    8584:	2590983a 	sll	r8,r4,r22
    8588:	000f883a 	mov	r7,zero
    858c:	00bfffc4 	movi	r2,-1
    8590:	3889883a 	add	r4,r7,r2
    8594:	408b883a 	add	r5,r8,r2
    8598:	21cd803a 	cmpltu	r6,r4,r7
    859c:	314b883a 	add	r5,r6,r5
    85a0:	7904703a 	and	r2,r15,r4
    85a4:	8146703a 	and	r3,r16,r5
    85a8:	10c4b03a 	or	r2,r2,r3
    85ac:	10000226 	beq	r2,zero,85b8 <_fpadd_parts+0xe0>
    85b0:	02400044 	movi	r9,1
    85b4:	0015883a 	mov	r10,zero
    85b8:	5a5eb03a 	or	r15,r11,r9
    85bc:	62a0b03a 	or	r16,r12,r10
    85c0:	99400117 	ldw	r5,4(r19)
    85c4:	a8800117 	ldw	r2,4(r21)
    85c8:	28806e26 	beq	r5,r2,8784 <_fpadd_parts+0x2ac>
    85cc:	28006626 	beq	r5,zero,8768 <_fpadd_parts+0x290>
    85d0:	7c45c83a 	sub	r2,r15,r17
    85d4:	7889803a 	cmpltu	r4,r15,r2
    85d8:	8487c83a 	sub	r3,r16,r18
    85dc:	1909c83a 	sub	r4,r3,r4
    85e0:	100d883a 	mov	r6,r2
    85e4:	200f883a 	mov	r7,r4
    85e8:	38007716 	blt	r7,zero,87c8 <_fpadd_parts+0x2f0>
    85ec:	a5c00215 	stw	r23,8(r20)
    85f0:	a1c00415 	stw	r7,16(r20)
    85f4:	a0000115 	stw	zero,4(r20)
    85f8:	a1800315 	stw	r6,12(r20)
    85fc:	a2000317 	ldw	r8,12(r20)
    8600:	a2400417 	ldw	r9,16(r20)
    8604:	00bfffc4 	movi	r2,-1
    8608:	408b883a 	add	r5,r8,r2
    860c:	2a09803a 	cmpltu	r4,r5,r8
    8610:	488d883a 	add	r6,r9,r2
    8614:	01c40034 	movhi	r7,4096
    8618:	39ffffc4 	addi	r7,r7,-1
    861c:	218d883a 	add	r6,r4,r6
    8620:	39801736 	bltu	r7,r6,8680 <_fpadd_parts+0x1a8>
    8624:	31c06526 	beq	r6,r7,87bc <_fpadd_parts+0x2e4>
    8628:	a3000217 	ldw	r12,8(r20)
    862c:	4209883a 	add	r4,r8,r8
    8630:	00bfffc4 	movi	r2,-1
    8634:	220f803a 	cmpltu	r7,r4,r8
    8638:	4a4b883a 	add	r5,r9,r9
    863c:	394f883a 	add	r7,r7,r5
    8640:	2095883a 	add	r10,r4,r2
    8644:	3897883a 	add	r11,r7,r2
    8648:	510d803a 	cmpltu	r6,r10,r4
    864c:	6099883a 	add	r12,r12,r2
    8650:	32d7883a 	add	r11,r6,r11
    8654:	00840034 	movhi	r2,4096
    8658:	10bfffc4 	addi	r2,r2,-1
    865c:	2011883a 	mov	r8,r4
    8660:	3813883a 	mov	r9,r7
    8664:	a1000315 	stw	r4,12(r20)
    8668:	a1c00415 	stw	r7,16(r20)
    866c:	a3000215 	stw	r12,8(r20)
    8670:	12c00336 	bltu	r2,r11,8680 <_fpadd_parts+0x1a8>
    8674:	58bfed1e 	bne	r11,r2,862c <_fpadd_parts+0x154>
    8678:	00bfff84 	movi	r2,-2
    867c:	12bfeb2e 	bgeu	r2,r10,862c <_fpadd_parts+0x154>
    8680:	a2800417 	ldw	r10,16(r20)
    8684:	008000c4 	movi	r2,3
    8688:	00c80034 	movhi	r3,8192
    868c:	18ffffc4 	addi	r3,r3,-1
    8690:	a2400317 	ldw	r9,12(r20)
    8694:	a0800015 	stw	r2,0(r20)
    8698:	1a802336 	bltu	r3,r10,8728 <_fpadd_parts+0x250>
    869c:	a027883a 	mov	r19,r20
    86a0:	9805883a 	mov	r2,r19
    86a4:	ddc00717 	ldw	r23,28(sp)
    86a8:	dd800617 	ldw	r22,24(sp)
    86ac:	dd400517 	ldw	r21,20(sp)
    86b0:	dd000417 	ldw	r20,16(sp)
    86b4:	dcc00317 	ldw	r19,12(sp)
    86b8:	dc800217 	ldw	r18,8(sp)
    86bc:	dc400117 	ldw	r17,4(sp)
    86c0:	dc000017 	ldw	r16,0(sp)
    86c4:	dec00804 	addi	sp,sp,32
    86c8:	f800283a 	ret
    86cc:	20fff41e 	bne	r4,r3,86a0 <_fpadd_parts+0x1c8>
    86d0:	31000015 	stw	r4,0(r6)
    86d4:	98800117 	ldw	r2,4(r19)
    86d8:	30800115 	stw	r2,4(r6)
    86dc:	98c00217 	ldw	r3,8(r19)
    86e0:	30c00215 	stw	r3,8(r6)
    86e4:	98800317 	ldw	r2,12(r19)
    86e8:	30800315 	stw	r2,12(r6)
    86ec:	98c00417 	ldw	r3,16(r19)
    86f0:	30c00415 	stw	r3,16(r6)
    86f4:	98800117 	ldw	r2,4(r19)
    86f8:	28c00117 	ldw	r3,4(r5)
    86fc:	3027883a 	mov	r19,r6
    8700:	10c4703a 	and	r2,r2,r3
    8704:	30800115 	stw	r2,4(r6)
    8708:	003fe506 	br	86a0 <_fpadd_parts+0x1c8>
    870c:	1dc02616 	blt	r3,r23,87a8 <_fpadd_parts+0x2d0>
    8710:	0023883a 	mov	r17,zero
    8714:	182f883a 	mov	r23,r3
    8718:	0025883a 	mov	r18,zero
    871c:	003fa806 	br	85c0 <_fpadd_parts+0xe8>
    8720:	a827883a 	mov	r19,r21
    8724:	003fde06 	br	86a0 <_fpadd_parts+0x1c8>
    8728:	01800044 	movi	r6,1
    872c:	500497fa 	slli	r2,r10,31
    8730:	4808d07a 	srli	r4,r9,1
    8734:	518ad83a 	srl	r5,r10,r6
    8738:	a2000217 	ldw	r8,8(r20)
    873c:	1108b03a 	or	r4,r2,r4
    8740:	0007883a 	mov	r3,zero
    8744:	4984703a 	and	r2,r9,r6
    8748:	208cb03a 	or	r6,r4,r2
    874c:	28ceb03a 	or	r7,r5,r3
    8750:	42000044 	addi	r8,r8,1
    8754:	a027883a 	mov	r19,r20
    8758:	a1c00415 	stw	r7,16(r20)
    875c:	a2000215 	stw	r8,8(r20)
    8760:	a1800315 	stw	r6,12(r20)
    8764:	003fce06 	br	86a0 <_fpadd_parts+0x1c8>
    8768:	8bc5c83a 	sub	r2,r17,r15
    876c:	8889803a 	cmpltu	r4,r17,r2
    8770:	9407c83a 	sub	r3,r18,r16
    8774:	1909c83a 	sub	r4,r3,r4
    8778:	100d883a 	mov	r6,r2
    877c:	200f883a 	mov	r7,r4
    8780:	003f9906 	br	85e8 <_fpadd_parts+0x110>
    8784:	7c45883a 	add	r2,r15,r17
    8788:	13c9803a 	cmpltu	r4,r2,r15
    878c:	8487883a 	add	r3,r16,r18
    8790:	20c9883a 	add	r4,r4,r3
    8794:	a1400115 	stw	r5,4(r20)
    8798:	a5c00215 	stw	r23,8(r20)
    879c:	a0800315 	stw	r2,12(r20)
    87a0:	a1000415 	stw	r4,16(r20)
    87a4:	003fb606 	br	8680 <_fpadd_parts+0x1a8>
    87a8:	001f883a 	mov	r15,zero
    87ac:	0021883a 	mov	r16,zero
    87b0:	003f8306 	br	85c0 <_fpadd_parts+0xe8>
    87b4:	018dc83a 	sub	r6,zero,r6
    87b8:	003f6706 	br	8558 <_fpadd_parts+0x80>
    87bc:	00bfff84 	movi	r2,-2
    87c0:	117faf36 	bltu	r2,r5,8680 <_fpadd_parts+0x1a8>
    87c4:	003f9806 	br	8628 <_fpadd_parts+0x150>
    87c8:	0005883a 	mov	r2,zero
    87cc:	1189c83a 	sub	r4,r2,r6
    87d0:	1105803a 	cmpltu	r2,r2,r4
    87d4:	01cbc83a 	sub	r5,zero,r7
    87d8:	2885c83a 	sub	r2,r5,r2
    87dc:	01800044 	movi	r6,1
    87e0:	a1800115 	stw	r6,4(r20)
    87e4:	a5c00215 	stw	r23,8(r20)
    87e8:	a1000315 	stw	r4,12(r20)
    87ec:	a0800415 	stw	r2,16(r20)
    87f0:	003f8206 	br	85fc <_fpadd_parts+0x124>
    87f4:	203f7226 	beq	r4,zero,85c0 <_fpadd_parts+0xe8>
    87f8:	35bff804 	addi	r22,r6,-32
    87fc:	b9af883a 	add	r23,r23,r6
    8800:	b0003116 	blt	r22,zero,88c8 <_fpadd_parts+0x3f0>
    8804:	959ad83a 	srl	r13,r18,r22
    8808:	001d883a 	mov	r14,zero
    880c:	000f883a 	mov	r7,zero
    8810:	01000044 	movi	r4,1
    8814:	0011883a 	mov	r8,zero
    8818:	b0002516 	blt	r22,zero,88b0 <_fpadd_parts+0x3d8>
    881c:	2594983a 	sll	r10,r4,r22
    8820:	0013883a 	mov	r9,zero
    8824:	00bfffc4 	movi	r2,-1
    8828:	4889883a 	add	r4,r9,r2
    882c:	508b883a 	add	r5,r10,r2
    8830:	224d803a 	cmpltu	r6,r4,r9
    8834:	314b883a 	add	r5,r6,r5
    8838:	8904703a 	and	r2,r17,r4
    883c:	9146703a 	and	r3,r18,r5
    8840:	10c4b03a 	or	r2,r2,r3
    8844:	10000226 	beq	r2,zero,8850 <_fpadd_parts+0x378>
    8848:	01c00044 	movi	r7,1
    884c:	0011883a 	mov	r8,zero
    8850:	69e2b03a 	or	r17,r13,r7
    8854:	7224b03a 	or	r18,r14,r8
    8858:	003f5906 	br	85c0 <_fpadd_parts+0xe8>
    885c:	8407883a 	add	r3,r16,r16
    8860:	008007c4 	movi	r2,31
    8864:	1185c83a 	sub	r2,r2,r6
    8868:	1886983a 	sll	r3,r3,r2
    886c:	7996d83a 	srl	r11,r15,r6
    8870:	8198d83a 	srl	r12,r16,r6
    8874:	1ad6b03a 	or	r11,r3,r11
    8878:	003f3e06 	br	8574 <_fpadd_parts+0x9c>
    887c:	2006d07a 	srli	r3,r4,1
    8880:	008007c4 	movi	r2,31
    8884:	1185c83a 	sub	r2,r2,r6
    8888:	1890d83a 	srl	r8,r3,r2
    888c:	218e983a 	sll	r7,r4,r6
    8890:	003f3e06 	br	858c <_fpadd_parts+0xb4>
    8894:	113f821e 	bne	r2,r4,86a0 <_fpadd_parts+0x1c8>
    8898:	28c00117 	ldw	r3,4(r5)
    889c:	98800117 	ldw	r2,4(r19)
    88a0:	10ff7f26 	beq	r2,r3,86a0 <_fpadd_parts+0x1c8>
    88a4:	04c000f4 	movhi	r19,3
    88a8:	9cc08f04 	addi	r19,r19,572
    88ac:	003f7c06 	br	86a0 <_fpadd_parts+0x1c8>
    88b0:	2006d07a 	srli	r3,r4,1
    88b4:	008007c4 	movi	r2,31
    88b8:	1185c83a 	sub	r2,r2,r6
    88bc:	1894d83a 	srl	r10,r3,r2
    88c0:	2192983a 	sll	r9,r4,r6
    88c4:	003fd706 	br	8824 <_fpadd_parts+0x34c>
    88c8:	9487883a 	add	r3,r18,r18
    88cc:	008007c4 	movi	r2,31
    88d0:	1185c83a 	sub	r2,r2,r6
    88d4:	1886983a 	sll	r3,r3,r2
    88d8:	899ad83a 	srl	r13,r17,r6
    88dc:	919cd83a 	srl	r14,r18,r6
    88e0:	1b5ab03a 	or	r13,r3,r13
    88e4:	003fc906 	br	880c <_fpadd_parts+0x334>

000088e8 <__subdf3>:
    88e8:	deffea04 	addi	sp,sp,-88
    88ec:	dcc01415 	stw	r19,80(sp)
    88f0:	dcc00404 	addi	r19,sp,16
    88f4:	2011883a 	mov	r8,r4
    88f8:	2813883a 	mov	r9,r5
    88fc:	dc401315 	stw	r17,76(sp)
    8900:	d809883a 	mov	r4,sp
    8904:	980b883a 	mov	r5,r19
    8908:	dc400904 	addi	r17,sp,36
    890c:	dfc01515 	stw	ra,84(sp)
    8910:	da400115 	stw	r9,4(sp)
    8914:	d9c00315 	stw	r7,12(sp)
    8918:	da000015 	stw	r8,0(sp)
    891c:	d9800215 	stw	r6,8(sp)
    8920:	0009b7c0 	call	9b7c <__unpack_d>
    8924:	d9000204 	addi	r4,sp,8
    8928:	880b883a 	mov	r5,r17
    892c:	0009b7c0 	call	9b7c <__unpack_d>
    8930:	d8800a17 	ldw	r2,40(sp)
    8934:	880b883a 	mov	r5,r17
    8938:	9809883a 	mov	r4,r19
    893c:	d9800e04 	addi	r6,sp,56
    8940:	1080005c 	xori	r2,r2,1
    8944:	d8800a15 	stw	r2,40(sp)
    8948:	00084d80 	call	84d8 <_fpadd_parts>
    894c:	1009883a 	mov	r4,r2
    8950:	00098680 	call	9868 <__pack_d>
    8954:	dfc01517 	ldw	ra,84(sp)
    8958:	dcc01417 	ldw	r19,80(sp)
    895c:	dc401317 	ldw	r17,76(sp)
    8960:	dec01604 	addi	sp,sp,88
    8964:	f800283a 	ret

00008968 <__adddf3>:
    8968:	deffea04 	addi	sp,sp,-88
    896c:	dcc01415 	stw	r19,80(sp)
    8970:	dcc00404 	addi	r19,sp,16
    8974:	2011883a 	mov	r8,r4
    8978:	2813883a 	mov	r9,r5
    897c:	dc401315 	stw	r17,76(sp)
    8980:	d809883a 	mov	r4,sp
    8984:	980b883a 	mov	r5,r19
    8988:	dc400904 	addi	r17,sp,36
    898c:	dfc01515 	stw	ra,84(sp)
    8990:	da400115 	stw	r9,4(sp)
    8994:	d9c00315 	stw	r7,12(sp)
    8998:	da000015 	stw	r8,0(sp)
    899c:	d9800215 	stw	r6,8(sp)
    89a0:	0009b7c0 	call	9b7c <__unpack_d>
    89a4:	d9000204 	addi	r4,sp,8
    89a8:	880b883a 	mov	r5,r17
    89ac:	0009b7c0 	call	9b7c <__unpack_d>
    89b0:	d9800e04 	addi	r6,sp,56
    89b4:	9809883a 	mov	r4,r19
    89b8:	880b883a 	mov	r5,r17
    89bc:	00084d80 	call	84d8 <_fpadd_parts>
    89c0:	1009883a 	mov	r4,r2
    89c4:	00098680 	call	9868 <__pack_d>
    89c8:	dfc01517 	ldw	ra,84(sp)
    89cc:	dcc01417 	ldw	r19,80(sp)
    89d0:	dc401317 	ldw	r17,76(sp)
    89d4:	dec01604 	addi	sp,sp,88
    89d8:	f800283a 	ret

000089dc <__muldf3>:
    89dc:	deffe004 	addi	sp,sp,-128
    89e0:	dc401815 	stw	r17,96(sp)
    89e4:	dc400404 	addi	r17,sp,16
    89e8:	2011883a 	mov	r8,r4
    89ec:	2813883a 	mov	r9,r5
    89f0:	dc001715 	stw	r16,92(sp)
    89f4:	d809883a 	mov	r4,sp
    89f8:	880b883a 	mov	r5,r17
    89fc:	dc000904 	addi	r16,sp,36
    8a00:	dfc01f15 	stw	ra,124(sp)
    8a04:	da400115 	stw	r9,4(sp)
    8a08:	d9c00315 	stw	r7,12(sp)
    8a0c:	da000015 	stw	r8,0(sp)
    8a10:	d9800215 	stw	r6,8(sp)
    8a14:	ddc01e15 	stw	r23,120(sp)
    8a18:	dd801d15 	stw	r22,116(sp)
    8a1c:	dd401c15 	stw	r21,112(sp)
    8a20:	dd001b15 	stw	r20,108(sp)
    8a24:	dcc01a15 	stw	r19,104(sp)
    8a28:	dc801915 	stw	r18,100(sp)
    8a2c:	0009b7c0 	call	9b7c <__unpack_d>
    8a30:	d9000204 	addi	r4,sp,8
    8a34:	800b883a 	mov	r5,r16
    8a38:	0009b7c0 	call	9b7c <__unpack_d>
    8a3c:	d9000417 	ldw	r4,16(sp)
    8a40:	00800044 	movi	r2,1
    8a44:	1100102e 	bgeu	r2,r4,8a88 <__muldf3+0xac>
    8a48:	d8c00917 	ldw	r3,36(sp)
    8a4c:	10c0062e 	bgeu	r2,r3,8a68 <__muldf3+0x8c>
    8a50:	00800104 	movi	r2,4
    8a54:	20800a26 	beq	r4,r2,8a80 <__muldf3+0xa4>
    8a58:	1880cc26 	beq	r3,r2,8d8c <__muldf3+0x3b0>
    8a5c:	00800084 	movi	r2,2
    8a60:	20800926 	beq	r4,r2,8a88 <__muldf3+0xac>
    8a64:	1880191e 	bne	r3,r2,8acc <__muldf3+0xf0>
    8a68:	d8c00a17 	ldw	r3,40(sp)
    8a6c:	d8800517 	ldw	r2,20(sp)
    8a70:	8009883a 	mov	r4,r16
    8a74:	10c4c03a 	cmpne	r2,r2,r3
    8a78:	d8800a15 	stw	r2,40(sp)
    8a7c:	00000706 	br	8a9c <__muldf3+0xc0>
    8a80:	00800084 	movi	r2,2
    8a84:	1880c326 	beq	r3,r2,8d94 <__muldf3+0x3b8>
    8a88:	d8800517 	ldw	r2,20(sp)
    8a8c:	d8c00a17 	ldw	r3,40(sp)
    8a90:	8809883a 	mov	r4,r17
    8a94:	10c4c03a 	cmpne	r2,r2,r3
    8a98:	d8800515 	stw	r2,20(sp)
    8a9c:	00098680 	call	9868 <__pack_d>
    8aa0:	dfc01f17 	ldw	ra,124(sp)
    8aa4:	ddc01e17 	ldw	r23,120(sp)
    8aa8:	dd801d17 	ldw	r22,116(sp)
    8aac:	dd401c17 	ldw	r21,112(sp)
    8ab0:	dd001b17 	ldw	r20,108(sp)
    8ab4:	dcc01a17 	ldw	r19,104(sp)
    8ab8:	dc801917 	ldw	r18,100(sp)
    8abc:	dc401817 	ldw	r17,96(sp)
    8ac0:	dc001717 	ldw	r16,92(sp)
    8ac4:	dec02004 	addi	sp,sp,128
    8ac8:	f800283a 	ret
    8acc:	dd800717 	ldw	r22,28(sp)
    8ad0:	dc800c17 	ldw	r18,48(sp)
    8ad4:	002b883a 	mov	r21,zero
    8ad8:	0023883a 	mov	r17,zero
    8adc:	a80b883a 	mov	r5,r21
    8ae0:	b00d883a 	mov	r6,r22
    8ae4:	880f883a 	mov	r7,r17
    8ae8:	ddc00817 	ldw	r23,32(sp)
    8aec:	dcc00d17 	ldw	r19,52(sp)
    8af0:	9009883a 	mov	r4,r18
    8af4:	00097500 	call	9750 <__muldi3>
    8af8:	001b883a 	mov	r13,zero
    8afc:	680f883a 	mov	r7,r13
    8b00:	b009883a 	mov	r4,r22
    8b04:	000b883a 	mov	r5,zero
    8b08:	980d883a 	mov	r6,r19
    8b0c:	b82d883a 	mov	r22,r23
    8b10:	002f883a 	mov	r23,zero
    8b14:	db401615 	stw	r13,88(sp)
    8b18:	d8801315 	stw	r2,76(sp)
    8b1c:	d8c01415 	stw	r3,80(sp)
    8b20:	dcc01515 	stw	r19,84(sp)
    8b24:	00097500 	call	9750 <__muldi3>
    8b28:	b00d883a 	mov	r6,r22
    8b2c:	000b883a 	mov	r5,zero
    8b30:	9009883a 	mov	r4,r18
    8b34:	b80f883a 	mov	r7,r23
    8b38:	1021883a 	mov	r16,r2
    8b3c:	1823883a 	mov	r17,r3
    8b40:	00097500 	call	9750 <__muldi3>
    8b44:	8085883a 	add	r2,r16,r2
    8b48:	140d803a 	cmpltu	r6,r2,r16
    8b4c:	88c7883a 	add	r3,r17,r3
    8b50:	30cd883a 	add	r6,r6,r3
    8b54:	1029883a 	mov	r20,r2
    8b58:	302b883a 	mov	r21,r6
    8b5c:	da801317 	ldw	r10,76(sp)
    8b60:	dac01417 	ldw	r11,80(sp)
    8b64:	db001517 	ldw	r12,84(sp)
    8b68:	db401617 	ldw	r13,88(sp)
    8b6c:	3440612e 	bgeu	r6,r17,8cf4 <__muldf3+0x318>
    8b70:	0009883a 	mov	r4,zero
    8b74:	5105883a 	add	r2,r10,r4
    8b78:	128d803a 	cmpltu	r6,r2,r10
    8b7c:	5d07883a 	add	r3,r11,r20
    8b80:	30cd883a 	add	r6,r6,r3
    8b84:	0021883a 	mov	r16,zero
    8b88:	04400044 	movi	r17,1
    8b8c:	1025883a 	mov	r18,r2
    8b90:	3027883a 	mov	r19,r6
    8b94:	32c06236 	bltu	r6,r11,8d20 <__muldf3+0x344>
    8b98:	59807a26 	beq	r11,r6,8d84 <__muldf3+0x3a8>
    8b9c:	680b883a 	mov	r5,r13
    8ba0:	b80f883a 	mov	r7,r23
    8ba4:	6009883a 	mov	r4,r12
    8ba8:	b00d883a 	mov	r6,r22
    8bac:	00097500 	call	9750 <__muldi3>
    8bb0:	1009883a 	mov	r4,r2
    8bb4:	000f883a 	mov	r7,zero
    8bb8:	1545883a 	add	r2,r2,r21
    8bbc:	1111803a 	cmpltu	r8,r2,r4
    8bc0:	19c7883a 	add	r3,r3,r7
    8bc4:	40c7883a 	add	r3,r8,r3
    8bc8:	88cb883a 	add	r5,r17,r3
    8bcc:	d8c00617 	ldw	r3,24(sp)
    8bd0:	8089883a 	add	r4,r16,r2
    8bd4:	d8800b17 	ldw	r2,44(sp)
    8bd8:	18c00104 	addi	r3,r3,4
    8bdc:	240d803a 	cmpltu	r6,r4,r16
    8be0:	10c7883a 	add	r3,r2,r3
    8be4:	2013883a 	mov	r9,r4
    8be8:	d8800a17 	ldw	r2,40(sp)
    8bec:	d9000517 	ldw	r4,20(sp)
    8bf0:	314d883a 	add	r6,r6,r5
    8bf4:	3015883a 	mov	r10,r6
    8bf8:	2088c03a 	cmpne	r4,r4,r2
    8bfc:	00880034 	movhi	r2,8192
    8c00:	10bfffc4 	addi	r2,r2,-1
    8c04:	d9000f15 	stw	r4,60(sp)
    8c08:	d8c01015 	stw	r3,64(sp)
    8c0c:	1180162e 	bgeu	r2,r6,8c68 <__muldf3+0x28c>
    8c10:	1811883a 	mov	r8,r3
    8c14:	101f883a 	mov	r15,r2
    8c18:	980497fa 	slli	r2,r19,31
    8c1c:	9016d07a 	srli	r11,r18,1
    8c20:	500697fa 	slli	r3,r10,31
    8c24:	480cd07a 	srli	r6,r9,1
    8c28:	500ed07a 	srli	r7,r10,1
    8c2c:	12d6b03a 	or	r11,r2,r11
    8c30:	00800044 	movi	r2,1
    8c34:	198cb03a 	or	r6,r3,r6
    8c38:	4888703a 	and	r4,r9,r2
    8c3c:	9818d07a 	srli	r12,r19,1
    8c40:	001b883a 	mov	r13,zero
    8c44:	03a00034 	movhi	r14,32768
    8c48:	3013883a 	mov	r9,r6
    8c4c:	3815883a 	mov	r10,r7
    8c50:	4091883a 	add	r8,r8,r2
    8c54:	20000226 	beq	r4,zero,8c60 <__muldf3+0x284>
    8c58:	5b64b03a 	or	r18,r11,r13
    8c5c:	63a6b03a 	or	r19,r12,r14
    8c60:	7abfed36 	bltu	r15,r10,8c18 <__muldf3+0x23c>
    8c64:	da001015 	stw	r8,64(sp)
    8c68:	00840034 	movhi	r2,4096
    8c6c:	10bfffc4 	addi	r2,r2,-1
    8c70:	12801436 	bltu	r2,r10,8cc4 <__muldf3+0x2e8>
    8c74:	da001017 	ldw	r8,64(sp)
    8c78:	101f883a 	mov	r15,r2
    8c7c:	4a45883a 	add	r2,r9,r9
    8c80:	124d803a 	cmpltu	r6,r2,r9
    8c84:	5287883a 	add	r3,r10,r10
    8c88:	9497883a 	add	r11,r18,r18
    8c8c:	5c8f803a 	cmpltu	r7,r11,r18
    8c90:	9cd9883a 	add	r12,r19,r19
    8c94:	01000044 	movi	r4,1
    8c98:	30cd883a 	add	r6,r6,r3
    8c9c:	3b0f883a 	add	r7,r7,r12
    8ca0:	423fffc4 	addi	r8,r8,-1
    8ca4:	1013883a 	mov	r9,r2
    8ca8:	3015883a 	mov	r10,r6
    8cac:	111ab03a 	or	r13,r2,r4
    8cb0:	98003016 	blt	r19,zero,8d74 <__muldf3+0x398>
    8cb4:	5825883a 	mov	r18,r11
    8cb8:	3827883a 	mov	r19,r7
    8cbc:	7abfef2e 	bgeu	r15,r10,8c7c <__muldf3+0x2a0>
    8cc0:	da001015 	stw	r8,64(sp)
    8cc4:	00803fc4 	movi	r2,255
    8cc8:	488e703a 	and	r7,r9,r2
    8ccc:	00802004 	movi	r2,128
    8cd0:	0007883a 	mov	r3,zero
    8cd4:	0011883a 	mov	r8,zero
    8cd8:	38801826 	beq	r7,r2,8d3c <__muldf3+0x360>
    8cdc:	008000c4 	movi	r2,3
    8ce0:	d9000e04 	addi	r4,sp,56
    8ce4:	da801215 	stw	r10,72(sp)
    8ce8:	d8800e15 	stw	r2,56(sp)
    8cec:	da401115 	stw	r9,68(sp)
    8cf0:	003f6a06 	br	8a9c <__muldf3+0xc0>
    8cf4:	89802126 	beq	r17,r6,8d7c <__muldf3+0x3a0>
    8cf8:	0009883a 	mov	r4,zero
    8cfc:	5105883a 	add	r2,r10,r4
    8d00:	128d803a 	cmpltu	r6,r2,r10
    8d04:	5d07883a 	add	r3,r11,r20
    8d08:	30cd883a 	add	r6,r6,r3
    8d0c:	0021883a 	mov	r16,zero
    8d10:	0023883a 	mov	r17,zero
    8d14:	1025883a 	mov	r18,r2
    8d18:	3027883a 	mov	r19,r6
    8d1c:	32ff9e2e 	bgeu	r6,r11,8b98 <__muldf3+0x1bc>
    8d20:	00800044 	movi	r2,1
    8d24:	8089883a 	add	r4,r16,r2
    8d28:	240d803a 	cmpltu	r6,r4,r16
    8d2c:	344d883a 	add	r6,r6,r17
    8d30:	2021883a 	mov	r16,r4
    8d34:	3023883a 	mov	r17,r6
    8d38:	003f9806 	br	8b9c <__muldf3+0x1c0>
    8d3c:	403fe71e 	bne	r8,zero,8cdc <__muldf3+0x300>
    8d40:	01004004 	movi	r4,256
    8d44:	4904703a 	and	r2,r9,r4
    8d48:	10c4b03a 	or	r2,r2,r3
    8d4c:	103fe31e 	bne	r2,zero,8cdc <__muldf3+0x300>
    8d50:	94c4b03a 	or	r2,r18,r19
    8d54:	103fe126 	beq	r2,zero,8cdc <__muldf3+0x300>
    8d58:	49c5883a 	add	r2,r9,r7
    8d5c:	1251803a 	cmpltu	r8,r2,r9
    8d60:	4291883a 	add	r8,r8,r10
    8d64:	013fc004 	movi	r4,-256
    8d68:	1112703a 	and	r9,r2,r4
    8d6c:	4015883a 	mov	r10,r8
    8d70:	003fda06 	br	8cdc <__muldf3+0x300>
    8d74:	6813883a 	mov	r9,r13
    8d78:	003fce06 	br	8cb4 <__muldf3+0x2d8>
    8d7c:	143f7c36 	bltu	r2,r16,8b70 <__muldf3+0x194>
    8d80:	003fdd06 	br	8cf8 <__muldf3+0x31c>
    8d84:	12bf852e 	bgeu	r2,r10,8b9c <__muldf3+0x1c0>
    8d88:	003fe506 	br	8d20 <__muldf3+0x344>
    8d8c:	00800084 	movi	r2,2
    8d90:	20bf351e 	bne	r4,r2,8a68 <__muldf3+0x8c>
    8d94:	010000f4 	movhi	r4,3
    8d98:	21008f04 	addi	r4,r4,572
    8d9c:	003f3f06 	br	8a9c <__muldf3+0xc0>

00008da0 <__divdf3>:
    8da0:	deffed04 	addi	sp,sp,-76
    8da4:	dcc01115 	stw	r19,68(sp)
    8da8:	dcc00404 	addi	r19,sp,16
    8dac:	2011883a 	mov	r8,r4
    8db0:	2813883a 	mov	r9,r5
    8db4:	dc000e15 	stw	r16,56(sp)
    8db8:	d809883a 	mov	r4,sp
    8dbc:	980b883a 	mov	r5,r19
    8dc0:	dc000904 	addi	r16,sp,36
    8dc4:	dfc01215 	stw	ra,72(sp)
    8dc8:	da400115 	stw	r9,4(sp)
    8dcc:	d9c00315 	stw	r7,12(sp)
    8dd0:	da000015 	stw	r8,0(sp)
    8dd4:	d9800215 	stw	r6,8(sp)
    8dd8:	dc801015 	stw	r18,64(sp)
    8ddc:	dc400f15 	stw	r17,60(sp)
    8de0:	0009b7c0 	call	9b7c <__unpack_d>
    8de4:	d9000204 	addi	r4,sp,8
    8de8:	800b883a 	mov	r5,r16
    8dec:	0009b7c0 	call	9b7c <__unpack_d>
    8df0:	d9000417 	ldw	r4,16(sp)
    8df4:	00800044 	movi	r2,1
    8df8:	11000b2e 	bgeu	r2,r4,8e28 <__divdf3+0x88>
    8dfc:	d9400917 	ldw	r5,36(sp)
    8e00:	1140762e 	bgeu	r2,r5,8fdc <__divdf3+0x23c>
    8e04:	d8800517 	ldw	r2,20(sp)
    8e08:	d8c00a17 	ldw	r3,40(sp)
    8e0c:	01800104 	movi	r6,4
    8e10:	10c4f03a 	xor	r2,r2,r3
    8e14:	d8800515 	stw	r2,20(sp)
    8e18:	21800226 	beq	r4,r6,8e24 <__divdf3+0x84>
    8e1c:	00800084 	movi	r2,2
    8e20:	2080141e 	bne	r4,r2,8e74 <__divdf3+0xd4>
    8e24:	29000926 	beq	r5,r4,8e4c <__divdf3+0xac>
    8e28:	9809883a 	mov	r4,r19
    8e2c:	00098680 	call	9868 <__pack_d>
    8e30:	dfc01217 	ldw	ra,72(sp)
    8e34:	dcc01117 	ldw	r19,68(sp)
    8e38:	dc801017 	ldw	r18,64(sp)
    8e3c:	dc400f17 	ldw	r17,60(sp)
    8e40:	dc000e17 	ldw	r16,56(sp)
    8e44:	dec01304 	addi	sp,sp,76
    8e48:	f800283a 	ret
    8e4c:	010000f4 	movhi	r4,3
    8e50:	21008f04 	addi	r4,r4,572
    8e54:	00098680 	call	9868 <__pack_d>
    8e58:	dfc01217 	ldw	ra,72(sp)
    8e5c:	dcc01117 	ldw	r19,68(sp)
    8e60:	dc801017 	ldw	r18,64(sp)
    8e64:	dc400f17 	ldw	r17,60(sp)
    8e68:	dc000e17 	ldw	r16,56(sp)
    8e6c:	dec01304 	addi	sp,sp,76
    8e70:	f800283a 	ret
    8e74:	29805b26 	beq	r5,r6,8fe4 <__divdf3+0x244>
    8e78:	28802d26 	beq	r5,r2,8f30 <__divdf3+0x190>
    8e7c:	d8c00617 	ldw	r3,24(sp)
    8e80:	d8800b17 	ldw	r2,44(sp)
    8e84:	d9c00817 	ldw	r7,32(sp)
    8e88:	dc400d17 	ldw	r17,52(sp)
    8e8c:	188bc83a 	sub	r5,r3,r2
    8e90:	d9800717 	ldw	r6,28(sp)
    8e94:	dc000c17 	ldw	r16,48(sp)
    8e98:	d9400615 	stw	r5,24(sp)
    8e9c:	3c403836 	bltu	r7,r17,8f80 <__divdf3+0x1e0>
    8ea0:	89c03626 	beq	r17,r7,8f7c <__divdf3+0x1dc>
    8ea4:	0015883a 	mov	r10,zero
    8ea8:	001d883a 	mov	r14,zero
    8eac:	02c40034 	movhi	r11,4096
    8eb0:	001f883a 	mov	r15,zero
    8eb4:	003f883a 	mov	ra,zero
    8eb8:	04800f44 	movi	r18,61
    8ebc:	00000f06 	br	8efc <__divdf3+0x15c>
    8ec0:	601d883a 	mov	r14,r12
    8ec4:	681f883a 	mov	r15,r13
    8ec8:	400d883a 	mov	r6,r8
    8ecc:	100f883a 	mov	r7,r2
    8ed0:	3191883a 	add	r8,r6,r6
    8ed4:	5808d07a 	srli	r4,r11,1
    8ed8:	4185803a 	cmpltu	r2,r8,r6
    8edc:	39d3883a 	add	r9,r7,r7
    8ee0:	28c6b03a 	or	r3,r5,r3
    8ee4:	1245883a 	add	r2,r2,r9
    8ee8:	1815883a 	mov	r10,r3
    8eec:	2017883a 	mov	r11,r4
    8ef0:	400d883a 	mov	r6,r8
    8ef4:	100f883a 	mov	r7,r2
    8ef8:	fc801726 	beq	ra,r18,8f58 <__divdf3+0x1b8>
    8efc:	580a97fa 	slli	r5,r11,31
    8f00:	5006d07a 	srli	r3,r10,1
    8f04:	ffc00044 	addi	ra,ra,1
    8f08:	3c7ff136 	bltu	r7,r17,8ed0 <__divdf3+0x130>
    8f0c:	3411c83a 	sub	r8,r6,r16
    8f10:	3205803a 	cmpltu	r2,r6,r8
    8f14:	3c53c83a 	sub	r9,r7,r17
    8f18:	7298b03a 	or	r12,r14,r10
    8f1c:	7adab03a 	or	r13,r15,r11
    8f20:	4885c83a 	sub	r2,r9,r2
    8f24:	89ffe61e 	bne	r17,r7,8ec0 <__divdf3+0x120>
    8f28:	343fe936 	bltu	r6,r16,8ed0 <__divdf3+0x130>
    8f2c:	003fe406 	br	8ec0 <__divdf3+0x120>
    8f30:	9809883a 	mov	r4,r19
    8f34:	d9800415 	stw	r6,16(sp)
    8f38:	00098680 	call	9868 <__pack_d>
    8f3c:	dfc01217 	ldw	ra,72(sp)
    8f40:	dcc01117 	ldw	r19,68(sp)
    8f44:	dc801017 	ldw	r18,64(sp)
    8f48:	dc400f17 	ldw	r17,60(sp)
    8f4c:	dc000e17 	ldw	r16,56(sp)
    8f50:	dec01304 	addi	sp,sp,76
    8f54:	f800283a 	ret
    8f58:	00803fc4 	movi	r2,255
    8f5c:	7090703a 	and	r8,r14,r2
    8f60:	00802004 	movi	r2,128
    8f64:	0007883a 	mov	r3,zero
    8f68:	0013883a 	mov	r9,zero
    8f6c:	40800d26 	beq	r8,r2,8fa4 <__divdf3+0x204>
    8f70:	dbc00815 	stw	r15,32(sp)
    8f74:	db800715 	stw	r14,28(sp)
    8f78:	003fab06 	br	8e28 <__divdf3+0x88>
    8f7c:	343fc92e 	bgeu	r6,r16,8ea4 <__divdf3+0x104>
    8f80:	3185883a 	add	r2,r6,r6
    8f84:	1189803a 	cmpltu	r4,r2,r6
    8f88:	39c7883a 	add	r3,r7,r7
    8f8c:	20c9883a 	add	r4,r4,r3
    8f90:	297fffc4 	addi	r5,r5,-1
    8f94:	100d883a 	mov	r6,r2
    8f98:	200f883a 	mov	r7,r4
    8f9c:	d9400615 	stw	r5,24(sp)
    8fa0:	003fc006 	br	8ea4 <__divdf3+0x104>
    8fa4:	483ff21e 	bne	r9,zero,8f70 <__divdf3+0x1d0>
    8fa8:	01004004 	movi	r4,256
    8fac:	7104703a 	and	r2,r14,r4
    8fb0:	10c4b03a 	or	r2,r2,r3
    8fb4:	103fee1e 	bne	r2,zero,8f70 <__divdf3+0x1d0>
    8fb8:	31c4b03a 	or	r2,r6,r7
    8fbc:	103fec26 	beq	r2,zero,8f70 <__divdf3+0x1d0>
    8fc0:	7205883a 	add	r2,r14,r8
    8fc4:	1391803a 	cmpltu	r8,r2,r14
    8fc8:	43d1883a 	add	r8,r8,r15
    8fcc:	013fc004 	movi	r4,-256
    8fd0:	111c703a 	and	r14,r2,r4
    8fd4:	401f883a 	mov	r15,r8
    8fd8:	003fe506 	br	8f70 <__divdf3+0x1d0>
    8fdc:	8009883a 	mov	r4,r16
    8fe0:	003f9206 	br	8e2c <__divdf3+0x8c>
    8fe4:	9809883a 	mov	r4,r19
    8fe8:	d8000715 	stw	zero,28(sp)
    8fec:	d8000815 	stw	zero,32(sp)
    8ff0:	d8000615 	stw	zero,24(sp)
    8ff4:	003f8d06 	br	8e2c <__divdf3+0x8c>

00008ff8 <__eqdf2>:
    8ff8:	deffef04 	addi	sp,sp,-68
    8ffc:	dc400f15 	stw	r17,60(sp)
    9000:	dc400404 	addi	r17,sp,16
    9004:	2005883a 	mov	r2,r4
    9008:	2807883a 	mov	r3,r5
    900c:	dc000e15 	stw	r16,56(sp)
    9010:	d809883a 	mov	r4,sp
    9014:	880b883a 	mov	r5,r17
    9018:	dc000904 	addi	r16,sp,36
    901c:	d8c00115 	stw	r3,4(sp)
    9020:	d8800015 	stw	r2,0(sp)
    9024:	d9800215 	stw	r6,8(sp)
    9028:	dfc01015 	stw	ra,64(sp)
    902c:	d9c00315 	stw	r7,12(sp)
    9030:	0009b7c0 	call	9b7c <__unpack_d>
    9034:	d9000204 	addi	r4,sp,8
    9038:	800b883a 	mov	r5,r16
    903c:	0009b7c0 	call	9b7c <__unpack_d>
    9040:	d8800417 	ldw	r2,16(sp)
    9044:	00c00044 	movi	r3,1
    9048:	180d883a 	mov	r6,r3
    904c:	1880062e 	bgeu	r3,r2,9068 <__eqdf2+0x70>
    9050:	d8800917 	ldw	r2,36(sp)
    9054:	8809883a 	mov	r4,r17
    9058:	800b883a 	mov	r5,r16
    905c:	1880022e 	bgeu	r3,r2,9068 <__eqdf2+0x70>
    9060:	0009cb40 	call	9cb4 <__fpcmp_parts_d>
    9064:	100d883a 	mov	r6,r2
    9068:	3005883a 	mov	r2,r6
    906c:	dfc01017 	ldw	ra,64(sp)
    9070:	dc400f17 	ldw	r17,60(sp)
    9074:	dc000e17 	ldw	r16,56(sp)
    9078:	dec01104 	addi	sp,sp,68
    907c:	f800283a 	ret

00009080 <__nedf2>:
    9080:	deffef04 	addi	sp,sp,-68
    9084:	dc400f15 	stw	r17,60(sp)
    9088:	dc400404 	addi	r17,sp,16
    908c:	2005883a 	mov	r2,r4
    9090:	2807883a 	mov	r3,r5
    9094:	dc000e15 	stw	r16,56(sp)
    9098:	d809883a 	mov	r4,sp
    909c:	880b883a 	mov	r5,r17
    90a0:	dc000904 	addi	r16,sp,36
    90a4:	d8c00115 	stw	r3,4(sp)
    90a8:	d8800015 	stw	r2,0(sp)
    90ac:	d9800215 	stw	r6,8(sp)
    90b0:	dfc01015 	stw	ra,64(sp)
    90b4:	d9c00315 	stw	r7,12(sp)
    90b8:	0009b7c0 	call	9b7c <__unpack_d>
    90bc:	d9000204 	addi	r4,sp,8
    90c0:	800b883a 	mov	r5,r16
    90c4:	0009b7c0 	call	9b7c <__unpack_d>
    90c8:	d8800417 	ldw	r2,16(sp)
    90cc:	00c00044 	movi	r3,1
    90d0:	180d883a 	mov	r6,r3
    90d4:	1880062e 	bgeu	r3,r2,90f0 <__nedf2+0x70>
    90d8:	d8800917 	ldw	r2,36(sp)
    90dc:	8809883a 	mov	r4,r17
    90e0:	800b883a 	mov	r5,r16
    90e4:	1880022e 	bgeu	r3,r2,90f0 <__nedf2+0x70>
    90e8:	0009cb40 	call	9cb4 <__fpcmp_parts_d>
    90ec:	100d883a 	mov	r6,r2
    90f0:	3005883a 	mov	r2,r6
    90f4:	dfc01017 	ldw	ra,64(sp)
    90f8:	dc400f17 	ldw	r17,60(sp)
    90fc:	dc000e17 	ldw	r16,56(sp)
    9100:	dec01104 	addi	sp,sp,68
    9104:	f800283a 	ret

00009108 <__gtdf2>:
    9108:	deffef04 	addi	sp,sp,-68
    910c:	dc400f15 	stw	r17,60(sp)
    9110:	dc400404 	addi	r17,sp,16
    9114:	2005883a 	mov	r2,r4
    9118:	2807883a 	mov	r3,r5
    911c:	dc000e15 	stw	r16,56(sp)
    9120:	d809883a 	mov	r4,sp
    9124:	880b883a 	mov	r5,r17
    9128:	dc000904 	addi	r16,sp,36
    912c:	d8c00115 	stw	r3,4(sp)
    9130:	d8800015 	stw	r2,0(sp)
    9134:	d9800215 	stw	r6,8(sp)
    9138:	dfc01015 	stw	ra,64(sp)
    913c:	d9c00315 	stw	r7,12(sp)
    9140:	0009b7c0 	call	9b7c <__unpack_d>
    9144:	d9000204 	addi	r4,sp,8
    9148:	800b883a 	mov	r5,r16
    914c:	0009b7c0 	call	9b7c <__unpack_d>
    9150:	d8800417 	ldw	r2,16(sp)
    9154:	00c00044 	movi	r3,1
    9158:	01bfffc4 	movi	r6,-1
    915c:	1880062e 	bgeu	r3,r2,9178 <__gtdf2+0x70>
    9160:	d8800917 	ldw	r2,36(sp)
    9164:	8809883a 	mov	r4,r17
    9168:	800b883a 	mov	r5,r16
    916c:	1880022e 	bgeu	r3,r2,9178 <__gtdf2+0x70>
    9170:	0009cb40 	call	9cb4 <__fpcmp_parts_d>
    9174:	100d883a 	mov	r6,r2
    9178:	3005883a 	mov	r2,r6
    917c:	dfc01017 	ldw	ra,64(sp)
    9180:	dc400f17 	ldw	r17,60(sp)
    9184:	dc000e17 	ldw	r16,56(sp)
    9188:	dec01104 	addi	sp,sp,68
    918c:	f800283a 	ret

00009190 <__gedf2>:
    9190:	deffef04 	addi	sp,sp,-68
    9194:	dc400f15 	stw	r17,60(sp)
    9198:	dc400404 	addi	r17,sp,16
    919c:	2005883a 	mov	r2,r4
    91a0:	2807883a 	mov	r3,r5
    91a4:	dc000e15 	stw	r16,56(sp)
    91a8:	d809883a 	mov	r4,sp
    91ac:	880b883a 	mov	r5,r17
    91b0:	dc000904 	addi	r16,sp,36
    91b4:	d8c00115 	stw	r3,4(sp)
    91b8:	d8800015 	stw	r2,0(sp)
    91bc:	d9800215 	stw	r6,8(sp)
    91c0:	dfc01015 	stw	ra,64(sp)
    91c4:	d9c00315 	stw	r7,12(sp)
    91c8:	0009b7c0 	call	9b7c <__unpack_d>
    91cc:	d9000204 	addi	r4,sp,8
    91d0:	800b883a 	mov	r5,r16
    91d4:	0009b7c0 	call	9b7c <__unpack_d>
    91d8:	d8800417 	ldw	r2,16(sp)
    91dc:	00c00044 	movi	r3,1
    91e0:	01bfffc4 	movi	r6,-1
    91e4:	1880062e 	bgeu	r3,r2,9200 <__gedf2+0x70>
    91e8:	d8800917 	ldw	r2,36(sp)
    91ec:	8809883a 	mov	r4,r17
    91f0:	800b883a 	mov	r5,r16
    91f4:	1880022e 	bgeu	r3,r2,9200 <__gedf2+0x70>
    91f8:	0009cb40 	call	9cb4 <__fpcmp_parts_d>
    91fc:	100d883a 	mov	r6,r2
    9200:	3005883a 	mov	r2,r6
    9204:	dfc01017 	ldw	ra,64(sp)
    9208:	dc400f17 	ldw	r17,60(sp)
    920c:	dc000e17 	ldw	r16,56(sp)
    9210:	dec01104 	addi	sp,sp,68
    9214:	f800283a 	ret

00009218 <__ltdf2>:
    9218:	deffef04 	addi	sp,sp,-68
    921c:	dc400f15 	stw	r17,60(sp)
    9220:	dc400404 	addi	r17,sp,16
    9224:	2005883a 	mov	r2,r4
    9228:	2807883a 	mov	r3,r5
    922c:	dc000e15 	stw	r16,56(sp)
    9230:	d809883a 	mov	r4,sp
    9234:	880b883a 	mov	r5,r17
    9238:	dc000904 	addi	r16,sp,36
    923c:	d8c00115 	stw	r3,4(sp)
    9240:	d8800015 	stw	r2,0(sp)
    9244:	d9800215 	stw	r6,8(sp)
    9248:	dfc01015 	stw	ra,64(sp)
    924c:	d9c00315 	stw	r7,12(sp)
    9250:	0009b7c0 	call	9b7c <__unpack_d>
    9254:	d9000204 	addi	r4,sp,8
    9258:	800b883a 	mov	r5,r16
    925c:	0009b7c0 	call	9b7c <__unpack_d>
    9260:	d8800417 	ldw	r2,16(sp)
    9264:	00c00044 	movi	r3,1
    9268:	180d883a 	mov	r6,r3
    926c:	1880062e 	bgeu	r3,r2,9288 <__ltdf2+0x70>
    9270:	d8800917 	ldw	r2,36(sp)
    9274:	8809883a 	mov	r4,r17
    9278:	800b883a 	mov	r5,r16
    927c:	1880022e 	bgeu	r3,r2,9288 <__ltdf2+0x70>
    9280:	0009cb40 	call	9cb4 <__fpcmp_parts_d>
    9284:	100d883a 	mov	r6,r2
    9288:	3005883a 	mov	r2,r6
    928c:	dfc01017 	ldw	ra,64(sp)
    9290:	dc400f17 	ldw	r17,60(sp)
    9294:	dc000e17 	ldw	r16,56(sp)
    9298:	dec01104 	addi	sp,sp,68
    929c:	f800283a 	ret

000092a0 <__floatsidf>:
    92a0:	2006d7fa 	srli	r3,r4,31
    92a4:	defff604 	addi	sp,sp,-40
    92a8:	008000c4 	movi	r2,3
    92ac:	dfc00915 	stw	ra,36(sp)
    92b0:	dcc00815 	stw	r19,32(sp)
    92b4:	dc800715 	stw	r18,28(sp)
    92b8:	dc400615 	stw	r17,24(sp)
    92bc:	dc000515 	stw	r16,20(sp)
    92c0:	d8800015 	stw	r2,0(sp)
    92c4:	d8c00115 	stw	r3,4(sp)
    92c8:	20000f1e 	bne	r4,zero,9308 <__floatsidf+0x68>
    92cc:	00800084 	movi	r2,2
    92d0:	d8800015 	stw	r2,0(sp)
    92d4:	d809883a 	mov	r4,sp
    92d8:	00098680 	call	9868 <__pack_d>
    92dc:	1009883a 	mov	r4,r2
    92e0:	180b883a 	mov	r5,r3
    92e4:	2005883a 	mov	r2,r4
    92e8:	2807883a 	mov	r3,r5
    92ec:	dfc00917 	ldw	ra,36(sp)
    92f0:	dcc00817 	ldw	r19,32(sp)
    92f4:	dc800717 	ldw	r18,28(sp)
    92f8:	dc400617 	ldw	r17,24(sp)
    92fc:	dc000517 	ldw	r16,20(sp)
    9300:	dec00a04 	addi	sp,sp,40
    9304:	f800283a 	ret
    9308:	00800f04 	movi	r2,60
    930c:	1807003a 	cmpeq	r3,r3,zero
    9310:	d8800215 	stw	r2,8(sp)
    9314:	18001126 	beq	r3,zero,935c <__floatsidf+0xbc>
    9318:	0027883a 	mov	r19,zero
    931c:	2025883a 	mov	r18,r4
    9320:	d9000315 	stw	r4,12(sp)
    9324:	dcc00415 	stw	r19,16(sp)
    9328:	00097e80 	call	97e8 <__clzsi2>
    932c:	11000744 	addi	r4,r2,29
    9330:	013fe80e 	bge	zero,r4,92d4 <__floatsidf+0x34>
    9334:	10bfff44 	addi	r2,r2,-3
    9338:	10000c16 	blt	r2,zero,936c <__floatsidf+0xcc>
    933c:	90a2983a 	sll	r17,r18,r2
    9340:	0021883a 	mov	r16,zero
    9344:	d8800217 	ldw	r2,8(sp)
    9348:	dc400415 	stw	r17,16(sp)
    934c:	dc000315 	stw	r16,12(sp)
    9350:	1105c83a 	sub	r2,r2,r4
    9354:	d8800215 	stw	r2,8(sp)
    9358:	003fde06 	br	92d4 <__floatsidf+0x34>
    935c:	00a00034 	movhi	r2,32768
    9360:	20800a26 	beq	r4,r2,938c <__floatsidf+0xec>
    9364:	0109c83a 	sub	r4,zero,r4
    9368:	003feb06 	br	9318 <__floatsidf+0x78>
    936c:	9006d07a 	srli	r3,r18,1
    9370:	008007c4 	movi	r2,31
    9374:	1105c83a 	sub	r2,r2,r4
    9378:	1886d83a 	srl	r3,r3,r2
    937c:	9922983a 	sll	r17,r19,r4
    9380:	9120983a 	sll	r16,r18,r4
    9384:	1c62b03a 	or	r17,r3,r17
    9388:	003fee06 	br	9344 <__floatsidf+0xa4>
    938c:	0009883a 	mov	r4,zero
    9390:	01707834 	movhi	r5,49632
    9394:	003fd306 	br	92e4 <__floatsidf+0x44>

00009398 <__fixdfsi>:
    9398:	defff804 	addi	sp,sp,-32
    939c:	2005883a 	mov	r2,r4
    93a0:	2807883a 	mov	r3,r5
    93a4:	d809883a 	mov	r4,sp
    93a8:	d9400204 	addi	r5,sp,8
    93ac:	d8c00115 	stw	r3,4(sp)
    93b0:	d8800015 	stw	r2,0(sp)
    93b4:	dfc00715 	stw	ra,28(sp)
    93b8:	0009b7c0 	call	9b7c <__unpack_d>
    93bc:	d8c00217 	ldw	r3,8(sp)
    93c0:	00800084 	movi	r2,2
    93c4:	1880051e 	bne	r3,r2,93dc <__fixdfsi+0x44>
    93c8:	0007883a 	mov	r3,zero
    93cc:	1805883a 	mov	r2,r3
    93d0:	dfc00717 	ldw	ra,28(sp)
    93d4:	dec00804 	addi	sp,sp,32
    93d8:	f800283a 	ret
    93dc:	00800044 	movi	r2,1
    93e0:	10fff92e 	bgeu	r2,r3,93c8 <__fixdfsi+0x30>
    93e4:	00800104 	movi	r2,4
    93e8:	18800426 	beq	r3,r2,93fc <__fixdfsi+0x64>
    93ec:	d8c00417 	ldw	r3,16(sp)
    93f0:	183ff516 	blt	r3,zero,93c8 <__fixdfsi+0x30>
    93f4:	00800784 	movi	r2,30
    93f8:	10c0080e 	bge	r2,r3,941c <__fixdfsi+0x84>
    93fc:	d8800317 	ldw	r2,12(sp)
    9400:	1000121e 	bne	r2,zero,944c <__fixdfsi+0xb4>
    9404:	00e00034 	movhi	r3,32768
    9408:	18ffffc4 	addi	r3,r3,-1
    940c:	1805883a 	mov	r2,r3
    9410:	dfc00717 	ldw	ra,28(sp)
    9414:	dec00804 	addi	sp,sp,32
    9418:	f800283a 	ret
    941c:	00800f04 	movi	r2,60
    9420:	10d1c83a 	sub	r8,r2,r3
    9424:	40bff804 	addi	r2,r8,-32
    9428:	d9800517 	ldw	r6,20(sp)
    942c:	d9c00617 	ldw	r7,24(sp)
    9430:	10000816 	blt	r2,zero,9454 <__fixdfsi+0xbc>
    9434:	3888d83a 	srl	r4,r7,r2
    9438:	d8800317 	ldw	r2,12(sp)
    943c:	2007883a 	mov	r3,r4
    9440:	103fe226 	beq	r2,zero,93cc <__fixdfsi+0x34>
    9444:	0107c83a 	sub	r3,zero,r4
    9448:	003fe006 	br	93cc <__fixdfsi+0x34>
    944c:	00e00034 	movhi	r3,32768
    9450:	003fde06 	br	93cc <__fixdfsi+0x34>
    9454:	39c7883a 	add	r3,r7,r7
    9458:	008007c4 	movi	r2,31
    945c:	1205c83a 	sub	r2,r2,r8
    9460:	1886983a 	sll	r3,r3,r2
    9464:	3208d83a 	srl	r4,r6,r8
    9468:	1908b03a 	or	r4,r3,r4
    946c:	003ff206 	br	9438 <__fixdfsi+0xa0>

00009470 <__floatunsidf>:
    9470:	defff204 	addi	sp,sp,-56
    9474:	dfc00d15 	stw	ra,52(sp)
    9478:	ddc00c15 	stw	r23,48(sp)
    947c:	dd800b15 	stw	r22,44(sp)
    9480:	dd400a15 	stw	r21,40(sp)
    9484:	dd000915 	stw	r20,36(sp)
    9488:	dcc00815 	stw	r19,32(sp)
    948c:	dc800715 	stw	r18,28(sp)
    9490:	dc400615 	stw	r17,24(sp)
    9494:	dc000515 	stw	r16,20(sp)
    9498:	d8000115 	stw	zero,4(sp)
    949c:	20000f1e 	bne	r4,zero,94dc <__floatunsidf+0x6c>
    94a0:	00800084 	movi	r2,2
    94a4:	d8800015 	stw	r2,0(sp)
    94a8:	d809883a 	mov	r4,sp
    94ac:	00098680 	call	9868 <__pack_d>
    94b0:	dfc00d17 	ldw	ra,52(sp)
    94b4:	ddc00c17 	ldw	r23,48(sp)
    94b8:	dd800b17 	ldw	r22,44(sp)
    94bc:	dd400a17 	ldw	r21,40(sp)
    94c0:	dd000917 	ldw	r20,36(sp)
    94c4:	dcc00817 	ldw	r19,32(sp)
    94c8:	dc800717 	ldw	r18,28(sp)
    94cc:	dc400617 	ldw	r17,24(sp)
    94d0:	dc000517 	ldw	r16,20(sp)
    94d4:	dec00e04 	addi	sp,sp,56
    94d8:	f800283a 	ret
    94dc:	008000c4 	movi	r2,3
    94e0:	00c00f04 	movi	r3,60
    94e4:	002f883a 	mov	r23,zero
    94e8:	202d883a 	mov	r22,r4
    94ec:	d8800015 	stw	r2,0(sp)
    94f0:	d8c00215 	stw	r3,8(sp)
    94f4:	d9000315 	stw	r4,12(sp)
    94f8:	ddc00415 	stw	r23,16(sp)
    94fc:	00097e80 	call	97e8 <__clzsi2>
    9500:	12400744 	addi	r9,r2,29
    9504:	48000b16 	blt	r9,zero,9534 <__floatunsidf+0xc4>
    9508:	483fe726 	beq	r9,zero,94a8 <__floatunsidf+0x38>
    950c:	10bfff44 	addi	r2,r2,-3
    9510:	10002e16 	blt	r2,zero,95cc <__floatunsidf+0x15c>
    9514:	b0a2983a 	sll	r17,r22,r2
    9518:	0021883a 	mov	r16,zero
    951c:	d8800217 	ldw	r2,8(sp)
    9520:	dc400415 	stw	r17,16(sp)
    9524:	dc000315 	stw	r16,12(sp)
    9528:	1245c83a 	sub	r2,r2,r9
    952c:	d8800215 	stw	r2,8(sp)
    9530:	003fdd06 	br	94a8 <__floatunsidf+0x38>
    9534:	0255c83a 	sub	r10,zero,r9
    9538:	51bff804 	addi	r6,r10,-32
    953c:	30001b16 	blt	r6,zero,95ac <__floatunsidf+0x13c>
    9540:	b9a8d83a 	srl	r20,r23,r6
    9544:	002b883a 	mov	r21,zero
    9548:	000f883a 	mov	r7,zero
    954c:	01000044 	movi	r4,1
    9550:	0011883a 	mov	r8,zero
    9554:	30002516 	blt	r6,zero,95ec <__floatunsidf+0x17c>
    9558:	21a6983a 	sll	r19,r4,r6
    955c:	0025883a 	mov	r18,zero
    9560:	00bfffc4 	movi	r2,-1
    9564:	9089883a 	add	r4,r18,r2
    9568:	988b883a 	add	r5,r19,r2
    956c:	248d803a 	cmpltu	r6,r4,r18
    9570:	314b883a 	add	r5,r6,r5
    9574:	b104703a 	and	r2,r22,r4
    9578:	b946703a 	and	r3,r23,r5
    957c:	10c4b03a 	or	r2,r2,r3
    9580:	10000226 	beq	r2,zero,958c <__floatunsidf+0x11c>
    9584:	01c00044 	movi	r7,1
    9588:	0011883a 	mov	r8,zero
    958c:	d9000217 	ldw	r4,8(sp)
    9590:	a1c4b03a 	or	r2,r20,r7
    9594:	aa06b03a 	or	r3,r21,r8
    9598:	2249c83a 	sub	r4,r4,r9
    959c:	d8c00415 	stw	r3,16(sp)
    95a0:	d9000215 	stw	r4,8(sp)
    95a4:	d8800315 	stw	r2,12(sp)
    95a8:	003fbf06 	br	94a8 <__floatunsidf+0x38>
    95ac:	bdc7883a 	add	r3,r23,r23
    95b0:	008007c4 	movi	r2,31
    95b4:	1285c83a 	sub	r2,r2,r10
    95b8:	1886983a 	sll	r3,r3,r2
    95bc:	b2a8d83a 	srl	r20,r22,r10
    95c0:	baaad83a 	srl	r21,r23,r10
    95c4:	1d28b03a 	or	r20,r3,r20
    95c8:	003fdf06 	br	9548 <__floatunsidf+0xd8>
    95cc:	b006d07a 	srli	r3,r22,1
    95d0:	008007c4 	movi	r2,31
    95d4:	1245c83a 	sub	r2,r2,r9
    95d8:	1886d83a 	srl	r3,r3,r2
    95dc:	ba62983a 	sll	r17,r23,r9
    95e0:	b260983a 	sll	r16,r22,r9
    95e4:	1c62b03a 	or	r17,r3,r17
    95e8:	003fcc06 	br	951c <__floatunsidf+0xac>
    95ec:	2006d07a 	srli	r3,r4,1
    95f0:	008007c4 	movi	r2,31
    95f4:	1285c83a 	sub	r2,r2,r10
    95f8:	18a6d83a 	srl	r19,r3,r2
    95fc:	22a4983a 	sll	r18,r4,r10
    9600:	003fd706 	br	9560 <__floatunsidf+0xf0>

00009604 <udivmodsi4>:
    9604:	29001b2e 	bgeu	r5,r4,9674 <udivmodsi4+0x70>
    9608:	28001a16 	blt	r5,zero,9674 <udivmodsi4+0x70>
    960c:	00800044 	movi	r2,1
    9610:	0007883a 	mov	r3,zero
    9614:	01c007c4 	movi	r7,31
    9618:	00000306 	br	9628 <udivmodsi4+0x24>
    961c:	19c01326 	beq	r3,r7,966c <udivmodsi4+0x68>
    9620:	18c00044 	addi	r3,r3,1
    9624:	28000416 	blt	r5,zero,9638 <udivmodsi4+0x34>
    9628:	294b883a 	add	r5,r5,r5
    962c:	1085883a 	add	r2,r2,r2
    9630:	293ffa36 	bltu	r5,r4,961c <udivmodsi4+0x18>
    9634:	10000d26 	beq	r2,zero,966c <udivmodsi4+0x68>
    9638:	0007883a 	mov	r3,zero
    963c:	21400236 	bltu	r4,r5,9648 <udivmodsi4+0x44>
    9640:	2149c83a 	sub	r4,r4,r5
    9644:	1886b03a 	or	r3,r3,r2
    9648:	1004d07a 	srli	r2,r2,1
    964c:	280ad07a 	srli	r5,r5,1
    9650:	103ffa1e 	bne	r2,zero,963c <udivmodsi4+0x38>
    9654:	30000226 	beq	r6,zero,9660 <udivmodsi4+0x5c>
    9658:	2005883a 	mov	r2,r4
    965c:	f800283a 	ret
    9660:	1809883a 	mov	r4,r3
    9664:	2005883a 	mov	r2,r4
    9668:	f800283a 	ret
    966c:	0007883a 	mov	r3,zero
    9670:	003ff806 	br	9654 <udivmodsi4+0x50>
    9674:	00800044 	movi	r2,1
    9678:	0007883a 	mov	r3,zero
    967c:	003fef06 	br	963c <udivmodsi4+0x38>

00009680 <__divsi3>:
    9680:	defffe04 	addi	sp,sp,-8
    9684:	dc000015 	stw	r16,0(sp)
    9688:	dfc00115 	stw	ra,4(sp)
    968c:	0021883a 	mov	r16,zero
    9690:	20000c16 	blt	r4,zero,96c4 <__divsi3+0x44>
    9694:	000d883a 	mov	r6,zero
    9698:	28000e16 	blt	r5,zero,96d4 <__divsi3+0x54>
    969c:	00096040 	call	9604 <udivmodsi4>
    96a0:	1007883a 	mov	r3,r2
    96a4:	8005003a 	cmpeq	r2,r16,zero
    96a8:	1000011e 	bne	r2,zero,96b0 <__divsi3+0x30>
    96ac:	00c7c83a 	sub	r3,zero,r3
    96b0:	1805883a 	mov	r2,r3
    96b4:	dfc00117 	ldw	ra,4(sp)
    96b8:	dc000017 	ldw	r16,0(sp)
    96bc:	dec00204 	addi	sp,sp,8
    96c0:	f800283a 	ret
    96c4:	0109c83a 	sub	r4,zero,r4
    96c8:	04000044 	movi	r16,1
    96cc:	000d883a 	mov	r6,zero
    96d0:	283ff20e 	bge	r5,zero,969c <__divsi3+0x1c>
    96d4:	014bc83a 	sub	r5,zero,r5
    96d8:	8021003a 	cmpeq	r16,r16,zero
    96dc:	003fef06 	br	969c <__divsi3+0x1c>

000096e0 <__modsi3>:
    96e0:	deffff04 	addi	sp,sp,-4
    96e4:	dfc00015 	stw	ra,0(sp)
    96e8:	01800044 	movi	r6,1
    96ec:	2807883a 	mov	r3,r5
    96f0:	20000416 	blt	r4,zero,9704 <__modsi3+0x24>
    96f4:	28000c16 	blt	r5,zero,9728 <__modsi3+0x48>
    96f8:	dfc00017 	ldw	ra,0(sp)
    96fc:	dec00104 	addi	sp,sp,4
    9700:	00096041 	jmpi	9604 <udivmodsi4>
    9704:	0109c83a 	sub	r4,zero,r4
    9708:	28000b16 	blt	r5,zero,9738 <__modsi3+0x58>
    970c:	180b883a 	mov	r5,r3
    9710:	01800044 	movi	r6,1
    9714:	00096040 	call	9604 <udivmodsi4>
    9718:	0085c83a 	sub	r2,zero,r2
    971c:	dfc00017 	ldw	ra,0(sp)
    9720:	dec00104 	addi	sp,sp,4
    9724:	f800283a 	ret
    9728:	014bc83a 	sub	r5,zero,r5
    972c:	dfc00017 	ldw	ra,0(sp)
    9730:	dec00104 	addi	sp,sp,4
    9734:	00096041 	jmpi	9604 <udivmodsi4>
    9738:	0147c83a 	sub	r3,zero,r5
    973c:	003ff306 	br	970c <__modsi3+0x2c>

00009740 <__udivsi3>:
    9740:	000d883a 	mov	r6,zero
    9744:	00096041 	jmpi	9604 <udivmodsi4>

00009748 <__umodsi3>:
    9748:	01800044 	movi	r6,1
    974c:	00096041 	jmpi	9604 <udivmodsi4>

00009750 <__muldi3>:
    9750:	2011883a 	mov	r8,r4
    9754:	427fffcc 	andi	r9,r8,65535
    9758:	4018d43a 	srli	r12,r8,16
    975c:	32bfffcc 	andi	r10,r6,65535
    9760:	3016d43a 	srli	r11,r6,16
    9764:	4a85383a 	mul	r2,r9,r10
    9768:	6295383a 	mul	r10,r12,r10
    976c:	4ad3383a 	mul	r9,r9,r11
    9770:	113fffcc 	andi	r4,r2,65535
    9774:	1004d43a 	srli	r2,r2,16
    9778:	4a93883a 	add	r9,r9,r10
    977c:	3807883a 	mov	r3,r7
    9780:	1245883a 	add	r2,r2,r9
    9784:	280f883a 	mov	r7,r5
    9788:	180b883a 	mov	r5,r3
    978c:	1006943a 	slli	r3,r2,16
    9790:	defffd04 	addi	sp,sp,-12
    9794:	dc800215 	stw	r18,8(sp)
    9798:	1907883a 	add	r3,r3,r4
    979c:	dc400115 	stw	r17,4(sp)
    97a0:	dc000015 	stw	r16,0(sp)
    97a4:	4165383a 	mul	r18,r8,r5
    97a8:	31e3383a 	mul	r17,r6,r7
    97ac:	1012d43a 	srli	r9,r2,16
    97b0:	62d9383a 	mul	r12,r12,r11
    97b4:	181f883a 	mov	r15,r3
    97b8:	1280022e 	bgeu	r2,r10,97c4 <__muldi3+0x74>
    97bc:	00800074 	movhi	r2,1
    97c0:	6099883a 	add	r12,r12,r2
    97c4:	624d883a 	add	r6,r12,r9
    97c8:	9187883a 	add	r3,r18,r6
    97cc:	88c7883a 	add	r3,r17,r3
    97d0:	7805883a 	mov	r2,r15
    97d4:	dc800217 	ldw	r18,8(sp)
    97d8:	dc400117 	ldw	r17,4(sp)
    97dc:	dc000017 	ldw	r16,0(sp)
    97e0:	dec00304 	addi	sp,sp,12
    97e4:	f800283a 	ret

000097e8 <__clzsi2>:
    97e8:	00bfffd4 	movui	r2,65535
    97ec:	11000e36 	bltu	r2,r4,9828 <__clzsi2+0x40>
    97f0:	00803fc4 	movi	r2,255
    97f4:	01400204 	movi	r5,8
    97f8:	0007883a 	mov	r3,zero
    97fc:	11001036 	bltu	r2,r4,9840 <__clzsi2+0x58>
    9800:	000b883a 	mov	r5,zero
    9804:	20c6d83a 	srl	r3,r4,r3
    9808:	008000f4 	movhi	r2,3
    980c:	10809404 	addi	r2,r2,592
    9810:	1887883a 	add	r3,r3,r2
    9814:	18800003 	ldbu	r2,0(r3)
    9818:	00c00804 	movi	r3,32
    981c:	2885883a 	add	r2,r5,r2
    9820:	1885c83a 	sub	r2,r3,r2
    9824:	f800283a 	ret
    9828:	01400404 	movi	r5,16
    982c:	00804034 	movhi	r2,256
    9830:	10bfffc4 	addi	r2,r2,-1
    9834:	2807883a 	mov	r3,r5
    9838:	113ff22e 	bgeu	r2,r4,9804 <__clzsi2+0x1c>
    983c:	01400604 	movi	r5,24
    9840:	2807883a 	mov	r3,r5
    9844:	20c6d83a 	srl	r3,r4,r3
    9848:	008000f4 	movhi	r2,3
    984c:	10809404 	addi	r2,r2,592
    9850:	1887883a 	add	r3,r3,r2
    9854:	18800003 	ldbu	r2,0(r3)
    9858:	00c00804 	movi	r3,32
    985c:	2885883a 	add	r2,r5,r2
    9860:	1885c83a 	sub	r2,r3,r2
    9864:	f800283a 	ret

00009868 <__pack_d>:
    9868:	20c00017 	ldw	r3,0(r4)
    986c:	defffd04 	addi	sp,sp,-12
    9870:	dc000015 	stw	r16,0(sp)
    9874:	dc800215 	stw	r18,8(sp)
    9878:	dc400115 	stw	r17,4(sp)
    987c:	00800044 	movi	r2,1
    9880:	22000317 	ldw	r8,12(r4)
    9884:	001f883a 	mov	r15,zero
    9888:	22400417 	ldw	r9,16(r4)
    988c:	24000117 	ldw	r16,4(r4)
    9890:	10c0552e 	bgeu	r2,r3,99e8 <__pack_d+0x180>
    9894:	00800104 	movi	r2,4
    9898:	18804f26 	beq	r3,r2,99d8 <__pack_d+0x170>
    989c:	00800084 	movi	r2,2
    98a0:	18800226 	beq	r3,r2,98ac <__pack_d+0x44>
    98a4:	4244b03a 	or	r2,r8,r9
    98a8:	10001a1e 	bne	r2,zero,9914 <__pack_d+0xac>
    98ac:	000d883a 	mov	r6,zero
    98b0:	000f883a 	mov	r7,zero
    98b4:	0011883a 	mov	r8,zero
    98b8:	00800434 	movhi	r2,16
    98bc:	10bfffc4 	addi	r2,r2,-1
    98c0:	301d883a 	mov	r14,r6
    98c4:	3884703a 	and	r2,r7,r2
    98c8:	400a953a 	slli	r5,r8,20
    98cc:	79bffc2c 	andhi	r6,r15,65520
    98d0:	308cb03a 	or	r6,r6,r2
    98d4:	00e00434 	movhi	r3,32784
    98d8:	18ffffc4 	addi	r3,r3,-1
    98dc:	800497fa 	slli	r2,r16,31
    98e0:	30c6703a 	and	r3,r6,r3
    98e4:	1946b03a 	or	r3,r3,r5
    98e8:	01600034 	movhi	r5,32768
    98ec:	297fffc4 	addi	r5,r5,-1
    98f0:	194a703a 	and	r5,r3,r5
    98f4:	288ab03a 	or	r5,r5,r2
    98f8:	2807883a 	mov	r3,r5
    98fc:	7005883a 	mov	r2,r14
    9900:	dc800217 	ldw	r18,8(sp)
    9904:	dc400117 	ldw	r17,4(sp)
    9908:	dc000017 	ldw	r16,0(sp)
    990c:	dec00304 	addi	sp,sp,12
    9910:	f800283a 	ret
    9914:	21000217 	ldw	r4,8(r4)
    9918:	00bf0084 	movi	r2,-1022
    991c:	20803f16 	blt	r4,r2,9a1c <__pack_d+0x1b4>
    9920:	0080ffc4 	movi	r2,1023
    9924:	11002c16 	blt	r2,r4,99d8 <__pack_d+0x170>
    9928:	00803fc4 	movi	r2,255
    992c:	408c703a 	and	r6,r8,r2
    9930:	00802004 	movi	r2,128
    9934:	0007883a 	mov	r3,zero
    9938:	000f883a 	mov	r7,zero
    993c:	2280ffc4 	addi	r10,r4,1023
    9940:	30801e26 	beq	r6,r2,99bc <__pack_d+0x154>
    9944:	00801fc4 	movi	r2,127
    9948:	4089883a 	add	r4,r8,r2
    994c:	220d803a 	cmpltu	r6,r4,r8
    9950:	324d883a 	add	r6,r6,r9
    9954:	2011883a 	mov	r8,r4
    9958:	3013883a 	mov	r9,r6
    995c:	00880034 	movhi	r2,8192
    9960:	10bfffc4 	addi	r2,r2,-1
    9964:	12400d36 	bltu	r2,r9,999c <__pack_d+0x134>
    9968:	4804963a 	slli	r2,r9,24
    996c:	400cd23a 	srli	r6,r8,8
    9970:	480ed23a 	srli	r7,r9,8
    9974:	013fffc4 	movi	r4,-1
    9978:	118cb03a 	or	r6,r2,r6
    997c:	01400434 	movhi	r5,16
    9980:	297fffc4 	addi	r5,r5,-1
    9984:	3104703a 	and	r2,r6,r4
    9988:	3946703a 	and	r3,r7,r5
    998c:	5201ffcc 	andi	r8,r10,2047
    9990:	100d883a 	mov	r6,r2
    9994:	180f883a 	mov	r7,r3
    9998:	003fc706 	br	98b8 <__pack_d+0x50>
    999c:	480897fa 	slli	r4,r9,31
    99a0:	4004d07a 	srli	r2,r8,1
    99a4:	4806d07a 	srli	r3,r9,1
    99a8:	52800044 	addi	r10,r10,1
    99ac:	2084b03a 	or	r2,r4,r2
    99b0:	1011883a 	mov	r8,r2
    99b4:	1813883a 	mov	r9,r3
    99b8:	003feb06 	br	9968 <__pack_d+0x100>
    99bc:	383fe11e 	bne	r7,zero,9944 <__pack_d+0xdc>
    99c0:	01004004 	movi	r4,256
    99c4:	4104703a 	and	r2,r8,r4
    99c8:	10c4b03a 	or	r2,r2,r3
    99cc:	103fe326 	beq	r2,zero,995c <__pack_d+0xf4>
    99d0:	3005883a 	mov	r2,r6
    99d4:	003fdc06 	br	9948 <__pack_d+0xe0>
    99d8:	000d883a 	mov	r6,zero
    99dc:	000f883a 	mov	r7,zero
    99e0:	0201ffc4 	movi	r8,2047
    99e4:	003fb406 	br	98b8 <__pack_d+0x50>
    99e8:	0005883a 	mov	r2,zero
    99ec:	00c00234 	movhi	r3,8
    99f0:	408cb03a 	or	r6,r8,r2
    99f4:	48ceb03a 	or	r7,r9,r3
    99f8:	013fffc4 	movi	r4,-1
    99fc:	01400434 	movhi	r5,16
    9a00:	297fffc4 	addi	r5,r5,-1
    9a04:	3104703a 	and	r2,r6,r4
    9a08:	3946703a 	and	r3,r7,r5
    9a0c:	100d883a 	mov	r6,r2
    9a10:	180f883a 	mov	r7,r3
    9a14:	0201ffc4 	movi	r8,2047
    9a18:	003fa706 	br	98b8 <__pack_d+0x50>
    9a1c:	1109c83a 	sub	r4,r2,r4
    9a20:	00800e04 	movi	r2,56
    9a24:	11004316 	blt	r2,r4,9b34 <__pack_d+0x2cc>
    9a28:	21fff804 	addi	r7,r4,-32
    9a2c:	38004516 	blt	r7,zero,9b44 <__pack_d+0x2dc>
    9a30:	49d8d83a 	srl	r12,r9,r7
    9a34:	001b883a 	mov	r13,zero
    9a38:	0023883a 	mov	r17,zero
    9a3c:	01400044 	movi	r5,1
    9a40:	0025883a 	mov	r18,zero
    9a44:	38004716 	blt	r7,zero,9b64 <__pack_d+0x2fc>
    9a48:	29d6983a 	sll	r11,r5,r7
    9a4c:	0015883a 	mov	r10,zero
    9a50:	00bfffc4 	movi	r2,-1
    9a54:	5089883a 	add	r4,r10,r2
    9a58:	588b883a 	add	r5,r11,r2
    9a5c:	228d803a 	cmpltu	r6,r4,r10
    9a60:	314b883a 	add	r5,r6,r5
    9a64:	4104703a 	and	r2,r8,r4
    9a68:	4946703a 	and	r3,r9,r5
    9a6c:	10c4b03a 	or	r2,r2,r3
    9a70:	10000226 	beq	r2,zero,9a7c <__pack_d+0x214>
    9a74:	04400044 	movi	r17,1
    9a78:	0025883a 	mov	r18,zero
    9a7c:	00803fc4 	movi	r2,255
    9a80:	644eb03a 	or	r7,r12,r17
    9a84:	3892703a 	and	r9,r7,r2
    9a88:	00802004 	movi	r2,128
    9a8c:	6c90b03a 	or	r8,r13,r18
    9a90:	0015883a 	mov	r10,zero
    9a94:	48801626 	beq	r9,r2,9af0 <__pack_d+0x288>
    9a98:	01001fc4 	movi	r4,127
    9a9c:	3905883a 	add	r2,r7,r4
    9aa0:	11cd803a 	cmpltu	r6,r2,r7
    9aa4:	320d883a 	add	r6,r6,r8
    9aa8:	100f883a 	mov	r7,r2
    9aac:	00840034 	movhi	r2,4096
    9ab0:	10bfffc4 	addi	r2,r2,-1
    9ab4:	3011883a 	mov	r8,r6
    9ab8:	0007883a 	mov	r3,zero
    9abc:	11801b36 	bltu	r2,r6,9b2c <__pack_d+0x2c4>
    9ac0:	4004963a 	slli	r2,r8,24
    9ac4:	3808d23a 	srli	r4,r7,8
    9ac8:	400ad23a 	srli	r5,r8,8
    9acc:	1813883a 	mov	r9,r3
    9ad0:	1108b03a 	or	r4,r2,r4
    9ad4:	00bfffc4 	movi	r2,-1
    9ad8:	00c00434 	movhi	r3,16
    9adc:	18ffffc4 	addi	r3,r3,-1
    9ae0:	208c703a 	and	r6,r4,r2
    9ae4:	28ce703a 	and	r7,r5,r3
    9ae8:	4a01ffcc 	andi	r8,r9,2047
    9aec:	003f7206 	br	98b8 <__pack_d+0x50>
    9af0:	503fe91e 	bne	r10,zero,9a98 <__pack_d+0x230>
    9af4:	01004004 	movi	r4,256
    9af8:	3904703a 	and	r2,r7,r4
    9afc:	0007883a 	mov	r3,zero
    9b00:	10c4b03a 	or	r2,r2,r3
    9b04:	10000626 	beq	r2,zero,9b20 <__pack_d+0x2b8>
    9b08:	3a45883a 	add	r2,r7,r9
    9b0c:	11cd803a 	cmpltu	r6,r2,r7
    9b10:	320d883a 	add	r6,r6,r8
    9b14:	100f883a 	mov	r7,r2
    9b18:	3011883a 	mov	r8,r6
    9b1c:	0007883a 	mov	r3,zero
    9b20:	00840034 	movhi	r2,4096
    9b24:	10bfffc4 	addi	r2,r2,-1
    9b28:	123fe52e 	bgeu	r2,r8,9ac0 <__pack_d+0x258>
    9b2c:	00c00044 	movi	r3,1
    9b30:	003fe306 	br	9ac0 <__pack_d+0x258>
    9b34:	0009883a 	mov	r4,zero
    9b38:	0013883a 	mov	r9,zero
    9b3c:	000b883a 	mov	r5,zero
    9b40:	003fe406 	br	9ad4 <__pack_d+0x26c>
    9b44:	4a47883a 	add	r3,r9,r9
    9b48:	008007c4 	movi	r2,31
    9b4c:	1105c83a 	sub	r2,r2,r4
    9b50:	1886983a 	sll	r3,r3,r2
    9b54:	4118d83a 	srl	r12,r8,r4
    9b58:	491ad83a 	srl	r13,r9,r4
    9b5c:	1b18b03a 	or	r12,r3,r12
    9b60:	003fb506 	br	9a38 <__pack_d+0x1d0>
    9b64:	2806d07a 	srli	r3,r5,1
    9b68:	008007c4 	movi	r2,31
    9b6c:	1105c83a 	sub	r2,r2,r4
    9b70:	1896d83a 	srl	r11,r3,r2
    9b74:	2914983a 	sll	r10,r5,r4
    9b78:	003fb506 	br	9a50 <__pack_d+0x1e8>

00009b7c <__unpack_d>:
    9b7c:	20c00117 	ldw	r3,4(r4)
    9b80:	22400017 	ldw	r9,0(r4)
    9b84:	00800434 	movhi	r2,16
    9b88:	10bfffc4 	addi	r2,r2,-1
    9b8c:	1808d53a 	srli	r4,r3,20
    9b90:	180cd7fa 	srli	r6,r3,31
    9b94:	1894703a 	and	r10,r3,r2
    9b98:	2201ffcc 	andi	r8,r4,2047
    9b9c:	281b883a 	mov	r13,r5
    9ba0:	4817883a 	mov	r11,r9
    9ba4:	29800115 	stw	r6,4(r5)
    9ba8:	5019883a 	mov	r12,r10
    9bac:	40001e1e 	bne	r8,zero,9c28 <__unpack_d+0xac>
    9bb0:	4a84b03a 	or	r2,r9,r10
    9bb4:	10001926 	beq	r2,zero,9c1c <__unpack_d+0xa0>
    9bb8:	4804d63a 	srli	r2,r9,24
    9bbc:	500c923a 	slli	r6,r10,8
    9bc0:	013f0084 	movi	r4,-1022
    9bc4:	00c40034 	movhi	r3,4096
    9bc8:	18ffffc4 	addi	r3,r3,-1
    9bcc:	118cb03a 	or	r6,r2,r6
    9bd0:	008000c4 	movi	r2,3
    9bd4:	480a923a 	slli	r5,r9,8
    9bd8:	68800015 	stw	r2,0(r13)
    9bdc:	69000215 	stw	r4,8(r13)
    9be0:	19800b36 	bltu	r3,r6,9c10 <__unpack_d+0x94>
    9be4:	200f883a 	mov	r7,r4
    9be8:	1811883a 	mov	r8,r3
    9bec:	2945883a 	add	r2,r5,r5
    9bf0:	1149803a 	cmpltu	r4,r2,r5
    9bf4:	3187883a 	add	r3,r6,r6
    9bf8:	20c9883a 	add	r4,r4,r3
    9bfc:	100b883a 	mov	r5,r2
    9c00:	200d883a 	mov	r6,r4
    9c04:	39ffffc4 	addi	r7,r7,-1
    9c08:	413ff82e 	bgeu	r8,r4,9bec <__unpack_d+0x70>
    9c0c:	69c00215 	stw	r7,8(r13)
    9c10:	69800415 	stw	r6,16(r13)
    9c14:	69400315 	stw	r5,12(r13)
    9c18:	f800283a 	ret
    9c1c:	00800084 	movi	r2,2
    9c20:	28800015 	stw	r2,0(r5)
    9c24:	f800283a 	ret
    9c28:	0081ffc4 	movi	r2,2047
    9c2c:	40800f26 	beq	r8,r2,9c6c <__unpack_d+0xf0>
    9c30:	480cd63a 	srli	r6,r9,24
    9c34:	5006923a 	slli	r3,r10,8
    9c38:	4804923a 	slli	r2,r9,8
    9c3c:	0009883a 	mov	r4,zero
    9c40:	30c6b03a 	or	r3,r6,r3
    9c44:	01440034 	movhi	r5,4096
    9c48:	110cb03a 	or	r6,r2,r4
    9c4c:	423f0044 	addi	r8,r8,-1023
    9c50:	194eb03a 	or	r7,r3,r5
    9c54:	008000c4 	movi	r2,3
    9c58:	69c00415 	stw	r7,16(r13)
    9c5c:	6a000215 	stw	r8,8(r13)
    9c60:	68800015 	stw	r2,0(r13)
    9c64:	69800315 	stw	r6,12(r13)
    9c68:	f800283a 	ret
    9c6c:	4a84b03a 	or	r2,r9,r10
    9c70:	1000031e 	bne	r2,zero,9c80 <__unpack_d+0x104>
    9c74:	00800104 	movi	r2,4
    9c78:	28800015 	stw	r2,0(r5)
    9c7c:	f800283a 	ret
    9c80:	0009883a 	mov	r4,zero
    9c84:	01400234 	movhi	r5,8
    9c88:	4904703a 	and	r2,r9,r4
    9c8c:	5146703a 	and	r3,r10,r5
    9c90:	10c4b03a 	or	r2,r2,r3
    9c94:	10000526 	beq	r2,zero,9cac <__unpack_d+0x130>
    9c98:	00800044 	movi	r2,1
    9c9c:	68800015 	stw	r2,0(r13)
    9ca0:	6b000415 	stw	r12,16(r13)
    9ca4:	6ac00315 	stw	r11,12(r13)
    9ca8:	f800283a 	ret
    9cac:	68000015 	stw	zero,0(r13)
    9cb0:	003ffb06 	br	9ca0 <__unpack_d+0x124>

00009cb4 <__fpcmp_parts_d>:
    9cb4:	21800017 	ldw	r6,0(r4)
    9cb8:	00c00044 	movi	r3,1
    9cbc:	19800a2e 	bgeu	r3,r6,9ce8 <__fpcmp_parts_d+0x34>
    9cc0:	28800017 	ldw	r2,0(r5)
    9cc4:	1880082e 	bgeu	r3,r2,9ce8 <__fpcmp_parts_d+0x34>
    9cc8:	00c00104 	movi	r3,4
    9ccc:	30c02626 	beq	r6,r3,9d68 <__fpcmp_parts_d+0xb4>
    9cd0:	10c02226 	beq	r2,r3,9d5c <__fpcmp_parts_d+0xa8>
    9cd4:	00c00084 	movi	r3,2
    9cd8:	30c00526 	beq	r6,r3,9cf0 <__fpcmp_parts_d+0x3c>
    9cdc:	10c0071e 	bne	r2,r3,9cfc <__fpcmp_parts_d+0x48>
    9ce0:	20800117 	ldw	r2,4(r4)
    9ce4:	1000091e 	bne	r2,zero,9d0c <__fpcmp_parts_d+0x58>
    9ce8:	00800044 	movi	r2,1
    9cec:	f800283a 	ret
    9cf0:	10c01a1e 	bne	r2,r3,9d5c <__fpcmp_parts_d+0xa8>
    9cf4:	0005883a 	mov	r2,zero
    9cf8:	f800283a 	ret
    9cfc:	22000117 	ldw	r8,4(r4)
    9d00:	28800117 	ldw	r2,4(r5)
    9d04:	40800326 	beq	r8,r2,9d14 <__fpcmp_parts_d+0x60>
    9d08:	403ff726 	beq	r8,zero,9ce8 <__fpcmp_parts_d+0x34>
    9d0c:	00bfffc4 	movi	r2,-1
    9d10:	f800283a 	ret
    9d14:	20c00217 	ldw	r3,8(r4)
    9d18:	28800217 	ldw	r2,8(r5)
    9d1c:	10fffa16 	blt	r2,r3,9d08 <__fpcmp_parts_d+0x54>
    9d20:	18800916 	blt	r3,r2,9d48 <__fpcmp_parts_d+0x94>
    9d24:	21c00417 	ldw	r7,16(r4)
    9d28:	28c00417 	ldw	r3,16(r5)
    9d2c:	21800317 	ldw	r6,12(r4)
    9d30:	28800317 	ldw	r2,12(r5)
    9d34:	19fff436 	bltu	r3,r7,9d08 <__fpcmp_parts_d+0x54>
    9d38:	38c00526 	beq	r7,r3,9d50 <__fpcmp_parts_d+0x9c>
    9d3c:	38c00236 	bltu	r7,r3,9d48 <__fpcmp_parts_d+0x94>
    9d40:	19ffec1e 	bne	r3,r7,9cf4 <__fpcmp_parts_d+0x40>
    9d44:	30bfeb2e 	bgeu	r6,r2,9cf4 <__fpcmp_parts_d+0x40>
    9d48:	403fe71e 	bne	r8,zero,9ce8 <__fpcmp_parts_d+0x34>
    9d4c:	003fef06 	br	9d0c <__fpcmp_parts_d+0x58>
    9d50:	11bffa2e 	bgeu	r2,r6,9d3c <__fpcmp_parts_d+0x88>
    9d54:	403fe426 	beq	r8,zero,9ce8 <__fpcmp_parts_d+0x34>
    9d58:	003fec06 	br	9d0c <__fpcmp_parts_d+0x58>
    9d5c:	28800117 	ldw	r2,4(r5)
    9d60:	103fe11e 	bne	r2,zero,9ce8 <__fpcmp_parts_d+0x34>
    9d64:	003fe906 	br	9d0c <__fpcmp_parts_d+0x58>
    9d68:	11bfdd1e 	bne	r2,r6,9ce0 <__fpcmp_parts_d+0x2c>
    9d6c:	28c00117 	ldw	r3,4(r5)
    9d70:	20800117 	ldw	r2,4(r4)
    9d74:	1885c83a 	sub	r2,r3,r2
    9d78:	f800283a 	ret

00009d7c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9d7c:	defff804 	addi	sp,sp,-32
    9d80:	dfc00715 	stw	ra,28(sp)
    9d84:	df000615 	stw	fp,24(sp)
    9d88:	df000604 	addi	fp,sp,24
    9d8c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9d90:	e0bffc17 	ldw	r2,-16(fp)
    9d94:	1004803a 	cmplt	r2,r2,zero
    9d98:	1000081e 	bne	r2,zero,9dbc <close+0x40>
    9d9c:	e0bffc17 	ldw	r2,-16(fp)
    9da0:	10800324 	muli	r2,r2,12
    9da4:	1007883a 	mov	r3,r2
    9da8:	008000f4 	movhi	r2,3
    9dac:	1082f004 	addi	r2,r2,3008
    9db0:	1887883a 	add	r3,r3,r2
    9db4:	e0ffff15 	stw	r3,-4(fp)
    9db8:	00000106 	br	9dc0 <close+0x44>
    9dbc:	e03fff15 	stw	zero,-4(fp)
    9dc0:	e0bfff17 	ldw	r2,-4(fp)
    9dc4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    9dc8:	e0bffb17 	ldw	r2,-20(fp)
    9dcc:	1005003a 	cmpeq	r2,r2,zero
    9dd0:	10001d1e 	bne	r2,zero,9e48 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9dd4:	e0bffb17 	ldw	r2,-20(fp)
    9dd8:	10800017 	ldw	r2,0(r2)
    9ddc:	10800417 	ldw	r2,16(r2)
    9de0:	1005003a 	cmpeq	r2,r2,zero
    9de4:	1000071e 	bne	r2,zero,9e04 <close+0x88>
    9de8:	e0bffb17 	ldw	r2,-20(fp)
    9dec:	10800017 	ldw	r2,0(r2)
    9df0:	10800417 	ldw	r2,16(r2)
    9df4:	e13ffb17 	ldw	r4,-20(fp)
    9df8:	103ee83a 	callr	r2
    9dfc:	e0bffe15 	stw	r2,-8(fp)
    9e00:	00000106 	br	9e08 <close+0x8c>
    9e04:	e03ffe15 	stw	zero,-8(fp)
    9e08:	e0bffe17 	ldw	r2,-8(fp)
    9e0c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9e10:	e13ffc17 	ldw	r4,-16(fp)
    9e14:	000a5c00 	call	a5c0 <alt_release_fd>
    if (rval < 0)
    9e18:	e0bffa17 	ldw	r2,-24(fp)
    9e1c:	1004403a 	cmpge	r2,r2,zero
    9e20:	1000071e 	bne	r2,zero,9e40 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    9e24:	0009e780 	call	9e78 <alt_get_errno>
    9e28:	e0fffa17 	ldw	r3,-24(fp)
    9e2c:	00c7c83a 	sub	r3,zero,r3
    9e30:	10c00015 	stw	r3,0(r2)
      return -1;
    9e34:	00bfffc4 	movi	r2,-1
    9e38:	e0bffd15 	stw	r2,-12(fp)
    9e3c:	00000806 	br	9e60 <close+0xe4>
    }
    return 0;
    9e40:	e03ffd15 	stw	zero,-12(fp)
    9e44:	00000606 	br	9e60 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9e48:	0009e780 	call	9e78 <alt_get_errno>
    9e4c:	1007883a 	mov	r3,r2
    9e50:	00801444 	movi	r2,81
    9e54:	18800015 	stw	r2,0(r3)
    return -1;
    9e58:	00bfffc4 	movi	r2,-1
    9e5c:	e0bffd15 	stw	r2,-12(fp)
    9e60:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    9e64:	e037883a 	mov	sp,fp
    9e68:	dfc00117 	ldw	ra,4(sp)
    9e6c:	df000017 	ldw	fp,0(sp)
    9e70:	dec00204 	addi	sp,sp,8
    9e74:	f800283a 	ret

00009e78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9e78:	defffd04 	addi	sp,sp,-12
    9e7c:	dfc00215 	stw	ra,8(sp)
    9e80:	df000115 	stw	fp,4(sp)
    9e84:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9e88:	008000f4 	movhi	r2,3
    9e8c:	10877304 	addi	r2,r2,7628
    9e90:	10800017 	ldw	r2,0(r2)
    9e94:	1005003a 	cmpeq	r2,r2,zero
    9e98:	1000061e 	bne	r2,zero,9eb4 <alt_get_errno+0x3c>
    9e9c:	008000f4 	movhi	r2,3
    9ea0:	10877304 	addi	r2,r2,7628
    9ea4:	10800017 	ldw	r2,0(r2)
    9ea8:	103ee83a 	callr	r2
    9eac:	e0bfff15 	stw	r2,-4(fp)
    9eb0:	00000306 	br	9ec0 <alt_get_errno+0x48>
    9eb4:	008000f4 	movhi	r2,3
    9eb8:	10878304 	addi	r2,r2,7692
    9ebc:	e0bfff15 	stw	r2,-4(fp)
    9ec0:	e0bfff17 	ldw	r2,-4(fp)
}
    9ec4:	e037883a 	mov	sp,fp
    9ec8:	dfc00117 	ldw	ra,4(sp)
    9ecc:	df000017 	ldw	fp,0(sp)
    9ed0:	dec00204 	addi	sp,sp,8
    9ed4:	f800283a 	ret

00009ed8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9ed8:	defffc04 	addi	sp,sp,-16
    9edc:	df000315 	stw	fp,12(sp)
    9ee0:	df000304 	addi	fp,sp,12
    9ee4:	e13ffd15 	stw	r4,-12(fp)
    9ee8:	e17ffe15 	stw	r5,-8(fp)
    9eec:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9ef0:	e0bfff17 	ldw	r2,-4(fp)
}
    9ef4:	e037883a 	mov	sp,fp
    9ef8:	df000017 	ldw	fp,0(sp)
    9efc:	dec00104 	addi	sp,sp,4
    9f00:	f800283a 	ret

00009f04 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    9f04:	defff904 	addi	sp,sp,-28
    9f08:	dfc00615 	stw	ra,24(sp)
    9f0c:	df000515 	stw	fp,20(sp)
    9f10:	df000504 	addi	fp,sp,20
    9f14:	e13ffc15 	stw	r4,-16(fp)
    9f18:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9f1c:	e0bffc17 	ldw	r2,-16(fp)
    9f20:	1004803a 	cmplt	r2,r2,zero
    9f24:	1000081e 	bne	r2,zero,9f48 <fstat+0x44>
    9f28:	e0bffc17 	ldw	r2,-16(fp)
    9f2c:	10800324 	muli	r2,r2,12
    9f30:	1007883a 	mov	r3,r2
    9f34:	008000f4 	movhi	r2,3
    9f38:	1082f004 	addi	r2,r2,3008
    9f3c:	1887883a 	add	r3,r3,r2
    9f40:	e0ffff15 	stw	r3,-4(fp)
    9f44:	00000106 	br	9f4c <fstat+0x48>
    9f48:	e03fff15 	stw	zero,-4(fp)
    9f4c:	e0bfff17 	ldw	r2,-4(fp)
    9f50:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    9f54:	e0bffb17 	ldw	r2,-20(fp)
    9f58:	1005003a 	cmpeq	r2,r2,zero
    9f5c:	1000121e 	bne	r2,zero,9fa8 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    9f60:	e0bffb17 	ldw	r2,-20(fp)
    9f64:	10800017 	ldw	r2,0(r2)
    9f68:	10800817 	ldw	r2,32(r2)
    9f6c:	1005003a 	cmpeq	r2,r2,zero
    9f70:	1000081e 	bne	r2,zero,9f94 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    9f74:	e0bffb17 	ldw	r2,-20(fp)
    9f78:	10800017 	ldw	r2,0(r2)
    9f7c:	10800817 	ldw	r2,32(r2)
    9f80:	e13ffb17 	ldw	r4,-20(fp)
    9f84:	e17ffd17 	ldw	r5,-12(fp)
    9f88:	103ee83a 	callr	r2
    9f8c:	e0bffe15 	stw	r2,-8(fp)
    9f90:	00000b06 	br	9fc0 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    9f94:	e0fffd17 	ldw	r3,-12(fp)
    9f98:	00880004 	movi	r2,8192
    9f9c:	18800115 	stw	r2,4(r3)
      return 0;
    9fa0:	e03ffe15 	stw	zero,-8(fp)
    9fa4:	00000606 	br	9fc0 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9fa8:	0009fd80 	call	9fd8 <alt_get_errno>
    9fac:	1007883a 	mov	r3,r2
    9fb0:	00801444 	movi	r2,81
    9fb4:	18800015 	stw	r2,0(r3)
    return -1;
    9fb8:	00bfffc4 	movi	r2,-1
    9fbc:	e0bffe15 	stw	r2,-8(fp)
    9fc0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    9fc4:	e037883a 	mov	sp,fp
    9fc8:	dfc00117 	ldw	ra,4(sp)
    9fcc:	df000017 	ldw	fp,0(sp)
    9fd0:	dec00204 	addi	sp,sp,8
    9fd4:	f800283a 	ret

00009fd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9fd8:	defffd04 	addi	sp,sp,-12
    9fdc:	dfc00215 	stw	ra,8(sp)
    9fe0:	df000115 	stw	fp,4(sp)
    9fe4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9fe8:	008000f4 	movhi	r2,3
    9fec:	10877304 	addi	r2,r2,7628
    9ff0:	10800017 	ldw	r2,0(r2)
    9ff4:	1005003a 	cmpeq	r2,r2,zero
    9ff8:	1000061e 	bne	r2,zero,a014 <alt_get_errno+0x3c>
    9ffc:	008000f4 	movhi	r2,3
    a000:	10877304 	addi	r2,r2,7628
    a004:	10800017 	ldw	r2,0(r2)
    a008:	103ee83a 	callr	r2
    a00c:	e0bfff15 	stw	r2,-4(fp)
    a010:	00000306 	br	a020 <alt_get_errno+0x48>
    a014:	008000f4 	movhi	r2,3
    a018:	10878304 	addi	r2,r2,7692
    a01c:	e0bfff15 	stw	r2,-4(fp)
    a020:	e0bfff17 	ldw	r2,-4(fp)
}
    a024:	e037883a 	mov	sp,fp
    a028:	dfc00117 	ldw	ra,4(sp)
    a02c:	df000017 	ldw	fp,0(sp)
    a030:	dec00204 	addi	sp,sp,8
    a034:	f800283a 	ret

0000a038 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    a038:	deffeb04 	addi	sp,sp,-84
    a03c:	dfc01415 	stw	ra,80(sp)
    a040:	df001315 	stw	fp,76(sp)
    a044:	df001304 	addi	fp,sp,76
    a048:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a04c:	e0bffd17 	ldw	r2,-12(fp)
    a050:	1004803a 	cmplt	r2,r2,zero
    a054:	1000081e 	bne	r2,zero,a078 <isatty+0x40>
    a058:	e0bffd17 	ldw	r2,-12(fp)
    a05c:	10800324 	muli	r2,r2,12
    a060:	1007883a 	mov	r3,r2
    a064:	008000f4 	movhi	r2,3
    a068:	1082f004 	addi	r2,r2,3008
    a06c:	1887883a 	add	r3,r3,r2
    a070:	e0ffff15 	stw	r3,-4(fp)
    a074:	00000106 	br	a07c <isatty+0x44>
    a078:	e03fff15 	stw	zero,-4(fp)
    a07c:	e0bfff17 	ldw	r2,-4(fp)
    a080:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    a084:	e0bfed17 	ldw	r2,-76(fp)
    a088:	1005003a 	cmpeq	r2,r2,zero
    a08c:	10000f1e 	bne	r2,zero,a0cc <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    a090:	e0bfed17 	ldw	r2,-76(fp)
    a094:	10800017 	ldw	r2,0(r2)
    a098:	10800817 	ldw	r2,32(r2)
    a09c:	1004c03a 	cmpne	r2,r2,zero
    a0a0:	1000031e 	bne	r2,zero,a0b0 <isatty+0x78>
    {
      return 1;
    a0a4:	00800044 	movi	r2,1
    a0a8:	e0bffe15 	stw	r2,-8(fp)
    a0ac:	00000c06 	br	a0e0 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    a0b0:	e17fee04 	addi	r5,fp,-72
    a0b4:	e13ffd17 	ldw	r4,-12(fp)
    a0b8:	0009f040 	call	9f04 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    a0bc:	e0bfef17 	ldw	r2,-68(fp)
    a0c0:	10880020 	cmpeqi	r2,r2,8192
    a0c4:	e0bffe15 	stw	r2,-8(fp)
    a0c8:	00000506 	br	a0e0 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a0cc:	000a0f80 	call	a0f8 <alt_get_errno>
    a0d0:	1007883a 	mov	r3,r2
    a0d4:	00801444 	movi	r2,81
    a0d8:	18800015 	stw	r2,0(r3)
    return 0;
    a0dc:	e03ffe15 	stw	zero,-8(fp)
    a0e0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    a0e4:	e037883a 	mov	sp,fp
    a0e8:	dfc00117 	ldw	ra,4(sp)
    a0ec:	df000017 	ldw	fp,0(sp)
    a0f0:	dec00204 	addi	sp,sp,8
    a0f4:	f800283a 	ret

0000a0f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a0f8:	defffd04 	addi	sp,sp,-12
    a0fc:	dfc00215 	stw	ra,8(sp)
    a100:	df000115 	stw	fp,4(sp)
    a104:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a108:	008000f4 	movhi	r2,3
    a10c:	10877304 	addi	r2,r2,7628
    a110:	10800017 	ldw	r2,0(r2)
    a114:	1005003a 	cmpeq	r2,r2,zero
    a118:	1000061e 	bne	r2,zero,a134 <alt_get_errno+0x3c>
    a11c:	008000f4 	movhi	r2,3
    a120:	10877304 	addi	r2,r2,7628
    a124:	10800017 	ldw	r2,0(r2)
    a128:	103ee83a 	callr	r2
    a12c:	e0bfff15 	stw	r2,-4(fp)
    a130:	00000306 	br	a140 <alt_get_errno+0x48>
    a134:	008000f4 	movhi	r2,3
    a138:	10878304 	addi	r2,r2,7692
    a13c:	e0bfff15 	stw	r2,-4(fp)
    a140:	e0bfff17 	ldw	r2,-4(fp)
}
    a144:	e037883a 	mov	sp,fp
    a148:	dfc00117 	ldw	ra,4(sp)
    a14c:	df000017 	ldw	fp,0(sp)
    a150:	dec00204 	addi	sp,sp,8
    a154:	f800283a 	ret

0000a158 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    a158:	defffe04 	addi	sp,sp,-8
    a15c:	dfc00115 	stw	ra,4(sp)
    a160:	df000015 	stw	fp,0(sp)
    a164:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    a168:	01000074 	movhi	r4,1
    a16c:	2131f904 	addi	r4,r4,-14364
    a170:	014000f4 	movhi	r5,3
    a174:	2940e104 	addi	r5,r5,900
    a178:	018000f4 	movhi	r6,3
    a17c:	31877804 	addi	r6,r6,7648
    a180:	000a1d80 	call	a1d8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    a184:	01000034 	movhi	r4,0
    a188:	21000804 	addi	r4,r4,32
    a18c:	01400034 	movhi	r5,0
    a190:	29400804 	addi	r5,r5,32
    a194:	01800034 	movhi	r6,0
    a198:	31806d04 	addi	r6,r6,436
    a19c:	000a1d80 	call	a1d8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    a1a0:	010000f4 	movhi	r4,3
    a1a4:	21000004 	addi	r4,r4,0
    a1a8:	014000f4 	movhi	r5,3
    a1ac:	29400004 	addi	r5,r5,0
    a1b0:	018000f4 	movhi	r6,3
    a1b4:	3180e104 	addi	r6,r6,900
    a1b8:	000a1d80 	call	a1d8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    a1bc:	000b6240 	call	b624 <alt_dcache_flush_all>
  alt_icache_flush_all();
    a1c0:	000b81c0 	call	b81c <alt_icache_flush_all>
}
    a1c4:	e037883a 	mov	sp,fp
    a1c8:	dfc00117 	ldw	ra,4(sp)
    a1cc:	df000017 	ldw	fp,0(sp)
    a1d0:	dec00204 	addi	sp,sp,8
    a1d4:	f800283a 	ret

0000a1d8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    a1d8:	defffc04 	addi	sp,sp,-16
    a1dc:	df000315 	stw	fp,12(sp)
    a1e0:	df000304 	addi	fp,sp,12
    a1e4:	e13ffd15 	stw	r4,-12(fp)
    a1e8:	e17ffe15 	stw	r5,-8(fp)
    a1ec:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    a1f0:	e0fffe17 	ldw	r3,-8(fp)
    a1f4:	e0bffd17 	ldw	r2,-12(fp)
    a1f8:	18800e26 	beq	r3,r2,a234 <alt_load_section+0x5c>
  {
    while( to != end )
    a1fc:	00000a06 	br	a228 <alt_load_section+0x50>
    {
      *to++ = *from++;
    a200:	e0bffd17 	ldw	r2,-12(fp)
    a204:	10c00017 	ldw	r3,0(r2)
    a208:	e0bffe17 	ldw	r2,-8(fp)
    a20c:	10c00015 	stw	r3,0(r2)
    a210:	e0bffe17 	ldw	r2,-8(fp)
    a214:	10800104 	addi	r2,r2,4
    a218:	e0bffe15 	stw	r2,-8(fp)
    a21c:	e0bffd17 	ldw	r2,-12(fp)
    a220:	10800104 	addi	r2,r2,4
    a224:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    a228:	e0fffe17 	ldw	r3,-8(fp)
    a22c:	e0bfff17 	ldw	r2,-4(fp)
    a230:	18bff31e 	bne	r3,r2,a200 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    a234:	e037883a 	mov	sp,fp
    a238:	df000017 	ldw	fp,0(sp)
    a23c:	dec00104 	addi	sp,sp,4
    a240:	f800283a 	ret

0000a244 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    a244:	defff804 	addi	sp,sp,-32
    a248:	dfc00715 	stw	ra,28(sp)
    a24c:	df000615 	stw	fp,24(sp)
    a250:	df000604 	addi	fp,sp,24
    a254:	e13ffc15 	stw	r4,-16(fp)
    a258:	e17ffd15 	stw	r5,-12(fp)
    a25c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    a260:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a264:	e0bffc17 	ldw	r2,-16(fp)
    a268:	1004803a 	cmplt	r2,r2,zero
    a26c:	1000081e 	bne	r2,zero,a290 <lseek+0x4c>
    a270:	e0bffc17 	ldw	r2,-16(fp)
    a274:	10800324 	muli	r2,r2,12
    a278:	1007883a 	mov	r3,r2
    a27c:	008000f4 	movhi	r2,3
    a280:	1082f004 	addi	r2,r2,3008
    a284:	1887883a 	add	r3,r3,r2
    a288:	e0ffff15 	stw	r3,-4(fp)
    a28c:	00000106 	br	a294 <lseek+0x50>
    a290:	e03fff15 	stw	zero,-4(fp)
    a294:	e0bfff17 	ldw	r2,-4(fp)
    a298:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    a29c:	e0bffb17 	ldw	r2,-20(fp)
    a2a0:	1005003a 	cmpeq	r2,r2,zero
    a2a4:	1000111e 	bne	r2,zero,a2ec <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    a2a8:	e0bffb17 	ldw	r2,-20(fp)
    a2ac:	10800017 	ldw	r2,0(r2)
    a2b0:	10800717 	ldw	r2,28(r2)
    a2b4:	1005003a 	cmpeq	r2,r2,zero
    a2b8:	1000091e 	bne	r2,zero,a2e0 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    a2bc:	e0bffb17 	ldw	r2,-20(fp)
    a2c0:	10800017 	ldw	r2,0(r2)
    a2c4:	10800717 	ldw	r2,28(r2)
    a2c8:	e13ffb17 	ldw	r4,-20(fp)
    a2cc:	e17ffd17 	ldw	r5,-12(fp)
    a2d0:	e1bffe17 	ldw	r6,-8(fp)
    a2d4:	103ee83a 	callr	r2
    a2d8:	e0bffa15 	stw	r2,-24(fp)
    a2dc:	00000506 	br	a2f4 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    a2e0:	00bfde84 	movi	r2,-134
    a2e4:	e0bffa15 	stw	r2,-24(fp)
    a2e8:	00000206 	br	a2f4 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    a2ec:	00bfebc4 	movi	r2,-81
    a2f0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    a2f4:	e0bffa17 	ldw	r2,-24(fp)
    a2f8:	1004403a 	cmpge	r2,r2,zero
    a2fc:	1000071e 	bne	r2,zero,a31c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    a300:	000a3340 	call	a334 <alt_get_errno>
    a304:	1007883a 	mov	r3,r2
    a308:	e0bffa17 	ldw	r2,-24(fp)
    a30c:	0085c83a 	sub	r2,zero,r2
    a310:	18800015 	stw	r2,0(r3)
    rc = -1;
    a314:	00bfffc4 	movi	r2,-1
    a318:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    a31c:	e0bffa17 	ldw	r2,-24(fp)
}
    a320:	e037883a 	mov	sp,fp
    a324:	dfc00117 	ldw	ra,4(sp)
    a328:	df000017 	ldw	fp,0(sp)
    a32c:	dec00204 	addi	sp,sp,8
    a330:	f800283a 	ret

0000a334 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a334:	defffd04 	addi	sp,sp,-12
    a338:	dfc00215 	stw	ra,8(sp)
    a33c:	df000115 	stw	fp,4(sp)
    a340:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a344:	008000f4 	movhi	r2,3
    a348:	10877304 	addi	r2,r2,7628
    a34c:	10800017 	ldw	r2,0(r2)
    a350:	1005003a 	cmpeq	r2,r2,zero
    a354:	1000061e 	bne	r2,zero,a370 <alt_get_errno+0x3c>
    a358:	008000f4 	movhi	r2,3
    a35c:	10877304 	addi	r2,r2,7628
    a360:	10800017 	ldw	r2,0(r2)
    a364:	103ee83a 	callr	r2
    a368:	e0bfff15 	stw	r2,-4(fp)
    a36c:	00000306 	br	a37c <alt_get_errno+0x48>
    a370:	008000f4 	movhi	r2,3
    a374:	10878304 	addi	r2,r2,7692
    a378:	e0bfff15 	stw	r2,-4(fp)
    a37c:	e0bfff17 	ldw	r2,-4(fp)
}
    a380:	e037883a 	mov	sp,fp
    a384:	dfc00117 	ldw	ra,4(sp)
    a388:	df000017 	ldw	fp,0(sp)
    a38c:	dec00204 	addi	sp,sp,8
    a390:	f800283a 	ret

0000a394 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    a394:	defffd04 	addi	sp,sp,-12
    a398:	dfc00215 	stw	ra,8(sp)
    a39c:	df000115 	stw	fp,4(sp)
    a3a0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    a3a4:	0009883a 	mov	r4,zero
    a3a8:	000a85c0 	call	a85c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    a3ac:	000a8900 	call	a890 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    a3b0:	010000f4 	movhi	r4,3
    a3b4:	2100d704 	addi	r4,r4,860
    a3b8:	014000f4 	movhi	r5,3
    a3bc:	2940d704 	addi	r5,r5,860
    a3c0:	018000f4 	movhi	r6,3
    a3c4:	3180d704 	addi	r6,r6,860
    a3c8:	000bbdc0 	call	bbdc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    a3cc:	000b7540 	call	b754 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    a3d0:	01000074 	movhi	r4,1
    a3d4:	212dee04 	addi	r4,r4,-18504
    a3d8:	000c3d80 	call	c3d8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    a3dc:	d1201c17 	ldw	r4,-32656(gp)
    a3e0:	d1601d17 	ldw	r5,-32652(gp)
    a3e4:	d1a01e17 	ldw	r6,-32648(gp)
    a3e8:	00005400 	call	540 <main>
    a3ec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    a3f0:	01000044 	movi	r4,1
    a3f4:	0009d7c0 	call	9d7c <close>
  exit (result);
    a3f8:	e13fff17 	ldw	r4,-4(fp)
    a3fc:	000c3ec0 	call	c3ec <exit>

0000a400 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    a400:	defffe04 	addi	sp,sp,-8
    a404:	df000115 	stw	fp,4(sp)
    a408:	df000104 	addi	fp,sp,4
    a40c:	e13fff15 	stw	r4,-4(fp)
}
    a410:	e037883a 	mov	sp,fp
    a414:	df000017 	ldw	fp,0(sp)
    a418:	dec00104 	addi	sp,sp,4
    a41c:	f800283a 	ret

0000a420 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    a420:	defffe04 	addi	sp,sp,-8
    a424:	df000115 	stw	fp,4(sp)
    a428:	df000104 	addi	fp,sp,4
    a42c:	e13fff15 	stw	r4,-4(fp)
}
    a430:	e037883a 	mov	sp,fp
    a434:	df000017 	ldw	fp,0(sp)
    a438:	dec00104 	addi	sp,sp,4
    a43c:	f800283a 	ret

0000a440 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    a440:	defff704 	addi	sp,sp,-36
    a444:	dfc00815 	stw	ra,32(sp)
    a448:	df000715 	stw	fp,28(sp)
    a44c:	df000704 	addi	fp,sp,28
    a450:	e13ffb15 	stw	r4,-20(fp)
    a454:	e17ffc15 	stw	r5,-16(fp)
    a458:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a45c:	e0bffb17 	ldw	r2,-20(fp)
    a460:	1004803a 	cmplt	r2,r2,zero
    a464:	1000081e 	bne	r2,zero,a488 <read+0x48>
    a468:	e0bffb17 	ldw	r2,-20(fp)
    a46c:	10800324 	muli	r2,r2,12
    a470:	1007883a 	mov	r3,r2
    a474:	008000f4 	movhi	r2,3
    a478:	1082f004 	addi	r2,r2,3008
    a47c:	1887883a 	add	r3,r3,r2
    a480:	e0ffff15 	stw	r3,-4(fp)
    a484:	00000106 	br	a48c <read+0x4c>
    a488:	e03fff15 	stw	zero,-4(fp)
    a48c:	e0bfff17 	ldw	r2,-4(fp)
    a490:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    a494:	e0bffa17 	ldw	r2,-24(fp)
    a498:	1005003a 	cmpeq	r2,r2,zero
    a49c:	1000241e 	bne	r2,zero,a530 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    a4a0:	e0bffa17 	ldw	r2,-24(fp)
    a4a4:	10800217 	ldw	r2,8(r2)
    a4a8:	108000cc 	andi	r2,r2,3
    a4ac:	10800060 	cmpeqi	r2,r2,1
    a4b0:	10001a1e 	bne	r2,zero,a51c <read+0xdc>
    a4b4:	e0bffa17 	ldw	r2,-24(fp)
    a4b8:	10800017 	ldw	r2,0(r2)
    a4bc:	10800517 	ldw	r2,20(r2)
    a4c0:	1005003a 	cmpeq	r2,r2,zero
    a4c4:	1000151e 	bne	r2,zero,a51c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    a4c8:	e0bffa17 	ldw	r2,-24(fp)
    a4cc:	10800017 	ldw	r2,0(r2)
    a4d0:	10800517 	ldw	r2,20(r2)
    a4d4:	e17ffc17 	ldw	r5,-16(fp)
    a4d8:	e1bffd17 	ldw	r6,-12(fp)
    a4dc:	e13ffa17 	ldw	r4,-24(fp)
    a4e0:	103ee83a 	callr	r2
    a4e4:	e0bff915 	stw	r2,-28(fp)
    a4e8:	e0bff917 	ldw	r2,-28(fp)
    a4ec:	1004403a 	cmpge	r2,r2,zero
    a4f0:	1000071e 	bne	r2,zero,a510 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    a4f4:	000a5600 	call	a560 <alt_get_errno>
    a4f8:	e0fff917 	ldw	r3,-28(fp)
    a4fc:	00c7c83a 	sub	r3,zero,r3
    a500:	10c00015 	stw	r3,0(r2)
          return -1;
    a504:	00bfffc4 	movi	r2,-1
    a508:	e0bffe15 	stw	r2,-8(fp)
    a50c:	00000e06 	br	a548 <read+0x108>
        }
        return rval;
    a510:	e0bff917 	ldw	r2,-28(fp)
    a514:	e0bffe15 	stw	r2,-8(fp)
    a518:	00000b06 	br	a548 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    a51c:	000a5600 	call	a560 <alt_get_errno>
    a520:	1007883a 	mov	r3,r2
    a524:	00800344 	movi	r2,13
    a528:	18800015 	stw	r2,0(r3)
    a52c:	00000406 	br	a540 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    a530:	000a5600 	call	a560 <alt_get_errno>
    a534:	1007883a 	mov	r3,r2
    a538:	00801444 	movi	r2,81
    a53c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    a540:	00bfffc4 	movi	r2,-1
    a544:	e0bffe15 	stw	r2,-8(fp)
    a548:	e0bffe17 	ldw	r2,-8(fp)
}
    a54c:	e037883a 	mov	sp,fp
    a550:	dfc00117 	ldw	ra,4(sp)
    a554:	df000017 	ldw	fp,0(sp)
    a558:	dec00204 	addi	sp,sp,8
    a55c:	f800283a 	ret

0000a560 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a560:	defffd04 	addi	sp,sp,-12
    a564:	dfc00215 	stw	ra,8(sp)
    a568:	df000115 	stw	fp,4(sp)
    a56c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a570:	008000f4 	movhi	r2,3
    a574:	10877304 	addi	r2,r2,7628
    a578:	10800017 	ldw	r2,0(r2)
    a57c:	1005003a 	cmpeq	r2,r2,zero
    a580:	1000061e 	bne	r2,zero,a59c <alt_get_errno+0x3c>
    a584:	008000f4 	movhi	r2,3
    a588:	10877304 	addi	r2,r2,7628
    a58c:	10800017 	ldw	r2,0(r2)
    a590:	103ee83a 	callr	r2
    a594:	e0bfff15 	stw	r2,-4(fp)
    a598:	00000306 	br	a5a8 <alt_get_errno+0x48>
    a59c:	008000f4 	movhi	r2,3
    a5a0:	10878304 	addi	r2,r2,7692
    a5a4:	e0bfff15 	stw	r2,-4(fp)
    a5a8:	e0bfff17 	ldw	r2,-4(fp)
}
    a5ac:	e037883a 	mov	sp,fp
    a5b0:	dfc00117 	ldw	ra,4(sp)
    a5b4:	df000017 	ldw	fp,0(sp)
    a5b8:	dec00204 	addi	sp,sp,8
    a5bc:	f800283a 	ret

0000a5c0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a5c0:	defffe04 	addi	sp,sp,-8
    a5c4:	df000115 	stw	fp,4(sp)
    a5c8:	df000104 	addi	fp,sp,4
    a5cc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a5d0:	e0bfff17 	ldw	r2,-4(fp)
    a5d4:	108000d0 	cmplti	r2,r2,3
    a5d8:	10000d1e 	bne	r2,zero,a610 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    a5dc:	e0bfff17 	ldw	r2,-4(fp)
    a5e0:	00c000f4 	movhi	r3,3
    a5e4:	18c2f004 	addi	r3,r3,3008
    a5e8:	10800324 	muli	r2,r2,12
    a5ec:	10c5883a 	add	r2,r2,r3
    a5f0:	10800204 	addi	r2,r2,8
    a5f4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a5f8:	e0bfff17 	ldw	r2,-4(fp)
    a5fc:	00c000f4 	movhi	r3,3
    a600:	18c2f004 	addi	r3,r3,3008
    a604:	10800324 	muli	r2,r2,12
    a608:	10c5883a 	add	r2,r2,r3
    a60c:	10000015 	stw	zero,0(r2)
  }
}
    a610:	e037883a 	mov	sp,fp
    a614:	df000017 	ldw	fp,0(sp)
    a618:	dec00104 	addi	sp,sp,4
    a61c:	f800283a 	ret

0000a620 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    a620:	defff804 	addi	sp,sp,-32
    a624:	df000715 	stw	fp,28(sp)
    a628:	df000704 	addi	fp,sp,28
    a62c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a630:	0005303a 	rdctl	r2,status
    a634:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a638:	e0fffb17 	ldw	r3,-20(fp)
    a63c:	00bfff84 	movi	r2,-2
    a640:	1884703a 	and	r2,r3,r2
    a644:	1001703a 	wrctl	status,r2
  
  return context;
    a648:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    a64c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    a650:	d0a00c17 	ldw	r2,-32720(gp)
    a654:	10c000c4 	addi	r3,r2,3
    a658:	00bfff04 	movi	r2,-4
    a65c:	1884703a 	and	r2,r3,r2
    a660:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    a664:	d0e00c17 	ldw	r3,-32720(gp)
    a668:	e0bffe17 	ldw	r2,-8(fp)
    a66c:	1887883a 	add	r3,r3,r2
    a670:	00800134 	movhi	r2,4
    a674:	10a00004 	addi	r2,r2,-32768
    a678:	10c0072e 	bgeu	r2,r3,a698 <sbrk+0x78>
    a67c:	e0bffd17 	ldw	r2,-12(fp)
    a680:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a684:	e0bffa17 	ldw	r2,-24(fp)
    a688:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    a68c:	00bfffc4 	movi	r2,-1
    a690:	e0bfff15 	stw	r2,-4(fp)
    a694:	00000c06 	br	a6c8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    a698:	d0a00c17 	ldw	r2,-32720(gp)
    a69c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    a6a0:	d0e00c17 	ldw	r3,-32720(gp)
    a6a4:	e0bffe17 	ldw	r2,-8(fp)
    a6a8:	1885883a 	add	r2,r3,r2
    a6ac:	d0a00c15 	stw	r2,-32720(gp)
    a6b0:	e0bffd17 	ldw	r2,-12(fp)
    a6b4:	e0bff915 	stw	r2,-28(fp)
    a6b8:	e0bff917 	ldw	r2,-28(fp)
    a6bc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    a6c0:	e0bffc17 	ldw	r2,-16(fp)
    a6c4:	e0bfff15 	stw	r2,-4(fp)
    a6c8:	e0bfff17 	ldw	r2,-4(fp)
} 
    a6cc:	e037883a 	mov	sp,fp
    a6d0:	df000017 	ldw	fp,0(sp)
    a6d4:	dec00104 	addi	sp,sp,4
    a6d8:	f800283a 	ret

0000a6dc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    a6dc:	defff704 	addi	sp,sp,-36
    a6e0:	dfc00815 	stw	ra,32(sp)
    a6e4:	df000715 	stw	fp,28(sp)
    a6e8:	df000704 	addi	fp,sp,28
    a6ec:	e13ffb15 	stw	r4,-20(fp)
    a6f0:	e17ffc15 	stw	r5,-16(fp)
    a6f4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a6f8:	e0bffb17 	ldw	r2,-20(fp)
    a6fc:	1004803a 	cmplt	r2,r2,zero
    a700:	1000081e 	bne	r2,zero,a724 <write+0x48>
    a704:	e0bffb17 	ldw	r2,-20(fp)
    a708:	10800324 	muli	r2,r2,12
    a70c:	1007883a 	mov	r3,r2
    a710:	008000f4 	movhi	r2,3
    a714:	1082f004 	addi	r2,r2,3008
    a718:	1887883a 	add	r3,r3,r2
    a71c:	e0ffff15 	stw	r3,-4(fp)
    a720:	00000106 	br	a728 <write+0x4c>
    a724:	e03fff15 	stw	zero,-4(fp)
    a728:	e0bfff17 	ldw	r2,-4(fp)
    a72c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    a730:	e0bffa17 	ldw	r2,-24(fp)
    a734:	1005003a 	cmpeq	r2,r2,zero
    a738:	1000241e 	bne	r2,zero,a7cc <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    a73c:	e0bffa17 	ldw	r2,-24(fp)
    a740:	10800217 	ldw	r2,8(r2)
    a744:	108000cc 	andi	r2,r2,3
    a748:	1005003a 	cmpeq	r2,r2,zero
    a74c:	10001a1e 	bne	r2,zero,a7b8 <write+0xdc>
    a750:	e0bffa17 	ldw	r2,-24(fp)
    a754:	10800017 	ldw	r2,0(r2)
    a758:	10800617 	ldw	r2,24(r2)
    a75c:	1005003a 	cmpeq	r2,r2,zero
    a760:	1000151e 	bne	r2,zero,a7b8 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    a764:	e0bffa17 	ldw	r2,-24(fp)
    a768:	10800017 	ldw	r2,0(r2)
    a76c:	10800617 	ldw	r2,24(r2)
    a770:	e17ffc17 	ldw	r5,-16(fp)
    a774:	e1bffd17 	ldw	r6,-12(fp)
    a778:	e13ffa17 	ldw	r4,-24(fp)
    a77c:	103ee83a 	callr	r2
    a780:	e0bff915 	stw	r2,-28(fp)
    a784:	e0bff917 	ldw	r2,-28(fp)
    a788:	1004403a 	cmpge	r2,r2,zero
    a78c:	1000071e 	bne	r2,zero,a7ac <write+0xd0>
      {
        ALT_ERRNO = -rval;
    a790:	000a7fc0 	call	a7fc <alt_get_errno>
    a794:	e0fff917 	ldw	r3,-28(fp)
    a798:	00c7c83a 	sub	r3,zero,r3
    a79c:	10c00015 	stw	r3,0(r2)
        return -1;
    a7a0:	00bfffc4 	movi	r2,-1
    a7a4:	e0bffe15 	stw	r2,-8(fp)
    a7a8:	00000e06 	br	a7e4 <write+0x108>
      }
      return rval;
    a7ac:	e0bff917 	ldw	r2,-28(fp)
    a7b0:	e0bffe15 	stw	r2,-8(fp)
    a7b4:	00000b06 	br	a7e4 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    a7b8:	000a7fc0 	call	a7fc <alt_get_errno>
    a7bc:	1007883a 	mov	r3,r2
    a7c0:	00800344 	movi	r2,13
    a7c4:	18800015 	stw	r2,0(r3)
    a7c8:	00000406 	br	a7dc <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    a7cc:	000a7fc0 	call	a7fc <alt_get_errno>
    a7d0:	1007883a 	mov	r3,r2
    a7d4:	00801444 	movi	r2,81
    a7d8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    a7dc:	00bfffc4 	movi	r2,-1
    a7e0:	e0bffe15 	stw	r2,-8(fp)
    a7e4:	e0bffe17 	ldw	r2,-8(fp)
}
    a7e8:	e037883a 	mov	sp,fp
    a7ec:	dfc00117 	ldw	ra,4(sp)
    a7f0:	df000017 	ldw	fp,0(sp)
    a7f4:	dec00204 	addi	sp,sp,8
    a7f8:	f800283a 	ret

0000a7fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a7fc:	defffd04 	addi	sp,sp,-12
    a800:	dfc00215 	stw	ra,8(sp)
    a804:	df000115 	stw	fp,4(sp)
    a808:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a80c:	008000f4 	movhi	r2,3
    a810:	10877304 	addi	r2,r2,7628
    a814:	10800017 	ldw	r2,0(r2)
    a818:	1005003a 	cmpeq	r2,r2,zero
    a81c:	1000061e 	bne	r2,zero,a838 <alt_get_errno+0x3c>
    a820:	008000f4 	movhi	r2,3
    a824:	10877304 	addi	r2,r2,7628
    a828:	10800017 	ldw	r2,0(r2)
    a82c:	103ee83a 	callr	r2
    a830:	e0bfff15 	stw	r2,-4(fp)
    a834:	00000306 	br	a844 <alt_get_errno+0x48>
    a838:	008000f4 	movhi	r2,3
    a83c:	10878304 	addi	r2,r2,7692
    a840:	e0bfff15 	stw	r2,-4(fp)
    a844:	e0bfff17 	ldw	r2,-4(fp)
}
    a848:	e037883a 	mov	sp,fp
    a84c:	dfc00117 	ldw	ra,4(sp)
    a850:	df000017 	ldw	fp,0(sp)
    a854:	dec00204 	addi	sp,sp,8
    a858:	f800283a 	ret

0000a85c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    a85c:	defffd04 	addi	sp,sp,-12
    a860:	dfc00215 	stw	ra,8(sp)
    a864:	df000115 	stw	fp,4(sp)
    a868:	df000104 	addi	fp,sp,4
    a86c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU0, cpu0);
    a870:	000c0bc0 	call	c0bc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    a874:	00800044 	movi	r2,1
    a878:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    a87c:	e037883a 	mov	sp,fp
    a880:	dfc00117 	ldw	ra,4(sp)
    a884:	df000017 	ldw	fp,0(sp)
    a888:	dec00204 	addi	sp,sp,8
    a88c:	f800283a 	ret

0000a890 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    a890:	defffe04 	addi	sp,sp,-8
    a894:	dfc00115 	stw	ra,4(sp)
    a898:	df000015 	stw	fp,0(sp)
    a89c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    a8a0:	01000134 	movhi	r4,4
    a8a4:	21240004 	addi	r4,r4,-28672
    a8a8:	000b883a 	mov	r5,zero
    a8ac:	01800044 	movi	r6,1
    a8b0:	01c0fa04 	movi	r7,1000
    a8b4:	000b4400 	call	b440 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    a8b8:	010000f4 	movhi	r4,3
    a8bc:	21035a04 	addi	r4,r4,3432
    a8c0:	000b883a 	mov	r5,zero
    a8c4:	01800404 	movi	r6,16
    a8c8:	000aa6c0 	call	aa6c <altera_avalon_jtag_uart_init>
    a8cc:	010000f4 	movhi	r4,3
    a8d0:	21035004 	addi	r4,r4,3392
    a8d4:	000a8ec0 	call	a8ec <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
    a8d8:	e037883a 	mov	sp,fp
    a8dc:	dfc00117 	ldw	ra,4(sp)
    a8e0:	df000017 	ldw	fp,0(sp)
    a8e4:	dec00204 	addi	sp,sp,8
    a8e8:	f800283a 	ret

0000a8ec <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    a8ec:	defffd04 	addi	sp,sp,-12
    a8f0:	dfc00215 	stw	ra,8(sp)
    a8f4:	df000115 	stw	fp,4(sp)
    a8f8:	df000104 	addi	fp,sp,4
    a8fc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    a900:	e13fff17 	ldw	r4,-4(fp)
    a904:	014000f4 	movhi	r5,3
    a908:	29477004 	addi	r5,r5,7616
    a90c:	000b6400 	call	b640 <alt_dev_llist_insert>
}
    a910:	e037883a 	mov	sp,fp
    a914:	dfc00117 	ldw	ra,4(sp)
    a918:	df000017 	ldw	fp,0(sp)
    a91c:	dec00204 	addi	sp,sp,8
    a920:	f800283a 	ret

0000a924 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    a924:	defffa04 	addi	sp,sp,-24
    a928:	dfc00515 	stw	ra,20(sp)
    a92c:	df000415 	stw	fp,16(sp)
    a930:	df000404 	addi	fp,sp,16
    a934:	e13ffd15 	stw	r4,-12(fp)
    a938:	e17ffe15 	stw	r5,-8(fp)
    a93c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a940:	e0bffd17 	ldw	r2,-12(fp)
    a944:	10800017 	ldw	r2,0(r2)
    a948:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    a94c:	e0bffc17 	ldw	r2,-16(fp)
    a950:	11000a04 	addi	r4,r2,40
    a954:	e0bffd17 	ldw	r2,-12(fp)
    a958:	11c00217 	ldw	r7,8(r2)
    a95c:	e17ffe17 	ldw	r5,-8(fp)
    a960:	e1bfff17 	ldw	r6,-4(fp)
    a964:	000af6c0 	call	af6c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    a968:	e037883a 	mov	sp,fp
    a96c:	dfc00117 	ldw	ra,4(sp)
    a970:	df000017 	ldw	fp,0(sp)
    a974:	dec00204 	addi	sp,sp,8
    a978:	f800283a 	ret

0000a97c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    a97c:	defffa04 	addi	sp,sp,-24
    a980:	dfc00515 	stw	ra,20(sp)
    a984:	df000415 	stw	fp,16(sp)
    a988:	df000404 	addi	fp,sp,16
    a98c:	e13ffd15 	stw	r4,-12(fp)
    a990:	e17ffe15 	stw	r5,-8(fp)
    a994:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a998:	e0bffd17 	ldw	r2,-12(fp)
    a99c:	10800017 	ldw	r2,0(r2)
    a9a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    a9a4:	e0bffc17 	ldw	r2,-16(fp)
    a9a8:	11000a04 	addi	r4,r2,40
    a9ac:	e0bffd17 	ldw	r2,-12(fp)
    a9b0:	11c00217 	ldw	r7,8(r2)
    a9b4:	e17ffe17 	ldw	r5,-8(fp)
    a9b8:	e1bfff17 	ldw	r6,-4(fp)
    a9bc:	000b1900 	call	b190 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    a9c0:	e037883a 	mov	sp,fp
    a9c4:	dfc00117 	ldw	ra,4(sp)
    a9c8:	df000017 	ldw	fp,0(sp)
    a9cc:	dec00204 	addi	sp,sp,8
    a9d0:	f800283a 	ret

0000a9d4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    a9d4:	defffc04 	addi	sp,sp,-16
    a9d8:	dfc00315 	stw	ra,12(sp)
    a9dc:	df000215 	stw	fp,8(sp)
    a9e0:	df000204 	addi	fp,sp,8
    a9e4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a9e8:	e0bfff17 	ldw	r2,-4(fp)
    a9ec:	10800017 	ldw	r2,0(r2)
    a9f0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    a9f4:	e0bffe17 	ldw	r2,-8(fp)
    a9f8:	11000a04 	addi	r4,r2,40
    a9fc:	e0bfff17 	ldw	r2,-4(fp)
    aa00:	11400217 	ldw	r5,8(r2)
    aa04:	000ae040 	call	ae04 <altera_avalon_jtag_uart_close>
}
    aa08:	e037883a 	mov	sp,fp
    aa0c:	dfc00117 	ldw	ra,4(sp)
    aa10:	df000017 	ldw	fp,0(sp)
    aa14:	dec00204 	addi	sp,sp,8
    aa18:	f800283a 	ret

0000aa1c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    aa1c:	defffa04 	addi	sp,sp,-24
    aa20:	dfc00515 	stw	ra,20(sp)
    aa24:	df000415 	stw	fp,16(sp)
    aa28:	df000404 	addi	fp,sp,16
    aa2c:	e13ffd15 	stw	r4,-12(fp)
    aa30:	e17ffe15 	stw	r5,-8(fp)
    aa34:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    aa38:	e0bffd17 	ldw	r2,-12(fp)
    aa3c:	10800017 	ldw	r2,0(r2)
    aa40:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    aa44:	e0bffc17 	ldw	r2,-16(fp)
    aa48:	11000a04 	addi	r4,r2,40
    aa4c:	e17ffe17 	ldw	r5,-8(fp)
    aa50:	e1bfff17 	ldw	r6,-4(fp)
    aa54:	000ae780 	call	ae78 <altera_avalon_jtag_uart_ioctl>
}
    aa58:	e037883a 	mov	sp,fp
    aa5c:	dfc00117 	ldw	ra,4(sp)
    aa60:	df000017 	ldw	fp,0(sp)
    aa64:	dec00204 	addi	sp,sp,8
    aa68:	f800283a 	ret

0000aa6c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    aa6c:	defffa04 	addi	sp,sp,-24
    aa70:	dfc00515 	stw	ra,20(sp)
    aa74:	df000415 	stw	fp,16(sp)
    aa78:	df000404 	addi	fp,sp,16
    aa7c:	e13ffd15 	stw	r4,-12(fp)
    aa80:	e17ffe15 	stw	r5,-8(fp)
    aa84:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    aa88:	e0fffd17 	ldw	r3,-12(fp)
    aa8c:	00800044 	movi	r2,1
    aa90:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    aa94:	e0bffd17 	ldw	r2,-12(fp)
    aa98:	10800017 	ldw	r2,0(r2)
    aa9c:	11000104 	addi	r4,r2,4
    aaa0:	e0bffd17 	ldw	r2,-12(fp)
    aaa4:	10800817 	ldw	r2,32(r2)
    aaa8:	1007883a 	mov	r3,r2
    aaac:	2005883a 	mov	r2,r4
    aab0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    aab4:	e13ffe17 	ldw	r4,-8(fp)
    aab8:	e17fff17 	ldw	r5,-4(fp)
    aabc:	d8000015 	stw	zero,0(sp)
    aac0:	01800074 	movhi	r6,1
    aac4:	31aacb04 	addi	r6,r6,-21716
    aac8:	e1fffd17 	ldw	r7,-12(fp)
    aacc:	000b84c0 	call	b84c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    aad0:	e0bffd17 	ldw	r2,-12(fp)
    aad4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    aad8:	e0bffd17 	ldw	r2,-12(fp)
    aadc:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    aae0:	008000f4 	movhi	r2,3
    aae4:	10878804 	addi	r2,r2,7712
    aae8:	10800017 	ldw	r2,0(r2)
    aaec:	100b883a 	mov	r5,r2
    aaf0:	01800074 	movhi	r6,1
    aaf4:	31ab5504 	addi	r6,r6,-21164
    aaf8:	e1fffd17 	ldw	r7,-12(fp)
    aafc:	000b4d00 	call	b4d0 <alt_alarm_start>
    ab00:	1004403a 	cmpge	r2,r2,zero
    ab04:	1000041e 	bne	r2,zero,ab18 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    ab08:	e0fffd17 	ldw	r3,-12(fp)
    ab0c:	00a00034 	movhi	r2,32768
    ab10:	10bfffc4 	addi	r2,r2,-1
    ab14:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    ab18:	e037883a 	mov	sp,fp
    ab1c:	dfc00117 	ldw	ra,4(sp)
    ab20:	df000017 	ldw	fp,0(sp)
    ab24:	dec00204 	addi	sp,sp,8
    ab28:	f800283a 	ret

0000ab2c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    ab2c:	defff804 	addi	sp,sp,-32
    ab30:	df000715 	stw	fp,28(sp)
    ab34:	df000704 	addi	fp,sp,28
    ab38:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    ab3c:	e0bfff17 	ldw	r2,-4(fp)
    ab40:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    ab44:	e0bffe17 	ldw	r2,-8(fp)
    ab48:	10800017 	ldw	r2,0(r2)
    ab4c:	e0bffd15 	stw	r2,-12(fp)
    ab50:	00000006 	br	ab54 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ab54:	e0bffd17 	ldw	r2,-12(fp)
    ab58:	10800104 	addi	r2,r2,4
    ab5c:	10800037 	ldwio	r2,0(r2)
    ab60:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    ab64:	e0bffc17 	ldw	r2,-16(fp)
    ab68:	1080c00c 	andi	r2,r2,768
    ab6c:	1005003a 	cmpeq	r2,r2,zero
    ab70:	1000741e 	bne	r2,zero,ad44 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    ab74:	e0bffc17 	ldw	r2,-16(fp)
    ab78:	1080400c 	andi	r2,r2,256
    ab7c:	1005003a 	cmpeq	r2,r2,zero
    ab80:	1000351e 	bne	r2,zero,ac58 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    ab84:	00800074 	movhi	r2,1
    ab88:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ab8c:	e0bffe17 	ldw	r2,-8(fp)
    ab90:	10800a17 	ldw	r2,40(r2)
    ab94:	10800044 	addi	r2,r2,1
    ab98:	1081ffcc 	andi	r2,r2,2047
    ab9c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    aba0:	e0bffe17 	ldw	r2,-8(fp)
    aba4:	10c00b17 	ldw	r3,44(r2)
    aba8:	e0bffa17 	ldw	r2,-24(fp)
    abac:	18801626 	beq	r3,r2,ac08 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    abb0:	e0bffd17 	ldw	r2,-12(fp)
    abb4:	10800037 	ldwio	r2,0(r2)
    abb8:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    abbc:	e0bffb17 	ldw	r2,-20(fp)
    abc0:	10a0000c 	andi	r2,r2,32768
    abc4:	1005003a 	cmpeq	r2,r2,zero
    abc8:	10000f1e 	bne	r2,zero,ac08 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    abcc:	e0bffe17 	ldw	r2,-8(fp)
    abd0:	10c00a17 	ldw	r3,40(r2)
    abd4:	e0bffb17 	ldw	r2,-20(fp)
    abd8:	1009883a 	mov	r4,r2
    abdc:	e0bffe17 	ldw	r2,-8(fp)
    abe0:	1885883a 	add	r2,r3,r2
    abe4:	10800e04 	addi	r2,r2,56
    abe8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    abec:	e0bffe17 	ldw	r2,-8(fp)
    abf0:	10800a17 	ldw	r2,40(r2)
    abf4:	10800044 	addi	r2,r2,1
    abf8:	10c1ffcc 	andi	r3,r2,2047
    abfc:	e0bffe17 	ldw	r2,-8(fp)
    ac00:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    ac04:	003fe106 	br	ab8c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    ac08:	e0bffb17 	ldw	r2,-20(fp)
    ac0c:	10bfffec 	andhi	r2,r2,65535
    ac10:	1005003a 	cmpeq	r2,r2,zero
    ac14:	1000101e 	bne	r2,zero,ac58 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ac18:	e0bffe17 	ldw	r2,-8(fp)
    ac1c:	10c00817 	ldw	r3,32(r2)
    ac20:	00bfff84 	movi	r2,-2
    ac24:	1886703a 	and	r3,r3,r2
    ac28:	e0bffe17 	ldw	r2,-8(fp)
    ac2c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    ac30:	e0bffd17 	ldw	r2,-12(fp)
    ac34:	11000104 	addi	r4,r2,4
    ac38:	e0bffe17 	ldw	r2,-8(fp)
    ac3c:	10800817 	ldw	r2,32(r2)
    ac40:	1007883a 	mov	r3,r2
    ac44:	2005883a 	mov	r2,r4
    ac48:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ac4c:	e0bffd17 	ldw	r2,-12(fp)
    ac50:	10800104 	addi	r2,r2,4
    ac54:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    ac58:	e0bffc17 	ldw	r2,-16(fp)
    ac5c:	1080800c 	andi	r2,r2,512
    ac60:	1005003a 	cmpeq	r2,r2,zero
    ac64:	103fbb1e 	bne	r2,zero,ab54 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    ac68:	e0bffc17 	ldw	r2,-16(fp)
    ac6c:	10bfffec 	andhi	r2,r2,65535
    ac70:	1004d43a 	srli	r2,r2,16
    ac74:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    ac78:	00001506 	br	acd0 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    ac7c:	e13ffd17 	ldw	r4,-12(fp)
    ac80:	e0bffe17 	ldw	r2,-8(fp)
    ac84:	10c00d17 	ldw	r3,52(r2)
    ac88:	e0bffe17 	ldw	r2,-8(fp)
    ac8c:	1885883a 	add	r2,r3,r2
    ac90:	10820e04 	addi	r2,r2,2104
    ac94:	10800003 	ldbu	r2,0(r2)
    ac98:	10c03fcc 	andi	r3,r2,255
    ac9c:	18c0201c 	xori	r3,r3,128
    aca0:	18ffe004 	addi	r3,r3,-128
    aca4:	2005883a 	mov	r2,r4
    aca8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    acac:	e0bffe17 	ldw	r2,-8(fp)
    acb0:	10800d17 	ldw	r2,52(r2)
    acb4:	10800044 	addi	r2,r2,1
    acb8:	10c1ffcc 	andi	r3,r2,2047
    acbc:	e0bffe17 	ldw	r2,-8(fp)
    acc0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    acc4:	e0bff917 	ldw	r2,-28(fp)
    acc8:	10bfffc4 	addi	r2,r2,-1
    accc:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    acd0:	e0bff917 	ldw	r2,-28(fp)
    acd4:	1005003a 	cmpeq	r2,r2,zero
    acd8:	1000051e 	bne	r2,zero,acf0 <altera_avalon_jtag_uart_irq+0x1c4>
    acdc:	e0bffe17 	ldw	r2,-8(fp)
    ace0:	10c00d17 	ldw	r3,52(r2)
    ace4:	e0bffe17 	ldw	r2,-8(fp)
    ace8:	10800c17 	ldw	r2,48(r2)
    acec:	18bfe31e 	bne	r3,r2,ac7c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    acf0:	e0bff917 	ldw	r2,-28(fp)
    acf4:	1005003a 	cmpeq	r2,r2,zero
    acf8:	103f961e 	bne	r2,zero,ab54 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    acfc:	e0bffe17 	ldw	r2,-8(fp)
    ad00:	10c00817 	ldw	r3,32(r2)
    ad04:	00bfff44 	movi	r2,-3
    ad08:	1886703a 	and	r3,r3,r2
    ad0c:	e0bffe17 	ldw	r2,-8(fp)
    ad10:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ad14:	e0bffe17 	ldw	r2,-8(fp)
    ad18:	10800017 	ldw	r2,0(r2)
    ad1c:	11000104 	addi	r4,r2,4
    ad20:	e0bffe17 	ldw	r2,-8(fp)
    ad24:	10800817 	ldw	r2,32(r2)
    ad28:	1007883a 	mov	r3,r2
    ad2c:	2005883a 	mov	r2,r4
    ad30:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ad34:	e0bffd17 	ldw	r2,-12(fp)
    ad38:	10800104 	addi	r2,r2,4
    ad3c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    ad40:	003f8406 	br	ab54 <altera_avalon_jtag_uart_irq+0x28>
}
    ad44:	e037883a 	mov	sp,fp
    ad48:	df000017 	ldw	fp,0(sp)
    ad4c:	dec00104 	addi	sp,sp,4
    ad50:	f800283a 	ret

0000ad54 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    ad54:	defffc04 	addi	sp,sp,-16
    ad58:	df000315 	stw	fp,12(sp)
    ad5c:	df000304 	addi	fp,sp,12
    ad60:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    ad64:	e0bfff17 	ldw	r2,-4(fp)
    ad68:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    ad6c:	e0bffe17 	ldw	r2,-8(fp)
    ad70:	10800017 	ldw	r2,0(r2)
    ad74:	10800104 	addi	r2,r2,4
    ad78:	10800037 	ldwio	r2,0(r2)
    ad7c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    ad80:	e0bffd17 	ldw	r2,-12(fp)
    ad84:	1081000c 	andi	r2,r2,1024
    ad88:	1005003a 	cmpeq	r2,r2,zero
    ad8c:	10000c1e 	bne	r2,zero,adc0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    ad90:	e0bffe17 	ldw	r2,-8(fp)
    ad94:	10800017 	ldw	r2,0(r2)
    ad98:	11000104 	addi	r4,r2,4
    ad9c:	e0bffe17 	ldw	r2,-8(fp)
    ada0:	10800817 	ldw	r2,32(r2)
    ada4:	10810014 	ori	r2,r2,1024
    ada8:	1007883a 	mov	r3,r2
    adac:	2005883a 	mov	r2,r4
    adb0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    adb4:	e0bffe17 	ldw	r2,-8(fp)
    adb8:	10000915 	stw	zero,36(r2)
    adbc:	00000a06 	br	ade8 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    adc0:	e0bffe17 	ldw	r2,-8(fp)
    adc4:	10c00917 	ldw	r3,36(r2)
    adc8:	00a00034 	movhi	r2,32768
    adcc:	10bfff04 	addi	r2,r2,-4
    add0:	10c00536 	bltu	r2,r3,ade8 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    add4:	e0bffe17 	ldw	r2,-8(fp)
    add8:	10800917 	ldw	r2,36(r2)
    addc:	10c00044 	addi	r3,r2,1
    ade0:	e0bffe17 	ldw	r2,-8(fp)
    ade4:	10c00915 	stw	r3,36(r2)
    ade8:	008000f4 	movhi	r2,3
    adec:	10878804 	addi	r2,r2,7712
    adf0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    adf4:	e037883a 	mov	sp,fp
    adf8:	df000017 	ldw	fp,0(sp)
    adfc:	dec00104 	addi	sp,sp,4
    ae00:	f800283a 	ret

0000ae04 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    ae04:	defffc04 	addi	sp,sp,-16
    ae08:	df000315 	stw	fp,12(sp)
    ae0c:	df000304 	addi	fp,sp,12
    ae10:	e13ffd15 	stw	r4,-12(fp)
    ae14:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ae18:	00000706 	br	ae38 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    ae1c:	e0bffe17 	ldw	r2,-8(fp)
    ae20:	1090000c 	andi	r2,r2,16384
    ae24:	1005003a 	cmpeq	r2,r2,zero
    ae28:	1000031e 	bne	r2,zero,ae38 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    ae2c:	00bffd44 	movi	r2,-11
    ae30:	e0bfff15 	stw	r2,-4(fp)
    ae34:	00000b06 	br	ae64 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ae38:	e0bffd17 	ldw	r2,-12(fp)
    ae3c:	10c00d17 	ldw	r3,52(r2)
    ae40:	e0bffd17 	ldw	r2,-12(fp)
    ae44:	10800c17 	ldw	r2,48(r2)
    ae48:	18800526 	beq	r3,r2,ae60 <altera_avalon_jtag_uart_close+0x5c>
    ae4c:	e0bffd17 	ldw	r2,-12(fp)
    ae50:	10c00917 	ldw	r3,36(r2)
    ae54:	e0bffd17 	ldw	r2,-12(fp)
    ae58:	10800117 	ldw	r2,4(r2)
    ae5c:	18bfef36 	bltu	r3,r2,ae1c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    ae60:	e03fff15 	stw	zero,-4(fp)
    ae64:	e0bfff17 	ldw	r2,-4(fp)
}
    ae68:	e037883a 	mov	sp,fp
    ae6c:	df000017 	ldw	fp,0(sp)
    ae70:	dec00104 	addi	sp,sp,4
    ae74:	f800283a 	ret

0000ae78 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    ae78:	defff804 	addi	sp,sp,-32
    ae7c:	df000715 	stw	fp,28(sp)
    ae80:	df000704 	addi	fp,sp,28
    ae84:	e13ffb15 	stw	r4,-20(fp)
    ae88:	e17ffc15 	stw	r5,-16(fp)
    ae8c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    ae90:	00bff9c4 	movi	r2,-25
    ae94:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    ae98:	e0bffc17 	ldw	r2,-16(fp)
    ae9c:	e0bfff15 	stw	r2,-4(fp)
    aea0:	e0ffff17 	ldw	r3,-4(fp)
    aea4:	189a8060 	cmpeqi	r2,r3,27137
    aea8:	1000041e 	bne	r2,zero,aebc <altera_avalon_jtag_uart_ioctl+0x44>
    aeac:	e0ffff17 	ldw	r3,-4(fp)
    aeb0:	189a80a0 	cmpeqi	r2,r3,27138
    aeb4:	10001b1e 	bne	r2,zero,af24 <altera_avalon_jtag_uart_ioctl+0xac>
    aeb8:	00002706 	br	af58 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    aebc:	e0bffb17 	ldw	r2,-20(fp)
    aec0:	10c00117 	ldw	r3,4(r2)
    aec4:	00a00034 	movhi	r2,32768
    aec8:	10bfffc4 	addi	r2,r2,-1
    aecc:	18802226 	beq	r3,r2,af58 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    aed0:	e0bffd17 	ldw	r2,-12(fp)
    aed4:	10800017 	ldw	r2,0(r2)
    aed8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    aedc:	e0bff917 	ldw	r2,-28(fp)
    aee0:	10800090 	cmplti	r2,r2,2
    aee4:	1000071e 	bne	r2,zero,af04 <altera_avalon_jtag_uart_ioctl+0x8c>
    aee8:	e0fff917 	ldw	r3,-28(fp)
    aeec:	00a00034 	movhi	r2,32768
    aef0:	10bfffc4 	addi	r2,r2,-1
    aef4:	18800326 	beq	r3,r2,af04 <altera_avalon_jtag_uart_ioctl+0x8c>
    aef8:	e0bff917 	ldw	r2,-28(fp)
    aefc:	e0bffe15 	stw	r2,-8(fp)
    af00:	00000306 	br	af10 <altera_avalon_jtag_uart_ioctl+0x98>
    af04:	00e00034 	movhi	r3,32768
    af08:	18ffff84 	addi	r3,r3,-2
    af0c:	e0fffe15 	stw	r3,-8(fp)
    af10:	e0bffb17 	ldw	r2,-20(fp)
    af14:	e0fffe17 	ldw	r3,-8(fp)
    af18:	10c00115 	stw	r3,4(r2)
      rc = 0;
    af1c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    af20:	00000d06 	br	af58 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    af24:	e0bffb17 	ldw	r2,-20(fp)
    af28:	10c00117 	ldw	r3,4(r2)
    af2c:	00a00034 	movhi	r2,32768
    af30:	10bfffc4 	addi	r2,r2,-1
    af34:	18800826 	beq	r3,r2,af58 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    af38:	e13ffd17 	ldw	r4,-12(fp)
    af3c:	e0bffb17 	ldw	r2,-20(fp)
    af40:	10c00917 	ldw	r3,36(r2)
    af44:	e0bffb17 	ldw	r2,-20(fp)
    af48:	10800117 	ldw	r2,4(r2)
    af4c:	1885803a 	cmpltu	r2,r3,r2
    af50:	20800015 	stw	r2,0(r4)
      rc = 0;
    af54:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    af58:	e0bffa17 	ldw	r2,-24(fp)
}
    af5c:	e037883a 	mov	sp,fp
    af60:	df000017 	ldw	fp,0(sp)
    af64:	dec00104 	addi	sp,sp,4
    af68:	f800283a 	ret

0000af6c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    af6c:	defff204 	addi	sp,sp,-56
    af70:	dfc00d15 	stw	ra,52(sp)
    af74:	df000c15 	stw	fp,48(sp)
    af78:	df000c04 	addi	fp,sp,48
    af7c:	e13ffb15 	stw	r4,-20(fp)
    af80:	e17ffc15 	stw	r5,-16(fp)
    af84:	e1bffd15 	stw	r6,-12(fp)
    af88:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    af8c:	e0bffc17 	ldw	r2,-16(fp)
    af90:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    af94:	00004806 	br	b0b8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    af98:	e0bffb17 	ldw	r2,-20(fp)
    af9c:	10800a17 	ldw	r2,40(r2)
    afa0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    afa4:	e0bffb17 	ldw	r2,-20(fp)
    afa8:	10800b17 	ldw	r2,44(r2)
    afac:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    afb0:	e0fff717 	ldw	r3,-36(fp)
    afb4:	e0bff617 	ldw	r2,-40(fp)
    afb8:	18800536 	bltu	r3,r2,afd0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    afbc:	e0bff717 	ldw	r2,-36(fp)
    afc0:	e0fff617 	ldw	r3,-40(fp)
    afc4:	10c5c83a 	sub	r2,r2,r3
    afc8:	e0bff815 	stw	r2,-32(fp)
    afcc:	00000406 	br	afe0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    afd0:	00820004 	movi	r2,2048
    afd4:	e0fff617 	ldw	r3,-40(fp)
    afd8:	10c5c83a 	sub	r2,r2,r3
    afdc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    afe0:	e0bff817 	ldw	r2,-32(fp)
    afe4:	1005003a 	cmpeq	r2,r2,zero
    afe8:	10001f1e 	bne	r2,zero,b068 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    afec:	e0fffd17 	ldw	r3,-12(fp)
    aff0:	e0bff817 	ldw	r2,-32(fp)
    aff4:	1880022e 	bgeu	r3,r2,b000 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    aff8:	e0bffd17 	ldw	r2,-12(fp)
    affc:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    b000:	e0bffb17 	ldw	r2,-20(fp)
    b004:	10c00e04 	addi	r3,r2,56
    b008:	e0bff617 	ldw	r2,-40(fp)
    b00c:	1887883a 	add	r3,r3,r2
    b010:	e0bffa17 	ldw	r2,-24(fp)
    b014:	1009883a 	mov	r4,r2
    b018:	180b883a 	mov	r5,r3
    b01c:	e1bff817 	ldw	r6,-32(fp)
    b020:	00059d00 	call	59d0 <memcpy>
      ptr   += n;
    b024:	e0fff817 	ldw	r3,-32(fp)
    b028:	e0bffa17 	ldw	r2,-24(fp)
    b02c:	10c5883a 	add	r2,r2,r3
    b030:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    b034:	e0fffd17 	ldw	r3,-12(fp)
    b038:	e0bff817 	ldw	r2,-32(fp)
    b03c:	1885c83a 	sub	r2,r3,r2
    b040:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b044:	e0fff617 	ldw	r3,-40(fp)
    b048:	e0bff817 	ldw	r2,-32(fp)
    b04c:	1885883a 	add	r2,r3,r2
    b050:	10c1ffcc 	andi	r3,r2,2047
    b054:	e0bffb17 	ldw	r2,-20(fp)
    b058:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    b05c:	e0bffd17 	ldw	r2,-12(fp)
    b060:	10800048 	cmpgei	r2,r2,1
    b064:	103fcc1e 	bne	r2,zero,af98 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    b068:	e0fffa17 	ldw	r3,-24(fp)
    b06c:	e0bffc17 	ldw	r2,-16(fp)
    b070:	1880141e 	bne	r3,r2,b0c4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    b074:	e0bffe17 	ldw	r2,-8(fp)
    b078:	1090000c 	andi	r2,r2,16384
    b07c:	1004c03a 	cmpne	r2,r2,zero
    b080:	1000101e 	bne	r2,zero,b0c4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    b084:	e0bffb17 	ldw	r2,-20(fp)
    b088:	10c00a17 	ldw	r3,40(r2)
    b08c:	e0bff717 	ldw	r2,-36(fp)
    b090:	1880051e 	bne	r3,r2,b0a8 <altera_avalon_jtag_uart_read+0x13c>
    b094:	e0bffb17 	ldw	r2,-20(fp)
    b098:	10c00917 	ldw	r3,36(r2)
    b09c:	e0bffb17 	ldw	r2,-20(fp)
    b0a0:	10800117 	ldw	r2,4(r2)
    b0a4:	18bff736 	bltu	r3,r2,b084 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    b0a8:	e0bffb17 	ldw	r2,-20(fp)
    b0ac:	10c00a17 	ldw	r3,40(r2)
    b0b0:	e0bff717 	ldw	r2,-36(fp)
    b0b4:	18800326 	beq	r3,r2,b0c4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    b0b8:	e0bffd17 	ldw	r2,-12(fp)
    b0bc:	10800048 	cmpgei	r2,r2,1
    b0c0:	103fb51e 	bne	r2,zero,af98 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    b0c4:	e0fffa17 	ldw	r3,-24(fp)
    b0c8:	e0bffc17 	ldw	r2,-16(fp)
    b0cc:	18801926 	beq	r3,r2,b134 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b0d0:	0005303a 	rdctl	r2,status
    b0d4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b0d8:	e0fff517 	ldw	r3,-44(fp)
    b0dc:	00bfff84 	movi	r2,-2
    b0e0:	1884703a 	and	r2,r3,r2
    b0e4:	1001703a 	wrctl	status,r2
  
  return context;
    b0e8:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    b0ec:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b0f0:	e0bffb17 	ldw	r2,-20(fp)
    b0f4:	10800817 	ldw	r2,32(r2)
    b0f8:	10c00054 	ori	r3,r2,1
    b0fc:	e0bffb17 	ldw	r2,-20(fp)
    b100:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b104:	e0bffb17 	ldw	r2,-20(fp)
    b108:	10800017 	ldw	r2,0(r2)
    b10c:	11000104 	addi	r4,r2,4
    b110:	e0bffb17 	ldw	r2,-20(fp)
    b114:	10800817 	ldw	r2,32(r2)
    b118:	1007883a 	mov	r3,r2
    b11c:	2005883a 	mov	r2,r4
    b120:	10c00035 	stwio	r3,0(r2)
    b124:	e0bff917 	ldw	r2,-28(fp)
    b128:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b12c:	e0bff417 	ldw	r2,-48(fp)
    b130:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    b134:	e0fffa17 	ldw	r3,-24(fp)
    b138:	e0bffc17 	ldw	r2,-16(fp)
    b13c:	18800526 	beq	r3,r2,b154 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    b140:	e0fffa17 	ldw	r3,-24(fp)
    b144:	e0bffc17 	ldw	r2,-16(fp)
    b148:	1887c83a 	sub	r3,r3,r2
    b14c:	e0ffff15 	stw	r3,-4(fp)
    b150:	00000906 	br	b178 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    b154:	e0bffe17 	ldw	r2,-8(fp)
    b158:	1090000c 	andi	r2,r2,16384
    b15c:	1005003a 	cmpeq	r2,r2,zero
    b160:	1000031e 	bne	r2,zero,b170 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    b164:	00bffd44 	movi	r2,-11
    b168:	e0bfff15 	stw	r2,-4(fp)
    b16c:	00000206 	br	b178 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    b170:	00bffec4 	movi	r2,-5
    b174:	e0bfff15 	stw	r2,-4(fp)
    b178:	e0bfff17 	ldw	r2,-4(fp)
}
    b17c:	e037883a 	mov	sp,fp
    b180:	dfc00117 	ldw	ra,4(sp)
    b184:	df000017 	ldw	fp,0(sp)
    b188:	dec00204 	addi	sp,sp,8
    b18c:	f800283a 	ret

0000b190 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    b190:	defff204 	addi	sp,sp,-56
    b194:	dfc00d15 	stw	ra,52(sp)
    b198:	df000c15 	stw	fp,48(sp)
    b19c:	df000c04 	addi	fp,sp,48
    b1a0:	e13ffb15 	stw	r4,-20(fp)
    b1a4:	e17ffc15 	stw	r5,-16(fp)
    b1a8:	e1bffd15 	stw	r6,-12(fp)
    b1ac:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    b1b0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    b1b4:	e0bffc17 	ldw	r2,-16(fp)
    b1b8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b1bc:	00003a06 	br	b2a8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    b1c0:	e0bffb17 	ldw	r2,-20(fp)
    b1c4:	10800c17 	ldw	r2,48(r2)
    b1c8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    b1cc:	e0bffb17 	ldw	r2,-20(fp)
    b1d0:	10800d17 	ldw	r2,52(r2)
    b1d4:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    b1d8:	e0fffa17 	ldw	r3,-24(fp)
    b1dc:	e0bff917 	ldw	r2,-28(fp)
    b1e0:	1880062e 	bgeu	r3,r2,b1fc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    b1e4:	e0fff917 	ldw	r3,-28(fp)
    b1e8:	e0bffa17 	ldw	r2,-24(fp)
    b1ec:	1885c83a 	sub	r2,r3,r2
    b1f0:	10bfffc4 	addi	r2,r2,-1
    b1f4:	e0bff815 	stw	r2,-32(fp)
    b1f8:	00000c06 	br	b22c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    b1fc:	e0bff917 	ldw	r2,-28(fp)
    b200:	1005003a 	cmpeq	r2,r2,zero
    b204:	1000051e 	bne	r2,zero,b21c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    b208:	00820004 	movi	r2,2048
    b20c:	e0fffa17 	ldw	r3,-24(fp)
    b210:	10c5c83a 	sub	r2,r2,r3
    b214:	e0bff815 	stw	r2,-32(fp)
    b218:	00000406 	br	b22c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    b21c:	0081ffc4 	movi	r2,2047
    b220:	e0fffa17 	ldw	r3,-24(fp)
    b224:	10c5c83a 	sub	r2,r2,r3
    b228:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    b22c:	e0bff817 	ldw	r2,-32(fp)
    b230:	1005003a 	cmpeq	r2,r2,zero
    b234:	10001f1e 	bne	r2,zero,b2b4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    b238:	e0fffd17 	ldw	r3,-12(fp)
    b23c:	e0bff817 	ldw	r2,-32(fp)
    b240:	1880022e 	bgeu	r3,r2,b24c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    b244:	e0bffd17 	ldw	r2,-12(fp)
    b248:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    b24c:	e0bffb17 	ldw	r2,-20(fp)
    b250:	10c20e04 	addi	r3,r2,2104
    b254:	e0bffa17 	ldw	r2,-24(fp)
    b258:	1885883a 	add	r2,r3,r2
    b25c:	e0fffc17 	ldw	r3,-16(fp)
    b260:	1009883a 	mov	r4,r2
    b264:	180b883a 	mov	r5,r3
    b268:	e1bff817 	ldw	r6,-32(fp)
    b26c:	00059d00 	call	59d0 <memcpy>
      ptr   += n;
    b270:	e0fff817 	ldw	r3,-32(fp)
    b274:	e0bffc17 	ldw	r2,-16(fp)
    b278:	10c5883a 	add	r2,r2,r3
    b27c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    b280:	e0fffd17 	ldw	r3,-12(fp)
    b284:	e0bff817 	ldw	r2,-32(fp)
    b288:	1885c83a 	sub	r2,r3,r2
    b28c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b290:	e0fffa17 	ldw	r3,-24(fp)
    b294:	e0bff817 	ldw	r2,-32(fp)
    b298:	1885883a 	add	r2,r3,r2
    b29c:	10c1ffcc 	andi	r3,r2,2047
    b2a0:	e0bffb17 	ldw	r2,-20(fp)
    b2a4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b2a8:	e0bffd17 	ldw	r2,-12(fp)
    b2ac:	10800048 	cmpgei	r2,r2,1
    b2b0:	103fc31e 	bne	r2,zero,b1c0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b2b4:	0005303a 	rdctl	r2,status
    b2b8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b2bc:	e0fff517 	ldw	r3,-44(fp)
    b2c0:	00bfff84 	movi	r2,-2
    b2c4:	1884703a 	and	r2,r3,r2
    b2c8:	1001703a 	wrctl	status,r2
  
  return context;
    b2cc:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    b2d0:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    b2d4:	e0bffb17 	ldw	r2,-20(fp)
    b2d8:	10800817 	ldw	r2,32(r2)
    b2dc:	10c00094 	ori	r3,r2,2
    b2e0:	e0bffb17 	ldw	r2,-20(fp)
    b2e4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b2e8:	e0bffb17 	ldw	r2,-20(fp)
    b2ec:	10800017 	ldw	r2,0(r2)
    b2f0:	11000104 	addi	r4,r2,4
    b2f4:	e0bffb17 	ldw	r2,-20(fp)
    b2f8:	10800817 	ldw	r2,32(r2)
    b2fc:	1007883a 	mov	r3,r2
    b300:	2005883a 	mov	r2,r4
    b304:	10c00035 	stwio	r3,0(r2)
    b308:	e0bff717 	ldw	r2,-36(fp)
    b30c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b310:	e0bff417 	ldw	r2,-48(fp)
    b314:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    b318:	e0bffd17 	ldw	r2,-12(fp)
    b31c:	10800050 	cmplti	r2,r2,1
    b320:	1000111e 	bne	r2,zero,b368 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    b324:	e0bffe17 	ldw	r2,-8(fp)
    b328:	1090000c 	andi	r2,r2,16384
    b32c:	1004c03a 	cmpne	r2,r2,zero
    b330:	1000101e 	bne	r2,zero,b374 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    b334:	e0bffb17 	ldw	r2,-20(fp)
    b338:	10c00d17 	ldw	r3,52(r2)
    b33c:	e0bff917 	ldw	r2,-28(fp)
    b340:	1880051e 	bne	r3,r2,b358 <altera_avalon_jtag_uart_write+0x1c8>
    b344:	e0bffb17 	ldw	r2,-20(fp)
    b348:	10c00917 	ldw	r3,36(r2)
    b34c:	e0bffb17 	ldw	r2,-20(fp)
    b350:	10800117 	ldw	r2,4(r2)
    b354:	18bff736 	bltu	r3,r2,b334 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    b358:	e0bffb17 	ldw	r2,-20(fp)
    b35c:	10c00d17 	ldw	r3,52(r2)
    b360:	e0bff917 	ldw	r2,-28(fp)
    b364:	18800326 	beq	r3,r2,b374 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    b368:	e0bffd17 	ldw	r2,-12(fp)
    b36c:	10800048 	cmpgei	r2,r2,1
    b370:	103fcd1e 	bne	r2,zero,b2a8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    b374:	e0fffc17 	ldw	r3,-16(fp)
    b378:	e0bff617 	ldw	r2,-40(fp)
    b37c:	18800526 	beq	r3,r2,b394 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    b380:	e0fffc17 	ldw	r3,-16(fp)
    b384:	e0bff617 	ldw	r2,-40(fp)
    b388:	1887c83a 	sub	r3,r3,r2
    b38c:	e0ffff15 	stw	r3,-4(fp)
    b390:	00000906 	br	b3b8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    b394:	e0bffe17 	ldw	r2,-8(fp)
    b398:	1090000c 	andi	r2,r2,16384
    b39c:	1005003a 	cmpeq	r2,r2,zero
    b3a0:	1000031e 	bne	r2,zero,b3b0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    b3a4:	00bffd44 	movi	r2,-11
    b3a8:	e0bfff15 	stw	r2,-4(fp)
    b3ac:	00000206 	br	b3b8 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    b3b0:	00bffec4 	movi	r2,-5
    b3b4:	e0bfff15 	stw	r2,-4(fp)
    b3b8:	e0bfff17 	ldw	r2,-4(fp)
}
    b3bc:	e037883a 	mov	sp,fp
    b3c0:	dfc00117 	ldw	ra,4(sp)
    b3c4:	df000017 	ldw	fp,0(sp)
    b3c8:	dec00204 	addi	sp,sp,8
    b3cc:	f800283a 	ret

0000b3d0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    b3d0:	defffa04 	addi	sp,sp,-24
    b3d4:	dfc00515 	stw	ra,20(sp)
    b3d8:	df000415 	stw	fp,16(sp)
    b3dc:	df000404 	addi	fp,sp,16
    b3e0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    b3e4:	e0bfff17 	ldw	r2,-4(fp)
    b3e8:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    b3ec:	e0bfff17 	ldw	r2,-4(fp)
    b3f0:	10800104 	addi	r2,r2,4
    b3f4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b3f8:	0005303a 	rdctl	r2,status
    b3fc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b400:	e0fffd17 	ldw	r3,-12(fp)
    b404:	00bfff84 	movi	r2,-2
    b408:	1884703a 	and	r2,r3,r2
    b40c:	1001703a 	wrctl	status,r2
  
  return context;
    b410:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    b414:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    b418:	000bfb00 	call	bfb0 <alt_tick>
    b41c:	e0bffe17 	ldw	r2,-8(fp)
    b420:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b424:	e0bffc17 	ldw	r2,-16(fp)
    b428:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    b42c:	e037883a 	mov	sp,fp
    b430:	dfc00117 	ldw	ra,4(sp)
    b434:	df000017 	ldw	fp,0(sp)
    b438:	dec00204 	addi	sp,sp,8
    b43c:	f800283a 	ret

0000b440 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    b440:	defff804 	addi	sp,sp,-32
    b444:	dfc00715 	stw	ra,28(sp)
    b448:	df000615 	stw	fp,24(sp)
    b44c:	df000604 	addi	fp,sp,24
    b450:	e13ffc15 	stw	r4,-16(fp)
    b454:	e17ffd15 	stw	r5,-12(fp)
    b458:	e1bffe15 	stw	r6,-8(fp)
    b45c:	e1ffff15 	stw	r7,-4(fp)
    b460:	e0bfff17 	ldw	r2,-4(fp)
    b464:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    b468:	008000f4 	movhi	r2,3
    b46c:	10878804 	addi	r2,r2,7712
    b470:	10800017 	ldw	r2,0(r2)
    b474:	1004c03a 	cmpne	r2,r2,zero
    b478:	1000041e 	bne	r2,zero,b48c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    b47c:	00c000f4 	movhi	r3,3
    b480:	18c78804 	addi	r3,r3,7712
    b484:	e0bffb17 	ldw	r2,-20(fp)
    b488:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    b48c:	e0bffc17 	ldw	r2,-16(fp)
    b490:	10800104 	addi	r2,r2,4
    b494:	1007883a 	mov	r3,r2
    b498:	008001c4 	movi	r2,7
    b49c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    b4a0:	d8000015 	stw	zero,0(sp)
    b4a4:	e13ffd17 	ldw	r4,-12(fp)
    b4a8:	e17ffe17 	ldw	r5,-8(fp)
    b4ac:	01800074 	movhi	r6,1
    b4b0:	31acf404 	addi	r6,r6,-19504
    b4b4:	e1fffc17 	ldw	r7,-16(fp)
    b4b8:	000b84c0 	call	b84c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    b4bc:	e037883a 	mov	sp,fp
    b4c0:	dfc00117 	ldw	ra,4(sp)
    b4c4:	df000017 	ldw	fp,0(sp)
    b4c8:	dec00204 	addi	sp,sp,8
    b4cc:	f800283a 	ret

0000b4d0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    b4d0:	defff404 	addi	sp,sp,-48
    b4d4:	df000b15 	stw	fp,44(sp)
    b4d8:	df000b04 	addi	fp,sp,44
    b4dc:	e13ffb15 	stw	r4,-20(fp)
    b4e0:	e17ffc15 	stw	r5,-16(fp)
    b4e4:	e1bffd15 	stw	r6,-12(fp)
    b4e8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    b4ec:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    b4f0:	008000f4 	movhi	r2,3
    b4f4:	10878804 	addi	r2,r2,7712
    b4f8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    b4fc:	1005003a 	cmpeq	r2,r2,zero
    b500:	1000411e 	bne	r2,zero,b608 <alt_alarm_start+0x138>
  {
    if (alarm)
    b504:	e0bffb17 	ldw	r2,-20(fp)
    b508:	1005003a 	cmpeq	r2,r2,zero
    b50c:	10003b1e 	bne	r2,zero,b5fc <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    b510:	e0fffb17 	ldw	r3,-20(fp)
    b514:	e0bffd17 	ldw	r2,-12(fp)
    b518:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    b51c:	e0fffb17 	ldw	r3,-20(fp)
    b520:	e0bffe17 	ldw	r2,-8(fp)
    b524:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b528:	0005303a 	rdctl	r2,status
    b52c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b530:	e0fff817 	ldw	r3,-32(fp)
    b534:	00bfff84 	movi	r2,-2
    b538:	1884703a 	and	r2,r3,r2
    b53c:	1001703a 	wrctl	status,r2
  
  return context;
    b540:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    b544:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    b548:	008000f4 	movhi	r2,3
    b54c:	10878904 	addi	r2,r2,7716
    b550:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    b554:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    b558:	e0fffc17 	ldw	r3,-16(fp)
    b55c:	e0bff917 	ldw	r2,-28(fp)
    b560:	1885883a 	add	r2,r3,r2
    b564:	10c00044 	addi	r3,r2,1
    b568:	e0bffb17 	ldw	r2,-20(fp)
    b56c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    b570:	e0bffb17 	ldw	r2,-20(fp)
    b574:	10c00217 	ldw	r3,8(r2)
    b578:	e0bff917 	ldw	r2,-28(fp)
    b57c:	1880042e 	bgeu	r3,r2,b590 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    b580:	e0fffb17 	ldw	r3,-20(fp)
    b584:	00800044 	movi	r2,1
    b588:	18800405 	stb	r2,16(r3)
    b58c:	00000206 	br	b598 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    b590:	e0bffb17 	ldw	r2,-20(fp)
    b594:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    b598:	e0fffb17 	ldw	r3,-20(fp)
    b59c:	008000f4 	movhi	r2,3
    b5a0:	10877604 	addi	r2,r2,7640
    b5a4:	e0bff615 	stw	r2,-40(fp)
    b5a8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    b5ac:	e0fff717 	ldw	r3,-36(fp)
    b5b0:	e0bff617 	ldw	r2,-40(fp)
    b5b4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    b5b8:	e0bff617 	ldw	r2,-40(fp)
    b5bc:	10c00017 	ldw	r3,0(r2)
    b5c0:	e0bff717 	ldw	r2,-36(fp)
    b5c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    b5c8:	e0bff617 	ldw	r2,-40(fp)
    b5cc:	10c00017 	ldw	r3,0(r2)
    b5d0:	e0bff717 	ldw	r2,-36(fp)
    b5d4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    b5d8:	e0fff617 	ldw	r3,-40(fp)
    b5dc:	e0bff717 	ldw	r2,-36(fp)
    b5e0:	18800015 	stw	r2,0(r3)
    b5e4:	e0bffa17 	ldw	r2,-24(fp)
    b5e8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b5ec:	e0bff517 	ldw	r2,-44(fp)
    b5f0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    b5f4:	e03fff15 	stw	zero,-4(fp)
    b5f8:	00000506 	br	b610 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    b5fc:	00bffa84 	movi	r2,-22
    b600:	e0bfff15 	stw	r2,-4(fp)
    b604:	00000206 	br	b610 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    b608:	00bfde84 	movi	r2,-134
    b60c:	e0bfff15 	stw	r2,-4(fp)
    b610:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    b614:	e037883a 	mov	sp,fp
    b618:	df000017 	ldw	fp,0(sp)
    b61c:	dec00104 	addi	sp,sp,4
    b620:	f800283a 	ret

0000b624 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    b624:	deffff04 	addi	sp,sp,-4
    b628:	df000015 	stw	fp,0(sp)
    b62c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    b630:	e037883a 	mov	sp,fp
    b634:	df000017 	ldw	fp,0(sp)
    b638:	dec00104 	addi	sp,sp,4
    b63c:	f800283a 	ret

0000b640 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    b640:	defff904 	addi	sp,sp,-28
    b644:	dfc00615 	stw	ra,24(sp)
    b648:	df000515 	stw	fp,20(sp)
    b64c:	df000504 	addi	fp,sp,20
    b650:	e13ffd15 	stw	r4,-12(fp)
    b654:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    b658:	e0bffd17 	ldw	r2,-12(fp)
    b65c:	1005003a 	cmpeq	r2,r2,zero
    b660:	1000041e 	bne	r2,zero,b674 <alt_dev_llist_insert+0x34>
    b664:	e0bffd17 	ldw	r2,-12(fp)
    b668:	10800217 	ldw	r2,8(r2)
    b66c:	1004c03a 	cmpne	r2,r2,zero
    b670:	1000071e 	bne	r2,zero,b690 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    b674:	000b6f40 	call	b6f4 <alt_get_errno>
    b678:	1007883a 	mov	r3,r2
    b67c:	00800584 	movi	r2,22
    b680:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    b684:	00bffa84 	movi	r2,-22
    b688:	e0bfff15 	stw	r2,-4(fp)
    b68c:	00001306 	br	b6dc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    b690:	e0fffd17 	ldw	r3,-12(fp)
    b694:	e0bffe17 	ldw	r2,-8(fp)
    b698:	e0bffb15 	stw	r2,-20(fp)
    b69c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    b6a0:	e0fffc17 	ldw	r3,-16(fp)
    b6a4:	e0bffb17 	ldw	r2,-20(fp)
    b6a8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    b6ac:	e0bffb17 	ldw	r2,-20(fp)
    b6b0:	10c00017 	ldw	r3,0(r2)
    b6b4:	e0bffc17 	ldw	r2,-16(fp)
    b6b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    b6bc:	e0bffb17 	ldw	r2,-20(fp)
    b6c0:	10c00017 	ldw	r3,0(r2)
    b6c4:	e0bffc17 	ldw	r2,-16(fp)
    b6c8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    b6cc:	e0fffb17 	ldw	r3,-20(fp)
    b6d0:	e0bffc17 	ldw	r2,-16(fp)
    b6d4:	18800015 	stw	r2,0(r3)

  return 0;  
    b6d8:	e03fff15 	stw	zero,-4(fp)
    b6dc:	e0bfff17 	ldw	r2,-4(fp)
}
    b6e0:	e037883a 	mov	sp,fp
    b6e4:	dfc00117 	ldw	ra,4(sp)
    b6e8:	df000017 	ldw	fp,0(sp)
    b6ec:	dec00204 	addi	sp,sp,8
    b6f0:	f800283a 	ret

0000b6f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b6f4:	defffd04 	addi	sp,sp,-12
    b6f8:	dfc00215 	stw	ra,8(sp)
    b6fc:	df000115 	stw	fp,4(sp)
    b700:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b704:	008000f4 	movhi	r2,3
    b708:	10877304 	addi	r2,r2,7628
    b70c:	10800017 	ldw	r2,0(r2)
    b710:	1005003a 	cmpeq	r2,r2,zero
    b714:	1000061e 	bne	r2,zero,b730 <alt_get_errno+0x3c>
    b718:	008000f4 	movhi	r2,3
    b71c:	10877304 	addi	r2,r2,7628
    b720:	10800017 	ldw	r2,0(r2)
    b724:	103ee83a 	callr	r2
    b728:	e0bfff15 	stw	r2,-4(fp)
    b72c:	00000306 	br	b73c <alt_get_errno+0x48>
    b730:	008000f4 	movhi	r2,3
    b734:	10878304 	addi	r2,r2,7692
    b738:	e0bfff15 	stw	r2,-4(fp)
    b73c:	e0bfff17 	ldw	r2,-4(fp)
}
    b740:	e037883a 	mov	sp,fp
    b744:	dfc00117 	ldw	ra,4(sp)
    b748:	df000017 	ldw	fp,0(sp)
    b74c:	dec00204 	addi	sp,sp,8
    b750:	f800283a 	ret

0000b754 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    b754:	defffd04 	addi	sp,sp,-12
    b758:	dfc00215 	stw	ra,8(sp)
    b75c:	df000115 	stw	fp,4(sp)
    b760:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    b764:	00bfff04 	movi	r2,-4
    b768:	00c00074 	movhi	r3,1
    b76c:	18f1f904 	addi	r3,r3,-14364
    b770:	1885883a 	add	r2,r3,r2
    b774:	e0bfff15 	stw	r2,-4(fp)
    b778:	00000606 	br	b794 <_do_ctors+0x40>
        (*ctor) (); 
    b77c:	e0bfff17 	ldw	r2,-4(fp)
    b780:	10800017 	ldw	r2,0(r2)
    b784:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    b788:	e0bfff17 	ldw	r2,-4(fp)
    b78c:	10bfff04 	addi	r2,r2,-4
    b790:	e0bfff15 	stw	r2,-4(fp)
    b794:	e0ffff17 	ldw	r3,-4(fp)
    b798:	00800074 	movhi	r2,1
    b79c:	10b1f804 	addi	r2,r2,-14368
    b7a0:	18bff62e 	bgeu	r3,r2,b77c <_do_ctors+0x28>
        (*ctor) (); 
}
    b7a4:	e037883a 	mov	sp,fp
    b7a8:	dfc00117 	ldw	ra,4(sp)
    b7ac:	df000017 	ldw	fp,0(sp)
    b7b0:	dec00204 	addi	sp,sp,8
    b7b4:	f800283a 	ret

0000b7b8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    b7b8:	defffd04 	addi	sp,sp,-12
    b7bc:	dfc00215 	stw	ra,8(sp)
    b7c0:	df000115 	stw	fp,4(sp)
    b7c4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    b7c8:	00bfff04 	movi	r2,-4
    b7cc:	00c00074 	movhi	r3,1
    b7d0:	18f1f904 	addi	r3,r3,-14364
    b7d4:	1885883a 	add	r2,r3,r2
    b7d8:	e0bfff15 	stw	r2,-4(fp)
    b7dc:	00000606 	br	b7f8 <_do_dtors+0x40>
        (*dtor) (); 
    b7e0:	e0bfff17 	ldw	r2,-4(fp)
    b7e4:	10800017 	ldw	r2,0(r2)
    b7e8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    b7ec:	e0bfff17 	ldw	r2,-4(fp)
    b7f0:	10bfff04 	addi	r2,r2,-4
    b7f4:	e0bfff15 	stw	r2,-4(fp)
    b7f8:	e0ffff17 	ldw	r3,-4(fp)
    b7fc:	00800074 	movhi	r2,1
    b800:	10b1f904 	addi	r2,r2,-14364
    b804:	18bff62e 	bgeu	r3,r2,b7e0 <_do_dtors+0x28>
        (*dtor) (); 
}
    b808:	e037883a 	mov	sp,fp
    b80c:	dfc00117 	ldw	ra,4(sp)
    b810:	df000017 	ldw	fp,0(sp)
    b814:	dec00204 	addi	sp,sp,8
    b818:	f800283a 	ret

0000b81c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    b81c:	defffe04 	addi	sp,sp,-8
    b820:	dfc00115 	stw	ra,4(sp)
    b824:	df000015 	stw	fp,0(sp)
    b828:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    b82c:	0009883a 	mov	r4,zero
    b830:	01440004 	movi	r5,4096
    b834:	000c3480 	call	c348 <alt_icache_flush>
#endif
}
    b838:	e037883a 	mov	sp,fp
    b83c:	dfc00117 	ldw	ra,4(sp)
    b840:	df000017 	ldw	fp,0(sp)
    b844:	dec00204 	addi	sp,sp,8
    b848:	f800283a 	ret

0000b84c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    b84c:	defff904 	addi	sp,sp,-28
    b850:	dfc00615 	stw	ra,24(sp)
    b854:	df000515 	stw	fp,20(sp)
    b858:	df000504 	addi	fp,sp,20
    b85c:	e13ffc15 	stw	r4,-16(fp)
    b860:	e17ffd15 	stw	r5,-12(fp)
    b864:	e1bffe15 	stw	r6,-8(fp)
    b868:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    b86c:	e0800217 	ldw	r2,8(fp)
    b870:	d8800015 	stw	r2,0(sp)
    b874:	e13ffc17 	ldw	r4,-16(fp)
    b878:	e17ffd17 	ldw	r5,-12(fp)
    b87c:	e1bffe17 	ldw	r6,-8(fp)
    b880:	e1ffff17 	ldw	r7,-4(fp)
    b884:	000ba200 	call	ba20 <alt_iic_isr_register>
}  
    b888:	e037883a 	mov	sp,fp
    b88c:	dfc00117 	ldw	ra,4(sp)
    b890:	df000017 	ldw	fp,0(sp)
    b894:	dec00204 	addi	sp,sp,8
    b898:	f800283a 	ret

0000b89c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    b89c:	defff904 	addi	sp,sp,-28
    b8a0:	df000615 	stw	fp,24(sp)
    b8a4:	df000604 	addi	fp,sp,24
    b8a8:	e13ffe15 	stw	r4,-8(fp)
    b8ac:	e17fff15 	stw	r5,-4(fp)
    b8b0:	e0bfff17 	ldw	r2,-4(fp)
    b8b4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b8b8:	0005303a 	rdctl	r2,status
    b8bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b8c0:	e0fffb17 	ldw	r3,-20(fp)
    b8c4:	00bfff84 	movi	r2,-2
    b8c8:	1884703a 	and	r2,r3,r2
    b8cc:	1001703a 	wrctl	status,r2
  
  return context;
    b8d0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b8d4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    b8d8:	e0fffc17 	ldw	r3,-16(fp)
    b8dc:	00800044 	movi	r2,1
    b8e0:	10c4983a 	sll	r2,r2,r3
    b8e4:	1007883a 	mov	r3,r2
    b8e8:	008000f4 	movhi	r2,3
    b8ec:	10878704 	addi	r2,r2,7708
    b8f0:	10800017 	ldw	r2,0(r2)
    b8f4:	1886b03a 	or	r3,r3,r2
    b8f8:	008000f4 	movhi	r2,3
    b8fc:	10878704 	addi	r2,r2,7708
    b900:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b904:	008000f4 	movhi	r2,3
    b908:	10878704 	addi	r2,r2,7708
    b90c:	10800017 	ldw	r2,0(r2)
    b910:	100170fa 	wrctl	ienable,r2
    b914:	e0bffd17 	ldw	r2,-12(fp)
    b918:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b91c:	e0bffa17 	ldw	r2,-24(fp)
    b920:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b924:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    b928:	e037883a 	mov	sp,fp
    b92c:	df000017 	ldw	fp,0(sp)
    b930:	dec00104 	addi	sp,sp,4
    b934:	f800283a 	ret

0000b938 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    b938:	defff904 	addi	sp,sp,-28
    b93c:	df000615 	stw	fp,24(sp)
    b940:	df000604 	addi	fp,sp,24
    b944:	e13ffe15 	stw	r4,-8(fp)
    b948:	e17fff15 	stw	r5,-4(fp)
    b94c:	e0bfff17 	ldw	r2,-4(fp)
    b950:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b954:	0005303a 	rdctl	r2,status
    b958:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b95c:	e0fffb17 	ldw	r3,-20(fp)
    b960:	00bfff84 	movi	r2,-2
    b964:	1884703a 	and	r2,r3,r2
    b968:	1001703a 	wrctl	status,r2
  
  return context;
    b96c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b970:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    b974:	e0fffc17 	ldw	r3,-16(fp)
    b978:	00800044 	movi	r2,1
    b97c:	10c4983a 	sll	r2,r2,r3
    b980:	0084303a 	nor	r2,zero,r2
    b984:	1007883a 	mov	r3,r2
    b988:	008000f4 	movhi	r2,3
    b98c:	10878704 	addi	r2,r2,7708
    b990:	10800017 	ldw	r2,0(r2)
    b994:	1886703a 	and	r3,r3,r2
    b998:	008000f4 	movhi	r2,3
    b99c:	10878704 	addi	r2,r2,7708
    b9a0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b9a4:	008000f4 	movhi	r2,3
    b9a8:	10878704 	addi	r2,r2,7708
    b9ac:	10800017 	ldw	r2,0(r2)
    b9b0:	100170fa 	wrctl	ienable,r2
    b9b4:	e0bffd17 	ldw	r2,-12(fp)
    b9b8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b9bc:	e0bffa17 	ldw	r2,-24(fp)
    b9c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b9c4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    b9c8:	e037883a 	mov	sp,fp
    b9cc:	df000017 	ldw	fp,0(sp)
    b9d0:	dec00104 	addi	sp,sp,4
    b9d4:	f800283a 	ret

0000b9d8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    b9d8:	defffc04 	addi	sp,sp,-16
    b9dc:	df000315 	stw	fp,12(sp)
    b9e0:	df000304 	addi	fp,sp,12
    b9e4:	e13ffe15 	stw	r4,-8(fp)
    b9e8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    b9ec:	000530fa 	rdctl	r2,ienable
    b9f0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    b9f4:	e0ffff17 	ldw	r3,-4(fp)
    b9f8:	00800044 	movi	r2,1
    b9fc:	10c4983a 	sll	r2,r2,r3
    ba00:	1007883a 	mov	r3,r2
    ba04:	e0bffd17 	ldw	r2,-12(fp)
    ba08:	1884703a 	and	r2,r3,r2
    ba0c:	1004c03a 	cmpne	r2,r2,zero
}
    ba10:	e037883a 	mov	sp,fp
    ba14:	df000017 	ldw	fp,0(sp)
    ba18:	dec00104 	addi	sp,sp,4
    ba1c:	f800283a 	ret

0000ba20 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    ba20:	defff404 	addi	sp,sp,-48
    ba24:	dfc00b15 	stw	ra,44(sp)
    ba28:	df000a15 	stw	fp,40(sp)
    ba2c:	df000a04 	addi	fp,sp,40
    ba30:	e13ffb15 	stw	r4,-20(fp)
    ba34:	e17ffc15 	stw	r5,-16(fp)
    ba38:	e1bffd15 	stw	r6,-12(fp)
    ba3c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    ba40:	00bffa84 	movi	r2,-22
    ba44:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    ba48:	e0bffc17 	ldw	r2,-16(fp)
    ba4c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    ba50:	e0bff917 	ldw	r2,-28(fp)
    ba54:	10800808 	cmpgei	r2,r2,32
    ba58:	1000291e 	bne	r2,zero,bb00 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ba5c:	0005303a 	rdctl	r2,status
    ba60:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ba64:	e0fff717 	ldw	r3,-36(fp)
    ba68:	00bfff84 	movi	r2,-2
    ba6c:	1884703a 	and	r2,r3,r2
    ba70:	1001703a 	wrctl	status,r2
  
  return context;
    ba74:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    ba78:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    ba7c:	e0bff917 	ldw	r2,-28(fp)
    ba80:	00c000f4 	movhi	r3,3
    ba84:	18c79404 	addi	r3,r3,7760
    ba88:	100490fa 	slli	r2,r2,3
    ba8c:	10c7883a 	add	r3,r2,r3
    ba90:	e0bffd17 	ldw	r2,-12(fp)
    ba94:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    ba98:	e0bff917 	ldw	r2,-28(fp)
    ba9c:	00c000f4 	movhi	r3,3
    baa0:	18c79404 	addi	r3,r3,7760
    baa4:	100490fa 	slli	r2,r2,3
    baa8:	10c5883a 	add	r2,r2,r3
    baac:	10c00104 	addi	r3,r2,4
    bab0:	e0bffe17 	ldw	r2,-8(fp)
    bab4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    bab8:	e0bffd17 	ldw	r2,-12(fp)
    babc:	1005003a 	cmpeq	r2,r2,zero
    bac0:	1000051e 	bne	r2,zero,bad8 <alt_iic_isr_register+0xb8>
    bac4:	e17ff917 	ldw	r5,-28(fp)
    bac8:	e13ffb17 	ldw	r4,-20(fp)
    bacc:	000b89c0 	call	b89c <alt_ic_irq_enable>
    bad0:	e0bfff15 	stw	r2,-4(fp)
    bad4:	00000406 	br	bae8 <alt_iic_isr_register+0xc8>
    bad8:	e17ff917 	ldw	r5,-28(fp)
    badc:	e13ffb17 	ldw	r4,-20(fp)
    bae0:	000b9380 	call	b938 <alt_ic_irq_disable>
    bae4:	e0bfff15 	stw	r2,-4(fp)
    bae8:	e0bfff17 	ldw	r2,-4(fp)
    baec:	e0bffa15 	stw	r2,-24(fp)
    baf0:	e0bff817 	ldw	r2,-32(fp)
    baf4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    baf8:	e0bff617 	ldw	r2,-40(fp)
    bafc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    bb00:	e0bffa17 	ldw	r2,-24(fp)
}
    bb04:	e037883a 	mov	sp,fp
    bb08:	dfc00117 	ldw	ra,4(sp)
    bb0c:	df000017 	ldw	fp,0(sp)
    bb10:	dec00204 	addi	sp,sp,8
    bb14:	f800283a 	ret

0000bb18 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    bb18:	defff904 	addi	sp,sp,-28
    bb1c:	dfc00615 	stw	ra,24(sp)
    bb20:	df000515 	stw	fp,20(sp)
    bb24:	df000504 	addi	fp,sp,20
    bb28:	e13ffc15 	stw	r4,-16(fp)
    bb2c:	e17ffd15 	stw	r5,-12(fp)
    bb30:	e1bffe15 	stw	r6,-8(fp)
    bb34:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    bb38:	e13ffd17 	ldw	r4,-12(fp)
    bb3c:	e17ffe17 	ldw	r5,-8(fp)
    bb40:	e1bfff17 	ldw	r6,-4(fp)
    bb44:	000bd300 	call	bd30 <open>
    bb48:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    bb4c:	e0bffb17 	ldw	r2,-20(fp)
    bb50:	1004803a 	cmplt	r2,r2,zero
    bb54:	10001c1e 	bne	r2,zero,bbc8 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    bb58:	e0bffb17 	ldw	r2,-20(fp)
    bb5c:	00c000f4 	movhi	r3,3
    bb60:	18c2f004 	addi	r3,r3,3008
    bb64:	10800324 	muli	r2,r2,12
    bb68:	10c5883a 	add	r2,r2,r3
    bb6c:	10c00017 	ldw	r3,0(r2)
    bb70:	e0bffc17 	ldw	r2,-16(fp)
    bb74:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    bb78:	e0bffb17 	ldw	r2,-20(fp)
    bb7c:	00c000f4 	movhi	r3,3
    bb80:	18c2f004 	addi	r3,r3,3008
    bb84:	10800324 	muli	r2,r2,12
    bb88:	10c5883a 	add	r2,r2,r3
    bb8c:	10800104 	addi	r2,r2,4
    bb90:	10c00017 	ldw	r3,0(r2)
    bb94:	e0bffc17 	ldw	r2,-16(fp)
    bb98:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    bb9c:	e0bffb17 	ldw	r2,-20(fp)
    bba0:	00c000f4 	movhi	r3,3
    bba4:	18c2f004 	addi	r3,r3,3008
    bba8:	10800324 	muli	r2,r2,12
    bbac:	10c5883a 	add	r2,r2,r3
    bbb0:	10800204 	addi	r2,r2,8
    bbb4:	10c00017 	ldw	r3,0(r2)
    bbb8:	e0bffc17 	ldw	r2,-16(fp)
    bbbc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    bbc0:	e13ffb17 	ldw	r4,-20(fp)
    bbc4:	000a5c00 	call	a5c0 <alt_release_fd>
  }
} 
    bbc8:	e037883a 	mov	sp,fp
    bbcc:	dfc00117 	ldw	ra,4(sp)
    bbd0:	df000017 	ldw	fp,0(sp)
    bbd4:	dec00204 	addi	sp,sp,8
    bbd8:	f800283a 	ret

0000bbdc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    bbdc:	defffb04 	addi	sp,sp,-20
    bbe0:	dfc00415 	stw	ra,16(sp)
    bbe4:	df000315 	stw	fp,12(sp)
    bbe8:	df000304 	addi	fp,sp,12
    bbec:	e13ffd15 	stw	r4,-12(fp)
    bbf0:	e17ffe15 	stw	r5,-8(fp)
    bbf4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    bbf8:	010000f4 	movhi	r4,3
    bbfc:	2102f304 	addi	r4,r4,3020
    bc00:	e17ffd17 	ldw	r5,-12(fp)
    bc04:	01800044 	movi	r6,1
    bc08:	01c07fc4 	movi	r7,511
    bc0c:	000bb180 	call	bb18 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    bc10:	010000f4 	movhi	r4,3
    bc14:	2102f004 	addi	r4,r4,3008
    bc18:	e17ffe17 	ldw	r5,-8(fp)
    bc1c:	000d883a 	mov	r6,zero
    bc20:	01c07fc4 	movi	r7,511
    bc24:	000bb180 	call	bb18 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    bc28:	010000f4 	movhi	r4,3
    bc2c:	2102f604 	addi	r4,r4,3032
    bc30:	e17fff17 	ldw	r5,-4(fp)
    bc34:	01800044 	movi	r6,1
    bc38:	01c07fc4 	movi	r7,511
    bc3c:	000bb180 	call	bb18 <alt_open_fd>
}  
    bc40:	e037883a 	mov	sp,fp
    bc44:	dfc00117 	ldw	ra,4(sp)
    bc48:	df000017 	ldw	fp,0(sp)
    bc4c:	dec00204 	addi	sp,sp,8
    bc50:	f800283a 	ret

0000bc54 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    bc54:	defffc04 	addi	sp,sp,-16
    bc58:	df000315 	stw	fp,12(sp)
    bc5c:	df000304 	addi	fp,sp,12
    bc60:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    bc64:	e0bffe17 	ldw	r2,-8(fp)
    bc68:	10800217 	ldw	r2,8(r2)
    bc6c:	10d00034 	orhi	r3,r2,16384
    bc70:	e0bffe17 	ldw	r2,-8(fp)
    bc74:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bc78:	e03ffd15 	stw	zero,-12(fp)
    bc7c:	00002006 	br	bd00 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    bc80:	e0bffd17 	ldw	r2,-12(fp)
    bc84:	00c000f4 	movhi	r3,3
    bc88:	18c2f004 	addi	r3,r3,3008
    bc8c:	10800324 	muli	r2,r2,12
    bc90:	10c5883a 	add	r2,r2,r3
    bc94:	10c00017 	ldw	r3,0(r2)
    bc98:	e0bffe17 	ldw	r2,-8(fp)
    bc9c:	10800017 	ldw	r2,0(r2)
    bca0:	1880141e 	bne	r3,r2,bcf4 <alt_file_locked+0xa0>
    bca4:	e0bffd17 	ldw	r2,-12(fp)
    bca8:	00c000f4 	movhi	r3,3
    bcac:	18c2f004 	addi	r3,r3,3008
    bcb0:	10800324 	muli	r2,r2,12
    bcb4:	10c5883a 	add	r2,r2,r3
    bcb8:	10800204 	addi	r2,r2,8
    bcbc:	10800017 	ldw	r2,0(r2)
    bcc0:	1004403a 	cmpge	r2,r2,zero
    bcc4:	10000b1e 	bne	r2,zero,bcf4 <alt_file_locked+0xa0>
    bcc8:	e0bffd17 	ldw	r2,-12(fp)
    bccc:	10800324 	muli	r2,r2,12
    bcd0:	1007883a 	mov	r3,r2
    bcd4:	008000f4 	movhi	r2,3
    bcd8:	1082f004 	addi	r2,r2,3008
    bcdc:	1887883a 	add	r3,r3,r2
    bce0:	e0bffe17 	ldw	r2,-8(fp)
    bce4:	18800326 	beq	r3,r2,bcf4 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    bce8:	00bffcc4 	movi	r2,-13
    bcec:	e0bfff15 	stw	r2,-4(fp)
    bcf0:	00000a06 	br	bd1c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bcf4:	e0bffd17 	ldw	r2,-12(fp)
    bcf8:	10800044 	addi	r2,r2,1
    bcfc:	e0bffd15 	stw	r2,-12(fp)
    bd00:	008000f4 	movhi	r2,3
    bd04:	10877204 	addi	r2,r2,7624
    bd08:	10800017 	ldw	r2,0(r2)
    bd0c:	1007883a 	mov	r3,r2
    bd10:	e0bffd17 	ldw	r2,-12(fp)
    bd14:	18bfda2e 	bgeu	r3,r2,bc80 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    bd18:	e03fff15 	stw	zero,-4(fp)
    bd1c:	e0bfff17 	ldw	r2,-4(fp)
}
    bd20:	e037883a 	mov	sp,fp
    bd24:	df000017 	ldw	fp,0(sp)
    bd28:	dec00104 	addi	sp,sp,4
    bd2c:	f800283a 	ret

0000bd30 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    bd30:	defff404 	addi	sp,sp,-48
    bd34:	dfc00b15 	stw	ra,44(sp)
    bd38:	df000a15 	stw	fp,40(sp)
    bd3c:	df000a04 	addi	fp,sp,40
    bd40:	e13ffb15 	stw	r4,-20(fp)
    bd44:	e17ffc15 	stw	r5,-16(fp)
    bd48:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    bd4c:	00bfffc4 	movi	r2,-1
    bd50:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    bd54:	00bffb44 	movi	r2,-19
    bd58:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    bd5c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    bd60:	e13ffb17 	ldw	r4,-20(fp)
    bd64:	014000f4 	movhi	r5,3
    bd68:	29477004 	addi	r5,r5,7616
    bd6c:	000c0dc0 	call	c0dc <alt_find_dev>
    bd70:	e0bffa15 	stw	r2,-24(fp)
    bd74:	e0bffa17 	ldw	r2,-24(fp)
    bd78:	1004c03a 	cmpne	r2,r2,zero
    bd7c:	1000051e 	bne	r2,zero,bd94 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    bd80:	e13ffb17 	ldw	r4,-20(fp)
    bd84:	000c1700 	call	c170 <alt_find_file>
    bd88:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    bd8c:	00800044 	movi	r2,1
    bd90:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    bd94:	e0bffa17 	ldw	r2,-24(fp)
    bd98:	1005003a 	cmpeq	r2,r2,zero
    bd9c:	1000301e 	bne	r2,zero,be60 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    bda0:	e13ffa17 	ldw	r4,-24(fp)
    bda4:	000c2900 	call	c290 <alt_get_fd>
    bda8:	e0bff815 	stw	r2,-32(fp)
    bdac:	e0bff817 	ldw	r2,-32(fp)
    bdb0:	1004403a 	cmpge	r2,r2,zero
    bdb4:	1000031e 	bne	r2,zero,bdc4 <open+0x94>
    {
      status = index;
    bdb8:	e0bff817 	ldw	r2,-32(fp)
    bdbc:	e0bff715 	stw	r2,-36(fp)
    bdc0:	00002906 	br	be68 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    bdc4:	e0bff817 	ldw	r2,-32(fp)
    bdc8:	10800324 	muli	r2,r2,12
    bdcc:	1007883a 	mov	r3,r2
    bdd0:	008000f4 	movhi	r2,3
    bdd4:	1082f004 	addi	r2,r2,3008
    bdd8:	1885883a 	add	r2,r3,r2
    bddc:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    bde0:	e0fffc17 	ldw	r3,-16(fp)
    bde4:	00900034 	movhi	r2,16384
    bde8:	10bfffc4 	addi	r2,r2,-1
    bdec:	1886703a 	and	r3,r3,r2
    bdf0:	e0bff917 	ldw	r2,-28(fp)
    bdf4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    bdf8:	e0bff617 	ldw	r2,-40(fp)
    bdfc:	1004c03a 	cmpne	r2,r2,zero
    be00:	1000061e 	bne	r2,zero,be1c <open+0xec>
    be04:	e13ff917 	ldw	r4,-28(fp)
    be08:	000bc540 	call	bc54 <alt_file_locked>
    be0c:	e0bff715 	stw	r2,-36(fp)
    be10:	e0bff717 	ldw	r2,-36(fp)
    be14:	1004803a 	cmplt	r2,r2,zero
    be18:	1000131e 	bne	r2,zero,be68 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    be1c:	e0bffa17 	ldw	r2,-24(fp)
    be20:	10800317 	ldw	r2,12(r2)
    be24:	1005003a 	cmpeq	r2,r2,zero
    be28:	1000091e 	bne	r2,zero,be50 <open+0x120>
    be2c:	e0bffa17 	ldw	r2,-24(fp)
    be30:	10800317 	ldw	r2,12(r2)
    be34:	e13ff917 	ldw	r4,-28(fp)
    be38:	e17ffb17 	ldw	r5,-20(fp)
    be3c:	e1bffc17 	ldw	r6,-16(fp)
    be40:	e1fffd17 	ldw	r7,-12(fp)
    be44:	103ee83a 	callr	r2
    be48:	e0bfff15 	stw	r2,-4(fp)
    be4c:	00000106 	br	be54 <open+0x124>
    be50:	e03fff15 	stw	zero,-4(fp)
    be54:	e0bfff17 	ldw	r2,-4(fp)
    be58:	e0bff715 	stw	r2,-36(fp)
    be5c:	00000206 	br	be68 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    be60:	00bffb44 	movi	r2,-19
    be64:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    be68:	e0bff717 	ldw	r2,-36(fp)
    be6c:	1004403a 	cmpge	r2,r2,zero
    be70:	1000091e 	bne	r2,zero,be98 <open+0x168>
  {
    alt_release_fd (index);  
    be74:	e13ff817 	ldw	r4,-32(fp)
    be78:	000a5c00 	call	a5c0 <alt_release_fd>
    ALT_ERRNO = -status;
    be7c:	000beb80 	call	beb8 <alt_get_errno>
    be80:	e0fff717 	ldw	r3,-36(fp)
    be84:	00c7c83a 	sub	r3,zero,r3
    be88:	10c00015 	stw	r3,0(r2)
    return -1;
    be8c:	00bfffc4 	movi	r2,-1
    be90:	e0bffe15 	stw	r2,-8(fp)
    be94:	00000206 	br	bea0 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    be98:	e0bff817 	ldw	r2,-32(fp)
    be9c:	e0bffe15 	stw	r2,-8(fp)
    bea0:	e0bffe17 	ldw	r2,-8(fp)
}
    bea4:	e037883a 	mov	sp,fp
    bea8:	dfc00117 	ldw	ra,4(sp)
    beac:	df000017 	ldw	fp,0(sp)
    beb0:	dec00204 	addi	sp,sp,8
    beb4:	f800283a 	ret

0000beb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    beb8:	defffd04 	addi	sp,sp,-12
    bebc:	dfc00215 	stw	ra,8(sp)
    bec0:	df000115 	stw	fp,4(sp)
    bec4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bec8:	008000f4 	movhi	r2,3
    becc:	10877304 	addi	r2,r2,7628
    bed0:	10800017 	ldw	r2,0(r2)
    bed4:	1005003a 	cmpeq	r2,r2,zero
    bed8:	1000061e 	bne	r2,zero,bef4 <alt_get_errno+0x3c>
    bedc:	008000f4 	movhi	r2,3
    bee0:	10877304 	addi	r2,r2,7628
    bee4:	10800017 	ldw	r2,0(r2)
    bee8:	103ee83a 	callr	r2
    beec:	e0bfff15 	stw	r2,-4(fp)
    bef0:	00000306 	br	bf00 <alt_get_errno+0x48>
    bef4:	008000f4 	movhi	r2,3
    bef8:	10878304 	addi	r2,r2,7692
    befc:	e0bfff15 	stw	r2,-4(fp)
    bf00:	e0bfff17 	ldw	r2,-4(fp)
}
    bf04:	e037883a 	mov	sp,fp
    bf08:	dfc00117 	ldw	ra,4(sp)
    bf0c:	df000017 	ldw	fp,0(sp)
    bf10:	dec00204 	addi	sp,sp,8
    bf14:	f800283a 	ret

0000bf18 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    bf18:	defffa04 	addi	sp,sp,-24
    bf1c:	df000515 	stw	fp,20(sp)
    bf20:	df000504 	addi	fp,sp,20
    bf24:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bf28:	0005303a 	rdctl	r2,status
    bf2c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bf30:	e0fffd17 	ldw	r3,-12(fp)
    bf34:	00bfff84 	movi	r2,-2
    bf38:	1884703a 	and	r2,r3,r2
    bf3c:	1001703a 	wrctl	status,r2
  
  return context;
    bf40:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    bf44:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    bf48:	e0bfff17 	ldw	r2,-4(fp)
    bf4c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    bf50:	e0bffc17 	ldw	r2,-16(fp)
    bf54:	10c00017 	ldw	r3,0(r2)
    bf58:	e0bffc17 	ldw	r2,-16(fp)
    bf5c:	10800117 	ldw	r2,4(r2)
    bf60:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    bf64:	e0bffc17 	ldw	r2,-16(fp)
    bf68:	10c00117 	ldw	r3,4(r2)
    bf6c:	e0bffc17 	ldw	r2,-16(fp)
    bf70:	10800017 	ldw	r2,0(r2)
    bf74:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    bf78:	e0fffc17 	ldw	r3,-16(fp)
    bf7c:	e0bffc17 	ldw	r2,-16(fp)
    bf80:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    bf84:	e0fffc17 	ldw	r3,-16(fp)
    bf88:	e0bffc17 	ldw	r2,-16(fp)
    bf8c:	18800015 	stw	r2,0(r3)
    bf90:	e0bffe17 	ldw	r2,-8(fp)
    bf94:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bf98:	e0bffb17 	ldw	r2,-20(fp)
    bf9c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    bfa0:	e037883a 	mov	sp,fp
    bfa4:	df000017 	ldw	fp,0(sp)
    bfa8:	dec00104 	addi	sp,sp,4
    bfac:	f800283a 	ret

0000bfb0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    bfb0:	defffb04 	addi	sp,sp,-20
    bfb4:	dfc00415 	stw	ra,16(sp)
    bfb8:	df000315 	stw	fp,12(sp)
    bfbc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    bfc0:	d0a00e17 	ldw	r2,-32712(gp)
    bfc4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    bfc8:	d0a02117 	ldw	r2,-32636(gp)
    bfcc:	10800044 	addi	r2,r2,1
    bfd0:	d0a02115 	stw	r2,-32636(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    bfd4:	00003106 	br	c09c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    bfd8:	e0bffe17 	ldw	r2,-8(fp)
    bfdc:	10800017 	ldw	r2,0(r2)
    bfe0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    bfe4:	e0bffe17 	ldw	r2,-8(fp)
    bfe8:	10800403 	ldbu	r2,16(r2)
    bfec:	10803fcc 	andi	r2,r2,255
    bff0:	1005003a 	cmpeq	r2,r2,zero
    bff4:	1000051e 	bne	r2,zero,c00c <alt_tick+0x5c>
    bff8:	d0a02117 	ldw	r2,-32636(gp)
    bffc:	1004c03a 	cmpne	r2,r2,zero
    c000:	1000021e 	bne	r2,zero,c00c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    c004:	e0bffe17 	ldw	r2,-8(fp)
    c008:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    c00c:	e0bffe17 	ldw	r2,-8(fp)
    c010:	10c00217 	ldw	r3,8(r2)
    c014:	d0a02117 	ldw	r2,-32636(gp)
    c018:	10c01e36 	bltu	r2,r3,c094 <alt_tick+0xe4>
    c01c:	e0bffe17 	ldw	r2,-8(fp)
    c020:	10800403 	ldbu	r2,16(r2)
    c024:	10803fcc 	andi	r2,r2,255
    c028:	1004c03a 	cmpne	r2,r2,zero
    c02c:	1000191e 	bne	r2,zero,c094 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    c030:	e0bffe17 	ldw	r2,-8(fp)
    c034:	10c00317 	ldw	r3,12(r2)
    c038:	e0bffe17 	ldw	r2,-8(fp)
    c03c:	11000517 	ldw	r4,20(r2)
    c040:	183ee83a 	callr	r3
    c044:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    c048:	e0bffd17 	ldw	r2,-12(fp)
    c04c:	1004c03a 	cmpne	r2,r2,zero
    c050:	1000031e 	bne	r2,zero,c060 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    c054:	e13ffe17 	ldw	r4,-8(fp)
    c058:	000bf180 	call	bf18 <alt_alarm_stop>
    c05c:	00000d06 	br	c094 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    c060:	e0bffe17 	ldw	r2,-8(fp)
    c064:	10c00217 	ldw	r3,8(r2)
    c068:	e0bffd17 	ldw	r2,-12(fp)
    c06c:	1887883a 	add	r3,r3,r2
    c070:	e0bffe17 	ldw	r2,-8(fp)
    c074:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    c078:	e0bffe17 	ldw	r2,-8(fp)
    c07c:	10c00217 	ldw	r3,8(r2)
    c080:	d0a02117 	ldw	r2,-32636(gp)
    c084:	1880032e 	bgeu	r3,r2,c094 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    c088:	e0fffe17 	ldw	r3,-8(fp)
    c08c:	00800044 	movi	r2,1
    c090:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    c094:	e0bfff17 	ldw	r2,-4(fp)
    c098:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c09c:	d0e00e04 	addi	r3,gp,-32712
    c0a0:	e0bffe17 	ldw	r2,-8(fp)
    c0a4:	10ffcc1e 	bne	r2,r3,bfd8 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    c0a8:	e037883a 	mov	sp,fp
    c0ac:	dfc00117 	ldw	ra,4(sp)
    c0b0:	df000017 	ldw	fp,0(sp)
    c0b4:	dec00204 	addi	sp,sp,8
    c0b8:	f800283a 	ret

0000c0bc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    c0bc:	deffff04 	addi	sp,sp,-4
    c0c0:	df000015 	stw	fp,0(sp)
    c0c4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c0c8:	000170fa 	wrctl	ienable,zero
}
    c0cc:	e037883a 	mov	sp,fp
    c0d0:	df000017 	ldw	fp,0(sp)
    c0d4:	dec00104 	addi	sp,sp,4
    c0d8:	f800283a 	ret

0000c0dc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c0dc:	defff904 	addi	sp,sp,-28
    c0e0:	dfc00615 	stw	ra,24(sp)
    c0e4:	df000515 	stw	fp,20(sp)
    c0e8:	df000504 	addi	fp,sp,20
    c0ec:	e13ffd15 	stw	r4,-12(fp)
    c0f0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c0f4:	e0bffe17 	ldw	r2,-8(fp)
    c0f8:	10800017 	ldw	r2,0(r2)
    c0fc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c100:	e13ffd17 	ldw	r4,-12(fp)
    c104:	00007640 	call	764 <strlen>
    c108:	10800044 	addi	r2,r2,1
    c10c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c110:	00000d06 	br	c148 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c114:	e0bffc17 	ldw	r2,-16(fp)
    c118:	11000217 	ldw	r4,8(r2)
    c11c:	e1bffb17 	ldw	r6,-20(fp)
    c120:	e17ffd17 	ldw	r5,-12(fp)
    c124:	000c4240 	call	c424 <memcmp>
    c128:	1004c03a 	cmpne	r2,r2,zero
    c12c:	1000031e 	bne	r2,zero,c13c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c130:	e0bffc17 	ldw	r2,-16(fp)
    c134:	e0bfff15 	stw	r2,-4(fp)
    c138:	00000706 	br	c158 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c13c:	e0bffc17 	ldw	r2,-16(fp)
    c140:	10800017 	ldw	r2,0(r2)
    c144:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c148:	e0fffe17 	ldw	r3,-8(fp)
    c14c:	e0bffc17 	ldw	r2,-16(fp)
    c150:	10fff01e 	bne	r2,r3,c114 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    c154:	e03fff15 	stw	zero,-4(fp)
    c158:	e0bfff17 	ldw	r2,-4(fp)
}
    c15c:	e037883a 	mov	sp,fp
    c160:	dfc00117 	ldw	ra,4(sp)
    c164:	df000017 	ldw	fp,0(sp)
    c168:	dec00204 	addi	sp,sp,8
    c16c:	f800283a 	ret

0000c170 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    c170:	defffa04 	addi	sp,sp,-24
    c174:	dfc00515 	stw	ra,20(sp)
    c178:	df000415 	stw	fp,16(sp)
    c17c:	df000404 	addi	fp,sp,16
    c180:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    c184:	008000f4 	movhi	r2,3
    c188:	10876e04 	addi	r2,r2,7608
    c18c:	10800017 	ldw	r2,0(r2)
    c190:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c194:	00003306 	br	c264 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    c198:	e0bffd17 	ldw	r2,-12(fp)
    c19c:	11000217 	ldw	r4,8(r2)
    c1a0:	00007640 	call	764 <strlen>
    c1a4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    c1a8:	e0bffd17 	ldw	r2,-12(fp)
    c1ac:	10c00217 	ldw	r3,8(r2)
    c1b0:	e0bffc17 	ldw	r2,-16(fp)
    c1b4:	1885883a 	add	r2,r3,r2
    c1b8:	10bfffc4 	addi	r2,r2,-1
    c1bc:	10800003 	ldbu	r2,0(r2)
    c1c0:	10803fcc 	andi	r2,r2,255
    c1c4:	1080201c 	xori	r2,r2,128
    c1c8:	10bfe004 	addi	r2,r2,-128
    c1cc:	10800bd8 	cmpnei	r2,r2,47
    c1d0:	1000031e 	bne	r2,zero,c1e0 <alt_find_file+0x70>
    {
      len -= 1;
    c1d4:	e0bffc17 	ldw	r2,-16(fp)
    c1d8:	10bfffc4 	addi	r2,r2,-1
    c1dc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c1e0:	e0bffc17 	ldw	r2,-16(fp)
    c1e4:	1007883a 	mov	r3,r2
    c1e8:	e0bffe17 	ldw	r2,-8(fp)
    c1ec:	1885883a 	add	r2,r3,r2
    c1f0:	10800003 	ldbu	r2,0(r2)
    c1f4:	10803fcc 	andi	r2,r2,255
    c1f8:	1080201c 	xori	r2,r2,128
    c1fc:	10bfe004 	addi	r2,r2,-128
    c200:	10800be0 	cmpeqi	r2,r2,47
    c204:	10000a1e 	bne	r2,zero,c230 <alt_find_file+0xc0>
    c208:	e0bffc17 	ldw	r2,-16(fp)
    c20c:	1007883a 	mov	r3,r2
    c210:	e0bffe17 	ldw	r2,-8(fp)
    c214:	1885883a 	add	r2,r3,r2
    c218:	10800003 	ldbu	r2,0(r2)
    c21c:	10803fcc 	andi	r2,r2,255
    c220:	1080201c 	xori	r2,r2,128
    c224:	10bfe004 	addi	r2,r2,-128
    c228:	1004c03a 	cmpne	r2,r2,zero
    c22c:	10000a1e 	bne	r2,zero,c258 <alt_find_file+0xe8>
    c230:	e0bffd17 	ldw	r2,-12(fp)
    c234:	11000217 	ldw	r4,8(r2)
    c238:	e1bffc17 	ldw	r6,-16(fp)
    c23c:	e17ffe17 	ldw	r5,-8(fp)
    c240:	000c4240 	call	c424 <memcmp>
    c244:	1004c03a 	cmpne	r2,r2,zero
    c248:	1000031e 	bne	r2,zero,c258 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    c24c:	e0bffd17 	ldw	r2,-12(fp)
    c250:	e0bfff15 	stw	r2,-4(fp)
    c254:	00000806 	br	c278 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    c258:	e0bffd17 	ldw	r2,-12(fp)
    c25c:	10800017 	ldw	r2,0(r2)
    c260:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c264:	00c000f4 	movhi	r3,3
    c268:	18c76e04 	addi	r3,r3,7608
    c26c:	e0bffd17 	ldw	r2,-12(fp)
    c270:	10ffc91e 	bne	r2,r3,c198 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    c274:	e03fff15 	stw	zero,-4(fp)
    c278:	e0bfff17 	ldw	r2,-4(fp)
}
    c27c:	e037883a 	mov	sp,fp
    c280:	dfc00117 	ldw	ra,4(sp)
    c284:	df000017 	ldw	fp,0(sp)
    c288:	dec00204 	addi	sp,sp,8
    c28c:	f800283a 	ret

0000c290 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    c290:	defffc04 	addi	sp,sp,-16
    c294:	df000315 	stw	fp,12(sp)
    c298:	df000304 	addi	fp,sp,12
    c29c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    c2a0:	00bffa04 	movi	r2,-24
    c2a4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c2a8:	e03ffe15 	stw	zero,-8(fp)
    c2ac:	00001e06 	br	c328 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    c2b0:	e0bffe17 	ldw	r2,-8(fp)
    c2b4:	00c000f4 	movhi	r3,3
    c2b8:	18c2f004 	addi	r3,r3,3008
    c2bc:	10800324 	muli	r2,r2,12
    c2c0:	10c5883a 	add	r2,r2,r3
    c2c4:	10800017 	ldw	r2,0(r2)
    c2c8:	1004c03a 	cmpne	r2,r2,zero
    c2cc:	1000131e 	bne	r2,zero,c31c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    c2d0:	e0bffe17 	ldw	r2,-8(fp)
    c2d4:	00c000f4 	movhi	r3,3
    c2d8:	18c2f004 	addi	r3,r3,3008
    c2dc:	10800324 	muli	r2,r2,12
    c2e0:	10c7883a 	add	r3,r2,r3
    c2e4:	e0bfff17 	ldw	r2,-4(fp)
    c2e8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    c2ec:	008000f4 	movhi	r2,3
    c2f0:	10877204 	addi	r2,r2,7624
    c2f4:	10c00017 	ldw	r3,0(r2)
    c2f8:	e0bffe17 	ldw	r2,-8(fp)
    c2fc:	1880040e 	bge	r3,r2,c310 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    c300:	00c000f4 	movhi	r3,3
    c304:	18c77204 	addi	r3,r3,7624
    c308:	e0bffe17 	ldw	r2,-8(fp)
    c30c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    c310:	e0bffe17 	ldw	r2,-8(fp)
    c314:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    c318:	00000606 	br	c334 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c31c:	e0bffe17 	ldw	r2,-8(fp)
    c320:	10800044 	addi	r2,r2,1
    c324:	e0bffe15 	stw	r2,-8(fp)
    c328:	e0bffe17 	ldw	r2,-8(fp)
    c32c:	10800810 	cmplti	r2,r2,32
    c330:	103fdf1e 	bne	r2,zero,c2b0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    c334:	e0bffd17 	ldw	r2,-12(fp)
}
    c338:	e037883a 	mov	sp,fp
    c33c:	df000017 	ldw	fp,0(sp)
    c340:	dec00104 	addi	sp,sp,4
    c344:	f800283a 	ret

0000c348 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    c348:	defffb04 	addi	sp,sp,-20
    c34c:	df000415 	stw	fp,16(sp)
    c350:	df000404 	addi	fp,sp,16
    c354:	e13ffe15 	stw	r4,-8(fp)
    c358:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    c35c:	e0bfff17 	ldw	r2,-4(fp)
    c360:	10840070 	cmpltui	r2,r2,4097
    c364:	1000021e 	bne	r2,zero,c370 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    c368:	00840004 	movi	r2,4096
    c36c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    c370:	e0fffe17 	ldw	r3,-8(fp)
    c374:	e0bfff17 	ldw	r2,-4(fp)
    c378:	1885883a 	add	r2,r3,r2
    c37c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    c380:	e0bffe17 	ldw	r2,-8(fp)
    c384:	e0bffd15 	stw	r2,-12(fp)
    c388:	00000506 	br	c3a0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    c38c:	e0bffd17 	ldw	r2,-12(fp)
    c390:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    c394:	e0bffd17 	ldw	r2,-12(fp)
    c398:	10800804 	addi	r2,r2,32
    c39c:	e0bffd15 	stw	r2,-12(fp)
    c3a0:	e0fffd17 	ldw	r3,-12(fp)
    c3a4:	e0bffc17 	ldw	r2,-16(fp)
    c3a8:	18bff836 	bltu	r3,r2,c38c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    c3ac:	e0bffe17 	ldw	r2,-8(fp)
    c3b0:	108007cc 	andi	r2,r2,31
    c3b4:	1005003a 	cmpeq	r2,r2,zero
    c3b8:	1000021e 	bne	r2,zero,c3c4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    c3bc:	e0bffd17 	ldw	r2,-12(fp)
    c3c0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    c3c4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    c3c8:	e037883a 	mov	sp,fp
    c3cc:	df000017 	ldw	fp,0(sp)
    c3d0:	dec00104 	addi	sp,sp,4
    c3d4:	f800283a 	ret

0000c3d8 <atexit>:
    c3d8:	200b883a 	mov	r5,r4
    c3dc:	000d883a 	mov	r6,zero
    c3e0:	0009883a 	mov	r4,zero
    c3e4:	000f883a 	mov	r7,zero
    c3e8:	000c4981 	jmpi	c498 <__register_exitproc>

0000c3ec <exit>:
    c3ec:	defffe04 	addi	sp,sp,-8
    c3f0:	000b883a 	mov	r5,zero
    c3f4:	dc000015 	stw	r16,0(sp)
    c3f8:	dfc00115 	stw	ra,4(sp)
    c3fc:	2021883a 	mov	r16,r4
    c400:	000c5d00 	call	c5d0 <__call_exitprocs>
    c404:	008000f4 	movhi	r2,3
    c408:	10876904 	addi	r2,r2,7588
    c40c:	11000017 	ldw	r4,0(r2)
    c410:	20800f17 	ldw	r2,60(r4)
    c414:	10000126 	beq	r2,zero,c41c <exit+0x30>
    c418:	103ee83a 	callr	r2
    c41c:	8009883a 	mov	r4,r16
    c420:	000c7c00 	call	c7c0 <_exit>

0000c424 <memcmp>:
    c424:	00c000c4 	movi	r3,3
    c428:	1980032e 	bgeu	r3,r6,c438 <memcmp+0x14>
    c42c:	2144b03a 	or	r2,r4,r5
    c430:	10c4703a 	and	r2,r2,r3
    c434:	10000f26 	beq	r2,zero,c474 <memcmp+0x50>
    c438:	31ffffc4 	addi	r7,r6,-1
    c43c:	3000061e 	bne	r6,zero,c458 <memcmp+0x34>
    c440:	00000a06 	br	c46c <memcmp+0x48>
    c444:	39ffffc4 	addi	r7,r7,-1
    c448:	00bfffc4 	movi	r2,-1
    c44c:	21000044 	addi	r4,r4,1
    c450:	29400044 	addi	r5,r5,1
    c454:	38800526 	beq	r7,r2,c46c <memcmp+0x48>
    c458:	20c00003 	ldbu	r3,0(r4)
    c45c:	28800003 	ldbu	r2,0(r5)
    c460:	18bff826 	beq	r3,r2,c444 <memcmp+0x20>
    c464:	1885c83a 	sub	r2,r3,r2
    c468:	f800283a 	ret
    c46c:	0005883a 	mov	r2,zero
    c470:	f800283a 	ret
    c474:	180f883a 	mov	r7,r3
    c478:	20c00017 	ldw	r3,0(r4)
    c47c:	28800017 	ldw	r2,0(r5)
    c480:	18bfed1e 	bne	r3,r2,c438 <memcmp+0x14>
    c484:	31bfff04 	addi	r6,r6,-4
    c488:	21000104 	addi	r4,r4,4
    c48c:	29400104 	addi	r5,r5,4
    c490:	39bff936 	bltu	r7,r6,c478 <memcmp+0x54>
    c494:	003fe806 	br	c438 <memcmp+0x14>

0000c498 <__register_exitproc>:
    c498:	defffa04 	addi	sp,sp,-24
    c49c:	008000f4 	movhi	r2,3
    c4a0:	10876904 	addi	r2,r2,7588
    c4a4:	dc000015 	stw	r16,0(sp)
    c4a8:	14000017 	ldw	r16,0(r2)
    c4ac:	dd000415 	stw	r20,16(sp)
    c4b0:	2829883a 	mov	r20,r5
    c4b4:	81405217 	ldw	r5,328(r16)
    c4b8:	dcc00315 	stw	r19,12(sp)
    c4bc:	dc800215 	stw	r18,8(sp)
    c4c0:	dc400115 	stw	r17,4(sp)
    c4c4:	dfc00515 	stw	ra,20(sp)
    c4c8:	2023883a 	mov	r17,r4
    c4cc:	3027883a 	mov	r19,r6
    c4d0:	3825883a 	mov	r18,r7
    c4d4:	28002526 	beq	r5,zero,c56c <__register_exitproc+0xd4>
    c4d8:	29000117 	ldw	r4,4(r5)
    c4dc:	008007c4 	movi	r2,31
    c4e0:	11002716 	blt	r2,r4,c580 <__register_exitproc+0xe8>
    c4e4:	8800101e 	bne	r17,zero,c528 <__register_exitproc+0x90>
    c4e8:	2105883a 	add	r2,r4,r4
    c4ec:	1085883a 	add	r2,r2,r2
    c4f0:	20c00044 	addi	r3,r4,1
    c4f4:	1145883a 	add	r2,r2,r5
    c4f8:	0009883a 	mov	r4,zero
    c4fc:	15000215 	stw	r20,8(r2)
    c500:	28c00115 	stw	r3,4(r5)
    c504:	2005883a 	mov	r2,r4
    c508:	dfc00517 	ldw	ra,20(sp)
    c50c:	dd000417 	ldw	r20,16(sp)
    c510:	dcc00317 	ldw	r19,12(sp)
    c514:	dc800217 	ldw	r18,8(sp)
    c518:	dc400117 	ldw	r17,4(sp)
    c51c:	dc000017 	ldw	r16,0(sp)
    c520:	dec00604 	addi	sp,sp,24
    c524:	f800283a 	ret
    c528:	29802204 	addi	r6,r5,136
    c52c:	00800044 	movi	r2,1
    c530:	110e983a 	sll	r7,r2,r4
    c534:	30c04017 	ldw	r3,256(r6)
    c538:	2105883a 	add	r2,r4,r4
    c53c:	1085883a 	add	r2,r2,r2
    c540:	1185883a 	add	r2,r2,r6
    c544:	19c6b03a 	or	r3,r3,r7
    c548:	14802015 	stw	r18,128(r2)
    c54c:	14c00015 	stw	r19,0(r2)
    c550:	00800084 	movi	r2,2
    c554:	30c04015 	stw	r3,256(r6)
    c558:	88bfe31e 	bne	r17,r2,c4e8 <__register_exitproc+0x50>
    c55c:	30804117 	ldw	r2,260(r6)
    c560:	11c4b03a 	or	r2,r2,r7
    c564:	30804115 	stw	r2,260(r6)
    c568:	003fdf06 	br	c4e8 <__register_exitproc+0x50>
    c56c:	008000f4 	movhi	r2,3
    c570:	1087d404 	addi	r2,r2,8016
    c574:	100b883a 	mov	r5,r2
    c578:	80805215 	stw	r2,328(r16)
    c57c:	003fd606 	br	c4d8 <__register_exitproc+0x40>
    c580:	00800034 	movhi	r2,0
    c584:	10800004 	addi	r2,r2,0
    c588:	1000021e 	bne	r2,zero,c594 <__register_exitproc+0xfc>
    c58c:	013fffc4 	movi	r4,-1
    c590:	003fdc06 	br	c504 <__register_exitproc+0x6c>
    c594:	01006404 	movi	r4,400
    c598:	103ee83a 	callr	r2
    c59c:	1007883a 	mov	r3,r2
    c5a0:	103ffa26 	beq	r2,zero,c58c <__register_exitproc+0xf4>
    c5a4:	80805217 	ldw	r2,328(r16)
    c5a8:	180b883a 	mov	r5,r3
    c5ac:	18000115 	stw	zero,4(r3)
    c5b0:	18800015 	stw	r2,0(r3)
    c5b4:	80c05215 	stw	r3,328(r16)
    c5b8:	18006215 	stw	zero,392(r3)
    c5bc:	18006315 	stw	zero,396(r3)
    c5c0:	0009883a 	mov	r4,zero
    c5c4:	883fc826 	beq	r17,zero,c4e8 <__register_exitproc+0x50>
    c5c8:	003fd706 	br	c528 <__register_exitproc+0x90>

0000c5cc <register_fini>:
    c5cc:	f800283a 	ret

0000c5d0 <__call_exitprocs>:
    c5d0:	008000f4 	movhi	r2,3
    c5d4:	10876904 	addi	r2,r2,7588
    c5d8:	10800017 	ldw	r2,0(r2)
    c5dc:	defff304 	addi	sp,sp,-52
    c5e0:	df000b15 	stw	fp,44(sp)
    c5e4:	d8800115 	stw	r2,4(sp)
    c5e8:	00800034 	movhi	r2,0
    c5ec:	10800004 	addi	r2,r2,0
    c5f0:	1005003a 	cmpeq	r2,r2,zero
    c5f4:	d8800215 	stw	r2,8(sp)
    c5f8:	d8800117 	ldw	r2,4(sp)
    c5fc:	dd400815 	stw	r21,32(sp)
    c600:	dd000715 	stw	r20,28(sp)
    c604:	10805204 	addi	r2,r2,328
    c608:	dfc00c15 	stw	ra,48(sp)
    c60c:	ddc00a15 	stw	r23,40(sp)
    c610:	dd800915 	stw	r22,36(sp)
    c614:	dcc00615 	stw	r19,24(sp)
    c618:	dc800515 	stw	r18,20(sp)
    c61c:	dc400415 	stw	r17,16(sp)
    c620:	dc000315 	stw	r16,12(sp)
    c624:	282b883a 	mov	r21,r5
    c628:	2039883a 	mov	fp,r4
    c62c:	d8800015 	stw	r2,0(sp)
    c630:	2829003a 	cmpeq	r20,r5,zero
    c634:	d8800117 	ldw	r2,4(sp)
    c638:	14405217 	ldw	r17,328(r2)
    c63c:	88001026 	beq	r17,zero,c680 <__call_exitprocs+0xb0>
    c640:	ddc00017 	ldw	r23,0(sp)
    c644:	88800117 	ldw	r2,4(r17)
    c648:	8c802204 	addi	r18,r17,136
    c64c:	143fffc4 	addi	r16,r2,-1
    c650:	80000916 	blt	r16,zero,c678 <__call_exitprocs+0xa8>
    c654:	05bfffc4 	movi	r22,-1
    c658:	a000151e 	bne	r20,zero,c6b0 <__call_exitprocs+0xe0>
    c65c:	8409883a 	add	r4,r16,r16
    c660:	2105883a 	add	r2,r4,r4
    c664:	1485883a 	add	r2,r2,r18
    c668:	10c02017 	ldw	r3,128(r2)
    c66c:	a8c01126 	beq	r21,r3,c6b4 <__call_exitprocs+0xe4>
    c670:	843fffc4 	addi	r16,r16,-1
    c674:	85bff81e 	bne	r16,r22,c658 <__call_exitprocs+0x88>
    c678:	d8800217 	ldw	r2,8(sp)
    c67c:	10003126 	beq	r2,zero,c744 <__call_exitprocs+0x174>
    c680:	dfc00c17 	ldw	ra,48(sp)
    c684:	df000b17 	ldw	fp,44(sp)
    c688:	ddc00a17 	ldw	r23,40(sp)
    c68c:	dd800917 	ldw	r22,36(sp)
    c690:	dd400817 	ldw	r21,32(sp)
    c694:	dd000717 	ldw	r20,28(sp)
    c698:	dcc00617 	ldw	r19,24(sp)
    c69c:	dc800517 	ldw	r18,20(sp)
    c6a0:	dc400417 	ldw	r17,16(sp)
    c6a4:	dc000317 	ldw	r16,12(sp)
    c6a8:	dec00d04 	addi	sp,sp,52
    c6ac:	f800283a 	ret
    c6b0:	8409883a 	add	r4,r16,r16
    c6b4:	88c00117 	ldw	r3,4(r17)
    c6b8:	2105883a 	add	r2,r4,r4
    c6bc:	1445883a 	add	r2,r2,r17
    c6c0:	18ffffc4 	addi	r3,r3,-1
    c6c4:	11800217 	ldw	r6,8(r2)
    c6c8:	1c001526 	beq	r3,r16,c720 <__call_exitprocs+0x150>
    c6cc:	10000215 	stw	zero,8(r2)
    c6d0:	303fe726 	beq	r6,zero,c670 <__call_exitprocs+0xa0>
    c6d4:	00c00044 	movi	r3,1
    c6d8:	1c06983a 	sll	r3,r3,r16
    c6dc:	90804017 	ldw	r2,256(r18)
    c6e0:	8cc00117 	ldw	r19,4(r17)
    c6e4:	1884703a 	and	r2,r3,r2
    c6e8:	10001426 	beq	r2,zero,c73c <__call_exitprocs+0x16c>
    c6ec:	90804117 	ldw	r2,260(r18)
    c6f0:	1884703a 	and	r2,r3,r2
    c6f4:	10000c1e 	bne	r2,zero,c728 <__call_exitprocs+0x158>
    c6f8:	2105883a 	add	r2,r4,r4
    c6fc:	1485883a 	add	r2,r2,r18
    c700:	11400017 	ldw	r5,0(r2)
    c704:	e009883a 	mov	r4,fp
    c708:	303ee83a 	callr	r6
    c70c:	88800117 	ldw	r2,4(r17)
    c710:	98bfc81e 	bne	r19,r2,c634 <__call_exitprocs+0x64>
    c714:	b8800017 	ldw	r2,0(r23)
    c718:	147fd526 	beq	r2,r17,c670 <__call_exitprocs+0xa0>
    c71c:	003fc506 	br	c634 <__call_exitprocs+0x64>
    c720:	8c000115 	stw	r16,4(r17)
    c724:	003fea06 	br	c6d0 <__call_exitprocs+0x100>
    c728:	2105883a 	add	r2,r4,r4
    c72c:	1485883a 	add	r2,r2,r18
    c730:	11000017 	ldw	r4,0(r2)
    c734:	303ee83a 	callr	r6
    c738:	003ff406 	br	c70c <__call_exitprocs+0x13c>
    c73c:	303ee83a 	callr	r6
    c740:	003ff206 	br	c70c <__call_exitprocs+0x13c>
    c744:	88800117 	ldw	r2,4(r17)
    c748:	1000081e 	bne	r2,zero,c76c <__call_exitprocs+0x19c>
    c74c:	89000017 	ldw	r4,0(r17)
    c750:	20000726 	beq	r4,zero,c770 <__call_exitprocs+0x1a0>
    c754:	b9000015 	stw	r4,0(r23)
    c758:	8809883a 	mov	r4,r17
    c75c:	00000000 	call	0 <__alt_mem_ins_mem0>
    c760:	bc400017 	ldw	r17,0(r23)
    c764:	883fb71e 	bne	r17,zero,c644 <__call_exitprocs+0x74>
    c768:	003fc506 	br	c680 <__call_exitprocs+0xb0>
    c76c:	89000017 	ldw	r4,0(r17)
    c770:	882f883a 	mov	r23,r17
    c774:	2023883a 	mov	r17,r4
    c778:	883fb21e 	bne	r17,zero,c644 <__call_exitprocs+0x74>
    c77c:	003fc006 	br	c680 <__call_exitprocs+0xb0>

0000c780 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    c780:	defffd04 	addi	sp,sp,-12
    c784:	df000215 	stw	fp,8(sp)
    c788:	df000204 	addi	fp,sp,8
    c78c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    c790:	e0bfff17 	ldw	r2,-4(fp)
    c794:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    c798:	e0bffe17 	ldw	r2,-8(fp)
    c79c:	1005003a 	cmpeq	r2,r2,zero
    c7a0:	1000021e 	bne	r2,zero,c7ac <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    c7a4:	002af070 	cmpltui	zero,zero,43969
    c7a8:	00000106 	br	c7b0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    c7ac:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    c7b0:	e037883a 	mov	sp,fp
    c7b4:	df000017 	ldw	fp,0(sp)
    c7b8:	dec00104 	addi	sp,sp,4
    c7bc:	f800283a 	ret

0000c7c0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    c7c0:	defffd04 	addi	sp,sp,-12
    c7c4:	dfc00215 	stw	ra,8(sp)
    c7c8:	df000115 	stw	fp,4(sp)
    c7cc:	df000104 	addi	fp,sp,4
    c7d0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    c7d4:	e13fff17 	ldw	r4,-4(fp)
    c7d8:	000c7800 	call	c780 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    c7dc:	003fff06 	br	c7dc <_exit+0x1c>
    c7e0:	0000c5cc 	andi	zero,zero,791
